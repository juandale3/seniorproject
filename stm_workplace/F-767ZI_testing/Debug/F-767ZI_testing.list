
F-767ZI_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004ad0  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004b70  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000738  2000014c  08004c10  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000884  08004c10  00020884  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00012ee8  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000028ff  00000000  00000000  000330a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000de8  00000000  00000000  000359a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000aaf  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028c51  00000000  00000000  0003723f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00011a5d  00000000  00000000  0005fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa0f4  00000000  00000000  000718ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000039a0  00000000  00000000  0016b9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000076  00000000  00000000  0016f384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004a80 	.word	0x08004a80

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004a80 	.word	0x08004a80

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fd1c 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f817 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f963 	bl	800080c <MX_GPIO_Init>
  MX_ETH_Init();
 8000546:	f000 f885 	bl	8000654 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054a:	f000 f931 	bl	80007b0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f8cf 	bl	80006f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000552:	f000 f8fd 	bl	8000750 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t seconds = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  sprintf(tx_buffer,"Seconds: %u\r\n", seconds);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer, 15, HAL_MAX_DELAY);
	  accessPumpData(&huart3);
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x38>)
 800055c:	f000 f9fe 	bl	800095c <accessPumpData>
	  HAL_Delay(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 fd64 	bl	8001030 <HAL_Delay>
	  accessPumpData(&huart3);
 8000568:	e7f7      	b.n	800055a <main+0x26>
 800056a:	bf00      	nop
 800056c:	200002d8 	.word	0x200002d8

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fa44 	bl	8004a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000594:	f001 fd48 	bl	8002028 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <SystemClock_Config+0xdc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a2b      	ldr	r2, [pc, #172]	; (800064c <SystemClock_Config+0xdc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xdc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xe0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b8:	4a25      	ldr	r2, [pc, #148]	; (8000650 <SystemClock_Config+0xe0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e4:	2360      	movs	r3, #96	; 0x60
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fd75 	bl	80020e8 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000604:	f000 f9a4 	bl	8000950 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000608:	f001 fd1e 	bl	8002048 <HAL_PWREx_EnableOverDrive>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000612:	f000 f99d 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2103      	movs	r1, #3
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f806 	bl	8002644 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800063e:	f000 f987 	bl	8000950 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ETH_Init+0x84>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_ETH_Init+0x88>)
 800065c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ETH_Init+0x8c>)
 800066c:	22e1      	movs	r2, #225	; 0xe1
 800066e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000672:	2200      	movs	r2, #0
 8000674:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_ETH_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_ETH_Init+0x84>)
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000686:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ETH_Init+0x84>)
 800068a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800068e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ETH_Init+0x84>)
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_ETH_Init+0x90>)
 8000694:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_ETH_Init+0x84>)
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_ETH_Init+0x94>)
 800069a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ETH_Init+0x84>)
 800069e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ETH_Init+0x84>)
 80006a6:	f000 fe8b 	bl	80013c0 <HAL_ETH_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 f94e 	bl	8000950 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b4:	2238      	movs	r2, #56	; 0x38
 80006b6:	2100      	movs	r1, #0
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_ETH_Init+0x98>)
 80006ba:	f004 f9a7 	bl	8004a0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_ETH_Init+0x98>)
 80006c0:	2221      	movs	r2, #33	; 0x21
 80006c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_ETH_Init+0x98>)
 80006c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_ETH_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001a0 	.word	0x200001a0
 80006dc:	40028000 	.word	0x40028000
 80006e0:	20000868 	.word	0x20000868
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000168 	.word	0x20000168

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <MX_USART2_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000734:	f002 fdd4 	bl	80032e0 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f907 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000250 	.word	0x20000250
 800074c:	40004400 	.word	0x40004400

08000750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART3_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800075c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000794:	f002 fda4 	bl	80032e0 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8d7 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200002d8 	.word	0x200002d8
 80007ac:	40004800 	.word	0x40004800

080007b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2206      	movs	r2, #6
 80007c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	f001 facf 	bl	8001d96 <HAL_PCD_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8a7 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000360 	.word	0x20000360

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a46      	ldr	r2, [pc, #280]	; (8000940 <MX_GPIO_Init+0x134>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b44      	ldr	r3, [pc, #272]	; (8000940 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b41      	ldr	r3, [pc, #260]	; (8000940 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a40      	ldr	r2, [pc, #256]	; (8000940 <MX_GPIO_Init+0x134>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <MX_GPIO_Init+0x134>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <MX_GPIO_Init+0x134>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <MX_GPIO_Init+0x134>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_GPIO_Init+0x134>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_GPIO_Init+0x138>)
 80008ba:	f001 fa53 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	4821      	ldr	r0, [pc, #132]	; (8000948 <MX_GPIO_Init+0x13c>)
 80008c4:	f001 fa4e 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <MX_GPIO_Init+0x140>)
 80008e0:	f001 f894 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_GPIO_Init+0x138>)
 80008fe:	f001 f885 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <MX_GPIO_Init+0x13c>)
 800091a:	f001 f877 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_GPIO_Init+0x13c>)
 8000932:	f001 f86b 	bl	8001a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400
 8000948:	40021800 	.word	0x40021800
 800094c:	40020800 	.word	0x40020800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <accessPumpData>:
#define NIBBLE_MERGE(MSN,LSN)	((MSN<<4)|(LSN))

uint8_t tx_frame[TRANSMIT_SIZE];


void accessPumpData(UART_HandleTypeDef* huart){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	 // Initialize tx_frame with Start of TX (STX)
	tx_frame[0] = STX;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <accessPumpData+0x78>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]

    // TEXT
	// Analog data read command is M20
    memcpy(&tx_frame[1], "M20", 3);	// Assign 'M', '2', '0' at indices 1, 2, 3 using memcpy
 800096a:	2203      	movs	r2, #3
 800096c:	491a      	ldr	r1, [pc, #104]	; (80009d8 <accessPumpData+0x7c>)
 800096e:	481b      	ldr	r0, [pc, #108]	; (80009dc <accessPumpData+0x80>)
 8000970:	f004 f878 	bl	8004a64 <memcpy>
    // Analog data acquisition bits
    tx_frame[4] = '0';
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <accessPumpData+0x78>)
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	711a      	strb	r2, [r3, #4]
    tx_frame[5] = '0';
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <accessPumpData+0x78>)
 800097c:	2230      	movs	r2, #48	; 0x30
 800097e:	715a      	strb	r2, [r3, #5]
    tx_frame[6] = '0';
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <accessPumpData+0x78>)
 8000982:	2230      	movs	r2, #48	; 0x30
 8000984:	719a      	strb	r2, [r3, #6]
    tx_frame[7] = '0';
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <accessPumpData+0x78>)
 8000988:	2230      	movs	r2, #48	; 0x30
 800098a:	71da      	strb	r2, [r3, #7]
    tx_frame[8] = '0';
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <accessPumpData+0x78>)
 800098e:	2230      	movs	r2, #48	; 0x30
 8000990:	721a      	strb	r2, [r3, #8]
    tx_frame[9] = '0';
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <accessPumpData+0x78>)
 8000994:	2230      	movs	r2, #48	; 0x30
 8000996:	725a      	strb	r2, [r3, #9]
    //tx_frame[10] = '9';
    //tx_frame[11] = convertToAscii(0x0E);
    tx_frame[10] = '0';
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <accessPumpData+0x78>)
 800099a:	2230      	movs	r2, #48	; 0x30
 800099c:	729a      	strb	r2, [r3, #10]
    tx_frame[11] = convertToAscii(0x01);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f81e 	bl	80009e0 <convertToAscii>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <accessPumpData+0x78>)
 80009aa:	72da      	strb	r2, [r3, #11]
    // End of TX
    tx_frame[12] = ETX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <accessPumpData+0x78>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	731a      	strb	r2, [r3, #12]

    //checksum
    pumpChecksum();
 80009b2:	f000 f829 	bl	8000a08 <pumpChecksum>

    // End of Frame
    tx_frame[15] = CR;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <accessPumpData+0x78>)
 80009b8:	220d      	movs	r2, #13
 80009ba:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit(huart, &tx_frame[0], TRANSMIT_SIZE, HAL_MAX_DELAY);
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	2210      	movs	r2, #16
 80009c2:	4904      	ldr	r1, [pc, #16]	; (80009d4 <accessPumpData+0x78>)
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f002 fcd9 	bl	800337c <HAL_UART_Transmit>
	return;
 80009ca:	bf00      	nop
}
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000870 	.word	0x20000870
 80009d8:	08004a98 	.word	0x08004a98
 80009dc:	20000871 	.word	0x20000871

080009e0 <convertToAscii>:

char convertToAscii(char character){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	if((uint8_t) character <= 0x0F){
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d803      	bhi.n	80009f8 <convertToAscii+0x18>
		return	character + 0x30;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	3330      	adds	r3, #48	; 0x30
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	e000      	b.n	80009fa <convertToAscii+0x1a>
	}else{
		return	character;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <pumpChecksum>:

void pumpChecksum(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i <= 12; i++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	e00a      	b.n	8000a2e <pumpChecksum+0x26>
		sum +=tx_frame[i];
 8000a18:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <pumpChecksum+0x68>)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	4413      	add	r3, r2
 8000a26:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i <= 12; i++){
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b0c      	cmp	r3, #12
 8000a32:	ddf1      	ble.n	8000a18 <pumpChecksum+0x10>
	}
	tx_frame[13] = convertToAscii((sum>>4)&0x000F);
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f003 030f 	and.w	r3, r3, #15
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffcc 	bl	80009e0 <convertToAscii>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <pumpChecksum+0x68>)
 8000a4e:	735a      	strb	r2, [r3, #13]
	tx_frame[14] = convertToAscii(sum&0x000F);
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ffc0 	bl	80009e0 <convertToAscii>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <pumpChecksum+0x68>)
 8000a66:	739a      	strb	r2, [r3, #14]

	return;
 8000a68:	bf00      	nop
}
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000870 	.word	0x20000870

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <HAL_ETH_MspInit+0x158>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	f040 8096 	bne.w	8000c0c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a4c      	ldr	r2, [pc, #304]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a46      	ldr	r2, [pc, #280]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a40      	ldr	r2, [pc, #256]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a34      	ldr	r2, [pc, #208]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b88:	2332      	movs	r3, #50	; 0x32
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481e      	ldr	r0, [pc, #120]	; (8000c1c <HAL_ETH_MspInit+0x160>)
 8000ba4:	f000 ff32 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ba8:	2386      	movs	r3, #134	; 0x86
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4817      	ldr	r0, [pc, #92]	; (8000c20 <HAL_ETH_MspInit+0x164>)
 8000bc4:	f000 ff22 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <HAL_ETH_MspInit+0x168>)
 8000be6:	f000 ff11 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4808      	ldr	r0, [pc, #32]	; (8000c28 <HAL_ETH_MspInit+0x16c>)
 8000c08:	f000 ff00 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40028000 	.word	0x40028000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021800 	.word	0x40021800

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0b0      	sub	sp, #192	; 0xc0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2290      	movs	r2, #144	; 0x90
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fedd 	bl	8004a0c <memset>
  if(huart->Instance==USART2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a4a      	ldr	r2, [pc, #296]	; (8000d80 <HAL_UART_MspInit+0x154>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d143      	bne.n	8000ce4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 ff11 	bl	8002a90 <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c74:	f7ff fe6c 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a41      	ldr	r2, [pc, #260]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c90:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a3b      	ldr	r2, [pc, #236]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ca8:	2360      	movs	r3, #96	; 0x60
 8000caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cca:	4619      	mov	r1, r3
 8000ccc:	482e      	ldr	r0, [pc, #184]	; (8000d88 <HAL_UART_MspInit+0x15c>)
 8000cce:	f000 fe9d 	bl	8001a0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2026      	movs	r0, #38	; 0x26
 8000cd8:	f000 faa9 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cdc:	2026      	movs	r0, #38	; 0x26
 8000cde:	f000 fac2 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce2:	e049      	b.n	8000d78 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <HAL_UART_MspInit+0x160>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d144      	bne.n	8000d78 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fec7 	bl	8002a90 <HAL_RCCEx_PeriphCLKConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000d08:	f7ff fe22 	bl	8000950 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0x158>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d56:	2307      	movs	r3, #7
 8000d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d60:	4619      	mov	r1, r3
 8000d62:	4809      	ldr	r0, [pc, #36]	; (8000d88 <HAL_UART_MspInit+0x15c>)
 8000d64:	f000 fe52 	bl	8001a0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2027      	movs	r0, #39	; 0x27
 8000d6e:	f000 fa5e 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d72:	2027      	movs	r0, #39	; 0x27
 8000d74:	f000 fa77 	bl	8001266 <HAL_NVIC_EnableIRQ>
}
 8000d78:	bf00      	nop
 8000d7a:	37c0      	adds	r7, #192	; 0xc0
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40004800 	.word	0x40004800

08000d90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0ae      	sub	sp, #184	; 0xb8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2290      	movs	r2, #144	; 0x90
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fe2b 	bl	8004a0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dbe:	d159      	bne.n	8000e74 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dc4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fe5d 	bl	8002a90 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ddc:	f7ff fdb8 	bl	8000950 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000df8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e12:	230a      	movs	r3, #10
 8000e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <HAL_PCD_MspInit+0xf0>)
 8000e20:	f000 fdf4 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4810      	ldr	r0, [pc, #64]	; (8000e80 <HAL_PCD_MspInit+0xf0>)
 8000e40:	f000 fde4 	bl	8001a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4e:	6353      	str	r3, [r2, #52]	; 0x34
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6453      	str	r3, [r2, #68]	; 0x44
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <HAL_PCD_MspInit+0xec>)
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	37b8      	adds	r7, #184	; 0xb8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f88e 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <USART2_IRQHandler+0x10>)
 8000ede:	f002 fad1 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000250 	.word	0x20000250

08000eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USART3_IRQHandler+0x10>)
 8000ef2:	f002 fac7 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200002d8 	.word	0x200002d8

08000f00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f003 fd63 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff faed 	bl	8000534 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f68:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8000f6c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000f70:	20000884 	.word	0x20000884

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>

08000f76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f94c 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 f805 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f86:	f7ff fd75 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f967 	bl	8001282 <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f92f 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000880 	.word	0x20000880

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000880 	.word	0x20000880

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff29 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff3e 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff8e 	bl	800116c <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff31 	bl	80010dc <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa2 	bl	80011d4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff feb6 	bl	8001018 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d008      	beq.n	80012cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e052      	b.n	8001372 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0216 	bic.w	r2, r2, #22
 80012da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d103      	bne.n	80012fc <HAL_DMA_Abort+0x62>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0208 	bic.w	r2, r2, #8
 800130a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	e013      	b.n	8001346 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131e:	f7ff fe7b 	bl	8001018 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b05      	cmp	r3, #5
 800132a:	d90c      	bls.n	8001346 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e015      	b.n	8001372 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e4      	bne.n	800131e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	223f      	movs	r2, #63	; 0x3f
 800135a:	409a      	lsls	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d004      	beq.n	8001398 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e00c      	b.n	80013b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2205      	movs	r2, #5
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e06a      	b.n	80014a8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d106      	bne.n	80013ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2223      	movs	r2, #35	; 0x23
 80013e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fb69 	bl	8000abc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <HAL_ETH_Init+0xf0>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <HAL_ETH_Init+0xf0>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_ETH_Init+0xf0>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <HAL_ETH_Init+0xf4>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <HAL_ETH_Init+0xf4>)
 8001408:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800140c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_ETH_Init+0xf4>)
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	4927      	ldr	r1, [pc, #156]	; (80014b4 <HAL_ETH_Init+0xf4>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_ETH_Init+0xf4>)
 800141e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001436:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001438:	f7ff fdee 	bl	8001018 <HAL_GetTick>
 800143c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800143e:	e011      	b.n	8001464 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001440:	f7ff fdea 	bl	8001018 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800144e:	d909      	bls.n	8001464 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2204      	movs	r2, #4
 8001454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	22e0      	movs	r2, #224	; 0xe0
 800145c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e021      	b.n	80014a8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1e4      	bne.n	8001440 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f958 	bl	800172c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f9ff 	bl	8001880 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa55 	bl	8001932 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	461a      	mov	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f9bd 	bl	8001810 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2210      	movs	r2, #16
 80014a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40013800 	.word	0x40013800

080014b8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4b51      	ldr	r3, [pc, #324]	; (8001614 <ETH_SetMACConfig+0x15c>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	7c1b      	ldrb	r3, [r3, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <ETH_SetMACConfig+0x28>
 80014da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014de:	e000      	b.n	80014e2 <ETH_SetMACConfig+0x2a>
 80014e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	7c5b      	ldrb	r3, [r3, #17]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <ETH_SetMACConfig+0x38>
 80014ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ee:	e000      	b.n	80014f2 <ETH_SetMACConfig+0x3a>
 80014f0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	7fdb      	ldrb	r3, [r3, #31]
 80014fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001500:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001506:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	7f92      	ldrb	r2, [r2, #30]
 800150c:	2a00      	cmp	r2, #0
 800150e:	d102      	bne.n	8001516 <ETH_SetMACConfig+0x5e>
 8001510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001514:	e000      	b.n	8001518 <ETH_SetMACConfig+0x60>
 8001516:	2200      	movs	r2, #0
                        macconf->Speed |
 8001518:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7f1b      	ldrb	r3, [r3, #28]
 800151e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001520:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001526:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800152e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d102      	bne.n	8001540 <ETH_SetMACConfig+0x88>
 800153a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153e:	e000      	b.n	8001542 <ETH_SetMACConfig+0x8a>
 8001540:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001542:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	7bdb      	ldrb	r3, [r3, #15]
 8001548:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800154a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001558:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800155a:	4313      	orrs	r3, r2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff fd5c 	bl	8001030 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001596:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d101      	bne.n	80015a6 <ETH_SetMACConfig+0xee>
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0xf0>
 80015a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015b6:	2a01      	cmp	r2, #1
 80015b8:	d101      	bne.n	80015be <ETH_SetMACConfig+0x106>
 80015ba:	2208      	movs	r2, #8
 80015bc:	e000      	b.n	80015c0 <ETH_SetMACConfig+0x108>
 80015be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d101      	bne.n	80015d0 <ETH_SetMACConfig+0x118>
 80015cc:	2204      	movs	r2, #4
 80015ce:	e000      	b.n	80015d2 <ETH_SetMACConfig+0x11a>
 80015d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d101      	bne.n	80015e2 <ETH_SetMACConfig+0x12a>
 80015de:	2202      	movs	r2, #2
 80015e0:	e000      	b.n	80015e4 <ETH_SetMACConfig+0x12c>
 80015e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015e4:	4313      	orrs	r3, r2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd17 	bl	8001030 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	ff20810f 	.word	0xff20810f

08001618 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <ETH_SetDMAConfig+0x110>)
 8001632:	4013      	ands	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	7b1b      	ldrb	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <ETH_SetDMAConfig+0x2c>
 800163e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001642:	e000      	b.n	8001646 <ETH_SetDMAConfig+0x2e>
 8001644:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	7b5b      	ldrb	r3, [r3, #13]
 800164a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800164c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	7f52      	ldrb	r2, [r2, #29]
 8001652:	2a00      	cmp	r2, #0
 8001654:	d102      	bne.n	800165c <ETH_SetDMAConfig+0x44>
 8001656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800165a:	e000      	b.n	800165e <ETH_SetDMAConfig+0x46>
 800165c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800165e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7b9b      	ldrb	r3, [r3, #14]
 8001664:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001666:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800166c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	7f1b      	ldrb	r3, [r3, #28]
 8001672:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001674:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	7f9b      	ldrb	r3, [r3, #30]
 800167a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800167c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001682:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800168a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800168c:	4313      	orrs	r3, r2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fcbe 	bl	8001030 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016bc:	461a      	mov	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fc8f 	bl	8001030 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	f8de3f23 	.word	0xf8de3f23

0800172c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0a6      	sub	sp, #152	; 0x98
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001768:	2300      	movs	r3, #0
 800176a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001772:	2300      	movs	r3, #0
 8001774:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800178e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001798:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a4:	4619      	mov	r1, r3
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fe86 	bl	80014b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017d8:	2301      	movs	r3, #1
 80017da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff08 	bl	8001618 <ETH_SetDMAConfig>
}
 8001808:	bf00      	nop
 800180a:	3798      	adds	r7, #152	; 0x98
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3305      	adds	r3, #5
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	3204      	adds	r2, #4
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <ETH_MACAddressConfig+0x68>)
 8001832:	4413      	add	r3, r2
 8001834:	461a      	mov	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3303      	adds	r3, #3
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	061a      	lsls	r2, r3, #24
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3302      	adds	r3, #2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3301      	adds	r3, #1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	4313      	orrs	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <ETH_MACAddressConfig+0x6c>)
 8001862:	4413      	add	r3, r2
 8001864:	461a      	mov	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40028040 	.word	0x40028040
 800187c:	40028044 	.word	0x40028044

08001880 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e03e      	b.n	800190c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68d9      	ldr	r1, [r3, #12]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	3206      	adds	r2, #6
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d80c      	bhi.n	80018f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68d9      	ldr	r1, [r3, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	461a      	mov	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	e004      	b.n	80018fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3301      	adds	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d9bd      	bls.n	800188e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001924:	611a      	str	r2, [r3, #16]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e046      	b.n	80019ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6919      	ldr	r1, [r3, #16]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800197c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001984:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	3212      	adds	r2, #18
 800199a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d80c      	bhi.n	80019be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6919      	ldr	r1, [r3, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	461a      	mov	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	e004      	b.n	80019c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d9b5      	bls.n	8001940 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fe:	60da      	str	r2, [r3, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e175      	b.n	8001d18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8164 	bne.w	8001d12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x56>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80be 	beq.w	8001d12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a65      	ldr	r2, [pc, #404]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bae:	4a61      	ldr	r2, [pc, #388]	; (8001d34 <HAL_GPIO_Init+0x328>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_GPIO_Init+0x32c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d037      	beq.n	8001c4a <HAL_GPIO_Init+0x23e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a57      	ldr	r2, [pc, #348]	; (8001d3c <HAL_GPIO_Init+0x330>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d031      	beq.n	8001c46 <HAL_GPIO_Init+0x23a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a56      	ldr	r2, [pc, #344]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x236>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a55      	ldr	r2, [pc, #340]	; (8001d44 <HAL_GPIO_Init+0x338>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x232>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a54      	ldr	r2, [pc, #336]	; (8001d48 <HAL_GPIO_Init+0x33c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x22e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a53      	ldr	r2, [pc, #332]	; (8001d4c <HAL_GPIO_Init+0x340>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x22a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_GPIO_Init+0x344>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_GPIO_Init+0x348>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x222>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a50      	ldr	r2, [pc, #320]	; (8001d58 <HAL_GPIO_Init+0x34c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x21e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	; (8001d5c <HAL_GPIO_Init+0x350>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x21a>
 8001c22:	2309      	movs	r3, #9
 8001c24:	e012      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c26:	230a      	movs	r3, #10
 8001c28:	e010      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	e00e      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00c      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c32:	2306      	movs	r3, #6
 8001c34:	e00a      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c5c:	4935      	ldr	r1, [pc, #212]	; (8001d34 <HAL_GPIO_Init+0x328>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbe:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_GPIO_Init+0x354>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f ae86 	bls.w	8001a2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40021c00 	.word	0x40021c00
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40022400 	.word	0x40022400
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d98:	b08f      	sub	sp, #60	; 0x3c
 8001d9a:	af0a      	add	r7, sp, #40	; 0x28
 8001d9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e116      	b.n	8001fd6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe ffe4 	bl	8000d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fb74 	bl	80044d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	687e      	ldr	r6, [r7, #4]
 8001df4:	466d      	mov	r5, sp
 8001df6:	f106 0410 	add.w	r4, r6, #16
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e0a:	1d33      	adds	r3, r6, #4
 8001e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0e:	6838      	ldr	r0, [r7, #0]
 8001e10:	f002 fb08 	bl	8004424 <USB_CoreInit>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0d7      	b.n	8001fd6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 fb62 	bl	80044f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e04a      	b.n	8001ece <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	333d      	adds	r3, #61	; 0x3d
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	333c      	adds	r3, #60	; 0x3c
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	b298      	uxth	r0, r3
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3344      	adds	r3, #68	; 0x44
 8001e74:	4602      	mov	r2, r0
 8001e76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3340      	adds	r3, #64	; 0x40
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3348      	adds	r3, #72	; 0x48
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	334c      	adds	r3, #76	; 0x4c
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3354      	adds	r3, #84	; 0x54
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3af      	bcc.n	8001e38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e044      	b.n	8001f68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	3301      	adds	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3b5      	bcc.n	8001ede <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	687e      	ldr	r6, [r7, #4]
 8001f7a:	466d      	mov	r5, sp
 8001f7c:	f106 0410 	add.w	r4, r6, #16
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f90:	1d33      	adds	r3, r6, #4
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f002 fafb 	bl	8004590 <USB_DevInit>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e014      	b.n	8001fd6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f80b 	bl	8001fe0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fcb9 	bl	8004946 <USB_DevDisconnect>

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fe0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PCDEx_ActivateLPM+0x44>)
 8002010:	4313      	orrs	r3, r2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	10000003 	.word	0x10000003

08002028 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40007000 	.word	0x40007000

08002048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002076:	f7fe ffcf 	bl	8001018 <HAL_GetTick>
 800207a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800207c:	e009      	b.n	8002092 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800207e:	f7fe ffcb 	bl	8001018 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800208c:	d901      	bls.n	8002092 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e022      	b.n	80020d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d1ee      	bne.n	800207e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ac:	f7fe ffb4 	bl	8001018 <HAL_GetTick>
 80020b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020b2:	e009      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020b4:	f7fe ffb0 	bl	8001018 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c2:	d901      	bls.n	80020c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e007      	b.n	80020d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020d4:	d1ee      	bne.n	80020b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e29b      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b96      	ldr	r3, [pc, #600]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002118:	4b93      	ldr	r3, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
 8002124:	4b90      	ldr	r3, [pc, #576]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b8d      	ldr	r3, [pc, #564]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x130>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e275      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x7a>
 8002154:	4b84      	ldr	r3, [pc, #528]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a83      	ldr	r2, [pc, #524]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x9c>
 800216a:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7e      	ldr	r2, [pc, #504]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7b      	ldr	r2, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a72      	ldr	r2, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 80021a8:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6b      	ldr	r2, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff26 	bl	8001018 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff22 	bl	8001018 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e229      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe ff12 	bl	8001018 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff0e 	bl	8001018 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e215      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x110>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d069      	beq.n	80022fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x190>
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x17a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1e9      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	493d      	ldr	r1, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e040      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d023      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a38      	ldr	r2, [pc, #224]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fec4 	bl	8001018 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe fec0 	bl	8001018 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1c7      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4929      	ldr	r1, [pc, #164]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
 80022c6:	e018      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fea0 	bl	8001018 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7fe fe9c 	bl	8001018 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1a3      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d038      	beq.n	8002378 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe fe7d 	bl	8001018 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002322:	f7fe fe79 	bl	8001018 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e180      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x23a>
 8002340:	e01a      	b.n	8002378 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fe63 	bl	8001018 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe fe5f 	bl	8001018 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d903      	bls.n	800236c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e166      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
 8002368:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a4 	beq.w	80024ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002386:	4b8c      	ldr	r3, [pc, #560]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10d      	bne.n	80023ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a88      	ldr	r2, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b86      	ldr	r3, [pc, #536]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	4b83      	ldr	r3, [pc, #524]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023ba:	4b80      	ldr	r3, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7f      	ldr	r2, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7fe fe27 	bl	8001018 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7fe fe23 	bl	8001018 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	; 0x64
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e12a      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e0:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x31a>
 80023f4:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	e02d      	b.n	800245e <HAL_RCC_OscConfig+0x376>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x33c>
 800240a:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a6a      	ldr	r2, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
 8002422:	e01c      	b.n	800245e <HAL_RCC_OscConfig+0x376>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x35e>
 800242c:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
 8002438:	4b5f      	ldr	r3, [pc, #380]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a5e      	ldr	r2, [pc, #376]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	e00b      	b.n	800245e <HAL_RCC_OscConfig+0x376>
 8002446:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a5b      	ldr	r2, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d015      	beq.n	8002492 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fdd7 	bl	8001018 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fdd3 	bl	8001018 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0d8      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ee      	beq.n	800246e <HAL_RCC_OscConfig+0x386>
 8002490:	e014      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fdc1 	bl	8001018 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdbd 	bl	8001018 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0c2      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ee      	bne.n	800249a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80ae 	beq.w	8002634 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d06d      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d14b      	bne.n	8002584 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fd8e 	bl	8001018 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe fd8a 	bl	8001018 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e091      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	491b      	ldr	r1, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fd5c 	bl	8001018 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fd58 	bl	8001018 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e05f      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x47c>
 8002582:	e057      	b.n	8002634 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800258a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fd42 	bl	8001018 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fd3e 	bl	8001018 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e045      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x4b0>
 80025b6:	e03d      	b.n	8002634 <HAL_RCC_OscConfig+0x54c>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_RCC_OscConfig+0x558>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d030      	beq.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d129      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d122      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025f0:	4013      	ands	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d119      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	3b01      	subs	r3, #1
 800260a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d10f      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d107      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d0      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	4965      	ldr	r1, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d040      	beq.n	8002768 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e073      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06b      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4936      	ldr	r1, [pc, #216]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe fc6e 	bl	8001018 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe fc6a 	bl	8001018 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e053      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d210      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 020f 	bic.w	r2, r3, #15
 800277e:	4922      	ldr	r1, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1cc>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1d0>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1d4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fbca 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	08004a9c 	.word	0x08004a9c
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b094      	sub	sp, #80	; 0x50
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	647b      	str	r3, [r7, #68]	; 0x44
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282c:	2300      	movs	r3, #0
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d00d      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002840:	2b08      	cmp	r3, #8
 8002842:	f200 80e1 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x34>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x3a>
 800284e:	e0db      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002854:	e0db      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002856:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002858:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800285a:	e0d8      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	2200      	movs	r2, #0
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
 800287c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
 800288a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4621      	mov	r1, r4
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	6139      	str	r1, [r7, #16]
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c0:	4659      	mov	r1, fp
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ca:	4651      	mov	r1, sl
 80028cc:	018a      	lsls	r2, r1, #6
 80028ce:	4651      	mov	r1, sl
 80028d0:	ebb2 0801 	subs.w	r8, r2, r1
 80028d4:	4659      	mov	r1, fp
 80028d6:	eb63 0901 	sbc.w	r9, r3, r1
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ee:	4690      	mov	r8, r2
 80028f0:	4699      	mov	r9, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	eb18 0303 	adds.w	r3, r8, r3
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	462b      	mov	r3, r5
 80028fc:	eb49 0303 	adc.w	r3, r9, r3
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800290e:	4629      	mov	r1, r5
 8002910:	024b      	lsls	r3, r1, #9
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002918:	4621      	mov	r1, r4
 800291a:	024a      	lsls	r2, r1, #9
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
 8002926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800292c:	f7fd fc84 	bl	8000238 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002938:	e058      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	2200      	movs	r2, #0
 8002942:	4618      	mov	r0, r3
 8002944:	4611      	mov	r1, r2
 8002946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4641      	mov	r1, r8
 800296e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002972:	4649      	mov	r1, r9
 8002974:	eb63 0b01 	sbc.w	fp, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800298c:	ebb2 040a 	subs.w	r4, r2, sl
 8002990:	eb63 050b 	sbc.w	r5, r3, fp
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	464b      	mov	r3, r9
 80029b0:	eb45 0303 	adc.w	r3, r5, r3
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	61fa      	str	r2, [r7, #28]
 80029dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e0:	f7fd fc2a 	bl	8000238 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3750      	adds	r7, #80	; 0x50
 8002a14:	46bd      	mov	sp, r7
 8002a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	007a1200 	.word	0x007a1200

08002a28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	08004aac 	.word	0x08004aac

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffdc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0b5b      	lsrs	r3, r3, #13
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08004aac 	.word	0x08004aac

08002a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ab8:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a68      	ldr	r2, [pc, #416]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ac2:	6093      	str	r3, [r2, #8]
 8002ac4:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	4964      	ldr	r1, [pc, #400]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d017      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aea:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	4959      	ldr	r1, [pc, #356]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	494a      	ldr	r1, [pc, #296]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 808b 	beq.w	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b98:	f7fe fa3e 	bl	8001018 <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe fa3a 	bl	8001018 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e38f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d035      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d02e      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be6:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bfe:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d114      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe fa02 	bl	8001018 <HAL_GetTick>
 8002c14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7fe f9fe 	bl	8001018 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e351      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0ee      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c46:	d111      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c56:	400b      	ands	r3, r1
 8002c58:	4901      	ldr	r1, [pc, #4]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
 8002c68:	0ffffcff 	.word	0x0ffffcff
 8002c6c:	4bac      	ldr	r3, [pc, #688]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4aab      	ldr	r2, [pc, #684]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c76:	6093      	str	r3, [r2, #8]
 8002c78:	4ba9      	ldr	r3, [pc, #676]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	49a6      	ldr	r1, [pc, #664]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c96:	4ba2      	ldr	r3, [pc, #648]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c9c:	4aa0      	ldr	r2, [pc, #640]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ca6:	4b9e      	ldr	r3, [pc, #632]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	499b      	ldr	r1, [pc, #620]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc4:	4b96      	ldr	r3, [pc, #600]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd2:	4993      	ldr	r1, [pc, #588]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce6:	4b8e      	ldr	r3, [pc, #568]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf4:	498a      	ldr	r1, [pc, #552]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d08:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d16:	4982      	ldr	r1, [pc, #520]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	4979      	ldr	r1, [pc, #484]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d4c:	4b74      	ldr	r3, [pc, #464]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4971      	ldr	r1, [pc, #452]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d6e:	4b6c      	ldr	r3, [pc, #432]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f023 020c 	bic.w	r2, r3, #12
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	4968      	ldr	r1, [pc, #416]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d90:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	4960      	ldr	r1, [pc, #384]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc0:	4957      	ldr	r1, [pc, #348]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dd4:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	494f      	ldr	r1, [pc, #316]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	4946      	ldr	r1, [pc, #280]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e18:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	493e      	ldr	r1, [pc, #248]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	4935      	ldr	r1, [pc, #212]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6a:	492d      	ldr	r1, [pc, #180]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d011      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e7e:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e8c:	4924      	ldr	r1, [pc, #144]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ecc:	4914      	ldr	r1, [pc, #80]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef0:	490b      	ldr	r1, [pc, #44]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00f      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f14:	4902      	ldr	r1, [pc, #8]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f1c:	e002      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f30:	4b8a      	ldr	r3, [pc, #552]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	4986      	ldr	r1, [pc, #536]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f54:	4b81      	ldr	r3, [pc, #516]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f64:	497d      	ldr	r1, [pc, #500]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d006      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80d6 	beq.w	800312c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f80:	4b76      	ldr	r3, [pc, #472]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a75      	ldr	r2, [pc, #468]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8c:	f7fe f844 	bl	8001018 <HAL_GetTick>
 8002f90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f94:	f7fe f840 	bl	8001018 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e195      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d021      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d11d      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fc6:	4b65      	ldr	r3, [pc, #404]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fda:	0e1b      	lsrs	r3, r3, #24
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	019a      	lsls	r2, r3, #6
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	071b      	lsls	r3, r3, #28
 8002ffa:	4958      	ldr	r1, [pc, #352]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003020:	2b00      	cmp	r3, #0
 8003022:	d02e      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302c:	d129      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800302e:	4b4b      	ldr	r3, [pc, #300]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003042:	0f1b      	lsrs	r3, r3, #28
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	019a      	lsls	r2, r3, #6
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	071b      	lsls	r3, r3, #28
 8003062:	493e      	ldr	r1, [pc, #248]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800306a:	4b3c      	ldr	r3, [pc, #240]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003070:	f023 021f 	bic.w	r2, r3, #31
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	3b01      	subs	r3, #1
 800307a:	4938      	ldr	r1, [pc, #224]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01d      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800308e:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003094:	0e1b      	lsrs	r3, r3, #24
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800309c:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a2:	0f1b      	lsrs	r3, r3, #28
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	4926      	ldr	r1, [pc, #152]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d011      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	071b      	lsls	r3, r3, #28
 80030f2:	491a      	ldr	r1, [pc, #104]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fd ff87 	bl	8001018 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800310e:	f7fd ff83 	bl	8001018 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0d8      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 80ce 	bne.w	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a08      	ldr	r2, [pc, #32]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003140:	f7fd ff6a 	bl	8001018 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003146:	e00b      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003148:	f7fd ff66 	bl	8001018 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d904      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0bb      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003160:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316c:	d0ec      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d12a      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	0f1b      	lsrs	r3, r3, #28
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	019a      	lsls	r2, r3, #6
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	071b      	lsls	r3, r3, #28
 80031ca:	4944      	ldr	r1, [pc, #272]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031d2:	4b42      	ldr	r3, [pc, #264]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	493d      	ldr	r1, [pc, #244]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d022      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003200:	d11d      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	0e1b      	lsrs	r3, r3, #24
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	0f1b      	lsrs	r3, r3, #28
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4929      	ldr	r1, [pc, #164]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d028      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	019a      	lsls	r2, r3, #6
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	431a      	orrs	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	071b      	lsls	r3, r3, #28
 800327e:	4917      	ldr	r1, [pc, #92]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4911      	ldr	r1, [pc, #68]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fd feb6 	bl	8001018 <HAL_GetTick>
 80032ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b0:	f7fd feb2 	bl	8001018 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e007      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ce:	d1ef      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e040      	b.n	8003374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd fc92 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fbc2 	bl	8003aa8 <UART_SetConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e022      	b.n	8003374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fe1a 	bl	8003f70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fea1 	bl	80040b4 <UART_CheckIdleState>
 8003372:	4603      	mov	r3, r0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003390:	2b20      	cmp	r3, #32
 8003392:	d171      	bne.n	8003478 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_UART_Transmit+0x24>
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e06a      	b.n	800347a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2221      	movs	r2, #33	; 0x21
 80033b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b2:	f7fd fe31 	bl	8001018 <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d108      	bne.n	80033e4 <HAL_UART_Transmit+0x68>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e003      	b.n	80033ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033ec:	e02c      	b.n	8003448 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fea8 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e038      	b.n	800347a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3302      	adds	r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e007      	b.n	8003436 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1cc      	bne.n	80033ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2200      	movs	r2, #0
 800345c:	2140      	movs	r1, #64	; 0x40
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fe75 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e005      	b.n	800347a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0ba      	sub	sp, #232	; 0xe8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80034ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80034b2:	4013      	ands	r3, r2
 80034b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80034b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d115      	bne.n	80034ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00f      	beq.n	80034ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 82ac 	beq.w	8003a3a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
      }
      return;
 80034ea:	e2a6      	b.n	8003a3a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8117 	beq.w	8003724 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003502:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003506:	4b85      	ldr	r3, [pc, #532]	; (800371c <HAL_UART_IRQHandler+0x298>)
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 810a 	beq.w	8003724 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d011      	beq.n	8003540 <HAL_UART_IRQHandler+0xbc>
 800351c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2201      	movs	r2, #1
 800352e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d011      	beq.n	8003570 <HAL_UART_IRQHandler+0xec>
 800354c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2202      	movs	r2, #2
 800355e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d011      	beq.n	80035a0 <HAL_UART_IRQHandler+0x11c>
 800357c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2204      	movs	r2, #4
 800358e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003596:	f043 0202 	orr.w	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d017      	beq.n	80035dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2208      	movs	r2, #8
 80035ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d2:	f043 0208 	orr.w	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <HAL_UART_IRQHandler+0x18a>
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8212 	beq.w	8003a3e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d005      	beq.n	8003666 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800365a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800365e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04f      	beq.n	8003706 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fe37 	bl	80042da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d141      	bne.n	80036fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3308      	adds	r3, #8
 8003680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3308      	adds	r3, #8
 80036a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1d9      	bne.n	800367a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d013      	beq.n	80036f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <HAL_UART_IRQHandler+0x29c>)
 80036d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd fe4d 	bl	800137a <HAL_DMA_Abort_IT>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d017      	beq.n	8003716 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036f0:	4610      	mov	r0, r2
 80036f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e00f      	b.n	8003716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9b6 	bl	8003a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e00b      	b.n	8003716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9b2 	bl	8003a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	e007      	b.n	8003716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f9ae 	bl	8003a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003714:	e193      	b.n	8003a3e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003716:	bf00      	nop
    return;
 8003718:	e191      	b.n	8003a3e <HAL_UART_IRQHandler+0x5ba>
 800371a:	bf00      	nop
 800371c:	04000120 	.word	0x04000120
 8003720:	080043a3 	.word	0x080043a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 814c 	bne.w	80039c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8145 	beq.w	80039c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 813e 	beq.w	80039c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	f040 80b6 	bne.w	80038ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800376e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8165 	beq.w	8003a42 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800377e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003782:	429a      	cmp	r2, r3
 8003784:	f080 815d 	bcs.w	8003a42 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800378e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379c:	f000 8086 	beq.w	80038ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1da      	bne.n	80037a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800380e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003812:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e1      	bne.n	80037ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3308      	adds	r3, #8
 800382c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3308      	adds	r3, #8
 8003846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800384a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800384c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e3      	bne.n	8003826 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800387a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387c:	f023 0310 	bic.w	r3, r3, #16
 8003880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800388e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003890:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003894:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800389c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e4      	bne.n	800386c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fcf7 	bl	800129a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8d8 	bl	8003a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038cc:	e0b9      	b.n	8003a42 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80ab 	beq.w	8003a46 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80038f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a6 	beq.w	8003a46 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800390e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800391c:	647b      	str	r3, [r7, #68]	; 0x44
 800391e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e4      	bne.n	80038fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	623b      	str	r3, [r7, #32]
   return(result);
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003954:	633a      	str	r2, [r7, #48]	; 0x30
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800395a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e3      	bne.n	8003930 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	60fb      	str	r3, [r7, #12]
   return(result);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 0310 	bic.w	r3, r3, #16
 8003990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	69b9      	ldr	r1, [r7, #24]
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	617b      	str	r3, [r7, #20]
   return(result);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e4      	bne.n	800397c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f85c 	bl	8003a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039c4:	e03f      	b.n	8003a46 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00e      	beq.n	80039f0 <HAL_UART_IRQHandler+0x56c>
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f853 	bl	8003a94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039ee:	e02d      	b.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01c      	beq.n	8003a4a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
    }
    return;
 8003a18:	e017      	b.n	8003a4a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d012      	beq.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
 8003a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00c      	beq.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fccb 	bl	80043ce <UART_EndTransmit_IT>
    return;
 8003a38:	e008      	b.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a3a:	bf00      	nop
 8003a3c:	e006      	b.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a3e:	bf00      	nop
 8003a40:	e004      	b.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a4a:	bf00      	nop
  }

}
 8003a4c:	37e8      	adds	r7, #232	; 0xe8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop

08003a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4ba6      	ldr	r3, [pc, #664]	; (8003d6c <UART_SetConfig+0x2c4>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	6979      	ldr	r1, [r7, #20]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a94      	ldr	r2, [pc, #592]	; (8003d70 <UART_SetConfig+0x2c8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d120      	bne.n	8003b66 <UART_SetConfig+0xbe>
 8003b24:	4b93      	ldr	r3, [pc, #588]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d816      	bhi.n	8003b60 <UART_SetConfig+0xb8>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <UART_SetConfig+0x90>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b55 	.word	0x08003b55
 8003b40:	08003b4f 	.word	0x08003b4f
 8003b44:	08003b5b 	.word	0x08003b5b
 8003b48:	2301      	movs	r3, #1
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e150      	b.n	8003df0 <UART_SetConfig+0x348>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e14d      	b.n	8003df0 <UART_SetConfig+0x348>
 8003b54:	2304      	movs	r3, #4
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e14a      	b.n	8003df0 <UART_SetConfig+0x348>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e147      	b.n	8003df0 <UART_SetConfig+0x348>
 8003b60:	2310      	movs	r3, #16
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e144      	b.n	8003df0 <UART_SetConfig+0x348>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a83      	ldr	r2, [pc, #524]	; (8003d78 <UART_SetConfig+0x2d0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d132      	bne.n	8003bd6 <UART_SetConfig+0x12e>
 8003b70:	4b80      	ldr	r3, [pc, #512]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d828      	bhi.n	8003bd0 <UART_SetConfig+0x128>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <UART_SetConfig+0xdc>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003bd1 	.word	0x08003bd1
 8003b8c:	08003bd1 	.word	0x08003bd1
 8003b90:	08003bd1 	.word	0x08003bd1
 8003b94:	08003bc5 	.word	0x08003bc5
 8003b98:	08003bd1 	.word	0x08003bd1
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003bd1 	.word	0x08003bd1
 8003ba4:	08003bbf 	.word	0x08003bbf
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bd1 	.word	0x08003bd1
 8003bb4:	08003bcb 	.word	0x08003bcb
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e118      	b.n	8003df0 <UART_SetConfig+0x348>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e115      	b.n	8003df0 <UART_SetConfig+0x348>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e112      	b.n	8003df0 <UART_SetConfig+0x348>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e10f      	b.n	8003df0 <UART_SetConfig+0x348>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e10c      	b.n	8003df0 <UART_SetConfig+0x348>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a68      	ldr	r2, [pc, #416]	; (8003d7c <UART_SetConfig+0x2d4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d120      	bne.n	8003c22 <UART_SetConfig+0x17a>
 8003be0:	4b64      	ldr	r3, [pc, #400]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bea:	2b30      	cmp	r3, #48	; 0x30
 8003bec:	d013      	beq.n	8003c16 <UART_SetConfig+0x16e>
 8003bee:	2b30      	cmp	r3, #48	; 0x30
 8003bf0:	d814      	bhi.n	8003c1c <UART_SetConfig+0x174>
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d009      	beq.n	8003c0a <UART_SetConfig+0x162>
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d810      	bhi.n	8003c1c <UART_SetConfig+0x174>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x15c>
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d006      	beq.n	8003c10 <UART_SetConfig+0x168>
 8003c02:	e00b      	b.n	8003c1c <UART_SetConfig+0x174>
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e0f2      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e0ef      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c10:	2304      	movs	r3, #4
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e0ec      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c16:	2308      	movs	r3, #8
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e0e9      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e0e6      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a56      	ldr	r2, [pc, #344]	; (8003d80 <UART_SetConfig+0x2d8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d120      	bne.n	8003c6e <UART_SetConfig+0x1c6>
 8003c2c:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c36:	2bc0      	cmp	r3, #192	; 0xc0
 8003c38:	d013      	beq.n	8003c62 <UART_SetConfig+0x1ba>
 8003c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c3c:	d814      	bhi.n	8003c68 <UART_SetConfig+0x1c0>
 8003c3e:	2b80      	cmp	r3, #128	; 0x80
 8003c40:	d009      	beq.n	8003c56 <UART_SetConfig+0x1ae>
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d810      	bhi.n	8003c68 <UART_SetConfig+0x1c0>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <UART_SetConfig+0x1a8>
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d006      	beq.n	8003c5c <UART_SetConfig+0x1b4>
 8003c4e:	e00b      	b.n	8003c68 <UART_SetConfig+0x1c0>
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e0cc      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e0c9      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e0c6      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e0c3      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e0c0      	b.n	8003df0 <UART_SetConfig+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a44      	ldr	r2, [pc, #272]	; (8003d84 <UART_SetConfig+0x2dc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <UART_SetConfig+0x21c>
 8003c78:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c86:	d017      	beq.n	8003cb8 <UART_SetConfig+0x210>
 8003c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c8c:	d817      	bhi.n	8003cbe <UART_SetConfig+0x216>
 8003c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c92:	d00b      	beq.n	8003cac <UART_SetConfig+0x204>
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d811      	bhi.n	8003cbe <UART_SetConfig+0x216>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <UART_SetConfig+0x1fe>
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x20a>
 8003ca4:	e00b      	b.n	8003cbe <UART_SetConfig+0x216>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e0a1      	b.n	8003df0 <UART_SetConfig+0x348>
 8003cac:	2302      	movs	r3, #2
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e09e      	b.n	8003df0 <UART_SetConfig+0x348>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e09b      	b.n	8003df0 <UART_SetConfig+0x348>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e098      	b.n	8003df0 <UART_SetConfig+0x348>
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e095      	b.n	8003df0 <UART_SetConfig+0x348>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <UART_SetConfig+0x2e0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d125      	bne.n	8003d1a <UART_SetConfig+0x272>
 8003cce:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cdc:	d017      	beq.n	8003d0e <UART_SetConfig+0x266>
 8003cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce2:	d817      	bhi.n	8003d14 <UART_SetConfig+0x26c>
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d00b      	beq.n	8003d02 <UART_SetConfig+0x25a>
 8003cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cee:	d811      	bhi.n	8003d14 <UART_SetConfig+0x26c>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <UART_SetConfig+0x254>
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	d006      	beq.n	8003d08 <UART_SetConfig+0x260>
 8003cfa:	e00b      	b.n	8003d14 <UART_SetConfig+0x26c>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e076      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d02:	2302      	movs	r3, #2
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e073      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e070      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e06d      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d14:	2310      	movs	r3, #16
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e06a      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <UART_SetConfig+0x2e4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d138      	bne.n	8003d96 <UART_SetConfig+0x2ee>
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d32:	d017      	beq.n	8003d64 <UART_SetConfig+0x2bc>
 8003d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d38:	d82a      	bhi.n	8003d90 <UART_SetConfig+0x2e8>
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3e:	d00b      	beq.n	8003d58 <UART_SetConfig+0x2b0>
 8003d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d44:	d824      	bhi.n	8003d90 <UART_SetConfig+0x2e8>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <UART_SetConfig+0x2aa>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d006      	beq.n	8003d5e <UART_SetConfig+0x2b6>
 8003d50:	e01e      	b.n	8003d90 <UART_SetConfig+0x2e8>
 8003d52:	2300      	movs	r3, #0
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e04b      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e048      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e045      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d64:	2308      	movs	r3, #8
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e042      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d6a:	bf00      	nop
 8003d6c:	efff69f3 	.word	0xefff69f3
 8003d70:	40011000 	.word	0x40011000
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40004400 	.word	0x40004400
 8003d7c:	40004800 	.word	0x40004800
 8003d80:	40004c00 	.word	0x40004c00
 8003d84:	40005000 	.word	0x40005000
 8003d88:	40011400 	.word	0x40011400
 8003d8c:	40007800 	.word	0x40007800
 8003d90:	2310      	movs	r3, #16
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e02c      	b.n	8003df0 <UART_SetConfig+0x348>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a72      	ldr	r2, [pc, #456]	; (8003f64 <UART_SetConfig+0x4bc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d125      	bne.n	8003dec <UART_SetConfig+0x344>
 8003da0:	4b71      	ldr	r3, [pc, #452]	; (8003f68 <UART_SetConfig+0x4c0>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003daa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dae:	d017      	beq.n	8003de0 <UART_SetConfig+0x338>
 8003db0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003db4:	d817      	bhi.n	8003de6 <UART_SetConfig+0x33e>
 8003db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dba:	d00b      	beq.n	8003dd4 <UART_SetConfig+0x32c>
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	d811      	bhi.n	8003de6 <UART_SetConfig+0x33e>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <UART_SetConfig+0x326>
 8003dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dca:	d006      	beq.n	8003dda <UART_SetConfig+0x332>
 8003dcc:	e00b      	b.n	8003de6 <UART_SetConfig+0x33e>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e00d      	b.n	8003df0 <UART_SetConfig+0x348>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e00a      	b.n	8003df0 <UART_SetConfig+0x348>
 8003dda:	2304      	movs	r3, #4
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e007      	b.n	8003df0 <UART_SetConfig+0x348>
 8003de0:	2308      	movs	r3, #8
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e004      	b.n	8003df0 <UART_SetConfig+0x348>
 8003de6:	2310      	movs	r3, #16
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e001      	b.n	8003df0 <UART_SetConfig+0x348>
 8003dec:	2310      	movs	r3, #16
 8003dee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df8:	d15b      	bne.n	8003eb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003dfa:	7ffb      	ldrb	r3, [r7, #31]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d828      	bhi.n	8003e52 <UART_SetConfig+0x3aa>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <UART_SetConfig+0x360>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e53 	.word	0x08003e53
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003e53 	.word	0x08003e53
 8003e24:	08003e53 	.word	0x08003e53
 8003e28:	08003e4b 	.word	0x08003e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7fe fe08 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8003e30:	61b8      	str	r0, [r7, #24]
        break;
 8003e32:	e013      	b.n	8003e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7fe fe18 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8003e38:	61b8      	str	r0, [r7, #24]
        break;
 8003e3a:	e00f      	b.n	8003e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <UART_SetConfig+0x4c4>)
 8003e3e:	61bb      	str	r3, [r7, #24]
        break;
 8003e40:	e00c      	b.n	8003e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e42:	f7fe fceb 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8003e46:	61b8      	str	r0, [r7, #24]
        break;
 8003e48:	e008      	b.n	8003e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4e:	61bb      	str	r3, [r7, #24]
        break;
 8003e50:	e004      	b.n	8003e5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	77bb      	strb	r3, [r7, #30]
        break;
 8003e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d074      	beq.n	8003f4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	005a      	lsls	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	441a      	add	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	d916      	bls.n	8003eac <UART_SetConfig+0x404>
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	d212      	bcs.n	8003eac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f023 030f 	bic.w	r3, r3, #15
 8003e8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	89fa      	ldrh	r2, [r7, #14]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	e04f      	b.n	8003f4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	77bb      	strb	r3, [r7, #30]
 8003eb0:	e04c      	b.n	8003f4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eb2:	7ffb      	ldrb	r3, [r7, #31]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d828      	bhi.n	8003f0a <UART_SetConfig+0x462>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0x418>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ef5 	.word	0x08003ef5
 8003ecc:	08003f0b 	.word	0x08003f0b
 8003ed0:	08003efb 	.word	0x08003efb
 8003ed4:	08003f0b 	.word	0x08003f0b
 8003ed8:	08003f0b 	.word	0x08003f0b
 8003edc:	08003f0b 	.word	0x08003f0b
 8003ee0:	08003f03 	.word	0x08003f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f7fe fdac 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8003ee8:	61b8      	str	r0, [r7, #24]
        break;
 8003eea:	e013      	b.n	8003f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eec:	f7fe fdbc 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8003ef0:	61b8      	str	r0, [r7, #24]
        break;
 8003ef2:	e00f      	b.n	8003f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <UART_SetConfig+0x4c4>)
 8003ef6:	61bb      	str	r3, [r7, #24]
        break;
 8003ef8:	e00c      	b.n	8003f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efa:	f7fe fc8f 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8003efe:	61b8      	str	r0, [r7, #24]
        break;
 8003f00:	e008      	b.n	8003f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f06:	61bb      	str	r3, [r7, #24]
        break;
 8003f08:	e004      	b.n	8003f14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	77bb      	strb	r3, [r7, #30]
        break;
 8003f12:	bf00      	nop
    }

    if (pclk != 0U)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	085a      	lsrs	r2, r3, #1
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b0f      	cmp	r3, #15
 8003f32:	d909      	bls.n	8003f48 <UART_SetConfig+0x4a0>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3a:	d205      	bcs.n	8003f48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	e001      	b.n	8003f4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f58:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40007c00 	.word	0x40007c00
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00f42400 	.word	0x00f42400

08003f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406e:	d10a      	bne.n	8004086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c4:	f7fc ffa8 	bl	8001018 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d10e      	bne.n	80040f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f831 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e027      	b.n	8004146 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d10e      	bne.n	8004122 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f81b 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e011      	b.n	8004146 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b09c      	sub	sp, #112	; 0x70
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415e:	e0a7      	b.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	f000 80a3 	beq.w	80042b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fc ff55 	bl	8001018 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <UART_WaitOnFlagUntilTimeout+0x32>
 800417a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417c:	2b00      	cmp	r3, #0
 800417e:	d13f      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800418e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004194:	667b      	str	r3, [r7, #100]	; 0x64
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e068      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d050      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421c:	d148      	bne.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004226:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800423c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
 8004248:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800424c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e6      	bne.n	8004228 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3308      	adds	r3, #8
 8004260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	613b      	str	r3, [r7, #16]
   return(result);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	66bb      	str	r3, [r7, #104]	; 0x68
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3308      	adds	r3, #8
 8004278:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800427a:	623a      	str	r2, [r7, #32]
 800427c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	69f9      	ldr	r1, [r7, #28]
 8004280:	6a3a      	ldr	r2, [r7, #32]
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	61bb      	str	r3, [r7, #24]
   return(result);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e010      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	f43f af48 	beq.w	8004160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3770      	adds	r7, #112	; 0x70
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042da:	b480      	push	{r7}
 80042dc:	b095      	sub	sp, #84	; 0x54
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
 8004302:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e6      	bne.n	80042e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	61fb      	str	r3, [r7, #28]
   return(result);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	64bb      	str	r3, [r7, #72]	; 0x48
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800433a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e5      	bne.n	8004314 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434c:	2b01      	cmp	r3, #1
 800434e:	d118      	bne.n	8004382 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	60bb      	str	r3, [r7, #8]
   return(result);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	647b      	str	r3, [r7, #68]	; 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e6      	bne.n	8004350 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004396:	bf00      	nop
 8004398:	3754      	adds	r7, #84	; 0x54
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fb51 	bl	8003a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b088      	sub	sp, #32
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6979      	ldr	r1, [r7, #20]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	613b      	str	r3, [r7, #16]
   return(result);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fb1d 	bl	8003a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800441a:	bf00      	nop
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004424:	b084      	sub	sp, #16
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	f107 001c 	add.w	r0, r7, #28
 8004432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	2b01      	cmp	r3, #1
 800443a:	d120      	bne.n	800447e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <USB_CoreInit+0xac>)
 800444e:	4013      	ands	r3, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d105      	bne.n	8004472 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa96 	bl	80049a4 <USB_CoreReset>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	e010      	b.n	80044a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa8a 	bl	80049a4 <USB_CoreReset>
 8004490:	4603      	mov	r3, r0
 8004492:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d10b      	bne.n	80044be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f043 0206 	orr.w	r2, r3, #6
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ca:	b004      	add	sp, #16
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	ffbdffbf 	.word	0xffbdffbf

080044d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f023 0201 	bic.w	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d115      	bne.n	8004544 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004524:	2001      	movs	r0, #1
 8004526:	f7fc fd83 	bl	8001030 <HAL_Delay>
      ms++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3301      	adds	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa29 	bl	8004988 <USB_GetMode>
 8004536:	4603      	mov	r3, r0
 8004538:	2b01      	cmp	r3, #1
 800453a:	d01e      	beq.n	800457a <USB_SetCurrentMode+0x84>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b31      	cmp	r3, #49	; 0x31
 8004540:	d9f0      	bls.n	8004524 <USB_SetCurrentMode+0x2e>
 8004542:	e01a      	b.n	800457a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d115      	bne.n	8004576 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004556:	2001      	movs	r0, #1
 8004558:	f7fc fd6a 	bl	8001030 <HAL_Delay>
      ms++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa10 	bl	8004988 <USB_GetMode>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <USB_SetCurrentMode+0x84>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b31      	cmp	r3, #49	; 0x31
 8004572:	d9f0      	bls.n	8004556 <USB_SetCurrentMode+0x60>
 8004574:	e001      	b.n	800457a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e005      	b.n	8004586 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b32      	cmp	r3, #50	; 0x32
 800457e:	d101      	bne.n	8004584 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004590:	b084      	sub	sp, #16
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800459e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e009      	b.n	80045c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3340      	adds	r3, #64	; 0x40
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0e      	cmp	r3, #14
 80045c8:	d9f2      	bls.n	80045b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11c      	bne.n	800460a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e005      	b.n	8004616 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	4619      	mov	r1, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	461a      	mov	r2, r3
 8004632:	680b      	ldr	r3, [r1, #0]
 8004634:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004642:	2100      	movs	r1, #0
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f965 	bl	8004914 <USB_SetDevSpeed>
 800464a:	e008      	b.n	800465e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800464c:	2101      	movs	r1, #1
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f960 	bl	8004914 <USB_SetDevSpeed>
 8004654:	e003      	b.n	800465e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004656:	2103      	movs	r1, #3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f95b 	bl	8004914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800465e:	2110      	movs	r1, #16
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8f3 	bl	800484c <USB_FlushTxFifo>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f91f 	bl	80048b4 <USB_FlushRxFifo>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	461a      	mov	r2, r3
 8004688:	2300      	movs	r3, #0
 800468a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	461a      	mov	r2, r3
 8004694:	2300      	movs	r3, #0
 8004696:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	461a      	mov	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	e043      	b.n	8004732 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c0:	d118      	bne.n	80046f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e013      	b.n	8004706 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e008      	b.n	8004706 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	461a      	mov	r2, r3
 8004726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800472a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	3301      	adds	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d3b7      	bcc.n	80046aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e043      	b.n	80047c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004756:	d118      	bne.n	800478a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e013      	b.n	800479c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e008      	b.n	800479c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	461a      	mov	r2, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	3301      	adds	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d3b7      	bcc.n	8004740 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f043 0210 	orr.w	r2, r3, #16
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <USB_DevInit+0x2b4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f043 0208 	orr.w	r2, r3, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <USB_DevInit+0x2b8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004840:	b004      	add	sp, #16
 8004842:	4770      	bx	lr
 8004844:	803c3800 	.word	0x803c3800
 8004848:	40000004 	.word	0x40000004

0800484c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3301      	adds	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <USB_FlushTxFifo+0x64>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e01b      	b.n	80048a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	daf2      	bge.n	800485a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	019b      	lsls	r3, r3, #6
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <USB_FlushTxFifo+0x64>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e006      	b.n	80048a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d0f0      	beq.n	8004884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	00030d40 	.word	0x00030d40

080048b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a11      	ldr	r2, [pc, #68]	; (8004910 <USB_FlushRxFifo+0x5c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e018      	b.n	8004904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	daf2      	bge.n	80048c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2210      	movs	r2, #16
 80048e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a08      	ldr	r2, [pc, #32]	; (8004910 <USB_FlushRxFifo+0x5c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e006      	b.n	8004904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b10      	cmp	r3, #16
 8004900:	d0f0      	beq.n	80048e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	00030d40 	.word	0x00030d40

08004914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004960:	f023 0303 	bic.w	r3, r3, #3
 8004964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0301 	and.w	r3, r3, #1
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <USB_CoreReset+0x64>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e01b      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	daf2      	bge.n	80049b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <USB_CoreReset+0x64>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d901      	bls.n	80049ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d0f0      	beq.n	80049da <USB_CoreReset+0x36>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	00030d40 	.word	0x00030d40

08004a0c <memset>:
 8004a0c:	4402      	add	r2, r0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d100      	bne.n	8004a16 <memset+0xa>
 8004a14:	4770      	bx	lr
 8004a16:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1a:	e7f9      	b.n	8004a10 <memset+0x4>

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4d0d      	ldr	r5, [pc, #52]	; (8004a54 <__libc_init_array+0x38>)
 8004a20:	4c0d      	ldr	r4, [pc, #52]	; (8004a58 <__libc_init_array+0x3c>)
 8004a22:	1b64      	subs	r4, r4, r5
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	2600      	movs	r6, #0
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	4d0b      	ldr	r5, [pc, #44]	; (8004a5c <__libc_init_array+0x40>)
 8004a2e:	4c0c      	ldr	r4, [pc, #48]	; (8004a60 <__libc_init_array+0x44>)
 8004a30:	f000 f826 	bl	8004a80 <_init>
 8004a34:	1b64      	subs	r4, r4, r5
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	2600      	movs	r6, #0
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	4798      	blx	r3
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	4798      	blx	r3
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	08004abc 	.word	0x08004abc
 8004a58:	08004abc 	.word	0x08004abc
 8004a5c:	08004abc 	.word	0x08004abc
 8004a60:	08004ac0 	.word	0x08004ac0

08004a64 <memcpy>:
 8004a64:	440a      	add	r2, r1
 8004a66:	4291      	cmp	r1, r2
 8004a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a6c:	d100      	bne.n	8004a70 <memcpy+0xc>
 8004a6e:	4770      	bx	lr
 8004a70:	b510      	push	{r4, lr}
 8004a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	d1f9      	bne.n	8004a72 <memcpy+0xe>
 8004a7e:	bd10      	pop	{r4, pc}

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
