
F-767ZI_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b04  08004b04  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b0c  08004b0c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004b20  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004bc0  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000738  2000014c  08004c60  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000884  08004c60  00020884  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00012eef  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000028fd  00000000  00000000  000330ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000de0  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000aa9  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028c51  00000000  00000000  00037239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00011a65  00000000  00000000  0005fe8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa0dc  00000000  00000000  000718ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003984  00000000  00000000  0016b9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000076  00000000  00000000  0016f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004ad0 	.word	0x08004ad0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004ad0 	.word	0x08004ad0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fd44 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f817 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f963 	bl	800080c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000546:	f000 f933 	bl	80007b0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800054a:	f000 f901 	bl	8000750 <MX_USART3_UART_Init>
  MX_UART5_Init();
 800054e:	f000 f8cf 	bl	80006f0 <MX_UART5_Init>
  MX_ETH_Init();
 8000552:	f000 f87f 	bl	8000654 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  uint8_t seconds = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  sprintf(tx_buffer,"Seconds: %u\r\n", seconds);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer, 15, HAL_MAX_DELAY);
	  accessPumpData(&huart5);
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x38>)
 800055c:	f000 fa10 	bl	8000980 <accessPumpData>
	  HAL_Delay(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 fd8c 	bl	8001080 <HAL_Delay>
	  accessPumpData(&huart5);
 8000568:	e7f7      	b.n	800055a <main+0x26>
 800056a:	bf00      	nop
 800056c:	20000250 	.word	0x20000250

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fa6c 	bl	8004a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000594:	f001 fd70 	bl	8002078 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <SystemClock_Config+0xdc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a2b      	ldr	r2, [pc, #172]	; (800064c <SystemClock_Config+0xdc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xdc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xe0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b8:	4a25      	ldr	r2, [pc, #148]	; (8000650 <SystemClock_Config+0xe0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e4:	2360      	movs	r3, #96	; 0x60
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fd9d 	bl	8002138 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000604:	f000 f9b6 	bl	8000974 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000608:	f001 fd46 	bl	8002098 <HAL_PWREx_EnableOverDrive>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000612:	f000 f9af 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2103      	movs	r1, #3
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f82e 	bl	8002694 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800063e:	f000 f999 	bl	8000974 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ETH_Init+0x84>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_ETH_Init+0x88>)
 800065c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ETH_Init+0x8c>)
 800066c:	22e1      	movs	r2, #225	; 0xe1
 800066e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000672:	2200      	movs	r2, #0
 8000674:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_ETH_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_ETH_Init+0x84>)
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000686:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ETH_Init+0x84>)
 800068a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800068e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ETH_Init+0x84>)
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_ETH_Init+0x90>)
 8000694:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_ETH_Init+0x84>)
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_ETH_Init+0x94>)
 800069a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ETH_Init+0x84>)
 800069e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ETH_Init+0x84>)
 80006a6:	f000 feb3 	bl	8001410 <HAL_ETH_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 f960 	bl	8000974 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b4:	2238      	movs	r2, #56	; 0x38
 80006b6:	2100      	movs	r1, #0
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_ETH_Init+0x98>)
 80006ba:	f004 f9cf 	bl	8004a5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_ETH_Init+0x98>)
 80006c0:	2221      	movs	r2, #33	; 0x21
 80006c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_ETH_Init+0x98>)
 80006c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_ETH_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001a0 	.word	0x200001a0
 80006dc:	40028000 	.word	0x40028000
 80006e0:	20000868 	.word	0x20000868
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000168 	.word	0x20000168

080006f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_UART5_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <MX_UART5_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_UART5_Init+0x58>)
 80006fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000700:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_UART5_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_UART5_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_UART5_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_UART5_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_UART5_Init+0x58>)
 800071c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000720:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_UART5_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_UART5_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_UART5_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_UART5_Init+0x58>)
 8000736:	f002 fdfb 	bl	8003330 <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_UART5_Init+0x54>
  {
    Error_Handler();
 8000740:	f000 f918 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000250 	.word	0x20000250
 800074c:	40005000 	.word	0x40005000

08000750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART3_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800075c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART3_UART_Init+0x58>)
 8000794:	f002 fdcc 	bl	8003330 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8e9 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200002d8 	.word	0x200002d8
 80007ac:	40004800 	.word	0x40004800

080007b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2206      	movs	r2, #6
 80007c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	f001 faf7 	bl	8001de6 <HAL_PCD_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8b9 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000360 	.word	0x20000360

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b4f      	ldr	r3, [pc, #316]	; (8000960 <MX_GPIO_Init+0x154>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a4e      	ldr	r2, [pc, #312]	; (8000960 <MX_GPIO_Init+0x154>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <MX_GPIO_Init+0x154>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b49      	ldr	r3, [pc, #292]	; (8000960 <MX_GPIO_Init+0x154>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a48      	ldr	r2, [pc, #288]	; (8000960 <MX_GPIO_Init+0x154>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <MX_GPIO_Init+0x154>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <MX_GPIO_Init+0x154>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a42      	ldr	r2, [pc, #264]	; (8000960 <MX_GPIO_Init+0x154>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b40      	ldr	r3, [pc, #256]	; (8000960 <MX_GPIO_Init+0x154>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b3d      	ldr	r3, [pc, #244]	; (8000960 <MX_GPIO_Init+0x154>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a3c      	ldr	r2, [pc, #240]	; (8000960 <MX_GPIO_Init+0x154>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <MX_GPIO_Init+0x154>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <MX_GPIO_Init+0x154>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a36      	ldr	r2, [pc, #216]	; (8000960 <MX_GPIO_Init+0x154>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b34      	ldr	r3, [pc, #208]	; (8000960 <MX_GPIO_Init+0x154>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <MX_GPIO_Init+0x154>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a30      	ldr	r2, [pc, #192]	; (8000960 <MX_GPIO_Init+0x154>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <MX_GPIO_Init+0x154>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b8:	482a      	ldr	r0, [pc, #168]	; (8000964 <MX_GPIO_Init+0x158>)
 80008ba:	f001 fa7b 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	4829      	ldr	r0, [pc, #164]	; (8000968 <MX_GPIO_Init+0x15c>)
 80008c4:	f001 fa76 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4823      	ldr	r0, [pc, #140]	; (800096c <MX_GPIO_Init+0x160>)
 80008e0:	f001 f8bc 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4819      	ldr	r0, [pc, #100]	; (8000964 <MX_GPIO_Init+0x158>)
 80008fe:	f001 f8ad 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_GPIO_Init+0x15c>)
 800091a:	f001 f89f 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_GPIO_Init+0x15c>)
 8000932:	f001 f893 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000946:	2307      	movs	r3, #7
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_GPIO_Init+0x164>)
 8000952:	f001 f883 	bl	8001a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	; 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020400 	.word	0x40020400
 8000968:	40021800 	.word	0x40021800
 800096c:	40020800 	.word	0x40020800
 8000970:	40020c00 	.word	0x40020c00

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <accessPumpData>:
#define NIBBLE_MERGE(MSN,LSN)	((MSN<<4)|(LSN))

uint8_t tx_frame[TRANSMIT_SIZE];


void accessPumpData(UART_HandleTypeDef* huart){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	 // Initialize tx_frame with Start of TX (STX)
	tx_frame[0] = STX;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <accessPumpData+0x78>)
 800098a:	2202      	movs	r2, #2
 800098c:	701a      	strb	r2, [r3, #0]

    // TEXT
	// Analog data read command is M20
    memcpy(&tx_frame[1], "M20", 3);	// Assign 'M', '2', '0' at indices 1, 2, 3 using memcpy
 800098e:	2203      	movs	r2, #3
 8000990:	491a      	ldr	r1, [pc, #104]	; (80009fc <accessPumpData+0x7c>)
 8000992:	481b      	ldr	r0, [pc, #108]	; (8000a00 <accessPumpData+0x80>)
 8000994:	f004 f88e 	bl	8004ab4 <memcpy>
    // Analog data acquisition bits
    tx_frame[4] = '0';
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <accessPumpData+0x78>)
 800099a:	2230      	movs	r2, #48	; 0x30
 800099c:	711a      	strb	r2, [r3, #4]
    tx_frame[5] = '0';
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <accessPumpData+0x78>)
 80009a0:	2230      	movs	r2, #48	; 0x30
 80009a2:	715a      	strb	r2, [r3, #5]
    tx_frame[6] = '0';
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <accessPumpData+0x78>)
 80009a6:	2230      	movs	r2, #48	; 0x30
 80009a8:	719a      	strb	r2, [r3, #6]
    tx_frame[7] = '0';
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <accessPumpData+0x78>)
 80009ac:	2230      	movs	r2, #48	; 0x30
 80009ae:	71da      	strb	r2, [r3, #7]
    tx_frame[8] = '0';
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <accessPumpData+0x78>)
 80009b2:	2230      	movs	r2, #48	; 0x30
 80009b4:	721a      	strb	r2, [r3, #8]
    tx_frame[9] = '0';
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <accessPumpData+0x78>)
 80009b8:	2230      	movs	r2, #48	; 0x30
 80009ba:	725a      	strb	r2, [r3, #9]
    //tx_frame[10] = '9';
    //tx_frame[11] = convertToAscii(0x0E);
    tx_frame[10] = '0';
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <accessPumpData+0x78>)
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	729a      	strb	r2, [r3, #10]
    tx_frame[11] = convertToAscii(0x01);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 f81e 	bl	8000a04 <convertToAscii>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <accessPumpData+0x78>)
 80009ce:	72da      	strb	r2, [r3, #11]
    // End of TX
    tx_frame[12] = ETX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <accessPumpData+0x78>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	731a      	strb	r2, [r3, #12]

    //checksum
    pumpChecksum();
 80009d6:	f000 f829 	bl	8000a2c <pumpChecksum>

    // End of Frame
    tx_frame[15] = CR;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <accessPumpData+0x78>)
 80009dc:	220d      	movs	r2, #13
 80009de:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit(huart, &tx_frame[0], TRANSMIT_SIZE, HAL_MAX_DELAY);
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	2210      	movs	r2, #16
 80009e6:	4904      	ldr	r1, [pc, #16]	; (80009f8 <accessPumpData+0x78>)
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f002 fcef 	bl	80033cc <HAL_UART_Transmit>
	return;
 80009ee:	bf00      	nop
}
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000870 	.word	0x20000870
 80009fc:	08004ae8 	.word	0x08004ae8
 8000a00:	20000871 	.word	0x20000871

08000a04 <convertToAscii>:

char convertToAscii(char character){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if((uint8_t) character <= 0x0F){
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d803      	bhi.n	8000a1c <convertToAscii+0x18>
		return	character + 0x30;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3330      	adds	r3, #48	; 0x30
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	e000      	b.n	8000a1e <convertToAscii+0x1a>
	}else{
		return	character;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <pumpChecksum>:

void pumpChecksum(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	uint16_t sum = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i <= 12; i++){
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	e00a      	b.n	8000a52 <pumpChecksum+0x26>
		sum +=tx_frame[i];
 8000a3c:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <pumpChecksum+0x68>)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	4413      	add	r3, r2
 8000a4a:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i <= 12; i++){
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b0c      	cmp	r3, #12
 8000a56:	ddf1      	ble.n	8000a3c <pumpChecksum+0x10>
	}
	tx_frame[13] = convertToAscii((sum>>4)&0x000F);
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffcc 	bl	8000a04 <convertToAscii>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <pumpChecksum+0x68>)
 8000a72:	735a      	strb	r2, [r3, #13]
	tx_frame[14] = convertToAscii(sum&0x000F);
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f003 030f 	and.w	r3, r3, #15
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffc0 	bl	8000a04 <convertToAscii>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <pumpChecksum+0x68>)
 8000a8a:	739a      	strb	r2, [r3, #14]

	return;
 8000a8c:	bf00      	nop
}
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000870 	.word	0x20000870

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x44>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x44>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a4e      	ldr	r2, [pc, #312]	; (8000c38 <HAL_ETH_MspInit+0x158>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	f040 8096 	bne.w	8000c30 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b04:	4b4d      	ldr	r3, [pc, #308]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a3a      	ldr	r2, [pc, #232]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a34      	ldr	r2, [pc, #208]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bac:	2332      	movs	r3, #50	; 0x32
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481e      	ldr	r0, [pc, #120]	; (8000c40 <HAL_ETH_MspInit+0x160>)
 8000bc8:	f000 ff48 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bcc:	2386      	movs	r3, #134	; 0x86
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_ETH_MspInit+0x164>)
 8000be8:	f000 ff38 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <HAL_ETH_MspInit+0x168>)
 8000c0a:	f000 ff27 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <HAL_ETH_MspInit+0x16c>)
 8000c2c:	f000 ff16 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b0      	sub	sp, #192	; 0xc0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2290      	movs	r2, #144	; 0x90
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fef3 	bl	8004a5c <memset>
  if(huart->Instance==UART5)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a58      	ldr	r2, [pc, #352]	; (8000ddc <HAL_UART_MspInit+0x18c>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d15f      	bne.n	8000d40 <HAL_UART_MspInit+0xf0>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c84:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 ff26 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9a:	f7ff fe6b 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c9e:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a4f      	ldr	r2, [pc, #316]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a43      	ldr	r2, [pc, #268]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8000d00:	2307      	movs	r3, #7
 8000d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4835      	ldr	r0, [pc, #212]	; (8000de4 <HAL_UART_MspInit+0x194>)
 8000d0e:	f000 fea5 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d36:	4619      	mov	r1, r3
 8000d38:	482b      	ldr	r0, [pc, #172]	; (8000de8 <HAL_UART_MspInit+0x198>)
 8000d3a:	f000 fe8f 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3e:	e049      	b.n	8000dd4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a29      	ldr	r2, [pc, #164]	; (8000dec <HAL_UART_MspInit+0x19c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d144      	bne.n	8000dd4 <HAL_UART_MspInit+0x184>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fec1 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8000d64:	f7ff fe06 	bl	8000974 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0x190>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db2:	2307      	movs	r3, #7
 8000db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_UART_MspInit+0x1a0>)
 8000dc0:	f000 fe4c 	bl	8001a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2027      	movs	r0, #39	; 0x27
 8000dca:	f000 fa58 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dce:	2027      	movs	r0, #39	; 0x27
 8000dd0:	f000 fa71 	bl	80012b6 <HAL_NVIC_EnableIRQ>
}
 8000dd4:	bf00      	nop
 8000dd6:	37c0      	adds	r7, #192	; 0xc0
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005000 	.word	0x40005000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40004800 	.word	0x40004800
 8000df0:	40020c00 	.word	0x40020c00

08000df4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ae      	sub	sp, #184	; 0xb8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2290      	movs	r2, #144	; 0x90
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fe21 	bl	8004a5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e22:	d159      	bne.n	8000ed8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 fe53 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e40:	f7ff fd98 	bl	8000974 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e5c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e76:	230a      	movs	r3, #10
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <HAL_PCD_MspInit+0xf0>)
 8000e84:	f000 fdea 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <HAL_PCD_MspInit+0xf0>)
 8000ea4:	f000 fdda 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb2:	6353      	str	r3, [r2, #52]	; 0x34
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	6453      	str	r3, [r2, #68]	; 0x44
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <HAL_PCD_MspInit+0xec>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	37b8      	adds	r7, #184	; 0xb8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f884 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USART3_IRQHandler+0x10>)
 8000f42:	f002 fac7 	bl	80034d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200002d8 	.word	0x200002d8

08000f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f90:	4c0b      	ldr	r4, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9e:	f7ff ffd7 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f003 fd63 	bl	8004a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fac5 	bl	8000534 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb8:	08004b14 	.word	0x08004b14
  ldr r2, =_sbss
 8000fbc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000fc0:	20000884 	.word	0x20000884

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>

08000fc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f000 f94c 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f000 f805 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd6:	f7ff fd5f 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f967 	bl	80012d2 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f92f 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000880 	.word	0x20000880

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000880 	.word	0x20000880

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	05fa0000 	.word	0x05fa0000

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff feb6 	bl	8001068 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d008      	beq.n	800131c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e052      	b.n	80013c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0216 	bic.w	r2, r2, #22
 800132a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800133a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <HAL_DMA_Abort+0x62>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0208 	bic.w	r2, r2, #8
 800135a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136c:	e013      	b.n	8001396 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800136e:	f7ff fe7b 	bl	8001068 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b05      	cmp	r3, #5
 800137a:	d90c      	bls.n	8001396 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2220      	movs	r2, #32
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e015      	b.n	80013c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e4      	bne.n	800136e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	223f      	movs	r2, #63	; 0x3f
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d004      	beq.n	80013e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e00c      	b.n	8001402 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2205      	movs	r2, #5
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e06a      	b.n	80014f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001428:	2b00      	cmp	r3, #0
 800142a:	d106      	bne.n	800143a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2223      	movs	r2, #35	; 0x23
 8001430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fb53 	bl	8000ae0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <HAL_ETH_Init+0xf0>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a30      	ldr	r2, [pc, #192]	; (8001500 <HAL_ETH_Init+0xf0>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_ETH_Init+0xf0>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_ETH_Init+0xf4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <HAL_ETH_Init+0xf4>)
 8001458:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800145c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_ETH_Init+0xf4>)
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4927      	ldr	r1, [pc, #156]	; (8001504 <HAL_ETH_Init+0xf4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_ETH_Init+0xf4>)
 800146e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001486:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001488:	f7ff fdee 	bl	8001068 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800148e:	e011      	b.n	80014b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001490:	f7ff fdea 	bl	8001068 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800149e:	d909      	bls.n	80014b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2204      	movs	r2, #4
 80014a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	22e0      	movs	r2, #224	; 0xe0
 80014ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e021      	b.n	80014f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1e4      	bne.n	8001490 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f958 	bl	800177c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f9ff 	bl	80018d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fa55 	bl	8001982 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	461a      	mov	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f9bd 	bl	8001860 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2210      	movs	r2, #16
 80014f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800

08001508 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4b51      	ldr	r3, [pc, #324]	; (8001664 <ETH_SetMACConfig+0x15c>)
 800151e:	4013      	ands	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	7c1b      	ldrb	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <ETH_SetMACConfig+0x28>
 800152a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800152e:	e000      	b.n	8001532 <ETH_SetMACConfig+0x2a>
 8001530:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	7c5b      	ldrb	r3, [r3, #17]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <ETH_SetMACConfig+0x38>
 800153a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153e:	e000      	b.n	8001542 <ETH_SetMACConfig+0x3a>
 8001540:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001542:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001548:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	7fdb      	ldrb	r3, [r3, #31]
 800154e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001550:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001556:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	7f92      	ldrb	r2, [r2, #30]
 800155c:	2a00      	cmp	r2, #0
 800155e:	d102      	bne.n	8001566 <ETH_SetMACConfig+0x5e>
 8001560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001564:	e000      	b.n	8001568 <ETH_SetMACConfig+0x60>
 8001566:	2200      	movs	r2, #0
                        macconf->Speed |
 8001568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	7f1b      	ldrb	r3, [r3, #28]
 800156e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001570:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001576:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800157e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001586:	2a00      	cmp	r2, #0
 8001588:	d102      	bne.n	8001590 <ETH_SetMACConfig+0x88>
 800158a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158e:	e000      	b.n	8001592 <ETH_SetMACConfig+0x8a>
 8001590:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001592:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	7bdb      	ldrb	r3, [r3, #15]
 8001598:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800159a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fd5c 	bl	8001080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d101      	bne.n	80015f6 <ETH_SetMACConfig+0xee>
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	e000      	b.n	80015f8 <ETH_SetMACConfig+0xf0>
 80015f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001606:	2a01      	cmp	r2, #1
 8001608:	d101      	bne.n	800160e <ETH_SetMACConfig+0x106>
 800160a:	2208      	movs	r2, #8
 800160c:	e000      	b.n	8001610 <ETH_SetMACConfig+0x108>
 800160e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001610:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001618:	2a01      	cmp	r2, #1
 800161a:	d101      	bne.n	8001620 <ETH_SetMACConfig+0x118>
 800161c:	2204      	movs	r2, #4
 800161e:	e000      	b.n	8001622 <ETH_SetMACConfig+0x11a>
 8001620:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001622:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800162a:	2a01      	cmp	r2, #1
 800162c:	d101      	bne.n	8001632 <ETH_SetMACConfig+0x12a>
 800162e:	2202      	movs	r2, #2
 8001630:	e000      	b.n	8001634 <ETH_SetMACConfig+0x12c>
 8001632:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001634:	4313      	orrs	r3, r2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fd17 	bl	8001080 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	ff20810f 	.word	0xff20810f

08001668 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <ETH_SetDMAConfig+0x110>)
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	7b1b      	ldrb	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <ETH_SetDMAConfig+0x2c>
 800168e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001692:	e000      	b.n	8001696 <ETH_SetDMAConfig+0x2e>
 8001694:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	7b5b      	ldrb	r3, [r3, #13]
 800169a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800169c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	7f52      	ldrb	r2, [r2, #29]
 80016a2:	2a00      	cmp	r2, #0
 80016a4:	d102      	bne.n	80016ac <ETH_SetDMAConfig+0x44>
 80016a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016aa:	e000      	b.n	80016ae <ETH_SetDMAConfig+0x46>
 80016ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	7b9b      	ldrb	r3, [r3, #14]
 80016b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7f1b      	ldrb	r3, [r3, #28]
 80016c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	7f9b      	ldrb	r3, [r3, #30]
 80016ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016dc:	4313      	orrs	r3, r2
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fcbe 	bl	8001080 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170c:	461a      	mov	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800171c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001722:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001728:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001730:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001732:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800173a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001740:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800174a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff fc8f 	bl	8001080 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	f8de3f23 	.word	0xf8de3f23

0800177c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0a6      	sub	sp, #152	; 0x98
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001784:	2301      	movs	r3, #1
 8001786:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001790:	2300      	movs	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017b8:	2300      	movs	r3, #0
 80017ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fe86 	bl	8001508 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001800:	2301      	movs	r3, #1
 8001802:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800180a:	2301      	movs	r3, #1
 800180c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001828:	2301      	movs	r3, #1
 800182a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800182c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001830:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001836:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff08 	bl	8001668 <ETH_SetDMAConfig>
}
 8001858:	bf00      	nop
 800185a:	3798      	adds	r7, #152	; 0x98
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3305      	adds	r3, #5
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	3204      	adds	r2, #4
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <ETH_MACAddressConfig+0x68>)
 8001882:	4413      	add	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3303      	adds	r3, #3
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	061a      	lsls	r2, r3, #24
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3302      	adds	r3, #2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3301      	adds	r3, #1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	4313      	orrs	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <ETH_MACAddressConfig+0x6c>)
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	bf00      	nop
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40028040 	.word	0x40028040
 80018cc:	40028044 	.word	0x40028044

080018d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e03e      	b.n	800195c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	3206      	adds	r2, #6
 8001910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d80c      	bhi.n	8001940 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68d9      	ldr	r1, [r3, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	461a      	mov	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	e004      	b.n	800194a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d9bd      	bls.n	80018de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001974:	611a      	str	r2, [r3, #16]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e046      	b.n	8001a1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6919      	ldr	r1, [r3, #16]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	3212      	adds	r2, #18
 80019ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d80c      	bhi.n	8001a0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6919      	ldr	r1, [r3, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	e004      	b.n	8001a18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d9b5      	bls.n	8001990 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4e:	60da      	str	r2, [r3, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e175      	b.n	8001d68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8164 	bne.w	8001d62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d005      	beq.n	8001ab2 <HAL_GPIO_Init+0x56>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d130      	bne.n	8001b14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d017      	beq.n	8001b50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d123      	bne.n	8001ba4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80be 	beq.w	8001d62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a65      	ldr	r2, [pc, #404]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_GPIO_Init+0x324>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bfe:	4a61      	ldr	r2, [pc, #388]	; (8001d84 <HAL_GPIO_Init+0x328>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d037      	beq.n	8001c9a <HAL_GPIO_Init+0x23e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <HAL_GPIO_Init+0x330>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d031      	beq.n	8001c96 <HAL_GPIO_Init+0x23a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <HAL_GPIO_Init+0x236>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a55      	ldr	r2, [pc, #340]	; (8001d94 <HAL_GPIO_Init+0x338>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_Init+0x232>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a54      	ldr	r2, [pc, #336]	; (8001d98 <HAL_GPIO_Init+0x33c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_Init+0x22e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <HAL_GPIO_Init+0x340>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x22a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_GPIO_Init+0x344>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_GPIO_Init+0x348>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x350>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c72:	2309      	movs	r3, #9
 8001c74:	e012      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c76:	230a      	movs	r3, #10
 8001c78:	e010      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00e      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00c      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c82:	2306      	movs	r3, #6
 8001c84:	e00a      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c86:	2305      	movs	r3, #5
 8001c88:	e008      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e004      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_GPIO_Init+0x240>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	f002 0203 	and.w	r2, r2, #3
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	4093      	lsls	r3, r2
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cac:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_GPIO_Init+0x328>)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cde:	4a34      	ldr	r2, [pc, #208]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d08:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_GPIO_Init+0x354>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	f67f ae86 	bls.w	8001a7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40013800 	.word	0x40013800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40021400 	.word	0x40021400
 8001da0:	40021800 	.word	0x40021800
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40022400 	.word	0x40022400
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de8:	b08f      	sub	sp, #60	; 0x3c
 8001dea:	af0a      	add	r7, sp, #40	; 0x28
 8001dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e116      	b.n	8002026 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe ffee 	bl	8000df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 fb74 	bl	8004524 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	687e      	ldr	r6, [r7, #4]
 8001e44:	466d      	mov	r5, sp
 8001e46:	f106 0410 	add.w	r4, r6, #16
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5a:	1d33      	adds	r3, r6, #4
 8001e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f002 fb08 	bl	8004474 <USB_CoreInit>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0d7      	b.n	8002026 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fb62 	bl	8004546 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	e04a      	b.n	8001f1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	333d      	adds	r3, #61	; 0x3d
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	333c      	adds	r3, #60	; 0x3c
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	b298      	uxth	r0, r3
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3344      	adds	r3, #68	; 0x44
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3340      	adds	r3, #64	; 0x40
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	3348      	adds	r3, #72	; 0x48
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	334c      	adds	r3, #76	; 0x4c
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3354      	adds	r3, #84	; 0x54
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d3af      	bcc.n	8001e88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e044      	b.n	8001fb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3b5      	bcc.n	8001f2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	687e      	ldr	r6, [r7, #4]
 8001fca:	466d      	mov	r5, sp
 8001fcc:	f106 0410 	add.w	r4, r6, #16
 8001fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe0:	1d33      	adds	r3, r6, #4
 8001fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe4:	6838      	ldr	r0, [r7, #0]
 8001fe6:	f002 fafb 	bl	80045e0 <USB_DevInit>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e014      	b.n	8002026 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f80b 	bl	8002030 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fcb9 	bl	8004996 <USB_DevDisconnect>

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002030 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_PCDEx_ActivateLPM+0x44>)
 8002060:	4313      	orrs	r3, r2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	10000003 	.word	0x10000003

08002078 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40007000 	.word	0x40007000

08002098 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c6:	f7fe ffcf 	bl	8001068 <HAL_GetTick>
 80020ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020cc:	e009      	b.n	80020e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020ce:	f7fe ffcb 	bl	8001068 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020dc:	d901      	bls.n	80020e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e022      	b.n	8002128 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d1ee      	bne.n	80020ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fc:	f7fe ffb4 	bl	8001068 <HAL_GetTick>
 8002100:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002102:	e009      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002104:	f7fe ffb0 	bl	8001068 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002112:	d901      	bls.n	8002118 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e007      	b.n	8002128 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_PWREx_EnableOverDrive+0x9c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002124:	d1ee      	bne.n	8002104 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	40007000 	.word	0x40007000

08002138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e29b      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8087 	beq.w	800226a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800215c:	4b96      	ldr	r3, [pc, #600]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b04      	cmp	r3, #4
 8002166:	d00c      	beq.n	8002182 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002168:	4b93      	ldr	r3, [pc, #588]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d112      	bne.n	800219a <HAL_RCC_OscConfig+0x62>
 8002174:	4b90      	ldr	r3, [pc, #576]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002180:	d10b      	bne.n	800219a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002182:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06c      	beq.n	8002268 <HAL_RCC_OscConfig+0x130>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d168      	bne.n	8002268 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e275      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x7a>
 80021a4:	4b84      	ldr	r3, [pc, #528]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a83      	ldr	r2, [pc, #524]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e02e      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x9c>
 80021ba:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7e      	ldr	r2, [pc, #504]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b7c      	ldr	r3, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7b      	ldr	r2, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0xc0>
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a75      	ldr	r2, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021f8:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff26 	bl	8001068 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe ff22 	bl	8001068 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e229      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xe8>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe ff12 	bl	8001068 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe ff0e 	bl	8001068 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e215      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x110>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d069      	beq.n	800234a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x190>
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x17a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1e9      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	493d      	ldr	r1, [pc, #244]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e040      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d023      	beq.n	8002318 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fec4 	bl	8001068 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7fe fec0 	bl	8001068 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1c7      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4929      	ldr	r1, [pc, #164]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
 8002316:	e018      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fea0 	bl	8001068 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7fe fe9c 	bl	8001068 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1a3      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d038      	beq.n	80023c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d019      	beq.n	8002392 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7fe fe7d 	bl	8001068 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002372:	f7fe fe79 	bl	8001068 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e180      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x23a>
 8002390:	e01a      	b.n	80023c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_RCC_OscConfig+0x280>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7fe fe63 	bl	8001068 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a6:	f7fe fe5f 	bl	8001068 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d903      	bls.n	80023bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e166      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
 80023b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b92      	ldr	r3, [pc, #584]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ee      	bne.n	80023a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a4 	beq.w	800251e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b8c      	ldr	r3, [pc, #560]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a88      	ldr	r2, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b86      	ldr	r3, [pc, #536]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fe:	4b83      	ldr	r3, [pc, #524]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800240a:	4b80      	ldr	r3, [pc, #512]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7f      	ldr	r2, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7fe fe27 	bl	8001068 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7fe fe23 	bl	8001068 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e12a      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002430:	4b76      	ldr	r3, [pc, #472]	; (800260c <HAL_RCC_OscConfig+0x4d4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x31a>
 8002444:	4b70      	ldr	r3, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a6f      	ldr	r2, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
 8002450:	e02d      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x33c>
 800245a:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6713      	str	r3, [r2, #112]	; 0x70
 8002466:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	4a67      	ldr	r2, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6713      	str	r3, [r2, #112]	; 0x70
 8002472:	e01c      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x35e>
 800247c:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a61      	ldr	r2, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	4a5e      	ldr	r2, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	; 0x70
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x376>
 8002496:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a5b      	ldr	r2, [pc, #364]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7fe fdd7 	bl	8001068 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fdd3 	bl	8001068 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0d8      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCC_OscConfig+0x386>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fdc1 	bl	8001068 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fdbd 	bl	8001068 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0c2      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	4b41      	ldr	r3, [pc, #260]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a3c      	ldr	r2, [pc, #240]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80ae 	beq.w	8002684 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	4b37      	ldr	r3, [pc, #220]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d06d      	beq.n	8002610 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d14b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a31      	ldr	r2, [pc, #196]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fd8e 	bl	8001068 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fd8a 	bl	8001068 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e091      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	491b      	ldr	r1, [pc, #108]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fd5c 	bl	8001068 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fd58 	bl	8001068 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e05f      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x47c>
 80025d2:	e057      	b.n	8002684 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fd42 	bl	8001068 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fd3e 	bl	8001068 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e045      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4b0>
 8002606:	e03d      	b.n	8002684 <HAL_RCC_OscConfig+0x54c>
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_RCC_OscConfig+0x558>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d030      	beq.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d129      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d122      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002646:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002648:	4293      	cmp	r3, r2
 800264a:	d119      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	3b01      	subs	r3, #1
 800265a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d10f      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d107      	bne.n	8002680 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0d0      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ac:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d910      	bls.n	80026dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b67      	ldr	r3, [pc, #412]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 020f 	bic.w	r2, r3, #15
 80026c2:	4965      	ldr	r1, [pc, #404]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0b8      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80026fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002716:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	494d      	ldr	r1, [pc, #308]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d040      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e07f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e073      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e06b      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002776:	4b39      	ldr	r3, [pc, #228]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4936      	ldr	r1, [pc, #216]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fc6e 	bl	8001068 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7fe fc6a 	bl	8001068 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e053      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 020c 	and.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1eb      	bne.n	8002790 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d210      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 020f 	bic.w	r2, r3, #15
 80027ce:	4922      	ldr	r1, [pc, #136]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e032      	b.n	800284e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4916      	ldr	r1, [pc, #88]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	490e      	ldr	r1, [pc, #56]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002826:	f000 f821 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800282a:	4602      	mov	r2, r0
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	490a      	ldr	r1, [pc, #40]	; (8002860 <HAL_RCC_ClockConfig+0x1cc>)
 8002838:	5ccb      	ldrb	r3, [r1, r3]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x1d0>)
 8002840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1d4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fbca 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023c00 	.word	0x40023c00
 800285c:	40023800 	.word	0x40023800
 8002860:	08004aec 	.word	0x08004aec
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800286c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002870:	b094      	sub	sp, #80	; 0x50
 8002872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	647b      	str	r3, [r7, #68]	; 0x44
 8002878:	2300      	movs	r3, #0
 800287a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800287c:	2300      	movs	r3, #0
 800287e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002884:	4b79      	ldr	r3, [pc, #484]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d00d      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x40>
 8002890:	2b08      	cmp	r3, #8
 8002892:	f200 80e1 	bhi.w	8002a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x34>
 800289a:	2b04      	cmp	r3, #4
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800289e:	e0db      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028a4:	e0db      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a6:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028aa:	e0d8      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028b6:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d063      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	2200      	movs	r2, #0
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80028cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
 80028da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028de:	4622      	mov	r2, r4
 80028e0:	462b      	mov	r3, r5
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	0159      	lsls	r1, r3, #5
 80028ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f0:	0150      	lsls	r0, r2, #5
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4621      	mov	r1, r4
 80028f8:	1a51      	subs	r1, r2, r1
 80028fa:	6139      	str	r1, [r7, #16]
 80028fc:	4629      	mov	r1, r5
 80028fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002910:	4659      	mov	r1, fp
 8002912:	018b      	lsls	r3, r1, #6
 8002914:	4651      	mov	r1, sl
 8002916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800291a:	4651      	mov	r1, sl
 800291c:	018a      	lsls	r2, r1, #6
 800291e:	4651      	mov	r1, sl
 8002920:	ebb2 0801 	subs.w	r8, r2, r1
 8002924:	4659      	mov	r1, fp
 8002926:	eb63 0901 	sbc.w	r9, r3, r1
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800293a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800293e:	4690      	mov	r8, r2
 8002940:	4699      	mov	r9, r3
 8002942:	4623      	mov	r3, r4
 8002944:	eb18 0303 	adds.w	r3, r8, r3
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	462b      	mov	r3, r5
 800294c:	eb49 0303 	adc.w	r3, r9, r3
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800295e:	4629      	mov	r1, r5
 8002960:	024b      	lsls	r3, r1, #9
 8002962:	4621      	mov	r1, r4
 8002964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002968:	4621      	mov	r1, r4
 800296a:	024a      	lsls	r2, r1, #9
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002972:	2200      	movs	r2, #0
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
 8002976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800297c:	f7fd fc5c 	bl	8000238 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002988:	e058      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	2200      	movs	r2, #0
 8002992:	4618      	mov	r0, r3
 8002994:	4611      	mov	r1, r2
 8002996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029a4:	4642      	mov	r2, r8
 80029a6:	464b      	mov	r3, r9
 80029a8:	f04f 0000 	mov.w	r0, #0
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	0159      	lsls	r1, r3, #5
 80029b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b6:	0150      	lsls	r0, r2, #5
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4641      	mov	r1, r8
 80029be:	ebb2 0a01 	subs.w	sl, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029dc:	ebb2 040a 	subs.w	r4, r2, sl
 80029e0:	eb63 050b 	sbc.w	r5, r3, fp
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	00eb      	lsls	r3, r5, #3
 80029ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f2:	00e2      	lsls	r2, r4, #3
 80029f4:	4614      	mov	r4, r2
 80029f6:	461d      	mov	r5, r3
 80029f8:	4643      	mov	r3, r8
 80029fa:	18e3      	adds	r3, r4, r3
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	464b      	mov	r3, r9
 8002a00:	eb45 0303 	adc.w	r3, r5, r3
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a12:	4629      	mov	r1, r5
 8002a14:	028b      	lsls	r3, r1, #10
 8002a16:	4621      	mov	r1, r4
 8002a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	028a      	lsls	r2, r1, #10
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a26:	2200      	movs	r2, #0
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	61fa      	str	r2, [r7, #28]
 8002a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a30:	f7fd fc02 	bl	8000238 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3750      	adds	r7, #80	; 0x50
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200

08002a78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000000 	.word	0x20000000

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08004afc 	.word	0x08004afc

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffdc 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0b5b      	lsrs	r3, r3, #13
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08004afc 	.word	0x08004afc

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b08:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b12:	6093      	str	r3, [r2, #8]
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	4964      	ldr	r1, [pc, #400]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d017      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	4959      	ldr	r1, [pc, #356]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b76:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	494a      	ldr	r1, [pc, #296]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 808b 	beq.w	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a34      	ldr	r2, [pc, #208]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe fa3e 	bl	8001068 <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fa3a 	bl	8001068 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e38f      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d035      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d02e      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d114      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fa02 	bl	8001068 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe f9fe 	bl	8001068 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e351      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c96:	d111      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	4901      	ldr	r1, [pc, #4]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	0ffffcff 	.word	0x0ffffcff
 8002cbc:	4bac      	ldr	r3, [pc, #688]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4aab      	ldr	r2, [pc, #684]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cc6:	6093      	str	r3, [r2, #8]
 8002cc8:	4ba9      	ldr	r3, [pc, #676]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	49a6      	ldr	r1, [pc, #664]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ce6:	4ba2      	ldr	r3, [pc, #648]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cec:	4aa0      	ldr	r2, [pc, #640]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cf6:	4b9e      	ldr	r3, [pc, #632]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	499b      	ldr	r1, [pc, #620]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d14:	4b96      	ldr	r3, [pc, #600]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d22:	4993      	ldr	r1, [pc, #588]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d36:	4b8e      	ldr	r3, [pc, #568]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	498a      	ldr	r1, [pc, #552]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d58:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d66:	4982      	ldr	r1, [pc, #520]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d7a:	4b7d      	ldr	r3, [pc, #500]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	4979      	ldr	r1, [pc, #484]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9c:	4b74      	ldr	r3, [pc, #464]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4971      	ldr	r1, [pc, #452]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dbe:	4b6c      	ldr	r3, [pc, #432]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f023 020c 	bic.w	r2, r3, #12
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	4968      	ldr	r1, [pc, #416]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de0:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	4960      	ldr	r1, [pc, #384]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e10:	4957      	ldr	r1, [pc, #348]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e24:	4b52      	ldr	r3, [pc, #328]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	494f      	ldr	r1, [pc, #316]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	4946      	ldr	r1, [pc, #280]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e68:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	493e      	ldr	r1, [pc, #248]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e8a:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	4935      	ldr	r1, [pc, #212]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eac:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eba:	492d      	ldr	r1, [pc, #180]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d011      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ece:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	4924      	ldr	r1, [pc, #144]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1c:	4914      	ldr	r1, [pc, #80]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f40:	490b      	ldr	r1, [pc, #44]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00f      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f64:	4902      	ldr	r1, [pc, #8]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f6c:	e002      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f80:	4b8a      	ldr	r3, [pc, #552]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	4986      	ldr	r1, [pc, #536]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fa4:	4b81      	ldr	r3, [pc, #516]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002faa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb4:	497d      	ldr	r1, [pc, #500]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d006      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80d6 	beq.w	800317c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fd0:	4b76      	ldr	r3, [pc, #472]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a75      	ldr	r2, [pc, #468]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe f844 	bl	8001068 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fe4:	f7fe f840 	bl	8001068 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e195      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ff6:	4b6d      	ldr	r3, [pc, #436]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d021      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11d      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003016:	4b65      	ldr	r3, [pc, #404]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003024:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302a:	0e1b      	lsrs	r3, r3, #24
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	019a      	lsls	r2, r3, #6
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	071b      	lsls	r3, r3, #28
 800304a:	4958      	ldr	r1, [pc, #352]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003066:	d00a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02e      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307c:	d129      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800307e:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800308c:	4b47      	ldr	r3, [pc, #284]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003092:	0f1b      	lsrs	r3, r3, #28
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	493e      	ldr	r1, [pc, #248]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030ba:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c0:	f023 021f 	bic.w	r2, r3, #31
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	3b01      	subs	r3, #1
 80030ca:	4938      	ldr	r1, [pc, #224]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01d      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030de:	4b33      	ldr	r3, [pc, #204]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e4:	0e1b      	lsrs	r3, r3, #24
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030ec:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f2:	0f1b      	lsrs	r3, r3, #28
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	019a      	lsls	r2, r3, #6
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	041b      	lsls	r3, r3, #16
 8003106:	431a      	orrs	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	071b      	lsls	r3, r3, #28
 8003112:	4926      	ldr	r1, [pc, #152]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d011      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	019a      	lsls	r2, r3, #6
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	071b      	lsls	r3, r3, #28
 8003142:	491a      	ldr	r1, [pc, #104]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003156:	f7fd ff87 	bl	8001068 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800315e:	f7fd ff83 	bl	8001068 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b64      	cmp	r3, #100	; 0x64
 800316a:	d901      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0d8      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b01      	cmp	r3, #1
 8003180:	f040 80ce 	bne.w	8003320 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a08      	ldr	r2, [pc, #32]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fd ff6a 	bl	8001068 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003196:	e00b      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003198:	f7fd ff66 	bl	8001068 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d904      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0bb      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b0:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031bc:	d0ec      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02e      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d12a      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031e6:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031f4:	4b4d      	ldr	r3, [pc, #308]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	0f1b      	lsrs	r3, r3, #28
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	019a      	lsls	r2, r3, #6
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	061b      	lsls	r3, r3, #24
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	4944      	ldr	r1, [pc, #272]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003222:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003228:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	493d      	ldr	r1, [pc, #244]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d022      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003250:	d11d      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	0f1b      	lsrs	r3, r3, #28
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	431a      	orrs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4929      	ldr	r1, [pc, #164]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d028      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	0e1b      	lsrs	r3, r3, #24
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	019a      	lsls	r2, r3, #6
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	431a      	orrs	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	071b      	lsls	r3, r3, #28
 80032ce:	4917      	ldr	r1, [pc, #92]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	4911      	ldr	r1, [pc, #68]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0e      	ldr	r2, [pc, #56]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fd feb6 	bl	8001068 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003300:	f7fd feb2 	bl	8001068 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e007      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800331a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331e:	d1ef      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800

08003330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e040      	b.n	80033c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd fc7c 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fbc2 	bl	8003af8 <UART_SetConfig>
 8003374:	4603      	mov	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e022      	b.n	80033c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fe1a 	bl	8003fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fea1 	bl	8004104 <UART_CheckIdleState>
 80033c2:	4603      	mov	r3, r0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d171      	bne.n	80034c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Transmit+0x24>
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e06a      	b.n	80034ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2221      	movs	r2, #33	; 0x21
 8003400:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003402:	f7fd fe31 	bl	8001068 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d108      	bne.n	8003434 <HAL_UART_Transmit+0x68>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e003      	b.n	800343c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800343c:	e02c      	b.n	8003498 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fea8 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e038      	b.n	80034ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3302      	adds	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e007      	b.n	8003486 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1cc      	bne.n	800343e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fe75 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e005      	b.n	80034ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e000      	b.n	80034ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b0ba      	sub	sp, #232	; 0xe8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80034fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8003502:	4013      	ands	r3, r2
 8003504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d115      	bne.n	800353c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00f      	beq.n	800353c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800351c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 82ac 	beq.w	8003a8a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
      }
      return;
 800353a:	e2a6      	b.n	8003a8a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800353c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8117 	beq.w	8003774 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003556:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_UART_IRQHandler+0x298>)
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 810a 	beq.w	8003774 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d011      	beq.n	8003590 <HAL_UART_IRQHandler+0xbc>
 800356c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d011      	beq.n	80035c0 <HAL_UART_IRQHandler+0xec>
 800359c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2202      	movs	r2, #2
 80035ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d011      	beq.n	80035f0 <HAL_UART_IRQHandler+0x11c>
 80035cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2204      	movs	r2, #4
 80035de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d017      	beq.n	800362c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800360c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2208      	movs	r2, #8
 800361a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003622:	f043 0208 	orr.w	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800362c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <HAL_UART_IRQHandler+0x18a>
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00c      	beq.n	800365e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800364c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8212 	beq.w	8003a8e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d005      	beq.n	80036b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d04f      	beq.n	8003756 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fe37 	bl	800432a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d141      	bne.n	800374e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3308      	adds	r3, #8
 80036d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800370e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1d9      	bne.n	80036ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	2b00      	cmp	r3, #0
 800371c:	d013      	beq.n	8003746 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_UART_IRQHandler+0x29c>)
 8003724:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd fe4d 	bl	80013ca <HAL_DMA_Abort_IT>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d017      	beq.n	8003766 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003740:	4610      	mov	r0, r2
 8003742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	e00f      	b.n	8003766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f9b6 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	e00b      	b.n	8003766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9b2 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	e007      	b.n	8003766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9ae 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003764:	e193      	b.n	8003a8e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003766:	bf00      	nop
    return;
 8003768:	e191      	b.n	8003a8e <HAL_UART_IRQHandler+0x5ba>
 800376a:	bf00      	nop
 800376c:	04000120 	.word	0x04000120
 8003770:	080043f3 	.word	0x080043f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003778:	2b01      	cmp	r3, #1
 800377a:	f040 814c 	bne.w	8003a16 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8145 	beq.w	8003a16 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 813e 	beq.w	8003a16 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2210      	movs	r2, #16
 80037a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	f040 80b6 	bne.w	800391e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8165 	beq.w	8003a92 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037d2:	429a      	cmp	r2, r3
 80037d4:	f080 815d 	bcs.w	8003a92 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ec:	f000 8086 	beq.w	80038fc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800381a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800381e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1da      	bne.n	80037f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3308      	adds	r3, #8
 8003840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800384a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3308      	adds	r3, #8
 800385a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800385e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e1      	bne.n	800383a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3308      	adds	r3, #8
 8003896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800389a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800389c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e3      	bne.n	8003876 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038cc:	f023 0310 	bic.w	r3, r3, #16
 80038d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038de:	65bb      	str	r3, [r7, #88]	; 0x58
 80038e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e4      	bne.n	80038bc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fcf7 	bl	80012ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800390e:	b29b      	uxth	r3, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	b29b      	uxth	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8d8 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800391c:	e0b9      	b.n	8003a92 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800392a:	b29b      	uxth	r3, r3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80ab 	beq.w	8003a96 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a6 	beq.w	8003a96 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800395e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e4      	bne.n	800394a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3308      	adds	r3, #8
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	623b      	str	r3, [r7, #32]
   return(result);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3308      	adds	r3, #8
 80039a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039a4:	633a      	str	r2, [r7, #48]	; 0x30
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e3      	bne.n	8003980 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f023 0310 	bic.w	r3, r3, #16
 80039e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	69b9      	ldr	r1, [r7, #24]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	617b      	str	r3, [r7, #20]
   return(result);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e4      	bne.n	80039cc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f85c 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a14:	e03f      	b.n	8003a96 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00e      	beq.n	8003a40 <HAL_UART_IRQHandler+0x56c>
 8003a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f853 	bl	8003ae4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a3e:	e02d      	b.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01c      	beq.n	8003a9a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
    }
    return;
 8003a68:	e017      	b.n	8003a9a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d012      	beq.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
 8003a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00c      	beq.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fccb 	bl	800441e <UART_EndTransmit_IT>
    return;
 8003a88:	e008      	b.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a8a:	bf00      	nop
 8003a8c:	e006      	b.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a8e:	bf00      	nop
 8003a90:	e004      	b.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a92:	bf00      	nop
 8003a94:	e002      	b.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a9a:	bf00      	nop
  }

}
 8003a9c:	37e8      	adds	r7, #232	; 0xe8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop

08003aa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4ba6      	ldr	r3, [pc, #664]	; (8003dbc <UART_SetConfig+0x2c4>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	6979      	ldr	r1, [r7, #20]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a94      	ldr	r2, [pc, #592]	; (8003dc0 <UART_SetConfig+0x2c8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d120      	bne.n	8003bb6 <UART_SetConfig+0xbe>
 8003b74:	4b93      	ldr	r3, [pc, #588]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d816      	bhi.n	8003bb0 <UART_SetConfig+0xb8>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0x90>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003ba5 	.word	0x08003ba5
 8003b90:	08003b9f 	.word	0x08003b9f
 8003b94:	08003bab 	.word	0x08003bab
 8003b98:	2301      	movs	r3, #1
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e150      	b.n	8003e40 <UART_SetConfig+0x348>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e14d      	b.n	8003e40 <UART_SetConfig+0x348>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e14a      	b.n	8003e40 <UART_SetConfig+0x348>
 8003baa:	2308      	movs	r3, #8
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e147      	b.n	8003e40 <UART_SetConfig+0x348>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e144      	b.n	8003e40 <UART_SetConfig+0x348>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a83      	ldr	r2, [pc, #524]	; (8003dc8 <UART_SetConfig+0x2d0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d132      	bne.n	8003c26 <UART_SetConfig+0x12e>
 8003bc0:	4b80      	ldr	r3, [pc, #512]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d828      	bhi.n	8003c20 <UART_SetConfig+0x128>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0xdc>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c21 	.word	0x08003c21
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c0f 	.word	0x08003c0f
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003c21 	.word	0x08003c21
 8003c04:	08003c1b 	.word	0x08003c1b
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e118      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e115      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c14:	2304      	movs	r3, #4
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e112      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e10f      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c20:	2310      	movs	r3, #16
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e10c      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d120      	bne.n	8003c72 <UART_SetConfig+0x17a>
 8003c30:	4b64      	ldr	r3, [pc, #400]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c3a:	2b30      	cmp	r3, #48	; 0x30
 8003c3c:	d013      	beq.n	8003c66 <UART_SetConfig+0x16e>
 8003c3e:	2b30      	cmp	r3, #48	; 0x30
 8003c40:	d814      	bhi.n	8003c6c <UART_SetConfig+0x174>
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d009      	beq.n	8003c5a <UART_SetConfig+0x162>
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d810      	bhi.n	8003c6c <UART_SetConfig+0x174>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <UART_SetConfig+0x15c>
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d006      	beq.n	8003c60 <UART_SetConfig+0x168>
 8003c52:	e00b      	b.n	8003c6c <UART_SetConfig+0x174>
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e0f2      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e0ef      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c60:	2304      	movs	r3, #4
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e0ec      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c66:	2308      	movs	r3, #8
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e0e9      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e0e6      	b.n	8003e40 <UART_SetConfig+0x348>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a56      	ldr	r2, [pc, #344]	; (8003dd0 <UART_SetConfig+0x2d8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d120      	bne.n	8003cbe <UART_SetConfig+0x1c6>
 8003c7c:	4b51      	ldr	r3, [pc, #324]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c86:	2bc0      	cmp	r3, #192	; 0xc0
 8003c88:	d013      	beq.n	8003cb2 <UART_SetConfig+0x1ba>
 8003c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c8c:	d814      	bhi.n	8003cb8 <UART_SetConfig+0x1c0>
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d009      	beq.n	8003ca6 <UART_SetConfig+0x1ae>
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d810      	bhi.n	8003cb8 <UART_SetConfig+0x1c0>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <UART_SetConfig+0x1a8>
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d006      	beq.n	8003cac <UART_SetConfig+0x1b4>
 8003c9e:	e00b      	b.n	8003cb8 <UART_SetConfig+0x1c0>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e0cc      	b.n	8003e40 <UART_SetConfig+0x348>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e0c9      	b.n	8003e40 <UART_SetConfig+0x348>
 8003cac:	2304      	movs	r3, #4
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e0c6      	b.n	8003e40 <UART_SetConfig+0x348>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e0c3      	b.n	8003e40 <UART_SetConfig+0x348>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e0c0      	b.n	8003e40 <UART_SetConfig+0x348>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a44      	ldr	r2, [pc, #272]	; (8003dd4 <UART_SetConfig+0x2dc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d125      	bne.n	8003d14 <UART_SetConfig+0x21c>
 8003cc8:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd6:	d017      	beq.n	8003d08 <UART_SetConfig+0x210>
 8003cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cdc:	d817      	bhi.n	8003d0e <UART_SetConfig+0x216>
 8003cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce2:	d00b      	beq.n	8003cfc <UART_SetConfig+0x204>
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce8:	d811      	bhi.n	8003d0e <UART_SetConfig+0x216>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <UART_SetConfig+0x1fe>
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf2:	d006      	beq.n	8003d02 <UART_SetConfig+0x20a>
 8003cf4:	e00b      	b.n	8003d0e <UART_SetConfig+0x216>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e0a1      	b.n	8003e40 <UART_SetConfig+0x348>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e09e      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d02:	2304      	movs	r3, #4
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e09b      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e098      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d0e:	2310      	movs	r3, #16
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e095      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <UART_SetConfig+0x2e0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d125      	bne.n	8003d6a <UART_SetConfig+0x272>
 8003d1e:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d2c:	d017      	beq.n	8003d5e <UART_SetConfig+0x266>
 8003d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d32:	d817      	bhi.n	8003d64 <UART_SetConfig+0x26c>
 8003d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d38:	d00b      	beq.n	8003d52 <UART_SetConfig+0x25a>
 8003d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3e:	d811      	bhi.n	8003d64 <UART_SetConfig+0x26c>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <UART_SetConfig+0x254>
 8003d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d48:	d006      	beq.n	8003d58 <UART_SetConfig+0x260>
 8003d4a:	e00b      	b.n	8003d64 <UART_SetConfig+0x26c>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e076      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d52:	2302      	movs	r3, #2
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e073      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e070      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e06d      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d64:	2310      	movs	r3, #16
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e06a      	b.n	8003e40 <UART_SetConfig+0x348>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <UART_SetConfig+0x2e4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d138      	bne.n	8003de6 <UART_SetConfig+0x2ee>
 8003d74:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d82:	d017      	beq.n	8003db4 <UART_SetConfig+0x2bc>
 8003d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d88:	d82a      	bhi.n	8003de0 <UART_SetConfig+0x2e8>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8e:	d00b      	beq.n	8003da8 <UART_SetConfig+0x2b0>
 8003d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d94:	d824      	bhi.n	8003de0 <UART_SetConfig+0x2e8>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <UART_SetConfig+0x2aa>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d006      	beq.n	8003dae <UART_SetConfig+0x2b6>
 8003da0:	e01e      	b.n	8003de0 <UART_SetConfig+0x2e8>
 8003da2:	2300      	movs	r3, #0
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e04b      	b.n	8003e40 <UART_SetConfig+0x348>
 8003da8:	2302      	movs	r3, #2
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e048      	b.n	8003e40 <UART_SetConfig+0x348>
 8003dae:	2304      	movs	r3, #4
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e045      	b.n	8003e40 <UART_SetConfig+0x348>
 8003db4:	2308      	movs	r3, #8
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e042      	b.n	8003e40 <UART_SetConfig+0x348>
 8003dba:	bf00      	nop
 8003dbc:	efff69f3 	.word	0xefff69f3
 8003dc0:	40011000 	.word	0x40011000
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40004400 	.word	0x40004400
 8003dcc:	40004800 	.word	0x40004800
 8003dd0:	40004c00 	.word	0x40004c00
 8003dd4:	40005000 	.word	0x40005000
 8003dd8:	40011400 	.word	0x40011400
 8003ddc:	40007800 	.word	0x40007800
 8003de0:	2310      	movs	r3, #16
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e02c      	b.n	8003e40 <UART_SetConfig+0x348>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a72      	ldr	r2, [pc, #456]	; (8003fb4 <UART_SetConfig+0x4bc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d125      	bne.n	8003e3c <UART_SetConfig+0x344>
 8003df0:	4b71      	ldr	r3, [pc, #452]	; (8003fb8 <UART_SetConfig+0x4c0>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dfe:	d017      	beq.n	8003e30 <UART_SetConfig+0x338>
 8003e00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e04:	d817      	bhi.n	8003e36 <UART_SetConfig+0x33e>
 8003e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0a:	d00b      	beq.n	8003e24 <UART_SetConfig+0x32c>
 8003e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e10:	d811      	bhi.n	8003e36 <UART_SetConfig+0x33e>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <UART_SetConfig+0x326>
 8003e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1a:	d006      	beq.n	8003e2a <UART_SetConfig+0x332>
 8003e1c:	e00b      	b.n	8003e36 <UART_SetConfig+0x33e>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e00d      	b.n	8003e40 <UART_SetConfig+0x348>
 8003e24:	2302      	movs	r3, #2
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e00a      	b.n	8003e40 <UART_SetConfig+0x348>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e007      	b.n	8003e40 <UART_SetConfig+0x348>
 8003e30:	2308      	movs	r3, #8
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e004      	b.n	8003e40 <UART_SetConfig+0x348>
 8003e36:	2310      	movs	r3, #16
 8003e38:	77fb      	strb	r3, [r7, #31]
 8003e3a:	e001      	b.n	8003e40 <UART_SetConfig+0x348>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e48:	d15b      	bne.n	8003f02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d828      	bhi.n	8003ea2 <UART_SetConfig+0x3aa>
 8003e50:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <UART_SetConfig+0x360>)
 8003e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e56:	bf00      	nop
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003ea3 	.word	0x08003ea3
 8003e68:	08003e93 	.word	0x08003e93
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003ea3 	.word	0x08003ea3
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e7c:	f7fe fe08 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8003e80:	61b8      	str	r0, [r7, #24]
        break;
 8003e82:	e013      	b.n	8003eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7fe fe18 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003e88:	61b8      	str	r0, [r7, #24]
        break;
 8003e8a:	e00f      	b.n	8003eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b4b      	ldr	r3, [pc, #300]	; (8003fbc <UART_SetConfig+0x4c4>)
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e00c      	b.n	8003eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7fe fceb 	bl	800286c <HAL_RCC_GetSysClockFreq>
 8003e96:	61b8      	str	r0, [r7, #24]
        break;
 8003e98:	e008      	b.n	8003eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ea0:	e004      	b.n	8003eac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d074      	beq.n	8003f9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	005a      	lsls	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	d916      	bls.n	8003efc <UART_SetConfig+0x404>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d212      	bcs.n	8003efc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f023 030f 	bic.w	r3, r3, #15
 8003ede:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	89fb      	ldrh	r3, [r7, #14]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	89fa      	ldrh	r2, [r7, #14]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	e04f      	b.n	8003f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77bb      	strb	r3, [r7, #30]
 8003f00:	e04c      	b.n	8003f9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d828      	bhi.n	8003f5a <UART_SetConfig+0x462>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <UART_SetConfig+0x418>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f3d 	.word	0x08003f3d
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f5b 	.word	0x08003f5b
 8003f20:	08003f4b 	.word	0x08003f4b
 8003f24:	08003f5b 	.word	0x08003f5b
 8003f28:	08003f5b 	.word	0x08003f5b
 8003f2c:	08003f5b 	.word	0x08003f5b
 8003f30:	08003f53 	.word	0x08003f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7fe fdac 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8003f38:	61b8      	str	r0, [r7, #24]
        break;
 8003f3a:	e013      	b.n	8003f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7fe fdbc 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003f40:	61b8      	str	r0, [r7, #24]
        break;
 8003f42:	e00f      	b.n	8003f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <UART_SetConfig+0x4c4>)
 8003f46:	61bb      	str	r3, [r7, #24]
        break;
 8003f48:	e00c      	b.n	8003f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4a:	f7fe fc8f 	bl	800286c <HAL_RCC_GetSysClockFreq>
 8003f4e:	61b8      	str	r0, [r7, #24]
        break;
 8003f50:	e008      	b.n	8003f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f56:	61bb      	str	r3, [r7, #24]
        break;
 8003f58:	e004      	b.n	8003f64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	77bb      	strb	r3, [r7, #30]
        break;
 8003f62:	bf00      	nop
    }

    if (pclk != 0U)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	085a      	lsrs	r2, r3, #1
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b0f      	cmp	r3, #15
 8003f82:	d909      	bls.n	8003f98 <UART_SetConfig+0x4a0>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8a:	d205      	bcs.n	8003f98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	e001      	b.n	8003f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40007c00 	.word	0x40007c00
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	00f42400 	.word	0x00f42400

08003fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040be:	d10a      	bne.n	80040d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af02      	add	r7, sp, #8
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004114:	f7fc ffa8 	bl	8001068 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d10e      	bne.n	8004146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f831 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e027      	b.n	8004196 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b04      	cmp	r3, #4
 8004152:	d10e      	bne.n	8004172 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f81b 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e011      	b.n	8004196 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b09c      	sub	sp, #112	; 0x70
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ae:	e0a7      	b.n	8004300 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	f000 80a3 	beq.w	8004300 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fc ff55 	bl	8001068 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d13f      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e4:	667b      	str	r3, [r7, #100]	; 0x64
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e6      	bne.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004222:	64ba      	str	r2, [r7, #72]	; 0x48
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e068      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d050      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	d148      	bne.n	8004300 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004276:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800428c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
 8004298:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800429c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e6      	bne.n	8004278 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042ca:	623a      	str	r2, [r7, #32]
 80042cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	69f9      	ldr	r1, [r7, #28]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e5      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e010      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	429a      	cmp	r2, r3
 800431c:	f43f af48 	beq.w	80041b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3770      	adds	r7, #112	; 0x70
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800432a:	b480      	push	{r7}
 800432c:	b095      	sub	sp, #84	; 0x54
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	643b      	str	r3, [r7, #64]	; 0x40
 8004352:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	61fb      	str	r3, [r7, #28]
   return(result);
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439c:	2b01      	cmp	r3, #1
 800439e:	d118      	bne.n	80043d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6979      	ldr	r1, [r7, #20]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	613b      	str	r3, [r7, #16]
   return(result);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e6      	bne.n	80043a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043e6:	bf00      	nop
 80043e8:	3754      	adds	r7, #84	; 0x54
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fb51 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b088      	sub	sp, #32
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	60bb      	str	r3, [r7, #8]
   return(result);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	613b      	str	r3, [r7, #16]
   return(result);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e6      	bne.n	8004426 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fb1d 	bl	8003aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800446a:	bf00      	nop
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004474:	b084      	sub	sp, #16
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	f107 001c 	add.w	r0, r7, #28
 8004482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b01      	cmp	r3, #1
 800448a:	d120      	bne.n	80044ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <USB_CoreInit+0xac>)
 800449e:	4013      	ands	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa96 	bl	80049f4 <USB_CoreReset>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e010      	b.n	80044f0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fa8a 	bl	80049f4 <USB_CoreReset>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d10b      	bne.n	800450e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f043 0206 	orr.w	r2, r3, #6
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800451a:	b004      	add	sp, #16
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	ffbdffbf 	.word	0xffbdffbf

08004524 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 0201 	bic.w	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d115      	bne.n	8004594 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004574:	2001      	movs	r0, #1
 8004576:	f7fc fd83 	bl	8001080 <HAL_Delay>
      ms++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa29 	bl	80049d8 <USB_GetMode>
 8004586:	4603      	mov	r3, r0
 8004588:	2b01      	cmp	r3, #1
 800458a:	d01e      	beq.n	80045ca <USB_SetCurrentMode+0x84>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b31      	cmp	r3, #49	; 0x31
 8004590:	d9f0      	bls.n	8004574 <USB_SetCurrentMode+0x2e>
 8004592:	e01a      	b.n	80045ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d115      	bne.n	80045c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045a6:	2001      	movs	r0, #1
 80045a8:	f7fc fd6a 	bl	8001080 <HAL_Delay>
      ms++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3301      	adds	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fa10 	bl	80049d8 <USB_GetMode>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <USB_SetCurrentMode+0x84>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b31      	cmp	r3, #49	; 0x31
 80045c2:	d9f0      	bls.n	80045a6 <USB_SetCurrentMode+0x60>
 80045c4:	e001      	b.n	80045ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e005      	b.n	80045d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b32      	cmp	r3, #50	; 0x32
 80045ce:	d101      	bne.n	80045d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e0:	b084      	sub	sp, #16
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e009      	b.n	8004614 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	3340      	adds	r3, #64	; 0x40
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	2200      	movs	r2, #0
 800460c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	3301      	adds	r3, #1
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b0e      	cmp	r3, #14
 8004618:	d9f2      	bls.n	8004600 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800461a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11c      	bne.n	800465a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e005      	b.n	8004666 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800466c:	461a      	mov	r2, r3
 800466e:	2300      	movs	r3, #0
 8004670:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	4619      	mov	r1, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004680:	461a      	mov	r2, r3
 8004682:	680b      	ldr	r3, [r1, #0]
 8004684:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	2b01      	cmp	r3, #1
 800468a:	d10c      	bne.n	80046a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d104      	bne.n	800469c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004692:	2100      	movs	r1, #0
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f965 	bl	8004964 <USB_SetDevSpeed>
 800469a:	e008      	b.n	80046ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800469c:	2101      	movs	r1, #1
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f960 	bl	8004964 <USB_SetDevSpeed>
 80046a4:	e003      	b.n	80046ae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046a6:	2103      	movs	r1, #3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f95b 	bl	8004964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046ae:	2110      	movs	r1, #16
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f8f3 	bl	800489c <USB_FlushTxFifo>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f91f 	bl	8004904 <USB_FlushRxFifo>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	461a      	mov	r2, r3
 80046d8:	2300      	movs	r3, #0
 80046da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e2:	461a      	mov	r2, r3
 80046e4:	2300      	movs	r3, #0
 80046e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	e043      	b.n	8004782 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800470c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004710:	d118      	bne.n	8004744 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	461a      	mov	r2, r3
 8004726:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e013      	b.n	8004756 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	461a      	mov	r2, r3
 800473c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e008      	b.n	8004756 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	461a      	mov	r2, r3
 8004752:	2300      	movs	r3, #0
 8004754:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	461a      	mov	r2, r3
 8004764:	2300      	movs	r3, #0
 8004766:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800477a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	3301      	adds	r3, #1
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	429a      	cmp	r2, r3
 8004788:	d3b7      	bcc.n	80046fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e043      	b.n	8004818 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a6:	d118      	bne.n	80047da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e013      	b.n	80047ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e008      	b.n	80047ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	461a      	mov	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	461a      	mov	r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	461a      	mov	r2, r3
 800480c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004810:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	3301      	adds	r3, #1
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	d3b7      	bcc.n	8004790 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004832:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004840:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f043 0210 	orr.w	r2, r3, #16
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <USB_DevInit+0x2b4>)
 800485a:	4313      	orrs	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f043 0208 	orr.w	r2, r3, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <USB_DevInit+0x2b8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004890:	b004      	add	sp, #16
 8004892:	4770      	bx	lr
 8004894:	803c3800 	.word	0x803c3800
 8004898:	40000004 	.word	0x40000004

0800489c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <USB_FlushTxFifo+0x64>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e01b      	b.n	80048f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	daf2      	bge.n	80048aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	019b      	lsls	r3, r3, #6
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a08      	ldr	r2, [pc, #32]	; (8004900 <USB_FlushTxFifo+0x64>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e006      	b.n	80048f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d0f0      	beq.n	80048d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	00030d40 	.word	0x00030d40

08004904 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a11      	ldr	r2, [pc, #68]	; (8004960 <USB_FlushRxFifo+0x5c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e018      	b.n	8004954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	daf2      	bge.n	8004910 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2210      	movs	r2, #16
 8004932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3301      	adds	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <USB_FlushRxFifo+0x5c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e006      	b.n	8004954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d0f0      	beq.n	8004934 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	00030d40 	.word	0x00030d40

08004964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049b0:	f023 0303 	bic.w	r3, r3, #3
 80049b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0301 	and.w	r3, r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <USB_CoreReset+0x64>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e01b      	b.n	8004a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	daf2      	bge.n	8004a00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f043 0201 	orr.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <USB_CoreReset+0x64>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d0f0      	beq.n	8004a2a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <memset>:
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d100      	bne.n	8004a66 <memset+0xa>
 8004a64:	4770      	bx	lr
 8004a66:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6a:	e7f9      	b.n	8004a60 <memset+0x4>

08004a6c <__libc_init_array>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	4d0d      	ldr	r5, [pc, #52]	; (8004aa4 <__libc_init_array+0x38>)
 8004a70:	4c0d      	ldr	r4, [pc, #52]	; (8004aa8 <__libc_init_array+0x3c>)
 8004a72:	1b64      	subs	r4, r4, r5
 8004a74:	10a4      	asrs	r4, r4, #2
 8004a76:	2600      	movs	r6, #0
 8004a78:	42a6      	cmp	r6, r4
 8004a7a:	d109      	bne.n	8004a90 <__libc_init_array+0x24>
 8004a7c:	4d0b      	ldr	r5, [pc, #44]	; (8004aac <__libc_init_array+0x40>)
 8004a7e:	4c0c      	ldr	r4, [pc, #48]	; (8004ab0 <__libc_init_array+0x44>)
 8004a80:	f000 f826 	bl	8004ad0 <_init>
 8004a84:	1b64      	subs	r4, r4, r5
 8004a86:	10a4      	asrs	r4, r4, #2
 8004a88:	2600      	movs	r6, #0
 8004a8a:	42a6      	cmp	r6, r4
 8004a8c:	d105      	bne.n	8004a9a <__libc_init_array+0x2e>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a94:	4798      	blx	r3
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7ee      	b.n	8004a78 <__libc_init_array+0xc>
 8004a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9e:	4798      	blx	r3
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	e7f2      	b.n	8004a8a <__libc_init_array+0x1e>
 8004aa4:	08004b0c 	.word	0x08004b0c
 8004aa8:	08004b0c 	.word	0x08004b0c
 8004aac:	08004b0c 	.word	0x08004b0c
 8004ab0:	08004b10 	.word	0x08004b10

08004ab4 <memcpy>:
 8004ab4:	440a      	add	r2, r1
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004abc:	d100      	bne.n	8004ac0 <memcpy+0xc>
 8004abe:	4770      	bx	lr
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aca:	4291      	cmp	r1, r2
 8004acc:	d1f9      	bne.n	8004ac2 <memcpy+0xe>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
