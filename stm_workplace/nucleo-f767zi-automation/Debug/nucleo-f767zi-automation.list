
nucleo-f767zi-automation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f34  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08007138  08007138  00017138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080074d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  080076a8  000201d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08007748  00020274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000894  20000314  080077e8  00020314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000ba8  080077e8  00020ba8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020342  2**0
                  CONTENTS, READONLY
 15 .debug_info   00013db0  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a6c  00000000  00000000  00034135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fb8  00000000  00000000  00036ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c0c  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00003b3a  00000000  00000000  0003876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001356a  00000000  00000000  0003c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00102a7d  00000000  00000000  0004f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004f48  00000000  00000000  00152290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007f  00000000  00000000  001571d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	0800711c 	.word	0x0800711c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	0800711c 	.word	0x0800711c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe33 	bl	800125a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f810 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9fa 	bl	80009f0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005fc:	f000 f94c 	bl	8000898 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f998 	bl	8000934 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000604:	f000 f9c6 	bl	8000994 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000608:	f000 f878 	bl	80006fc <MX_ADC1_Init>
  MX_DAC_Init();
 800060c:	f000 f91a 	bl	8000844 <MX_DAC_Init>
  MX_ADC2_Init();
 8000610:	f000 f8c6 	bl	80007a0 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x28>
	...

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fead 	bl	8005386 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063c:	f002 f8ac 	bl	8002798 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemClock_Config+0xdc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a2b      	ldr	r2, [pc, #172]	; (80006f4 <SystemClock_Config+0xdc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <SystemClock_Config+0xe0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <SystemClock_Config+0xe0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xe0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 f8d9 	bl	8002858 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 fa42 	bl	8000b34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b0:	f002 f882 	bl	80027b8 <HAL_PWREx_EnableOverDrive>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ba:	f000 fa3b 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2103      	movs	r1, #3
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fb6a 	bl	8002db4 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006e6:	f000 fa25 	bl	8000b34 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC1_Init+0x98>)
 8000716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_ADC1_Init+0x98>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_ADC1_Init+0xa0>)
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_ADC1_Init+0x98>)
 800074a:	2201      	movs	r2, #1
 800074c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC1_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_ADC1_Init+0x98>)
 800075e:	f000 fdfd 	bl	800135c <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f9e4 	bl	8000b34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000770:	2301      	movs	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC1_Init+0x98>)
 800077e:	f000 fe31 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000788:	f000 f9d4 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000368 	.word	0x20000368
 8000798:	40012000 	.word	0x40012000
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_ADC2_Init+0x98>)
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <MX_ADC2_Init+0x9c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ADC2_Init+0x98>)
 80007ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_ADC2_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_ADC2_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_ADC2_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_ADC2_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_ADC2_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_ADC2_Init+0x98>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_ADC2_Init+0xa0>)
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_ADC2_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_ADC2_Init+0x98>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_ADC2_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_ADC2_Init+0x98>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_ADC2_Init+0x98>)
 8000802:	f000 fdab 	bl	800135c <HAL_ADC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800080c:	f000 f992 	bl	8000b34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000810:	2303      	movs	r3, #3
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000814:	2301      	movs	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_ADC2_Init+0x98>)
 8000822:	f000 fddf 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 f982 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200003b0 	.word	0x200003b0
 800083c:	40012100 	.word	0x40012100
 8000840:	0f000001 	.word	0x0f000001

08000844 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_DAC_Init+0x4c>)
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_DAC_Init+0x50>)
 8000856:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_DAC_Init+0x4c>)
 800085a:	f001 f8f8 	bl	8001a4e <HAL_DAC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000864:	f000 f966 	bl	8000b34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_DAC_Init+0x4c>)
 8000878:	f001 f90b 	bl	8001a92 <HAL_DAC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000882:	f000 f957 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200003f8 	.word	0x200003f8
 8000894:	40007400 	.word	0x40007400

08000898 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ETH_Init+0x84>)
 800089e:	4a20      	ldr	r2, [pc, #128]	; (8000920 <MX_ETH_Init+0x88>)
 80008a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_ETH_Init+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ETH_Init+0x8c>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ETH_Init+0x8c>)
 80008b0:	22e1      	movs	r2, #225	; 0xe1
 80008b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_ETH_Init+0x8c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ETH_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_ETH_Init+0x8c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_ETH_Init+0x84>)
 80008c8:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_ETH_Init+0x8c>)
 80008ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_ETH_Init+0x84>)
 80008ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ETH_Init+0x84>)
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <MX_ETH_Init+0x90>)
 80008d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_ETH_Init+0x84>)
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_ETH_Init+0x94>)
 80008de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_ETH_Init+0x84>)
 80008e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_ETH_Init+0x84>)
 80008ea:	f001 f921 	bl	8001b30 <HAL_ETH_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008f4:	f000 f91e 	bl	8000b34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f8:	2238      	movs	r2, #56	; 0x38
 80008fa:	2100      	movs	r1, #0
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ETH_Init+0x98>)
 80008fe:	f004 fd42 	bl	8005386 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_ETH_Init+0x98>)
 8000904:	2221      	movs	r2, #33	; 0x21
 8000906:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_ETH_Init+0x98>)
 800090a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800090e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_ETH_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000040c 	.word	0x2000040c
 8000920:	40028000 	.word	0x40028000
 8000924:	20000a4c 	.word	0x20000a4c
 8000928:	20000274 	.word	0x20000274
 800092c:	200001d4 	.word	0x200001d4
 8000930:	20000330 	.word	0x20000330

08000934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART3_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART3_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART3_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000978:	f003 f86a 	bl	8003a50 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f8d7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200004bc 	.word	0x200004bc
 8000990:	40004800 	.word	0x40004800

08000994 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	f001 fd95 	bl	8002506 <HAL_PCD_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f8a7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000544 	.word	0x20000544

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a46      	ldr	r2, [pc, #280]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b44      	ldr	r3, [pc, #272]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a40      	ldr	r2, [pc, #256]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a3a      	ldr	r2, [pc, #232]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a34      	ldr	r2, [pc, #208]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a28      	ldr	r2, [pc, #160]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a9c:	4822      	ldr	r0, [pc, #136]	; (8000b28 <MX_GPIO_Init+0x138>)
 8000a9e:	f001 fd19 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4821      	ldr	r0, [pc, #132]	; (8000b2c <MX_GPIO_Init+0x13c>)
 8000aa8:	f001 fd14 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481b      	ldr	r0, [pc, #108]	; (8000b30 <MX_GPIO_Init+0x140>)
 8000ac4:	f001 fb5a 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ac8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x138>)
 8000ae2:	f001 fb4b 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <MX_GPIO_Init+0x13c>)
 8000afe:	f001 fb3d 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_GPIO_Init+0x13c>)
 8000b16:	f001 fb31 	bl	800217c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40020800 	.word	0x40020800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a2a      	ldr	r2, [pc, #168]	; (8000c50 <HAL_ADC_MspInit+0xc8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d124      	bne.n	8000bf4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	481a      	ldr	r0, [pc, #104]	; (8000c58 <HAL_ADC_MspInit+0xd0>)
 8000bee:	f001 fac5 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bf2:	e028      	b.n	8000c46 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_ADC_MspInit+0xd4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d123      	bne.n	8000c46 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_ADC_MspInit+0xcc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_ADC_MspInit+0xd0>)
 8000c42:	f001 fa9b 	bl	800217c <HAL_GPIO_Init>
}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	; 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012000 	.word	0x40012000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40012100 	.word	0x40012100

08000c60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <HAL_DAC_MspInit+0x74>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d123      	bne.n	8000cca <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_DAC_MspInit+0x78>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_DAC_MspInit+0x78>)
 8000c88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_DAC_MspInit+0x78>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_DAC_MspInit+0x78>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_DAC_MspInit+0x78>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_DAC_MspInit+0x78>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_DAC_MspInit+0x7c>)
 8000cc6:	f001 fa59 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a4e      	ldr	r2, [pc, #312]	; (8000e38 <HAL_ETH_MspInit+0x158>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	f040 8096 	bne.w	8000e30 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d18:	623b      	str	r3, [r7, #32]
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a46      	ldr	r2, [pc, #280]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a40      	ldr	r2, [pc, #256]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a3a      	ldr	r2, [pc, #232]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a34      	ldr	r2, [pc, #208]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a2e      	ldr	r2, [pc, #184]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_ETH_MspInit+0x15c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dac:	2332      	movs	r3, #50	; 0x32
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481e      	ldr	r0, [pc, #120]	; (8000e40 <HAL_ETH_MspInit+0x160>)
 8000dc8:	f001 f9d8 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dcc:	2386      	movs	r3, #134	; 0x86
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <HAL_ETH_MspInit+0x164>)
 8000de8:	f001 f9c8 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfe:	230b      	movs	r3, #11
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	480f      	ldr	r0, [pc, #60]	; (8000e48 <HAL_ETH_MspInit+0x168>)
 8000e0a:	f001 f9b7 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e20:	230b      	movs	r3, #11
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <HAL_ETH_MspInit+0x16c>)
 8000e2c:	f001 f9a6 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3738      	adds	r7, #56	; 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40028000 	.word	0x40028000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40021800 	.word	0x40021800

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ae      	sub	sp, #184	; 0xb8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2290      	movs	r2, #144	; 0x90
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fa88 	bl	8005386 <memset>
  if(huart->Instance==USART3)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <HAL_UART_MspInit+0xb4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d13c      	bne.n	8000efa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 f9b6 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e9a:	f7ff fe4b 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ece:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_UART_MspInit+0xbc>)
 8000ef6:	f001 f941 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	37b8      	adds	r7, #184	; 0xb8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40004800 	.word	0x40004800
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020c00 	.word	0x40020c00

08000f10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ae      	sub	sp, #184	; 0xb8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2290      	movs	r2, #144	; 0x90
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fa28 	bl	8005386 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3e:	d159      	bne.n	8000ff4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 f955 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f5c:	f7ff fdea 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f92:	230a      	movs	r3, #10
 8000f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <HAL_PCD_MspInit+0xf0>)
 8000fa0:	f001 f8ec 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <HAL_PCD_MspInit+0xf0>)
 8000fc0:	f001 f8dc 	bl	800217c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fce:	6353      	str	r3, [r2, #52]	; 0x34
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	37b8      	adds	r7, #184	; 0xb8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f940 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_kill>:

int _kill(int pid, int sig)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001072:	f004 f9db 	bl	800542c <__errno>
 8001076:	4603      	mov	r3, r0
 8001078:	2216      	movs	r2, #22
 800107a:	601a      	str	r2, [r3, #0]
  return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_exit>:

void _exit (int status)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe7 	bl	8001068 <_kill>
  while (1) {}    /* Make sure we hang here */
 800109a:	e7fe      	b.n	800109a <_exit+0x12>

0800109c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00a      	b.n	80010c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ae:	f3af 8000 	nop.w
 80010b2:	4601      	mov	r1, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf0      	blt.n	80010ae <_read+0x12>
  }

  return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e009      	b.n	80010fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf1      	blt.n	80010e8 <_write+0x12>
  }
  return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
  return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f004 f940 	bl	800542c <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20080000 	.word	0x20080000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	20000a54 	.word	0x20000a54
 80011e0:	20000ba8 	.word	0x20000ba8

080011e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800120e:	490e      	ldr	r1, [pc, #56]	; (8001248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001224:	4c0b      	ldr	r4, [pc, #44]	; (8001254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001232:	f7ff ffd7 	bl	80011e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f004 f8ff 	bl	8005438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff f9d7 	bl	80005ec <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800124c:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 8001250:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001254:	20000ba8 	.word	0x20000ba8

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>

0800125a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125e:	2003      	movs	r0, #3
 8001260:	f000 fbc2 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 f805 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126a:	f7ff fc69 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fbcf 	bl	8001a36 <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 fba5 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000a58 	.word	0x20000a58

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000a58 	.word	0x20000a58

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e031      	b.n	80013d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fc04 	bl	8000b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_ADC_Init+0x84>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	f043 0202 	orr.w	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f970 	bl	8001690 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
 80013c6:	e001      	b.n	80013cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	ffffeefd 	.word	0xffffeefd

080013e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1c>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e136      	b.n	800166e <HAL_ADC_ConfigChannel+0x28a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d93a      	bls.n	8001486 <HAL_ADC_ConfigChannel+0xa2>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001418:	d035      	beq.n	8001486 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68d9      	ldr	r1, [r3, #12]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	3b1e      	subs	r3, #30
 8001430:	2207      	movs	r2, #7
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a8d      	ldr	r2, [pc, #564]	; (800167c <HAL_ADC_ConfigChannel+0x298>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10a      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	061a      	lsls	r2, r3, #24
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145e:	e035      	b.n	80014cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68d9      	ldr	r1, [r3, #12]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	4603      	mov	r3, r0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4403      	add	r3, r0
 8001478:	3b1e      	subs	r3, #30
 800147a:	409a      	lsls	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001484:	e022      	b.n	80014cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6919      	ldr	r1, [r3, #16]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43da      	mvns	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	400a      	ands	r2, r1
 80014a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6919      	ldr	r1, [r3, #16]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	4603      	mov	r3, r0
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4403      	add	r3, r0
 80014c2:	409a      	lsls	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b06      	cmp	r3, #6
 80014d2:	d824      	bhi.n	800151e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b05      	subs	r3, #5
 80014e6:	221f      	movs	r2, #31
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43da      	mvns	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	3b05      	subs	r3, #5
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
 800151c:	e04c      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b0c      	cmp	r3, #12
 8001524:	d824      	bhi.n	8001570 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b23      	subs	r3, #35	; 0x23
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b23      	subs	r3, #35	; 0x23
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
 800156e:	e023      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b41      	subs	r3, #65	; 0x41
 8001582:	221f      	movs	r2, #31
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43da      	mvns	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	400a      	ands	r2, r1
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b41      	subs	r3, #65	; 0x41
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a30      	ldr	r2, [pc, #192]	; (8001680 <HAL_ADC_ConfigChannel+0x29c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10a      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1f4>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 80015d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_ADC_ConfigChannel+0x29c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10f      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x21e>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b12      	cmp	r3, #18
 80015e8:	d10b      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 80015f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 80015fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001600:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_ADC_ConfigChannel+0x29c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d12b      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x280>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1a      	ldr	r2, [pc, #104]	; (800167c <HAL_ADC_ConfigChannel+0x298>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d003      	beq.n	800161e <HAL_ADC_ConfigChannel+0x23a>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b11      	cmp	r3, #17
 800161c:	d122      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 8001624:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001628:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_ADC_ConfigChannel+0x2a0>)
 8001630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001634:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_ADC_ConfigChannel+0x298>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d111      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_ADC_ConfigChannel+0x2a4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a11      	ldr	r2, [pc, #68]	; (800168c <HAL_ADC_ConfigChannel+0x2a8>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9a      	lsrs	r2, r3, #18
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001656:	e002      	b.n	800165e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3b01      	subs	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f9      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	10000012 	.word	0x10000012
 8001680:	40012000 	.word	0x40012000
 8001684:	40012300 	.word	0x40012300
 8001688:	20000000 	.word	0x20000000
 800168c:	431bde83 	.word	0x431bde83

08001690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <ADC_Init+0x1ec>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a77      	ldr	r2, [pc, #476]	; (800187c <ADC_Init+0x1ec>)
 800169e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016a4:	4b75      	ldr	r3, [pc, #468]	; (800187c <ADC_Init+0x1ec>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4973      	ldr	r1, [pc, #460]	; (800187c <ADC_Init+0x1ec>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	021a      	lsls	r2, r3, #8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6899      	ldr	r1, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	4a58      	ldr	r2, [pc, #352]	; (8001880 <ADC_Init+0x1f0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d022      	beq.n	800176a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e00f      	b.n	800178a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001788:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0202 	bic.w	r2, r2, #2
 8001798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6899      	ldr	r1, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	005a      	lsls	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01b      	beq.n	80017f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	3b01      	subs	r3, #1
 80017e4:	035a      	lsls	r2, r3, #13
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	e007      	b.n	8001800 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	3b01      	subs	r3, #1
 800181c:	051a      	lsls	r2, r3, #20
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6899      	ldr	r1, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001842:	025a      	lsls	r2, r3, #9
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6899      	ldr	r1, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	029a      	lsls	r2, r3, #10
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40012300 	.word	0x40012300
 8001880:	0f000001 	.word	0x0f000001

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	05fa0000 	.word	0x05fa0000

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff47 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff5c 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb0 	bl	80019a4 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e014      	b.n	8001a8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	791b      	ldrb	r3, [r3, #4]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff f8f5 	bl	8000c60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	795b      	ldrb	r3, [r3, #5]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_DAC_ConfigChannel+0x18>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e03c      	b.n	8001b24 <HAL_DAC_ConfigChannel+0x92>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	22c0      	movs	r2, #192	; 0xc0
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	400a      	ands	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06a      	b.n	8001c18 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d106      	bne.n	8001b5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2223      	movs	r2, #35	; 0x23
 8001b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff f8c3 	bl	8000ce0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_ETH_Init+0xf0>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <HAL_ETH_Init+0xf0>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_ETH_Init+0xf0>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_ETH_Init+0xf4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4a2b      	ldr	r2, [pc, #172]	; (8001c24 <HAL_ETH_Init+0xf4>)
 8001b78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b7c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_ETH_Init+0xf4>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4927      	ldr	r1, [pc, #156]	; (8001c24 <HAL_ETH_Init+0xf4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_ETH_Init+0xf4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba8:	f7ff fba8 	bl	80012fc <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bae:	e011      	b.n	8001bd4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bb0:	f7ff fba4 	bl	80012fc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bbe:	d909      	bls.n	8001bd4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	22e0      	movs	r2, #224	; 0xe0
 8001bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e021      	b.n	8001c18 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e4      	bne.n	8001bb0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f958 	bl	8001e9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f9ff 	bl	8001ff0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fa55 	bl	80020a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2100      	movs	r1, #0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f9bd 	bl	8001f80 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2210      	movs	r2, #16
 8001c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800

08001c28 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <ETH_SetMACConfig+0x15c>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7c1b      	ldrb	r3, [r3, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <ETH_SetMACConfig+0x28>
 8001c4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c4e:	e000      	b.n	8001c52 <ETH_SetMACConfig+0x2a>
 8001c50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7c5b      	ldrb	r3, [r3, #17]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <ETH_SetMACConfig+0x38>
 8001c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5e:	e000      	b.n	8001c62 <ETH_SetMACConfig+0x3a>
 8001c60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	7fdb      	ldrb	r3, [r3, #31]
 8001c6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	7f92      	ldrb	r2, [r2, #30]
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d102      	bne.n	8001c86 <ETH_SetMACConfig+0x5e>
 8001c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c84:	e000      	b.n	8001c88 <ETH_SetMACConfig+0x60>
 8001c86:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	7f1b      	ldrb	r3, [r3, #28]
 8001c8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	d102      	bne.n	8001cb0 <ETH_SetMACConfig+0x88>
 8001caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cae:	e000      	b.n	8001cb2 <ETH_SetMACConfig+0x8a>
 8001cb0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	7bdb      	ldrb	r3, [r3, #15]
 8001cb8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cc8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff fb16 	bl	8001314 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d0e:	2a00      	cmp	r2, #0
 8001d10:	d101      	bne.n	8001d16 <ETH_SetMACConfig+0xee>
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	e000      	b.n	8001d18 <ETH_SetMACConfig+0xf0>
 8001d16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d26:	2a01      	cmp	r2, #1
 8001d28:	d101      	bne.n	8001d2e <ETH_SetMACConfig+0x106>
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	e000      	b.n	8001d30 <ETH_SetMACConfig+0x108>
 8001d2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d38:	2a01      	cmp	r2, #1
 8001d3a:	d101      	bne.n	8001d40 <ETH_SetMACConfig+0x118>
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	e000      	b.n	8001d42 <ETH_SetMACConfig+0x11a>
 8001d40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d4a:	2a01      	cmp	r2, #1
 8001d4c:	d101      	bne.n	8001d52 <ETH_SetMACConfig+0x12a>
 8001d4e:	2202      	movs	r2, #2
 8001d50:	e000      	b.n	8001d54 <ETH_SetMACConfig+0x12c>
 8001d52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d54:	4313      	orrs	r3, r2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff fad1 	bl	8001314 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	ff20810f 	.word	0xff20810f

08001d88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <ETH_SetDMAConfig+0x110>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7b1b      	ldrb	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <ETH_SetDMAConfig+0x2c>
 8001dae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001db2:	e000      	b.n	8001db6 <ETH_SetDMAConfig+0x2e>
 8001db4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dbc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	7f52      	ldrb	r2, [r2, #29]
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	d102      	bne.n	8001dcc <ETH_SetDMAConfig+0x44>
 8001dc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dca:	e000      	b.n	8001dce <ETH_SetDMAConfig+0x46>
 8001dcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7b9b      	ldrb	r3, [r3, #14]
 8001dd4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dd6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ddc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001de4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	7f9b      	ldrb	r3, [r3, #30]
 8001dea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001df2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fa78 	bl	8001314 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	791b      	ldrb	r3, [r3, #4]
 8001e36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff fa49 	bl	8001314 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	f8de3f23 	.word	0xf8de3f23

08001e9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0a6      	sub	sp, #152	; 0x98
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fe86 	bl	8001c28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f50:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff08 	bl	8001d88 <ETH_SetDMAConfig>
}
 8001f78:	bf00      	nop
 8001f7a:	3798      	adds	r7, #152	; 0x98
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3305      	adds	r3, #5
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	3204      	adds	r2, #4
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <ETH_MACAddressConfig+0x68>)
 8001fa2:	4413      	add	r3, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3303      	adds	r3, #3
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	061a      	lsls	r2, r3, #24
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <ETH_MACAddressConfig+0x6c>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40028040 	.word	0x40028040
 8001fec:	40028044 	.word	0x40028044

08001ff0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e03e      	b.n	800207c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68d9      	ldr	r1, [r3, #12]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	3206      	adds	r2, #6
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d80c      	bhi.n	8002060 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68d9      	ldr	r1, [r3, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	e004      	b.n	800206a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3301      	adds	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d9bd      	bls.n	8001ffe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	611a      	str	r2, [r3, #16]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e046      	b.n	800213e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80020f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	3212      	adds	r2, #18
 800210a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d80c      	bhi.n	800212e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6919      	ldr	r1, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	e004      	b.n	8002138 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d9b5      	bls.n	80020b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216e:	60da      	str	r2, [r3, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e175      	b.n	8002488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 8164 	bne.w	8002482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d005      	beq.n	80021d2 <HAL_GPIO_Init+0x56>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d130      	bne.n	8002234 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0201 	and.w	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b03      	cmp	r3, #3
 800223e:	d017      	beq.n	8002270 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d123      	bne.n	80022c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80be 	beq.w	8002482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a65      	ldr	r2, [pc, #404]	; (80024a0 <HAL_GPIO_Init+0x324>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800231e:	4a61      	ldr	r2, [pc, #388]	; (80024a4 <HAL_GPIO_Init+0x328>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_GPIO_Init+0x32c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d037      	beq.n	80023ba <HAL_GPIO_Init+0x23e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_GPIO_Init+0x330>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_GPIO_Init+0x23a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a56      	ldr	r2, [pc, #344]	; (80024b0 <HAL_GPIO_Init+0x334>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02b      	beq.n	80023b2 <HAL_GPIO_Init+0x236>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a55      	ldr	r2, [pc, #340]	; (80024b4 <HAL_GPIO_Init+0x338>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x232>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a54      	ldr	r2, [pc, #336]	; (80024b8 <HAL_GPIO_Init+0x33c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x22e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a53      	ldr	r2, [pc, #332]	; (80024bc <HAL_GPIO_Init+0x340>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x22a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_GPIO_Init+0x344>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x226>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <HAL_GPIO_Init+0x348>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x222>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a50      	ldr	r2, [pc, #320]	; (80024c8 <HAL_GPIO_Init+0x34c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x21e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4f      	ldr	r2, [pc, #316]	; (80024cc <HAL_GPIO_Init+0x350>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x21a>
 8002392:	2309      	movs	r3, #9
 8002394:	e012      	b.n	80023bc <HAL_GPIO_Init+0x240>
 8002396:	230a      	movs	r3, #10
 8002398:	e010      	b.n	80023bc <HAL_GPIO_Init+0x240>
 800239a:	2308      	movs	r3, #8
 800239c:	e00e      	b.n	80023bc <HAL_GPIO_Init+0x240>
 800239e:	2307      	movs	r3, #7
 80023a0:	e00c      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023a2:	2306      	movs	r3, #6
 80023a4:	e00a      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x328>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_GPIO_Init+0x354>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <HAL_GPIO_Init+0x354>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_GPIO_Init+0x354>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_GPIO_Init+0x354>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f ae86 	bls.w	800219c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40021c00 	.word	0x40021c00
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40022400 	.word	0x40022400
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024f0:	e003      	b.n	80024fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002508:	b08f      	sub	sp, #60	; 0x3c
 800250a:	af0a      	add	r7, sp, #40	; 0x28
 800250c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e116      	b.n	8002746 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fcec 	bl	8000f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f001 ff3a 	bl	80043d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	687e      	ldr	r6, [r7, #4]
 8002564:	466d      	mov	r5, sp
 8002566:	f106 0410 	add.w	r4, r6, #16
 800256a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002572:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002576:	e885 0003 	stmia.w	r5, {r0, r1}
 800257a:	1d33      	adds	r3, r6, #4
 800257c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f001 fece 	bl	8004320 <USB_CoreInit>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0d7      	b.n	8002746 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f001 ff28 	bl	80043f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e04a      	b.n	800263e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	333d      	adds	r3, #61	; 0x3d
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	333c      	adds	r3, #60	; 0x3c
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	b298      	uxth	r0, r3
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3344      	adds	r3, #68	; 0x44
 80025e4:	4602      	mov	r2, r0
 80025e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	3340      	adds	r3, #64	; 0x40
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	3348      	adds	r3, #72	; 0x48
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	334c      	adds	r3, #76	; 0x4c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3354      	adds	r3, #84	; 0x54
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3af      	bcc.n	80025a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e044      	b.n	80026d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	3301      	adds	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3b5      	bcc.n	800264e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	687e      	ldr	r6, [r7, #4]
 80026ea:	466d      	mov	r5, sp
 80026ec:	f106 0410 	add.w	r4, r6, #16
 80026f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002700:	1d33      	adds	r3, r6, #4
 8002702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f001 fec1 	bl	800448c <USB_DevInit>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e014      	b.n	8002746 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b01      	cmp	r3, #1
 8002732:	d102      	bne.n	800273a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f80b 	bl	8002750 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 f87f 	bl	8004842 <USB_DevDisconnect>

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002750 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_PCDEx_ActivateLPM+0x44>)
 8002780:	4313      	orrs	r3, r2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	10000003 	.word	0x10000003

08002798 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40007000 	.word	0x40007000

080027b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_PWREx_EnableOverDrive+0x98>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e6:	f7fe fd89 	bl	80012fc <HAL_GetTick>
 80027ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ec:	e009      	b.n	8002802 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027ee:	f7fe fd85 	bl	80012fc <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027fc:	d901      	bls.n	8002802 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e022      	b.n	8002848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280e:	d1ee      	bne.n	80027ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800281c:	f7fe fd6e 	bl	80012fc <HAL_GetTick>
 8002820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002822:	e009      	b.n	8002838 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002824:	f7fe fd6a 	bl	80012fc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002832:	d901      	bls.n	8002838 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e007      	b.n	8002848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002844:	d1ee      	bne.n	8002824 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000

08002858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e29b      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8087 	beq.w	800298a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b04      	cmp	r3, #4
 8002886:	d00c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002888:	4b93      	ldr	r3, [pc, #588]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d112      	bne.n	80028ba <HAL_RCC_OscConfig+0x62>
 8002894:	4b90      	ldr	r3, [pc, #576]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a0:	d10b      	bne.n	80028ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	4b8d      	ldr	r3, [pc, #564]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d06c      	beq.n	8002988 <HAL_RCC_OscConfig+0x130>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d168      	bne.n	8002988 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e275      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x7a>
 80028c4:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a83      	ldr	r2, [pc, #524]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	e02e      	b.n	8002930 <HAL_RCC_OscConfig+0xd8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x9c>
 80028da:	4b7f      	ldr	r3, [pc, #508]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7e      	ldr	r2, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b7c      	ldr	r3, [pc, #496]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a7b      	ldr	r2, [pc, #492]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xd8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0xc0>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a72      	ldr	r2, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xd8>
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b6c      	ldr	r3, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6b      	ldr	r2, [pc, #428]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fce0 	bl	80012fc <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe fcdc 	bl	80012fc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e229      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xe8>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fccc 	bl	80012fc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fcc8 	bl	80012fc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e215      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x110>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d069      	beq.n	8002a6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x190>
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1e9      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	493d      	ldr	r1, [pc, #244]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e040      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d023      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a38      	ldr	r2, [pc, #224]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fc7e 	bl	80012fc <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe fc7a 	bl	80012fc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1c7      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4929      	ldr	r1, [pc, #164]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
 8002a36:	e018      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fc5a 	bl	80012fc <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fc56 	bl	80012fc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1a3      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d038      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a82:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fc37 	bl	80012fc <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a92:	f7fe fc33 	bl	80012fc <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e180      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x23a>
 8002ab0:	e01a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe fc1d 	bl	80012fc <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fc19 	bl	80012fc <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d903      	bls.n	8002adc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e166      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
 8002ad8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b92      	ldr	r3, [pc, #584]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a4 	beq.w	8002c3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b8c      	ldr	r3, [pc, #560]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	4b89      	ldr	r3, [pc, #548]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a88      	ldr	r2, [pc, #544]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b86      	ldr	r3, [pc, #536]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1e:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b2a:	4b80      	ldr	r3, [pc, #512]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7f      	ldr	r2, [pc, #508]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7fe fbe1 	bl	80012fc <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7fe fbdd 	bl	80012fc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e12a      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x31a>
 8002b64:	4b70      	ldr	r3, [pc, #448]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a6f      	ldr	r2, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	e02d      	b.n	8002bce <HAL_RCC_OscConfig+0x376>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x33c>
 8002b7a:	4b6b      	ldr	r3, [pc, #428]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a67      	ldr	r2, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e01c      	b.n	8002bce <HAL_RCC_OscConfig+0x376>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x35e>
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a5e      	ldr	r2, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x376>
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d015      	beq.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fb91 	bl	80012fc <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fb8d 	bl	80012fc <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0d8      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <HAL_RCC_OscConfig+0x386>
 8002c00:	e014      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7fe fb7b 	bl	80012fc <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe fb77 	bl	80012fc <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0c2      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a3c      	ldr	r2, [pc, #240]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80ae 	beq.w	8002da4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c48:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d06d      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d14b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fb48 	bl	80012fc <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fb44 	bl	80012fc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e091      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fb16 	bl	80012fc <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fb12 	bl	80012fc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e05f      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x47c>
 8002cf2:	e057      	b.n	8002da4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fafc 	bl	80012fc <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe faf8 	bl	80012fc <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e045      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4b0>
 8002d26:	e03d      	b.n	8002da4 <HAL_RCC_OscConfig+0x54c>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_RCC_OscConfig+0x558>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d030      	beq.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d129      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d122      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d119      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10f      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0d0      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b67      	ldr	r3, [pc, #412]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	4965      	ldr	r1, [pc, #404]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0b8      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	494d      	ldr	r1, [pc, #308]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d040      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d115      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07f      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e073      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06b      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4936      	ldr	r1, [pc, #216]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fa28 	bl	80012fc <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe fa24 	bl	80012fc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e053      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d210      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	4922      	ldr	r1, [pc, #136]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e032      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4916      	ldr	r1, [pc, #88]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f46:	f000 f821 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	490a      	ldr	r1, [pc, #40]	; (8002f80 <HAL_RCC_ClockConfig+0x1cc>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <HAL_RCC_ClockConfig+0x1d0>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1d4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe f984 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023c00 	.word	0x40023c00
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08007138 	.word	0x08007138
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000004 	.word	0x20000004

08002f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f90:	b094      	sub	sp, #80	; 0x50
 8002f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa4:	4b79      	ldr	r3, [pc, #484]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d00d      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x40>
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	f200 80e1 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fbe:	e0db      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b73      	ldr	r3, [pc, #460]	; (8003190 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc4:	e0db      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fc6:	4b73      	ldr	r3, [pc, #460]	; (8003194 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fca:	e0d8      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fd6:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	2200      	movs	r2, #0
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ffe:	4622      	mov	r2, r4
 8003000:	462b      	mov	r3, r5
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	0159      	lsls	r1, r3, #5
 800300c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003010:	0150      	lsls	r0, r2, #5
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4621      	mov	r1, r4
 8003018:	1a51      	subs	r1, r2, r1
 800301a:	6139      	str	r1, [r7, #16]
 800301c:	4629      	mov	r1, r5
 800301e:	eb63 0301 	sbc.w	r3, r3, r1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003030:	4659      	mov	r1, fp
 8003032:	018b      	lsls	r3, r1, #6
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303a:	4651      	mov	r1, sl
 800303c:	018a      	lsls	r2, r1, #6
 800303e:	4651      	mov	r1, sl
 8003040:	ebb2 0801 	subs.w	r8, r2, r1
 8003044:	4659      	mov	r1, fp
 8003046:	eb63 0901 	sbc.w	r9, r3, r1
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800305e:	4690      	mov	r8, r2
 8003060:	4699      	mov	r9, r3
 8003062:	4623      	mov	r3, r4
 8003064:	eb18 0303 	adds.w	r3, r8, r3
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	462b      	mov	r3, r5
 800306c:	eb49 0303 	adc.w	r3, r9, r3
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800307e:	4629      	mov	r1, r5
 8003080:	024b      	lsls	r3, r1, #9
 8003082:	4621      	mov	r1, r4
 8003084:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003088:	4621      	mov	r1, r4
 800308a:	024a      	lsls	r2, r1, #9
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003092:	2200      	movs	r2, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
 8003096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800309c:	f7fd f928 	bl	80002f0 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4613      	mov	r3, r2
 80030a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a8:	e058      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	4b38      	ldr	r3, [pc, #224]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	2200      	movs	r2, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	4611      	mov	r1, r2
 80030b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030c4:	4642      	mov	r2, r8
 80030c6:	464b      	mov	r3, r9
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	0159      	lsls	r1, r3, #5
 80030d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d6:	0150      	lsls	r0, r2, #5
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4641      	mov	r1, r8
 80030de:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e2:	4649      	mov	r1, r9
 80030e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003100:	eb63 050b 	sbc.w	r5, r3, fp
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	00eb      	lsls	r3, r5, #3
 800310e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003112:	00e2      	lsls	r2, r4, #3
 8003114:	4614      	mov	r4, r2
 8003116:	461d      	mov	r5, r3
 8003118:	4643      	mov	r3, r8
 800311a:	18e3      	adds	r3, r4, r3
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	464b      	mov	r3, r9
 8003120:	eb45 0303 	adc.w	r3, r5, r3
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003132:	4629      	mov	r1, r5
 8003134:	028b      	lsls	r3, r1, #10
 8003136:	4621      	mov	r1, r4
 8003138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800313c:	4621      	mov	r1, r4
 800313e:	028a      	lsls	r2, r1, #10
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003146:	2200      	movs	r2, #0
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	61fa      	str	r2, [r7, #28]
 800314c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003150:	f7fd f8ce 	bl	80002f0 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4613      	mov	r3, r2
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800316c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800316e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003176:	e002      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetSysClockFreq+0x204>)
 800317a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800317c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003180:	4618      	mov	r0, r3
 8003182:	3750      	adds	r7, #80	; 0x50
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400
 8003194:	007a1200 	.word	0x007a1200

08003198 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCC_GetHCLKFreq+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000000 	.word	0x20000000

080031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b4:	f7ff fff0 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0a9b      	lsrs	r3, r3, #10
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08007148 	.word	0x08007148

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031dc:	f7ff ffdc 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0b5b      	lsrs	r3, r3, #13
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08007148 	.word	0x08007148

08003200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d012      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003232:	6093      	str	r3, [r2, #8]
 8003234:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	4964      	ldr	r1, [pc, #400]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d017      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800325a:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	4959      	ldr	r1, [pc, #356]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003278:	d101      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d017      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003296:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	494a      	ldr	r1, [pc, #296]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b4:	d101      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 808b 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6413      	str	r3, [r2, #64]	; 0x40
 80032f0:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fd fff8 	bl	80012fc <HAL_GetTick>
 800330c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fd fff4 	bl	80012fc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e38f      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003322:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332e:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d035      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d02e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800334c:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003354:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800336e:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d114      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd ffbc 	bl	80012fc <HAL_GetTick>
 8003384:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fd ffb8 	bl	80012fc <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e351      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ee      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b6:	d111      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033c6:	400b      	ands	r3, r1
 80033c8:	4901      	ldr	r1, [pc, #4]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
 80033ce:	e00b      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40007000 	.word	0x40007000
 80033d8:	0ffffcff 	.word	0x0ffffcff
 80033dc:	4bac      	ldr	r3, [pc, #688]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4aab      	ldr	r2, [pc, #684]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033e6:	6093      	str	r3, [r2, #8]
 80033e8:	4ba9      	ldr	r3, [pc, #676]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	49a6      	ldr	r1, [pc, #664]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d010      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003406:	4ba2      	ldr	r3, [pc, #648]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340c:	4aa0      	ldr	r2, [pc, #640]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003412:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003416:	4b9e      	ldr	r3, [pc, #632]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003418:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	499b      	ldr	r1, [pc, #620]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003434:	4b96      	ldr	r3, [pc, #600]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003442:	4993      	ldr	r1, [pc, #588]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003456:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003464:	498a      	ldr	r1, [pc, #552]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003478:	4b85      	ldr	r3, [pc, #532]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003486:	4982      	ldr	r1, [pc, #520]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800349a:	4b7d      	ldr	r3, [pc, #500]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4979      	ldr	r1, [pc, #484]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034bc:	4b74      	ldr	r3, [pc, #464]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	4971      	ldr	r1, [pc, #452]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034de:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f023 020c 	bic.w	r2, r3, #12
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	4968      	ldr	r1, [pc, #416]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003500:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	4960      	ldr	r1, [pc, #384]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003522:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	4957      	ldr	r1, [pc, #348]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003544:	4b52      	ldr	r3, [pc, #328]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	494f      	ldr	r1, [pc, #316]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	4946      	ldr	r1, [pc, #280]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003588:	4b41      	ldr	r3, [pc, #260]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003596:	493e      	ldr	r1, [pc, #248]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035aa:	4b39      	ldr	r3, [pc, #228]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	4935      	ldr	r1, [pc, #212]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035cc:	4b30      	ldr	r3, [pc, #192]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	492d      	ldr	r1, [pc, #180]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d011      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035ee:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fc:	4924      	ldr	r1, [pc, #144]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800361e:	2301      	movs	r3, #1
 8003620:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	4914      	ldr	r1, [pc, #80]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003660:	490b      	ldr	r1, [pc, #44]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00f      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003684:	4902      	ldr	r1, [pc, #8]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800368c:	e002      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036a0:	4b8a      	ldr	r3, [pc, #552]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	4986      	ldr	r1, [pc, #536]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036c4:	4b81      	ldr	r3, [pc, #516]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d4:	497d      	ldr	r1, [pc, #500]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d006      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80d6 	beq.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036f0:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fc:	f7fd fdfe 	bl	80012fc <HAL_GetTick>
 8003700:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003704:	f7fd fdfa 	bl	80012fc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e195      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003716:	4b6d      	ldr	r3, [pc, #436]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d021      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003736:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003744:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	0e1b      	lsrs	r3, r3, #24
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	019a      	lsls	r2, r3, #6
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	071b      	lsls	r3, r3, #28
 800376a:	4958      	ldr	r1, [pc, #352]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379c:	d129      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800379e:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037ac:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b2:	0f1b      	lsrs	r3, r3, #28
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	019a      	lsls	r2, r3, #6
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	061b      	lsls	r3, r3, #24
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	071b      	lsls	r3, r3, #28
 80037d2:	493e      	ldr	r1, [pc, #248]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037da:	4b3c      	ldr	r3, [pc, #240]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e0:	f023 021f 	bic.w	r2, r3, #31
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	3b01      	subs	r3, #1
 80037ea:	4938      	ldr	r1, [pc, #224]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01d      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003804:	0e1b      	lsrs	r3, r3, #24
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800380c:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003812:	0f1b      	lsrs	r3, r3, #28
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	019a      	lsls	r2, r3, #6
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	071b      	lsls	r3, r3, #28
 8003832:	4926      	ldr	r1, [pc, #152]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d011      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	019a      	lsls	r2, r3, #6
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	071b      	lsls	r3, r3, #28
 8003862:	491a      	ldr	r1, [pc, #104]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003876:	f7fd fd41 	bl	80012fc <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800387e:	f7fd fd3d 	bl	80012fc <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b64      	cmp	r3, #100	; 0x64
 800388a:	d901      	bls.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0d8      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	f040 80ce 	bne.w	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fd24 	bl	80012fc <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038b6:	e00b      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038b8:	f7fd fd20 	bl	80012fc <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d904      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0bb      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d0:	4b5e      	ldr	r3, [pc, #376]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038dc:	d0ec      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02e      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d12a      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003906:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003914:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	0f1b      	lsrs	r3, r3, #28
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	019a      	lsls	r2, r3, #6
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	041b      	lsls	r3, r3, #16
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	061b      	lsls	r3, r3, #24
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	071b      	lsls	r3, r3, #28
 800393a:	4944      	ldr	r1, [pc, #272]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003948:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	493d      	ldr	r1, [pc, #244]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d022      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800396c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003970:	d11d      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	0e1b      	lsrs	r3, r3, #24
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003980:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	0f1b      	lsrs	r3, r3, #28
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	019a      	lsls	r2, r3, #6
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	071b      	lsls	r3, r3, #28
 80039a6:	4929      	ldr	r1, [pc, #164]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d028      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	0e1b      	lsrs	r3, r3, #24
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	019a      	lsls	r2, r3, #6
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	431a      	orrs	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	4917      	ldr	r1, [pc, #92]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4911      	ldr	r1, [pc, #68]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fc70 	bl	80012fc <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a20:	f7fd fc6c 	bl	80012fc <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e007      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a3e:	d1ef      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800

08003a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e040      	b.n	8003ae4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd f9ec 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f82c 	bl	8003aec <UART_SetConfig>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e022      	b.n	8003ae4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa84 	bl	8003fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fb0b 	bl	80040f8 <UART_CheckIdleState>
 8003ae2:	4603      	mov	r3, r0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4ba6      	ldr	r3, [pc, #664]	; (8003db0 <UART_SetConfig+0x2c4>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	6979      	ldr	r1, [r7, #20]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a94      	ldr	r2, [pc, #592]	; (8003db4 <UART_SetConfig+0x2c8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d120      	bne.n	8003baa <UART_SetConfig+0xbe>
 8003b68:	4b93      	ldr	r3, [pc, #588]	; (8003db8 <UART_SetConfig+0x2cc>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d816      	bhi.n	8003ba4 <UART_SetConfig+0xb8>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <UART_SetConfig+0x90>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b99 	.word	0x08003b99
 8003b84:	08003b93 	.word	0x08003b93
 8003b88:	08003b9f 	.word	0x08003b9f
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e150      	b.n	8003e34 <UART_SetConfig+0x348>
 8003b92:	2302      	movs	r3, #2
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e14d      	b.n	8003e34 <UART_SetConfig+0x348>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e14a      	b.n	8003e34 <UART_SetConfig+0x348>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e147      	b.n	8003e34 <UART_SetConfig+0x348>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e144      	b.n	8003e34 <UART_SetConfig+0x348>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a83      	ldr	r2, [pc, #524]	; (8003dbc <UART_SetConfig+0x2d0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d132      	bne.n	8003c1a <UART_SetConfig+0x12e>
 8003bb4:	4b80      	ldr	r3, [pc, #512]	; (8003db8 <UART_SetConfig+0x2cc>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d828      	bhi.n	8003c14 <UART_SetConfig+0x128>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0xdc>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bfd 	.word	0x08003bfd
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c09 	.word	0x08003c09
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c03 	.word	0x08003c03
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c15 	.word	0x08003c15
 8003bf8:	08003c0f 	.word	0x08003c0f
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e118      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c02:	2302      	movs	r3, #2
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e115      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e112      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e10f      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c14:	2310      	movs	r3, #16
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e10c      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a68      	ldr	r2, [pc, #416]	; (8003dc0 <UART_SetConfig+0x2d4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d120      	bne.n	8003c66 <UART_SetConfig+0x17a>
 8003c24:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <UART_SetConfig+0x2cc>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c2e:	2b30      	cmp	r3, #48	; 0x30
 8003c30:	d013      	beq.n	8003c5a <UART_SetConfig+0x16e>
 8003c32:	2b30      	cmp	r3, #48	; 0x30
 8003c34:	d814      	bhi.n	8003c60 <UART_SetConfig+0x174>
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d009      	beq.n	8003c4e <UART_SetConfig+0x162>
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d810      	bhi.n	8003c60 <UART_SetConfig+0x174>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <UART_SetConfig+0x15c>
 8003c42:	2b10      	cmp	r3, #16
 8003c44:	d006      	beq.n	8003c54 <UART_SetConfig+0x168>
 8003c46:	e00b      	b.n	8003c60 <UART_SetConfig+0x174>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e0f2      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e0ef      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c54:	2304      	movs	r3, #4
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e0ec      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e0e9      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c60:	2310      	movs	r3, #16
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e0e6      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a56      	ldr	r2, [pc, #344]	; (8003dc4 <UART_SetConfig+0x2d8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d120      	bne.n	8003cb2 <UART_SetConfig+0x1c6>
 8003c70:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <UART_SetConfig+0x2cc>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c7c:	d013      	beq.n	8003ca6 <UART_SetConfig+0x1ba>
 8003c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c80:	d814      	bhi.n	8003cac <UART_SetConfig+0x1c0>
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d009      	beq.n	8003c9a <UART_SetConfig+0x1ae>
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d810      	bhi.n	8003cac <UART_SetConfig+0x1c0>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <UART_SetConfig+0x1a8>
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d006      	beq.n	8003ca0 <UART_SetConfig+0x1b4>
 8003c92:	e00b      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003c94:	2300      	movs	r3, #0
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e0cc      	b.n	8003e34 <UART_SetConfig+0x348>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e0c9      	b.n	8003e34 <UART_SetConfig+0x348>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e0c6      	b.n	8003e34 <UART_SetConfig+0x348>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e0c3      	b.n	8003e34 <UART_SetConfig+0x348>
 8003cac:	2310      	movs	r3, #16
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e0c0      	b.n	8003e34 <UART_SetConfig+0x348>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a44      	ldr	r2, [pc, #272]	; (8003dc8 <UART_SetConfig+0x2dc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d125      	bne.n	8003d08 <UART_SetConfig+0x21c>
 8003cbc:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <UART_SetConfig+0x2cc>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cca:	d017      	beq.n	8003cfc <UART_SetConfig+0x210>
 8003ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd0:	d817      	bhi.n	8003d02 <UART_SetConfig+0x216>
 8003cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd6:	d00b      	beq.n	8003cf0 <UART_SetConfig+0x204>
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cdc:	d811      	bhi.n	8003d02 <UART_SetConfig+0x216>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <UART_SetConfig+0x1fe>
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d006      	beq.n	8003cf6 <UART_SetConfig+0x20a>
 8003ce8:	e00b      	b.n	8003d02 <UART_SetConfig+0x216>
 8003cea:	2300      	movs	r3, #0
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e0a1      	b.n	8003e34 <UART_SetConfig+0x348>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e09e      	b.n	8003e34 <UART_SetConfig+0x348>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e09b      	b.n	8003e34 <UART_SetConfig+0x348>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e098      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d02:	2310      	movs	r3, #16
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e095      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <UART_SetConfig+0x2e0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d125      	bne.n	8003d5e <UART_SetConfig+0x272>
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <UART_SetConfig+0x2cc>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d20:	d017      	beq.n	8003d52 <UART_SetConfig+0x266>
 8003d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d26:	d817      	bhi.n	8003d58 <UART_SetConfig+0x26c>
 8003d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2c:	d00b      	beq.n	8003d46 <UART_SetConfig+0x25a>
 8003d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d32:	d811      	bhi.n	8003d58 <UART_SetConfig+0x26c>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <UART_SetConfig+0x254>
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d006      	beq.n	8003d4c <UART_SetConfig+0x260>
 8003d3e:	e00b      	b.n	8003d58 <UART_SetConfig+0x26c>
 8003d40:	2301      	movs	r3, #1
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e076      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e073      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e070      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d52:	2308      	movs	r3, #8
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e06d      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e06a      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <UART_SetConfig+0x2e4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d138      	bne.n	8003dda <UART_SetConfig+0x2ee>
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <UART_SetConfig+0x2cc>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d76:	d017      	beq.n	8003da8 <UART_SetConfig+0x2bc>
 8003d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d7c:	d82a      	bhi.n	8003dd4 <UART_SetConfig+0x2e8>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d00b      	beq.n	8003d9c <UART_SetConfig+0x2b0>
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d88:	d824      	bhi.n	8003dd4 <UART_SetConfig+0x2e8>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <UART_SetConfig+0x2aa>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d006      	beq.n	8003da2 <UART_SetConfig+0x2b6>
 8003d94:	e01e      	b.n	8003dd4 <UART_SetConfig+0x2e8>
 8003d96:	2300      	movs	r3, #0
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	e04b      	b.n	8003e34 <UART_SetConfig+0x348>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e048      	b.n	8003e34 <UART_SetConfig+0x348>
 8003da2:	2304      	movs	r3, #4
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e045      	b.n	8003e34 <UART_SetConfig+0x348>
 8003da8:	2308      	movs	r3, #8
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e042      	b.n	8003e34 <UART_SetConfig+0x348>
 8003dae:	bf00      	nop
 8003db0:	efff69f3 	.word	0xefff69f3
 8003db4:	40011000 	.word	0x40011000
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40004400 	.word	0x40004400
 8003dc0:	40004800 	.word	0x40004800
 8003dc4:	40004c00 	.word	0x40004c00
 8003dc8:	40005000 	.word	0x40005000
 8003dcc:	40011400 	.word	0x40011400
 8003dd0:	40007800 	.word	0x40007800
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e02c      	b.n	8003e34 <UART_SetConfig+0x348>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <UART_SetConfig+0x4bc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d125      	bne.n	8003e30 <UART_SetConfig+0x344>
 8003de4:	4b71      	ldr	r3, [pc, #452]	; (8003fac <UART_SetConfig+0x4c0>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003df2:	d017      	beq.n	8003e24 <UART_SetConfig+0x338>
 8003df4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003df8:	d817      	bhi.n	8003e2a <UART_SetConfig+0x33e>
 8003dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfe:	d00b      	beq.n	8003e18 <UART_SetConfig+0x32c>
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e04:	d811      	bhi.n	8003e2a <UART_SetConfig+0x33e>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <UART_SetConfig+0x326>
 8003e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0e:	d006      	beq.n	8003e1e <UART_SetConfig+0x332>
 8003e10:	e00b      	b.n	8003e2a <UART_SetConfig+0x33e>
 8003e12:	2300      	movs	r3, #0
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e00d      	b.n	8003e34 <UART_SetConfig+0x348>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e00a      	b.n	8003e34 <UART_SetConfig+0x348>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e007      	b.n	8003e34 <UART_SetConfig+0x348>
 8003e24:	2308      	movs	r3, #8
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e004      	b.n	8003e34 <UART_SetConfig+0x348>
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e001      	b.n	8003e34 <UART_SetConfig+0x348>
 8003e30:	2310      	movs	r3, #16
 8003e32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3c:	d15b      	bne.n	8003ef6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d828      	bhi.n	8003e96 <UART_SetConfig+0x3aa>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x360>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e81 	.word	0x08003e81
 8003e58:	08003e97 	.word	0x08003e97
 8003e5c:	08003e87 	.word	0x08003e87
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e97 	.word	0x08003e97
 8003e68:	08003e97 	.word	0x08003e97
 8003e6c:	08003e8f 	.word	0x08003e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7ff f99e 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8003e74:	61b8      	str	r0, [r7, #24]
        break;
 8003e76:	e013      	b.n	8003ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7ff f9ae 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	61b8      	str	r0, [r7, #24]
        break;
 8003e7e:	e00f      	b.n	8003ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e80:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <UART_SetConfig+0x4c4>)
 8003e82:	61bb      	str	r3, [r7, #24]
        break;
 8003e84:	e00c      	b.n	8003ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7ff f881 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8003e8a:	61b8      	str	r0, [r7, #24]
        break;
 8003e8c:	e008      	b.n	8003ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e92:	61bb      	str	r3, [r7, #24]
        break;
 8003e94:	e004      	b.n	8003ea0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d074      	beq.n	8003f90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	005a      	lsls	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d916      	bls.n	8003ef0 <UART_SetConfig+0x404>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d212      	bcs.n	8003ef0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f023 030f 	bic.w	r3, r3, #15
 8003ed2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	89fb      	ldrh	r3, [r7, #14]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	89fa      	ldrh	r2, [r7, #14]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	e04f      	b.n	8003f90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77bb      	strb	r3, [r7, #30]
 8003ef4:	e04c      	b.n	8003f90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef6:	7ffb      	ldrb	r3, [r7, #31]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d828      	bhi.n	8003f4e <UART_SetConfig+0x462>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x418>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f4f 	.word	0x08003f4f
 8003f14:	08003f3f 	.word	0x08003f3f
 8003f18:	08003f4f 	.word	0x08003f4f
 8003f1c:	08003f4f 	.word	0x08003f4f
 8003f20:	08003f4f 	.word	0x08003f4f
 8003f24:	08003f47 	.word	0x08003f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7ff f942 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8003f2c:	61b8      	str	r0, [r7, #24]
        break;
 8003f2e:	e013      	b.n	8003f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7ff f952 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8003f34:	61b8      	str	r0, [r7, #24]
        break;
 8003f36:	e00f      	b.n	8003f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <UART_SetConfig+0x4c4>)
 8003f3a:	61bb      	str	r3, [r7, #24]
        break;
 8003f3c:	e00c      	b.n	8003f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3e:	f7ff f825 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8003f42:	61b8      	str	r0, [r7, #24]
        break;
 8003f44:	e008      	b.n	8003f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	61bb      	str	r3, [r7, #24]
        break;
 8003f4c:	e004      	b.n	8003f58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	77bb      	strb	r3, [r7, #30]
        break;
 8003f56:	bf00      	nop
    }

    if (pclk != 0U)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085a      	lsrs	r2, r3, #1
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	441a      	add	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b0f      	cmp	r3, #15
 8003f76:	d909      	bls.n	8003f8c <UART_SetConfig+0x4a0>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7e:	d205      	bcs.n	8003f8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60da      	str	r2, [r3, #12]
 8003f8a:	e001      	b.n	8003f90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40007c00 	.word	0x40007c00
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	00f42400 	.word	0x00f42400

08003fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01a      	beq.n	80040ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b2:	d10a      	bne.n	80040ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004108:	f7fd f8f8 	bl	80012fc <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b08      	cmp	r3, #8
 800411a:	d10e      	bne.n	800413a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f831 	bl	8004192 <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e027      	b.n	800418a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d10e      	bne.n	8004166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f81b 	bl	8004192 <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e011      	b.n	800418a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b09c      	sub	sp, #112	; 0x70
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	e0a7      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	f000 80a3 	beq.w	80042f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fd f8a5 	bl	80012fc <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80041be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d13f      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d8:	667b      	str	r3, [r7, #100]	; 0x64
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e6      	bne.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004216:	64ba      	str	r2, [r7, #72]	; 0x48
 8004218:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800421c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e5      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e068      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d050      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004260:	d148      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800426a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004280:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
 800428c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e6      	bne.n	800426c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	613b      	str	r3, [r7, #16]
   return(result);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042be:	623a      	str	r2, [r7, #32]
 80042c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	69f9      	ldr	r1, [r7, #28]
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e010      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	429a      	cmp	r2, r3
 8004310:	f43f af48 	beq.w	80041a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3770      	adds	r7, #112	; 0x70
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004320:	b084      	sub	sp, #16
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	f107 001c 	add.w	r0, r7, #28
 800432e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2b01      	cmp	r3, #1
 8004336:	d120      	bne.n	800437a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	4b20      	ldr	r3, [pc, #128]	; (80043cc <USB_CoreInit+0xac>)
 800434a:	4013      	ands	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800435c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa96 	bl	80048a0 <USB_CoreReset>
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]
 8004378:	e010      	b.n	800439c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa8a 	bl	80048a0 <USB_CoreReset>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10b      	bne.n	80043ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f043 0206 	orr.w	r2, r3, #6
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c6:	b004      	add	sp, #16
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	ffbdffbf 	.word	0xffbdffbf

080043d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f023 0201 	bic.w	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d115      	bne.n	8004440 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004420:	2001      	movs	r0, #1
 8004422:	f7fc ff77 	bl	8001314 <HAL_Delay>
      ms++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fa29 	bl	8004884 <USB_GetMode>
 8004432:	4603      	mov	r3, r0
 8004434:	2b01      	cmp	r3, #1
 8004436:	d01e      	beq.n	8004476 <USB_SetCurrentMode+0x84>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b31      	cmp	r3, #49	; 0x31
 800443c:	d9f0      	bls.n	8004420 <USB_SetCurrentMode+0x2e>
 800443e:	e01a      	b.n	8004476 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d115      	bne.n	8004472 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004452:	2001      	movs	r0, #1
 8004454:	f7fc ff5e 	bl	8001314 <HAL_Delay>
      ms++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa10 	bl	8004884 <USB_GetMode>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <USB_SetCurrentMode+0x84>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b31      	cmp	r3, #49	; 0x31
 800446e:	d9f0      	bls.n	8004452 <USB_SetCurrentMode+0x60>
 8004470:	e001      	b.n	8004476 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e005      	b.n	8004482 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b32      	cmp	r3, #50	; 0x32
 800447a:	d101      	bne.n	8004480 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800448c:	b084      	sub	sp, #16
 800448e:	b580      	push	{r7, lr}
 8004490:	b086      	sub	sp, #24
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800449a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	e009      	b.n	80044c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	3340      	adds	r3, #64	; 0x40
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3301      	adds	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b0e      	cmp	r3, #14
 80044c4:	d9f2      	bls.n	80044ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11c      	bne.n	8004506 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044da:	f043 0302 	orr.w	r3, r3, #2
 80044de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e005      	b.n	8004512 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004518:	461a      	mov	r2, r3
 800451a:	2300      	movs	r3, #0
 800451c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	4619      	mov	r1, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452c:	461a      	mov	r2, r3
 800452e:	680b      	ldr	r3, [r1, #0]
 8004530:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	2b01      	cmp	r3, #1
 8004536:	d10c      	bne.n	8004552 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800453e:	2100      	movs	r1, #0
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f965 	bl	8004810 <USB_SetDevSpeed>
 8004546:	e008      	b.n	800455a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004548:	2101      	movs	r1, #1
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f960 	bl	8004810 <USB_SetDevSpeed>
 8004550:	e003      	b.n	800455a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004552:	2103      	movs	r1, #3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f95b 	bl	8004810 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800455a:	2110      	movs	r1, #16
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8f3 	bl	8004748 <USB_FlushTxFifo>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f91f 	bl	80047b0 <USB_FlushRxFifo>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	461a      	mov	r2, r3
 8004584:	2300      	movs	r3, #0
 8004586:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	461a      	mov	r2, r3
 8004590:	2300      	movs	r3, #0
 8004592:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	461a      	mov	r2, r3
 800459c:	2300      	movs	r3, #0
 800459e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	e043      	b.n	800462e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045bc:	d118      	bne.n	80045f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	461a      	mov	r2, r3
 80045d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	e013      	b.n	8004602 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	461a      	mov	r2, r3
 80045e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e008      	b.n	8004602 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004620:	461a      	mov	r2, r3
 8004622:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004626:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3301      	adds	r3, #1
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3b7      	bcc.n	80045a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e043      	b.n	80046c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004652:	d118      	bne.n	8004686 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	461a      	mov	r2, r3
 8004668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e013      	b.n	8004698 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e008      	b.n	8004698 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	461a      	mov	r2, r3
 8004694:	2300      	movs	r3, #0
 8004696:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	461a      	mov	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b6:	461a      	mov	r2, r3
 80046b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	3301      	adds	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d3b7      	bcc.n	800463c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f043 0210 	orr.w	r2, r3, #16
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <USB_DevInit+0x2b4>)
 8004706:	4313      	orrs	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f043 0208 	orr.w	r2, r3, #8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <USB_DevInit+0x2b8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800473c:	b004      	add	sp, #16
 800473e:	4770      	bx	lr
 8004740:	803c3800 	.word	0x803c3800
 8004744:	40000004 	.word	0x40000004

08004748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3301      	adds	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a13      	ldr	r2, [pc, #76]	; (80047ac <USB_FlushTxFifo+0x64>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e01b      	b.n	80047a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	daf2      	bge.n	8004756 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	019b      	lsls	r3, r3, #6
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a08      	ldr	r2, [pc, #32]	; (80047ac <USB_FlushTxFifo+0x64>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e006      	b.n	80047a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b20      	cmp	r3, #32
 800479c:	d0f0      	beq.n	8004780 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	00030d40 	.word	0x00030d40

080047b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a11      	ldr	r2, [pc, #68]	; (800480c <USB_FlushRxFifo+0x5c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e018      	b.n	8004800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	daf2      	bge.n	80047bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2210      	movs	r2, #16
 80047de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a08      	ldr	r2, [pc, #32]	; (800480c <USB_FlushRxFifo+0x5c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e006      	b.n	8004800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d0f0      	beq.n	80047e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	00030d40 	.word	0x00030d40

08004810 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800485c:	f023 0303 	bic.w	r3, r3, #3
 8004860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0301 	and.w	r3, r3, #1
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <USB_CoreReset+0x64>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e01b      	b.n	80048f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	daf2      	bge.n	80048ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f043 0201 	orr.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <USB_CoreReset+0x64>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e006      	b.n	80048f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d0f0      	beq.n	80048d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	00030d40 	.word	0x00030d40

08004908 <__cvt>:
 8004908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490a:	ed2d 8b02 	vpush	{d8}
 800490e:	eeb0 8b40 	vmov.f64	d8, d0
 8004912:	b085      	sub	sp, #20
 8004914:	4617      	mov	r7, r2
 8004916:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004918:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800491a:	ee18 2a90 	vmov	r2, s17
 800491e:	f025 0520 	bic.w	r5, r5, #32
 8004922:	2a00      	cmp	r2, #0
 8004924:	bfb6      	itet	lt
 8004926:	222d      	movlt	r2, #45	; 0x2d
 8004928:	2200      	movge	r2, #0
 800492a:	eeb1 8b40 	vneglt.f64	d8, d0
 800492e:	2d46      	cmp	r5, #70	; 0x46
 8004930:	460c      	mov	r4, r1
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	d004      	beq.n	8004940 <__cvt+0x38>
 8004936:	2d45      	cmp	r5, #69	; 0x45
 8004938:	d100      	bne.n	800493c <__cvt+0x34>
 800493a:	3401      	adds	r4, #1
 800493c:	2102      	movs	r1, #2
 800493e:	e000      	b.n	8004942 <__cvt+0x3a>
 8004940:	2103      	movs	r1, #3
 8004942:	ab03      	add	r3, sp, #12
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	ab02      	add	r3, sp, #8
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4622      	mov	r2, r4
 800494c:	4633      	mov	r3, r6
 800494e:	eeb0 0b48 	vmov.f64	d0, d8
 8004952:	f000 fe21 	bl	8005598 <_dtoa_r>
 8004956:	2d47      	cmp	r5, #71	; 0x47
 8004958:	d101      	bne.n	800495e <__cvt+0x56>
 800495a:	07fb      	lsls	r3, r7, #31
 800495c:	d51a      	bpl.n	8004994 <__cvt+0x8c>
 800495e:	2d46      	cmp	r5, #70	; 0x46
 8004960:	eb00 0204 	add.w	r2, r0, r4
 8004964:	d10c      	bne.n	8004980 <__cvt+0x78>
 8004966:	7803      	ldrb	r3, [r0, #0]
 8004968:	2b30      	cmp	r3, #48	; 0x30
 800496a:	d107      	bne.n	800497c <__cvt+0x74>
 800496c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004974:	bf1c      	itt	ne
 8004976:	f1c4 0401 	rsbne	r4, r4, #1
 800497a:	6034      	strne	r4, [r6, #0]
 800497c:	6833      	ldr	r3, [r6, #0]
 800497e:	441a      	add	r2, r3
 8004980:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	bf08      	it	eq
 800498a:	9203      	streq	r2, [sp, #12]
 800498c:	2130      	movs	r1, #48	; 0x30
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	4293      	cmp	r3, r2
 8004992:	d307      	bcc.n	80049a4 <__cvt+0x9c>
 8004994:	9b03      	ldr	r3, [sp, #12]
 8004996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004998:	1a1b      	subs	r3, r3, r0
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	b005      	add	sp, #20
 800499e:	ecbd 8b02 	vpop	{d8}
 80049a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a4:	1c5c      	adds	r4, r3, #1
 80049a6:	9403      	str	r4, [sp, #12]
 80049a8:	7019      	strb	r1, [r3, #0]
 80049aa:	e7f0      	b.n	800498e <__cvt+0x86>

080049ac <__exponent>:
 80049ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ae:	4603      	mov	r3, r0
 80049b0:	2900      	cmp	r1, #0
 80049b2:	bfb8      	it	lt
 80049b4:	4249      	neglt	r1, r1
 80049b6:	f803 2b02 	strb.w	r2, [r3], #2
 80049ba:	bfb4      	ite	lt
 80049bc:	222d      	movlt	r2, #45	; 0x2d
 80049be:	222b      	movge	r2, #43	; 0x2b
 80049c0:	2909      	cmp	r1, #9
 80049c2:	7042      	strb	r2, [r0, #1]
 80049c4:	dd2a      	ble.n	8004a1c <__exponent+0x70>
 80049c6:	f10d 0207 	add.w	r2, sp, #7
 80049ca:	4617      	mov	r7, r2
 80049cc:	260a      	movs	r6, #10
 80049ce:	4694      	mov	ip, r2
 80049d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80049d4:	fb06 1415 	mls	r4, r6, r5, r1
 80049d8:	3430      	adds	r4, #48	; 0x30
 80049da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049de:	460c      	mov	r4, r1
 80049e0:	2c63      	cmp	r4, #99	; 0x63
 80049e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80049e6:	4629      	mov	r1, r5
 80049e8:	dcf1      	bgt.n	80049ce <__exponent+0x22>
 80049ea:	3130      	adds	r1, #48	; 0x30
 80049ec:	f1ac 0402 	sub.w	r4, ip, #2
 80049f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049f4:	1c41      	adds	r1, r0, #1
 80049f6:	4622      	mov	r2, r4
 80049f8:	42ba      	cmp	r2, r7
 80049fa:	d30a      	bcc.n	8004a12 <__exponent+0x66>
 80049fc:	f10d 0209 	add.w	r2, sp, #9
 8004a00:	eba2 020c 	sub.w	r2, r2, ip
 8004a04:	42bc      	cmp	r4, r7
 8004a06:	bf88      	it	hi
 8004a08:	2200      	movhi	r2, #0
 8004a0a:	4413      	add	r3, r2
 8004a0c:	1a18      	subs	r0, r3, r0
 8004a0e:	b003      	add	sp, #12
 8004a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a12:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a16:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a1a:	e7ed      	b.n	80049f8 <__exponent+0x4c>
 8004a1c:	2330      	movs	r3, #48	; 0x30
 8004a1e:	3130      	adds	r1, #48	; 0x30
 8004a20:	7083      	strb	r3, [r0, #2]
 8004a22:	70c1      	strb	r1, [r0, #3]
 8004a24:	1d03      	adds	r3, r0, #4
 8004a26:	e7f1      	b.n	8004a0c <__exponent+0x60>

08004a28 <_printf_float>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	b08b      	sub	sp, #44	; 0x2c
 8004a2e:	460c      	mov	r4, r1
 8004a30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004a34:	4616      	mov	r6, r2
 8004a36:	461f      	mov	r7, r3
 8004a38:	4605      	mov	r5, r0
 8004a3a:	f000 fcad 	bl	8005398 <_localeconv_r>
 8004a3e:	f8d0 b000 	ldr.w	fp, [r0]
 8004a42:	4658      	mov	r0, fp
 8004a44:	f7fb fc4c 	bl	80002e0 <strlen>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9308      	str	r3, [sp, #32]
 8004a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	3307      	adds	r3, #7
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	f103 0108 	add.w	r1, r3, #8
 8004a60:	f8c8 1000 	str.w	r1, [r8]
 8004a64:	ed93 0b00 	vldr	d0, [r3]
 8004a68:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004cc8 <_printf_float+0x2a0>
 8004a6c:	eeb0 7bc0 	vabs.f64	d7, d0
 8004a70:	eeb4 7b46 	vcmp.f64	d7, d6
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004a7c:	4682      	mov	sl, r0
 8004a7e:	dd24      	ble.n	8004aca <_printf_float+0xa2>
 8004a80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a88:	d502      	bpl.n	8004a90 <_printf_float+0x68>
 8004a8a:	232d      	movs	r3, #45	; 0x2d
 8004a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a90:	498f      	ldr	r1, [pc, #572]	; (8004cd0 <_printf_float+0x2a8>)
 8004a92:	4b90      	ldr	r3, [pc, #576]	; (8004cd4 <_printf_float+0x2ac>)
 8004a94:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a98:	bf94      	ite	ls
 8004a9a:	4688      	movls	r8, r1
 8004a9c:	4698      	movhi	r8, r3
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	f022 0204 	bic.w	r2, r2, #4
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6022      	str	r2, [r4, #0]
 8004aaa:	9304      	str	r3, [sp, #16]
 8004aac:	9700      	str	r7, [sp, #0]
 8004aae:	4633      	mov	r3, r6
 8004ab0:	aa09      	add	r2, sp, #36	; 0x24
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f9d1 	bl	8004e5c <_printf_common>
 8004aba:	3001      	adds	r0, #1
 8004abc:	f040 808a 	bne.w	8004bd4 <_printf_float+0x1ac>
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	b00b      	add	sp, #44	; 0x2c
 8004ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aca:	eeb4 0b40 	vcmp.f64	d0, d0
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	d709      	bvc.n	8004ae8 <_printf_float+0xc0>
 8004ad4:	ee10 3a90 	vmov	r3, s1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bfbc      	itt	lt
 8004adc:	232d      	movlt	r3, #45	; 0x2d
 8004ade:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ae2:	497d      	ldr	r1, [pc, #500]	; (8004cd8 <_printf_float+0x2b0>)
 8004ae4:	4b7d      	ldr	r3, [pc, #500]	; (8004cdc <_printf_float+0x2b4>)
 8004ae6:	e7d5      	b.n	8004a94 <_printf_float+0x6c>
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004aee:	9104      	str	r1, [sp, #16]
 8004af0:	1c59      	adds	r1, r3, #1
 8004af2:	d13c      	bne.n	8004b6e <_printf_float+0x146>
 8004af4:	2306      	movs	r3, #6
 8004af6:	6063      	str	r3, [r4, #4]
 8004af8:	2300      	movs	r3, #0
 8004afa:	9303      	str	r3, [sp, #12]
 8004afc:	ab08      	add	r3, sp, #32
 8004afe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004b02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b06:	ab07      	add	r3, sp, #28
 8004b08:	6861      	ldr	r1, [r4, #4]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	6022      	str	r2, [r4, #0]
 8004b0e:	f10d 031b 	add.w	r3, sp, #27
 8004b12:	4628      	mov	r0, r5
 8004b14:	f7ff fef8 	bl	8004908 <__cvt>
 8004b18:	9b04      	ldr	r3, [sp, #16]
 8004b1a:	9907      	ldr	r1, [sp, #28]
 8004b1c:	2b47      	cmp	r3, #71	; 0x47
 8004b1e:	4680      	mov	r8, r0
 8004b20:	d108      	bne.n	8004b34 <_printf_float+0x10c>
 8004b22:	1cc8      	adds	r0, r1, #3
 8004b24:	db02      	blt.n	8004b2c <_printf_float+0x104>
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	dd41      	ble.n	8004bb0 <_printf_float+0x188>
 8004b2c:	f1a9 0902 	sub.w	r9, r9, #2
 8004b30:	fa5f f989 	uxtb.w	r9, r9
 8004b34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b38:	d820      	bhi.n	8004b7c <_printf_float+0x154>
 8004b3a:	3901      	subs	r1, #1
 8004b3c:	464a      	mov	r2, r9
 8004b3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b42:	9107      	str	r1, [sp, #28]
 8004b44:	f7ff ff32 	bl	80049ac <__exponent>
 8004b48:	9a08      	ldr	r2, [sp, #32]
 8004b4a:	9004      	str	r0, [sp, #16]
 8004b4c:	1813      	adds	r3, r2, r0
 8004b4e:	2a01      	cmp	r2, #1
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	dc02      	bgt.n	8004b5a <_printf_float+0x132>
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	07d2      	lsls	r2, r2, #31
 8004b58:	d501      	bpl.n	8004b5e <_printf_float+0x136>
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0a2      	beq.n	8004aac <_printf_float+0x84>
 8004b66:	232d      	movs	r3, #45	; 0x2d
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6c:	e79e      	b.n	8004aac <_printf_float+0x84>
 8004b6e:	9904      	ldr	r1, [sp, #16]
 8004b70:	2947      	cmp	r1, #71	; 0x47
 8004b72:	d1c1      	bne.n	8004af8 <_printf_float+0xd0>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1bf      	bne.n	8004af8 <_printf_float+0xd0>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7bc      	b.n	8004af6 <_printf_float+0xce>
 8004b7c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b80:	d118      	bne.n	8004bb4 <_printf_float+0x18c>
 8004b82:	2900      	cmp	r1, #0
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	dd0b      	ble.n	8004ba0 <_printf_float+0x178>
 8004b88:	6121      	str	r1, [r4, #16]
 8004b8a:	b913      	cbnz	r3, 8004b92 <_printf_float+0x16a>
 8004b8c:	6822      	ldr	r2, [r4, #0]
 8004b8e:	07d0      	lsls	r0, r2, #31
 8004b90:	d502      	bpl.n	8004b98 <_printf_float+0x170>
 8004b92:	3301      	adds	r3, #1
 8004b94:	440b      	add	r3, r1
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	e7de      	b.n	8004b5e <_printf_float+0x136>
 8004ba0:	b913      	cbnz	r3, 8004ba8 <_printf_float+0x180>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	07d2      	lsls	r2, r2, #31
 8004ba6:	d501      	bpl.n	8004bac <_printf_float+0x184>
 8004ba8:	3302      	adds	r3, #2
 8004baa:	e7f4      	b.n	8004b96 <_printf_float+0x16e>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e7f2      	b.n	8004b96 <_printf_float+0x16e>
 8004bb0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bb4:	9b08      	ldr	r3, [sp, #32]
 8004bb6:	4299      	cmp	r1, r3
 8004bb8:	db05      	blt.n	8004bc6 <_printf_float+0x19e>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6121      	str	r1, [r4, #16]
 8004bbe:	07d8      	lsls	r0, r3, #31
 8004bc0:	d5ea      	bpl.n	8004b98 <_printf_float+0x170>
 8004bc2:	1c4b      	adds	r3, r1, #1
 8004bc4:	e7e7      	b.n	8004b96 <_printf_float+0x16e>
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	bfd4      	ite	le
 8004bca:	f1c1 0202 	rsble	r2, r1, #2
 8004bce:	2201      	movgt	r2, #1
 8004bd0:	4413      	add	r3, r2
 8004bd2:	e7e0      	b.n	8004b96 <_printf_float+0x16e>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	055a      	lsls	r2, r3, #21
 8004bd8:	d407      	bmi.n	8004bea <_printf_float+0x1c2>
 8004bda:	6923      	ldr	r3, [r4, #16]
 8004bdc:	4642      	mov	r2, r8
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b8      	blx	r7
 8004be4:	3001      	adds	r0, #1
 8004be6:	d12a      	bne.n	8004c3e <_printf_float+0x216>
 8004be8:	e76a      	b.n	8004ac0 <_printf_float+0x98>
 8004bea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bee:	f240 80e0 	bls.w	8004db2 <_printf_float+0x38a>
 8004bf2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004bf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	d133      	bne.n	8004c68 <_printf_float+0x240>
 8004c00:	4a37      	ldr	r2, [pc, #220]	; (8004ce0 <_printf_float+0x2b8>)
 8004c02:	2301      	movs	r3, #1
 8004c04:	4631      	mov	r1, r6
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	f43f af58 	beq.w	8004ac0 <_printf_float+0x98>
 8004c10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	db02      	blt.n	8004c1e <_printf_float+0x1f6>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07d8      	lsls	r0, r3, #31
 8004c1c:	d50f      	bpl.n	8004c3e <_printf_float+0x216>
 8004c1e:	4653      	mov	r3, sl
 8004c20:	465a      	mov	r2, fp
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f af49 	beq.w	8004ac0 <_printf_float+0x98>
 8004c2e:	f04f 0800 	mov.w	r8, #0
 8004c32:	f104 091a 	add.w	r9, r4, #26
 8004c36:	9b08      	ldr	r3, [sp, #32]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	4543      	cmp	r3, r8
 8004c3c:	dc09      	bgt.n	8004c52 <_printf_float+0x22a>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	079b      	lsls	r3, r3, #30
 8004c42:	f100 8106 	bmi.w	8004e52 <_printf_float+0x42a>
 8004c46:	68e0      	ldr	r0, [r4, #12]
 8004c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	bfb8      	it	lt
 8004c4e:	4618      	movlt	r0, r3
 8004c50:	e738      	b.n	8004ac4 <_printf_float+0x9c>
 8004c52:	2301      	movs	r3, #1
 8004c54:	464a      	mov	r2, r9
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f af2f 	beq.w	8004ac0 <_printf_float+0x98>
 8004c62:	f108 0801 	add.w	r8, r8, #1
 8004c66:	e7e6      	b.n	8004c36 <_printf_float+0x20e>
 8004c68:	9b07      	ldr	r3, [sp, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	dc3a      	bgt.n	8004ce4 <_printf_float+0x2bc>
 8004c6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <_printf_float+0x2b8>)
 8004c70:	2301      	movs	r3, #1
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f af21 	beq.w	8004ac0 <_printf_float+0x98>
 8004c7e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	d102      	bne.n	8004c8c <_printf_float+0x264>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	07d9      	lsls	r1, r3, #31
 8004c8a:	d5d8      	bpl.n	8004c3e <_printf_float+0x216>
 8004c8c:	4653      	mov	r3, sl
 8004c8e:	465a      	mov	r2, fp
 8004c90:	4631      	mov	r1, r6
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	f43f af12 	beq.w	8004ac0 <_printf_float+0x98>
 8004c9c:	f04f 0900 	mov.w	r9, #0
 8004ca0:	f104 0a1a 	add.w	sl, r4, #26
 8004ca4:	9b07      	ldr	r3, [sp, #28]
 8004ca6:	425b      	negs	r3, r3
 8004ca8:	454b      	cmp	r3, r9
 8004caa:	dc01      	bgt.n	8004cb0 <_printf_float+0x288>
 8004cac:	9b08      	ldr	r3, [sp, #32]
 8004cae:	e795      	b.n	8004bdc <_printf_float+0x1b4>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af00 	beq.w	8004ac0 <_printf_float+0x98>
 8004cc0:	f109 0901 	add.w	r9, r9, #1
 8004cc4:	e7ee      	b.n	8004ca4 <_printf_float+0x27c>
 8004cc6:	bf00      	nop
 8004cc8:	ffffffff 	.word	0xffffffff
 8004ccc:	7fefffff 	.word	0x7fefffff
 8004cd0:	08007150 	.word	0x08007150
 8004cd4:	08007154 	.word	0x08007154
 8004cd8:	08007158 	.word	0x08007158
 8004cdc:	0800715c 	.word	0x0800715c
 8004ce0:	08007160 	.word	0x08007160
 8004ce4:	9a08      	ldr	r2, [sp, #32]
 8004ce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	bfa8      	it	ge
 8004cec:	461a      	movge	r2, r3
 8004cee:	2a00      	cmp	r2, #0
 8004cf0:	4691      	mov	r9, r2
 8004cf2:	dc38      	bgt.n	8004d66 <_printf_float+0x33e>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cfc:	f104 021a 	add.w	r2, r4, #26
 8004d00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d02:	9905      	ldr	r1, [sp, #20]
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	eba3 0309 	sub.w	r3, r3, r9
 8004d0a:	428b      	cmp	r3, r1
 8004d0c:	dc33      	bgt.n	8004d76 <_printf_float+0x34e>
 8004d0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	db3c      	blt.n	8004d90 <_printf_float+0x368>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	07da      	lsls	r2, r3, #31
 8004d1a:	d439      	bmi.n	8004d90 <_printf_float+0x368>
 8004d1c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004d20:	eba2 0903 	sub.w	r9, r2, r3
 8004d24:	9b04      	ldr	r3, [sp, #16]
 8004d26:	1ad2      	subs	r2, r2, r3
 8004d28:	4591      	cmp	r9, r2
 8004d2a:	bfa8      	it	ge
 8004d2c:	4691      	movge	r9, r2
 8004d2e:	f1b9 0f00 	cmp.w	r9, #0
 8004d32:	dc35      	bgt.n	8004da0 <_printf_float+0x378>
 8004d34:	f04f 0800 	mov.w	r8, #0
 8004d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d3c:	f104 0a1a 	add.w	sl, r4, #26
 8004d40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	eba3 0309 	sub.w	r3, r3, r9
 8004d4a:	4543      	cmp	r3, r8
 8004d4c:	f77f af77 	ble.w	8004c3e <_printf_float+0x216>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4652      	mov	r2, sl
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f aeb0 	beq.w	8004ac0 <_printf_float+0x98>
 8004d60:	f108 0801 	add.w	r8, r8, #1
 8004d64:	e7ec      	b.n	8004d40 <_printf_float+0x318>
 8004d66:	4613      	mov	r3, r2
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4642      	mov	r2, r8
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	d1bf      	bne.n	8004cf4 <_printf_float+0x2cc>
 8004d74:	e6a4      	b.n	8004ac0 <_printf_float+0x98>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	9204      	str	r2, [sp, #16]
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f ae9d 	beq.w	8004ac0 <_printf_float+0x98>
 8004d86:	9b05      	ldr	r3, [sp, #20]
 8004d88:	9a04      	ldr	r2, [sp, #16]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	e7b7      	b.n	8004d00 <_printf_float+0x2d8>
 8004d90:	4653      	mov	r3, sl
 8004d92:	465a      	mov	r2, fp
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d1be      	bne.n	8004d1c <_printf_float+0x2f4>
 8004d9e:	e68f      	b.n	8004ac0 <_printf_float+0x98>
 8004da0:	9a04      	ldr	r2, [sp, #16]
 8004da2:	464b      	mov	r3, r9
 8004da4:	4442      	add	r2, r8
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	d1c1      	bne.n	8004d34 <_printf_float+0x30c>
 8004db0:	e686      	b.n	8004ac0 <_printf_float+0x98>
 8004db2:	9a08      	ldr	r2, [sp, #32]
 8004db4:	2a01      	cmp	r2, #1
 8004db6:	dc01      	bgt.n	8004dbc <_printf_float+0x394>
 8004db8:	07db      	lsls	r3, r3, #31
 8004dba:	d537      	bpl.n	8004e2c <_printf_float+0x404>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	47b8      	blx	r7
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f43f ae7a 	beq.w	8004ac0 <_printf_float+0x98>
 8004dcc:	4653      	mov	r3, sl
 8004dce:	465a      	mov	r2, fp
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f ae72 	beq.w	8004ac0 <_printf_float+0x98>
 8004ddc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004de0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de8:	9b08      	ldr	r3, [sp, #32]
 8004dea:	d01a      	beq.n	8004e22 <_printf_float+0x3fa>
 8004dec:	3b01      	subs	r3, #1
 8004dee:	f108 0201 	add.w	r2, r8, #1
 8004df2:	4631      	mov	r1, r6
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b8      	blx	r7
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d10e      	bne.n	8004e1a <_printf_float+0x3f2>
 8004dfc:	e660      	b.n	8004ac0 <_printf_float+0x98>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	464a      	mov	r2, r9
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f ae59 	beq.w	8004ac0 <_printf_float+0x98>
 8004e0e:	f108 0801 	add.w	r8, r8, #1
 8004e12:	9b08      	ldr	r3, [sp, #32]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	4543      	cmp	r3, r8
 8004e18:	dcf1      	bgt.n	8004dfe <_printf_float+0x3d6>
 8004e1a:	9b04      	ldr	r3, [sp, #16]
 8004e1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e20:	e6dd      	b.n	8004bde <_printf_float+0x1b6>
 8004e22:	f04f 0800 	mov.w	r8, #0
 8004e26:	f104 091a 	add.w	r9, r4, #26
 8004e2a:	e7f2      	b.n	8004e12 <_printf_float+0x3ea>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4642      	mov	r2, r8
 8004e30:	e7df      	b.n	8004df2 <_printf_float+0x3ca>
 8004e32:	2301      	movs	r3, #1
 8004e34:	464a      	mov	r2, r9
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	f43f ae3f 	beq.w	8004ac0 <_printf_float+0x98>
 8004e42:	f108 0801 	add.w	r8, r8, #1
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e4a:	1a5b      	subs	r3, r3, r1
 8004e4c:	4543      	cmp	r3, r8
 8004e4e:	dcf0      	bgt.n	8004e32 <_printf_float+0x40a>
 8004e50:	e6f9      	b.n	8004c46 <_printf_float+0x21e>
 8004e52:	f04f 0800 	mov.w	r8, #0
 8004e56:	f104 0919 	add.w	r9, r4, #25
 8004e5a:	e7f4      	b.n	8004e46 <_printf_float+0x41e>

08004e5c <_printf_common>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	4616      	mov	r6, r2
 8004e62:	4699      	mov	r9, r3
 8004e64:	688a      	ldr	r2, [r1, #8]
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	bfb8      	it	lt
 8004e70:	4613      	movlt	r3, r2
 8004e72:	6033      	str	r3, [r6, #0]
 8004e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e78:	4607      	mov	r7, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	b10a      	cbz	r2, 8004e82 <_printf_common+0x26>
 8004e7e:	3301      	adds	r3, #1
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	0699      	lsls	r1, r3, #26
 8004e86:	bf42      	ittt	mi
 8004e88:	6833      	ldrmi	r3, [r6, #0]
 8004e8a:	3302      	addmi	r3, #2
 8004e8c:	6033      	strmi	r3, [r6, #0]
 8004e8e:	6825      	ldr	r5, [r4, #0]
 8004e90:	f015 0506 	ands.w	r5, r5, #6
 8004e94:	d106      	bne.n	8004ea4 <_printf_common+0x48>
 8004e96:	f104 0a19 	add.w	sl, r4, #25
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	6832      	ldr	r2, [r6, #0]
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dc26      	bgt.n	8004ef2 <_printf_common+0x96>
 8004ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea8:	1e13      	subs	r3, r2, #0
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	bf18      	it	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	0692      	lsls	r2, r2, #26
 8004eb2:	d42b      	bmi.n	8004f0c <_printf_common+0xb0>
 8004eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb8:	4649      	mov	r1, r9
 8004eba:	4638      	mov	r0, r7
 8004ebc:	47c0      	blx	r8
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d01e      	beq.n	8004f00 <_printf_common+0xa4>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	6922      	ldr	r2, [r4, #16]
 8004ec6:	f003 0306 	and.w	r3, r3, #6
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	bf02      	ittt	eq
 8004ece:	68e5      	ldreq	r5, [r4, #12]
 8004ed0:	6833      	ldreq	r3, [r6, #0]
 8004ed2:	1aed      	subeq	r5, r5, r3
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	bf0c      	ite	eq
 8004ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004edc:	2500      	movne	r5, #0
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	bfc4      	itt	gt
 8004ee2:	1a9b      	subgt	r3, r3, r2
 8004ee4:	18ed      	addgt	r5, r5, r3
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	341a      	adds	r4, #26
 8004eea:	42b5      	cmp	r5, r6
 8004eec:	d11a      	bne.n	8004f24 <_printf_common+0xc8>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e008      	b.n	8004f04 <_printf_common+0xa8>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4652      	mov	r2, sl
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4638      	mov	r0, r7
 8004efa:	47c0      	blx	r8
 8004efc:	3001      	adds	r0, #1
 8004efe:	d103      	bne.n	8004f08 <_printf_common+0xac>
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f08:	3501      	adds	r5, #1
 8004f0a:	e7c6      	b.n	8004e9a <_printf_common+0x3e>
 8004f0c:	18e1      	adds	r1, r4, r3
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	2030      	movs	r0, #48	; 0x30
 8004f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f16:	4422      	add	r2, r4
 8004f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f20:	3302      	adds	r3, #2
 8004f22:	e7c7      	b.n	8004eb4 <_printf_common+0x58>
 8004f24:	2301      	movs	r3, #1
 8004f26:	4622      	mov	r2, r4
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	47c0      	blx	r8
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d0e6      	beq.n	8004f00 <_printf_common+0xa4>
 8004f32:	3601      	adds	r6, #1
 8004f34:	e7d9      	b.n	8004eea <_printf_common+0x8e>
	...

08004f38 <_printf_i>:
 8004f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f3c:	7e0f      	ldrb	r7, [r1, #24]
 8004f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f40:	2f78      	cmp	r7, #120	; 0x78
 8004f42:	4691      	mov	r9, r2
 8004f44:	4680      	mov	r8, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	469a      	mov	sl, r3
 8004f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f4e:	d807      	bhi.n	8004f60 <_printf_i+0x28>
 8004f50:	2f62      	cmp	r7, #98	; 0x62
 8004f52:	d80a      	bhi.n	8004f6a <_printf_i+0x32>
 8004f54:	2f00      	cmp	r7, #0
 8004f56:	f000 80d4 	beq.w	8005102 <_printf_i+0x1ca>
 8004f5a:	2f58      	cmp	r7, #88	; 0x58
 8004f5c:	f000 80c0 	beq.w	80050e0 <_printf_i+0x1a8>
 8004f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f68:	e03a      	b.n	8004fe0 <_printf_i+0xa8>
 8004f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f6e:	2b15      	cmp	r3, #21
 8004f70:	d8f6      	bhi.n	8004f60 <_printf_i+0x28>
 8004f72:	a101      	add	r1, pc, #4	; (adr r1, 8004f78 <_printf_i+0x40>)
 8004f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f78:	08004fd1 	.word	0x08004fd1
 8004f7c:	08004fe5 	.word	0x08004fe5
 8004f80:	08004f61 	.word	0x08004f61
 8004f84:	08004f61 	.word	0x08004f61
 8004f88:	08004f61 	.word	0x08004f61
 8004f8c:	08004f61 	.word	0x08004f61
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004f61 	.word	0x08004f61
 8004f98:	08004f61 	.word	0x08004f61
 8004f9c:	08004f61 	.word	0x08004f61
 8004fa0:	08004f61 	.word	0x08004f61
 8004fa4:	080050e9 	.word	0x080050e9
 8004fa8:	08005011 	.word	0x08005011
 8004fac:	080050a3 	.word	0x080050a3
 8004fb0:	08004f61 	.word	0x08004f61
 8004fb4:	08004f61 	.word	0x08004f61
 8004fb8:	0800510b 	.word	0x0800510b
 8004fbc:	08004f61 	.word	0x08004f61
 8004fc0:	08005011 	.word	0x08005011
 8004fc4:	08004f61 	.word	0x08004f61
 8004fc8:	08004f61 	.word	0x08004f61
 8004fcc:	080050ab 	.word	0x080050ab
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	602a      	str	r2, [r5, #0]
 8004fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e09f      	b.n	8005124 <_printf_i+0x1ec>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	682b      	ldr	r3, [r5, #0]
 8004fe8:	0607      	lsls	r7, r0, #24
 8004fea:	f103 0104 	add.w	r1, r3, #4
 8004fee:	6029      	str	r1, [r5, #0]
 8004ff0:	d501      	bpl.n	8004ff6 <_printf_i+0xbe>
 8004ff2:	681e      	ldr	r6, [r3, #0]
 8004ff4:	e003      	b.n	8004ffe <_printf_i+0xc6>
 8004ff6:	0646      	lsls	r6, r0, #25
 8004ff8:	d5fb      	bpl.n	8004ff2 <_printf_i+0xba>
 8004ffa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	da03      	bge.n	800500a <_printf_i+0xd2>
 8005002:	232d      	movs	r3, #45	; 0x2d
 8005004:	4276      	negs	r6, r6
 8005006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500a:	485a      	ldr	r0, [pc, #360]	; (8005174 <_printf_i+0x23c>)
 800500c:	230a      	movs	r3, #10
 800500e:	e012      	b.n	8005036 <_printf_i+0xfe>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	1d19      	adds	r1, r3, #4
 8005016:	6029      	str	r1, [r5, #0]
 8005018:	0605      	lsls	r5, r0, #24
 800501a:	d501      	bpl.n	8005020 <_printf_i+0xe8>
 800501c:	681e      	ldr	r6, [r3, #0]
 800501e:	e002      	b.n	8005026 <_printf_i+0xee>
 8005020:	0641      	lsls	r1, r0, #25
 8005022:	d5fb      	bpl.n	800501c <_printf_i+0xe4>
 8005024:	881e      	ldrh	r6, [r3, #0]
 8005026:	4853      	ldr	r0, [pc, #332]	; (8005174 <_printf_i+0x23c>)
 8005028:	2f6f      	cmp	r7, #111	; 0x6f
 800502a:	bf0c      	ite	eq
 800502c:	2308      	moveq	r3, #8
 800502e:	230a      	movne	r3, #10
 8005030:	2100      	movs	r1, #0
 8005032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005036:	6865      	ldr	r5, [r4, #4]
 8005038:	60a5      	str	r5, [r4, #8]
 800503a:	2d00      	cmp	r5, #0
 800503c:	bfa2      	ittt	ge
 800503e:	6821      	ldrge	r1, [r4, #0]
 8005040:	f021 0104 	bicge.w	r1, r1, #4
 8005044:	6021      	strge	r1, [r4, #0]
 8005046:	b90e      	cbnz	r6, 800504c <_printf_i+0x114>
 8005048:	2d00      	cmp	r5, #0
 800504a:	d04b      	beq.n	80050e4 <_printf_i+0x1ac>
 800504c:	4615      	mov	r5, r2
 800504e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005052:	fb03 6711 	mls	r7, r3, r1, r6
 8005056:	5dc7      	ldrb	r7, [r0, r7]
 8005058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800505c:	4637      	mov	r7, r6
 800505e:	42bb      	cmp	r3, r7
 8005060:	460e      	mov	r6, r1
 8005062:	d9f4      	bls.n	800504e <_printf_i+0x116>
 8005064:	2b08      	cmp	r3, #8
 8005066:	d10b      	bne.n	8005080 <_printf_i+0x148>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	07de      	lsls	r6, r3, #31
 800506c:	d508      	bpl.n	8005080 <_printf_i+0x148>
 800506e:	6923      	ldr	r3, [r4, #16]
 8005070:	6861      	ldr	r1, [r4, #4]
 8005072:	4299      	cmp	r1, r3
 8005074:	bfde      	ittt	le
 8005076:	2330      	movle	r3, #48	; 0x30
 8005078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800507c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005080:	1b52      	subs	r2, r2, r5
 8005082:	6122      	str	r2, [r4, #16]
 8005084:	f8cd a000 	str.w	sl, [sp]
 8005088:	464b      	mov	r3, r9
 800508a:	aa03      	add	r2, sp, #12
 800508c:	4621      	mov	r1, r4
 800508e:	4640      	mov	r0, r8
 8005090:	f7ff fee4 	bl	8004e5c <_printf_common>
 8005094:	3001      	adds	r0, #1
 8005096:	d14a      	bne.n	800512e <_printf_i+0x1f6>
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
 800509c:	b004      	add	sp, #16
 800509e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	f043 0320 	orr.w	r3, r3, #32
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	4833      	ldr	r0, [pc, #204]	; (8005178 <_printf_i+0x240>)
 80050ac:	2778      	movs	r7, #120	; 0x78
 80050ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	6829      	ldr	r1, [r5, #0]
 80050b6:	061f      	lsls	r7, r3, #24
 80050b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80050bc:	d402      	bmi.n	80050c4 <_printf_i+0x18c>
 80050be:	065f      	lsls	r7, r3, #25
 80050c0:	bf48      	it	mi
 80050c2:	b2b6      	uxthmi	r6, r6
 80050c4:	07df      	lsls	r7, r3, #31
 80050c6:	bf48      	it	mi
 80050c8:	f043 0320 	orrmi.w	r3, r3, #32
 80050cc:	6029      	str	r1, [r5, #0]
 80050ce:	bf48      	it	mi
 80050d0:	6023      	strmi	r3, [r4, #0]
 80050d2:	b91e      	cbnz	r6, 80050dc <_printf_i+0x1a4>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	f023 0320 	bic.w	r3, r3, #32
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	2310      	movs	r3, #16
 80050de:	e7a7      	b.n	8005030 <_printf_i+0xf8>
 80050e0:	4824      	ldr	r0, [pc, #144]	; (8005174 <_printf_i+0x23c>)
 80050e2:	e7e4      	b.n	80050ae <_printf_i+0x176>
 80050e4:	4615      	mov	r5, r2
 80050e6:	e7bd      	b.n	8005064 <_printf_i+0x12c>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	6826      	ldr	r6, [r4, #0]
 80050ec:	6961      	ldr	r1, [r4, #20]
 80050ee:	1d18      	adds	r0, r3, #4
 80050f0:	6028      	str	r0, [r5, #0]
 80050f2:	0635      	lsls	r5, r6, #24
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	d501      	bpl.n	80050fc <_printf_i+0x1c4>
 80050f8:	6019      	str	r1, [r3, #0]
 80050fa:	e002      	b.n	8005102 <_printf_i+0x1ca>
 80050fc:	0670      	lsls	r0, r6, #25
 80050fe:	d5fb      	bpl.n	80050f8 <_printf_i+0x1c0>
 8005100:	8019      	strh	r1, [r3, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	6123      	str	r3, [r4, #16]
 8005106:	4615      	mov	r5, r2
 8005108:	e7bc      	b.n	8005084 <_printf_i+0x14c>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	1d1a      	adds	r2, r3, #4
 800510e:	602a      	str	r2, [r5, #0]
 8005110:	681d      	ldr	r5, [r3, #0]
 8005112:	6862      	ldr	r2, [r4, #4]
 8005114:	2100      	movs	r1, #0
 8005116:	4628      	mov	r0, r5
 8005118:	f7fb f892 	bl	8000240 <memchr>
 800511c:	b108      	cbz	r0, 8005122 <_printf_i+0x1ea>
 800511e:	1b40      	subs	r0, r0, r5
 8005120:	6060      	str	r0, [r4, #4]
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	2300      	movs	r3, #0
 8005128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512c:	e7aa      	b.n	8005084 <_printf_i+0x14c>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	462a      	mov	r2, r5
 8005132:	4649      	mov	r1, r9
 8005134:	4640      	mov	r0, r8
 8005136:	47d0      	blx	sl
 8005138:	3001      	adds	r0, #1
 800513a:	d0ad      	beq.n	8005098 <_printf_i+0x160>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	079b      	lsls	r3, r3, #30
 8005140:	d413      	bmi.n	800516a <_printf_i+0x232>
 8005142:	68e0      	ldr	r0, [r4, #12]
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	4298      	cmp	r0, r3
 8005148:	bfb8      	it	lt
 800514a:	4618      	movlt	r0, r3
 800514c:	e7a6      	b.n	800509c <_printf_i+0x164>
 800514e:	2301      	movs	r3, #1
 8005150:	4632      	mov	r2, r6
 8005152:	4649      	mov	r1, r9
 8005154:	4640      	mov	r0, r8
 8005156:	47d0      	blx	sl
 8005158:	3001      	adds	r0, #1
 800515a:	d09d      	beq.n	8005098 <_printf_i+0x160>
 800515c:	3501      	adds	r5, #1
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	9903      	ldr	r1, [sp, #12]
 8005162:	1a5b      	subs	r3, r3, r1
 8005164:	42ab      	cmp	r3, r5
 8005166:	dcf2      	bgt.n	800514e <_printf_i+0x216>
 8005168:	e7eb      	b.n	8005142 <_printf_i+0x20a>
 800516a:	2500      	movs	r5, #0
 800516c:	f104 0619 	add.w	r6, r4, #25
 8005170:	e7f5      	b.n	800515e <_printf_i+0x226>
 8005172:	bf00      	nop
 8005174:	08007162 	.word	0x08007162
 8005178:	08007173 	.word	0x08007173

0800517c <std>:
 800517c:	2300      	movs	r3, #0
 800517e:	b510      	push	{r4, lr}
 8005180:	4604      	mov	r4, r0
 8005182:	e9c0 3300 	strd	r3, r3, [r0]
 8005186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800518a:	6083      	str	r3, [r0, #8]
 800518c:	8181      	strh	r1, [r0, #12]
 800518e:	6643      	str	r3, [r0, #100]	; 0x64
 8005190:	81c2      	strh	r2, [r0, #14]
 8005192:	6183      	str	r3, [r0, #24]
 8005194:	4619      	mov	r1, r3
 8005196:	2208      	movs	r2, #8
 8005198:	305c      	adds	r0, #92	; 0x5c
 800519a:	f000 f8f4 	bl	8005386 <memset>
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <std+0x58>)
 80051a0:	6263      	str	r3, [r4, #36]	; 0x24
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <std+0x5c>)
 80051a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <std+0x60>)
 80051a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051aa:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <std+0x64>)
 80051ac:	6323      	str	r3, [r4, #48]	; 0x30
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <std+0x68>)
 80051b0:	6224      	str	r4, [r4, #32]
 80051b2:	429c      	cmp	r4, r3
 80051b4:	d006      	beq.n	80051c4 <std+0x48>
 80051b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051ba:	4294      	cmp	r4, r2
 80051bc:	d002      	beq.n	80051c4 <std+0x48>
 80051be:	33d0      	adds	r3, #208	; 0xd0
 80051c0:	429c      	cmp	r4, r3
 80051c2:	d105      	bne.n	80051d0 <std+0x54>
 80051c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051cc:	f000 b958 	b.w	8005480 <__retarget_lock_init_recursive>
 80051d0:	bd10      	pop	{r4, pc}
 80051d2:	bf00      	nop
 80051d4:	08005301 	.word	0x08005301
 80051d8:	08005323 	.word	0x08005323
 80051dc:	0800535b 	.word	0x0800535b
 80051e0:	0800537f 	.word	0x0800537f
 80051e4:	20000a5c 	.word	0x20000a5c

080051e8 <stdio_exit_handler>:
 80051e8:	4a02      	ldr	r2, [pc, #8]	; (80051f4 <stdio_exit_handler+0xc>)
 80051ea:	4903      	ldr	r1, [pc, #12]	; (80051f8 <stdio_exit_handler+0x10>)
 80051ec:	4803      	ldr	r0, [pc, #12]	; (80051fc <stdio_exit_handler+0x14>)
 80051ee:	f000 b869 	b.w	80052c4 <_fwalk_sglue>
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c
 80051f8:	08006a75 	.word	0x08006a75
 80051fc:	20000018 	.word	0x20000018

08005200 <cleanup_stdio>:
 8005200:	6841      	ldr	r1, [r0, #4]
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <cleanup_stdio+0x34>)
 8005204:	4299      	cmp	r1, r3
 8005206:	b510      	push	{r4, lr}
 8005208:	4604      	mov	r4, r0
 800520a:	d001      	beq.n	8005210 <cleanup_stdio+0x10>
 800520c:	f001 fc32 	bl	8006a74 <_fflush_r>
 8005210:	68a1      	ldr	r1, [r4, #8]
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <cleanup_stdio+0x38>)
 8005214:	4299      	cmp	r1, r3
 8005216:	d002      	beq.n	800521e <cleanup_stdio+0x1e>
 8005218:	4620      	mov	r0, r4
 800521a:	f001 fc2b 	bl	8006a74 <_fflush_r>
 800521e:	68e1      	ldr	r1, [r4, #12]
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <cleanup_stdio+0x3c>)
 8005222:	4299      	cmp	r1, r3
 8005224:	d004      	beq.n	8005230 <cleanup_stdio+0x30>
 8005226:	4620      	mov	r0, r4
 8005228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800522c:	f001 bc22 	b.w	8006a74 <_fflush_r>
 8005230:	bd10      	pop	{r4, pc}
 8005232:	bf00      	nop
 8005234:	20000a5c 	.word	0x20000a5c
 8005238:	20000ac4 	.word	0x20000ac4
 800523c:	20000b2c 	.word	0x20000b2c

08005240 <global_stdio_init.part.0>:
 8005240:	b510      	push	{r4, lr}
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <global_stdio_init.part.0+0x30>)
 8005244:	4c0b      	ldr	r4, [pc, #44]	; (8005274 <global_stdio_init.part.0+0x34>)
 8005246:	4a0c      	ldr	r2, [pc, #48]	; (8005278 <global_stdio_init.part.0+0x38>)
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	4620      	mov	r0, r4
 800524c:	2200      	movs	r2, #0
 800524e:	2104      	movs	r1, #4
 8005250:	f7ff ff94 	bl	800517c <std>
 8005254:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005258:	2201      	movs	r2, #1
 800525a:	2109      	movs	r1, #9
 800525c:	f7ff ff8e 	bl	800517c <std>
 8005260:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005264:	2202      	movs	r2, #2
 8005266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800526a:	2112      	movs	r1, #18
 800526c:	f7ff bf86 	b.w	800517c <std>
 8005270:	20000b94 	.word	0x20000b94
 8005274:	20000a5c 	.word	0x20000a5c
 8005278:	080051e9 	.word	0x080051e9

0800527c <__sfp_lock_acquire>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__sfp_lock_acquire+0x8>)
 800527e:	f000 b900 	b.w	8005482 <__retarget_lock_acquire_recursive>
 8005282:	bf00      	nop
 8005284:	20000b9d 	.word	0x20000b9d

08005288 <__sfp_lock_release>:
 8005288:	4801      	ldr	r0, [pc, #4]	; (8005290 <__sfp_lock_release+0x8>)
 800528a:	f000 b8fb 	b.w	8005484 <__retarget_lock_release_recursive>
 800528e:	bf00      	nop
 8005290:	20000b9d 	.word	0x20000b9d

08005294 <__sinit>:
 8005294:	b510      	push	{r4, lr}
 8005296:	4604      	mov	r4, r0
 8005298:	f7ff fff0 	bl	800527c <__sfp_lock_acquire>
 800529c:	6a23      	ldr	r3, [r4, #32]
 800529e:	b11b      	cbz	r3, 80052a8 <__sinit+0x14>
 80052a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a4:	f7ff bff0 	b.w	8005288 <__sfp_lock_release>
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <__sinit+0x28>)
 80052aa:	6223      	str	r3, [r4, #32]
 80052ac:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <__sinit+0x2c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f5      	bne.n	80052a0 <__sinit+0xc>
 80052b4:	f7ff ffc4 	bl	8005240 <global_stdio_init.part.0>
 80052b8:	e7f2      	b.n	80052a0 <__sinit+0xc>
 80052ba:	bf00      	nop
 80052bc:	08005201 	.word	0x08005201
 80052c0:	20000b94 	.word	0x20000b94

080052c4 <_fwalk_sglue>:
 80052c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c8:	4607      	mov	r7, r0
 80052ca:	4688      	mov	r8, r1
 80052cc:	4614      	mov	r4, r2
 80052ce:	2600      	movs	r6, #0
 80052d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052d4:	f1b9 0901 	subs.w	r9, r9, #1
 80052d8:	d505      	bpl.n	80052e6 <_fwalk_sglue+0x22>
 80052da:	6824      	ldr	r4, [r4, #0]
 80052dc:	2c00      	cmp	r4, #0
 80052de:	d1f7      	bne.n	80052d0 <_fwalk_sglue+0xc>
 80052e0:	4630      	mov	r0, r6
 80052e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d907      	bls.n	80052fc <_fwalk_sglue+0x38>
 80052ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052f0:	3301      	adds	r3, #1
 80052f2:	d003      	beq.n	80052fc <_fwalk_sglue+0x38>
 80052f4:	4629      	mov	r1, r5
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c0      	blx	r8
 80052fa:	4306      	orrs	r6, r0
 80052fc:	3568      	adds	r5, #104	; 0x68
 80052fe:	e7e9      	b.n	80052d4 <_fwalk_sglue+0x10>

08005300 <__sread>:
 8005300:	b510      	push	{r4, lr}
 8005302:	460c      	mov	r4, r1
 8005304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005308:	f000 f86c 	bl	80053e4 <_read_r>
 800530c:	2800      	cmp	r0, #0
 800530e:	bfab      	itete	ge
 8005310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005312:	89a3      	ldrhlt	r3, [r4, #12]
 8005314:	181b      	addge	r3, r3, r0
 8005316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800531a:	bfac      	ite	ge
 800531c:	6563      	strge	r3, [r4, #84]	; 0x54
 800531e:	81a3      	strhlt	r3, [r4, #12]
 8005320:	bd10      	pop	{r4, pc}

08005322 <__swrite>:
 8005322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005326:	461f      	mov	r7, r3
 8005328:	898b      	ldrh	r3, [r1, #12]
 800532a:	05db      	lsls	r3, r3, #23
 800532c:	4605      	mov	r5, r0
 800532e:	460c      	mov	r4, r1
 8005330:	4616      	mov	r6, r2
 8005332:	d505      	bpl.n	8005340 <__swrite+0x1e>
 8005334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005338:	2302      	movs	r3, #2
 800533a:	2200      	movs	r2, #0
 800533c:	f000 f840 	bl	80053c0 <_lseek_r>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800534a:	81a3      	strh	r3, [r4, #12]
 800534c:	4632      	mov	r2, r6
 800534e:	463b      	mov	r3, r7
 8005350:	4628      	mov	r0, r5
 8005352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005356:	f000 b857 	b.w	8005408 <_write_r>

0800535a <__sseek>:
 800535a:	b510      	push	{r4, lr}
 800535c:	460c      	mov	r4, r1
 800535e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005362:	f000 f82d 	bl	80053c0 <_lseek_r>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	bf15      	itete	ne
 800536c:	6560      	strne	r0, [r4, #84]	; 0x54
 800536e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005376:	81a3      	strheq	r3, [r4, #12]
 8005378:	bf18      	it	ne
 800537a:	81a3      	strhne	r3, [r4, #12]
 800537c:	bd10      	pop	{r4, pc}

0800537e <__sclose>:
 800537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005382:	f000 b80d 	b.w	80053a0 <_close_r>

08005386 <memset>:
 8005386:	4402      	add	r2, r0
 8005388:	4603      	mov	r3, r0
 800538a:	4293      	cmp	r3, r2
 800538c:	d100      	bne.n	8005390 <memset+0xa>
 800538e:	4770      	bx	lr
 8005390:	f803 1b01 	strb.w	r1, [r3], #1
 8005394:	e7f9      	b.n	800538a <memset+0x4>
	...

08005398 <_localeconv_r>:
 8005398:	4800      	ldr	r0, [pc, #0]	; (800539c <_localeconv_r+0x4>)
 800539a:	4770      	bx	lr
 800539c:	20000158 	.word	0x20000158

080053a0 <_close_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d06      	ldr	r5, [pc, #24]	; (80053bc <_close_r+0x1c>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	f7fb feaf 	bl	800110e <_close>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_close_r+0x1a>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_close_r+0x1a>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20000b98 	.word	0x20000b98

080053c0 <_lseek_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <_lseek_r+0x20>)
 80053c4:	4604      	mov	r4, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fb fec4 	bl	800115c <_lseek>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_lseek_r+0x1e>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_lseek_r+0x1e>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000b98 	.word	0x20000b98

080053e4 <_read_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	; (8005404 <_read_r+0x20>)
 80053e8:	4604      	mov	r4, r0
 80053ea:	4608      	mov	r0, r1
 80053ec:	4611      	mov	r1, r2
 80053ee:	2200      	movs	r2, #0
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f7fb fe52 	bl	800109c <_read>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_read_r+0x1e>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_read_r+0x1e>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	20000b98 	.word	0x20000b98

08005408 <_write_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d07      	ldr	r5, [pc, #28]	; (8005428 <_write_r+0x20>)
 800540c:	4604      	mov	r4, r0
 800540e:	4608      	mov	r0, r1
 8005410:	4611      	mov	r1, r2
 8005412:	2200      	movs	r2, #0
 8005414:	602a      	str	r2, [r5, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f7fb fe5d 	bl	80010d6 <_write>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_write_r+0x1e>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_write_r+0x1e>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	20000b98 	.word	0x20000b98

0800542c <__errno>:
 800542c:	4b01      	ldr	r3, [pc, #4]	; (8005434 <__errno+0x8>)
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000064 	.word	0x20000064

08005438 <__libc_init_array>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4d0d      	ldr	r5, [pc, #52]	; (8005470 <__libc_init_array+0x38>)
 800543c:	4c0d      	ldr	r4, [pc, #52]	; (8005474 <__libc_init_array+0x3c>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	2600      	movs	r6, #0
 8005444:	42a6      	cmp	r6, r4
 8005446:	d109      	bne.n	800545c <__libc_init_array+0x24>
 8005448:	4d0b      	ldr	r5, [pc, #44]	; (8005478 <__libc_init_array+0x40>)
 800544a:	4c0c      	ldr	r4, [pc, #48]	; (800547c <__libc_init_array+0x44>)
 800544c:	f001 fe66 	bl	800711c <_init>
 8005450:	1b64      	subs	r4, r4, r5
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	2600      	movs	r6, #0
 8005456:	42a6      	cmp	r6, r4
 8005458:	d105      	bne.n	8005466 <__libc_init_array+0x2e>
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005460:	4798      	blx	r3
 8005462:	3601      	adds	r6, #1
 8005464:	e7ee      	b.n	8005444 <__libc_init_array+0xc>
 8005466:	f855 3b04 	ldr.w	r3, [r5], #4
 800546a:	4798      	blx	r3
 800546c:	3601      	adds	r6, #1
 800546e:	e7f2      	b.n	8005456 <__libc_init_array+0x1e>
 8005470:	080074cc 	.word	0x080074cc
 8005474:	080074cc 	.word	0x080074cc
 8005478:	080074cc 	.word	0x080074cc
 800547c:	080074d0 	.word	0x080074d0

08005480 <__retarget_lock_init_recursive>:
 8005480:	4770      	bx	lr

08005482 <__retarget_lock_acquire_recursive>:
 8005482:	4770      	bx	lr

08005484 <__retarget_lock_release_recursive>:
 8005484:	4770      	bx	lr

08005486 <quorem>:
 8005486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	6903      	ldr	r3, [r0, #16]
 800548c:	690c      	ldr	r4, [r1, #16]
 800548e:	42a3      	cmp	r3, r4
 8005490:	4607      	mov	r7, r0
 8005492:	db7e      	blt.n	8005592 <quorem+0x10c>
 8005494:	3c01      	subs	r4, #1
 8005496:	f101 0814 	add.w	r8, r1, #20
 800549a:	f100 0514 	add.w	r5, r0, #20
 800549e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054ac:	3301      	adds	r3, #1
 80054ae:	429a      	cmp	r2, r3
 80054b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80054bc:	d331      	bcc.n	8005522 <quorem+0x9c>
 80054be:	f04f 0e00 	mov.w	lr, #0
 80054c2:	4640      	mov	r0, r8
 80054c4:	46ac      	mov	ip, r5
 80054c6:	46f2      	mov	sl, lr
 80054c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80054cc:	b293      	uxth	r3, r2
 80054ce:	fb06 e303 	mla	r3, r6, r3, lr
 80054d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054d6:	0c1a      	lsrs	r2, r3, #16
 80054d8:	b29b      	uxth	r3, r3
 80054da:	ebaa 0303 	sub.w	r3, sl, r3
 80054de:	f8dc a000 	ldr.w	sl, [ip]
 80054e2:	fa13 f38a 	uxtah	r3, r3, sl
 80054e6:	fb06 220e 	mla	r2, r6, lr, r2
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	9b00      	ldr	r3, [sp, #0]
 80054ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054f2:	b292      	uxth	r2, r2
 80054f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80054f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005500:	4581      	cmp	r9, r0
 8005502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005506:	f84c 3b04 	str.w	r3, [ip], #4
 800550a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800550e:	d2db      	bcs.n	80054c8 <quorem+0x42>
 8005510:	f855 300b 	ldr.w	r3, [r5, fp]
 8005514:	b92b      	cbnz	r3, 8005522 <quorem+0x9c>
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	3b04      	subs	r3, #4
 800551a:	429d      	cmp	r5, r3
 800551c:	461a      	mov	r2, r3
 800551e:	d32c      	bcc.n	800557a <quorem+0xf4>
 8005520:	613c      	str	r4, [r7, #16]
 8005522:	4638      	mov	r0, r7
 8005524:	f001 f920 	bl	8006768 <__mcmp>
 8005528:	2800      	cmp	r0, #0
 800552a:	db22      	blt.n	8005572 <quorem+0xec>
 800552c:	3601      	adds	r6, #1
 800552e:	4629      	mov	r1, r5
 8005530:	2000      	movs	r0, #0
 8005532:	f858 2b04 	ldr.w	r2, [r8], #4
 8005536:	f8d1 c000 	ldr.w	ip, [r1]
 800553a:	b293      	uxth	r3, r2
 800553c:	1ac3      	subs	r3, r0, r3
 800553e:	0c12      	lsrs	r2, r2, #16
 8005540:	fa13 f38c 	uxtah	r3, r3, ip
 8005544:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005548:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800554c:	b29b      	uxth	r3, r3
 800554e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005552:	45c1      	cmp	r9, r8
 8005554:	f841 3b04 	str.w	r3, [r1], #4
 8005558:	ea4f 4022 	mov.w	r0, r2, asr #16
 800555c:	d2e9      	bcs.n	8005532 <quorem+0xac>
 800555e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005566:	b922      	cbnz	r2, 8005572 <quorem+0xec>
 8005568:	3b04      	subs	r3, #4
 800556a:	429d      	cmp	r5, r3
 800556c:	461a      	mov	r2, r3
 800556e:	d30a      	bcc.n	8005586 <quorem+0x100>
 8005570:	613c      	str	r4, [r7, #16]
 8005572:	4630      	mov	r0, r6
 8005574:	b003      	add	sp, #12
 8005576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	3b04      	subs	r3, #4
 800557e:	2a00      	cmp	r2, #0
 8005580:	d1ce      	bne.n	8005520 <quorem+0x9a>
 8005582:	3c01      	subs	r4, #1
 8005584:	e7c9      	b.n	800551a <quorem+0x94>
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	3b04      	subs	r3, #4
 800558a:	2a00      	cmp	r2, #0
 800558c:	d1f0      	bne.n	8005570 <quorem+0xea>
 800558e:	3c01      	subs	r4, #1
 8005590:	e7eb      	b.n	800556a <quorem+0xe4>
 8005592:	2000      	movs	r0, #0
 8005594:	e7ee      	b.n	8005574 <quorem+0xee>
	...

08005598 <_dtoa_r>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	ed2d 8b02 	vpush	{d8}
 80055a0:	69c5      	ldr	r5, [r0, #28]
 80055a2:	b091      	sub	sp, #68	; 0x44
 80055a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80055a8:	ec59 8b10 	vmov	r8, r9, d0
 80055ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80055ae:	9106      	str	r1, [sp, #24]
 80055b0:	4606      	mov	r6, r0
 80055b2:	9208      	str	r2, [sp, #32]
 80055b4:	930c      	str	r3, [sp, #48]	; 0x30
 80055b6:	b975      	cbnz	r5, 80055d6 <_dtoa_r+0x3e>
 80055b8:	2010      	movs	r0, #16
 80055ba:	f000 fda5 	bl	8006108 <malloc>
 80055be:	4602      	mov	r2, r0
 80055c0:	61f0      	str	r0, [r6, #28]
 80055c2:	b920      	cbnz	r0, 80055ce <_dtoa_r+0x36>
 80055c4:	4ba6      	ldr	r3, [pc, #664]	; (8005860 <_dtoa_r+0x2c8>)
 80055c6:	21ef      	movs	r1, #239	; 0xef
 80055c8:	48a6      	ldr	r0, [pc, #664]	; (8005864 <_dtoa_r+0x2cc>)
 80055ca:	f001 fa99 	bl	8006b00 <__assert_func>
 80055ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055d2:	6005      	str	r5, [r0, #0]
 80055d4:	60c5      	str	r5, [r0, #12]
 80055d6:	69f3      	ldr	r3, [r6, #28]
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	b151      	cbz	r1, 80055f2 <_dtoa_r+0x5a>
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	604a      	str	r2, [r1, #4]
 80055e0:	2301      	movs	r3, #1
 80055e2:	4093      	lsls	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
 80055e6:	4630      	mov	r0, r6
 80055e8:	f000 fe82 	bl	80062f0 <_Bfree>
 80055ec:	69f3      	ldr	r3, [r6, #28]
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	f1b9 0300 	subs.w	r3, r9, #0
 80055f6:	bfbb      	ittet	lt
 80055f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	9303      	strlt	r3, [sp, #12]
 80055fe:	2300      	movge	r3, #0
 8005600:	2201      	movlt	r2, #1
 8005602:	bfac      	ite	ge
 8005604:	6023      	strge	r3, [r4, #0]
 8005606:	6022      	strlt	r2, [r4, #0]
 8005608:	4b97      	ldr	r3, [pc, #604]	; (8005868 <_dtoa_r+0x2d0>)
 800560a:	9c03      	ldr	r4, [sp, #12]
 800560c:	43a3      	bics	r3, r4
 800560e:	d11c      	bne.n	800564a <_dtoa_r+0xb2>
 8005610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005612:	f242 730f 	movw	r3, #9999	; 0x270f
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800561c:	ea53 0308 	orrs.w	r3, r3, r8
 8005620:	f000 84fb 	beq.w	800601a <_dtoa_r+0xa82>
 8005624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005626:	b963      	cbnz	r3, 8005642 <_dtoa_r+0xaa>
 8005628:	4b90      	ldr	r3, [pc, #576]	; (800586c <_dtoa_r+0x2d4>)
 800562a:	e020      	b.n	800566e <_dtoa_r+0xd6>
 800562c:	4b90      	ldr	r3, [pc, #576]	; (8005870 <_dtoa_r+0x2d8>)
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	3308      	adds	r3, #8
 8005632:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	9801      	ldr	r0, [sp, #4]
 8005638:	b011      	add	sp, #68	; 0x44
 800563a:	ecbd 8b02 	vpop	{d8}
 800563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005642:	4b8a      	ldr	r3, [pc, #552]	; (800586c <_dtoa_r+0x2d4>)
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	3303      	adds	r3, #3
 8005648:	e7f3      	b.n	8005632 <_dtoa_r+0x9a>
 800564a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800564e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005656:	d10c      	bne.n	8005672 <_dtoa_r+0xda>
 8005658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800565a:	2301      	movs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 84d7 	beq.w	8006014 <_dtoa_r+0xa7c>
 8005666:	4b83      	ldr	r3, [pc, #524]	; (8005874 <_dtoa_r+0x2dc>)
 8005668:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	3b01      	subs	r3, #1
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	e7e1      	b.n	8005636 <_dtoa_r+0x9e>
 8005672:	aa0e      	add	r2, sp, #56	; 0x38
 8005674:	a90f      	add	r1, sp, #60	; 0x3c
 8005676:	4630      	mov	r0, r6
 8005678:	eeb0 0b48 	vmov.f64	d0, d8
 800567c:	f001 f91a 	bl	80068b4 <__d2b>
 8005680:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005686:	4605      	mov	r5, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d046      	beq.n	800571a <_dtoa_r+0x182>
 800568c:	eeb0 7b48 	vmov.f64	d7, d8
 8005690:	ee18 1a90 	vmov	r1, s17
 8005694:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005698:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800569c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80056a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80056a4:	2000      	movs	r0, #0
 80056a6:	ee07 1a90 	vmov	s15, r1
 80056aa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80056ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005848 <_dtoa_r+0x2b0>
 80056b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005850 <_dtoa_r+0x2b8>
 80056ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80056be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005858 <_dtoa_r+0x2c0>
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80056ca:	eeb0 7b46 	vmov.f64	d7, d6
 80056ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80056d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80056d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80056da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056de:	ee16 ba90 	vmov	fp, s13
 80056e2:	9009      	str	r0, [sp, #36]	; 0x24
 80056e4:	d508      	bpl.n	80056f8 <_dtoa_r+0x160>
 80056e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80056ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80056ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f2:	bf18      	it	ne
 80056f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80056f8:	f1bb 0f16 	cmp.w	fp, #22
 80056fc:	d82b      	bhi.n	8005756 <_dtoa_r+0x1be>
 80056fe:	495e      	ldr	r1, [pc, #376]	; (8005878 <_dtoa_r+0x2e0>)
 8005700:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005704:	ed91 7b00 	vldr	d7, [r1]
 8005708:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	d501      	bpl.n	8005716 <_dtoa_r+0x17e>
 8005712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005716:	2100      	movs	r1, #0
 8005718:	e01e      	b.n	8005758 <_dtoa_r+0x1c0>
 800571a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800571c:	4413      	add	r3, r2
 800571e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005722:	2920      	cmp	r1, #32
 8005724:	bfc1      	itttt	gt
 8005726:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800572a:	408c      	lslgt	r4, r1
 800572c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005730:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005734:	bfd6      	itet	le
 8005736:	f1c1 0120 	rsble	r1, r1, #32
 800573a:	4321      	orrgt	r1, r4
 800573c:	fa08 f101 	lslle.w	r1, r8, r1
 8005740:	ee07 1a90 	vmov	s15, r1
 8005744:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005748:	3b01      	subs	r3, #1
 800574a:	ee17 1a90 	vmov	r1, s15
 800574e:	2001      	movs	r0, #1
 8005750:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005754:	e7a7      	b.n	80056a6 <_dtoa_r+0x10e>
 8005756:	2101      	movs	r1, #1
 8005758:	1ad2      	subs	r2, r2, r3
 800575a:	1e53      	subs	r3, r2, #1
 800575c:	9305      	str	r3, [sp, #20]
 800575e:	bf45      	ittet	mi
 8005760:	f1c2 0301 	rsbmi	r3, r2, #1
 8005764:	9304      	strmi	r3, [sp, #16]
 8005766:	2300      	movpl	r3, #0
 8005768:	2300      	movmi	r3, #0
 800576a:	bf4c      	ite	mi
 800576c:	9305      	strmi	r3, [sp, #20]
 800576e:	9304      	strpl	r3, [sp, #16]
 8005770:	f1bb 0f00 	cmp.w	fp, #0
 8005774:	910b      	str	r1, [sp, #44]	; 0x2c
 8005776:	db18      	blt.n	80057aa <_dtoa_r+0x212>
 8005778:	9b05      	ldr	r3, [sp, #20]
 800577a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800577e:	445b      	add	r3, fp
 8005780:	9305      	str	r3, [sp, #20]
 8005782:	2300      	movs	r3, #0
 8005784:	9a06      	ldr	r2, [sp, #24]
 8005786:	2a09      	cmp	r2, #9
 8005788:	d848      	bhi.n	800581c <_dtoa_r+0x284>
 800578a:	2a05      	cmp	r2, #5
 800578c:	bfc4      	itt	gt
 800578e:	3a04      	subgt	r2, #4
 8005790:	9206      	strgt	r2, [sp, #24]
 8005792:	9a06      	ldr	r2, [sp, #24]
 8005794:	f1a2 0202 	sub.w	r2, r2, #2
 8005798:	bfcc      	ite	gt
 800579a:	2400      	movgt	r4, #0
 800579c:	2401      	movle	r4, #1
 800579e:	2a03      	cmp	r2, #3
 80057a0:	d847      	bhi.n	8005832 <_dtoa_r+0x29a>
 80057a2:	e8df f002 	tbb	[pc, r2]
 80057a6:	2d0b      	.short	0x2d0b
 80057a8:	392b      	.short	0x392b
 80057aa:	9b04      	ldr	r3, [sp, #16]
 80057ac:	2200      	movs	r2, #0
 80057ae:	eba3 030b 	sub.w	r3, r3, fp
 80057b2:	9304      	str	r3, [sp, #16]
 80057b4:	920a      	str	r2, [sp, #40]	; 0x28
 80057b6:	f1cb 0300 	rsb	r3, fp, #0
 80057ba:	e7e3      	b.n	8005784 <_dtoa_r+0x1ec>
 80057bc:	2200      	movs	r2, #0
 80057be:	9207      	str	r2, [sp, #28]
 80057c0:	9a08      	ldr	r2, [sp, #32]
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	dc38      	bgt.n	8005838 <_dtoa_r+0x2a0>
 80057c6:	f04f 0a01 	mov.w	sl, #1
 80057ca:	46d1      	mov	r9, sl
 80057cc:	4652      	mov	r2, sl
 80057ce:	f8cd a020 	str.w	sl, [sp, #32]
 80057d2:	69f7      	ldr	r7, [r6, #28]
 80057d4:	2100      	movs	r1, #0
 80057d6:	2004      	movs	r0, #4
 80057d8:	f100 0c14 	add.w	ip, r0, #20
 80057dc:	4594      	cmp	ip, r2
 80057de:	d930      	bls.n	8005842 <_dtoa_r+0x2aa>
 80057e0:	6079      	str	r1, [r7, #4]
 80057e2:	4630      	mov	r0, r6
 80057e4:	930d      	str	r3, [sp, #52]	; 0x34
 80057e6:	f000 fd43 	bl	8006270 <_Balloc>
 80057ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ec:	9001      	str	r0, [sp, #4]
 80057ee:	4602      	mov	r2, r0
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d145      	bne.n	8005880 <_dtoa_r+0x2e8>
 80057f4:	4b21      	ldr	r3, [pc, #132]	; (800587c <_dtoa_r+0x2e4>)
 80057f6:	f240 11af 	movw	r1, #431	; 0x1af
 80057fa:	e6e5      	b.n	80055c8 <_dtoa_r+0x30>
 80057fc:	2201      	movs	r2, #1
 80057fe:	e7de      	b.n	80057be <_dtoa_r+0x226>
 8005800:	2200      	movs	r2, #0
 8005802:	9207      	str	r2, [sp, #28]
 8005804:	9a08      	ldr	r2, [sp, #32]
 8005806:	eb0b 0a02 	add.w	sl, fp, r2
 800580a:	f10a 0901 	add.w	r9, sl, #1
 800580e:	464a      	mov	r2, r9
 8005810:	2a01      	cmp	r2, #1
 8005812:	bfb8      	it	lt
 8005814:	2201      	movlt	r2, #1
 8005816:	e7dc      	b.n	80057d2 <_dtoa_r+0x23a>
 8005818:	2201      	movs	r2, #1
 800581a:	e7f2      	b.n	8005802 <_dtoa_r+0x26a>
 800581c:	2401      	movs	r4, #1
 800581e:	2200      	movs	r2, #0
 8005820:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005824:	f04f 3aff 	mov.w	sl, #4294967295
 8005828:	2100      	movs	r1, #0
 800582a:	46d1      	mov	r9, sl
 800582c:	2212      	movs	r2, #18
 800582e:	9108      	str	r1, [sp, #32]
 8005830:	e7cf      	b.n	80057d2 <_dtoa_r+0x23a>
 8005832:	2201      	movs	r2, #1
 8005834:	9207      	str	r2, [sp, #28]
 8005836:	e7f5      	b.n	8005824 <_dtoa_r+0x28c>
 8005838:	f8dd a020 	ldr.w	sl, [sp, #32]
 800583c:	46d1      	mov	r9, sl
 800583e:	4652      	mov	r2, sl
 8005840:	e7c7      	b.n	80057d2 <_dtoa_r+0x23a>
 8005842:	3101      	adds	r1, #1
 8005844:	0040      	lsls	r0, r0, #1
 8005846:	e7c7      	b.n	80057d8 <_dtoa_r+0x240>
 8005848:	636f4361 	.word	0x636f4361
 800584c:	3fd287a7 	.word	0x3fd287a7
 8005850:	8b60c8b3 	.word	0x8b60c8b3
 8005854:	3fc68a28 	.word	0x3fc68a28
 8005858:	509f79fb 	.word	0x509f79fb
 800585c:	3fd34413 	.word	0x3fd34413
 8005860:	08007191 	.word	0x08007191
 8005864:	080071a8 	.word	0x080071a8
 8005868:	7ff00000 	.word	0x7ff00000
 800586c:	0800718d 	.word	0x0800718d
 8005870:	08007184 	.word	0x08007184
 8005874:	08007161 	.word	0x08007161
 8005878:	08007298 	.word	0x08007298
 800587c:	08007200 	.word	0x08007200
 8005880:	69f2      	ldr	r2, [r6, #28]
 8005882:	9901      	ldr	r1, [sp, #4]
 8005884:	6011      	str	r1, [r2, #0]
 8005886:	f1b9 0f0e 	cmp.w	r9, #14
 800588a:	d86c      	bhi.n	8005966 <_dtoa_r+0x3ce>
 800588c:	2c00      	cmp	r4, #0
 800588e:	d06a      	beq.n	8005966 <_dtoa_r+0x3ce>
 8005890:	f1bb 0f00 	cmp.w	fp, #0
 8005894:	f340 80a0 	ble.w	80059d8 <_dtoa_r+0x440>
 8005898:	4ac1      	ldr	r2, [pc, #772]	; (8005ba0 <_dtoa_r+0x608>)
 800589a:	f00b 010f 	and.w	r1, fp, #15
 800589e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80058a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80058a6:	ed92 7b00 	vldr	d7, [r2]
 80058aa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80058ae:	f000 8087 	beq.w	80059c0 <_dtoa_r+0x428>
 80058b2:	49bc      	ldr	r1, [pc, #752]	; (8005ba4 <_dtoa_r+0x60c>)
 80058b4:	ed91 6b08 	vldr	d6, [r1, #32]
 80058b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80058bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80058c0:	f002 020f 	and.w	r2, r2, #15
 80058c4:	2103      	movs	r1, #3
 80058c6:	48b7      	ldr	r0, [pc, #732]	; (8005ba4 <_dtoa_r+0x60c>)
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d17b      	bne.n	80059c4 <_dtoa_r+0x42c>
 80058cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80058d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80058d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058de:	2a00      	cmp	r2, #0
 80058e0:	f000 80a0 	beq.w	8005a24 <_dtoa_r+0x48c>
 80058e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80058e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80058ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f0:	f140 8098 	bpl.w	8005a24 <_dtoa_r+0x48c>
 80058f4:	f1b9 0f00 	cmp.w	r9, #0
 80058f8:	f000 8094 	beq.w	8005a24 <_dtoa_r+0x48c>
 80058fc:	f1ba 0f00 	cmp.w	sl, #0
 8005900:	dd2f      	ble.n	8005962 <_dtoa_r+0x3ca>
 8005902:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005906:	ee27 7b06 	vmul.f64	d7, d7, d6
 800590a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800590e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005912:	3101      	adds	r1, #1
 8005914:	4654      	mov	r4, sl
 8005916:	ed9d 6b02 	vldr	d6, [sp, #8]
 800591a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800591e:	ee07 1a90 	vmov	s15, r1
 8005922:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005926:	eea7 5b06 	vfma.f64	d5, d7, d6
 800592a:	ee15 7a90 	vmov	r7, s11
 800592e:	ec51 0b15 	vmov	r0, r1, d5
 8005932:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005936:	2c00      	cmp	r4, #0
 8005938:	d177      	bne.n	8005a2a <_dtoa_r+0x492>
 800593a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800593e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005942:	ec41 0b17 	vmov	d7, r0, r1
 8005946:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800594a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594e:	f300 826a 	bgt.w	8005e26 <_dtoa_r+0x88e>
 8005952:	eeb1 7b47 	vneg.f64	d7, d7
 8005956:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595e:	f100 8260 	bmi.w	8005e22 <_dtoa_r+0x88a>
 8005962:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005968:	2a00      	cmp	r2, #0
 800596a:	f2c0 811d 	blt.w	8005ba8 <_dtoa_r+0x610>
 800596e:	f1bb 0f0e 	cmp.w	fp, #14
 8005972:	f300 8119 	bgt.w	8005ba8 <_dtoa_r+0x610>
 8005976:	4b8a      	ldr	r3, [pc, #552]	; (8005ba0 <_dtoa_r+0x608>)
 8005978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800597c:	ed93 6b00 	vldr	d6, [r3]
 8005980:	9b08      	ldr	r3, [sp, #32]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f280 80b7 	bge.w	8005af6 <_dtoa_r+0x55e>
 8005988:	f1b9 0f00 	cmp.w	r9, #0
 800598c:	f300 80b3 	bgt.w	8005af6 <_dtoa_r+0x55e>
 8005990:	f040 8246 	bne.w	8005e20 <_dtoa_r+0x888>
 8005994:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005998:	ee26 6b07 	vmul.f64	d6, d6, d7
 800599c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80059a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a8:	464c      	mov	r4, r9
 80059aa:	464f      	mov	r7, r9
 80059ac:	f280 821c 	bge.w	8005de8 <_dtoa_r+0x850>
 80059b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80059b4:	2331      	movs	r3, #49	; 0x31
 80059b6:	f808 3b01 	strb.w	r3, [r8], #1
 80059ba:	f10b 0b01 	add.w	fp, fp, #1
 80059be:	e218      	b.n	8005df2 <_dtoa_r+0x85a>
 80059c0:	2102      	movs	r1, #2
 80059c2:	e780      	b.n	80058c6 <_dtoa_r+0x32e>
 80059c4:	07d4      	lsls	r4, r2, #31
 80059c6:	d504      	bpl.n	80059d2 <_dtoa_r+0x43a>
 80059c8:	ed90 6b00 	vldr	d6, [r0]
 80059cc:	3101      	adds	r1, #1
 80059ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059d2:	1052      	asrs	r2, r2, #1
 80059d4:	3008      	adds	r0, #8
 80059d6:	e777      	b.n	80058c8 <_dtoa_r+0x330>
 80059d8:	d022      	beq.n	8005a20 <_dtoa_r+0x488>
 80059da:	f1cb 0200 	rsb	r2, fp, #0
 80059de:	4970      	ldr	r1, [pc, #448]	; (8005ba0 <_dtoa_r+0x608>)
 80059e0:	f002 000f 	and.w	r0, r2, #15
 80059e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80059e8:	ed91 7b00 	vldr	d7, [r1]
 80059ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80059f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059f4:	486b      	ldr	r0, [pc, #428]	; (8005ba4 <_dtoa_r+0x60c>)
 80059f6:	1112      	asrs	r2, r2, #4
 80059f8:	2400      	movs	r4, #0
 80059fa:	2102      	movs	r1, #2
 80059fc:	b92a      	cbnz	r2, 8005a0a <_dtoa_r+0x472>
 80059fe:	2c00      	cmp	r4, #0
 8005a00:	f43f af6a 	beq.w	80058d8 <_dtoa_r+0x340>
 8005a04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a08:	e766      	b.n	80058d8 <_dtoa_r+0x340>
 8005a0a:	07d7      	lsls	r7, r2, #31
 8005a0c:	d505      	bpl.n	8005a1a <_dtoa_r+0x482>
 8005a0e:	ed90 6b00 	vldr	d6, [r0]
 8005a12:	3101      	adds	r1, #1
 8005a14:	2401      	movs	r4, #1
 8005a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a1a:	1052      	asrs	r2, r2, #1
 8005a1c:	3008      	adds	r0, #8
 8005a1e:	e7ed      	b.n	80059fc <_dtoa_r+0x464>
 8005a20:	2102      	movs	r1, #2
 8005a22:	e759      	b.n	80058d8 <_dtoa_r+0x340>
 8005a24:	465a      	mov	r2, fp
 8005a26:	464c      	mov	r4, r9
 8005a28:	e775      	b.n	8005916 <_dtoa_r+0x37e>
 8005a2a:	ec41 0b17 	vmov	d7, r0, r1
 8005a2e:	495c      	ldr	r1, [pc, #368]	; (8005ba0 <_dtoa_r+0x608>)
 8005a30:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005a34:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005a38:	9901      	ldr	r1, [sp, #4]
 8005a3a:	440c      	add	r4, r1
 8005a3c:	9907      	ldr	r1, [sp, #28]
 8005a3e:	b351      	cbz	r1, 8005a96 <_dtoa_r+0x4fe>
 8005a40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005a44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005a48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a4c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005a50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005a54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005a58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005a5c:	ee14 1a90 	vmov	r1, s9
 8005a60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005a64:	3130      	adds	r1, #48	; 0x30
 8005a66:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005a6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a72:	f808 1b01 	strb.w	r1, [r8], #1
 8005a76:	d439      	bmi.n	8005aec <_dtoa_r+0x554>
 8005a78:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005a7c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a84:	d472      	bmi.n	8005b6c <_dtoa_r+0x5d4>
 8005a86:	45a0      	cmp	r8, r4
 8005a88:	f43f af6b 	beq.w	8005962 <_dtoa_r+0x3ca>
 8005a8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005a90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005a94:	e7e0      	b.n	8005a58 <_dtoa_r+0x4c0>
 8005a96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005aa4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005aa8:	ee14 1a90 	vmov	r1, s9
 8005aac:	3130      	adds	r1, #48	; 0x30
 8005aae:	f808 1b01 	strb.w	r1, [r8], #1
 8005ab2:	45a0      	cmp	r8, r4
 8005ab4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005ab8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005abc:	d118      	bne.n	8005af0 <_dtoa_r+0x558>
 8005abe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005ac2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005ac6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ace:	dc4d      	bgt.n	8005b6c <_dtoa_r+0x5d4>
 8005ad0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005ad4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005adc:	f57f af41 	bpl.w	8005962 <_dtoa_r+0x3ca>
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	3801      	subs	r0, #1
 8005ae4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d0f9      	beq.n	8005ae0 <_dtoa_r+0x548>
 8005aec:	4693      	mov	fp, r2
 8005aee:	e02a      	b.n	8005b46 <_dtoa_r+0x5ae>
 8005af0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005af4:	e7d6      	b.n	8005aa4 <_dtoa_r+0x50c>
 8005af6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005afa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005afe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005b06:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005b0a:	ee15 3a10 	vmov	r3, s10
 8005b0e:	3330      	adds	r3, #48	; 0x30
 8005b10:	f808 3b01 	strb.w	r3, [r8], #1
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	eba8 0303 	sub.w	r3, r8, r3
 8005b1a:	4599      	cmp	r9, r3
 8005b1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005b20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005b24:	d133      	bne.n	8005b8e <_dtoa_r+0x5f6>
 8005b26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b32:	dc1a      	bgt.n	8005b6a <_dtoa_r+0x5d2>
 8005b34:	eeb4 7b46 	vcmp.f64	d7, d6
 8005b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3c:	d103      	bne.n	8005b46 <_dtoa_r+0x5ae>
 8005b3e:	ee15 3a10 	vmov	r3, s10
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	d411      	bmi.n	8005b6a <_dtoa_r+0x5d2>
 8005b46:	4629      	mov	r1, r5
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 fbd1 	bl	80062f0 <_Bfree>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b52:	f888 3000 	strb.w	r3, [r8]
 8005b56:	f10b 0301 	add.w	r3, fp, #1
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f43f ad69 	beq.w	8005636 <_dtoa_r+0x9e>
 8005b64:	f8c3 8000 	str.w	r8, [r3]
 8005b68:	e565      	b.n	8005636 <_dtoa_r+0x9e>
 8005b6a:	465a      	mov	r2, fp
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	4698      	mov	r8, r3
 8005b70:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8005b74:	2939      	cmp	r1, #57	; 0x39
 8005b76:	d106      	bne.n	8005b86 <_dtoa_r+0x5ee>
 8005b78:	9901      	ldr	r1, [sp, #4]
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	d1f7      	bne.n	8005b6e <_dtoa_r+0x5d6>
 8005b7e:	9801      	ldr	r0, [sp, #4]
 8005b80:	2130      	movs	r1, #48	; 0x30
 8005b82:	3201      	adds	r2, #1
 8005b84:	7001      	strb	r1, [r0, #0]
 8005b86:	7819      	ldrb	r1, [r3, #0]
 8005b88:	3101      	adds	r1, #1
 8005b8a:	7019      	strb	r1, [r3, #0]
 8005b8c:	e7ae      	b.n	8005aec <_dtoa_r+0x554>
 8005b8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005b92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	d1b2      	bne.n	8005b02 <_dtoa_r+0x56a>
 8005b9c:	e7d3      	b.n	8005b46 <_dtoa_r+0x5ae>
 8005b9e:	bf00      	nop
 8005ba0:	08007298 	.word	0x08007298
 8005ba4:	08007270 	.word	0x08007270
 8005ba8:	9907      	ldr	r1, [sp, #28]
 8005baa:	2900      	cmp	r1, #0
 8005bac:	f000 80d0 	beq.w	8005d50 <_dtoa_r+0x7b8>
 8005bb0:	9906      	ldr	r1, [sp, #24]
 8005bb2:	2901      	cmp	r1, #1
 8005bb4:	f300 80b4 	bgt.w	8005d20 <_dtoa_r+0x788>
 8005bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bba:	2900      	cmp	r1, #0
 8005bbc:	f000 80ac 	beq.w	8005d18 <_dtoa_r+0x780>
 8005bc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005bc4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005bc8:	461c      	mov	r4, r3
 8005bca:	9309      	str	r3, [sp, #36]	; 0x24
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	9304      	str	r3, [sp, #16]
 8005bd2:	9b05      	ldr	r3, [sp, #20]
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	4630      	mov	r0, r6
 8005bda:	9305      	str	r3, [sp, #20]
 8005bdc:	f000 fc3e 	bl	800645c <__i2b>
 8005be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be2:	4607      	mov	r7, r0
 8005be4:	f1b8 0f00 	cmp.w	r8, #0
 8005be8:	d00d      	beq.n	8005c06 <_dtoa_r+0x66e>
 8005bea:	9a05      	ldr	r2, [sp, #20]
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	dd0a      	ble.n	8005c06 <_dtoa_r+0x66e>
 8005bf0:	4542      	cmp	r2, r8
 8005bf2:	9904      	ldr	r1, [sp, #16]
 8005bf4:	bfa8      	it	ge
 8005bf6:	4642      	movge	r2, r8
 8005bf8:	1a89      	subs	r1, r1, r2
 8005bfa:	9104      	str	r1, [sp, #16]
 8005bfc:	9905      	ldr	r1, [sp, #20]
 8005bfe:	eba8 0802 	sub.w	r8, r8, r2
 8005c02:	1a8a      	subs	r2, r1, r2
 8005c04:	9205      	str	r2, [sp, #20]
 8005c06:	b303      	cbz	r3, 8005c4a <_dtoa_r+0x6b2>
 8005c08:	9a07      	ldr	r2, [sp, #28]
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	f000 80a5 	beq.w	8005d5a <_dtoa_r+0x7c2>
 8005c10:	2c00      	cmp	r4, #0
 8005c12:	dd13      	ble.n	8005c3c <_dtoa_r+0x6a4>
 8005c14:	4639      	mov	r1, r7
 8005c16:	4622      	mov	r2, r4
 8005c18:	4630      	mov	r0, r6
 8005c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8005c1c:	f000 fcde 	bl	80065dc <__pow5mult>
 8005c20:	462a      	mov	r2, r5
 8005c22:	4601      	mov	r1, r0
 8005c24:	4607      	mov	r7, r0
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 fc2e 	bl	8006488 <__multiply>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	9009      	str	r0, [sp, #36]	; 0x24
 8005c30:	4630      	mov	r0, r6
 8005c32:	f000 fb5d 	bl	80062f0 <_Bfree>
 8005c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c3a:	4615      	mov	r5, r2
 8005c3c:	1b1a      	subs	r2, r3, r4
 8005c3e:	d004      	beq.n	8005c4a <_dtoa_r+0x6b2>
 8005c40:	4629      	mov	r1, r5
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 fcca 	bl	80065dc <__pow5mult>
 8005c48:	4605      	mov	r5, r0
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f000 fc05 	bl	800645c <__i2b>
 8005c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	f340 8081 	ble.w	8005d5e <_dtoa_r+0x7c6>
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4601      	mov	r1, r0
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 fcbb 	bl	80065dc <__pow5mult>
 8005c66:	9b06      	ldr	r3, [sp, #24]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	dd7a      	ble.n	8005d64 <_dtoa_r+0x7cc>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9309      	str	r3, [sp, #36]	; 0x24
 8005c72:	6922      	ldr	r2, [r4, #16]
 8005c74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005c78:	6910      	ldr	r0, [r2, #16]
 8005c7a:	f000 fba1 	bl	80063c0 <__hi0bits>
 8005c7e:	f1c0 0020 	rsb	r0, r0, #32
 8005c82:	9b05      	ldr	r3, [sp, #20]
 8005c84:	4418      	add	r0, r3
 8005c86:	f010 001f 	ands.w	r0, r0, #31
 8005c8a:	f000 8093 	beq.w	8005db4 <_dtoa_r+0x81c>
 8005c8e:	f1c0 0220 	rsb	r2, r0, #32
 8005c92:	2a04      	cmp	r2, #4
 8005c94:	f340 8085 	ble.w	8005da2 <_dtoa_r+0x80a>
 8005c98:	9b04      	ldr	r3, [sp, #16]
 8005c9a:	f1c0 001c 	rsb	r0, r0, #28
 8005c9e:	4403      	add	r3, r0
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	9b05      	ldr	r3, [sp, #20]
 8005ca4:	4480      	add	r8, r0
 8005ca6:	4403      	add	r3, r0
 8005ca8:	9305      	str	r3, [sp, #20]
 8005caa:	9b04      	ldr	r3, [sp, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	dd05      	ble.n	8005cbc <_dtoa_r+0x724>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f000 fceb 	bl	8006690 <__lshift>
 8005cba:	4605      	mov	r5, r0
 8005cbc:	9b05      	ldr	r3, [sp, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dd05      	ble.n	8005cce <_dtoa_r+0x736>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f000 fce2 	bl	8006690 <__lshift>
 8005ccc:	4604      	mov	r4, r0
 8005cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d071      	beq.n	8005db8 <_dtoa_r+0x820>
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f000 fd46 	bl	8006768 <__mcmp>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	da6b      	bge.n	8005db8 <_dtoa_r+0x820>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	220a      	movs	r2, #10
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f000 fb24 	bl	8006334 <__multadd>
 8005cec:	9b07      	ldr	r3, [sp, #28]
 8005cee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8197 	beq.w	8006028 <_dtoa_r+0xa90>
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	220a      	movs	r2, #10
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 fb17 	bl	8006334 <__multadd>
 8005d06:	f1ba 0f00 	cmp.w	sl, #0
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	f300 8093 	bgt.w	8005e36 <_dtoa_r+0x89e>
 8005d10:	9b06      	ldr	r3, [sp, #24]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	dc57      	bgt.n	8005dc6 <_dtoa_r+0x82e>
 8005d16:	e08e      	b.n	8005e36 <_dtoa_r+0x89e>
 8005d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d1e:	e751      	b.n	8005bc4 <_dtoa_r+0x62c>
 8005d20:	f109 34ff 	add.w	r4, r9, #4294967295
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	bfbf      	itttt	lt
 8005d28:	1ae2      	sublt	r2, r4, r3
 8005d2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d2c:	189b      	addlt	r3, r3, r2
 8005d2e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005d30:	bfae      	itee	ge
 8005d32:	1b1c      	subge	r4, r3, r4
 8005d34:	4623      	movlt	r3, r4
 8005d36:	2400      	movlt	r4, #0
 8005d38:	f1b9 0f00 	cmp.w	r9, #0
 8005d3c:	bfb5      	itete	lt
 8005d3e:	9a04      	ldrlt	r2, [sp, #16]
 8005d40:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005d44:	eba2 0809 	sublt.w	r8, r2, r9
 8005d48:	464a      	movge	r2, r9
 8005d4a:	bfb8      	it	lt
 8005d4c:	2200      	movlt	r2, #0
 8005d4e:	e73c      	b.n	8005bca <_dtoa_r+0x632>
 8005d50:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005d54:	9f07      	ldr	r7, [sp, #28]
 8005d56:	461c      	mov	r4, r3
 8005d58:	e744      	b.n	8005be4 <_dtoa_r+0x64c>
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	e770      	b.n	8005c40 <_dtoa_r+0x6a8>
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	dc18      	bgt.n	8005d96 <_dtoa_r+0x7fe>
 8005d64:	9b02      	ldr	r3, [sp, #8]
 8005d66:	b9b3      	cbnz	r3, 8005d96 <_dtoa_r+0x7fe>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005d6e:	b9a2      	cbnz	r2, 8005d9a <_dtoa_r+0x802>
 8005d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d74:	0d12      	lsrs	r2, r2, #20
 8005d76:	0512      	lsls	r2, r2, #20
 8005d78:	b18a      	cbz	r2, 8005d9e <_dtoa_r+0x806>
 8005d7a:	9b04      	ldr	r3, [sp, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	9b05      	ldr	r3, [sp, #20]
 8005d82:	3301      	adds	r3, #1
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	2301      	movs	r3, #1
 8005d88:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f47f af70 	bne.w	8005c72 <_dtoa_r+0x6da>
 8005d92:	2001      	movs	r0, #1
 8005d94:	e775      	b.n	8005c82 <_dtoa_r+0x6ea>
 8005d96:	2300      	movs	r3, #0
 8005d98:	e7f6      	b.n	8005d88 <_dtoa_r+0x7f0>
 8005d9a:	9b02      	ldr	r3, [sp, #8]
 8005d9c:	e7f4      	b.n	8005d88 <_dtoa_r+0x7f0>
 8005d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005da0:	e7f3      	b.n	8005d8a <_dtoa_r+0x7f2>
 8005da2:	d082      	beq.n	8005caa <_dtoa_r+0x712>
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	321c      	adds	r2, #28
 8005da8:	4413      	add	r3, r2
 8005daa:	9304      	str	r3, [sp, #16]
 8005dac:	9b05      	ldr	r3, [sp, #20]
 8005dae:	4490      	add	r8, r2
 8005db0:	4413      	add	r3, r2
 8005db2:	e779      	b.n	8005ca8 <_dtoa_r+0x710>
 8005db4:	4602      	mov	r2, r0
 8005db6:	e7f5      	b.n	8005da4 <_dtoa_r+0x80c>
 8005db8:	f1b9 0f00 	cmp.w	r9, #0
 8005dbc:	dc36      	bgt.n	8005e2c <_dtoa_r+0x894>
 8005dbe:	9b06      	ldr	r3, [sp, #24]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	dd33      	ble.n	8005e2c <_dtoa_r+0x894>
 8005dc4:	46ca      	mov	sl, r9
 8005dc6:	f1ba 0f00 	cmp.w	sl, #0
 8005dca:	d10d      	bne.n	8005de8 <_dtoa_r+0x850>
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4653      	mov	r3, sl
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f000 faae 	bl	8006334 <__multadd>
 8005dd8:	4601      	mov	r1, r0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 fcc3 	bl	8006768 <__mcmp>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f73f ade4 	bgt.w	80059b0 <_dtoa_r+0x418>
 8005de8:	9b08      	ldr	r3, [sp, #32]
 8005dea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005dee:	ea6f 0b03 	mvn.w	fp, r3
 8005df2:	f04f 0900 	mov.w	r9, #0
 8005df6:	4621      	mov	r1, r4
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 fa79 	bl	80062f0 <_Bfree>
 8005dfe:	2f00      	cmp	r7, #0
 8005e00:	f43f aea1 	beq.w	8005b46 <_dtoa_r+0x5ae>
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	d005      	beq.n	8005e16 <_dtoa_r+0x87e>
 8005e0a:	45b9      	cmp	r9, r7
 8005e0c:	d003      	beq.n	8005e16 <_dtoa_r+0x87e>
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 fa6d 	bl	80062f0 <_Bfree>
 8005e16:	4639      	mov	r1, r7
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 fa69 	bl	80062f0 <_Bfree>
 8005e1e:	e692      	b.n	8005b46 <_dtoa_r+0x5ae>
 8005e20:	2400      	movs	r4, #0
 8005e22:	4627      	mov	r7, r4
 8005e24:	e7e0      	b.n	8005de8 <_dtoa_r+0x850>
 8005e26:	4693      	mov	fp, r2
 8005e28:	4627      	mov	r7, r4
 8005e2a:	e5c1      	b.n	80059b0 <_dtoa_r+0x418>
 8005e2c:	9b07      	ldr	r3, [sp, #28]
 8005e2e:	46ca      	mov	sl, r9
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8100 	beq.w	8006036 <_dtoa_r+0xa9e>
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	dd05      	ble.n	8005e48 <_dtoa_r+0x8b0>
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	4642      	mov	r2, r8
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 fc25 	bl	8006690 <__lshift>
 8005e46:	4607      	mov	r7, r0
 8005e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d05d      	beq.n	8005f0a <_dtoa_r+0x972>
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4630      	mov	r0, r6
 8005e52:	f000 fa0d 	bl	8006270 <_Balloc>
 8005e56:	4680      	mov	r8, r0
 8005e58:	b928      	cbnz	r0, 8005e66 <_dtoa_r+0x8ce>
 8005e5a:	4b82      	ldr	r3, [pc, #520]	; (8006064 <_dtoa_r+0xacc>)
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005e62:	f7ff bbb1 	b.w	80055c8 <_dtoa_r+0x30>
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	3202      	adds	r2, #2
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	f107 010c 	add.w	r1, r7, #12
 8005e70:	300c      	adds	r0, #12
 8005e72:	f000 fe37 	bl	8006ae4 <memcpy>
 8005e76:	2201      	movs	r2, #1
 8005e78:	4641      	mov	r1, r8
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 fc08 	bl	8006690 <__lshift>
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	3301      	adds	r3, #1
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	4453      	add	r3, sl
 8005e8a:	9308      	str	r3, [sp, #32]
 8005e8c:	9b02      	ldr	r3, [sp, #8]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	46b9      	mov	r9, r7
 8005e94:	9307      	str	r3, [sp, #28]
 8005e96:	4607      	mov	r7, r0
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	9302      	str	r3, [sp, #8]
 8005ea2:	f7ff faf0 	bl	8005486 <quorem>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	3330      	adds	r3, #48	; 0x30
 8005eaa:	9005      	str	r0, [sp, #20]
 8005eac:	4649      	mov	r1, r9
 8005eae:	4628      	mov	r0, r5
 8005eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb2:	f000 fc59 	bl	8006768 <__mcmp>
 8005eb6:	463a      	mov	r2, r7
 8005eb8:	4682      	mov	sl, r0
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f000 fc6f 	bl	80067a0 <__mdiff>
 8005ec2:	68c2      	ldr	r2, [r0, #12]
 8005ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	bb0a      	cbnz	r2, 8005f0e <_dtoa_r+0x976>
 8005eca:	4601      	mov	r1, r0
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 fc4b 	bl	8006768 <__mcmp>
 8005ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	4630      	mov	r0, r6
 8005eda:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005ede:	f000 fa07 	bl	80062f0 <_Bfree>
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ee6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005eea:	ea43 0102 	orr.w	r1, r3, r2
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	4319      	orrs	r1, r3
 8005ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef4:	d10d      	bne.n	8005f12 <_dtoa_r+0x97a>
 8005ef6:	2b39      	cmp	r3, #57	; 0x39
 8005ef8:	d029      	beq.n	8005f4e <_dtoa_r+0x9b6>
 8005efa:	f1ba 0f00 	cmp.w	sl, #0
 8005efe:	dd01      	ble.n	8005f04 <_dtoa_r+0x96c>
 8005f00:	9b05      	ldr	r3, [sp, #20]
 8005f02:	3331      	adds	r3, #49	; 0x31
 8005f04:	9a02      	ldr	r2, [sp, #8]
 8005f06:	7013      	strb	r3, [r2, #0]
 8005f08:	e775      	b.n	8005df6 <_dtoa_r+0x85e>
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	e7b8      	b.n	8005e80 <_dtoa_r+0x8e8>
 8005f0e:	2201      	movs	r2, #1
 8005f10:	e7e1      	b.n	8005ed6 <_dtoa_r+0x93e>
 8005f12:	f1ba 0f00 	cmp.w	sl, #0
 8005f16:	db06      	blt.n	8005f26 <_dtoa_r+0x98e>
 8005f18:	9906      	ldr	r1, [sp, #24]
 8005f1a:	ea41 0a0a 	orr.w	sl, r1, sl
 8005f1e:	9907      	ldr	r1, [sp, #28]
 8005f20:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005f24:	d120      	bne.n	8005f68 <_dtoa_r+0x9d0>
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	ddec      	ble.n	8005f04 <_dtoa_r+0x96c>
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	4630      	mov	r0, r6
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	f000 fbad 	bl	8006690 <__lshift>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4605      	mov	r5, r0
 8005f3a:	f000 fc15 	bl	8006768 <__mcmp>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	dc02      	bgt.n	8005f4a <_dtoa_r+0x9b2>
 8005f44:	d1de      	bne.n	8005f04 <_dtoa_r+0x96c>
 8005f46:	07da      	lsls	r2, r3, #31
 8005f48:	d5dc      	bpl.n	8005f04 <_dtoa_r+0x96c>
 8005f4a:	2b39      	cmp	r3, #57	; 0x39
 8005f4c:	d1d8      	bne.n	8005f00 <_dtoa_r+0x968>
 8005f4e:	9a02      	ldr	r2, [sp, #8]
 8005f50:	2339      	movs	r3, #57	; 0x39
 8005f52:	7013      	strb	r3, [r2, #0]
 8005f54:	4643      	mov	r3, r8
 8005f56:	4698      	mov	r8, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005f5e:	2a39      	cmp	r2, #57	; 0x39
 8005f60:	d051      	beq.n	8006006 <_dtoa_r+0xa6e>
 8005f62:	3201      	adds	r2, #1
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	e746      	b.n	8005df6 <_dtoa_r+0x85e>
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	dd03      	ble.n	8005f74 <_dtoa_r+0x9dc>
 8005f6c:	2b39      	cmp	r3, #57	; 0x39
 8005f6e:	d0ee      	beq.n	8005f4e <_dtoa_r+0x9b6>
 8005f70:	3301      	adds	r3, #1
 8005f72:	e7c7      	b.n	8005f04 <_dtoa_r+0x96c>
 8005f74:	9a04      	ldr	r2, [sp, #16]
 8005f76:	9908      	ldr	r1, [sp, #32]
 8005f78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f7c:	428a      	cmp	r2, r1
 8005f7e:	d02b      	beq.n	8005fd8 <_dtoa_r+0xa40>
 8005f80:	4629      	mov	r1, r5
 8005f82:	2300      	movs	r3, #0
 8005f84:	220a      	movs	r2, #10
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 f9d4 	bl	8006334 <__multadd>
 8005f8c:	45b9      	cmp	r9, r7
 8005f8e:	4605      	mov	r5, r0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	f04f 020a 	mov.w	r2, #10
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	d107      	bne.n	8005fae <_dtoa_r+0xa16>
 8005f9e:	f000 f9c9 	bl	8006334 <__multadd>
 8005fa2:	4681      	mov	r9, r0
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	9b04      	ldr	r3, [sp, #16]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	e774      	b.n	8005e98 <_dtoa_r+0x900>
 8005fae:	f000 f9c1 	bl	8006334 <__multadd>
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	4681      	mov	r9, r0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	220a      	movs	r2, #10
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f000 f9ba 	bl	8006334 <__multadd>
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	e7f0      	b.n	8005fa6 <_dtoa_r+0xa0e>
 8005fc4:	f1ba 0f00 	cmp.w	sl, #0
 8005fc8:	9a01      	ldr	r2, [sp, #4]
 8005fca:	bfcc      	ite	gt
 8005fcc:	46d0      	movgt	r8, sl
 8005fce:	f04f 0801 	movle.w	r8, #1
 8005fd2:	4490      	add	r8, r2
 8005fd4:	f04f 0900 	mov.w	r9, #0
 8005fd8:	4629      	mov	r1, r5
 8005fda:	2201      	movs	r2, #1
 8005fdc:	4630      	mov	r0, r6
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	f000 fb56 	bl	8006690 <__lshift>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	f000 fbbe 	bl	8006768 <__mcmp>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	dcb1      	bgt.n	8005f54 <_dtoa_r+0x9bc>
 8005ff0:	d102      	bne.n	8005ff8 <_dtoa_r+0xa60>
 8005ff2:	9b02      	ldr	r3, [sp, #8]
 8005ff4:	07db      	lsls	r3, r3, #31
 8005ff6:	d4ad      	bmi.n	8005f54 <_dtoa_r+0x9bc>
 8005ff8:	4643      	mov	r3, r8
 8005ffa:	4698      	mov	r8, r3
 8005ffc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006000:	2a30      	cmp	r2, #48	; 0x30
 8006002:	d0fa      	beq.n	8005ffa <_dtoa_r+0xa62>
 8006004:	e6f7      	b.n	8005df6 <_dtoa_r+0x85e>
 8006006:	9a01      	ldr	r2, [sp, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d1a4      	bne.n	8005f56 <_dtoa_r+0x9be>
 800600c:	f10b 0b01 	add.w	fp, fp, #1
 8006010:	2331      	movs	r3, #49	; 0x31
 8006012:	e778      	b.n	8005f06 <_dtoa_r+0x96e>
 8006014:	4b14      	ldr	r3, [pc, #80]	; (8006068 <_dtoa_r+0xad0>)
 8006016:	f7ff bb2a 	b.w	800566e <_dtoa_r+0xd6>
 800601a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800601c:	2b00      	cmp	r3, #0
 800601e:	f47f ab05 	bne.w	800562c <_dtoa_r+0x94>
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <_dtoa_r+0xad4>)
 8006024:	f7ff bb23 	b.w	800566e <_dtoa_r+0xd6>
 8006028:	f1ba 0f00 	cmp.w	sl, #0
 800602c:	dc03      	bgt.n	8006036 <_dtoa_r+0xa9e>
 800602e:	9b06      	ldr	r3, [sp, #24]
 8006030:	2b02      	cmp	r3, #2
 8006032:	f73f aec8 	bgt.w	8005dc6 <_dtoa_r+0x82e>
 8006036:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800603a:	4621      	mov	r1, r4
 800603c:	4628      	mov	r0, r5
 800603e:	f7ff fa22 	bl	8005486 <quorem>
 8006042:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006046:	f808 3b01 	strb.w	r3, [r8], #1
 800604a:	9a01      	ldr	r2, [sp, #4]
 800604c:	eba8 0202 	sub.w	r2, r8, r2
 8006050:	4592      	cmp	sl, r2
 8006052:	ddb7      	ble.n	8005fc4 <_dtoa_r+0xa2c>
 8006054:	4629      	mov	r1, r5
 8006056:	2300      	movs	r3, #0
 8006058:	220a      	movs	r2, #10
 800605a:	4630      	mov	r0, r6
 800605c:	f000 f96a 	bl	8006334 <__multadd>
 8006060:	4605      	mov	r5, r0
 8006062:	e7ea      	b.n	800603a <_dtoa_r+0xaa2>
 8006064:	08007200 	.word	0x08007200
 8006068:	08007160 	.word	0x08007160
 800606c:	08007184 	.word	0x08007184

08006070 <_free_r>:
 8006070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006072:	2900      	cmp	r1, #0
 8006074:	d044      	beq.n	8006100 <_free_r+0x90>
 8006076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f1a1 0404 	sub.w	r4, r1, #4
 8006082:	bfb8      	it	lt
 8006084:	18e4      	addlt	r4, r4, r3
 8006086:	f000 f8e7 	bl	8006258 <__malloc_lock>
 800608a:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <_free_r+0x94>)
 800608c:	9801      	ldr	r0, [sp, #4]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x30>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	b003      	add	sp, #12
 8006098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800609c:	f000 b8e2 	b.w	8006264 <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x46>
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	1961      	adds	r1, r4, r5
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1949      	addeq	r1, r1, r5
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x22>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x50>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x46>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1855      	adds	r5, r2, r1
 80060c4:	42a5      	cmp	r5, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x70>
 80060c8:	6824      	ldr	r4, [r4, #0]
 80060ca:	4421      	add	r1, r4
 80060cc:	1854      	adds	r4, r2, r1
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x26>
 80060d4:	681c      	ldr	r4, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	440c      	add	r4, r1
 80060dc:	6014      	str	r4, [r2, #0]
 80060de:	e7da      	b.n	8006096 <_free_r+0x26>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x78>
 80060e2:	230c      	movs	r3, #12
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x26>
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	1961      	adds	r1, r4, r5
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf04      	itt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	bf04      	itt	eq
 80060f8:	1949      	addeq	r1, r1, r5
 80060fa:	6021      	streq	r1, [r4, #0]
 80060fc:	6054      	str	r4, [r2, #4]
 80060fe:	e7ca      	b.n	8006096 <_free_r+0x26>
 8006100:	b003      	add	sp, #12
 8006102:	bd30      	pop	{r4, r5, pc}
 8006104:	20000ba0 	.word	0x20000ba0

08006108 <malloc>:
 8006108:	4b02      	ldr	r3, [pc, #8]	; (8006114 <malloc+0xc>)
 800610a:	4601      	mov	r1, r0
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f000 b823 	b.w	8006158 <_malloc_r>
 8006112:	bf00      	nop
 8006114:	20000064 	.word	0x20000064

08006118 <sbrk_aligned>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4e0e      	ldr	r6, [pc, #56]	; (8006154 <sbrk_aligned+0x3c>)
 800611c:	460c      	mov	r4, r1
 800611e:	6831      	ldr	r1, [r6, #0]
 8006120:	4605      	mov	r5, r0
 8006122:	b911      	cbnz	r1, 800612a <sbrk_aligned+0x12>
 8006124:	f000 fcce 	bl	8006ac4 <_sbrk_r>
 8006128:	6030      	str	r0, [r6, #0]
 800612a:	4621      	mov	r1, r4
 800612c:	4628      	mov	r0, r5
 800612e:	f000 fcc9 	bl	8006ac4 <_sbrk_r>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d00a      	beq.n	800614c <sbrk_aligned+0x34>
 8006136:	1cc4      	adds	r4, r0, #3
 8006138:	f024 0403 	bic.w	r4, r4, #3
 800613c:	42a0      	cmp	r0, r4
 800613e:	d007      	beq.n	8006150 <sbrk_aligned+0x38>
 8006140:	1a21      	subs	r1, r4, r0
 8006142:	4628      	mov	r0, r5
 8006144:	f000 fcbe 	bl	8006ac4 <_sbrk_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d101      	bne.n	8006150 <sbrk_aligned+0x38>
 800614c:	f04f 34ff 	mov.w	r4, #4294967295
 8006150:	4620      	mov	r0, r4
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	20000ba4 	.word	0x20000ba4

08006158 <_malloc_r>:
 8006158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800615c:	1ccd      	adds	r5, r1, #3
 800615e:	f025 0503 	bic.w	r5, r5, #3
 8006162:	3508      	adds	r5, #8
 8006164:	2d0c      	cmp	r5, #12
 8006166:	bf38      	it	cc
 8006168:	250c      	movcc	r5, #12
 800616a:	2d00      	cmp	r5, #0
 800616c:	4607      	mov	r7, r0
 800616e:	db01      	blt.n	8006174 <_malloc_r+0x1c>
 8006170:	42a9      	cmp	r1, r5
 8006172:	d905      	bls.n	8006180 <_malloc_r+0x28>
 8006174:	230c      	movs	r3, #12
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	2600      	movs	r6, #0
 800617a:	4630      	mov	r0, r6
 800617c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006254 <_malloc_r+0xfc>
 8006184:	f000 f868 	bl	8006258 <__malloc_lock>
 8006188:	f8d8 3000 	ldr.w	r3, [r8]
 800618c:	461c      	mov	r4, r3
 800618e:	bb5c      	cbnz	r4, 80061e8 <_malloc_r+0x90>
 8006190:	4629      	mov	r1, r5
 8006192:	4638      	mov	r0, r7
 8006194:	f7ff ffc0 	bl	8006118 <sbrk_aligned>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	4604      	mov	r4, r0
 800619c:	d155      	bne.n	800624a <_malloc_r+0xf2>
 800619e:	f8d8 4000 	ldr.w	r4, [r8]
 80061a2:	4626      	mov	r6, r4
 80061a4:	2e00      	cmp	r6, #0
 80061a6:	d145      	bne.n	8006234 <_malloc_r+0xdc>
 80061a8:	2c00      	cmp	r4, #0
 80061aa:	d048      	beq.n	800623e <_malloc_r+0xe6>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	4631      	mov	r1, r6
 80061b0:	4638      	mov	r0, r7
 80061b2:	eb04 0903 	add.w	r9, r4, r3
 80061b6:	f000 fc85 	bl	8006ac4 <_sbrk_r>
 80061ba:	4581      	cmp	r9, r0
 80061bc:	d13f      	bne.n	800623e <_malloc_r+0xe6>
 80061be:	6821      	ldr	r1, [r4, #0]
 80061c0:	1a6d      	subs	r5, r5, r1
 80061c2:	4629      	mov	r1, r5
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ffa7 	bl	8006118 <sbrk_aligned>
 80061ca:	3001      	adds	r0, #1
 80061cc:	d037      	beq.n	800623e <_malloc_r+0xe6>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	442b      	add	r3, r5
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	f8d8 3000 	ldr.w	r3, [r8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d038      	beq.n	800624e <_malloc_r+0xf6>
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	42a2      	cmp	r2, r4
 80061e0:	d12b      	bne.n	800623a <_malloc_r+0xe2>
 80061e2:	2200      	movs	r2, #0
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	e00f      	b.n	8006208 <_malloc_r+0xb0>
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	1b52      	subs	r2, r2, r5
 80061ec:	d41f      	bmi.n	800622e <_malloc_r+0xd6>
 80061ee:	2a0b      	cmp	r2, #11
 80061f0:	d917      	bls.n	8006222 <_malloc_r+0xca>
 80061f2:	1961      	adds	r1, r4, r5
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	6025      	str	r5, [r4, #0]
 80061f8:	bf18      	it	ne
 80061fa:	6059      	strne	r1, [r3, #4]
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	bf08      	it	eq
 8006200:	f8c8 1000 	streq.w	r1, [r8]
 8006204:	5162      	str	r2, [r4, r5]
 8006206:	604b      	str	r3, [r1, #4]
 8006208:	4638      	mov	r0, r7
 800620a:	f104 060b 	add.w	r6, r4, #11
 800620e:	f000 f829 	bl	8006264 <__malloc_unlock>
 8006212:	f026 0607 	bic.w	r6, r6, #7
 8006216:	1d23      	adds	r3, r4, #4
 8006218:	1af2      	subs	r2, r6, r3
 800621a:	d0ae      	beq.n	800617a <_malloc_r+0x22>
 800621c:	1b9b      	subs	r3, r3, r6
 800621e:	50a3      	str	r3, [r4, r2]
 8006220:	e7ab      	b.n	800617a <_malloc_r+0x22>
 8006222:	42a3      	cmp	r3, r4
 8006224:	6862      	ldr	r2, [r4, #4]
 8006226:	d1dd      	bne.n	80061e4 <_malloc_r+0x8c>
 8006228:	f8c8 2000 	str.w	r2, [r8]
 800622c:	e7ec      	b.n	8006208 <_malloc_r+0xb0>
 800622e:	4623      	mov	r3, r4
 8006230:	6864      	ldr	r4, [r4, #4]
 8006232:	e7ac      	b.n	800618e <_malloc_r+0x36>
 8006234:	4634      	mov	r4, r6
 8006236:	6876      	ldr	r6, [r6, #4]
 8006238:	e7b4      	b.n	80061a4 <_malloc_r+0x4c>
 800623a:	4613      	mov	r3, r2
 800623c:	e7cc      	b.n	80061d8 <_malloc_r+0x80>
 800623e:	230c      	movs	r3, #12
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4638      	mov	r0, r7
 8006244:	f000 f80e 	bl	8006264 <__malloc_unlock>
 8006248:	e797      	b.n	800617a <_malloc_r+0x22>
 800624a:	6025      	str	r5, [r4, #0]
 800624c:	e7dc      	b.n	8006208 <_malloc_r+0xb0>
 800624e:	605b      	str	r3, [r3, #4]
 8006250:	deff      	udf	#255	; 0xff
 8006252:	bf00      	nop
 8006254:	20000ba0 	.word	0x20000ba0

08006258 <__malloc_lock>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__malloc_lock+0x8>)
 800625a:	f7ff b912 	b.w	8005482 <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20000b9c 	.word	0x20000b9c

08006264 <__malloc_unlock>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__malloc_unlock+0x8>)
 8006266:	f7ff b90d 	b.w	8005484 <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20000b9c 	.word	0x20000b9c

08006270 <_Balloc>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	69c6      	ldr	r6, [r0, #28]
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	b976      	cbnz	r6, 8006298 <_Balloc+0x28>
 800627a:	2010      	movs	r0, #16
 800627c:	f7ff ff44 	bl	8006108 <malloc>
 8006280:	4602      	mov	r2, r0
 8006282:	61e0      	str	r0, [r4, #28]
 8006284:	b920      	cbnz	r0, 8006290 <_Balloc+0x20>
 8006286:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <_Balloc+0x78>)
 8006288:	4818      	ldr	r0, [pc, #96]	; (80062ec <_Balloc+0x7c>)
 800628a:	216b      	movs	r1, #107	; 0x6b
 800628c:	f000 fc38 	bl	8006b00 <__assert_func>
 8006290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006294:	6006      	str	r6, [r0, #0]
 8006296:	60c6      	str	r6, [r0, #12]
 8006298:	69e6      	ldr	r6, [r4, #28]
 800629a:	68f3      	ldr	r3, [r6, #12]
 800629c:	b183      	cbz	r3, 80062c0 <_Balloc+0x50>
 800629e:	69e3      	ldr	r3, [r4, #28]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062a6:	b9b8      	cbnz	r0, 80062d8 <_Balloc+0x68>
 80062a8:	2101      	movs	r1, #1
 80062aa:	fa01 f605 	lsl.w	r6, r1, r5
 80062ae:	1d72      	adds	r2, r6, #5
 80062b0:	0092      	lsls	r2, r2, #2
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fc42 	bl	8006b3c <_calloc_r>
 80062b8:	b160      	cbz	r0, 80062d4 <_Balloc+0x64>
 80062ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062be:	e00e      	b.n	80062de <_Balloc+0x6e>
 80062c0:	2221      	movs	r2, #33	; 0x21
 80062c2:	2104      	movs	r1, #4
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 fc39 	bl	8006b3c <_calloc_r>
 80062ca:	69e3      	ldr	r3, [r4, #28]
 80062cc:	60f0      	str	r0, [r6, #12]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e4      	bne.n	800629e <_Balloc+0x2e>
 80062d4:	2000      	movs	r0, #0
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	6802      	ldr	r2, [r0, #0]
 80062da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062de:	2300      	movs	r3, #0
 80062e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062e4:	e7f7      	b.n	80062d6 <_Balloc+0x66>
 80062e6:	bf00      	nop
 80062e8:	08007191 	.word	0x08007191
 80062ec:	08007211 	.word	0x08007211

080062f0 <_Bfree>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	69c6      	ldr	r6, [r0, #28]
 80062f4:	4605      	mov	r5, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b976      	cbnz	r6, 8006318 <_Bfree+0x28>
 80062fa:	2010      	movs	r0, #16
 80062fc:	f7ff ff04 	bl	8006108 <malloc>
 8006300:	4602      	mov	r2, r0
 8006302:	61e8      	str	r0, [r5, #28]
 8006304:	b920      	cbnz	r0, 8006310 <_Bfree+0x20>
 8006306:	4b09      	ldr	r3, [pc, #36]	; (800632c <_Bfree+0x3c>)
 8006308:	4809      	ldr	r0, [pc, #36]	; (8006330 <_Bfree+0x40>)
 800630a:	218f      	movs	r1, #143	; 0x8f
 800630c:	f000 fbf8 	bl	8006b00 <__assert_func>
 8006310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006314:	6006      	str	r6, [r0, #0]
 8006316:	60c6      	str	r6, [r0, #12]
 8006318:	b13c      	cbz	r4, 800632a <_Bfree+0x3a>
 800631a:	69eb      	ldr	r3, [r5, #28]
 800631c:	6862      	ldr	r2, [r4, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006324:	6021      	str	r1, [r4, #0]
 8006326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	08007191 	.word	0x08007191
 8006330:	08007211 	.word	0x08007211

08006334 <__multadd>:
 8006334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006338:	690d      	ldr	r5, [r1, #16]
 800633a:	4607      	mov	r7, r0
 800633c:	460c      	mov	r4, r1
 800633e:	461e      	mov	r6, r3
 8006340:	f101 0c14 	add.w	ip, r1, #20
 8006344:	2000      	movs	r0, #0
 8006346:	f8dc 3000 	ldr.w	r3, [ip]
 800634a:	b299      	uxth	r1, r3
 800634c:	fb02 6101 	mla	r1, r2, r1, r6
 8006350:	0c1e      	lsrs	r6, r3, #16
 8006352:	0c0b      	lsrs	r3, r1, #16
 8006354:	fb02 3306 	mla	r3, r2, r6, r3
 8006358:	b289      	uxth	r1, r1
 800635a:	3001      	adds	r0, #1
 800635c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006360:	4285      	cmp	r5, r0
 8006362:	f84c 1b04 	str.w	r1, [ip], #4
 8006366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800636a:	dcec      	bgt.n	8006346 <__multadd+0x12>
 800636c:	b30e      	cbz	r6, 80063b2 <__multadd+0x7e>
 800636e:	68a3      	ldr	r3, [r4, #8]
 8006370:	42ab      	cmp	r3, r5
 8006372:	dc19      	bgt.n	80063a8 <__multadd+0x74>
 8006374:	6861      	ldr	r1, [r4, #4]
 8006376:	4638      	mov	r0, r7
 8006378:	3101      	adds	r1, #1
 800637a:	f7ff ff79 	bl	8006270 <_Balloc>
 800637e:	4680      	mov	r8, r0
 8006380:	b928      	cbnz	r0, 800638e <__multadd+0x5a>
 8006382:	4602      	mov	r2, r0
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <__multadd+0x84>)
 8006386:	480d      	ldr	r0, [pc, #52]	; (80063bc <__multadd+0x88>)
 8006388:	21ba      	movs	r1, #186	; 0xba
 800638a:	f000 fbb9 	bl	8006b00 <__assert_func>
 800638e:	6922      	ldr	r2, [r4, #16]
 8006390:	3202      	adds	r2, #2
 8006392:	f104 010c 	add.w	r1, r4, #12
 8006396:	0092      	lsls	r2, r2, #2
 8006398:	300c      	adds	r0, #12
 800639a:	f000 fba3 	bl	8006ae4 <memcpy>
 800639e:	4621      	mov	r1, r4
 80063a0:	4638      	mov	r0, r7
 80063a2:	f7ff ffa5 	bl	80062f0 <_Bfree>
 80063a6:	4644      	mov	r4, r8
 80063a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063ac:	3501      	adds	r5, #1
 80063ae:	615e      	str	r6, [r3, #20]
 80063b0:	6125      	str	r5, [r4, #16]
 80063b2:	4620      	mov	r0, r4
 80063b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b8:	08007200 	.word	0x08007200
 80063bc:	08007211 	.word	0x08007211

080063c0 <__hi0bits>:
 80063c0:	0c03      	lsrs	r3, r0, #16
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	b9d3      	cbnz	r3, 80063fc <__hi0bits+0x3c>
 80063c6:	0400      	lsls	r0, r0, #16
 80063c8:	2310      	movs	r3, #16
 80063ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063ce:	bf04      	itt	eq
 80063d0:	0200      	lsleq	r0, r0, #8
 80063d2:	3308      	addeq	r3, #8
 80063d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063d8:	bf04      	itt	eq
 80063da:	0100      	lsleq	r0, r0, #4
 80063dc:	3304      	addeq	r3, #4
 80063de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063e2:	bf04      	itt	eq
 80063e4:	0080      	lsleq	r0, r0, #2
 80063e6:	3302      	addeq	r3, #2
 80063e8:	2800      	cmp	r0, #0
 80063ea:	db05      	blt.n	80063f8 <__hi0bits+0x38>
 80063ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063f0:	f103 0301 	add.w	r3, r3, #1
 80063f4:	bf08      	it	eq
 80063f6:	2320      	moveq	r3, #32
 80063f8:	4618      	mov	r0, r3
 80063fa:	4770      	bx	lr
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7e4      	b.n	80063ca <__hi0bits+0xa>

08006400 <__lo0bits>:
 8006400:	6803      	ldr	r3, [r0, #0]
 8006402:	f013 0207 	ands.w	r2, r3, #7
 8006406:	d00c      	beq.n	8006422 <__lo0bits+0x22>
 8006408:	07d9      	lsls	r1, r3, #31
 800640a:	d422      	bmi.n	8006452 <__lo0bits+0x52>
 800640c:	079a      	lsls	r2, r3, #30
 800640e:	bf49      	itett	mi
 8006410:	085b      	lsrmi	r3, r3, #1
 8006412:	089b      	lsrpl	r3, r3, #2
 8006414:	6003      	strmi	r3, [r0, #0]
 8006416:	2201      	movmi	r2, #1
 8006418:	bf5c      	itt	pl
 800641a:	6003      	strpl	r3, [r0, #0]
 800641c:	2202      	movpl	r2, #2
 800641e:	4610      	mov	r0, r2
 8006420:	4770      	bx	lr
 8006422:	b299      	uxth	r1, r3
 8006424:	b909      	cbnz	r1, 800642a <__lo0bits+0x2a>
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	2210      	movs	r2, #16
 800642a:	b2d9      	uxtb	r1, r3
 800642c:	b909      	cbnz	r1, 8006432 <__lo0bits+0x32>
 800642e:	3208      	adds	r2, #8
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	0719      	lsls	r1, r3, #28
 8006434:	bf04      	itt	eq
 8006436:	091b      	lsreq	r3, r3, #4
 8006438:	3204      	addeq	r2, #4
 800643a:	0799      	lsls	r1, r3, #30
 800643c:	bf04      	itt	eq
 800643e:	089b      	lsreq	r3, r3, #2
 8006440:	3202      	addeq	r2, #2
 8006442:	07d9      	lsls	r1, r3, #31
 8006444:	d403      	bmi.n	800644e <__lo0bits+0x4e>
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	f102 0201 	add.w	r2, r2, #1
 800644c:	d003      	beq.n	8006456 <__lo0bits+0x56>
 800644e:	6003      	str	r3, [r0, #0]
 8006450:	e7e5      	b.n	800641e <__lo0bits+0x1e>
 8006452:	2200      	movs	r2, #0
 8006454:	e7e3      	b.n	800641e <__lo0bits+0x1e>
 8006456:	2220      	movs	r2, #32
 8006458:	e7e1      	b.n	800641e <__lo0bits+0x1e>
	...

0800645c <__i2b>:
 800645c:	b510      	push	{r4, lr}
 800645e:	460c      	mov	r4, r1
 8006460:	2101      	movs	r1, #1
 8006462:	f7ff ff05 	bl	8006270 <_Balloc>
 8006466:	4602      	mov	r2, r0
 8006468:	b928      	cbnz	r0, 8006476 <__i2b+0x1a>
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <__i2b+0x24>)
 800646c:	4805      	ldr	r0, [pc, #20]	; (8006484 <__i2b+0x28>)
 800646e:	f240 1145 	movw	r1, #325	; 0x145
 8006472:	f000 fb45 	bl	8006b00 <__assert_func>
 8006476:	2301      	movs	r3, #1
 8006478:	6144      	str	r4, [r0, #20]
 800647a:	6103      	str	r3, [r0, #16]
 800647c:	bd10      	pop	{r4, pc}
 800647e:	bf00      	nop
 8006480:	08007200 	.word	0x08007200
 8006484:	08007211 	.word	0x08007211

08006488 <__multiply>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	4691      	mov	r9, r2
 800648e:	690a      	ldr	r2, [r1, #16]
 8006490:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006494:	429a      	cmp	r2, r3
 8006496:	bfb8      	it	lt
 8006498:	460b      	movlt	r3, r1
 800649a:	460c      	mov	r4, r1
 800649c:	bfbc      	itt	lt
 800649e:	464c      	movlt	r4, r9
 80064a0:	4699      	movlt	r9, r3
 80064a2:	6927      	ldr	r7, [r4, #16]
 80064a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064a8:	68a3      	ldr	r3, [r4, #8]
 80064aa:	6861      	ldr	r1, [r4, #4]
 80064ac:	eb07 060a 	add.w	r6, r7, sl
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	b085      	sub	sp, #20
 80064b4:	bfb8      	it	lt
 80064b6:	3101      	addlt	r1, #1
 80064b8:	f7ff feda 	bl	8006270 <_Balloc>
 80064bc:	b930      	cbnz	r0, 80064cc <__multiply+0x44>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b44      	ldr	r3, [pc, #272]	; (80065d4 <__multiply+0x14c>)
 80064c2:	4845      	ldr	r0, [pc, #276]	; (80065d8 <__multiply+0x150>)
 80064c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80064c8:	f000 fb1a 	bl	8006b00 <__assert_func>
 80064cc:	f100 0514 	add.w	r5, r0, #20
 80064d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064d4:	462b      	mov	r3, r5
 80064d6:	2200      	movs	r2, #0
 80064d8:	4543      	cmp	r3, r8
 80064da:	d321      	bcc.n	8006520 <__multiply+0x98>
 80064dc:	f104 0314 	add.w	r3, r4, #20
 80064e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064e4:	f109 0314 	add.w	r3, r9, #20
 80064e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064ec:	9202      	str	r2, [sp, #8]
 80064ee:	1b3a      	subs	r2, r7, r4
 80064f0:	3a15      	subs	r2, #21
 80064f2:	f022 0203 	bic.w	r2, r2, #3
 80064f6:	3204      	adds	r2, #4
 80064f8:	f104 0115 	add.w	r1, r4, #21
 80064fc:	428f      	cmp	r7, r1
 80064fe:	bf38      	it	cc
 8006500:	2204      	movcc	r2, #4
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	9a02      	ldr	r2, [sp, #8]
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d80c      	bhi.n	8006526 <__multiply+0x9e>
 800650c:	2e00      	cmp	r6, #0
 800650e:	dd03      	ble.n	8006518 <__multiply+0x90>
 8006510:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006514:	2b00      	cmp	r3, #0
 8006516:	d05b      	beq.n	80065d0 <__multiply+0x148>
 8006518:	6106      	str	r6, [r0, #16]
 800651a:	b005      	add	sp, #20
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	f843 2b04 	str.w	r2, [r3], #4
 8006524:	e7d8      	b.n	80064d8 <__multiply+0x50>
 8006526:	f8b3 a000 	ldrh.w	sl, [r3]
 800652a:	f1ba 0f00 	cmp.w	sl, #0
 800652e:	d024      	beq.n	800657a <__multiply+0xf2>
 8006530:	f104 0e14 	add.w	lr, r4, #20
 8006534:	46a9      	mov	r9, r5
 8006536:	f04f 0c00 	mov.w	ip, #0
 800653a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800653e:	f8d9 1000 	ldr.w	r1, [r9]
 8006542:	fa1f fb82 	uxth.w	fp, r2
 8006546:	b289      	uxth	r1, r1
 8006548:	fb0a 110b 	mla	r1, sl, fp, r1
 800654c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006550:	f8d9 2000 	ldr.w	r2, [r9]
 8006554:	4461      	add	r1, ip
 8006556:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800655a:	fb0a c20b 	mla	r2, sl, fp, ip
 800655e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006562:	b289      	uxth	r1, r1
 8006564:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006568:	4577      	cmp	r7, lr
 800656a:	f849 1b04 	str.w	r1, [r9], #4
 800656e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006572:	d8e2      	bhi.n	800653a <__multiply+0xb2>
 8006574:	9a01      	ldr	r2, [sp, #4]
 8006576:	f845 c002 	str.w	ip, [r5, r2]
 800657a:	9a03      	ldr	r2, [sp, #12]
 800657c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006580:	3304      	adds	r3, #4
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	d021      	beq.n	80065cc <__multiply+0x144>
 8006588:	6829      	ldr	r1, [r5, #0]
 800658a:	f104 0c14 	add.w	ip, r4, #20
 800658e:	46ae      	mov	lr, r5
 8006590:	f04f 0a00 	mov.w	sl, #0
 8006594:	f8bc b000 	ldrh.w	fp, [ip]
 8006598:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800659c:	fb09 220b 	mla	r2, r9, fp, r2
 80065a0:	4452      	add	r2, sl
 80065a2:	b289      	uxth	r1, r1
 80065a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065a8:	f84e 1b04 	str.w	r1, [lr], #4
 80065ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80065b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065b4:	f8be 1000 	ldrh.w	r1, [lr]
 80065b8:	fb09 110a 	mla	r1, r9, sl, r1
 80065bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80065c0:	4567      	cmp	r7, ip
 80065c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065c6:	d8e5      	bhi.n	8006594 <__multiply+0x10c>
 80065c8:	9a01      	ldr	r2, [sp, #4]
 80065ca:	50a9      	str	r1, [r5, r2]
 80065cc:	3504      	adds	r5, #4
 80065ce:	e799      	b.n	8006504 <__multiply+0x7c>
 80065d0:	3e01      	subs	r6, #1
 80065d2:	e79b      	b.n	800650c <__multiply+0x84>
 80065d4:	08007200 	.word	0x08007200
 80065d8:	08007211 	.word	0x08007211

080065dc <__pow5mult>:
 80065dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e0:	4615      	mov	r5, r2
 80065e2:	f012 0203 	ands.w	r2, r2, #3
 80065e6:	4606      	mov	r6, r0
 80065e8:	460f      	mov	r7, r1
 80065ea:	d007      	beq.n	80065fc <__pow5mult+0x20>
 80065ec:	4c25      	ldr	r4, [pc, #148]	; (8006684 <__pow5mult+0xa8>)
 80065ee:	3a01      	subs	r2, #1
 80065f0:	2300      	movs	r3, #0
 80065f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065f6:	f7ff fe9d 	bl	8006334 <__multadd>
 80065fa:	4607      	mov	r7, r0
 80065fc:	10ad      	asrs	r5, r5, #2
 80065fe:	d03d      	beq.n	800667c <__pow5mult+0xa0>
 8006600:	69f4      	ldr	r4, [r6, #28]
 8006602:	b97c      	cbnz	r4, 8006624 <__pow5mult+0x48>
 8006604:	2010      	movs	r0, #16
 8006606:	f7ff fd7f 	bl	8006108 <malloc>
 800660a:	4602      	mov	r2, r0
 800660c:	61f0      	str	r0, [r6, #28]
 800660e:	b928      	cbnz	r0, 800661c <__pow5mult+0x40>
 8006610:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <__pow5mult+0xac>)
 8006612:	481e      	ldr	r0, [pc, #120]	; (800668c <__pow5mult+0xb0>)
 8006614:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006618:	f000 fa72 	bl	8006b00 <__assert_func>
 800661c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006620:	6004      	str	r4, [r0, #0]
 8006622:	60c4      	str	r4, [r0, #12]
 8006624:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800662c:	b94c      	cbnz	r4, 8006642 <__pow5mult+0x66>
 800662e:	f240 2171 	movw	r1, #625	; 0x271
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff ff12 	bl	800645c <__i2b>
 8006638:	2300      	movs	r3, #0
 800663a:	f8c8 0008 	str.w	r0, [r8, #8]
 800663e:	4604      	mov	r4, r0
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	07eb      	lsls	r3, r5, #31
 8006648:	d50a      	bpl.n	8006660 <__pow5mult+0x84>
 800664a:	4639      	mov	r1, r7
 800664c:	4622      	mov	r2, r4
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ff1a 	bl	8006488 <__multiply>
 8006654:	4639      	mov	r1, r7
 8006656:	4680      	mov	r8, r0
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff fe49 	bl	80062f0 <_Bfree>
 800665e:	4647      	mov	r7, r8
 8006660:	106d      	asrs	r5, r5, #1
 8006662:	d00b      	beq.n	800667c <__pow5mult+0xa0>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	b938      	cbnz	r0, 8006678 <__pow5mult+0x9c>
 8006668:	4622      	mov	r2, r4
 800666a:	4621      	mov	r1, r4
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ff0b 	bl	8006488 <__multiply>
 8006672:	6020      	str	r0, [r4, #0]
 8006674:	f8c0 9000 	str.w	r9, [r0]
 8006678:	4604      	mov	r4, r0
 800667a:	e7e4      	b.n	8006646 <__pow5mult+0x6a>
 800667c:	4638      	mov	r0, r7
 800667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006682:	bf00      	nop
 8006684:	08007360 	.word	0x08007360
 8006688:	08007191 	.word	0x08007191
 800668c:	08007211 	.word	0x08007211

08006690 <__lshift>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	460c      	mov	r4, r1
 8006696:	6849      	ldr	r1, [r1, #4]
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800669e:	68a3      	ldr	r3, [r4, #8]
 80066a0:	4607      	mov	r7, r0
 80066a2:	4691      	mov	r9, r2
 80066a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066a8:	f108 0601 	add.w	r6, r8, #1
 80066ac:	42b3      	cmp	r3, r6
 80066ae:	db0b      	blt.n	80066c8 <__lshift+0x38>
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff fddd 	bl	8006270 <_Balloc>
 80066b6:	4605      	mov	r5, r0
 80066b8:	b948      	cbnz	r0, 80066ce <__lshift+0x3e>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b28      	ldr	r3, [pc, #160]	; (8006760 <__lshift+0xd0>)
 80066be:	4829      	ldr	r0, [pc, #164]	; (8006764 <__lshift+0xd4>)
 80066c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80066c4:	f000 fa1c 	bl	8006b00 <__assert_func>
 80066c8:	3101      	adds	r1, #1
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	e7ee      	b.n	80066ac <__lshift+0x1c>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f100 0114 	add.w	r1, r0, #20
 80066d4:	f100 0210 	add.w	r2, r0, #16
 80066d8:	4618      	mov	r0, r3
 80066da:	4553      	cmp	r3, sl
 80066dc:	db33      	blt.n	8006746 <__lshift+0xb6>
 80066de:	6920      	ldr	r0, [r4, #16]
 80066e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066e4:	f104 0314 	add.w	r3, r4, #20
 80066e8:	f019 091f 	ands.w	r9, r9, #31
 80066ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066f4:	d02b      	beq.n	800674e <__lshift+0xbe>
 80066f6:	f1c9 0e20 	rsb	lr, r9, #32
 80066fa:	468a      	mov	sl, r1
 80066fc:	2200      	movs	r2, #0
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	fa00 f009 	lsl.w	r0, r0, r9
 8006704:	4310      	orrs	r0, r2
 8006706:	f84a 0b04 	str.w	r0, [sl], #4
 800670a:	f853 2b04 	ldr.w	r2, [r3], #4
 800670e:	459c      	cmp	ip, r3
 8006710:	fa22 f20e 	lsr.w	r2, r2, lr
 8006714:	d8f3      	bhi.n	80066fe <__lshift+0x6e>
 8006716:	ebac 0304 	sub.w	r3, ip, r4
 800671a:	3b15      	subs	r3, #21
 800671c:	f023 0303 	bic.w	r3, r3, #3
 8006720:	3304      	adds	r3, #4
 8006722:	f104 0015 	add.w	r0, r4, #21
 8006726:	4584      	cmp	ip, r0
 8006728:	bf38      	it	cc
 800672a:	2304      	movcc	r3, #4
 800672c:	50ca      	str	r2, [r1, r3]
 800672e:	b10a      	cbz	r2, 8006734 <__lshift+0xa4>
 8006730:	f108 0602 	add.w	r6, r8, #2
 8006734:	3e01      	subs	r6, #1
 8006736:	4638      	mov	r0, r7
 8006738:	612e      	str	r6, [r5, #16]
 800673a:	4621      	mov	r1, r4
 800673c:	f7ff fdd8 	bl	80062f0 <_Bfree>
 8006740:	4628      	mov	r0, r5
 8006742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006746:	f842 0f04 	str.w	r0, [r2, #4]!
 800674a:	3301      	adds	r3, #1
 800674c:	e7c5      	b.n	80066da <__lshift+0x4a>
 800674e:	3904      	subs	r1, #4
 8006750:	f853 2b04 	ldr.w	r2, [r3], #4
 8006754:	f841 2f04 	str.w	r2, [r1, #4]!
 8006758:	459c      	cmp	ip, r3
 800675a:	d8f9      	bhi.n	8006750 <__lshift+0xc0>
 800675c:	e7ea      	b.n	8006734 <__lshift+0xa4>
 800675e:	bf00      	nop
 8006760:	08007200 	.word	0x08007200
 8006764:	08007211 	.word	0x08007211

08006768 <__mcmp>:
 8006768:	b530      	push	{r4, r5, lr}
 800676a:	6902      	ldr	r2, [r0, #16]
 800676c:	690c      	ldr	r4, [r1, #16]
 800676e:	1b12      	subs	r2, r2, r4
 8006770:	d10e      	bne.n	8006790 <__mcmp+0x28>
 8006772:	f100 0314 	add.w	r3, r0, #20
 8006776:	3114      	adds	r1, #20
 8006778:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800677c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006780:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006784:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006788:	42a5      	cmp	r5, r4
 800678a:	d003      	beq.n	8006794 <__mcmp+0x2c>
 800678c:	d305      	bcc.n	800679a <__mcmp+0x32>
 800678e:	2201      	movs	r2, #1
 8006790:	4610      	mov	r0, r2
 8006792:	bd30      	pop	{r4, r5, pc}
 8006794:	4283      	cmp	r3, r0
 8006796:	d3f3      	bcc.n	8006780 <__mcmp+0x18>
 8006798:	e7fa      	b.n	8006790 <__mcmp+0x28>
 800679a:	f04f 32ff 	mov.w	r2, #4294967295
 800679e:	e7f7      	b.n	8006790 <__mcmp+0x28>

080067a0 <__mdiff>:
 80067a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	4606      	mov	r6, r0
 80067a8:	4611      	mov	r1, r2
 80067aa:	4620      	mov	r0, r4
 80067ac:	4690      	mov	r8, r2
 80067ae:	f7ff ffdb 	bl	8006768 <__mcmp>
 80067b2:	1e05      	subs	r5, r0, #0
 80067b4:	d110      	bne.n	80067d8 <__mdiff+0x38>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff fd59 	bl	8006270 <_Balloc>
 80067be:	b930      	cbnz	r0, 80067ce <__mdiff+0x2e>
 80067c0:	4b3a      	ldr	r3, [pc, #232]	; (80068ac <__mdiff+0x10c>)
 80067c2:	4602      	mov	r2, r0
 80067c4:	f240 2137 	movw	r1, #567	; 0x237
 80067c8:	4839      	ldr	r0, [pc, #228]	; (80068b0 <__mdiff+0x110>)
 80067ca:	f000 f999 	bl	8006b00 <__assert_func>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	bfa4      	itt	ge
 80067da:	4643      	movge	r3, r8
 80067dc:	46a0      	movge	r8, r4
 80067de:	4630      	mov	r0, r6
 80067e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067e4:	bfa6      	itte	ge
 80067e6:	461c      	movge	r4, r3
 80067e8:	2500      	movge	r5, #0
 80067ea:	2501      	movlt	r5, #1
 80067ec:	f7ff fd40 	bl	8006270 <_Balloc>
 80067f0:	b920      	cbnz	r0, 80067fc <__mdiff+0x5c>
 80067f2:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <__mdiff+0x10c>)
 80067f4:	4602      	mov	r2, r0
 80067f6:	f240 2145 	movw	r1, #581	; 0x245
 80067fa:	e7e5      	b.n	80067c8 <__mdiff+0x28>
 80067fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006800:	6926      	ldr	r6, [r4, #16]
 8006802:	60c5      	str	r5, [r0, #12]
 8006804:	f104 0914 	add.w	r9, r4, #20
 8006808:	f108 0514 	add.w	r5, r8, #20
 800680c:	f100 0e14 	add.w	lr, r0, #20
 8006810:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006814:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006818:	f108 0210 	add.w	r2, r8, #16
 800681c:	46f2      	mov	sl, lr
 800681e:	2100      	movs	r1, #0
 8006820:	f859 3b04 	ldr.w	r3, [r9], #4
 8006824:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006828:	fa11 f88b 	uxtah	r8, r1, fp
 800682c:	b299      	uxth	r1, r3
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	eba8 0801 	sub.w	r8, r8, r1
 8006834:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006838:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800683c:	fa1f f888 	uxth.w	r8, r8
 8006840:	1419      	asrs	r1, r3, #16
 8006842:	454e      	cmp	r6, r9
 8006844:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006848:	f84a 3b04 	str.w	r3, [sl], #4
 800684c:	d8e8      	bhi.n	8006820 <__mdiff+0x80>
 800684e:	1b33      	subs	r3, r6, r4
 8006850:	3b15      	subs	r3, #21
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	3304      	adds	r3, #4
 8006858:	3415      	adds	r4, #21
 800685a:	42a6      	cmp	r6, r4
 800685c:	bf38      	it	cc
 800685e:	2304      	movcc	r3, #4
 8006860:	441d      	add	r5, r3
 8006862:	4473      	add	r3, lr
 8006864:	469e      	mov	lr, r3
 8006866:	462e      	mov	r6, r5
 8006868:	4566      	cmp	r6, ip
 800686a:	d30e      	bcc.n	800688a <__mdiff+0xea>
 800686c:	f10c 0203 	add.w	r2, ip, #3
 8006870:	1b52      	subs	r2, r2, r5
 8006872:	f022 0203 	bic.w	r2, r2, #3
 8006876:	3d03      	subs	r5, #3
 8006878:	45ac      	cmp	ip, r5
 800687a:	bf38      	it	cc
 800687c:	2200      	movcc	r2, #0
 800687e:	4413      	add	r3, r2
 8006880:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006884:	b17a      	cbz	r2, 80068a6 <__mdiff+0x106>
 8006886:	6107      	str	r7, [r0, #16]
 8006888:	e7a4      	b.n	80067d4 <__mdiff+0x34>
 800688a:	f856 8b04 	ldr.w	r8, [r6], #4
 800688e:	fa11 f288 	uxtah	r2, r1, r8
 8006892:	1414      	asrs	r4, r2, #16
 8006894:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006898:	b292      	uxth	r2, r2
 800689a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800689e:	f84e 2b04 	str.w	r2, [lr], #4
 80068a2:	1421      	asrs	r1, r4, #16
 80068a4:	e7e0      	b.n	8006868 <__mdiff+0xc8>
 80068a6:	3f01      	subs	r7, #1
 80068a8:	e7ea      	b.n	8006880 <__mdiff+0xe0>
 80068aa:	bf00      	nop
 80068ac:	08007200 	.word	0x08007200
 80068b0:	08007211 	.word	0x08007211

080068b4 <__d2b>:
 80068b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068b8:	460f      	mov	r7, r1
 80068ba:	2101      	movs	r1, #1
 80068bc:	ec59 8b10 	vmov	r8, r9, d0
 80068c0:	4616      	mov	r6, r2
 80068c2:	f7ff fcd5 	bl	8006270 <_Balloc>
 80068c6:	4604      	mov	r4, r0
 80068c8:	b930      	cbnz	r0, 80068d8 <__d2b+0x24>
 80068ca:	4602      	mov	r2, r0
 80068cc:	4b24      	ldr	r3, [pc, #144]	; (8006960 <__d2b+0xac>)
 80068ce:	4825      	ldr	r0, [pc, #148]	; (8006964 <__d2b+0xb0>)
 80068d0:	f240 310f 	movw	r1, #783	; 0x30f
 80068d4:	f000 f914 	bl	8006b00 <__assert_func>
 80068d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068e0:	bb2d      	cbnz	r5, 800692e <__d2b+0x7a>
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	f1b8 0300 	subs.w	r3, r8, #0
 80068e8:	d026      	beq.n	8006938 <__d2b+0x84>
 80068ea:	4668      	mov	r0, sp
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	f7ff fd87 	bl	8006400 <__lo0bits>
 80068f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068f6:	b1e8      	cbz	r0, 8006934 <__d2b+0x80>
 80068f8:	f1c0 0320 	rsb	r3, r0, #32
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	430b      	orrs	r3, r1
 8006902:	40c2      	lsrs	r2, r0
 8006904:	6163      	str	r3, [r4, #20]
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9b01      	ldr	r3, [sp, #4]
 800690a:	61a3      	str	r3, [r4, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf14      	ite	ne
 8006910:	2202      	movne	r2, #2
 8006912:	2201      	moveq	r2, #1
 8006914:	6122      	str	r2, [r4, #16]
 8006916:	b1bd      	cbz	r5, 8006948 <__d2b+0x94>
 8006918:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800691c:	4405      	add	r5, r0
 800691e:	603d      	str	r5, [r7, #0]
 8006920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006924:	6030      	str	r0, [r6, #0]
 8006926:	4620      	mov	r0, r4
 8006928:	b003      	add	sp, #12
 800692a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006932:	e7d6      	b.n	80068e2 <__d2b+0x2e>
 8006934:	6161      	str	r1, [r4, #20]
 8006936:	e7e7      	b.n	8006908 <__d2b+0x54>
 8006938:	a801      	add	r0, sp, #4
 800693a:	f7ff fd61 	bl	8006400 <__lo0bits>
 800693e:	9b01      	ldr	r3, [sp, #4]
 8006940:	6163      	str	r3, [r4, #20]
 8006942:	3020      	adds	r0, #32
 8006944:	2201      	movs	r2, #1
 8006946:	e7e5      	b.n	8006914 <__d2b+0x60>
 8006948:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800694c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006950:	6038      	str	r0, [r7, #0]
 8006952:	6918      	ldr	r0, [r3, #16]
 8006954:	f7ff fd34 	bl	80063c0 <__hi0bits>
 8006958:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800695c:	e7e2      	b.n	8006924 <__d2b+0x70>
 800695e:	bf00      	nop
 8006960:	08007200 	.word	0x08007200
 8006964:	08007211 	.word	0x08007211

08006968 <__sflush_r>:
 8006968:	898a      	ldrh	r2, [r1, #12]
 800696a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696e:	4605      	mov	r5, r0
 8006970:	0710      	lsls	r0, r2, #28
 8006972:	460c      	mov	r4, r1
 8006974:	d458      	bmi.n	8006a28 <__sflush_r+0xc0>
 8006976:	684b      	ldr	r3, [r1, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	dc05      	bgt.n	8006988 <__sflush_r+0x20>
 800697c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	dc02      	bgt.n	8006988 <__sflush_r+0x20>
 8006982:	2000      	movs	r0, #0
 8006984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800698a:	2e00      	cmp	r6, #0
 800698c:	d0f9      	beq.n	8006982 <__sflush_r+0x1a>
 800698e:	2300      	movs	r3, #0
 8006990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006994:	682f      	ldr	r7, [r5, #0]
 8006996:	6a21      	ldr	r1, [r4, #32]
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	d032      	beq.n	8006a02 <__sflush_r+0x9a>
 800699c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	075a      	lsls	r2, r3, #29
 80069a2:	d505      	bpl.n	80069b0 <__sflush_r+0x48>
 80069a4:	6863      	ldr	r3, [r4, #4]
 80069a6:	1ac0      	subs	r0, r0, r3
 80069a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069aa:	b10b      	cbz	r3, 80069b0 <__sflush_r+0x48>
 80069ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ae:	1ac0      	subs	r0, r0, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	4602      	mov	r2, r0
 80069b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069b6:	6a21      	ldr	r1, [r4, #32]
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b0      	blx	r6
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	d106      	bne.n	80069d0 <__sflush_r+0x68>
 80069c2:	6829      	ldr	r1, [r5, #0]
 80069c4:	291d      	cmp	r1, #29
 80069c6:	d82b      	bhi.n	8006a20 <__sflush_r+0xb8>
 80069c8:	4a29      	ldr	r2, [pc, #164]	; (8006a70 <__sflush_r+0x108>)
 80069ca:	410a      	asrs	r2, r1
 80069cc:	07d6      	lsls	r6, r2, #31
 80069ce:	d427      	bmi.n	8006a20 <__sflush_r+0xb8>
 80069d0:	2200      	movs	r2, #0
 80069d2:	6062      	str	r2, [r4, #4]
 80069d4:	04d9      	lsls	r1, r3, #19
 80069d6:	6922      	ldr	r2, [r4, #16]
 80069d8:	6022      	str	r2, [r4, #0]
 80069da:	d504      	bpl.n	80069e6 <__sflush_r+0x7e>
 80069dc:	1c42      	adds	r2, r0, #1
 80069de:	d101      	bne.n	80069e4 <__sflush_r+0x7c>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b903      	cbnz	r3, 80069e6 <__sflush_r+0x7e>
 80069e4:	6560      	str	r0, [r4, #84]	; 0x54
 80069e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069e8:	602f      	str	r7, [r5, #0]
 80069ea:	2900      	cmp	r1, #0
 80069ec:	d0c9      	beq.n	8006982 <__sflush_r+0x1a>
 80069ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f2:	4299      	cmp	r1, r3
 80069f4:	d002      	beq.n	80069fc <__sflush_r+0x94>
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7ff fb3a 	bl	8006070 <_free_r>
 80069fc:	2000      	movs	r0, #0
 80069fe:	6360      	str	r0, [r4, #52]	; 0x34
 8006a00:	e7c0      	b.n	8006984 <__sflush_r+0x1c>
 8006a02:	2301      	movs	r3, #1
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b0      	blx	r6
 8006a08:	1c41      	adds	r1, r0, #1
 8006a0a:	d1c8      	bne.n	800699e <__sflush_r+0x36>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0c5      	beq.n	800699e <__sflush_r+0x36>
 8006a12:	2b1d      	cmp	r3, #29
 8006a14:	d001      	beq.n	8006a1a <__sflush_r+0xb2>
 8006a16:	2b16      	cmp	r3, #22
 8006a18:	d101      	bne.n	8006a1e <__sflush_r+0xb6>
 8006a1a:	602f      	str	r7, [r5, #0]
 8006a1c:	e7b1      	b.n	8006982 <__sflush_r+0x1a>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	e7ad      	b.n	8006984 <__sflush_r+0x1c>
 8006a28:	690f      	ldr	r7, [r1, #16]
 8006a2a:	2f00      	cmp	r7, #0
 8006a2c:	d0a9      	beq.n	8006982 <__sflush_r+0x1a>
 8006a2e:	0793      	lsls	r3, r2, #30
 8006a30:	680e      	ldr	r6, [r1, #0]
 8006a32:	bf08      	it	eq
 8006a34:	694b      	ldreq	r3, [r1, #20]
 8006a36:	600f      	str	r7, [r1, #0]
 8006a38:	bf18      	it	ne
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	eba6 0807 	sub.w	r8, r6, r7
 8006a40:	608b      	str	r3, [r1, #8]
 8006a42:	f1b8 0f00 	cmp.w	r8, #0
 8006a46:	dd9c      	ble.n	8006982 <__sflush_r+0x1a>
 8006a48:	6a21      	ldr	r1, [r4, #32]
 8006a4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a4c:	4643      	mov	r3, r8
 8006a4e:	463a      	mov	r2, r7
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b0      	blx	r6
 8006a54:	2800      	cmp	r0, #0
 8006a56:	dc06      	bgt.n	8006a66 <__sflush_r+0xfe>
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	e78e      	b.n	8006984 <__sflush_r+0x1c>
 8006a66:	4407      	add	r7, r0
 8006a68:	eba8 0800 	sub.w	r8, r8, r0
 8006a6c:	e7e9      	b.n	8006a42 <__sflush_r+0xda>
 8006a6e:	bf00      	nop
 8006a70:	dfbffffe 	.word	0xdfbffffe

08006a74 <_fflush_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	690b      	ldr	r3, [r1, #16]
 8006a78:	4605      	mov	r5, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	b913      	cbnz	r3, 8006a84 <_fflush_r+0x10>
 8006a7e:	2500      	movs	r5, #0
 8006a80:	4628      	mov	r0, r5
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	b118      	cbz	r0, 8006a8e <_fflush_r+0x1a>
 8006a86:	6a03      	ldr	r3, [r0, #32]
 8006a88:	b90b      	cbnz	r3, 8006a8e <_fflush_r+0x1a>
 8006a8a:	f7fe fc03 	bl	8005294 <__sinit>
 8006a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f3      	beq.n	8006a7e <_fflush_r+0xa>
 8006a96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a98:	07d0      	lsls	r0, r2, #31
 8006a9a:	d404      	bmi.n	8006aa6 <_fflush_r+0x32>
 8006a9c:	0599      	lsls	r1, r3, #22
 8006a9e:	d402      	bmi.n	8006aa6 <_fflush_r+0x32>
 8006aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa2:	f7fe fcee 	bl	8005482 <__retarget_lock_acquire_recursive>
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	f7ff ff5d 	bl	8006968 <__sflush_r>
 8006aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab0:	07da      	lsls	r2, r3, #31
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	d4e4      	bmi.n	8006a80 <_fflush_r+0xc>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	059b      	lsls	r3, r3, #22
 8006aba:	d4e1      	bmi.n	8006a80 <_fflush_r+0xc>
 8006abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006abe:	f7fe fce1 	bl	8005484 <__retarget_lock_release_recursive>
 8006ac2:	e7dd      	b.n	8006a80 <_fflush_r+0xc>

08006ac4 <_sbrk_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d06      	ldr	r5, [pc, #24]	; (8006ae0 <_sbrk_r+0x1c>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	602b      	str	r3, [r5, #0]
 8006ad0:	f7fa fb52 	bl	8001178 <_sbrk>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_sbrk_r+0x1a>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_sbrk_r+0x1a>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	20000b98 	.word	0x20000b98

08006ae4 <memcpy>:
 8006ae4:	440a      	add	r2, r1
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aec:	d100      	bne.n	8006af0 <memcpy+0xc>
 8006aee:	4770      	bx	lr
 8006af0:	b510      	push	{r4, lr}
 8006af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006afa:	4291      	cmp	r1, r2
 8006afc:	d1f9      	bne.n	8006af2 <memcpy+0xe>
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <__assert_func>:
 8006b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b02:	4614      	mov	r4, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <__assert_func+0x2c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	68d8      	ldr	r0, [r3, #12]
 8006b0e:	b14c      	cbz	r4, 8006b24 <__assert_func+0x24>
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <__assert_func+0x30>)
 8006b12:	9100      	str	r1, [sp, #0]
 8006b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b18:	4906      	ldr	r1, [pc, #24]	; (8006b34 <__assert_func+0x34>)
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	f000 f844 	bl	8006ba8 <fiprintf>
 8006b20:	f000 f854 	bl	8006bcc <abort>
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <__assert_func+0x38>)
 8006b26:	461c      	mov	r4, r3
 8006b28:	e7f3      	b.n	8006b12 <__assert_func+0x12>
 8006b2a:	bf00      	nop
 8006b2c:	20000064 	.word	0x20000064
 8006b30:	08007376 	.word	0x08007376
 8006b34:	08007383 	.word	0x08007383
 8006b38:	080073b1 	.word	0x080073b1

08006b3c <_calloc_r>:
 8006b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b3e:	fba1 2402 	umull	r2, r4, r1, r2
 8006b42:	b94c      	cbnz	r4, 8006b58 <_calloc_r+0x1c>
 8006b44:	4611      	mov	r1, r2
 8006b46:	9201      	str	r2, [sp, #4]
 8006b48:	f7ff fb06 	bl	8006158 <_malloc_r>
 8006b4c:	9a01      	ldr	r2, [sp, #4]
 8006b4e:	4605      	mov	r5, r0
 8006b50:	b930      	cbnz	r0, 8006b60 <_calloc_r+0x24>
 8006b52:	4628      	mov	r0, r5
 8006b54:	b003      	add	sp, #12
 8006b56:	bd30      	pop	{r4, r5, pc}
 8006b58:	220c      	movs	r2, #12
 8006b5a:	6002      	str	r2, [r0, #0]
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	e7f8      	b.n	8006b52 <_calloc_r+0x16>
 8006b60:	4621      	mov	r1, r4
 8006b62:	f7fe fc10 	bl	8005386 <memset>
 8006b66:	e7f4      	b.n	8006b52 <_calloc_r+0x16>

08006b68 <__ascii_mbtowc>:
 8006b68:	b082      	sub	sp, #8
 8006b6a:	b901      	cbnz	r1, 8006b6e <__ascii_mbtowc+0x6>
 8006b6c:	a901      	add	r1, sp, #4
 8006b6e:	b142      	cbz	r2, 8006b82 <__ascii_mbtowc+0x1a>
 8006b70:	b14b      	cbz	r3, 8006b86 <__ascii_mbtowc+0x1e>
 8006b72:	7813      	ldrb	r3, [r2, #0]
 8006b74:	600b      	str	r3, [r1, #0]
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	1e10      	subs	r0, r2, #0
 8006b7a:	bf18      	it	ne
 8006b7c:	2001      	movne	r0, #1
 8006b7e:	b002      	add	sp, #8
 8006b80:	4770      	bx	lr
 8006b82:	4610      	mov	r0, r2
 8006b84:	e7fb      	b.n	8006b7e <__ascii_mbtowc+0x16>
 8006b86:	f06f 0001 	mvn.w	r0, #1
 8006b8a:	e7f8      	b.n	8006b7e <__ascii_mbtowc+0x16>

08006b8c <__ascii_wctomb>:
 8006b8c:	b149      	cbz	r1, 8006ba2 <__ascii_wctomb+0x16>
 8006b8e:	2aff      	cmp	r2, #255	; 0xff
 8006b90:	bf85      	ittet	hi
 8006b92:	238a      	movhi	r3, #138	; 0x8a
 8006b94:	6003      	strhi	r3, [r0, #0]
 8006b96:	700a      	strbls	r2, [r1, #0]
 8006b98:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b9c:	bf98      	it	ls
 8006b9e:	2001      	movls	r0, #1
 8006ba0:	4770      	bx	lr
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	4770      	bx	lr
	...

08006ba8 <fiprintf>:
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b503      	push	{r0, r1, lr}
 8006bac:	4601      	mov	r1, r0
 8006bae:	ab03      	add	r3, sp, #12
 8006bb0:	4805      	ldr	r0, [pc, #20]	; (8006bc8 <fiprintf+0x20>)
 8006bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb6:	6800      	ldr	r0, [r0, #0]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	f000 f837 	bl	8006c2c <_vfiprintf_r>
 8006bbe:	b002      	add	sp, #8
 8006bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc4:	b003      	add	sp, #12
 8006bc6:	4770      	bx	lr
 8006bc8:	20000064 	.word	0x20000064

08006bcc <abort>:
 8006bcc:	b508      	push	{r3, lr}
 8006bce:	2006      	movs	r0, #6
 8006bd0:	f000 fa04 	bl	8006fdc <raise>
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	f7fa fa57 	bl	8001088 <_exit>

08006bda <__sfputc_r>:
 8006bda:	6893      	ldr	r3, [r2, #8]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	b410      	push	{r4}
 8006be2:	6093      	str	r3, [r2, #8]
 8006be4:	da08      	bge.n	8006bf8 <__sfputc_r+0x1e>
 8006be6:	6994      	ldr	r4, [r2, #24]
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	db01      	blt.n	8006bf0 <__sfputc_r+0x16>
 8006bec:	290a      	cmp	r1, #10
 8006bee:	d103      	bne.n	8006bf8 <__sfputc_r+0x1e>
 8006bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf4:	f000 b934 	b.w	8006e60 <__swbuf_r>
 8006bf8:	6813      	ldr	r3, [r2, #0]
 8006bfa:	1c58      	adds	r0, r3, #1
 8006bfc:	6010      	str	r0, [r2, #0]
 8006bfe:	7019      	strb	r1, [r3, #0]
 8006c00:	4608      	mov	r0, r1
 8006c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <__sfputs_r>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	4614      	mov	r4, r2
 8006c10:	18d5      	adds	r5, r2, r3
 8006c12:	42ac      	cmp	r4, r5
 8006c14:	d101      	bne.n	8006c1a <__sfputs_r+0x12>
 8006c16:	2000      	movs	r0, #0
 8006c18:	e007      	b.n	8006c2a <__sfputs_r+0x22>
 8006c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1e:	463a      	mov	r2, r7
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7ff ffda 	bl	8006bda <__sfputc_r>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d1f3      	bne.n	8006c12 <__sfputs_r+0xa>
 8006c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c2c <_vfiprintf_r>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	460d      	mov	r5, r1
 8006c32:	b09d      	sub	sp, #116	; 0x74
 8006c34:	4614      	mov	r4, r2
 8006c36:	4698      	mov	r8, r3
 8006c38:	4606      	mov	r6, r0
 8006c3a:	b118      	cbz	r0, 8006c44 <_vfiprintf_r+0x18>
 8006c3c:	6a03      	ldr	r3, [r0, #32]
 8006c3e:	b90b      	cbnz	r3, 8006c44 <_vfiprintf_r+0x18>
 8006c40:	f7fe fb28 	bl	8005294 <__sinit>
 8006c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	d405      	bmi.n	8006c56 <_vfiprintf_r+0x2a>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	059a      	lsls	r2, r3, #22
 8006c4e:	d402      	bmi.n	8006c56 <_vfiprintf_r+0x2a>
 8006c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c52:	f7fe fc16 	bl	8005482 <__retarget_lock_acquire_recursive>
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	071b      	lsls	r3, r3, #28
 8006c5a:	d501      	bpl.n	8006c60 <_vfiprintf_r+0x34>
 8006c5c:	692b      	ldr	r3, [r5, #16]
 8006c5e:	b99b      	cbnz	r3, 8006c88 <_vfiprintf_r+0x5c>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 f93a 	bl	8006edc <__swsetup_r>
 8006c68:	b170      	cbz	r0, 8006c88 <_vfiprintf_r+0x5c>
 8006c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6c:	07dc      	lsls	r4, r3, #31
 8006c6e:	d504      	bpl.n	8006c7a <_vfiprintf_r+0x4e>
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	b01d      	add	sp, #116	; 0x74
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	0598      	lsls	r0, r3, #22
 8006c7e:	d4f7      	bmi.n	8006c70 <_vfiprintf_r+0x44>
 8006c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c82:	f7fe fbff 	bl	8005484 <__retarget_lock_release_recursive>
 8006c86:	e7f3      	b.n	8006c70 <_vfiprintf_r+0x44>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c96:	2330      	movs	r3, #48	; 0x30
 8006c98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e4c <_vfiprintf_r+0x220>
 8006c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ca0:	f04f 0901 	mov.w	r9, #1
 8006ca4:	4623      	mov	r3, r4
 8006ca6:	469a      	mov	sl, r3
 8006ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cac:	b10a      	cbz	r2, 8006cb2 <_vfiprintf_r+0x86>
 8006cae:	2a25      	cmp	r2, #37	; 0x25
 8006cb0:	d1f9      	bne.n	8006ca6 <_vfiprintf_r+0x7a>
 8006cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb6:	d00b      	beq.n	8006cd0 <_vfiprintf_r+0xa4>
 8006cb8:	465b      	mov	r3, fp
 8006cba:	4622      	mov	r2, r4
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7ff ffa2 	bl	8006c08 <__sfputs_r>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f000 80a9 	beq.w	8006e1c <_vfiprintf_r+0x1f0>
 8006cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ccc:	445a      	add	r2, fp
 8006cce:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80a1 	beq.w	8006e1c <_vfiprintf_r+0x1f0>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce4:	f10a 0a01 	add.w	sl, sl, #1
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf0:	931a      	str	r3, [sp, #104]	; 0x68
 8006cf2:	4654      	mov	r4, sl
 8006cf4:	2205      	movs	r2, #5
 8006cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfa:	4854      	ldr	r0, [pc, #336]	; (8006e4c <_vfiprintf_r+0x220>)
 8006cfc:	f7f9 faa0 	bl	8000240 <memchr>
 8006d00:	9a04      	ldr	r2, [sp, #16]
 8006d02:	b9d8      	cbnz	r0, 8006d3c <_vfiprintf_r+0x110>
 8006d04:	06d1      	lsls	r1, r2, #27
 8006d06:	bf44      	itt	mi
 8006d08:	2320      	movmi	r3, #32
 8006d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0e:	0713      	lsls	r3, r2, #28
 8006d10:	bf44      	itt	mi
 8006d12:	232b      	movmi	r3, #43	; 0x2b
 8006d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d18:	f89a 3000 	ldrb.w	r3, [sl]
 8006d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1e:	d015      	beq.n	8006d4c <_vfiprintf_r+0x120>
 8006d20:	9a07      	ldr	r2, [sp, #28]
 8006d22:	4654      	mov	r4, sl
 8006d24:	2000      	movs	r0, #0
 8006d26:	f04f 0c0a 	mov.w	ip, #10
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d30:	3b30      	subs	r3, #48	; 0x30
 8006d32:	2b09      	cmp	r3, #9
 8006d34:	d94d      	bls.n	8006dd2 <_vfiprintf_r+0x1a6>
 8006d36:	b1b0      	cbz	r0, 8006d66 <_vfiprintf_r+0x13a>
 8006d38:	9207      	str	r2, [sp, #28]
 8006d3a:	e014      	b.n	8006d66 <_vfiprintf_r+0x13a>
 8006d3c:	eba0 0308 	sub.w	r3, r0, r8
 8006d40:	fa09 f303 	lsl.w	r3, r9, r3
 8006d44:	4313      	orrs	r3, r2
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	46a2      	mov	sl, r4
 8006d4a:	e7d2      	b.n	8006cf2 <_vfiprintf_r+0xc6>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	1d19      	adds	r1, r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	9103      	str	r1, [sp, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bfbb      	ittet	lt
 8006d58:	425b      	neglt	r3, r3
 8006d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d5e:	9307      	strge	r3, [sp, #28]
 8006d60:	9307      	strlt	r3, [sp, #28]
 8006d62:	bfb8      	it	lt
 8006d64:	9204      	strlt	r2, [sp, #16]
 8006d66:	7823      	ldrb	r3, [r4, #0]
 8006d68:	2b2e      	cmp	r3, #46	; 0x2e
 8006d6a:	d10c      	bne.n	8006d86 <_vfiprintf_r+0x15a>
 8006d6c:	7863      	ldrb	r3, [r4, #1]
 8006d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d70:	d134      	bne.n	8006ddc <_vfiprintf_r+0x1b0>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	9203      	str	r2, [sp, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bfb8      	it	lt
 8006d7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d82:	3402      	adds	r4, #2
 8006d84:	9305      	str	r3, [sp, #20]
 8006d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e5c <_vfiprintf_r+0x230>
 8006d8a:	7821      	ldrb	r1, [r4, #0]
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	4650      	mov	r0, sl
 8006d90:	f7f9 fa56 	bl	8000240 <memchr>
 8006d94:	b138      	cbz	r0, 8006da6 <_vfiprintf_r+0x17a>
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	eba0 000a 	sub.w	r0, r0, sl
 8006d9c:	2240      	movs	r2, #64	; 0x40
 8006d9e:	4082      	lsls	r2, r0
 8006da0:	4313      	orrs	r3, r2
 8006da2:	3401      	adds	r4, #1
 8006da4:	9304      	str	r3, [sp, #16]
 8006da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006daa:	4829      	ldr	r0, [pc, #164]	; (8006e50 <_vfiprintf_r+0x224>)
 8006dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006db0:	2206      	movs	r2, #6
 8006db2:	f7f9 fa45 	bl	8000240 <memchr>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d03f      	beq.n	8006e3a <_vfiprintf_r+0x20e>
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <_vfiprintf_r+0x228>)
 8006dbc:	bb1b      	cbnz	r3, 8006e06 <_vfiprintf_r+0x1da>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	3307      	adds	r3, #7
 8006dc2:	f023 0307 	bic.w	r3, r3, #7
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	9303      	str	r3, [sp, #12]
 8006dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dcc:	443b      	add	r3, r7
 8006dce:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd0:	e768      	b.n	8006ca4 <_vfiprintf_r+0x78>
 8006dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	2001      	movs	r0, #1
 8006dda:	e7a6      	b.n	8006d2a <_vfiprintf_r+0xfe>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	3401      	adds	r4, #1
 8006de0:	9305      	str	r3, [sp, #20]
 8006de2:	4619      	mov	r1, r3
 8006de4:	f04f 0c0a 	mov.w	ip, #10
 8006de8:	4620      	mov	r0, r4
 8006dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dee:	3a30      	subs	r2, #48	; 0x30
 8006df0:	2a09      	cmp	r2, #9
 8006df2:	d903      	bls.n	8006dfc <_vfiprintf_r+0x1d0>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0c6      	beq.n	8006d86 <_vfiprintf_r+0x15a>
 8006df8:	9105      	str	r1, [sp, #20]
 8006dfa:	e7c4      	b.n	8006d86 <_vfiprintf_r+0x15a>
 8006dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e00:	4604      	mov	r4, r0
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7f0      	b.n	8006de8 <_vfiprintf_r+0x1bc>
 8006e06:	ab03      	add	r3, sp, #12
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <_vfiprintf_r+0x22c>)
 8006e0e:	a904      	add	r1, sp, #16
 8006e10:	4630      	mov	r0, r6
 8006e12:	f7fd fe09 	bl	8004a28 <_printf_float>
 8006e16:	4607      	mov	r7, r0
 8006e18:	1c78      	adds	r0, r7, #1
 8006e1a:	d1d6      	bne.n	8006dca <_vfiprintf_r+0x19e>
 8006e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e1e:	07d9      	lsls	r1, r3, #31
 8006e20:	d405      	bmi.n	8006e2e <_vfiprintf_r+0x202>
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	059a      	lsls	r2, r3, #22
 8006e26:	d402      	bmi.n	8006e2e <_vfiprintf_r+0x202>
 8006e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e2a:	f7fe fb2b 	bl	8005484 <__retarget_lock_release_recursive>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	065b      	lsls	r3, r3, #25
 8006e32:	f53f af1d 	bmi.w	8006c70 <_vfiprintf_r+0x44>
 8006e36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e38:	e71c      	b.n	8006c74 <_vfiprintf_r+0x48>
 8006e3a:	ab03      	add	r3, sp, #12
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <_vfiprintf_r+0x22c>)
 8006e42:	a904      	add	r1, sp, #16
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7fe f877 	bl	8004f38 <_printf_i>
 8006e4a:	e7e4      	b.n	8006e16 <_vfiprintf_r+0x1ea>
 8006e4c:	080074b3 	.word	0x080074b3
 8006e50:	080074bd 	.word	0x080074bd
 8006e54:	08004a29 	.word	0x08004a29
 8006e58:	08006c09 	.word	0x08006c09
 8006e5c:	080074b9 	.word	0x080074b9

08006e60 <__swbuf_r>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	460e      	mov	r6, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	4605      	mov	r5, r0
 8006e68:	b118      	cbz	r0, 8006e72 <__swbuf_r+0x12>
 8006e6a:	6a03      	ldr	r3, [r0, #32]
 8006e6c:	b90b      	cbnz	r3, 8006e72 <__swbuf_r+0x12>
 8006e6e:	f7fe fa11 	bl	8005294 <__sinit>
 8006e72:	69a3      	ldr	r3, [r4, #24]
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	071a      	lsls	r2, r3, #28
 8006e7a:	d525      	bpl.n	8006ec8 <__swbuf_r+0x68>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b31b      	cbz	r3, 8006ec8 <__swbuf_r+0x68>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	6922      	ldr	r2, [r4, #16]
 8006e84:	1a98      	subs	r0, r3, r2
 8006e86:	6963      	ldr	r3, [r4, #20]
 8006e88:	b2f6      	uxtb	r6, r6
 8006e8a:	4283      	cmp	r3, r0
 8006e8c:	4637      	mov	r7, r6
 8006e8e:	dc04      	bgt.n	8006e9a <__swbuf_r+0x3a>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f7ff fdee 	bl	8006a74 <_fflush_r>
 8006e98:	b9e0      	cbnz	r0, 8006ed4 <__swbuf_r+0x74>
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	60a3      	str	r3, [r4, #8]
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	6022      	str	r2, [r4, #0]
 8006ea6:	701e      	strb	r6, [r3, #0]
 8006ea8:	6962      	ldr	r2, [r4, #20]
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d004      	beq.n	8006eba <__swbuf_r+0x5a>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d506      	bpl.n	8006ec4 <__swbuf_r+0x64>
 8006eb6:	2e0a      	cmp	r6, #10
 8006eb8:	d104      	bne.n	8006ec4 <__swbuf_r+0x64>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f7ff fdd9 	bl	8006a74 <_fflush_r>
 8006ec2:	b938      	cbnz	r0, 8006ed4 <__swbuf_r+0x74>
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 f806 	bl	8006edc <__swsetup_r>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d0d5      	beq.n	8006e80 <__swbuf_r+0x20>
 8006ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ed8:	e7f4      	b.n	8006ec4 <__swbuf_r+0x64>
	...

08006edc <__swsetup_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4b2a      	ldr	r3, [pc, #168]	; (8006f88 <__swsetup_r+0xac>)
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	b118      	cbz	r0, 8006ef0 <__swsetup_r+0x14>
 8006ee8:	6a03      	ldr	r3, [r0, #32]
 8006eea:	b90b      	cbnz	r3, 8006ef0 <__swsetup_r+0x14>
 8006eec:	f7fe f9d2 	bl	8005294 <__sinit>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ef6:	0718      	lsls	r0, r3, #28
 8006ef8:	d422      	bmi.n	8006f40 <__swsetup_r+0x64>
 8006efa:	06d9      	lsls	r1, r3, #27
 8006efc:	d407      	bmi.n	8006f0e <__swsetup_r+0x32>
 8006efe:	2309      	movs	r3, #9
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	e034      	b.n	8006f78 <__swsetup_r+0x9c>
 8006f0e:	0758      	lsls	r0, r3, #29
 8006f10:	d512      	bpl.n	8006f38 <__swsetup_r+0x5c>
 8006f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f14:	b141      	cbz	r1, 8006f28 <__swsetup_r+0x4c>
 8006f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	d002      	beq.n	8006f24 <__swsetup_r+0x48>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f7ff f8a6 	bl	8006070 <_free_r>
 8006f24:	2300      	movs	r3, #0
 8006f26:	6363      	str	r3, [r4, #52]	; 0x34
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f2e:	81a3      	strh	r3, [r4, #12]
 8006f30:	2300      	movs	r3, #0
 8006f32:	6063      	str	r3, [r4, #4]
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f043 0308 	orr.w	r3, r3, #8
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	b94b      	cbnz	r3, 8006f58 <__swsetup_r+0x7c>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4e:	d003      	beq.n	8006f58 <__swsetup_r+0x7c>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f884 	bl	8007060 <__smakebuf_r>
 8006f58:	89a0      	ldrh	r0, [r4, #12]
 8006f5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f5e:	f010 0301 	ands.w	r3, r0, #1
 8006f62:	d00a      	beq.n	8006f7a <__swsetup_r+0x9e>
 8006f64:	2300      	movs	r3, #0
 8006f66:	60a3      	str	r3, [r4, #8]
 8006f68:	6963      	ldr	r3, [r4, #20]
 8006f6a:	425b      	negs	r3, r3
 8006f6c:	61a3      	str	r3, [r4, #24]
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	b943      	cbnz	r3, 8006f84 <__swsetup_r+0xa8>
 8006f72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f76:	d1c4      	bne.n	8006f02 <__swsetup_r+0x26>
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	0781      	lsls	r1, r0, #30
 8006f7c:	bf58      	it	pl
 8006f7e:	6963      	ldrpl	r3, [r4, #20]
 8006f80:	60a3      	str	r3, [r4, #8]
 8006f82:	e7f4      	b.n	8006f6e <__swsetup_r+0x92>
 8006f84:	2000      	movs	r0, #0
 8006f86:	e7f7      	b.n	8006f78 <__swsetup_r+0x9c>
 8006f88:	20000064 	.word	0x20000064

08006f8c <_raise_r>:
 8006f8c:	291f      	cmp	r1, #31
 8006f8e:	b538      	push	{r3, r4, r5, lr}
 8006f90:	4604      	mov	r4, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	d904      	bls.n	8006fa0 <_raise_r+0x14>
 8006f96:	2316      	movs	r3, #22
 8006f98:	6003      	str	r3, [r0, #0]
 8006f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006fa2:	b112      	cbz	r2, 8006faa <_raise_r+0x1e>
 8006fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fa8:	b94b      	cbnz	r3, 8006fbe <_raise_r+0x32>
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 f830 	bl	8007010 <_getpid_r>
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fba:	f000 b817 	b.w	8006fec <_kill_r>
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d00a      	beq.n	8006fd8 <_raise_r+0x4c>
 8006fc2:	1c59      	adds	r1, r3, #1
 8006fc4:	d103      	bne.n	8006fce <_raise_r+0x42>
 8006fc6:	2316      	movs	r3, #22
 8006fc8:	6003      	str	r3, [r0, #0]
 8006fca:	2001      	movs	r0, #1
 8006fcc:	e7e7      	b.n	8006f9e <_raise_r+0x12>
 8006fce:	2400      	movs	r4, #0
 8006fd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	4798      	blx	r3
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e7e0      	b.n	8006f9e <_raise_r+0x12>

08006fdc <raise>:
 8006fdc:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <raise+0xc>)
 8006fde:	4601      	mov	r1, r0
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	f7ff bfd3 	b.w	8006f8c <_raise_r>
 8006fe6:	bf00      	nop
 8006fe8:	20000064 	.word	0x20000064

08006fec <_kill_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	; (800700c <_kill_r+0x20>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	f7fa f835 	bl	8001068 <_kill>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d102      	bne.n	8007008 <_kill_r+0x1c>
 8007002:	682b      	ldr	r3, [r5, #0]
 8007004:	b103      	cbz	r3, 8007008 <_kill_r+0x1c>
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	bd38      	pop	{r3, r4, r5, pc}
 800700a:	bf00      	nop
 800700c:	20000b98 	.word	0x20000b98

08007010 <_getpid_r>:
 8007010:	f7fa b822 	b.w	8001058 <_getpid>

08007014 <__swhatbuf_r>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	460c      	mov	r4, r1
 8007018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701c:	2900      	cmp	r1, #0
 800701e:	b096      	sub	sp, #88	; 0x58
 8007020:	4615      	mov	r5, r2
 8007022:	461e      	mov	r6, r3
 8007024:	da0d      	bge.n	8007042 <__swhatbuf_r+0x2e>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f013 0f80 	tst.w	r3, #128	; 0x80
 800702c:	f04f 0100 	mov.w	r1, #0
 8007030:	bf0c      	ite	eq
 8007032:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007036:	2340      	movne	r3, #64	; 0x40
 8007038:	2000      	movs	r0, #0
 800703a:	6031      	str	r1, [r6, #0]
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	b016      	add	sp, #88	; 0x58
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	466a      	mov	r2, sp
 8007044:	f000 f848 	bl	80070d8 <_fstat_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	dbec      	blt.n	8007026 <__swhatbuf_r+0x12>
 800704c:	9901      	ldr	r1, [sp, #4]
 800704e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007052:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007056:	4259      	negs	r1, r3
 8007058:	4159      	adcs	r1, r3
 800705a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800705e:	e7eb      	b.n	8007038 <__swhatbuf_r+0x24>

08007060 <__smakebuf_r>:
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007064:	079d      	lsls	r5, r3, #30
 8007066:	4606      	mov	r6, r0
 8007068:	460c      	mov	r4, r1
 800706a:	d507      	bpl.n	800707c <__smakebuf_r+0x1c>
 800706c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	2301      	movs	r3, #1
 8007076:	6163      	str	r3, [r4, #20]
 8007078:	b002      	add	sp, #8
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	ab01      	add	r3, sp, #4
 800707e:	466a      	mov	r2, sp
 8007080:	f7ff ffc8 	bl	8007014 <__swhatbuf_r>
 8007084:	9900      	ldr	r1, [sp, #0]
 8007086:	4605      	mov	r5, r0
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff f865 	bl	8006158 <_malloc_r>
 800708e:	b948      	cbnz	r0, 80070a4 <__smakebuf_r+0x44>
 8007090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007094:	059a      	lsls	r2, r3, #22
 8007096:	d4ef      	bmi.n	8007078 <__smakebuf_r+0x18>
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	e7e3      	b.n	800706c <__smakebuf_r+0xc>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	6020      	str	r0, [r4, #0]
 80070a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	6163      	str	r3, [r4, #20]
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	6120      	str	r0, [r4, #16]
 80070b6:	b15b      	cbz	r3, 80070d0 <__smakebuf_r+0x70>
 80070b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070bc:	4630      	mov	r0, r6
 80070be:	f000 f81d 	bl	80070fc <_isatty_r>
 80070c2:	b128      	cbz	r0, 80070d0 <__smakebuf_r+0x70>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	431d      	orrs	r5, r3
 80070d4:	81a5      	strh	r5, [r4, #12]
 80070d6:	e7cf      	b.n	8007078 <__smakebuf_r+0x18>

080070d8 <_fstat_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d07      	ldr	r5, [pc, #28]	; (80070f8 <_fstat_r+0x20>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	f7fa f81e 	bl	8001126 <_fstat>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	d102      	bne.n	80070f4 <_fstat_r+0x1c>
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	b103      	cbz	r3, 80070f4 <_fstat_r+0x1c>
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	bd38      	pop	{r3, r4, r5, pc}
 80070f6:	bf00      	nop
 80070f8:	20000b98 	.word	0x20000b98

080070fc <_isatty_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d06      	ldr	r5, [pc, #24]	; (8007118 <_isatty_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fa f81d 	bl	8001146 <_isatty>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_isatty_r+0x1a>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_isatty_r+0x1a>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000b98 	.word	0x20000b98

0800711c <_init>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	bf00      	nop
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr

08007128 <_fini>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr
