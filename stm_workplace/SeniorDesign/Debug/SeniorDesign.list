
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800b1f8  0800b1f8  0001b1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b81c  0800b81c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b824  0800b824  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b824  0800b824  0001b824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b82c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005234  20000208  0800ba34  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000543c  0800ba34  0002543c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023cf7  00000000  00000000  00020279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dad  00000000  00000000  00043f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c38  00000000  00000000  00048d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c9  00000000  00000000  0004a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ce94  00000000  00000000  0004bf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023714  00000000  00000000  00078db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111967  00000000  00000000  0009c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008584  00000000  00000000  001ade30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001b63b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000208 	.word	0x20000208
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b1e0 	.word	0x0800b1e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000020c 	.word	0x2000020c
 800023c:	0800b1e0 	.word	0x0800b1e0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 fc67 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f000 fe1a 	bl	8001258 <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000644:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000674 <setFlowRate+0x44>
 8000648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800064c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000678 <setFlowRate+0x48>
 8000650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000658:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800067c <setFlowRate+0x4c>
 800065c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000660:	eef0 7a66 	vmov.f32	s15, s13

}
 8000664:	eeb0 0a67 	vmov.f32	s0, s15
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	3ca3d70a 	.word	0x3ca3d70a
 8000678:	00000001 	.word	0x00000001
 800067c:	3fc147ae 	.word	0x3fc147ae

08000680 <flowRateMethod>:

void flowRateMethod(uint8_t method){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	// This must change
//


	// This needs to be tested
	if(method == 0){
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <flowRateMethod+0x18>
		FlowMethodPin.Mode = GPIO_MODE_INPUT;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <flowRateMethod+0x34>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	e002      	b.n	800069e <flowRateMethod+0x1e>
	} else{
		FlowMethodPin.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <flowRateMethod+0x34>)
 800069a:	2201      	movs	r2, #1
 800069c:	605a      	str	r2, [r3, #4]
	}
	HAL_GPIO_Init(FlowMethodGroup, &FlowMethodPin);
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <flowRateMethod+0x38>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4904      	ldr	r1, [pc, #16]	; (80006b4 <flowRateMethod+0x34>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f8a7 	bl	80027f8 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000014 	.word	0x20000014

080006bc <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
return;
 80006c0:	bf00      	nop
}
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <flowStateOpen>:
void flowStateOpen(void){
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
return;
 80006ce:	bf00      	nop
}
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <flowStateControl>:
void flowStateControl(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
return;
 80006dc:	bf00      	nop
}
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f001 f9cd 	bl	8001a8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f856 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 f9b0 	bl	8000a58 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006f8:	f000 f950 	bl	800099c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006fc:	f000 f97e 	bl	80009fc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000700:	f000 f8c0 	bl	8000884 <MX_ADC1_Init>
  MX_DAC_Init();
 8000704:	f000 f920 	bl	8000948 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  volts = setFlowRate(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff91 	bl	8000630 <setFlowRate>
 800070e:	eef0 7a40 	vmov.f32	s15, s0
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <main+0x94>)
 8000714:	edc3 7a00 	vstr	s15, [r3]
  dacSet(&hdac, DAC_CHANNEL_1, volts);
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <main+0x94>)
 800071a:	edd3 7a00 	vldr	s15, [r3]
 800071e:	eeb0 0a67 	vmov.f32	s0, s15
 8000722:	2100      	movs	r1, #0
 8000724:	4816      	ldr	r0, [pc, #88]	; (8000780 <main+0x98>)
 8000726:	f000 fd9f 	bl	8001268 <dacSet>



  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2101      	movs	r1, #1
 800072e:	4815      	ldr	r0, [pc, #84]	; (8000784 <main+0x9c>)
 8000730:	f002 fa0e 	bl	8002b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2102      	movs	r1, #2
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <main+0x9c>)
 800073a:	f002 fa09 	bl	8002b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2104      	movs	r1, #4
 8000742:	4810      	ldr	r0, [pc, #64]	; (8000784 <main+0x9c>)
 8000744:	f002 fa04 	bl	8002b50 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000748:	f004 ffba 	bl	80056c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <main+0xa0>)
 800074e:	2100      	movs	r1, #0
 8000750:	480e      	ldr	r0, [pc, #56]	; (800078c <main+0xa4>)
 8000752:	f005 f81f 	bl	8005794 <osThreadNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <main+0xa8>)
 800075a:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <main+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <main+0xb0>)
 8000762:	f005 f817 	bl	8005794 <osThreadNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <main+0xb4>)
 800076a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0xb4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f005 f8b5 	bl	80058e0 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000776:	f004 ffd7 	bl	8005728 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077a:	e7fe      	b.n	800077a <main+0x92>
 800077c:	20000840 	.word	0x20000840
 8000780:	2000026c 	.word	0x2000026c
 8000784:	40021400 	.word	0x40021400
 8000788:	0800b44c 	.word	0x0800b44c
 800078c:	08000c81 	.word	0x08000c81
 8000790:	20000810 	.word	0x20000810
 8000794:	0800b470 	.word	0x0800b470
 8000798:	08001209 	.word	0x08001209
 800079c:	20000814 	.word	0x20000814

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	; 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f008 fc4d 	bl	800904e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c4:	f002 fb26 	bl	8002e14 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <SystemClock_Config+0xdc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <SystemClock_Config+0xdc>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <SystemClock_Config+0xdc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SystemClock_Config+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e8:	4a25      	ldr	r2, [pc, #148]	; (8000880 <SystemClock_Config+0xe0>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b23      	ldr	r3, [pc, #140]	; (8000880 <SystemClock_Config+0xe0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000804:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fb53 	bl	8002ed4 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000834:	f000 fd10 	bl	8001258 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000838:	f002 fafc 	bl	8002e34 <HAL_PWREx_EnableOverDrive>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000842:	f000 fd09 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2103      	movs	r1, #3
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fde4 	bl	8003430 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800086e:	f000 fcf3 	bl	8001258 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000896:	4b29      	ldr	r3, [pc, #164]	; (800093c <MX_ADC1_Init+0xb8>)
 8000898:	4a29      	ldr	r2, [pc, #164]	; (8000940 <MX_ADC1_Init+0xbc>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <MX_ADC1_Init+0xb8>)
 800089e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <MX_ADC1_Init+0xb8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_ADC1_Init+0xb8>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_ADC1_Init+0xb8>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_ADC1_Init+0xb8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_ADC1_Init+0xb8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_ADC1_Init+0xb8>)
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <MX_ADC1_Init+0xc0>)
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_ADC1_Init+0xb8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_ADC1_Init+0xb8>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_ADC1_Init+0xb8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_ADC1_Init+0xb8>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e4:	4815      	ldr	r0, [pc, #84]	; (800093c <MX_ADC1_Init+0xb8>)
 80008e6:	f001 f921 	bl	8001b2c <HAL_ADC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008f0:	f000 fcb2 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008f4:	2309      	movs	r3, #9
 80008f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_ADC1_Init+0xb8>)
 8000906:	f001 faef 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 fca2 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000914:	2306      	movs	r3, #6
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000918:	2302      	movs	r3, #2
 800091a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800091c:	2301      	movs	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_ADC1_Init+0xb8>)
 8000926:	f001 fadf 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000930:	f000 fc92 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000224 	.word	0x20000224
 8000940:	40012000 	.word	0x40012000
 8000944:	0f000001 	.word	0x0f000001

08000948 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_DAC_Init+0x4c>)
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <MX_DAC_Init+0x50>)
 800095a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_DAC_Init+0x4c>)
 800095e:	f001 fdf5 	bl	800254c <HAL_DAC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000968:	f000 fc76 	bl	8001258 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_DAC_Init+0x4c>)
 800097c:	f001 fee3 	bl	8002746 <HAL_DAC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000986:	f000 fc67 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000026c 	.word	0x2000026c
 8000998:	40007400 	.word	0x40007400

0800099c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_USART3_UART_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009e0:	f003 fe86 	bl	80046f0 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 fc35 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000280 	.word	0x20000280
 80009f8:	40004800 	.word	0x40004800

080009fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2206      	movs	r2, #6
 8000a0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	f002 f89f 	bl	8002b82 <HAL_PCD_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 fc05 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000308 	.word	0x20000308

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b7e      	ldr	r3, [pc, #504]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a7d      	ldr	r2, [pc, #500]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b7b      	ldr	r3, [pc, #492]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a86:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a77      	ldr	r2, [pc, #476]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000a8c:	f043 0320 	orr.w	r3, r3, #32
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b75      	ldr	r3, [pc, #468]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0320 	and.w	r3, r3, #32
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	4b72      	ldr	r3, [pc, #456]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a71      	ldr	r2, [pc, #452]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b6f      	ldr	r3, [pc, #444]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b6c      	ldr	r3, [pc, #432]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a6b      	ldr	r2, [pc, #428]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b69      	ldr	r3, [pc, #420]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b66      	ldr	r3, [pc, #408]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a65      	ldr	r2, [pc, #404]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b63      	ldr	r3, [pc, #396]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b60      	ldr	r3, [pc, #384]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a5f      	ldr	r2, [pc, #380]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b5d      	ldr	r3, [pc, #372]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afe:	4b5a      	ldr	r3, [pc, #360]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a59      	ldr	r2, [pc, #356]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b57      	ldr	r3, [pc, #348]	; (8000c68 <MX_GPIO_Init+0x210>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2107      	movs	r1, #7
 8000b1a:	4854      	ldr	r0, [pc, #336]	; (8000c6c <MX_GPIO_Init+0x214>)
 8000b1c:	f002 f818 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b26:	4852      	ldr	r0, [pc, #328]	; (8000c70 <MX_GPIO_Init+0x218>)
 8000b28:	f002 f812 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	4850      	ldr	r0, [pc, #320]	; (8000c74 <MX_GPIO_Init+0x21c>)
 8000b32:	f002 f80d 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	484a      	ldr	r0, [pc, #296]	; (8000c78 <MX_GPIO_Init+0x220>)
 8000b4e:	f001 fe53 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	4840      	ldr	r0, [pc, #256]	; (8000c6c <MX_GPIO_Init+0x214>)
 8000b6a:	f001 fe45 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b6e:	2332      	movs	r3, #50	; 0x32
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7e:	230b      	movs	r3, #11
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	483b      	ldr	r0, [pc, #236]	; (8000c78 <MX_GPIO_Init+0x220>)
 8000b8a:	f001 fe35 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b8e:	2386      	movs	r3, #134	; 0x86
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4834      	ldr	r0, [pc, #208]	; (8000c7c <MX_GPIO_Init+0x224>)
 8000baa:	f001 fe25 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bae:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	482a      	ldr	r0, [pc, #168]	; (8000c70 <MX_GPIO_Init+0x218>)
 8000bc8:	f001 fe16 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <MX_GPIO_Init+0x218>)
 8000bea:	f001 fe05 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bee:	2340      	movs	r3, #64	; 0x40
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <MX_GPIO_Init+0x21c>)
 8000c06:	f001 fdf7 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4815      	ldr	r0, [pc, #84]	; (8000c74 <MX_GPIO_Init+0x21c>)
 8000c1e:	f001 fdeb 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI3_Pin DI2_Pin DI1_Pin */
  GPIO_InitStruct.Pin = DI3_Pin|DI2_Pin|DI1_Pin;
 8000c22:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <MX_GPIO_Init+0x220>)
 8000c38:	f001 fdde 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4e:	230b      	movs	r3, #11
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_GPIO_Init+0x21c>)
 8000c5a:	f001 fdcd 	bl	80027f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	3730      	adds	r7, #48	; 0x30
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40021800 	.word	0x40021800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(eNextState) {
 8000c88:	4ba2      	ldr	r3, [pc, #648]	; (8000f14 <StartDefaultTask+0x294>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b0d      	cmp	r3, #13
 8000c8e:	f200 8284 	bhi.w	800119a <StartDefaultTask+0x51a>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <StartDefaultTask+0x18>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000cd1 	.word	0x08000cd1
 8000c9c:	08000d21 	.word	0x08000d21
 8000ca0:	08000d91 	.word	0x08000d91
 8000ca4:	08000e1f 	.word	0x08000e1f
 8000ca8:	08000e85 	.word	0x08000e85
 8000cac:	08000f79 	.word	0x08000f79
 8000cb0:	08001001 	.word	0x08001001
 8000cb4:	0800108f 	.word	0x0800108f
 8000cb8:	080010af 	.word	0x080010af
 8000cbc:	080010f3 	.word	0x080010f3
 8000cc0:	08001113 	.word	0x08001113
 8000cc4:	08001157 	.word	0x08001157
 8000cc8:	080011a3 	.word	0x080011a3
 8000ccc:	0800118b 	.word	0x0800118b
//					LOAD_TEST_INIT,
//					OPERATION_TEST_INIT,
//					ULTIMATE_MEASURE_TEST_INT,

	  				// void listenMsg(int * str, UART_HandleTypeDef *huart2);
	  				sprintf(msg,"STARTING\r\n");
 8000cd0:	4991      	ldr	r1, [pc, #580]	; (8000f18 <StartDefaultTask+0x298>)
 8000cd2:	4892      	ldr	r0, [pc, #584]	; (8000f1c <StartDefaultTask+0x29c>)
 8000cd4:	f008 f958 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000cd8:	4991      	ldr	r1, [pc, #580]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000cda:	4890      	ldr	r0, [pc, #576]	; (8000f1c <StartDefaultTask+0x29c>)
 8000cdc:	f000 fb36 	bl	800134c <printMsg>
	  				osDelay(1000);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce4:	f004 fe64 	bl	80059b0 <osDelay>

					tests[0] = 1;
 8000ce8:	4b8e      	ldr	r3, [pc, #568]	; (8000f24 <StartDefaultTask+0x2a4>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
					tests[1] = 3;
 8000cee:	4b8d      	ldr	r3, [pc, #564]	; (8000f24 <StartDefaultTask+0x2a4>)
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	605a      	str	r2, [r3, #4]
					tests[2] = 5;
 8000cf4:	4b8b      	ldr	r3, [pc, #556]	; (8000f24 <StartDefaultTask+0x2a4>)
 8000cf6:	2205      	movs	r2, #5
 8000cf8:	609a      	str	r2, [r3, #8]
					tests[3] = 7;
 8000cfa:	4b8a      	ldr	r3, [pc, #552]	; (8000f24 <StartDefaultTask+0x2a4>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	60da      	str	r2, [r3, #12]
					tests[4] = 9;
 8000d00:	4b88      	ldr	r3, [pc, #544]	; (8000f24 <StartDefaultTask+0x2a4>)
 8000d02:	2209      	movs	r2, #9
 8000d04:	611a      	str	r2, [r3, #16]
					tests[5] = 11;
 8000d06:	4b87      	ldr	r3, [pc, #540]	; (8000f24 <StartDefaultTask+0x2a4>)
 8000d08:	220b      	movs	r2, #11
 8000d0a:	615a      	str	r2, [r3, #20]
					tests[6] = 13;
 8000d0c:	4b85      	ldr	r3, [pc, #532]	; (8000f24 <StartDefaultTask+0x2a4>)
 8000d0e:	220d      	movs	r2, #13
 8000d10:	619a      	str	r2, [r3, #24]

					eNextState = *currentTest;
 8000d12:	4b85      	ldr	r3, [pc, #532]	; (8000f28 <StartDefaultTask+0x2a8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b7e      	ldr	r3, [pc, #504]	; (8000f14 <StartDefaultTask+0x294>)
 8000d1c:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d1e:	e241      	b.n	80011a4 <StartDefaultTask+0x524>
//					Task Number One:
//						recieve parameters from GUI
//						Initialization
//						- set timer, target mTorr, assign which pump
//						- open/close solonoids, close flow controller, open stepper motor
	  				osThreadSuspend(sendDataHandle);
 8000d20:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <StartDefaultTask+0x2ac>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f004 fddb 	bl	80058e0 <osThreadSuspend>
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST_INIT\r\n");
 8000d2a:	4981      	ldr	r1, [pc, #516]	; (8000f30 <StartDefaultTask+0x2b0>)
 8000d2c:	487b      	ldr	r0, [pc, #492]	; (8000f1c <StartDefaultTask+0x29c>)
 8000d2e:	f008 f92b 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000d32:	497b      	ldr	r1, [pc, #492]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000d34:	4879      	ldr	r0, [pc, #484]	; (8000f1c <StartDefaultTask+0x29c>)
 8000d36:	f000 fb09 	bl	800134c <printMsg>
	  				osDelay(1000);
 8000d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3e:	f004 fe37 	bl	80059b0 <osDelay>

	  				sprintf(msg,"open/close solenoids, close flow controller, open stepper motor\r\n");
 8000d42:	497c      	ldr	r1, [pc, #496]	; (8000f34 <StartDefaultTask+0x2b4>)
 8000d44:	4875      	ldr	r0, [pc, #468]	; (8000f1c <StartDefaultTask+0x29c>)
 8000d46:	f008 f91f 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000d4a:	4975      	ldr	r1, [pc, #468]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000d4c:	4873      	ldr	r0, [pc, #460]	; (8000f1c <StartDefaultTask+0x29c>)
 8000d4e:	f000 fafd 	bl	800134c <printMsg>
	  				osDelay(1000);
 8000d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d56:	f004 fe2b 	bl	80059b0 <osDelay>

	  				flowStateClose();
 8000d5a:	f7ff fcaf 	bl	80006bc <flowStateClose>
	  				stepperOpen();
 8000d5e:	f000 fb21 	bl	80013a4 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000d62:	4b75      	ldr	r3, [pc, #468]	; (8000f38 <StartDefaultTask+0x2b8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a75      	ldr	r2, [pc, #468]	; (8000f3c <StartDefaultTask+0x2bc>)
 8000d68:	8812      	ldrh	r2, [r2, #0]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fb01 	bl	8001374 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000d72:	4b73      	ldr	r3, [pc, #460]	; (8000f40 <StartDefaultTask+0x2c0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a73      	ldr	r2, [pc, #460]	; (8000f44 <StartDefaultTask+0x2c4>)
 8000d78:	8812      	ldrh	r2, [r2, #0]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fb05 	bl	800138c <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000d82:	4871      	ldr	r0, [pc, #452]	; (8000f48 <StartDefaultTask+0x2c8>)
 8000d84:	f000 fe36 	bl	80019f4 <vacuumGaugeADC>

	  				eNextState = VAC_ACHIEVMENT_TEST;
 8000d88:	4b62      	ldr	r3, [pc, #392]	; (8000f14 <StartDefaultTask+0x294>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d8e:	e209      	b.n	80011a4 <StartDefaultTask+0x524>
	  			case VAC_ACHIEVMENT_TEST:
//	  				monitor status
//	  				- mTorr if mTorr = target, shut pump off, success
//	  				- Timer if Timer > set time, shut pump off, failure
//	  				- if success/failure, send data, remove task two&three, move to next state
	  				volts = adcGet(&hadc1);
 8000d90:	486d      	ldr	r0, [pc, #436]	; (8000f48 <StartDefaultTask+0x2c8>)
 8000d92:	f000 fa9d 	bl	80012d0 <adcGet>
 8000d96:	eef0 7a40 	vmov.f32	s15, s0
 8000d9a:	4b6c      	ldr	r3, [pc, #432]	; (8000f4c <StartDefaultTask+0x2cc>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
//	  				vacuumScale = readVacuum(volts);
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST Scanning\r\n");
 8000da0:	496b      	ldr	r1, [pc, #428]	; (8000f50 <StartDefaultTask+0x2d0>)
 8000da2:	485e      	ldr	r0, [pc, #376]	; (8000f1c <StartDefaultTask+0x29c>)
 8000da4:	f008 f8f0 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000da8:	495d      	ldr	r1, [pc, #372]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000daa:	485c      	ldr	r0, [pc, #368]	; (8000f1c <StartDefaultTask+0x29c>)
 8000dac:	f000 face 	bl	800134c <printMsg>
	  				osThreadResume(sendDataHandle);
 8000db0:	4b5e      	ldr	r3, [pc, #376]	; (8000f2c <StartDefaultTask+0x2ac>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fdc7 	bl	8005948 <osThreadResume>
	  				osDelay(1000);
 8000dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dbe:	f004 fdf7 	bl	80059b0 <osDelay>


	  				vacuumScale = 50.0;
 8000dc2:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <StartDefaultTask+0x2d4>)
 8000dc4:	4a64      	ldr	r2, [pc, #400]	; (8000f58 <StartDefaultTask+0x2d8>)
 8000dc6:	601a      	str	r2, [r3, #0]
	  				if(vacuumScale >= 50){
 8000dc8:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <StartDefaultTask+0x2d4>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000f5c <StartDefaultTask+0x2dc>
 8000dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	db1c      	blt.n	8000e16 <StartDefaultTask+0x196>
		  				sprintf(msg,"vacuum of 50 mTorr reached\r\n");
 8000ddc:	4960      	ldr	r1, [pc, #384]	; (8000f60 <StartDefaultTask+0x2e0>)
 8000dde:	484f      	ldr	r0, [pc, #316]	; (8000f1c <StartDefaultTask+0x29c>)
 8000de0:	f008 f8d2 	bl	8008f88 <siprintf>
		  				printMsg(msg, &huart3);
 8000de4:	494e      	ldr	r1, [pc, #312]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000de6:	484d      	ldr	r0, [pc, #308]	; (8000f1c <StartDefaultTask+0x29c>)
 8000de8:	f000 fab0 	bl	800134c <printMsg>
		  				osThreadSuspend(sendDataHandle);
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <StartDefaultTask+0x2ac>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 fd75 	bl	80058e0 <osThreadSuspend>
		  				osDelay(1000);
 8000df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfa:	f004 fdd9 	bl	80059b0 <osDelay>
		  				currentTest++;
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <StartDefaultTask+0x2a8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3304      	adds	r3, #4
 8000e04:	4a48      	ldr	r2, [pc, #288]	; (8000f28 <StartDefaultTask+0x2a8>)
 8000e06:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <StartDefaultTask+0x2a8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <StartDefaultTask+0x294>)
 8000e12:	701a      	strb	r2, [r3, #0]
	  					eNextState = VAC_ACHIEVMENT_TEST;
	  				}

	  				//osDelay(100);

	  				break;
 8000e14:	e1c6      	b.n	80011a4 <StartDefaultTask+0x524>
	  					eNextState = VAC_ACHIEVMENT_TEST;
 8000e16:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <StartDefaultTask+0x294>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e1c:	e1c2      	b.n	80011a4 <StartDefaultTask+0x524>

//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor
	  				sprintf(msg,"WARM_UP_INIT\r\n");
 8000e1e:	4951      	ldr	r1, [pc, #324]	; (8000f64 <StartDefaultTask+0x2e4>)
 8000e20:	483e      	ldr	r0, [pc, #248]	; (8000f1c <StartDefaultTask+0x29c>)
 8000e22:	f008 f8b1 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000e26:	493e      	ldr	r1, [pc, #248]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000e28:	483c      	ldr	r0, [pc, #240]	; (8000f1c <StartDefaultTask+0x29c>)
 8000e2a:	f000 fa8f 	bl	800134c <printMsg>
	  				osDelay(1000);
 8000e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e32:	f004 fdbd 	bl	80059b0 <osDelay>

	  				sprintf(msg,"open/close solenoids, open flow controller, open stepper motor\r\n");
 8000e36:	494c      	ldr	r1, [pc, #304]	; (8000f68 <StartDefaultTask+0x2e8>)
 8000e38:	4838      	ldr	r0, [pc, #224]	; (8000f1c <StartDefaultTask+0x29c>)
 8000e3a:	f008 f8a5 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000e3e:	4938      	ldr	r1, [pc, #224]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000e40:	4836      	ldr	r0, [pc, #216]	; (8000f1c <StartDefaultTask+0x29c>)
 8000e42:	f000 fa83 	bl	800134c <printMsg>
	  				osDelay(1000);
 8000e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4a:	f004 fdb1 	bl	80059b0 <osDelay>

	  				flowStateOpen();
 8000e4e:	f7ff fc3c 	bl	80006ca <flowStateOpen>
	  				stepperOpen();
 8000e52:	f000 faa7 	bl	80013a4 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <StartDefaultTask+0x2b8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a38      	ldr	r2, [pc, #224]	; (8000f3c <StartDefaultTask+0x2bc>)
 8000e5c:	8812      	ldrh	r2, [r2, #0]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fa87 	bl	8001374 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <StartDefaultTask+0x2c0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a36      	ldr	r2, [pc, #216]	; (8000f44 <StartDefaultTask+0x2c4>)
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa8b 	bl	800138c <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000e76:	4834      	ldr	r0, [pc, #208]	; (8000f48 <StartDefaultTask+0x2c8>)
 8000e78:	f000 fdbc 	bl	80019f4 <vacuumGaugeADC>

	  				eNextState = WARM_UP;
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <StartDefaultTask+0x294>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e82:	e18f      	b.n	80011a4 <StartDefaultTask+0x524>
	  			case WARM_UP:
//					- Timer if Timer >= set time, success,
//					- temperature if temp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				float temp = 0;
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
	  				int timer = 3;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"WARM_UP Scanning\r\n");
 8000e8e:	4937      	ldr	r1, [pc, #220]	; (8000f6c <StartDefaultTask+0x2ec>)
 8000e90:	4822      	ldr	r0, [pc, #136]	; (8000f1c <StartDefaultTask+0x29c>)
 8000e92:	f008 f879 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000e96:	4922      	ldr	r1, [pc, #136]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000e98:	4820      	ldr	r0, [pc, #128]	; (8000f1c <StartDefaultTask+0x29c>)
 8000e9a:	f000 fa57 	bl	800134c <printMsg>
	  				osThreadResume(sendDataHandle);
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <StartDefaultTask+0x2ac>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fd50 	bl	8005948 <osThreadResume>
	  				osDelay(1000);
 8000ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eac:	f004 fd80 	bl	80059b0 <osDelay>


	  				if(temp > 100){
 8000eb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000f70 <StartDefaultTask+0x2f0>
 8000eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	dd03      	ble.n	8000eca <StartDefaultTask+0x24a>
//	  					test failed
	  					eNextState = FAIL_STATE;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <StartDefaultTask+0x294>)
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	701a      	strb	r2, [r3, #0]
		  				osDelay(1000);
	  				}else{
	  					eNextState = WARM_UP;
	  				}
	  				//osDelay(250);
	  				break;
 8000ec8:	e16c      	b.n	80011a4 <StartDefaultTask+0x524>
	  				}else if(timer >= 3){
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	dd1c      	ble.n	8000f0a <StartDefaultTask+0x28a>
		  				sprintf(msg,"Time is up: success\r\n");
 8000ed0:	4928      	ldr	r1, [pc, #160]	; (8000f74 <StartDefaultTask+0x2f4>)
 8000ed2:	4812      	ldr	r0, [pc, #72]	; (8000f1c <StartDefaultTask+0x29c>)
 8000ed4:	f008 f858 	bl	8008f88 <siprintf>
		  				printMsg(msg, &huart3);
 8000ed8:	4911      	ldr	r1, [pc, #68]	; (8000f20 <StartDefaultTask+0x2a0>)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <StartDefaultTask+0x29c>)
 8000edc:	f000 fa36 	bl	800134c <printMsg>
		  				currentTest++;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <StartDefaultTask+0x2a8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <StartDefaultTask+0x2a8>)
 8000ee8:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <StartDefaultTask+0x2a8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <StartDefaultTask+0x294>)
 8000ef4:	701a      	strb	r2, [r3, #0]
		  				osThreadSuspend(sendDataHandle);
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <StartDefaultTask+0x2ac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 fcf0 	bl	80058e0 <osThreadSuspend>
		  				osDelay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f004 fd54 	bl	80059b0 <osDelay>
	  				break;
 8000f08:	e14c      	b.n	80011a4 <StartDefaultTask+0x524>
	  					eNextState = WARM_UP;
 8000f0a:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <StartDefaultTask+0x294>)
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	701a      	strb	r2, [r3, #0]
	  				break;
 8000f10:	e148      	b.n	80011a4 <StartDefaultTask+0x524>
 8000f12:	bf00      	nop
 8000f14:	2000001c 	.word	0x2000001c
 8000f18:	0800b214 	.word	0x0800b214
 8000f1c:	2000084c 	.word	0x2000084c
 8000f20:	20000280 	.word	0x20000280
 8000f24:	20000818 	.word	0x20000818
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	20000814 	.word	0x20000814
 8000f30:	0800b220 	.word	0x0800b220
 8000f34:	0800b23c 	.word	0x0800b23c
 8000f38:	20000020 	.word	0x20000020
 8000f3c:	20000024 	.word	0x20000024
 8000f40:	20000028 	.word	0x20000028
 8000f44:	2000002c 	.word	0x2000002c
 8000f48:	20000224 	.word	0x20000224
 8000f4c:	20000840 	.word	0x20000840
 8000f50:	0800b280 	.word	0x0800b280
 8000f54:	20000848 	.word	0x20000848
 8000f58:	42480000 	.word	0x42480000
 8000f5c:	42480000 	.word	0x42480000
 8000f60:	0800b2a0 	.word	0x0800b2a0
 8000f64:	0800b2c0 	.word	0x0800b2c0
 8000f68:	0800b2d0 	.word	0x0800b2d0
 8000f6c:	0800b314 	.word	0x0800b314
 8000f70:	42c80000 	.word	0x42c80000
 8000f74:	0800b328 	.word	0x0800b328
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump, flow load
//					- open/close solonoids, control flow controller, open stepper motor

	  				sprintf(msg,"LOAD_TEST_INIT\r\n");
 8000f78:	498c      	ldr	r1, [pc, #560]	; (80011ac <StartDefaultTask+0x52c>)
 8000f7a:	488d      	ldr	r0, [pc, #564]	; (80011b0 <StartDefaultTask+0x530>)
 8000f7c:	f008 f804 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000f80:	498c      	ldr	r1, [pc, #560]	; (80011b4 <StartDefaultTask+0x534>)
 8000f82:	488b      	ldr	r0, [pc, #556]	; (80011b0 <StartDefaultTask+0x530>)
 8000f84:	f000 f9e2 	bl	800134c <printMsg>
	  				osDelay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f004 fd10 	bl	80059b0 <osDelay>

	  				sprintf(msg,"open/close solenoids, control flow controller, open stepper motor\r\n");
 8000f90:	4989      	ldr	r1, [pc, #548]	; (80011b8 <StartDefaultTask+0x538>)
 8000f92:	4887      	ldr	r0, [pc, #540]	; (80011b0 <StartDefaultTask+0x530>)
 8000f94:	f007 fff8 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8000f98:	4986      	ldr	r1, [pc, #536]	; (80011b4 <StartDefaultTask+0x534>)
 8000f9a:	4885      	ldr	r0, [pc, #532]	; (80011b0 <StartDefaultTask+0x530>)
 8000f9c:	f000 f9d6 	bl	800134c <printMsg>
	  				osDelay(1000);
 8000fa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa4:	f004 fd04 	bl	80059b0 <osDelay>

	  				flowStateControl();
 8000fa8:	f7ff fb96 	bl	80006d8 <flowStateControl>
	  				dacVolts = setFlowRate(50);
 8000fac:	2032      	movs	r0, #50	; 0x32
 8000fae:	f7ff fb3f 	bl	8000630 <setFlowRate>
 8000fb2:	eef0 7a40 	vmov.f32	s15, s0
 8000fb6:	4b81      	ldr	r3, [pc, #516]	; (80011bc <StartDefaultTask+0x53c>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
	  				dacSet(&hdac, DAC_CHANNEL_1, dacVolts);
 8000fbc:	4b7f      	ldr	r3, [pc, #508]	; (80011bc <StartDefaultTask+0x53c>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	487d      	ldr	r0, [pc, #500]	; (80011c0 <StartDefaultTask+0x540>)
 8000fca:	f000 f94d 	bl	8001268 <dacSet>

	  				stepperOpen();
 8000fce:	f000 f9e9 	bl	80013a4 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000fd2:	4b7c      	ldr	r3, [pc, #496]	; (80011c4 <StartDefaultTask+0x544>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7c      	ldr	r2, [pc, #496]	; (80011c8 <StartDefaultTask+0x548>)
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f9c9 	bl	8001374 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000fe2:	4b7a      	ldr	r3, [pc, #488]	; (80011cc <StartDefaultTask+0x54c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <StartDefaultTask+0x550>)
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9cd 	bl	800138c <solenoidClose>
	  				flowControllerADC(&hadc1);
 8000ff2:	4878      	ldr	r0, [pc, #480]	; (80011d4 <StartDefaultTask+0x554>)
 8000ff4:	f7ff fafa 	bl	80005ec <flowControllerADC>

	  				eNextState = LOAD_TEST;
 8000ff8:	4b77      	ldr	r3, [pc, #476]	; (80011d8 <StartDefaultTask+0x558>)
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	701a      	strb	r2, [r3, #0]

	  				break;
 8000ffe:	e0d1      	b.n	80011a4 <StartDefaultTask+0x524>
	  			case LOAD_TEST:
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- flow rate < flow load, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				temp = 0;
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
	  				timer = 8;
 8001006:	2308      	movs	r3, #8
 8001008:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"LOAD_TEST Scanning\r\n");
 800100a:	4974      	ldr	r1, [pc, #464]	; (80011dc <StartDefaultTask+0x55c>)
 800100c:	4868      	ldr	r0, [pc, #416]	; (80011b0 <StartDefaultTask+0x530>)
 800100e:	f007 ffbb 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8001012:	4968      	ldr	r1, [pc, #416]	; (80011b4 <StartDefaultTask+0x534>)
 8001014:	4866      	ldr	r0, [pc, #408]	; (80011b0 <StartDefaultTask+0x530>)
 8001016:	f000 f999 	bl	800134c <printMsg>
	  				osThreadResume(sendDataHandle);
 800101a:	4b71      	ldr	r3, [pc, #452]	; (80011e0 <StartDefaultTask+0x560>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fc92 	bl	8005948 <osThreadResume>
	  				osDelay(1000);
 8001024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001028:	f004 fcc2 	bl	80059b0 <osDelay>


	  				if(temp > 100){
 800102c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001030:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80011e4 <StartDefaultTask+0x564>
 8001034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	dd03      	ble.n	8001046 <StartDefaultTask+0x3c6>
//	  					test failed
	  					eNextState = FAIL_STATE;
 800103e:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <StartDefaultTask+0x558>)
 8001040:	220c      	movs	r2, #12
 8001042:	701a      	strb	r2, [r3, #0]
		  				osDelay(1000);
	  				}else{
	  					eNextState = LOAD_TEST;
	  				}

	  				break;
 8001044:	e0ae      	b.n	80011a4 <StartDefaultTask+0x524>
	  				}else if(timer >= 8){
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b07      	cmp	r3, #7
 800104a:	dd1c      	ble.n	8001086 <StartDefaultTask+0x406>
		  				sprintf(msg,"Time is up: success\r\n");
 800104c:	4966      	ldr	r1, [pc, #408]	; (80011e8 <StartDefaultTask+0x568>)
 800104e:	4858      	ldr	r0, [pc, #352]	; (80011b0 <StartDefaultTask+0x530>)
 8001050:	f007 ff9a 	bl	8008f88 <siprintf>
		  				printMsg(msg, &huart3);
 8001054:	4957      	ldr	r1, [pc, #348]	; (80011b4 <StartDefaultTask+0x534>)
 8001056:	4856      	ldr	r0, [pc, #344]	; (80011b0 <StartDefaultTask+0x530>)
 8001058:	f000 f978 	bl	800134c <printMsg>
		  				currentTest++;
 800105c:	4b63      	ldr	r3, [pc, #396]	; (80011ec <StartDefaultTask+0x56c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3304      	adds	r3, #4
 8001062:	4a62      	ldr	r2, [pc, #392]	; (80011ec <StartDefaultTask+0x56c>)
 8001064:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8001066:	4b61      	ldr	r3, [pc, #388]	; (80011ec <StartDefaultTask+0x56c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b5a      	ldr	r3, [pc, #360]	; (80011d8 <StartDefaultTask+0x558>)
 8001070:	701a      	strb	r2, [r3, #0]
		  				osThreadSuspend(sendDataHandle);
 8001072:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <StartDefaultTask+0x560>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f004 fc32 	bl	80058e0 <osThreadSuspend>
		  				osDelay(1000);
 800107c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001080:	f004 fc96 	bl	80059b0 <osDelay>
	  				break;
 8001084:	e08e      	b.n	80011a4 <StartDefaultTask+0x524>
	  					eNextState = LOAD_TEST;
 8001086:	4b54      	ldr	r3, [pc, #336]	; (80011d8 <StartDefaultTask+0x558>)
 8001088:	2206      	movs	r2, #6
 800108a:	701a      	strb	r2, [r3, #0]
	  				break;
 800108c:	e08a      	b.n	80011a4 <StartDefaultTask+0x524>
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor

	  				sprintf(msg,"OPERATION_TEST_INIT\r\n");
 800108e:	4958      	ldr	r1, [pc, #352]	; (80011f0 <StartDefaultTask+0x570>)
 8001090:	4847      	ldr	r0, [pc, #284]	; (80011b0 <StartDefaultTask+0x530>)
 8001092:	f007 ff79 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 8001096:	4947      	ldr	r1, [pc, #284]	; (80011b4 <StartDefaultTask+0x534>)
 8001098:	4845      	ldr	r0, [pc, #276]	; (80011b0 <StartDefaultTask+0x530>)
 800109a:	f000 f957 	bl	800134c <printMsg>
	  				osDelay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	f004 fc85 	bl	80059b0 <osDelay>
	  				eNextState = LOAD_TEST;
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <StartDefaultTask+0x558>)
 80010a8:	2206      	movs	r2, #6
 80010aa:	701a      	strb	r2, [r3, #0]
	  				break;
 80010ac:	e07a      	b.n	80011a4 <StartDefaultTask+0x524>
//					monitor status
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state

	  				sprintf(msg,"OPERATION_TEST\r\n");
 80010ae:	4951      	ldr	r1, [pc, #324]	; (80011f4 <StartDefaultTask+0x574>)
 80010b0:	483f      	ldr	r0, [pc, #252]	; (80011b0 <StartDefaultTask+0x530>)
 80010b2:	f007 ff69 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 80010b6:	493f      	ldr	r1, [pc, #252]	; (80011b4 <StartDefaultTask+0x534>)
 80010b8:	483d      	ldr	r0, [pc, #244]	; (80011b0 <StartDefaultTask+0x530>)
 80010ba:	f000 f947 	bl	800134c <printMsg>
	  				osThreadResume(sendDataHandle);
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <StartDefaultTask+0x560>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fc40 	bl	8005948 <osThreadResume>
	  				osDelay(1000);
 80010c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010cc:	f004 fc70 	bl	80059b0 <osDelay>
	  				osThreadSuspend(sendDataHandle);
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <StartDefaultTask+0x560>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fc03 	bl	80058e0 <osThreadSuspend>


	  				currentTest++;
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <StartDefaultTask+0x56c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3304      	adds	r3, #4
 80010e0:	4a42      	ldr	r2, [pc, #264]	; (80011ec <StartDefaultTask+0x56c>)
 80010e2:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 80010e4:	4b41      	ldr	r3, [pc, #260]	; (80011ec <StartDefaultTask+0x56c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <StartDefaultTask+0x558>)
 80010ee:	701a      	strb	r2, [r3, #0]

	  				break;
 80010f0:	e058      	b.n	80011a4 <StartDefaultTask+0x524>
//					Below is proposed design setup for test 18 – 22 where both top inlets of the pump are connected
//					through metal tubing where when one pump goes through a series of test, the opposite solenoid will
//					remain closed.
//					Once Steps 18 –22 are completed, when can move forward with step 23.

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST_INIT\r\n");
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <StartDefaultTask+0x578>)
 80010f4:	482e      	ldr	r0, [pc, #184]	; (80011b0 <StartDefaultTask+0x530>)
 80010f6:	f007 ff47 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 80010fa:	492e      	ldr	r1, [pc, #184]	; (80011b4 <StartDefaultTask+0x534>)
 80010fc:	482c      	ldr	r0, [pc, #176]	; (80011b0 <StartDefaultTask+0x530>)
 80010fe:	f000 f925 	bl	800134c <printMsg>
					osDelay(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f004 fc53 	bl	80059b0 <osDelay>

	  				eNextState = ULTIMATE_MEASURE_TEST;
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <StartDefaultTask+0x558>)
 800110c:	220a      	movs	r2, #10
 800110e:	701a      	strb	r2, [r3, #0]

	  				break;
 8001110:	e048      	b.n	80011a4 <StartDefaultTask+0x524>
	  			case ULTIMATE_MEASURE_TEST:

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST\r\n");
 8001112:	493a      	ldr	r1, [pc, #232]	; (80011fc <StartDefaultTask+0x57c>)
 8001114:	4826      	ldr	r0, [pc, #152]	; (80011b0 <StartDefaultTask+0x530>)
 8001116:	f007 ff37 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 800111a:	4926      	ldr	r1, [pc, #152]	; (80011b4 <StartDefaultTask+0x534>)
 800111c:	4824      	ldr	r0, [pc, #144]	; (80011b0 <StartDefaultTask+0x530>)
 800111e:	f000 f915 	bl	800134c <printMsg>
	  				osThreadResume(sendDataHandle);
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <StartDefaultTask+0x560>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f004 fc0e 	bl	8005948 <osThreadResume>
	  				osDelay(1000);
 800112c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001130:	f004 fc3e 	bl	80059b0 <osDelay>
	  				osThreadSuspend(sendDataHandle);
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <StartDefaultTask+0x560>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fbd1 	bl	80058e0 <osThreadSuspend>

	  				currentTest++;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <StartDefaultTask+0x56c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	4a29      	ldr	r2, [pc, #164]	; (80011ec <StartDefaultTask+0x56c>)
 8001146:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <StartDefaultTask+0x56c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <StartDefaultTask+0x558>)
 8001152:	701a      	strb	r2, [r3, #0]
	  				break;
 8001154:	e026      	b.n	80011a4 <StartDefaultTask+0x524>
	  			case FAIL_STATE:
	  				break;
	  			case IDLE:
	  				sprintf(msg,"IDLE %0.3f\r\n", volts);
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <StartDefaultTask+0x580>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001160:	ec53 2b17 	vmov	r2, r3, d7
 8001164:	4927      	ldr	r1, [pc, #156]	; (8001204 <StartDefaultTask+0x584>)
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <StartDefaultTask+0x530>)
 8001168:	f007 ff0e 	bl	8008f88 <siprintf>
	  				printMsg(msg, &huart3);
 800116c:	4911      	ldr	r1, [pc, #68]	; (80011b4 <StartDefaultTask+0x534>)
 800116e:	4810      	ldr	r0, [pc, #64]	; (80011b0 <StartDefaultTask+0x530>)
 8001170:	f000 f8ec 	bl	800134c <printMsg>
	  				//currentTest++;
	  				//eNextState = *currentTest;
	  				flowRateMethod(0);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fa83 	bl	8000680 <flowRateMethod>
	  				osDelay(1000);
 800117a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117e:	f004 fc17 	bl	80059b0 <osDelay>
	  				eNextState = IDLE;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <StartDefaultTask+0x558>)
 8001184:	220b      	movs	r2, #11
 8001186:	701a      	strb	r2, [r3, #0]
	  				break;
 8001188:	e00c      	b.n	80011a4 <StartDefaultTask+0x524>
	  			case STOP:
	  				eNextState = STOP;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <StartDefaultTask+0x558>)
 800118c:	220d      	movs	r2, #13
 800118e:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 8001190:	f241 3088 	movw	r0, #5000	; 0x1388
 8001194:	f000 fca6 	bl	8001ae4 <HAL_Delay>
	  				break;
 8001198:	e004      	b.n	80011a4 <StartDefaultTask+0x524>
	  			default:
	  				eNextState = STOP;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <StartDefaultTask+0x558>)
 800119c:	220d      	movs	r2, #13
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e000      	b.n	80011a4 <StartDefaultTask+0x524>
	  				break;
 80011a2:	bf00      	nop
	  }

	  osDelay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f004 fc03 	bl	80059b0 <osDelay>
	  switch(eNextState) {
 80011aa:	e56d      	b.n	8000c88 <StartDefaultTask+0x8>
 80011ac:	0800b340 	.word	0x0800b340
 80011b0:	2000084c 	.word	0x2000084c
 80011b4:	20000280 	.word	0x20000280
 80011b8:	0800b354 	.word	0x0800b354
 80011bc:	20000844 	.word	0x20000844
 80011c0:	2000026c 	.word	0x2000026c
 80011c4:	20000020 	.word	0x20000020
 80011c8:	20000024 	.word	0x20000024
 80011cc:	20000028 	.word	0x20000028
 80011d0:	2000002c 	.word	0x2000002c
 80011d4:	20000224 	.word	0x20000224
 80011d8:	2000001c 	.word	0x2000001c
 80011dc:	0800b398 	.word	0x0800b398
 80011e0:	20000814 	.word	0x20000814
 80011e4:	42c80000 	.word	0x42c80000
 80011e8:	0800b328 	.word	0x0800b328
 80011ec:	20000018 	.word	0x20000018
 80011f0:	0800b3b0 	.word	0x0800b3b0
 80011f4:	0800b3c8 	.word	0x0800b3c8
 80011f8:	0800b3dc 	.word	0x0800b3dc
 80011fc:	0800b3fc 	.word	0x0800b3fc
 8001200:	20000840 	.word	0x20000840
 8001204:	0800b414 	.word	0x0800b414

08001208 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg,"Sending Data\r\n");
 8001210:	4905      	ldr	r1, [pc, #20]	; (8001228 <StartTask02+0x20>)
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <StartTask02+0x24>)
 8001214:	f007 feb8 	bl	8008f88 <siprintf>
	printMsg(msg, &huart3);
 8001218:	4905      	ldr	r1, [pc, #20]	; (8001230 <StartTask02+0x28>)
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <StartTask02+0x24>)
 800121c:	f000 f896 	bl	800134c <printMsg>
    osDelay(250);
 8001220:	20fa      	movs	r0, #250	; 0xfa
 8001222:	f004 fbc5 	bl	80059b0 <osDelay>
	sprintf(msg,"Sending Data\r\n");
 8001226:	e7f3      	b.n	8001210 <StartTask02+0x8>
 8001228:	0800b424 	.word	0x0800b424
 800122c:	2000084c 	.word	0x2000084c
 8001230:	20000280 	.word	0x20000280

08001234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001246:	f000 fc2d 	bl	8001aa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40001000 	.word	0x40001000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
 8001262:	0000      	movs	r0, r0
 8001264:	0000      	movs	r0, r0
	...

08001268 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f001 f989 	bl	8002590 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001286:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80012b8 <dacSet+0x50>
 800128a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800128e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80012c0 <dacSet+0x58>
 8001292:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001296:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800129a:	ee17 2a90 	vmov	r2, s15
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <dacSet+0x60>)
 80012a0:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <dacSet+0x60>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2200      	movs	r2, #0
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f001 fa1c 	bl	80026e8 <HAL_DAC_SetValue>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	66666666 	.word	0x66666666
 80012bc:	400a6666 	.word	0x400a6666
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40affe00 	.word	0x40affe00
 80012c8:	200008b0 	.word	0x200008b0
 80012cc:	00000000 	.word	0x00000000

080012d0 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fc6b 	bl	8001bb4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 80012de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fd68 	bl	8001db8 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fdf0 	bl	8001ece <HAL_ADC_GetValue>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <adcGet+0x70>)
 80012f4:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <adcGet+0x70>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001302:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001344 <adcGet+0x74>
 8001306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800130e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001338 <adcGet+0x68>
 8001312:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001316:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <adcGet+0x78>)
 800131c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fd15 	bl	8001d50 <HAL_ADC_Stop>
	return adcVolts;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <adcGet+0x78>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	66666666 	.word	0x66666666
 800133c:	400a6666 	.word	0x400a6666
 8001340:	200008b4 	.word	0x200008b4
 8001344:	457ff000 	.word	0x457ff000
 8001348:	200008b8 	.word	0x200008b8

0800134c <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char* str, UART_HandleTypeDef *huart2){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7fe ffc2 	bl	80002e0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f003 fa10 	bl	800478c <HAL_UART_Transmit>
	return;
 800136c:	bf00      	nop
}
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <solenoidOpen>:
    // Now you can use buffer as a string
    //HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOpen(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 1);	// 3.3 V
	return;
 8001380:	bf00      	nop
}
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <solenoidClose>:
void solenoidClose(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 0);	// gnd
	return;
 8001398:	bf00      	nop
}
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <stepperOpen>:
// Public Functions		------------------------------------------------//

void stepperClose(){
}

void stepperOpen(){
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_MspInit+0x4c>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210f      	movs	r1, #15
 80013ee:	f06f 0001 	mvn.w	r0, #1
 80013f2:	f001 f881 	bl	80024f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_ADC_MspInit+0xa4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d13b      	bne.n	800149e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a20      	ldr	r2, [pc, #128]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_ADC_MspInit+0xa8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800146e:	2360      	movs	r3, #96	; 0x60
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001472:	2303      	movs	r3, #3
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <HAL_ADC_MspInit+0xac>)
 8001482:	f001 f9b9 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001486:	2302      	movs	r3, #2
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <HAL_ADC_MspInit+0xb0>)
 800149a:	f001 f9ad 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400

080014b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a19      	ldr	r2, [pc, #100]	; (800153c <HAL_DAC_MspInit+0x84>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12b      	bne.n	8001532 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_DAC_MspInit+0x88>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <HAL_DAC_MspInit+0x88>)
 80014e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_DAC_MspInit+0x88>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_DAC_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <HAL_DAC_MspInit+0x88>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_DAC_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800150a:	2310      	movs	r3, #16
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <HAL_DAC_MspInit+0x8c>)
 800151e:	f001 f96b 	bl	80027f8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	210f      	movs	r1, #15
 8001526:	2036      	movs	r0, #54	; 0x36
 8001528:	f000 ffe6 	bl	80024f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800152c:	2036      	movs	r0, #54	; 0x36
 800152e:	f000 ffff 	bl	8002530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40007400 	.word	0x40007400
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0ae      	sub	sp, #184	; 0xb8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2290      	movs	r2, #144	; 0x90
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f007 fd70 	bl	800904e <memset>
  if(huart->Instance==USART3)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a22      	ldr	r2, [pc, #136]	; (80015fc <HAL_UART_MspInit+0xb4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d13c      	bne.n	80015f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800157e:	2300      	movs	r3, #0
 8001580:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4618      	mov	r0, r3
 8001588:	f002 f9aa 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001592:	f7ff fe61 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_UART_MspInit+0xb8>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_UART_MspInit+0xb8>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_UART_MspInit+0xb8>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_UART_MspInit+0xb8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_UART_MspInit+0xb8>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_MspInit+0xb8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e0:	2307      	movs	r3, #7
 80015e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_UART_MspInit+0xbc>)
 80015ee:	f001 f903 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	37b8      	adds	r7, #184	; 0xb8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004800 	.word	0x40004800
 8001600:	40023800 	.word	0x40023800
 8001604:	40020c00 	.word	0x40020c00

08001608 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0ae      	sub	sp, #184	; 0xb8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2290      	movs	r2, #144	; 0x90
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f007 fd10 	bl	800904e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001636:	d159      	bne.n	80016ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800163c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f002 f949 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001654:	f7ff fe00 	bl	8001258 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001670:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800168a:	230a      	movs	r3, #10
 800168c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001694:	4619      	mov	r1, r3
 8001696:	4818      	ldr	r0, [pc, #96]	; (80016f8 <HAL_PCD_MspInit+0xf0>)
 8001698:	f001 f8ae 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <HAL_PCD_MspInit+0xf0>)
 80016b8:	f001 f89e 	bl	80027f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 80016be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 80016c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c6:	6353      	str	r3, [r2, #52]	; 0x34
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_PCD_MspInit+0xec>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	37b8      	adds	r7, #184	; 0xb8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800170c:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_InitTick+0xe0>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_InitTick+0xe0>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_InitTick+0xe0>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f002 f8a4 	bl	800387c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800173e:	f002 f875 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8001742:	6378      	str	r0, [r7, #52]	; 0x34
 8001744:	e004      	b.n	8001750 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001746:	f002 f871 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 800174a:	4603      	mov	r3, r0
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_InitTick+0xe4>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	3b01      	subs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_InitTick+0xe8>)
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <HAL_InitTick+0xec>)
 8001762:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_InitTick+0xe8>)
 8001766:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_InitTick+0xe8>)
 800176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001770:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_InitTick+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_InitTick+0xe8>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_InitTick+0xe8>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001784:	4817      	ldr	r0, [pc, #92]	; (80017e4 <HAL_InitTick+0xe8>)
 8001786:	f002 fcd3 	bl	8004130 <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001794:	2b00      	cmp	r3, #0
 8001796:	d11b      	bne.n	80017d0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <HAL_InitTick+0xe8>)
 800179a:	f002 fd2b 	bl	80041f4 <HAL_TIM_Base_Start_IT>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ac:	2036      	movs	r0, #54	; 0x36
 80017ae:	f000 febf 	bl	8002530 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d808      	bhi.n	80017ca <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	2036      	movs	r0, #54	; 0x36
 80017be:	f000 fe9b 	bl	80024f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_InitTick+0xf0>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e002      	b.n	80017d0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3738      	adds	r7, #56	; 0x38
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	200008bc 	.word	0x200008bc
 80017e8:	40001000 	.word	0x40001000
 80017ec:	20000034 	.word	0x20000034

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <TIM6_DAC_IRQHandler+0x20>)
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800182a:	4804      	ldr	r0, [pc, #16]	; (800183c <TIM6_DAC_IRQHandler+0x20>)
 800182c:	f000 ff02 	bl	8002634 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <TIM6_DAC_IRQHandler+0x24>)
 8001832:	f002 fd57 	bl	80042e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000026c 	.word	0x2000026c
 8001840:	200008bc 	.word	0x200008bc

08001844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_kill>:

int _kill(int pid, int sig)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185e:	f007 fc9f 	bl	80091a0 <__errno>
 8001862:	4603      	mov	r3, r0
 8001864:	2216      	movs	r2, #22
 8001866:	601a      	str	r2, [r3, #0]
  return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_exit>:

void _exit (int status)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe7 	bl	8001854 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001886:	e7fe      	b.n	8001886 <_exit+0x12>

08001888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	4601      	mov	r1, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf0      	blt.n	800189a <_read+0x12>
  }

  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e009      	b.n	80018e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf1      	blt.n	80018d4 <_write+0x12>
  }
  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_close>:

int _close(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	605a      	str	r2, [r3, #4]
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_isatty>:

int _isatty(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f007 fc04 	bl	80091a0 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20080000 	.word	0x20080000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	20000908 	.word	0x20000908
 80019cc:	20005440 	.word	0x20005440

080019d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001a12:	2301      	movs	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 fa63 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8001a28:	f7ff fc16 	bl	8001258 <Error_Handler>
	}
	return;
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
}
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <Reset_Handler>:
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopFillZerobss+0x12>
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LoopFillZerobss+0x16>)
 8001a3e:	490e      	ldr	r1, [pc, #56]	; (8001a78 <LoopFillZerobss+0x1a>)
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1e>)
 8001a42:	2300      	movs	r3, #0
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:
 8001a46:	58d4      	ldr	r4, [r2, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:
 8001a4c:	18c4      	adds	r4, r0, r3
 8001a4e:	428c      	cmp	r4, r1
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <LoopFillZerobss+0x22>)
 8001a54:	4c0b      	ldr	r4, [pc, #44]	; (8001a84 <LoopFillZerobss+0x26>)
 8001a56:	2300      	movs	r3, #0
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:
 8001a5e:	42a2      	cmp	r2, r4
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>
 8001a62:	f7ff ffb5 	bl	80019d0 <SystemInit>
 8001a66:	f007 fba1 	bl	80091ac <__libc_init_array>
 8001a6a:	f7fe fe3d 	bl	80006e8 <main>
 8001a6e:	4770      	bx	lr
 8001a70:	20080000 	.word	0x20080000
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000208 	.word	0x20000208
 8001a7c:	0800b82c 	.word	0x0800b82c
 8001a80:	20000208 	.word	0x20000208
 8001a84:	2000543c 	.word	0x2000543c

08001a88 <ADC_IRQHandler>:
 8001a88:	e7fe      	b.n	8001a88 <ADC_IRQHandler>

08001a8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8e:	2003      	movs	r0, #3
 8001a90:	f000 fd27 	bl	80024e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a94:	200f      	movs	r0, #15
 8001a96:	f7ff fe31 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9a:	f7ff fc8b 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000038 	.word	0x20000038
 8001ac8:	2000090c 	.word	0x2000090c

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2000090c 	.word	0x2000090c

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000038 	.word	0x20000038

08001b2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e031      	b.n	8001ba6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fc5a 	bl	8001404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_ADC_Init+0x84>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	f043 0202 	orr.w	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fb0a 	bl	8002194 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f023 0303 	bic.w	r3, r3, #3
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
 8001b96:	e001      	b.n	8001b9c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	ffffeefd 	.word	0xffffeefd

08001bb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Start+0x1a>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e0ad      	b.n	8001d2a <HAL_ADC_Start+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d018      	beq.n	8001c16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_ADC_Start+0x184>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_ADC_Start+0x188>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9a      	lsrs	r2, r3, #18
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c08:	e002      	b.n	8001c10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f9      	bne.n	8001c0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d175      	bne.n	8001d10 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c28:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <HAL_ADC_Start+0x18c>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5e:	d106      	bne.n	8001c6e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f023 0206 	bic.w	r2, r3, #6
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_ADC_Start+0x190>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d143      	bne.n	8001d28 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e03a      	b.n	8001d28 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <HAL_ADC_Start+0x194>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10e      	bne.n	8001cda <HAL_ADC_Start+0x126>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d107      	bne.n	8001cda <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cd8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_ADC_Start+0x190>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d120      	bne.n	8001d28 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_ADC_Start+0x198>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d11b      	bne.n	8001d28 <HAL_ADC_Start+0x174>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d114      	bne.n	8001d28 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	e00b      	b.n	8001d28 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f043 0210 	orr.w	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000030 	.word	0x20000030
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	fffff8fe 	.word	0xfffff8fe
 8001d44:	40012300 	.word	0x40012300
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	40012200 	.word	0x40012200

08001d50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Stop+0x16>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e01f      	b.n	8001da6 <HAL_ADC_Stop+0x56>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_ADC_Stop+0x64>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	ffffeefe 	.word	0xffffeefe

08001db8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd4:	d113      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de4:	d10b      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0220 	orr.w	r2, r3, #32
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e063      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dfe:	f7ff fe65 	bl	8001acc <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e04:	e021      	b.n	8001e4a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d01d      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <HAL_ADC_PollForConversion+0x6c>
 8001e14:	f7ff fe5a 	bl	8001acc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d212      	bcs.n	8001e4a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d00b      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0204 	orr.w	r2, r3, #4
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e03d      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d1d6      	bne.n	8001e06 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0212 	mvn.w	r2, #18
 8001e60:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d123      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d11f      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d111      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1c>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e136      	b.n	8002172 <HAL_ADC_ConfigChannel+0x28a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d93a      	bls.n	8001f8a <HAL_ADC_ConfigChannel+0xa2>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f1c:	d035      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	2207      	movs	r2, #7
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a8d      	ldr	r2, [pc, #564]	; (8002180 <HAL_ADC_ConfigChannel+0x298>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10a      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68d9      	ldr	r1, [r3, #12]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	061a      	lsls	r2, r3, #24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f62:	e035      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68d9      	ldr	r1, [r3, #12]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4403      	add	r3, r0
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f88:	e022      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6919      	ldr	r1, [r3, #16]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4403      	add	r3, r0
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b06      	cmp	r3, #6
 8001fd6:	d824      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b05      	subs	r3, #5
 8001fea:	221f      	movs	r2, #31
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b05      	subs	r3, #5
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
 8002020:	e04c      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d824      	bhi.n	8002074 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b23      	subs	r3, #35	; 0x23
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b23      	subs	r3, #35	; 0x23
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
 8002072:	e023      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b41      	subs	r3, #65	; 0x41
 8002086:	221f      	movs	r2, #31
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43da      	mvns	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	400a      	ands	r2, r1
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b41      	subs	r3, #65	; 0x41
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_ADC_ConfigChannel+0x29c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10a      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1f4>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a2c      	ldr	r2, [pc, #176]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <HAL_ADC_ConfigChannel+0x29c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10f      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x21e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d10b      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002104:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_ADC_ConfigChannel+0x29c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d12b      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x280>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_ADC_ConfigChannel+0x298>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d003      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x23a>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b11      	cmp	r3, #17
 8002120:	d122      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002128:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800212c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002138:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a10      	ldr	r2, [pc, #64]	; (8002180 <HAL_ADC_ConfigChannel+0x298>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d111      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_ADC_ConfigChannel+0x2a4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_ADC_ConfigChannel+0x2a8>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9a      	lsrs	r2, r3, #18
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800215a:	e002      	b.n	8002162 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3b01      	subs	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	10000012 	.word	0x10000012
 8002184:	40012000 	.word	0x40012000
 8002188:	40012300 	.word	0x40012300
 800218c:	20000030 	.word	0x20000030
 8002190:	431bde83 	.word	0x431bde83

08002194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <ADC_Init+0x1ec>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a77      	ldr	r2, [pc, #476]	; (8002380 <ADC_Init+0x1ec>)
 80021a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <ADC_Init+0x1ec>)
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4973      	ldr	r1, [pc, #460]	; (8002380 <ADC_Init+0x1ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	021a      	lsls	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	4a58      	ldr	r2, [pc, #352]	; (8002384 <ADC_Init+0x1f0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e00f      	b.n	800228e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800228c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0202 	bic.w	r2, r2, #2
 800229c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	005a      	lsls	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	3b01      	subs	r3, #1
 80022e8:	035a      	lsls	r2, r3, #13
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	e007      	b.n	8002304 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	3b01      	subs	r3, #1
 8002320:	051a      	lsls	r2, r3, #20
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	025a      	lsls	r2, r3, #9
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	029a      	lsls	r2, r3, #10
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40012300 	.word	0x40012300
 8002384:	0f000001 	.word	0x0f000001

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <__NVIC_SetPriorityGrouping+0x40>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x40>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	05fa0000 	.word	0x05fa0000

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ff4c 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250a:	f7ff ff61 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 800250e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	6978      	ldr	r0, [r7, #20]
 8002516:	f7ff ffb1 	bl	800247c <NVIC_EncodePriority>
 800251a:	4602      	mov	r2, r0
 800251c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff80 	bl	8002428 <__NVIC_SetPriority>
}
 8002528:	bf00      	nop
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff54 	bl	80023ec <__NVIC_EnableIRQ>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e014      	b.n	8002588 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	791b      	ldrb	r3, [r3, #4]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe ffa2 	bl	80014b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	795b      	ldrb	r3, [r3, #5]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_DAC_Start+0x16>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e040      	b.n	8002628 <HAL_DAC_Start+0x98>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2201      	movs	r2, #1
 80025c0:	409a      	lsls	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80025da:	2b3c      	cmp	r3, #60	; 0x3c
 80025dc:	d11d      	bne.n	800261a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e014      	b.n	800261a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	213c      	movs	r1, #60	; 0x3c
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	429a      	cmp	r2, r3
 8002608:	d107      	bne.n	800261a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0202 	orr.w	r2, r2, #2
 8002618:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264a:	d120      	bne.n	800268e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265a:	d118      	bne.n	800268e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2204      	movs	r2, #4
 8002660:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002686:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f852 	bl	8002732 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800269c:	d120      	bne.n	80026e0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ac:	d118      	bne.n	80026e0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2204      	movs	r2, #4
 80026b2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f043 0202 	orr.w	r2, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80026d8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f882 	bl	80027e4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	3308      	adds	r3, #8
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e004      	b.n	800271c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	3314      	adds	r3, #20
 800271a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	461a      	mov	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	795b      	ldrb	r3, [r3, #5]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_DAC_ConfigChannel+0x18>
 800275a:	2302      	movs	r3, #2
 800275c:	e03c      	b.n	80027d8 <HAL_DAC_ConfigChannel+0x92>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2202      	movs	r2, #2
 8002768:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	f640 72fe 	movw	r2, #4094	; 0xffe
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	22c0      	movs	r2, #192	; 0xc0
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43da      	mvns	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	400a      	ands	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e175      	b.n	8002b04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8164 	bne.w	8002afe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d005      	beq.n	800284e <HAL_GPIO_Init+0x56>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80be 	beq.w	8002afe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <HAL_GPIO_Init+0x324>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_GPIO_Init+0x324>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_GPIO_Init+0x324>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800299a:	4a61      	ldr	r2, [pc, #388]	; (8002b20 <HAL_GPIO_Init+0x328>)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a58      	ldr	r2, [pc, #352]	; (8002b24 <HAL_GPIO_Init+0x32c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d037      	beq.n	8002a36 <HAL_GPIO_Init+0x23e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <HAL_GPIO_Init+0x330>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d031      	beq.n	8002a32 <HAL_GPIO_Init+0x23a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_GPIO_Init+0x334>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02b      	beq.n	8002a2e <HAL_GPIO_Init+0x236>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a55      	ldr	r2, [pc, #340]	; (8002b30 <HAL_GPIO_Init+0x338>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d025      	beq.n	8002a2a <HAL_GPIO_Init+0x232>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_GPIO_Init+0x33c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01f      	beq.n	8002a26 <HAL_GPIO_Init+0x22e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a53      	ldr	r2, [pc, #332]	; (8002b38 <HAL_GPIO_Init+0x340>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_GPIO_Init+0x22a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_GPIO_Init+0x344>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0x226>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a51      	ldr	r2, [pc, #324]	; (8002b40 <HAL_GPIO_Init+0x348>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_GPIO_Init+0x222>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_GPIO_Init+0x34c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0x21e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x350>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_GPIO_Init+0x21a>
 8002a0e:	2309      	movs	r3, #9
 8002a10:	e012      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a12:	230a      	movs	r3, #10
 8002a14:	e010      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a16:	2308      	movs	r3, #8
 8002a18:	e00e      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e00c      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a1e:	2306      	movs	r3, #6
 8002a20:	e00a      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a22:	2305      	movs	r3, #5
 8002a24:	e008      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e004      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a36:	2300      	movs	r3, #0
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f002 0203 	and.w	r2, r2, #3
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	4093      	lsls	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a48:	4935      	ldr	r1, [pc, #212]	; (8002b20 <HAL_GPIO_Init+0x328>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7a:	4a34      	ldr	r2, [pc, #208]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ace:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	f67f ae86 	bls.w	8002818 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40021400 	.word	0x40021400
 8002b3c:	40021800 	.word	0x40021800
 8002b40:	40021c00 	.word	0x40021c00
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40022400 	.word	0x40022400
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b60:	787b      	ldrb	r3, [r7, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b84:	b08f      	sub	sp, #60	; 0x3c
 8002b86:	af0a      	add	r7, sp, #40	; 0x28
 8002b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e116      	b.n	8002dc2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fd2a 	bl	8001608 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fad0 	bl	8005178 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	687e      	ldr	r6, [r7, #4]
 8002be0:	466d      	mov	r5, sp
 8002be2:	f106 0410 	add.w	r4, r6, #16
 8002be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bf6:	1d33      	adds	r3, r6, #4
 8002bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f002 fa64 	bl	80050c8 <USB_CoreInit>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0d7      	b.n	8002dc2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f002 fabe 	bl	800519a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e04a      	b.n	8002cba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	333d      	adds	r3, #61	; 0x3d
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	333c      	adds	r3, #60	; 0x3c
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	b298      	uxth	r0, r3
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3344      	adds	r3, #68	; 0x44
 8002c60:	4602      	mov	r2, r0
 8002c62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3340      	adds	r3, #64	; 0x40
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	334c      	adds	r3, #76	; 0x4c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3354      	adds	r3, #84	; 0x54
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d3af      	bcc.n	8002c24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e044      	b.n	8002d54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	3301      	adds	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d3b5      	bcc.n	8002cca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	687e      	ldr	r6, [r7, #4]
 8002d66:	466d      	mov	r5, sp
 8002d68:	f106 0410 	add.w	r4, r6, #16
 8002d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7c:	1d33      	adds	r3, r6, #4
 8002d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f002 fa57 	bl	8005234 <USB_DevInit>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e014      	b.n	8002dc2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d102      	bne.n	8002db6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f80b 	bl	8002dcc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 fc15 	bl	80055ea <USB_DevDisconnect>

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002dcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_PCDEx_ActivateLPM+0x44>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	10000003 	.word	0x10000003

08002e14 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40007000 	.word	0x40007000

08002e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e62:	f7fe fe33 	bl	8001acc <HAL_GetTick>
 8002e66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e68:	e009      	b.n	8002e7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e6a:	f7fe fe2f 	bl	8001acc <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e78:	d901      	bls.n	8002e7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e022      	b.n	8002ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e98:	f7fe fe18 	bl	8001acc <HAL_GetTick>
 8002e9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e9e:	e009      	b.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ea0:	f7fe fe14 	bl	8001acc <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eae:	d901      	bls.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e007      	b.n	8002ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000

08002ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e29b      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8087 	beq.w	8003006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef8:	4b96      	ldr	r3, [pc, #600]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d00c      	beq.n	8002f1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f04:	4b93      	ldr	r3, [pc, #588]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d112      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62>
 8002f10:	4b90      	ldr	r3, [pc, #576]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1c:	d10b      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1e:	4b8d      	ldr	r3, [pc, #564]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d06c      	beq.n	8003004 <HAL_RCC_OscConfig+0x130>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d168      	bne.n	8003004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e275      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x7a>
 8002f40:	4b84      	ldr	r3, [pc, #528]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a83      	ldr	r2, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e02e      	b.n	8002fac <HAL_RCC_OscConfig+0xd8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x9c>
 8002f56:	4b7f      	ldr	r3, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7e      	ldr	r2, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b7c      	ldr	r3, [pc, #496]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7b      	ldr	r2, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xd8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0xc0>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a72      	ldr	r2, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xd8>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6b      	ldr	r2, [pc, #428]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fd8a 	bl	8001acc <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fd86 	bl	8001acc <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e229      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xe8>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fd76 	bl	8001acc <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fd72 	bl	8001acc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e215      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x110>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d069      	beq.n	80030e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003012:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x190>
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x17a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1e9      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	493d      	ldr	r1, [pc, #244]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e040      	b.n	80030e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d023      	beq.n	80030b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a38      	ldr	r2, [pc, #224]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe fd28 	bl	8001acc <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe fd24 	bl	8001acc <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1c7      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4929      	ldr	r1, [pc, #164]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
 80030b2:	e018      	b.n	80030e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fd04 	bl	8001acc <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fd00 	bl	8001acc <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1a3      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d038      	beq.n	8003164 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d019      	beq.n	800312e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fe:	4a15      	ldr	r2, [pc, #84]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe fce1 	bl	8001acc <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe fcdd 	bl	8001acc <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e180      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x23a>
 800312c:	e01a      	b.n	8003164 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe fcc7 	bl	8001acc <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003142:	f7fe fcc3 	bl	8001acc <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d903      	bls.n	8003158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e166      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
 8003154:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b92      	ldr	r3, [pc, #584]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ee      	bne.n	8003142 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a4 	beq.w	80032ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003172:	4b8c      	ldr	r3, [pc, #560]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b89      	ldr	r3, [pc, #548]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a88      	ldr	r2, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b86      	ldr	r3, [pc, #536]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319a:	4b83      	ldr	r3, [pc, #524]	; (80033a8 <HAL_RCC_OscConfig+0x4d4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d118      	bne.n	80031d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031a6:	4b80      	ldr	r3, [pc, #512]	; (80033a8 <HAL_RCC_OscConfig+0x4d4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7f      	ldr	r2, [pc, #508]	; (80033a8 <HAL_RCC_OscConfig+0x4d4>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fc8b 	bl	8001acc <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fe fc87 	bl	8001acc <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b64      	cmp	r3, #100	; 0x64
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e12a      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031cc:	4b76      	ldr	r3, [pc, #472]	; (80033a8 <HAL_RCC_OscConfig+0x4d4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x31a>
 80031e0:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a6f      	ldr	r2, [pc, #444]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
 80031ec:	e02d      	b.n	800324a <HAL_RCC_OscConfig+0x376>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x33c>
 80031f6:	4b6b      	ldr	r3, [pc, #428]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a6a      	ldr	r2, [pc, #424]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	4b68      	ldr	r3, [pc, #416]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	e01c      	b.n	800324a <HAL_RCC_OscConfig+0x376>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d10c      	bne.n	8003232 <HAL_RCC_OscConfig+0x35e>
 8003218:	4b62      	ldr	r3, [pc, #392]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a61      	ldr	r2, [pc, #388]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	4a5e      	ldr	r2, [pc, #376]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6713      	str	r3, [r2, #112]	; 0x70
 8003230:	e00b      	b.n	800324a <HAL_RCC_OscConfig+0x376>
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a5b      	ldr	r2, [pc, #364]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003244:	f023 0304 	bic.w	r3, r3, #4
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d015      	beq.n	800327e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fc3b 	bl	8001acc <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe fc37 	bl	8001acc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0d8      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ee      	beq.n	800325a <HAL_RCC_OscConfig+0x386>
 800327c:	e014      	b.n	80032a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fe fc25 	bl	8001acc <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe fc21 	bl	8001acc <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0c2      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ee      	bne.n	8003286 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d105      	bne.n	80032ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80ae 	beq.w	8003420 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c4:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d06d      	beq.n	80033ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d14b      	bne.n	8003370 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fbf2 	bl	8001acc <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fbee 	bl	8001acc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e091      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	071b      	lsls	r3, r3, #28
 8003336:	491b      	ldr	r1, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fbc0 	bl	8001acc <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fbbc 	bl	8001acc <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e05f      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x47c>
 800336e:	e057      	b.n	8003420 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fba6 	bl	8001acc <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fe fba2 	bl	8001acc <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e045      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x4b0>
 80033a2:	e03d      	b.n	8003420 <HAL_RCC_OscConfig+0x54c>
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <HAL_RCC_OscConfig+0x558>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d030      	beq.n	800341c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d129      	bne.n	800341c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d122      	bne.n	800341c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d119      	bne.n	800341c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	3b01      	subs	r3, #1
 80033f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d10f      	bne.n	800341c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0d0      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b6a      	ldr	r3, [pc, #424]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d910      	bls.n	8003478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 020f 	bic.w	r2, r3, #15
 800345e:	4965      	ldr	r1, [pc, #404]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0b8      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003490:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800349a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a8:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a52      	ldr	r2, [pc, #328]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	494d      	ldr	r1, [pc, #308]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d040      	beq.n	8003554 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d115      	bne.n	8003512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e07f      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e073      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e06b      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 0203 	bic.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4936      	ldr	r1, [pc, #216]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	4313      	orrs	r3, r2
 8003522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fe fad2 	bl	8001acc <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	e00a      	b.n	8003542 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352c:	f7fe face 	bl	8001acc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e053      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 020c 	and.w	r2, r3, #12
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	429a      	cmp	r2, r3
 8003552:	d1eb      	bne.n	800352c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d210      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 020f 	bic.w	r2, r3, #15
 800356a:	4922      	ldr	r1, [pc, #136]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e032      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4916      	ldr	r1, [pc, #88]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	490e      	ldr	r1, [pc, #56]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035c2:	f000 f821 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80035c6:	4602      	mov	r2, r0
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	490a      	ldr	r1, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x1cc>)
 80035d4:	5ccb      	ldrb	r3, [r1, r3]
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1d0>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1d4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f88a 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023c00 	.word	0x40023c00
 80035f8:	40023800 	.word	0x40023800
 80035fc:	0800b494 	.word	0x0800b494
 8003600:	20000030 	.word	0x20000030
 8003604:	20000034 	.word	0x20000034

08003608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800360c:	b094      	sub	sp, #80	; 0x50
 800360e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
 8003614:	2300      	movs	r3, #0
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003618:	2300      	movs	r3, #0
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003620:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d00d      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x40>
 800362c:	2b08      	cmp	r3, #8
 800362e:	f200 80e1 	bhi.w	80037f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x34>
 8003636:	2b04      	cmp	r3, #4
 8003638:	d003      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x3a>
 800363a:	e0db      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800363c:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_RCC_GetSysClockFreq+0x204>)
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003640:	e0db      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003642:	4b73      	ldr	r3, [pc, #460]	; (8003810 <HAL_RCC_GetSysClockFreq+0x208>)
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003646:	e0d8      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003650:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003652:	4b6d      	ldr	r3, [pc, #436]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d063      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365e:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	2200      	movs	r2, #0
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
 8003668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
 8003672:	2300      	movs	r3, #0
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
 8003676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800367a:	4622      	mov	r2, r4
 800367c:	462b      	mov	r3, r5
 800367e:	f04f 0000 	mov.w	r0, #0
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	0159      	lsls	r1, r3, #5
 8003688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368c:	0150      	lsls	r0, r2, #5
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4621      	mov	r1, r4
 8003694:	1a51      	subs	r1, r2, r1
 8003696:	6139      	str	r1, [r7, #16]
 8003698:	4629      	mov	r1, r5
 800369a:	eb63 0301 	sbc.w	r3, r3, r1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036ac:	4659      	mov	r1, fp
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	4651      	mov	r1, sl
 80036b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b6:	4651      	mov	r1, sl
 80036b8:	018a      	lsls	r2, r1, #6
 80036ba:	4651      	mov	r1, sl
 80036bc:	ebb2 0801 	subs.w	r8, r2, r1
 80036c0:	4659      	mov	r1, fp
 80036c2:	eb63 0901 	sbc.w	r9, r3, r1
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036da:	4690      	mov	r8, r2
 80036dc:	4699      	mov	r9, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	eb18 0303 	adds.w	r3, r8, r3
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	462b      	mov	r3, r5
 80036e8:	eb49 0303 	adc.w	r3, r9, r3
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036fa:	4629      	mov	r1, r5
 80036fc:	024b      	lsls	r3, r1, #9
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003704:	4621      	mov	r1, r4
 8003706:	024a      	lsls	r2, r1, #9
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	2200      	movs	r2, #0
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
 8003712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003718:	f7fc fdea 	bl	80002f0 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003724:	e058      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003726:	4b38      	ldr	r3, [pc, #224]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	2200      	movs	r2, #0
 800372e:	4618      	mov	r0, r3
 8003730:	4611      	mov	r1, r2
 8003732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
 800373c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	0159      	lsls	r1, r3, #5
 800374e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003752:	0150      	lsls	r0, r2, #5
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4641      	mov	r1, r8
 800375a:	ebb2 0a01 	subs.w	sl, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb63 0b01 	sbc.w	fp, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003778:	ebb2 040a 	subs.w	r4, r2, sl
 800377c:	eb63 050b 	sbc.w	r5, r3, fp
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	00eb      	lsls	r3, r5, #3
 800378a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378e:	00e2      	lsls	r2, r4, #3
 8003790:	4614      	mov	r4, r2
 8003792:	461d      	mov	r5, r3
 8003794:	4643      	mov	r3, r8
 8003796:	18e3      	adds	r3, r4, r3
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	464b      	mov	r3, r9
 800379c:	eb45 0303 	adc.w	r3, r5, r3
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ae:	4629      	mov	r1, r5
 80037b0:	028b      	lsls	r3, r1, #10
 80037b2:	4621      	mov	r1, r4
 80037b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b8:	4621      	mov	r1, r4
 80037ba:	028a      	lsls	r2, r1, #10
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	2200      	movs	r2, #0
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	61fa      	str	r2, [r7, #28]
 80037c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037cc:	f7fc fd90 	bl	80002f0 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4613      	mov	r3, r2
 80037d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_GetSysClockFreq+0x200>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetSysClockFreq+0x204>)
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3750      	adds	r7, #80	; 0x50
 8003800:	46bd      	mov	sp, r7
 8003802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	00f42400 	.word	0x00f42400
 8003810:	007a1200 	.word	0x007a1200

08003814 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_RCC_GetHCLKFreq+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000030 	.word	0x20000030

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003830:	f7ff fff0 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	0800b4a4 	.word	0x0800b4a4

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff ffdc 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0b5b      	lsrs	r3, r3, #13
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	0800b4a4 	.word	0x0800b4a4

0800387c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	220f      	movs	r2, #15
 800388a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_RCC_GetClockConfig+0x60>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40023c00 	.word	0x40023c00

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d012      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003908:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a68      	ldr	r2, [pc, #416]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003912:	6093      	str	r3, [r2, #8]
 8003914:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	4964      	ldr	r1, [pc, #400]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d017      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800393a:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	4959      	ldr	r1, [pc, #356]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d017      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003976:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	494a      	ldr	r1, [pc, #296]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d101      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 808b 	beq.w	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	4a39      	ldr	r2, [pc, #228]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6413      	str	r3, [r2, #64]	; 0x40
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a34      	ldr	r2, [pc, #208]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fe f870 	bl	8001acc <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f0:	f7fe f86c 	bl	8001acc <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e38f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a02:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d035      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d02e      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a1a      	ldr	r2, [pc, #104]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a4e:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d114      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe f834 	bl	8001acc <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fe f830 	bl	8001acc <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e351      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ee      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a96:	d111      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aa6:	400b      	ands	r3, r1
 8003aa8:	4901      	ldr	r1, [pc, #4]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	0ffffcff 	.word	0x0ffffcff
 8003abc:	4bac      	ldr	r3, [pc, #688]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4aab      	ldr	r2, [pc, #684]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ac6:	6093      	str	r3, [r2, #8]
 8003ac8:	4ba9      	ldr	r3, [pc, #676]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	49a6      	ldr	r1, [pc, #664]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d010      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ae6:	4ba2      	ldr	r3, [pc, #648]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aec:	4aa0      	ldr	r2, [pc, #640]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003af6:	4b9e      	ldr	r3, [pc, #632]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	499b      	ldr	r1, [pc, #620]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b14:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b22:	4993      	ldr	r1, [pc, #588]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b36:	4b8e      	ldr	r3, [pc, #568]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b44:	498a      	ldr	r1, [pc, #552]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b58:	4b85      	ldr	r3, [pc, #532]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b66:	4982      	ldr	r1, [pc, #520]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	4979      	ldr	r1, [pc, #484]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b9c:	4b74      	ldr	r3, [pc, #464]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	4971      	ldr	r1, [pc, #452]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f023 020c 	bic.w	r2, r3, #12
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bcc:	4968      	ldr	r1, [pc, #416]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003be0:	4b63      	ldr	r3, [pc, #396]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	4960      	ldr	r1, [pc, #384]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c02:	4b5b      	ldr	r3, [pc, #364]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c10:	4957      	ldr	r1, [pc, #348]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c24:	4b52      	ldr	r3, [pc, #328]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	494f      	ldr	r1, [pc, #316]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	4946      	ldr	r1, [pc, #280]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c68:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	493e      	ldr	r1, [pc, #248]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	4935      	ldr	r1, [pc, #212]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cac:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cba:	492d      	ldr	r1, [pc, #180]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d011      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cce:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cdc:	4924      	ldr	r1, [pc, #144]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	4914      	ldr	r1, [pc, #80]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d30:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d40:	490b      	ldr	r1, [pc, #44]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d64:	4902      	ldr	r1, [pc, #8]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d80:	4b8a      	ldr	r3, [pc, #552]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	4986      	ldr	r1, [pc, #536]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003da4:	4b81      	ldr	r3, [pc, #516]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003daa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db4:	497d      	ldr	r1, [pc, #500]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d006      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80d6 	beq.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dd0:	4b76      	ldr	r3, [pc, #472]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a75      	ldr	r2, [pc, #468]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ddc:	f7fd fe76 	bl	8001acc <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003de4:	f7fd fe72 	bl	8001acc <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e195      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003df6:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d021      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11d      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e16:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e24:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2a:	0e1b      	lsrs	r3, r3, #24
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	019a      	lsls	r2, r3, #6
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	071b      	lsls	r3, r3, #28
 8003e4a:	4958      	ldr	r1, [pc, #352]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d02e      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7c:	d129      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e8c:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	0f1b      	lsrs	r3, r3, #28
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	019a      	lsls	r2, r3, #6
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	071b      	lsls	r3, r3, #28
 8003eb2:	493e      	ldr	r1, [pc, #248]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eba:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec0:	f023 021f 	bic.w	r2, r3, #31
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	4938      	ldr	r1, [pc, #224]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01d      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ede:	4b33      	ldr	r3, [pc, #204]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee4:	0e1b      	lsrs	r3, r3, #24
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eec:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef2:	0f1b      	lsrs	r3, r3, #28
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	019a      	lsls	r2, r3, #6
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	071b      	lsls	r3, r3, #28
 8003f12:	4926      	ldr	r1, [pc, #152]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d011      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	019a      	lsls	r2, r3, #6
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	071b      	lsls	r3, r3, #28
 8003f42:	491a      	ldr	r1, [pc, #104]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f56:	f7fd fdb9 	bl	8001acc <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f5e:	f7fd fdb5 	bl	8001acc <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b64      	cmp	r3, #100	; 0x64
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0d8      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	f040 80ce 	bne.w	8004120 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a08      	ldr	r2, [pc, #32]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f90:	f7fd fd9c 	bl	8001acc <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f96:	e00b      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f98:	f7fd fd98 	bl	8001acc <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d904      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0bb      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fb0:	4b5e      	ldr	r3, [pc, #376]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fbc:	d0ec      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02e      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d12a      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fe6:	4b51      	ldr	r3, [pc, #324]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	0f1b      	lsrs	r3, r3, #28
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	019a      	lsls	r2, r3, #6
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	071b      	lsls	r3, r3, #28
 800401a:	4944      	ldr	r1, [pc, #272]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004022:	4b42      	ldr	r3, [pc, #264]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004028:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	493d      	ldr	r1, [pc, #244]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d022      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004050:	d11d      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	0e1b      	lsrs	r3, r3, #24
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	0f1b      	lsrs	r3, r3, #28
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	019a      	lsls	r2, r3, #6
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	431a      	orrs	r2, r3
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	061b      	lsls	r3, r3, #24
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	4929      	ldr	r1, [pc, #164]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d028      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	0e1b      	lsrs	r3, r3, #24
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040a8:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	019a      	lsls	r2, r3, #6
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	431a      	orrs	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	071b      	lsls	r3, r3, #28
 80040ce:	4917      	ldr	r1, [pc, #92]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040d6:	4b15      	ldr	r3, [pc, #84]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4911      	ldr	r1, [pc, #68]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0e      	ldr	r2, [pc, #56]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f8:	f7fd fce8 	bl	8001acc <HAL_GetTick>
 80040fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004100:	f7fd fce4 	bl	8001acc <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e007      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800411e:	d1ef      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e049      	b.n	80041d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f841 	bl	80041de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f000 fa00 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d001      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e054      	b.n	80042b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a26      	ldr	r2, [pc, #152]	; (80042c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d022      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004236:	d01d      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d018      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a21      	ldr	r2, [pc, #132]	; (80042cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00e      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d009      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d115      	bne.n	80042a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_TIM_Base_Start_IT+0xec>)
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b06      	cmp	r3, #6
 8004284:	d015      	beq.n	80042b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d011      	beq.n	80042b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	e008      	b.n	80042b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e000      	b.n	80042b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40000c00 	.word	0x40000c00
 80042d4:	40010400 	.word	0x40010400
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40001800 	.word	0x40001800
 80042e0:	00010007 	.word	0x00010007

080042e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0202 	mvn.w	r2, #2
 8004310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f905 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8f7 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f908 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0204 	mvn.w	r2, #4
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8db 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8cd 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8de 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0208 	mvn.w	r2, #8
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f8b1 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8a3 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8b4 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b10      	cmp	r3, #16
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0210 	mvn.w	r2, #16
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2208      	movs	r2, #8
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f887 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f879 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f88a 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0201 	mvn.w	r2, #1
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc fee6 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b80      	cmp	r3, #128	; 0x80
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f91a 	bl	80046c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f90d 	bl	80046dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d10e      	bne.n	80044ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d107      	bne.n	80044ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f838 	bl	800455e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d10e      	bne.n	800451a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b20      	cmp	r3, #32
 8004508:	d107      	bne.n	800451a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f06f 0220 	mvn.w	r2, #32
 8004512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8cd 	bl	80046b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a40      	ldr	r2, [pc, #256]	; (8004688 <TIM_Base_SetConfig+0x114>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3d      	ldr	r2, [pc, #244]	; (800468c <TIM_Base_SetConfig+0x118>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <TIM_Base_SetConfig+0x11c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <TIM_Base_SetConfig+0x120>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3a      	ldr	r2, [pc, #232]	; (8004698 <TIM_Base_SetConfig+0x124>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <TIM_Base_SetConfig+0x114>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d027      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2c      	ldr	r2, [pc, #176]	; (800468c <TIM_Base_SetConfig+0x118>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d023      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <TIM_Base_SetConfig+0x11c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01f      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <TIM_Base_SetConfig+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a29      	ldr	r2, [pc, #164]	; (8004698 <TIM_Base_SetConfig+0x124>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d017      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a28      	ldr	r2, [pc, #160]	; (800469c <TIM_Base_SetConfig+0x128>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <TIM_Base_SetConfig+0x12c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <TIM_Base_SetConfig+0x130>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a25      	ldr	r2, [pc, #148]	; (80046a8 <TIM_Base_SetConfig+0x134>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a24      	ldr	r2, [pc, #144]	; (80046ac <TIM_Base_SetConfig+0x138>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <TIM_Base_SetConfig+0x13c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <TIM_Base_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0xf8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <TIM_Base_SetConfig+0x124>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	615a      	str	r2, [r3, #20]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40000c00 	.word	0x40000c00
 8004698:	40010400 	.word	0x40010400
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800
 80046a8:	40001800 	.word	0x40001800
 80046ac:	40001c00 	.word	0x40001c00
 80046b0:	40002000 	.word	0x40002000

080046b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e040      	b.n	8004784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc ff18 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8b0 	bl	8004894 <UART_SetConfig>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e022      	b.n	8004784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fb08 	bl	8004d5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb8f 	bl	8004ea0 <UART_CheckIdleState>
 8004782:	4603      	mov	r3, r0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d171      	bne.n	8004888 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Transmit+0x24>
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e06a      	b.n	800488a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2221      	movs	r2, #33	; 0x21
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c2:	f7fd f983 	bl	8001acc <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d108      	bne.n	80047f4 <HAL_UART_Transmit+0x68>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e003      	b.n	80047fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047fc:	e02c      	b.n	8004858 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	2180      	movs	r1, #128	; 0x80
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fb96 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e038      	b.n	800488a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	3302      	adds	r3, #2
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	e007      	b.n	8004846 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	3301      	adds	r3, #1
 8004844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1cc      	bne.n	80047fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2200      	movs	r2, #0
 800486c:	2140      	movs	r1, #64	; 0x40
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fb63 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e005      	b.n	800488a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4ba6      	ldr	r3, [pc, #664]	; (8004b58 <UART_SetConfig+0x2c4>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	430a      	orrs	r2, r1
 8004904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a94      	ldr	r2, [pc, #592]	; (8004b5c <UART_SetConfig+0x2c8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d120      	bne.n	8004952 <UART_SetConfig+0xbe>
 8004910:	4b93      	ldr	r3, [pc, #588]	; (8004b60 <UART_SetConfig+0x2cc>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b03      	cmp	r3, #3
 800491c:	d816      	bhi.n	800494c <UART_SetConfig+0xb8>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x90>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004935 	.word	0x08004935
 8004928:	08004941 	.word	0x08004941
 800492c:	0800493b 	.word	0x0800493b
 8004930:	08004947 	.word	0x08004947
 8004934:	2301      	movs	r3, #1
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e150      	b.n	8004bdc <UART_SetConfig+0x348>
 800493a:	2302      	movs	r3, #2
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e14d      	b.n	8004bdc <UART_SetConfig+0x348>
 8004940:	2304      	movs	r3, #4
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e14a      	b.n	8004bdc <UART_SetConfig+0x348>
 8004946:	2308      	movs	r3, #8
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e147      	b.n	8004bdc <UART_SetConfig+0x348>
 800494c:	2310      	movs	r3, #16
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e144      	b.n	8004bdc <UART_SetConfig+0x348>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a83      	ldr	r2, [pc, #524]	; (8004b64 <UART_SetConfig+0x2d0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d132      	bne.n	80049c2 <UART_SetConfig+0x12e>
 800495c:	4b80      	ldr	r3, [pc, #512]	; (8004b60 <UART_SetConfig+0x2cc>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d828      	bhi.n	80049bc <UART_SetConfig+0x128>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <UART_SetConfig+0xdc>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049bd 	.word	0x080049bd
 8004978:	080049bd 	.word	0x080049bd
 800497c:	080049bd 	.word	0x080049bd
 8004980:	080049b1 	.word	0x080049b1
 8004984:	080049bd 	.word	0x080049bd
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049bd 	.word	0x080049bd
 8004990:	080049ab 	.word	0x080049ab
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049bd 	.word	0x080049bd
 80049a0:	080049b7 	.word	0x080049b7
 80049a4:	2300      	movs	r3, #0
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e118      	b.n	8004bdc <UART_SetConfig+0x348>
 80049aa:	2302      	movs	r3, #2
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e115      	b.n	8004bdc <UART_SetConfig+0x348>
 80049b0:	2304      	movs	r3, #4
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e112      	b.n	8004bdc <UART_SetConfig+0x348>
 80049b6:	2308      	movs	r3, #8
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e10f      	b.n	8004bdc <UART_SetConfig+0x348>
 80049bc:	2310      	movs	r3, #16
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e10c      	b.n	8004bdc <UART_SetConfig+0x348>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a68      	ldr	r2, [pc, #416]	; (8004b68 <UART_SetConfig+0x2d4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d120      	bne.n	8004a0e <UART_SetConfig+0x17a>
 80049cc:	4b64      	ldr	r3, [pc, #400]	; (8004b60 <UART_SetConfig+0x2cc>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d013      	beq.n	8004a02 <UART_SetConfig+0x16e>
 80049da:	2b30      	cmp	r3, #48	; 0x30
 80049dc:	d814      	bhi.n	8004a08 <UART_SetConfig+0x174>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d009      	beq.n	80049f6 <UART_SetConfig+0x162>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d810      	bhi.n	8004a08 <UART_SetConfig+0x174>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <UART_SetConfig+0x15c>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d006      	beq.n	80049fc <UART_SetConfig+0x168>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x174>
 80049f0:	2300      	movs	r3, #0
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e0f2      	b.n	8004bdc <UART_SetConfig+0x348>
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e0ef      	b.n	8004bdc <UART_SetConfig+0x348>
 80049fc:	2304      	movs	r3, #4
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e0ec      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a02:	2308      	movs	r3, #8
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e0e9      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e0e6      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a56      	ldr	r2, [pc, #344]	; (8004b6c <UART_SetConfig+0x2d8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d120      	bne.n	8004a5a <UART_SetConfig+0x1c6>
 8004a18:	4b51      	ldr	r3, [pc, #324]	; (8004b60 <UART_SetConfig+0x2cc>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a22:	2bc0      	cmp	r3, #192	; 0xc0
 8004a24:	d013      	beq.n	8004a4e <UART_SetConfig+0x1ba>
 8004a26:	2bc0      	cmp	r3, #192	; 0xc0
 8004a28:	d814      	bhi.n	8004a54 <UART_SetConfig+0x1c0>
 8004a2a:	2b80      	cmp	r3, #128	; 0x80
 8004a2c:	d009      	beq.n	8004a42 <UART_SetConfig+0x1ae>
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d810      	bhi.n	8004a54 <UART_SetConfig+0x1c0>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <UART_SetConfig+0x1a8>
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d006      	beq.n	8004a48 <UART_SetConfig+0x1b4>
 8004a3a:	e00b      	b.n	8004a54 <UART_SetConfig+0x1c0>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e0cc      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e0c9      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e0c6      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e0c3      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a54:	2310      	movs	r3, #16
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e0c0      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a44      	ldr	r2, [pc, #272]	; (8004b70 <UART_SetConfig+0x2dc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d125      	bne.n	8004ab0 <UART_SetConfig+0x21c>
 8004a64:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <UART_SetConfig+0x2cc>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a72:	d017      	beq.n	8004aa4 <UART_SetConfig+0x210>
 8004a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a78:	d817      	bhi.n	8004aaa <UART_SetConfig+0x216>
 8004a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a7e:	d00b      	beq.n	8004a98 <UART_SetConfig+0x204>
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a84:	d811      	bhi.n	8004aaa <UART_SetConfig+0x216>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <UART_SetConfig+0x1fe>
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8e:	d006      	beq.n	8004a9e <UART_SetConfig+0x20a>
 8004a90:	e00b      	b.n	8004aaa <UART_SetConfig+0x216>
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e0a1      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e09e      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e09b      	b.n	8004bdc <UART_SetConfig+0x348>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e098      	b.n	8004bdc <UART_SetConfig+0x348>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e095      	b.n	8004bdc <UART_SetConfig+0x348>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <UART_SetConfig+0x2e0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d125      	bne.n	8004b06 <UART_SetConfig+0x272>
 8004aba:	4b29      	ldr	r3, [pc, #164]	; (8004b60 <UART_SetConfig+0x2cc>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ac8:	d017      	beq.n	8004afa <UART_SetConfig+0x266>
 8004aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ace:	d817      	bhi.n	8004b00 <UART_SetConfig+0x26c>
 8004ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad4:	d00b      	beq.n	8004aee <UART_SetConfig+0x25a>
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ada:	d811      	bhi.n	8004b00 <UART_SetConfig+0x26c>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <UART_SetConfig+0x254>
 8004ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae4:	d006      	beq.n	8004af4 <UART_SetConfig+0x260>
 8004ae6:	e00b      	b.n	8004b00 <UART_SetConfig+0x26c>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e076      	b.n	8004bdc <UART_SetConfig+0x348>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e073      	b.n	8004bdc <UART_SetConfig+0x348>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e070      	b.n	8004bdc <UART_SetConfig+0x348>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e06d      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e06a      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <UART_SetConfig+0x2e4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d138      	bne.n	8004b82 <UART_SetConfig+0x2ee>
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b1e:	d017      	beq.n	8004b50 <UART_SetConfig+0x2bc>
 8004b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b24:	d82a      	bhi.n	8004b7c <UART_SetConfig+0x2e8>
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2a:	d00b      	beq.n	8004b44 <UART_SetConfig+0x2b0>
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b30:	d824      	bhi.n	8004b7c <UART_SetConfig+0x2e8>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <UART_SetConfig+0x2aa>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d006      	beq.n	8004b4a <UART_SetConfig+0x2b6>
 8004b3c:	e01e      	b.n	8004b7c <UART_SetConfig+0x2e8>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e04b      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b44:	2302      	movs	r3, #2
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e048      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e045      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b50:	2308      	movs	r3, #8
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e042      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b56:	bf00      	nop
 8004b58:	efff69f3 	.word	0xefff69f3
 8004b5c:	40011000 	.word	0x40011000
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40004400 	.word	0x40004400
 8004b68:	40004800 	.word	0x40004800
 8004b6c:	40004c00 	.word	0x40004c00
 8004b70:	40005000 	.word	0x40005000
 8004b74:	40011400 	.word	0x40011400
 8004b78:	40007800 	.word	0x40007800
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e02c      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a72      	ldr	r2, [pc, #456]	; (8004d50 <UART_SetConfig+0x4bc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d125      	bne.n	8004bd8 <UART_SetConfig+0x344>
 8004b8c:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <UART_SetConfig+0x4c0>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b9a:	d017      	beq.n	8004bcc <UART_SetConfig+0x338>
 8004b9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ba0:	d817      	bhi.n	8004bd2 <UART_SetConfig+0x33e>
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba6:	d00b      	beq.n	8004bc0 <UART_SetConfig+0x32c>
 8004ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bac:	d811      	bhi.n	8004bd2 <UART_SetConfig+0x33e>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <UART_SetConfig+0x326>
 8004bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb6:	d006      	beq.n	8004bc6 <UART_SetConfig+0x332>
 8004bb8:	e00b      	b.n	8004bd2 <UART_SetConfig+0x33e>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e00d      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e00a      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e007      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e004      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e001      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be4:	d15b      	bne.n	8004c9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d828      	bhi.n	8004c3e <UART_SetConfig+0x3aa>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <UART_SetConfig+0x360>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c3f 	.word	0x08004c3f
 8004c04:	08004c2f 	.word	0x08004c2f
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c3f 	.word	0x08004c3f
 8004c10:	08004c3f 	.word	0x08004c3f
 8004c14:	08004c37 	.word	0x08004c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7fe fe08 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8004c1c:	61b8      	str	r0, [r7, #24]
        break;
 8004c1e:	e013      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7fe fe18 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8004c24:	61b8      	str	r0, [r7, #24]
        break;
 8004c26:	e00f      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b4b      	ldr	r3, [pc, #300]	; (8004d58 <UART_SetConfig+0x4c4>)
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e00c      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fe fceb 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004c32:	61b8      	str	r0, [r7, #24]
        break;
 8004c34:	e008      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3a:	61bb      	str	r3, [r7, #24]
        break;
 8004c3c:	e004      	b.n	8004c48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	77bb      	strb	r3, [r7, #30]
        break;
 8004c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d074      	beq.n	8004d38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	005a      	lsls	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d916      	bls.n	8004c98 <UART_SetConfig+0x404>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c70:	d212      	bcs.n	8004c98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f023 030f 	bic.w	r3, r3, #15
 8004c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	89fa      	ldrh	r2, [r7, #14]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e04f      	b.n	8004d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	77bb      	strb	r3, [r7, #30]
 8004c9c:	e04c      	b.n	8004d38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d828      	bhi.n	8004cf6 <UART_SetConfig+0x462>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x418>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004cf7 	.word	0x08004cf7
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004cf7 	.word	0x08004cf7
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd0:	f7fe fdac 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8004cd4:	61b8      	str	r0, [r7, #24]
        break;
 8004cd6:	e013      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7fe fdbc 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e00f      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <UART_SetConfig+0x4c4>)
 8004ce2:	61bb      	str	r3, [r7, #24]
        break;
 8004ce4:	e00c      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7fe fc8f 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004cea:	61b8      	str	r0, [r7, #24]
        break;
 8004cec:	e008      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e004      	b.n	8004d00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	085a      	lsrs	r2, r3, #1
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	441a      	add	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b0f      	cmp	r3, #15
 8004d1e:	d909      	bls.n	8004d34 <UART_SetConfig+0x4a0>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d26:	d205      	bcs.n	8004d34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	e001      	b.n	8004d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d44:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40007c00 	.word	0x40007c00
 8004d54:	40023800 	.word	0x40023800
 8004d58:	00f42400 	.word	0x00f42400

08004d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e5a:	d10a      	bne.n	8004e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb0:	f7fc fe0c 	bl	8001acc <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d10e      	bne.n	8004ee2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f831 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e027      	b.n	8004f32 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d10e      	bne.n	8004f0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f81b 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e011      	b.n	8004f32 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b09c      	sub	sp, #112	; 0x70
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	e0a7      	b.n	800509c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	f000 80a3 	beq.w	800509c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fc fdb9 	bl	8001acc <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d13f      	bne.n	8004fec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f80:	667b      	str	r3, [r7, #100]	; 0x64
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e6      	bne.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e5      	bne.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e068      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d050      	beq.n	800509c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005008:	d148      	bne.n	800509c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005012:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
 8005034:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e6      	bne.n	8005014 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	613b      	str	r3, [r7, #16]
   return(result);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	66bb      	str	r3, [r7, #104]	; 0x68
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005066:	623a      	str	r2, [r7, #32]
 8005068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	69f9      	ldr	r1, [r7, #28]
 800506c:	6a3a      	ldr	r2, [r7, #32]
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	61bb      	str	r3, [r7, #24]
   return(result);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e010      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4013      	ands	r3, r2
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	bf0c      	ite	eq
 80050ac:	2301      	moveq	r3, #1
 80050ae:	2300      	movne	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	f43f af48 	beq.w	8004f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3770      	adds	r7, #112	; 0x70
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c8:	b084      	sub	sp, #16
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	f107 001c 	add.w	r0, r7, #28
 80050d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d120      	bne.n	8005122 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	4b20      	ldr	r3, [pc, #128]	; (8005174 <USB_CoreInit+0xac>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d105      	bne.n	8005116 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fa96 	bl	8005648 <USB_CoreReset>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	e010      	b.n	8005144 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa8a 	bl	8005648 <USB_CoreReset>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10b      	bne.n	8005162 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f043 0206 	orr.w	r2, r3, #6
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800516e:	b004      	add	sp, #16
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	ffbdffbf 	.word	0xffbdffbf

08005178 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f023 0201 	bic.w	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d115      	bne.n	80051e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051c8:	2001      	movs	r0, #1
 80051ca:	f7fc fc8b 	bl	8001ae4 <HAL_Delay>
      ms++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fa29 	bl	800562c <USB_GetMode>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d01e      	beq.n	800521e <USB_SetCurrentMode+0x84>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b31      	cmp	r3, #49	; 0x31
 80051e4:	d9f0      	bls.n	80051c8 <USB_SetCurrentMode+0x2e>
 80051e6:	e01a      	b.n	800521e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d115      	bne.n	800521a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f7fc fc72 	bl	8001ae4 <HAL_Delay>
      ms++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa10 	bl	800562c <USB_GetMode>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <USB_SetCurrentMode+0x84>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b31      	cmp	r3, #49	; 0x31
 8005216:	d9f0      	bls.n	80051fa <USB_SetCurrentMode+0x60>
 8005218:	e001      	b.n	800521e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e005      	b.n	800522a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b32      	cmp	r3, #50	; 0x32
 8005222:	d101      	bne.n	8005228 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005234:	b084      	sub	sp, #16
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e009      	b.n	8005268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3340      	adds	r3, #64	; 0x40
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0e      	cmp	r3, #14
 800526c:	d9f2      	bls.n	8005254 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11c      	bne.n	80052ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e005      	b.n	80052ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052c0:	461a      	mov	r2, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	4619      	mov	r1, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d4:	461a      	mov	r2, r3
 80052d6:	680b      	ldr	r3, [r1, #0]
 80052d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10c      	bne.n	80052fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052e6:	2100      	movs	r1, #0
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f965 	bl	80055b8 <USB_SetDevSpeed>
 80052ee:	e008      	b.n	8005302 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052f0:	2101      	movs	r1, #1
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f960 	bl	80055b8 <USB_SetDevSpeed>
 80052f8:	e003      	b.n	8005302 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052fa:	2103      	movs	r1, #3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f95b 	bl	80055b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005302:	2110      	movs	r1, #16
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f8f3 	bl	80054f0 <USB_FlushTxFifo>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f91f 	bl	8005558 <USB_FlushRxFifo>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	461a      	mov	r2, r3
 8005338:	2300      	movs	r3, #0
 800533a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	461a      	mov	r2, r3
 8005344:	2300      	movs	r3, #0
 8005346:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e043      	b.n	80053d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005364:	d118      	bne.n	8005398 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	461a      	mov	r2, r3
 800537a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e013      	b.n	80053aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	461a      	mov	r2, r3
 8005390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e008      	b.n	80053aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	461a      	mov	r2, r3
 80053a6:	2300      	movs	r3, #0
 80053a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b6:	461a      	mov	r2, r3
 80053b8:	2300      	movs	r3, #0
 80053ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	461a      	mov	r2, r3
 80053ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3301      	adds	r3, #1
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d3b7      	bcc.n	800534e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e043      	b.n	800546c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053fa:	d118      	bne.n	800542e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	461a      	mov	r2, r3
 8005410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e013      	b.n	8005440 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	461a      	mov	r2, r3
 8005426:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e008      	b.n	8005440 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	2300      	movs	r3, #0
 800543e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	461a      	mov	r2, r3
 8005460:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005464:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3301      	adds	r3, #1
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	429a      	cmp	r2, r3
 8005472:	d3b7      	bcc.n	80053e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005486:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005494:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f043 0210 	orr.w	r2, r3, #16
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <USB_DevInit+0x2b4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f043 0208 	orr.w	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d105      	bne.n	80054d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699a      	ldr	r2, [r3, #24]
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <USB_DevInit+0x2b8>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054e4:	b004      	add	sp, #16
 80054e6:	4770      	bx	lr
 80054e8:	803c3800 	.word	0x803c3800
 80054ec:	40000004 	.word	0x40000004

080054f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a13      	ldr	r2, [pc, #76]	; (8005554 <USB_FlushTxFifo+0x64>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d901      	bls.n	8005510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e01b      	b.n	8005548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	daf2      	bge.n	80054fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	019b      	lsls	r3, r3, #6
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3301      	adds	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a08      	ldr	r2, [pc, #32]	; (8005554 <USB_FlushTxFifo+0x64>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e006      	b.n	8005548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d0f0      	beq.n	8005528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	00030d40 	.word	0x00030d40

08005558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a11      	ldr	r2, [pc, #68]	; (80055b4 <USB_FlushRxFifo+0x5c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e018      	b.n	80055a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	daf2      	bge.n	8005564 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2210      	movs	r2, #16
 8005586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <USB_FlushRxFifo+0x5c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e006      	b.n	80055a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d0f0      	beq.n	8005588 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005604:	f023 0303 	bic.w	r3, r3, #3
 8005608:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0301 	and.w	r3, r3, #1
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4a13      	ldr	r2, [pc, #76]	; (80056ac <USB_CoreReset+0x64>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e01b      	b.n	800569e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	daf2      	bge.n	8005654 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f043 0201 	orr.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a09      	ldr	r2, [pc, #36]	; (80056ac <USB_CoreReset+0x64>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e006      	b.n	800569e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d0f0      	beq.n	800567e <USB_CoreReset+0x36>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	00030d40 	.word	0x00030d40

080056b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c6:	f3ef 8305 	mrs	r3, IPSR
 80056ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80056cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10f      	bne.n	80056f2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d2:	f3ef 8310 	mrs	r3, PRIMASK
 80056d6:	607b      	str	r3, [r7, #4]
  return(result);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056de:	f3ef 8311 	mrs	r3, BASEPRI
 80056e2:	603b      	str	r3, [r7, #0]
  return(result);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <osKernelInitialize+0x3a>
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <osKernelInitialize+0x64>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d103      	bne.n	80056fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80056f2:	f06f 0305 	mvn.w	r3, #5
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e00c      	b.n	8005714 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <osKernelInitialize+0x64>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <osKernelInitialize+0x64>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e002      	b.n	8005714 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800570e:	f04f 33ff 	mov.w	r3, #4294967295
 8005712:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005714:	68fb      	ldr	r3, [r7, #12]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000910 	.word	0x20000910

08005728 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572e:	f3ef 8305 	mrs	r3, IPSR
 8005732:	60bb      	str	r3, [r7, #8]
  return(result);
 8005734:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573a:	f3ef 8310 	mrs	r3, PRIMASK
 800573e:	607b      	str	r3, [r7, #4]
  return(result);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d105      	bne.n	8005752 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005746:	f3ef 8311 	mrs	r3, BASEPRI
 800574a:	603b      	str	r3, [r7, #0]
  return(result);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <osKernelStart+0x3a>
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <osKernelStart+0x68>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d103      	bne.n	8005762 <osKernelStart+0x3a>
    stat = osErrorISR;
 800575a:	f06f 0305 	mvn.w	r3, #5
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e010      	b.n	8005784 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <osKernelStart+0x68>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d109      	bne.n	800577e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800576a:	f7ff ffa1 	bl	80056b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <osKernelStart+0x68>)
 8005770:	2202      	movs	r2, #2
 8005772:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005774:	f001 fa3e 	bl	8006bf4 <vTaskStartScheduler>
      stat = osOK;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e002      	b.n	8005784 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005784:	68fb      	ldr	r3, [r7, #12]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000910 	.word	0x20000910

08005794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b090      	sub	sp, #64	; 0x40
 8005798:	af04      	add	r7, sp, #16
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a4:	f3ef 8305 	mrs	r3, IPSR
 80057a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80057aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 808f 	bne.w	80058d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b2:	f3ef 8310 	mrs	r3, PRIMASK
 80057b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057be:	f3ef 8311 	mrs	r3, BASEPRI
 80057c2:	617b      	str	r3, [r7, #20]
  return(result);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <osThreadNew+0x3e>
 80057ca:	4b44      	ldr	r3, [pc, #272]	; (80058dc <osThreadNew+0x148>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d07e      	beq.n	80058d0 <osThreadNew+0x13c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d07b      	beq.n	80058d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80057dc:	2318      	movs	r3, #24
 80057de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80057e4:	f04f 33ff 	mov.w	r3, #4294967295
 80057e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d045      	beq.n	800587c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <osThreadNew+0x6a>
        name = attr->name;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <osThreadNew+0x90>
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2b38      	cmp	r3, #56	; 0x38
 8005816:	d805      	bhi.n	8005824 <osThreadNew+0x90>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <osThreadNew+0x94>
        return (NULL);
 8005824:	2300      	movs	r3, #0
 8005826:	e054      	b.n	80058d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	089b      	lsrs	r3, r3, #2
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <osThreadNew+0xca>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2ba7      	cmp	r3, #167	; 0xa7
 8005846:	d90a      	bls.n	800585e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800584c:	2b00      	cmp	r3, #0
 800584e:	d006      	beq.n	800585e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <osThreadNew+0xca>
        mem = 1;
 8005858:	2301      	movs	r3, #1
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	e010      	b.n	8005880 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10c      	bne.n	8005880 <osThreadNew+0xec>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <osThreadNew+0xec>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <osThreadNew+0xec>
          mem = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	e001      	b.n	8005880 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d110      	bne.n	80058a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800588e:	9202      	str	r2, [sp, #8]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fea7 	bl	80065f0 <xTaskCreateStatic>
 80058a2:	4603      	mov	r3, r0
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e013      	b.n	80058d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d110      	bne.n	80058d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fef8 	bl	80066b6 <xTaskCreate>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <osThreadNew+0x13c>
          hTask = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058d0:	693b      	ldr	r3, [r7, #16]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3730      	adds	r7, #48	; 0x30
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000910 	.word	0x20000910

080058e0 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ec:	f3ef 8305 	mrs	r3, IPSR
 80058f0:	617b      	str	r3, [r7, #20]
  return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10f      	bne.n	8005918 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f8:	f3ef 8310 	mrs	r3, PRIMASK
 80058fc:	613b      	str	r3, [r7, #16]
  return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005904:	f3ef 8311 	mrs	r3, BASEPRI
 8005908:	60fb      	str	r3, [r7, #12]
  return(result);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <osThreadSuspend+0x40>
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <osThreadSuspend+0x64>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d103      	bne.n	8005920 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8005918:	f06f 0305 	mvn.w	r3, #5
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	e00b      	b.n	8005938 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8005926:	f06f 0303 	mvn.w	r3, #3
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e004      	b.n	8005938 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8005932:	69b8      	ldr	r0, [r7, #24]
 8005934:	f001 f852 	bl	80069dc <vTaskSuspend>
  }

  return (stat);
 8005938:	69fb      	ldr	r3, [r7, #28]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000910 	.word	0x20000910

08005948 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005954:	f3ef 8305 	mrs	r3, IPSR
 8005958:	617b      	str	r3, [r7, #20]
  return(result);
 800595a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10f      	bne.n	8005980 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005960:	f3ef 8310 	mrs	r3, PRIMASK
 8005964:	613b      	str	r3, [r7, #16]
  return(result);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800596c:	f3ef 8311 	mrs	r3, BASEPRI
 8005970:	60fb      	str	r3, [r7, #12]
  return(result);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <osThreadResume+0x40>
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <osThreadResume+0x64>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d103      	bne.n	8005988 <osThreadResume+0x40>
    stat = osErrorISR;
 8005980:	f06f 0305 	mvn.w	r3, #5
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e00b      	b.n	80059a0 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d103      	bne.n	8005996 <osThreadResume+0x4e>
    stat = osErrorParameter;
 800598e:	f06f 0303 	mvn.w	r3, #3
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e004      	b.n	80059a0 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800599a:	69b8      	ldr	r0, [r7, #24]
 800599c:	f001 f8ca 	bl	8006b34 <vTaskResume>
  }

  return (stat);
 80059a0:	69fb      	ldr	r3, [r7, #28]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000910 	.word	0x20000910

080059b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b8:	f3ef 8305 	mrs	r3, IPSR
 80059bc:	613b      	str	r3, [r7, #16]
  return(result);
 80059be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10f      	bne.n	80059e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c4:	f3ef 8310 	mrs	r3, PRIMASK
 80059c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059d0:	f3ef 8311 	mrs	r3, BASEPRI
 80059d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <osDelay+0x3c>
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <osDelay+0x58>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d103      	bne.n	80059ec <osDelay+0x3c>
    stat = osErrorISR;
 80059e4:	f06f 0305 	mvn.w	r3, #5
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e007      	b.n	80059fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 ffba 	bl	8006970 <vTaskDelay>
    }
  }

  return (stat);
 80059fc:	697b      	ldr	r3, [r7, #20]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000910 	.word	0x20000910

08005a0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a07      	ldr	r2, [pc, #28]	; (8005a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4a06      	ldr	r2, [pc, #24]	; (8005a3c <vApplicationGetIdleTaskMemory+0x30>)
 8005a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	601a      	str	r2, [r3, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000914 	.word	0x20000914
 8005a3c:	200009bc 	.word	0x200009bc

08005a40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <vApplicationGetTimerTaskMemory+0x2c>)
 8005a50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4a06      	ldr	r2, [pc, #24]	; (8005a70 <vApplicationGetTimerTaskMemory+0x30>)
 8005a56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000bbc 	.word	0x20000bbc
 8005a70:	20000c64 	.word	0x20000c64

08005a74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f103 0208 	add.w	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f103 0208 	add.w	r2, r3, #8
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f103 0208 	add.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d103      	bne.n	8005b36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e00c      	b.n	8005b50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e002      	b.n	8005b44 <vListInsert+0x2e>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d2f6      	bcs.n	8005b3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6892      	ldr	r2, [r2, #8]
 8005b9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6852      	ldr	r2, [r2, #4]
 8005ba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d103      	bne.n	8005bbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10c      	bne.n	8005c0a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	b672      	cpsid	i
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	b662      	cpsie	i
 8005c04:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005c0a:	f002 f9af 	bl	8007f6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	441a      	add	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	22ff      	movs	r2, #255	; 0xff
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d114      	bne.n	8005c8a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01a      	beq.n	8005c9e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3310      	adds	r3, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fa69 	bl	8007144 <xTaskRemoveFromEventList>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c78:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <xQueueGenericReset+0xd0>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	e009      	b.n	8005c9e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fef0 	bl	8005a74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3324      	adds	r3, #36	; 0x24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff feeb 	bl	8005a74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c9e:	f002 f999 	bl	8007fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ca2:	2301      	movs	r3, #1
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08e      	sub	sp, #56	; 0x38
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10c      	bne.n	8005cde <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	b672      	cpsid	i
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	b662      	cpsie	i
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10c      	bne.n	8005cfe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	b672      	cpsid	i
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	b662      	cpsie	i
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <xQueueGenericCreateStatic+0x5a>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <xQueueGenericCreateStatic+0x5e>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericCreateStatic+0x60>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10c      	bne.n	8005d2e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	b672      	cpsid	i
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	b662      	cpsie	i
 8005d28:	623b      	str	r3, [r7, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <xQueueGenericCreateStatic+0x8a>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <xQueueGenericCreateStatic+0x8e>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueGenericCreateStatic+0x90>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10c      	bne.n	8005d5e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	61fb      	str	r3, [r7, #28]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d5e:	2350      	movs	r3, #80	; 0x50
 8005d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b50      	cmp	r3, #80	; 0x50
 8005d66:	d00c      	beq.n	8005d82 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	b672      	cpsid	i
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	b662      	cpsie	i
 8005d7c:	61bb      	str	r3, [r7, #24]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f805 	bl	8005db4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3730      	adds	r7, #48	; 0x30
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005de2:	2101      	movs	r1, #1
 8005de4:	69b8      	ldr	r0, [r7, #24]
 8005de6:	f7ff fef9 	bl	8005bdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	; 0x38
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10c      	bne.n	8005e32 <xQueueGenericSend+0x36>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	b672      	cpsid	i
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	b662      	cpsie	i
 8005e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <xQueueGenericSend+0x44>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <xQueueGenericSend+0x48>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <xQueueGenericSend+0x4a>
 8005e44:	2300      	movs	r3, #0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10c      	bne.n	8005e64 <xQueueGenericSend+0x68>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	b672      	cpsid	i
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	b662      	cpsie	i
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d103      	bne.n	8005e72 <xQueueGenericSend+0x76>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <xQueueGenericSend+0x7a>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <xQueueGenericSend+0x7c>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10c      	bne.n	8005e96 <xQueueGenericSend+0x9a>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	b672      	cpsid	i
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	b662      	cpsie	i
 8005e90:	623b      	str	r3, [r7, #32]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e96:	f001 fb1f 	bl	80074d8 <xTaskGetSchedulerState>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <xQueueGenericSend+0xaa>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSend+0xae>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSend+0xb0>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10c      	bne.n	8005eca <xQueueGenericSend+0xce>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	61fb      	str	r3, [r7, #28]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eca:	f002 f84f 	bl	8007f6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <xQueueGenericSend+0xe4>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d129      	bne.n	8005f34 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee6:	f000 fa15 	bl	8006314 <prvCopyDataToQueue>
 8005eea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 f923 	bl	8007144 <xTaskRemoveFromEventList>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d013      	beq.n	8005f2c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f04:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <xQueueGenericSend+0x208>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	e00a      	b.n	8005f2c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f1c:	4b39      	ldr	r3, [pc, #228]	; (8006004 <xQueueGenericSend+0x208>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f2c:	f002 f852 	bl	8007fd4 <vPortExitCritical>
				return pdPASS;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e063      	b.n	8005ffc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f3a:	f002 f84b 	bl	8007fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e05c      	b.n	8005ffc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 f95f 	bl	8007210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f56:	f002 f83d 	bl	8007fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f5a:	f000 febf 	bl	8006cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f5e:	f002 f805 	bl	8007f6c <vPortEnterCritical>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d103      	bne.n	8005f78 <xQueueGenericSend+0x17c>
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d103      	bne.n	8005f8e <xQueueGenericSend+0x192>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f8e:	f002 f821 	bl	8007fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f92:	1d3a      	adds	r2, r7, #4
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f94e 	bl	800723c <xTaskCheckForTimeOut>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d124      	bne.n	8005ff0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa8:	f000 faac 	bl	8006504 <prvIsQueueFull>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d018      	beq.n	8005fe4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 f86e 	bl	800709c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc2:	f000 fa37 	bl	8006434 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fc6:	f000 fe97 	bl	8006cf8 <xTaskResumeAll>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f47f af7c 	bne.w	8005eca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <xQueueGenericSend+0x208>)
 8005fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	e772      	b.n	8005eca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fe6:	f000 fa25 	bl	8006434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fea:	f000 fe85 	bl	8006cf8 <xTaskResumeAll>
 8005fee:	e76c      	b.n	8005eca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff2:	f000 fa1f 	bl	8006434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ff6:	f000 fe7f 	bl	8006cf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ffa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3738      	adds	r7, #56	; 0x38
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10c      	bne.n	800603a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	b672      	cpsid	i
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	b662      	cpsie	i
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <xQueueGenericSendFromISR+0x40>
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <xQueueGenericSendFromISR+0x44>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <xQueueGenericSendFromISR+0x46>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10c      	bne.n	800606c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	b672      	cpsid	i
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	b662      	cpsie	i
 8006066:	623b      	str	r3, [r7, #32]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d103      	bne.n	800607a <xQueueGenericSendFromISR+0x72>
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <xQueueGenericSendFromISR+0x76>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <xQueueGenericSendFromISR+0x78>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10c      	bne.n	800609e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	b672      	cpsid	i
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	b662      	cpsie	i
 8006098:	61fb      	str	r3, [r7, #28]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800609e:	f002 f84d 	bl	800813c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060a2:	f3ef 8211 	mrs	r2, BASEPRI
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	b672      	cpsid	i
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	b662      	cpsie	i
 80060ba:	61ba      	str	r2, [r7, #24]
 80060bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <xQueueGenericSendFromISR+0xcc>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d12c      	bne.n	800612e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e4:	f000 f916 	bl	8006314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d112      	bne.n	8006118 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d016      	beq.n	8006128 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	3324      	adds	r3, #36	; 0x24
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 f820 	bl	8007144 <xTaskRemoveFromEventList>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00e      	beq.n	8006128 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e007      	b.n	8006128 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006118:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800611c:	3301      	adds	r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	b25a      	sxtb	r2, r3
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006128:	2301      	movs	r3, #1
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800612c:	e001      	b.n	8006132 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800612e:	2300      	movs	r3, #0
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800613c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006140:	4618      	mov	r0, r3
 8006142:	3738      	adds	r7, #56	; 0x38
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08c      	sub	sp, #48	; 0x30
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10c      	bne.n	800617c <xQueueReceive+0x34>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	b672      	cpsid	i
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	b662      	cpsie	i
 8006176:	623b      	str	r3, [r7, #32]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <xQueueReceive+0x42>
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <xQueueReceive+0x46>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueReceive+0x48>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <xQueueReceive+0x66>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	b672      	cpsid	i
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	b662      	cpsie	i
 80061a8:	61fb      	str	r3, [r7, #28]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ae:	f001 f993 	bl	80074d8 <xTaskGetSchedulerState>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <xQueueReceive+0x76>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueReceive+0x7a>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueReceive+0x7c>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10c      	bne.n	80061e2 <xQueueReceive+0x9a>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	b672      	cpsid	i
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	b662      	cpsie	i
 80061dc:	61bb      	str	r3, [r7, #24]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e2:	f001 fec3 	bl	8007f6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01f      	beq.n	8006232 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	f000 f8f7 	bl	80063e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00f      	beq.n	800622a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	3310      	adds	r3, #16
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ff98 	bl	8007144 <xTaskRemoveFromEventList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800621a:	4b3d      	ldr	r3, [pc, #244]	; (8006310 <xQueueReceive+0x1c8>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800622a:	f001 fed3 	bl	8007fd4 <vPortExitCritical>
				return pdPASS;
 800622e:	2301      	movs	r3, #1
 8006230:	e069      	b.n	8006306 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006238:	f001 fecc 	bl	8007fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800623c:	2300      	movs	r3, #0
 800623e:	e062      	b.n	8006306 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006246:	f107 0310 	add.w	r3, r7, #16
 800624a:	4618      	mov	r0, r3
 800624c:	f000 ffe0 	bl	8007210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006254:	f001 febe 	bl	8007fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006258:	f000 fd40 	bl	8006cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800625c:	f001 fe86 	bl	8007f6c <vPortEnterCritical>
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006266:	b25b      	sxtb	r3, r3
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d103      	bne.n	8006276 <xQueueReceive+0x12e>
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800627c:	b25b      	sxtb	r3, r3
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d103      	bne.n	800628c <xQueueReceive+0x144>
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628c:	f001 fea2 	bl	8007fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006290:	1d3a      	adds	r2, r7, #4
 8006292:	f107 0310 	add.w	r3, r7, #16
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f000 ffcf 	bl	800723c <xTaskCheckForTimeOut>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d123      	bne.n	80062ec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a6:	f000 f917 	bl	80064d8 <prvIsQueueEmpty>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 feef 	bl	800709c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c0:	f000 f8b8 	bl	8006434 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c4:	f000 fd18 	bl	8006cf8 <xTaskResumeAll>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d189      	bne.n	80061e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80062ce:	4b10      	ldr	r3, [pc, #64]	; (8006310 <xQueueReceive+0x1c8>)
 80062d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	e780      	b.n	80061e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e2:	f000 f8a7 	bl	8006434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e6:	f000 fd07 	bl	8006cf8 <xTaskResumeAll>
 80062ea:	e77a      	b.n	80061e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ee:	f000 f8a1 	bl	8006434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f2:	f000 fd01 	bl	8006cf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f8:	f000 f8ee 	bl	80064d8 <prvIsQueueEmpty>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f43f af6f 	beq.w	80061e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006306:	4618      	mov	r0, r3
 8006308:	3730      	adds	r7, #48	; 0x30
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10d      	bne.n	800634e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d14d      	bne.n	80063d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f001 f8e8 	bl	8007514 <xTaskPriorityDisinherit>
 8006344:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	609a      	str	r2, [r3, #8]
 800634c:	e043      	b.n	80063d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d119      	bne.n	8006388 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6858      	ldr	r0, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	461a      	mov	r2, r3
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	f002 ff4b 	bl	80091fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	441a      	add	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	d32b      	bcc.n	80063d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	e026      	b.n	80063d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68d8      	ldr	r0, [r3, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	461a      	mov	r2, r3
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	f002 ff31 	bl	80091fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	425b      	negs	r3, r3
 80063a2:	441a      	add	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d207      	bcs.n	80063c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	425b      	negs	r3, r3
 80063be:	441a      	add	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d105      	bne.n	80063d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063de:	697b      	ldr	r3, [r7, #20]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d018      	beq.n	800642c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	441a      	add	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	429a      	cmp	r2, r3
 8006412:	d303      	bcc.n	800641c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68d9      	ldr	r1, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	461a      	mov	r2, r3
 8006426:	6838      	ldr	r0, [r7, #0]
 8006428:	f002 fee7 	bl	80091fa <memcpy>
	}
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800643c:	f001 fd96 	bl	8007f6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006446:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006448:	e011      	b.n	800646e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d012      	beq.n	8006478 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3324      	adds	r3, #36	; 0x24
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fe74 	bl	8007144 <xTaskRemoveFromEventList>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006462:	f000 ff51 	bl	8007308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	3b01      	subs	r3, #1
 800646a:	b2db      	uxtb	r3, r3
 800646c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800646e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dce9      	bgt.n	800644a <prvUnlockQueue+0x16>
 8006476:	e000      	b.n	800647a <prvUnlockQueue+0x46>
					break;
 8006478:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	22ff      	movs	r2, #255	; 0xff
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006482:	f001 fda7 	bl	8007fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006486:	f001 fd71 	bl	8007f6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006490:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006492:	e011      	b.n	80064b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3310      	adds	r3, #16
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fe4f 	bl	8007144 <xTaskRemoveFromEventList>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064ac:	f000 ff2c 	bl	8007308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dce9      	bgt.n	8006494 <prvUnlockQueue+0x60>
 80064c0:	e000      	b.n	80064c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	22ff      	movs	r2, #255	; 0xff
 80064c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80064cc:	f001 fd82 	bl	8007fd4 <vPortExitCritical>
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064e0:	f001 fd44 	bl	8007f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e001      	b.n	80064f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064f6:	f001 fd6d 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 80064fa:	68fb      	ldr	r3, [r7, #12]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800650c:	f001 fd2e 	bl	8007f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006518:	429a      	cmp	r2, r3
 800651a:	d102      	bne.n	8006522 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e001      	b.n	8006526 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006526:	f001 fd55 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 800652a:	68fb      	ldr	r3, [r7, #12]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e014      	b.n	800656e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006544:	4a0f      	ldr	r2, [pc, #60]	; (8006584 <vQueueAddToRegistry+0x50>)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10b      	bne.n	8006568 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006550:	490c      	ldr	r1, [pc, #48]	; (8006584 <vQueueAddToRegistry+0x50>)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800655a:	4a0a      	ldr	r2, [pc, #40]	; (8006584 <vQueueAddToRegistry+0x50>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006566:	e006      	b.n	8006576 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b07      	cmp	r3, #7
 8006572:	d9e7      	bls.n	8006544 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20001064 	.word	0x20001064

08006588 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006598:	f001 fce8 	bl	8007f6c <vPortEnterCritical>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a2:	b25b      	sxtb	r3, r3
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d103      	bne.n	80065b2 <vQueueWaitForMessageRestricted+0x2a>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065b8:	b25b      	sxtb	r3, r3
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065be:	d103      	bne.n	80065c8 <vQueueWaitForMessageRestricted+0x40>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c8:	f001 fd04 	bl	8007fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	3324      	adds	r3, #36	; 0x24
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fd83 	bl	80070e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065e2:	6978      	ldr	r0, [r7, #20]
 80065e4:	f7ff ff26 	bl	8006434 <prvUnlockQueue>
	}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08e      	sub	sp, #56	; 0x38
 80065f4:	af04      	add	r7, sp, #16
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10c      	bne.n	800661e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	b672      	cpsid	i
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	b662      	cpsie	i
 8006618:	623b      	str	r3, [r7, #32]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10c      	bne.n	800663e <xTaskCreateStatic+0x4e>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	b672      	cpsid	i
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	b662      	cpsie	i
 8006638:	61fb      	str	r3, [r7, #28]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800663e:	23a8      	movs	r3, #168	; 0xa8
 8006640:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2ba8      	cmp	r3, #168	; 0xa8
 8006646:	d00c      	beq.n	8006662 <xTaskCreateStatic+0x72>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	b672      	cpsid	i
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	b662      	cpsie	i
 800665c:	61bb      	str	r3, [r7, #24]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006662:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01e      	beq.n	80066a8 <xTaskCreateStatic+0xb8>
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006678:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	2202      	movs	r2, #2
 800667e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006682:	2300      	movs	r3, #0
 8006684:	9303      	str	r3, [sp, #12]
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	9302      	str	r3, [sp, #8]
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f850 	bl	8006740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a2:	f000 f8f5 	bl	8006890 <prvAddNewTaskToReadyList>
 80066a6:	e001      	b.n	80066ac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066ac:	697b      	ldr	r3, [r7, #20]
	}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3728      	adds	r7, #40	; 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b08c      	sub	sp, #48	; 0x30
 80066ba:	af04      	add	r7, sp, #16
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fd7a 	bl	80081c4 <pvPortMalloc>
 80066d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00e      	beq.n	80066f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066d8:	20a8      	movs	r0, #168	; 0xa8
 80066da:	f001 fd73 	bl	80081c4 <pvPortMalloc>
 80066de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
 80066ec:	e005      	b.n	80066fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066ee:	6978      	ldr	r0, [r7, #20]
 80066f0:	f001 fe32 	bl	8008358 <vPortFree>
 80066f4:	e001      	b.n	80066fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006708:	88fa      	ldrh	r2, [r7, #6]
 800670a:	2300      	movs	r3, #0
 800670c:	9303      	str	r3, [sp, #12]
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	9302      	str	r3, [sp, #8]
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f80e 	bl	8006740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006724:	69f8      	ldr	r0, [r7, #28]
 8006726:	f000 f8b3 	bl	8006890 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800672a:	2301      	movs	r3, #1
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	e002      	b.n	8006736 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006730:	f04f 33ff 	mov.w	r3, #4294967295
 8006734:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006736:	69bb      	ldr	r3, [r7, #24]
	}
 8006738:	4618      	mov	r0, r3
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	461a      	mov	r2, r3
 8006758:	21a5      	movs	r1, #165	; 0xa5
 800675a:	f002 fc78 	bl	800904e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006768:	440b      	add	r3, r1
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f023 0307 	bic.w	r3, r3, #7
 8006776:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00c      	beq.n	800679c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	617b      	str	r3, [r7, #20]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01f      	beq.n	80067e2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	e012      	b.n	80067ce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	7819      	ldrb	r1, [r3, #0]
 80067b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	3334      	adds	r3, #52	; 0x34
 80067b8:	460a      	mov	r2, r1
 80067ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d006      	beq.n	80067d6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3301      	adds	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2b0f      	cmp	r3, #15
 80067d2:	d9e9      	bls.n	80067a8 <prvInitialiseNewTask+0x68>
 80067d4:	e000      	b.n	80067d8 <prvInitialiseNewTask+0x98>
			{
				break;
 80067d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e0:	e003      	b.n	80067ea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	2b37      	cmp	r3, #55	; 0x37
 80067ee:	d901      	bls.n	80067f4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067f0:	2337      	movs	r3, #55	; 0x37
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	2200      	movs	r2, #0
 8006804:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff f952 	bl	8005ab4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	3318      	adds	r3, #24
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff f94d 	bl	8005ab4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	2200      	movs	r2, #0
 800683c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	3354      	adds	r3, #84	; 0x54
 8006844:	224c      	movs	r2, #76	; 0x4c
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f002 fc00 	bl	800904e <memset>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <prvInitialiseNewTask+0x144>)
 8006852:	659a      	str	r2, [r3, #88]	; 0x58
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <prvInitialiseNewTask+0x148>)
 8006858:	65da      	str	r2, [r3, #92]	; 0x5c
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	4a0b      	ldr	r2, [pc, #44]	; (800688c <prvInitialiseNewTask+0x14c>)
 800685e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	69b8      	ldr	r0, [r7, #24]
 8006866:	f001 fa77 	bl	8007d58 <pxPortInitialiseStack>
 800686a:	4602      	mov	r2, r0
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800687c:	bf00      	nop
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	200052f0 	.word	0x200052f0
 8006888:	20005358 	.word	0x20005358
 800688c:	200053c0 	.word	0x200053c0

08006890 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006898:	f001 fb68 	bl	8007f6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800689c:	4b2d      	ldr	r3, [pc, #180]	; (8006954 <prvAddNewTaskToReadyList+0xc4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3301      	adds	r3, #1
 80068a2:	4a2c      	ldr	r2, [pc, #176]	; (8006954 <prvAddNewTaskToReadyList+0xc4>)
 80068a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068a6:	4b2c      	ldr	r3, [pc, #176]	; (8006958 <prvAddNewTaskToReadyList+0xc8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ae:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <prvAddNewTaskToReadyList+0xc8>)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068b4:	4b27      	ldr	r3, [pc, #156]	; (8006954 <prvAddNewTaskToReadyList+0xc4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d110      	bne.n	80068de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068bc:	f000 fd48 	bl	8007350 <prvInitialiseTaskLists>
 80068c0:	e00d      	b.n	80068de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068c2:	4b26      	ldr	r3, [pc, #152]	; (800695c <prvAddNewTaskToReadyList+0xcc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068ca:	4b23      	ldr	r3, [pc, #140]	; (8006958 <prvAddNewTaskToReadyList+0xc8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d802      	bhi.n	80068de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068d8:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <prvAddNewTaskToReadyList+0xc8>)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068de:	4b20      	ldr	r3, [pc, #128]	; (8006960 <prvAddNewTaskToReadyList+0xd0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	4a1e      	ldr	r2, [pc, #120]	; (8006960 <prvAddNewTaskToReadyList+0xd0>)
 80068e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068e8:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <prvAddNewTaskToReadyList+0xd0>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <prvAddNewTaskToReadyList+0xd4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d903      	bls.n	8006904 <prvAddNewTaskToReadyList+0x74>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a18      	ldr	r2, [pc, #96]	; (8006964 <prvAddNewTaskToReadyList+0xd4>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a15      	ldr	r2, [pc, #84]	; (8006968 <prvAddNewTaskToReadyList+0xd8>)
 8006912:	441a      	add	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7ff f8d7 	bl	8005ace <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006920:	f001 fb58 	bl	8007fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006924:	4b0d      	ldr	r3, [pc, #52]	; (800695c <prvAddNewTaskToReadyList+0xcc>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00e      	beq.n	800694a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <prvAddNewTaskToReadyList+0xc8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	429a      	cmp	r2, r3
 8006938:	d207      	bcs.n	800694a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <prvAddNewTaskToReadyList+0xdc>)
 800693c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20001578 	.word	0x20001578
 8006958:	200010a4 	.word	0x200010a4
 800695c:	20001584 	.word	0x20001584
 8006960:	20001594 	.word	0x20001594
 8006964:	20001580 	.word	0x20001580
 8006968:	200010a8 	.word	0x200010a8
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d019      	beq.n	80069b6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <vTaskDelay+0x64>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00c      	beq.n	80069a4 <vTaskDelay+0x34>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	b672      	cpsid	i
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	b662      	cpsie	i
 800699e:	60bb      	str	r3, [r7, #8]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80069a4:	f000 f99a 	bl	8006cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069a8:	2100      	movs	r1, #0
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fe24 	bl	80075f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069b0:	f000 f9a2 	bl	8006cf8 <xTaskResumeAll>
 80069b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d107      	bne.n	80069cc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <vTaskDelay+0x68>)
 80069be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	200015a0 	.word	0x200015a0
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80069e4:	f001 fac2 	bl	8007f6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <vTaskSuspend+0x18>
 80069ee:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <vTaskSuspend+0xd8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	e000      	b.n	80069f6 <vTaskSuspend+0x1a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff f8c3 	bl	8005b88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3318      	adds	r3, #24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff f8ba 	bl	8005b88 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4827      	ldr	r0, [pc, #156]	; (8006ab8 <vTaskSuspend+0xdc>)
 8006a1c:	f7ff f857 	bl	8005ace <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d103      	bne.n	8006a34 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006a34:	f001 face 	bl	8007fd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006a38:	4b20      	ldr	r3, [pc, #128]	; (8006abc <vTaskSuspend+0xe0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006a40:	f001 fa94 	bl	8007f6c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006a44:	f000 fd28 	bl	8007498 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006a48:	f001 fac4 	bl	8007fd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006a4c:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <vTaskSuspend+0xd8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d129      	bne.n	8006aaa <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8006a56:	4b19      	ldr	r3, [pc, #100]	; (8006abc <vTaskSuspend+0xe0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d019      	beq.n	8006a92 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006a5e:	4b18      	ldr	r3, [pc, #96]	; (8006ac0 <vTaskSuspend+0xe4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <vTaskSuspend+0xa4>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	b672      	cpsid	i
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	b662      	cpsie	i
 8006a7a:	60bb      	str	r3, [r7, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8006a80:	4b10      	ldr	r3, [pc, #64]	; (8006ac4 <vTaskSuspend+0xe8>)
 8006a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a90:	e00b      	b.n	8006aaa <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <vTaskSuspend+0xdc>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <vTaskSuspend+0xec>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d103      	bne.n	8006aa6 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <vTaskSuspend+0xd8>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
	}
 8006aa4:	e001      	b.n	8006aaa <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8006aa6:	f000 fa93 	bl	8006fd0 <vTaskSwitchContext>
	}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200010a4 	.word	0x200010a4
 8006ab8:	20001564 	.word	0x20001564
 8006abc:	20001584 	.word	0x20001584
 8006ac0:	200015a0 	.word	0x200015a0
 8006ac4:	e000ed04 	.word	0xe000ed04
 8006ac8:	20001578 	.word	0x20001578

08006acc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10c      	bne.n	8006afc <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	b672      	cpsid	i
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	b662      	cpsie	i
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <prvTaskIsTaskSuspended+0x60>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d10a      	bne.n	8006b1c <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <prvTaskIsTaskSuspended+0x64>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d005      	beq.n	8006b1c <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b1c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006b1e:	4618      	mov	r0, r3
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20001564 	.word	0x20001564
 8006b30:	20001538 	.word	0x20001538

08006b34 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10c      	bne.n	8006b60 <vTaskResume+0x2c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	b672      	cpsid	i
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	b662      	cpsie	i
 8006b5a:	60bb      	str	r3, [r7, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006b60:	4b20      	ldr	r3, [pc, #128]	; (8006be4 <vTaskResume+0xb0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d038      	beq.n	8006bdc <vTaskResume+0xa8>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d035      	beq.n	8006bdc <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8006b70:	f001 f9fc 	bl	8007f6c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff ffa9 	bl	8006acc <prvTaskIsTaskSuspended>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d02b      	beq.n	8006bd8 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe ffff 	bl	8005b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8e:	4b16      	ldr	r3, [pc, #88]	; (8006be8 <vTaskResume+0xb4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d903      	bls.n	8006b9e <vTaskResume+0x6a>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <vTaskResume+0xb4>)
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <vTaskResume+0xb8>)
 8006bac:	441a      	add	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f7fe ff8a 	bl	8005ace <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <vTaskResume+0xb0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d307      	bcc.n	8006bd8 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <vTaskResume+0xbc>)
 8006bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006bd8:	f001 f9fc 	bl	8007fd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	200010a4 	.word	0x200010a4
 8006be8:	20001580 	.word	0x20001580
 8006bec:	200010a8 	.word	0x200010a8
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08a      	sub	sp, #40	; 0x28
 8006bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c02:	463a      	mov	r2, r7
 8006c04:	1d39      	adds	r1, r7, #4
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe fefe 	bl	8005a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	9202      	str	r2, [sp, #8]
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	460a      	mov	r2, r1
 8006c22:	4926      	ldr	r1, [pc, #152]	; (8006cbc <vTaskStartScheduler+0xc8>)
 8006c24:	4826      	ldr	r0, [pc, #152]	; (8006cc0 <vTaskStartScheduler+0xcc>)
 8006c26:	f7ff fce3 	bl	80065f0 <xTaskCreateStatic>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4a25      	ldr	r2, [pc, #148]	; (8006cc4 <vTaskStartScheduler+0xd0>)
 8006c2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c30:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <vTaskStartScheduler+0xd0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	e001      	b.n	8006c42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d102      	bne.n	8006c4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c48:	f000 fd2a 	bl	80076a0 <xTimerCreateTimerTask>
 8006c4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d11d      	bne.n	8006c90 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	b672      	cpsid	i
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	b662      	cpsie	i
 8006c68:	613b      	str	r3, [r7, #16]
}
 8006c6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c6c:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <vTaskStartScheduler+0xd4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3354      	adds	r3, #84	; 0x54
 8006c72:	4a16      	ldr	r2, [pc, #88]	; (8006ccc <vTaskStartScheduler+0xd8>)
 8006c74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c76:	4b16      	ldr	r3, [pc, #88]	; (8006cd0 <vTaskStartScheduler+0xdc>)
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c7e:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <vTaskStartScheduler+0xe0>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c84:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <vTaskStartScheduler+0xe4>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c8a:	f001 f8f1 	bl	8007e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c8e:	e010      	b.n	8006cb2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d10c      	bne.n	8006cb2 <vTaskStartScheduler+0xbe>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	b672      	cpsid	i
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	b662      	cpsie	i
 8006cac:	60fb      	str	r3, [r7, #12]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <vTaskStartScheduler+0xbc>
}
 8006cb2:	bf00      	nop
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	0800b434 	.word	0x0800b434
 8006cc0:	08007321 	.word	0x08007321
 8006cc4:	2000159c 	.word	0x2000159c
 8006cc8:	200010a4 	.word	0x200010a4
 8006ccc:	20000098 	.word	0x20000098
 8006cd0:	20001598 	.word	0x20001598
 8006cd4:	20001584 	.word	0x20001584
 8006cd8:	2000157c 	.word	0x2000157c

08006cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <vTaskSuspendAll+0x18>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a03      	ldr	r2, [pc, #12]	; (8006cf4 <vTaskSuspendAll+0x18>)
 8006ce8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006cea:	bf00      	nop
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	200015a0 	.word	0x200015a0

08006cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d06:	4b43      	ldr	r3, [pc, #268]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10c      	bne.n	8006d28 <xTaskResumeAll+0x30>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	b672      	cpsid	i
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	b662      	cpsie	i
 8006d22:	603b      	str	r3, [r7, #0]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d28:	f001 f920 	bl	8007f6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d2c:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4a38      	ldr	r2, [pc, #224]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006d34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d162      	bne.n	8006e04 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <xTaskResumeAll+0x120>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d05e      	beq.n	8006e04 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d46:	e02f      	b.n	8006da8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d48:	4b34      	ldr	r3, [pc, #208]	; (8006e1c <xTaskResumeAll+0x124>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3318      	adds	r3, #24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe ff17 	bl	8005b88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe ff12 	bl	8005b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4b2d      	ldr	r3, [pc, #180]	; (8006e20 <xTaskResumeAll+0x128>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d903      	bls.n	8006d78 <xTaskResumeAll+0x80>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <xTaskResumeAll+0x128>)
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a27      	ldr	r2, [pc, #156]	; (8006e24 <xTaskResumeAll+0x12c>)
 8006d86:	441a      	add	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fe fe9d 	bl	8005ace <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d98:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <xTaskResumeAll+0x130>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d302      	bcc.n	8006da8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <xTaskResumeAll+0x134>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006da8:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <xTaskResumeAll+0x124>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1cb      	bne.n	8006d48 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006db6:	f000 fb6f 	bl	8007498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dba:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <xTaskResumeAll+0x138>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d010      	beq.n	8006de8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dc6:	f000 f847 	bl	8006e58 <xTaskIncrementTick>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006dd0:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <xTaskResumeAll+0x134>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f1      	bne.n	8006dc6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006de2:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <xTaskResumeAll+0x138>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <xTaskResumeAll+0x134>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006df4:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <xTaskResumeAll+0x13c>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 f8e6 	bl	8007fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e08:	68bb      	ldr	r3, [r7, #8]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200015a0 	.word	0x200015a0
 8006e18:	20001578 	.word	0x20001578
 8006e1c:	20001538 	.word	0x20001538
 8006e20:	20001580 	.word	0x20001580
 8006e24:	200010a8 	.word	0x200010a8
 8006e28:	200010a4 	.word	0x200010a4
 8006e2c:	2000158c 	.word	0x2000158c
 8006e30:	20001588 	.word	0x20001588
 8006e34:	e000ed04 	.word	0xe000ed04

08006e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <xTaskGetTickCount+0x1c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e44:	687b      	ldr	r3, [r7, #4]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	2000157c 	.word	0x2000157c

08006e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e62:	4b50      	ldr	r3, [pc, #320]	; (8006fa4 <xTaskIncrementTick+0x14c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f040 808b 	bne.w	8006f82 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e6c:	4b4e      	ldr	r3, [pc, #312]	; (8006fa8 <xTaskIncrementTick+0x150>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e74:	4a4c      	ldr	r2, [pc, #304]	; (8006fa8 <xTaskIncrementTick+0x150>)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d122      	bne.n	8006ec6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e80:	4b4a      	ldr	r3, [pc, #296]	; (8006fac <xTaskIncrementTick+0x154>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	b672      	cpsid	i
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	b662      	cpsie	i
 8006e9e:	603b      	str	r3, [r7, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskIncrementTick+0x4a>
 8006ea4:	4b41      	ldr	r3, [pc, #260]	; (8006fac <xTaskIncrementTick+0x154>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <xTaskIncrementTick+0x158>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a3f      	ldr	r2, [pc, #252]	; (8006fac <xTaskIncrementTick+0x154>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	4a3f      	ldr	r2, [pc, #252]	; (8006fb0 <xTaskIncrementTick+0x158>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <xTaskIncrementTick+0x15c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	4a3d      	ldr	r2, [pc, #244]	; (8006fb4 <xTaskIncrementTick+0x15c>)
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	f000 fae9 	bl	8007498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ec6:	4b3c      	ldr	r3, [pc, #240]	; (8006fb8 <xTaskIncrementTick+0x160>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d349      	bcc.n	8006f64 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed0:	4b36      	ldr	r3, [pc, #216]	; (8006fac <xTaskIncrementTick+0x154>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eda:	4b37      	ldr	r3, [pc, #220]	; (8006fb8 <xTaskIncrementTick+0x160>)
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee0:	601a      	str	r2, [r3, #0]
					break;
 8006ee2:	e03f      	b.n	8006f64 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee4:	4b31      	ldr	r3, [pc, #196]	; (8006fac <xTaskIncrementTick+0x154>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d203      	bcs.n	8006f04 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006efc:	4a2e      	ldr	r2, [pc, #184]	; (8006fb8 <xTaskIncrementTick+0x160>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f02:	e02f      	b.n	8006f64 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fe3d 	bl	8005b88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3318      	adds	r3, #24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fe34 	bl	8005b88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4b25      	ldr	r3, [pc, #148]	; (8006fbc <xTaskIncrementTick+0x164>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d903      	bls.n	8006f34 <xTaskIncrementTick+0xdc>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	4a22      	ldr	r2, [pc, #136]	; (8006fbc <xTaskIncrementTick+0x164>)
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <xTaskIncrementTick+0x168>)
 8006f42:	441a      	add	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f7fe fdbf 	bl	8005ace <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <xTaskIncrementTick+0x16c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d3b8      	bcc.n	8006ed0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f62:	e7b5      	b.n	8006ed0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f64:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <xTaskIncrementTick+0x16c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	4915      	ldr	r1, [pc, #84]	; (8006fc0 <xTaskIncrementTick+0x168>)
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d907      	bls.n	8006f8c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e004      	b.n	8006f8c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <xTaskIncrementTick+0x170>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	4a0f      	ldr	r2, [pc, #60]	; (8006fc8 <xTaskIncrementTick+0x170>)
 8006f8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <xTaskIncrementTick+0x174>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f98:	697b      	ldr	r3, [r7, #20]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200015a0 	.word	0x200015a0
 8006fa8:	2000157c 	.word	0x2000157c
 8006fac:	20001530 	.word	0x20001530
 8006fb0:	20001534 	.word	0x20001534
 8006fb4:	20001590 	.word	0x20001590
 8006fb8:	20001598 	.word	0x20001598
 8006fbc:	20001580 	.word	0x20001580
 8006fc0:	200010a8 	.word	0x200010a8
 8006fc4:	200010a4 	.word	0x200010a4
 8006fc8:	20001588 	.word	0x20001588
 8006fcc:	2000158c 	.word	0x2000158c

08006fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fd6:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <vTaskSwitchContext+0xb4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fde:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <vTaskSwitchContext+0xb8>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fe4:	e048      	b.n	8007078 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8006fe6:	4b28      	ldr	r3, [pc, #160]	; (8007088 <vTaskSwitchContext+0xb8>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fec:	4b27      	ldr	r3, [pc, #156]	; (800708c <vTaskSwitchContext+0xbc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e012      	b.n	800701a <vTaskSwitchContext+0x4a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10c      	bne.n	8007014 <vTaskSwitchContext+0x44>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	b672      	cpsid	i
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	b662      	cpsie	i
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <vTaskSwitchContext+0x42>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3b01      	subs	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	491d      	ldr	r1, [pc, #116]	; (8007090 <vTaskSwitchContext+0xc0>)
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0e2      	beq.n	8006ff4 <vTaskSwitchContext+0x24>
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <vTaskSwitchContext+0xc0>)
 800703a:	4413      	add	r3, r2
 800703c:	60bb      	str	r3, [r7, #8]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3308      	adds	r3, #8
 8007050:	429a      	cmp	r2, r3
 8007052:	d104      	bne.n	800705e <vTaskSwitchContext+0x8e>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	605a      	str	r2, [r3, #4]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4a0b      	ldr	r2, [pc, #44]	; (8007094 <vTaskSwitchContext+0xc4>)
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	4a08      	ldr	r2, [pc, #32]	; (800708c <vTaskSwitchContext+0xbc>)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800706e:	4b09      	ldr	r3, [pc, #36]	; (8007094 <vTaskSwitchContext+0xc4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3354      	adds	r3, #84	; 0x54
 8007074:	4a08      	ldr	r2, [pc, #32]	; (8007098 <vTaskSwitchContext+0xc8>)
 8007076:	6013      	str	r3, [r2, #0]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	200015a0 	.word	0x200015a0
 8007088:	2000158c 	.word	0x2000158c
 800708c:	20001580 	.word	0x20001580
 8007090:	200010a8 	.word	0x200010a8
 8007094:	200010a4 	.word	0x200010a4
 8007098:	20000098 	.word	0x20000098

0800709c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10c      	bne.n	80070c6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	b672      	cpsid	i
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	b662      	cpsie	i
 80070c0:	60fb      	str	r3, [r7, #12]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <vTaskPlaceOnEventList+0x48>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3318      	adds	r3, #24
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe fd21 	bl	8005b16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070d4:	2101      	movs	r1, #1
 80070d6:	6838      	ldr	r0, [r7, #0]
 80070d8:	f000 fa8e 	bl	80075f8 <prvAddCurrentTaskToDelayedList>
}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	200010a4 	.word	0x200010a4

080070e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10c      	bne.n	8007114 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	b672      	cpsid	i
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	b662      	cpsie	i
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007114:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <vTaskPlaceOnEventListRestricted+0x58>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3318      	adds	r3, #24
 800711a:	4619      	mov	r1, r3
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7fe fcd6 	bl	8005ace <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	68b8      	ldr	r0, [r7, #8]
 8007132:	f000 fa61 	bl	80075f8 <prvAddCurrentTaskToDelayedList>
	}
 8007136:	bf00      	nop
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200010a4 	.word	0x200010a4

08007144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10c      	bne.n	8007174 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	b672      	cpsid	i
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	b662      	cpsie	i
 800716e:	60fb      	str	r3, [r7, #12]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3318      	adds	r3, #24
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe fd05 	bl	8005b88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800717e:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <xTaskRemoveFromEventList+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d11d      	bne.n	80071c2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3304      	adds	r3, #4
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fcfc 	bl	8005b88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007194:	4b19      	ldr	r3, [pc, #100]	; (80071fc <xTaskRemoveFromEventList+0xb8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d903      	bls.n	80071a4 <xTaskRemoveFromEventList+0x60>
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <xTaskRemoveFromEventList+0xb8>)
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4a13      	ldr	r2, [pc, #76]	; (8007200 <xTaskRemoveFromEventList+0xbc>)
 80071b2:	441a      	add	r2, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4619      	mov	r1, r3
 80071ba:	4610      	mov	r0, r2
 80071bc:	f7fe fc87 	bl	8005ace <vListInsertEnd>
 80071c0:	e005      	b.n	80071ce <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3318      	adds	r3, #24
 80071c6:	4619      	mov	r1, r3
 80071c8:	480e      	ldr	r0, [pc, #56]	; (8007204 <xTaskRemoveFromEventList+0xc0>)
 80071ca:	f7fe fc80 	bl	8005ace <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <xTaskRemoveFromEventList+0xc4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	429a      	cmp	r2, r3
 80071da:	d905      	bls.n	80071e8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <xTaskRemoveFromEventList+0xc8>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e001      	b.n	80071ec <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071ec:	697b      	ldr	r3, [r7, #20]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200015a0 	.word	0x200015a0
 80071fc:	20001580 	.word	0x20001580
 8007200:	200010a8 	.word	0x200010a8
 8007204:	20001538 	.word	0x20001538
 8007208:	200010a4 	.word	0x200010a4
 800720c:	2000158c 	.word	0x2000158c

08007210 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <vTaskInternalSetTimeOutState+0x24>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <vTaskInternalSetTimeOutState+0x28>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	20001590 	.word	0x20001590
 8007238:	2000157c 	.word	0x2000157c

0800723c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10c      	bne.n	8007266 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	b672      	cpsid	i
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	b662      	cpsie	i
 8007260:	613b      	str	r3, [r7, #16]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10c      	bne.n	8007286 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	b672      	cpsid	i
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	b662      	cpsie	i
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007286:	f000 fe71 	bl	8007f6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800728a:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <xTaskCheckForTimeOut+0xc4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	d102      	bne.n	80072aa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	e023      	b.n	80072f2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <xTaskCheckForTimeOut+0xc8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d007      	beq.n	80072c6 <xTaskCheckForTimeOut+0x8a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d302      	bcc.n	80072c6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e015      	b.n	80072f2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d20b      	bcs.n	80072e8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff97 	bl	8007210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	e004      	b.n	80072f2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ee:	2301      	movs	r3, #1
 80072f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072f2:	f000 fe6f 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 80072f6:	69fb      	ldr	r3, [r7, #28]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	2000157c 	.word	0x2000157c
 8007304:	20001590 	.word	0x20001590

08007308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800730c:	4b03      	ldr	r3, [pc, #12]	; (800731c <vTaskMissedYield+0x14>)
 800730e:	2201      	movs	r2, #1
 8007310:	601a      	str	r2, [r3, #0]
}
 8007312:	bf00      	nop
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	2000158c 	.word	0x2000158c

08007320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007328:	f000 f852 	bl	80073d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <prvIdleTask+0x28>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d9f9      	bls.n	8007328 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <prvIdleTask+0x2c>)
 8007336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007344:	e7f0      	b.n	8007328 <prvIdleTask+0x8>
 8007346:	bf00      	nop
 8007348:	200010a8 	.word	0x200010a8
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
 800735a:	e00c      	b.n	8007376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4a12      	ldr	r2, [pc, #72]	; (80073b0 <prvInitialiseTaskLists+0x60>)
 8007368:	4413      	add	r3, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fb82 	bl	8005a74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3301      	adds	r3, #1
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b37      	cmp	r3, #55	; 0x37
 800737a:	d9ef      	bls.n	800735c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800737c:	480d      	ldr	r0, [pc, #52]	; (80073b4 <prvInitialiseTaskLists+0x64>)
 800737e:	f7fe fb79 	bl	8005a74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007382:	480d      	ldr	r0, [pc, #52]	; (80073b8 <prvInitialiseTaskLists+0x68>)
 8007384:	f7fe fb76 	bl	8005a74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007388:	480c      	ldr	r0, [pc, #48]	; (80073bc <prvInitialiseTaskLists+0x6c>)
 800738a:	f7fe fb73 	bl	8005a74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800738e:	480c      	ldr	r0, [pc, #48]	; (80073c0 <prvInitialiseTaskLists+0x70>)
 8007390:	f7fe fb70 	bl	8005a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007394:	480b      	ldr	r0, [pc, #44]	; (80073c4 <prvInitialiseTaskLists+0x74>)
 8007396:	f7fe fb6d 	bl	8005a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <prvInitialiseTaskLists+0x78>)
 800739c:	4a05      	ldr	r2, [pc, #20]	; (80073b4 <prvInitialiseTaskLists+0x64>)
 800739e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073a0:	4b0a      	ldr	r3, [pc, #40]	; (80073cc <prvInitialiseTaskLists+0x7c>)
 80073a2:	4a05      	ldr	r2, [pc, #20]	; (80073b8 <prvInitialiseTaskLists+0x68>)
 80073a4:	601a      	str	r2, [r3, #0]
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200010a8 	.word	0x200010a8
 80073b4:	20001508 	.word	0x20001508
 80073b8:	2000151c 	.word	0x2000151c
 80073bc:	20001538 	.word	0x20001538
 80073c0:	2000154c 	.word	0x2000154c
 80073c4:	20001564 	.word	0x20001564
 80073c8:	20001530 	.word	0x20001530
 80073cc:	20001534 	.word	0x20001534

080073d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073d6:	e019      	b.n	800740c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073d8:	f000 fdc8 	bl	8007f6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073dc:	4b10      	ldr	r3, [pc, #64]	; (8007420 <prvCheckTasksWaitingTermination+0x50>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3304      	adds	r3, #4
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe fbcd 	bl	8005b88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ee:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <prvCheckTasksWaitingTermination+0x54>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	4a0b      	ldr	r2, [pc, #44]	; (8007424 <prvCheckTasksWaitingTermination+0x54>)
 80073f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073f8:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <prvCheckTasksWaitingTermination+0x58>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <prvCheckTasksWaitingTermination+0x58>)
 8007400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007402:	f000 fde7 	bl	8007fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f810 	bl	800742c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800740c:	4b06      	ldr	r3, [pc, #24]	; (8007428 <prvCheckTasksWaitingTermination+0x58>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e1      	bne.n	80073d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	2000154c 	.word	0x2000154c
 8007424:	20001578 	.word	0x20001578
 8007428:	20001560 	.word	0x20001560

0800742c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3354      	adds	r3, #84	; 0x54
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fe25 	bl	8009088 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007444:	2b00      	cmp	r3, #0
 8007446:	d108      	bne.n	800745a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	4618      	mov	r0, r3
 800744e:	f000 ff83 	bl	8008358 <vPortFree>
				vPortFree( pxTCB );
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 ff80 	bl	8008358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007458:	e01a      	b.n	8007490 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007460:	2b01      	cmp	r3, #1
 8007462:	d103      	bne.n	800746c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 ff77 	bl	8008358 <vPortFree>
	}
 800746a:	e011      	b.n	8007490 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007472:	2b02      	cmp	r3, #2
 8007474:	d00c      	beq.n	8007490 <prvDeleteTCB+0x64>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	b672      	cpsid	i
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	b662      	cpsie	i
 800748a:	60fb      	str	r3, [r7, #12]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <prvDeleteTCB+0x62>
	}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <prvResetNextTaskUnblockTime+0x38>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <prvResetNextTaskUnblockTime+0x3c>)
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074b0:	e008      	b.n	80074c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <prvResetNextTaskUnblockTime+0x38>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4a04      	ldr	r2, [pc, #16]	; (80074d4 <prvResetNextTaskUnblockTime+0x3c>)
 80074c2:	6013      	str	r3, [r2, #0]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20001530 	.word	0x20001530
 80074d4:	20001598 	.word	0x20001598

080074d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074de:	4b0b      	ldr	r3, [pc, #44]	; (800750c <xTaskGetSchedulerState+0x34>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074e6:	2301      	movs	r3, #1
 80074e8:	607b      	str	r3, [r7, #4]
 80074ea:	e008      	b.n	80074fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ec:	4b08      	ldr	r3, [pc, #32]	; (8007510 <xTaskGetSchedulerState+0x38>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074f4:	2302      	movs	r3, #2
 80074f6:	607b      	str	r3, [r7, #4]
 80074f8:	e001      	b.n	80074fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074fe:	687b      	ldr	r3, [r7, #4]
	}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	20001584 	.word	0x20001584
 8007510:	200015a0 	.word	0x200015a0

08007514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d05a      	beq.n	80075e0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800752a:	4b30      	ldr	r3, [pc, #192]	; (80075ec <xTaskPriorityDisinherit+0xd8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	429a      	cmp	r2, r3
 8007532:	d00c      	beq.n	800754e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	b672      	cpsid	i
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	b662      	cpsie	i
 8007548:	60fb      	str	r3, [r7, #12]
}
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10c      	bne.n	8007570 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	b672      	cpsid	i
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	b662      	cpsie	i
 800756a:	60bb      	str	r3, [r7, #8]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007574:	1e5a      	subs	r2, r3, #1
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007582:	429a      	cmp	r2, r3
 8007584:	d02c      	beq.n	80075e0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758a:	2b00      	cmp	r3, #0
 800758c:	d128      	bne.n	80075e0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3304      	adds	r3, #4
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe faf8 	bl	8005b88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b0:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <xTaskPriorityDisinherit+0xdc>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d903      	bls.n	80075c0 <xTaskPriorityDisinherit+0xac>
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	4a0c      	ldr	r2, [pc, #48]	; (80075f0 <xTaskPriorityDisinherit+0xdc>)
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <xTaskPriorityDisinherit+0xe0>)
 80075ce:	441a      	add	r2, r3
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4619      	mov	r1, r3
 80075d6:	4610      	mov	r0, r2
 80075d8:	f7fe fa79 	bl	8005ace <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075e0:	697b      	ldr	r3, [r7, #20]
	}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	200010a4 	.word	0x200010a4
 80075f0:	20001580 	.word	0x20001580
 80075f4:	200010a8 	.word	0x200010a8

080075f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007602:	4b21      	ldr	r3, [pc, #132]	; (8007688 <prvAddCurrentTaskToDelayedList+0x90>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007608:	4b20      	ldr	r3, [pc, #128]	; (800768c <prvAddCurrentTaskToDelayedList+0x94>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe faba 	bl	8005b88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d10a      	bne.n	8007632 <prvAddCurrentTaskToDelayedList+0x3a>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007622:	4b1a      	ldr	r3, [pc, #104]	; (800768c <prvAddCurrentTaskToDelayedList+0x94>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4819      	ldr	r0, [pc, #100]	; (8007690 <prvAddCurrentTaskToDelayedList+0x98>)
 800762c:	f7fe fa4f 	bl	8005ace <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007630:	e026      	b.n	8007680 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4413      	add	r3, r2
 8007638:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800763a:	4b14      	ldr	r3, [pc, #80]	; (800768c <prvAddCurrentTaskToDelayedList+0x94>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	429a      	cmp	r2, r3
 8007648:	d209      	bcs.n	800765e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764a:	4b12      	ldr	r3, [pc, #72]	; (8007694 <prvAddCurrentTaskToDelayedList+0x9c>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <prvAddCurrentTaskToDelayedList+0x94>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7fe fa5d 	bl	8005b16 <vListInsert>
}
 800765c:	e010      	b.n	8007680 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <prvAddCurrentTaskToDelayedList+0x94>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f7fe fa53 	bl	8005b16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	429a      	cmp	r2, r3
 8007678:	d202      	bcs.n	8007680 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800767a:	4a08      	ldr	r2, [pc, #32]	; (800769c <prvAddCurrentTaskToDelayedList+0xa4>)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6013      	str	r3, [r2, #0]
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	2000157c 	.word	0x2000157c
 800768c:	200010a4 	.word	0x200010a4
 8007690:	20001564 	.word	0x20001564
 8007694:	20001534 	.word	0x20001534
 8007698:	20001530 	.word	0x20001530
 800769c:	20001598 	.word	0x20001598

080076a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076aa:	f000 fb15 	bl	8007cd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076ae:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <xTimerCreateTimerTask+0x84>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d021      	beq.n	80076fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076be:	1d3a      	adds	r2, r7, #4
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	f107 030c 	add.w	r3, r7, #12
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe f9b9 	bl	8005a40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	9202      	str	r2, [sp, #8]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	2302      	movs	r3, #2
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2300      	movs	r3, #0
 80076de:	460a      	mov	r2, r1
 80076e0:	4911      	ldr	r1, [pc, #68]	; (8007728 <xTimerCreateTimerTask+0x88>)
 80076e2:	4812      	ldr	r0, [pc, #72]	; (800772c <xTimerCreateTimerTask+0x8c>)
 80076e4:	f7fe ff84 	bl	80065f0 <xTaskCreateStatic>
 80076e8:	4603      	mov	r3, r0
 80076ea:	4a11      	ldr	r2, [pc, #68]	; (8007730 <xTimerCreateTimerTask+0x90>)
 80076ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076ee:	4b10      	ldr	r3, [pc, #64]	; (8007730 <xTimerCreateTimerTask+0x90>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076f6:	2301      	movs	r3, #1
 80076f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10c      	bne.n	800771a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	b672      	cpsid	i
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	b662      	cpsie	i
 8007714:	613b      	str	r3, [r7, #16]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800771a:	697b      	ldr	r3, [r7, #20]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200015d4 	.word	0x200015d4
 8007728:	0800b43c 	.word	0x0800b43c
 800772c:	08007871 	.word	0x08007871
 8007730:	200015d8 	.word	0x200015d8

08007734 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007742:	2300      	movs	r3, #0
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <xTimerGenericCommand+0x32>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	b672      	cpsid	i
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	b662      	cpsie	i
 8007760:	623b      	str	r3, [r7, #32]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <xTimerGenericCommand+0x9c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d02a      	beq.n	80077c4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b05      	cmp	r3, #5
 800777e:	dc18      	bgt.n	80077b2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007780:	f7ff feaa 	bl	80074d8 <xTaskGetSchedulerState>
 8007784:	4603      	mov	r3, r0
 8007786:	2b02      	cmp	r3, #2
 8007788:	d109      	bne.n	800779e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800778a:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <xTimerGenericCommand+0x9c>)
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	f107 0110 	add.w	r1, r7, #16
 8007792:	2300      	movs	r3, #0
 8007794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007796:	f7fe fb31 	bl	8005dfc <xQueueGenericSend>
 800779a:	6278      	str	r0, [r7, #36]	; 0x24
 800779c:	e012      	b.n	80077c4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <xTimerGenericCommand+0x9c>)
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f107 0110 	add.w	r1, r7, #16
 80077a6:	2300      	movs	r3, #0
 80077a8:	2200      	movs	r2, #0
 80077aa:	f7fe fb27 	bl	8005dfc <xQueueGenericSend>
 80077ae:	6278      	str	r0, [r7, #36]	; 0x24
 80077b0:	e008      	b.n	80077c4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077b2:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <xTimerGenericCommand+0x9c>)
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	f107 0110 	add.w	r1, r7, #16
 80077ba:	2300      	movs	r3, #0
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	f7fe fc23 	bl	8006008 <xQueueGenericSendFromISR>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3728      	adds	r7, #40	; 0x28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	200015d4 	.word	0x200015d4

080077d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af02      	add	r7, sp, #8
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077de:	4b23      	ldr	r3, [pc, #140]	; (800786c <prvProcessExpiredTimer+0x98>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fe f9cb 	bl	8005b88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d024      	beq.n	800784a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	18d1      	adds	r1, r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	6978      	ldr	r0, [r7, #20]
 800780e:	f000 f8d3 	bl	80079b8 <prvInsertTimerInActiveList>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d021      	beq.n	800785c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007818:	2300      	movs	r3, #0
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	2300      	movs	r3, #0
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	2100      	movs	r1, #0
 8007822:	6978      	ldr	r0, [r7, #20]
 8007824:	f7ff ff86 	bl	8007734 <xTimerGenericCommand>
 8007828:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d115      	bne.n	800785c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	b672      	cpsid	i
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	b662      	cpsie	i
 8007844:	60fb      	str	r3, [r7, #12]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	6978      	ldr	r0, [r7, #20]
 8007862:	4798      	blx	r3
}
 8007864:	bf00      	nop
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200015cc 	.word	0x200015cc

08007870 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007878:	f107 0308 	add.w	r3, r7, #8
 800787c:	4618      	mov	r0, r3
 800787e:	f000 f857 	bl	8007930 <prvGetNextExpireTime>
 8007882:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4619      	mov	r1, r3
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f803 	bl	8007894 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800788e:	f000 f8d5 	bl	8007a3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007892:	e7f1      	b.n	8007878 <prvTimerTask+0x8>

08007894 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800789e:	f7ff fa1d 	bl	8006cdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078a2:	f107 0308 	add.w	r3, r7, #8
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f866 	bl	8007978 <prvSampleTimeNow>
 80078ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d130      	bne.n	8007916 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <prvProcessTimerOrBlockTask+0x3c>
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d806      	bhi.n	80078d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078c2:	f7ff fa19 	bl	8006cf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff ff83 	bl	80077d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ce:	e024      	b.n	800791a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d008      	beq.n	80078e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078d6:	4b13      	ldr	r3, [pc, #76]	; (8007924 <prvProcessTimerOrBlockTask+0x90>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <prvProcessTimerOrBlockTask+0x50>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <prvProcessTimerOrBlockTask+0x52>
 80078e4:	2300      	movs	r3, #0
 80078e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <prvProcessTimerOrBlockTask+0x94>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4619      	mov	r1, r3
 80078f6:	f7fe fe47 	bl	8006588 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078fa:	f7ff f9fd 	bl	8006cf8 <xTaskResumeAll>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007904:	4b09      	ldr	r3, [pc, #36]	; (800792c <prvProcessTimerOrBlockTask+0x98>)
 8007906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	f3bf 8f6f 	isb	sy
}
 8007914:	e001      	b.n	800791a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007916:	f7ff f9ef 	bl	8006cf8 <xTaskResumeAll>
}
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	200015d0 	.word	0x200015d0
 8007928:	200015d4 	.word	0x200015d4
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007938:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <prvGetNextExpireTime+0x44>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <prvGetNextExpireTime+0x16>
 8007942:	2201      	movs	r2, #1
 8007944:	e000      	b.n	8007948 <prvGetNextExpireTime+0x18>
 8007946:	2200      	movs	r2, #0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007954:	4b07      	ldr	r3, [pc, #28]	; (8007974 <prvGetNextExpireTime+0x44>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	e001      	b.n	8007964 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007964:	68fb      	ldr	r3, [r7, #12]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	200015cc 	.word	0x200015cc

08007978 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007980:	f7ff fa5a 	bl	8006e38 <xTaskGetTickCount>
 8007984:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <prvSampleTimeNow+0x3c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d205      	bcs.n	800799c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007990:	f000 f93c 	bl	8007c0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e002      	b.n	80079a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079a2:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <prvSampleTimeNow+0x3c>)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079a8:	68fb      	ldr	r3, [r7, #12]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	200015dc 	.word	0x200015dc

080079b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d812      	bhi.n	8007a04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	1ad2      	subs	r2, r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e01b      	b.n	8007a2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079f2:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <prvInsertTimerInActiveList+0x7c>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fe f88a 	bl	8005b16 <vListInsert>
 8007a02:	e012      	b.n	8007a2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d206      	bcs.n	8007a1a <prvInsertTimerInActiveList+0x62>
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d302      	bcc.n	8007a1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e007      	b.n	8007a2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a1a:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <prvInsertTimerInActiveList+0x80>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fe f876 	bl	8005b16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a2a:	697b      	ldr	r3, [r7, #20]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	200015d0 	.word	0x200015d0
 8007a38:	200015cc 	.word	0x200015cc

08007a3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08e      	sub	sp, #56	; 0x38
 8007a40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a42:	e0d0      	b.n	8007be6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	da1a      	bge.n	8007a80 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a4a:	1d3b      	adds	r3, r7, #4
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10c      	bne.n	8007a70 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	b672      	cpsid	i
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	b662      	cpsie	i
 8007a6a:	61fb      	str	r3, [r7, #28]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a76:	6850      	ldr	r0, [r2, #4]
 8007a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7a:	6892      	ldr	r2, [r2, #8]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f2c0 80af 	blt.w	8007be6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	3304      	adds	r3, #4
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe f875 	bl	8005b88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff ff69 	bl	8007978 <prvSampleTimeNow>
 8007aa6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b09      	cmp	r3, #9
 8007aac:	f200 809a 	bhi.w	8007be4 <prvProcessReceivedCommands+0x1a8>
 8007ab0:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <prvProcessReceivedCommands+0x7c>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	08007b59 	.word	0x08007b59
 8007ac8:	08007b6d 	.word	0x08007b6d
 8007acc:	08007bbb 	.word	0x08007bbb
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007ae1 	.word	0x08007ae1
 8007ad8:	08007b59 	.word	0x08007b59
 8007adc:	08007b6d 	.word	0x08007b6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	18d1      	adds	r1, r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b00:	f7ff ff5a 	bl	80079b8 <prvInsertTimerInActiveList>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d06d      	beq.n	8007be6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d062      	beq.n	8007be6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	441a      	add	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b32:	f7ff fdff 	bl	8007734 <xTimerGenericCommand>
 8007b36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d153      	bne.n	8007be6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	b672      	cpsid	i
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	b662      	cpsie	i
 8007b52:	61bb      	str	r3, [r7, #24]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b6a:	e03c      	b.n	8007be6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10c      	bne.n	8007ba6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	617b      	str	r3, [r7, #20]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	18d1      	adds	r1, r2, r3
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb4:	f7ff ff00 	bl	80079b8 <prvInsertTimerInActiveList>
					break;
 8007bb8:	e015      	b.n	8007be6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bca:	f000 fbc5 	bl	8008358 <vPortFree>
 8007bce:	e00a      	b.n	8007be6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd6:	f023 0301 	bic.w	r3, r3, #1
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007be2:	e000      	b.n	8007be6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007be4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007be6:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <prvProcessReceivedCommands+0x1cc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	1d39      	adds	r1, r7, #4
 8007bec:	2200      	movs	r2, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe faaa 	bl	8006148 <xQueueReceive>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f47f af24 	bne.w	8007a44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3730      	adds	r7, #48	; 0x30
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	200015d4 	.word	0x200015d4

08007c0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c12:	e04a      	b.n	8007caa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c14:	4b2e      	ldr	r3, [pc, #184]	; (8007cd0 <prvSwitchTimerLists+0xc4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1e:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <prvSwitchTimerLists+0xc4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fd ffab 	bl	8005b88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d030      	beq.n	8007caa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4413      	add	r3, r2
 8007c50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d90e      	bls.n	8007c78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c66:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <prvSwitchTimerLists+0xc4>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f7fd ff50 	bl	8005b16 <vListInsert>
 8007c76:	e018      	b.n	8007caa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	2100      	movs	r1, #0
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff fd56 	bl	8007734 <xTimerGenericCommand>
 8007c88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	603b      	str	r3, [r7, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <prvSwitchTimerLists+0xc4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1af      	bne.n	8007c14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <prvSwitchTimerLists+0xc4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cba:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <prvSwitchTimerLists+0xc8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <prvSwitchTimerLists+0xc4>)
 8007cc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cc2:	4a04      	ldr	r2, [pc, #16]	; (8007cd4 <prvSwitchTimerLists+0xc8>)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	6013      	str	r3, [r2, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200015cc 	.word	0x200015cc
 8007cd4:	200015d0 	.word	0x200015d0

08007cd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cde:	f000 f945 	bl	8007f6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ce2:	4b15      	ldr	r3, [pc, #84]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d120      	bne.n	8007d2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cea:	4814      	ldr	r0, [pc, #80]	; (8007d3c <prvCheckForValidListAndQueue+0x64>)
 8007cec:	f7fd fec2 	bl	8005a74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cf0:	4813      	ldr	r0, [pc, #76]	; (8007d40 <prvCheckForValidListAndQueue+0x68>)
 8007cf2:	f7fd febf 	bl	8005a74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <prvCheckForValidListAndQueue+0x6c>)
 8007cf8:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <prvCheckForValidListAndQueue+0x64>)
 8007cfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cfc:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvCheckForValidListAndQueue+0x70>)
 8007cfe:	4a10      	ldr	r2, [pc, #64]	; (8007d40 <prvCheckForValidListAndQueue+0x68>)
 8007d00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d02:	2300      	movs	r3, #0
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <prvCheckForValidListAndQueue+0x74>)
 8007d08:	4a11      	ldr	r2, [pc, #68]	; (8007d50 <prvCheckForValidListAndQueue+0x78>)
 8007d0a:	2110      	movs	r1, #16
 8007d0c:	200a      	movs	r0, #10
 8007d0e:	f7fd ffcf 	bl	8005cb0 <xQueueGenericCreateStatic>
 8007d12:	4603      	mov	r3, r0
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007d16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d18:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	490b      	ldr	r1, [pc, #44]	; (8007d54 <prvCheckForValidListAndQueue+0x7c>)
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fc04 	bl	8006534 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d2c:	f000 f952 	bl	8007fd4 <vPortExitCritical>
}
 8007d30:	bf00      	nop
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	200015d4 	.word	0x200015d4
 8007d3c:	200015a4 	.word	0x200015a4
 8007d40:	200015b8 	.word	0x200015b8
 8007d44:	200015cc 	.word	0x200015cc
 8007d48:	200015d0 	.word	0x200015d0
 8007d4c:	20001680 	.word	0x20001680
 8007d50:	200015e0 	.word	0x200015e0
 8007d54:	0800b444 	.word	0x0800b444

08007d58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3b04      	subs	r3, #4
 8007d68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3b04      	subs	r3, #4
 8007d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3b04      	subs	r3, #4
 8007d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d88:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <pxPortInitialiseStack+0x64>)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b14      	subs	r3, #20
 8007d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3b04      	subs	r3, #4
 8007d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f06f 0202 	mvn.w	r2, #2
 8007da6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3b20      	subs	r3, #32
 8007dac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dae:	68fb      	ldr	r3, [r7, #12]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	08007dc1 	.word	0x08007dc1

08007dc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dca:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <prvTaskExitError+0x5c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d00c      	beq.n	8007dee <prvTaskExitError+0x2e>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	b672      	cpsid	i
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	b662      	cpsie	i
 8007de8:	60fb      	str	r3, [r7, #12]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <prvTaskExitError+0x2c>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	b672      	cpsid	i
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	b662      	cpsie	i
 8007e02:	60bb      	str	r3, [r7, #8]
}
 8007e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e06:	bf00      	nop
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0fc      	beq.n	8007e08 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e0e:	bf00      	nop
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	2000003c 	.word	0x2000003c

08007e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <pxCurrentTCBConst2>)
 8007e22:	6819      	ldr	r1, [r3, #0]
 8007e24:	6808      	ldr	r0, [r1, #0]
 8007e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	f380 8809 	msr	PSP, r0
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	4770      	bx	lr
 8007e3c:	f3af 8000 	nop.w

08007e40 <pxCurrentTCBConst2>:
 8007e40:	200010a4 	.word	0x200010a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e48:	4808      	ldr	r0, [pc, #32]	; (8007e6c <prvPortStartFirstTask+0x24>)
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	6800      	ldr	r0, [r0, #0]
 8007e4e:	f380 8808 	msr	MSP, r0
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f380 8814 	msr	CONTROL, r0
 8007e5a:	b662      	cpsie	i
 8007e5c:	b661      	cpsie	f
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	df00      	svc	0
 8007e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed08 	.word	0xe000ed08

08007e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e76:	4b37      	ldr	r3, [pc, #220]	; (8007f54 <xPortStartScheduler+0xe4>)
 8007e78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	4b2f      	ldr	r3, [pc, #188]	; (8007f58 <xPortStartScheduler+0xe8>)
 8007e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e9e:	4b2f      	ldr	r3, [pc, #188]	; (8007f5c <xPortStartScheduler+0xec>)
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ea4:	e009      	b.n	8007eba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ea6:	4b2d      	ldr	r3, [pc, #180]	; (8007f5c <xPortStartScheduler+0xec>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	4a2b      	ldr	r2, [pc, #172]	; (8007f5c <xPortStartScheduler+0xec>)
 8007eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	d0ef      	beq.n	8007ea6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ec6:	4b25      	ldr	r3, [pc, #148]	; (8007f5c <xPortStartScheduler+0xec>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1c3 0307 	rsb	r3, r3, #7
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d00c      	beq.n	8007eec <xPortStartScheduler+0x7c>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	b672      	cpsid	i
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	b662      	cpsie	i
 8007ee6:	60bb      	str	r3, [r7, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007eec:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <xPortStartScheduler+0xec>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	4a1a      	ldr	r2, [pc, #104]	; (8007f5c <xPortStartScheduler+0xec>)
 8007ef4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ef6:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <xPortStartScheduler+0xec>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007efe:	4a17      	ldr	r2, [pc, #92]	; (8007f5c <xPortStartScheduler+0xec>)
 8007f00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <xPortStartScheduler+0xf0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a14      	ldr	r2, [pc, #80]	; (8007f60 <xPortStartScheduler+0xf0>)
 8007f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f16:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <xPortStartScheduler+0xf0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a11      	ldr	r2, [pc, #68]	; (8007f60 <xPortStartScheduler+0xf0>)
 8007f1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f22:	f000 f8dd 	bl	80080e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <xPortStartScheduler+0xf4>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f2c:	f000 f8fc 	bl	8008128 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <xPortStartScheduler+0xf8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a0c      	ldr	r2, [pc, #48]	; (8007f68 <xPortStartScheduler+0xf8>)
 8007f36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f3c:	f7ff ff84 	bl	8007e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f40:	f7ff f846 	bl	8006fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8007f44:	f7ff ff3c 	bl	8007dc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	e000e400 	.word	0xe000e400
 8007f58:	200016d0 	.word	0x200016d0
 8007f5c:	200016d4 	.word	0x200016d4
 8007f60:	e000ed20 	.word	0xe000ed20
 8007f64:	2000003c 	.word	0x2000003c
 8007f68:	e000ef34 	.word	0xe000ef34

08007f6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	b672      	cpsid	i
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	b662      	cpsie	i
 8007f86:	607b      	str	r3, [r7, #4]
}
 8007f88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f8a:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <vPortEnterCritical+0x60>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	4a0e      	ldr	r2, [pc, #56]	; (8007fcc <vPortEnterCritical+0x60>)
 8007f92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f94:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <vPortEnterCritical+0x60>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d111      	bne.n	8007fc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <vPortEnterCritical+0x64>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00c      	beq.n	8007fc0 <vPortEnterCritical+0x54>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	b672      	cpsid	i
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	b662      	cpsie	i
 8007fba:	603b      	str	r3, [r7, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vPortEnterCritical+0x52>
	}
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	2000003c 	.word	0x2000003c
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fda:	4b13      	ldr	r3, [pc, #76]	; (8008028 <vPortExitCritical+0x54>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10c      	bne.n	8007ffc <vPortExitCritical+0x28>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	b672      	cpsid	i
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	b662      	cpsie	i
 8007ff6:	607b      	str	r3, [r7, #4]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <vPortExitCritical+0x54>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3b01      	subs	r3, #1
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <vPortExitCritical+0x54>)
 8008004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <vPortExitCritical+0x54>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <vPortExitCritical+0x46>
 800800e:	2300      	movs	r3, #0
 8008010:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	f383 8811 	msr	BASEPRI, r3
}
 8008018:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	2000003c 	.word	0x2000003c
 800802c:	00000000 	.word	0x00000000

08008030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008030:	f3ef 8009 	mrs	r0, PSP
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <pxCurrentTCBConst>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f01e 0f10 	tst.w	lr, #16
 8008040:	bf08      	it	eq
 8008042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	6010      	str	r0, [r2, #0]
 800804c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008054:	b672      	cpsid	i
 8008056:	f380 8811 	msr	BASEPRI, r0
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	b662      	cpsie	i
 8008064:	f7fe ffb4 	bl	8006fd0 <vTaskSwitchContext>
 8008068:	f04f 0000 	mov.w	r0, #0
 800806c:	f380 8811 	msr	BASEPRI, r0
 8008070:	bc09      	pop	{r0, r3}
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	f01e 0f10 	tst.w	lr, #16
 800807e:	bf08      	it	eq
 8008080:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008084:	f380 8809 	msr	PSP, r0
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <pxCurrentTCBConst>:
 8008090:	200010a4 	.word	0x200010a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	b672      	cpsid	i
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	b662      	cpsie	i
 80080b2:	607b      	str	r3, [r7, #4]
}
 80080b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080b6:	f7fe fecf 	bl	8006e58 <xTaskIncrementTick>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <SysTick_Handler+0x44>)
 80080c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	2300      	movs	r3, #0
 80080ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	f383 8811 	msr	BASEPRI, r3
}
 80080d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	e000ed04 	.word	0xe000ed04

080080e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080e4:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <vPortSetupTimerInterrupt+0x34>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080ea:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <vPortSetupTimerInterrupt+0x38>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <vPortSetupTimerInterrupt+0x3c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <vPortSetupTimerInterrupt+0x40>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	099b      	lsrs	r3, r3, #6
 80080fc:	4a09      	ldr	r2, [pc, #36]	; (8008124 <vPortSetupTimerInterrupt+0x44>)
 80080fe:	3b01      	subs	r3, #1
 8008100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008102:	4b04      	ldr	r3, [pc, #16]	; (8008114 <vPortSetupTimerInterrupt+0x34>)
 8008104:	2207      	movs	r2, #7
 8008106:	601a      	str	r2, [r3, #0]
}
 8008108:	bf00      	nop
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	e000e010 	.word	0xe000e010
 8008118:	e000e018 	.word	0xe000e018
 800811c:	20000030 	.word	0x20000030
 8008120:	10624dd3 	.word	0x10624dd3
 8008124:	e000e014 	.word	0xe000e014

08008128 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008128:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008138 <vPortEnableVFP+0x10>
 800812c:	6801      	ldr	r1, [r0, #0]
 800812e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008132:	6001      	str	r1, [r0, #0]
 8008134:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008136:	bf00      	nop
 8008138:	e000ed88 	.word	0xe000ed88

0800813c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008142:	f3ef 8305 	mrs	r3, IPSR
 8008146:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b0f      	cmp	r3, #15
 800814c:	d916      	bls.n	800817c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800814e:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <vPortValidateInterruptPriority+0x78>)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4413      	add	r3, r2
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008158:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <vPortValidateInterruptPriority+0x7c>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	7afa      	ldrb	r2, [r7, #11]
 800815e:	429a      	cmp	r2, r3
 8008160:	d20c      	bcs.n	800817c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	b672      	cpsid	i
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	b662      	cpsie	i
 8008176:	607b      	str	r3, [r7, #4]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800817c:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <vPortValidateInterruptPriority+0x80>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008184:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <vPortValidateInterruptPriority+0x84>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d90c      	bls.n	80081a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	603b      	str	r3, [r7, #0]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <vPortValidateInterruptPriority+0x68>
	}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	e000e3f0 	.word	0xe000e3f0
 80081b8:	200016d0 	.word	0x200016d0
 80081bc:	e000ed0c 	.word	0xe000ed0c
 80081c0:	200016d4 	.word	0x200016d4

080081c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	; 0x28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081d0:	f7fe fd84 	bl	8006cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081d4:	4b5b      	ldr	r3, [pc, #364]	; (8008344 <pvPortMalloc+0x180>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081dc:	f000 f91a 	bl	8008414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081e0:	4b59      	ldr	r3, [pc, #356]	; (8008348 <pvPortMalloc+0x184>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f040 8092 	bne.w	8008312 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01f      	beq.n	8008234 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80081f4:	2208      	movs	r2, #8
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4413      	add	r3, r2
 80081fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f003 0307 	and.w	r3, r3, #7
 8008202:	2b00      	cmp	r3, #0
 8008204:	d016      	beq.n	8008234 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f023 0307 	bic.w	r3, r3, #7
 800820c:	3308      	adds	r3, #8
 800820e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00c      	beq.n	8008234 <pvPortMalloc+0x70>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	b672      	cpsid	i
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	b662      	cpsie	i
 800822e:	617b      	str	r3, [r7, #20]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d06b      	beq.n	8008312 <pvPortMalloc+0x14e>
 800823a:	4b44      	ldr	r3, [pc, #272]	; (800834c <pvPortMalloc+0x188>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d866      	bhi.n	8008312 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008244:	4b42      	ldr	r3, [pc, #264]	; (8008350 <pvPortMalloc+0x18c>)
 8008246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008248:	4b41      	ldr	r3, [pc, #260]	; (8008350 <pvPortMalloc+0x18c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800824e:	e004      	b.n	800825a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d903      	bls.n	800826c <pvPortMalloc+0xa8>
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f1      	bne.n	8008250 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800826c:	4b35      	ldr	r3, [pc, #212]	; (8008344 <pvPortMalloc+0x180>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008272:	429a      	cmp	r2, r3
 8008274:	d04d      	beq.n	8008312 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2208      	movs	r2, #8
 800827c:	4413      	add	r3, r2
 800827e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	1ad2      	subs	r2, r2, r3
 8008290:	2308      	movs	r3, #8
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	429a      	cmp	r2, r3
 8008296:	d921      	bls.n	80082dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00c      	beq.n	80082c4 <pvPortMalloc+0x100>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	b672      	cpsid	i
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	b662      	cpsie	i
 80082be:	613b      	str	r3, [r7, #16]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	1ad2      	subs	r2, r2, r3
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082d6:	69b8      	ldr	r0, [r7, #24]
 80082d8:	f000 f8fe 	bl	80084d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082dc:	4b1b      	ldr	r3, [pc, #108]	; (800834c <pvPortMalloc+0x188>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	4a19      	ldr	r2, [pc, #100]	; (800834c <pvPortMalloc+0x188>)
 80082e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082ea:	4b18      	ldr	r3, [pc, #96]	; (800834c <pvPortMalloc+0x188>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b19      	ldr	r3, [pc, #100]	; (8008354 <pvPortMalloc+0x190>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d203      	bcs.n	80082fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082f6:	4b15      	ldr	r3, [pc, #84]	; (800834c <pvPortMalloc+0x188>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a16      	ldr	r2, [pc, #88]	; (8008354 <pvPortMalloc+0x190>)
 80082fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	4b11      	ldr	r3, [pc, #68]	; (8008348 <pvPortMalloc+0x184>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	431a      	orrs	r2, r3
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008312:	f7fe fcf1 	bl	8006cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00c      	beq.n	800833a <pvPortMalloc+0x176>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	b672      	cpsid	i
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	b662      	cpsie	i
 8008334:	60fb      	str	r3, [r7, #12]
}
 8008336:	bf00      	nop
 8008338:	e7fe      	b.n	8008338 <pvPortMalloc+0x174>
	return pvReturn;
 800833a:	69fb      	ldr	r3, [r7, #28]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3728      	adds	r7, #40	; 0x28
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	200052e0 	.word	0x200052e0
 8008348:	200052ec 	.word	0x200052ec
 800834c:	200052e4 	.word	0x200052e4
 8008350:	200052d8 	.word	0x200052d8
 8008354:	200052e8 	.word	0x200052e8

08008358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04c      	beq.n	8008404 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800836a:	2308      	movs	r3, #8
 800836c:	425b      	negs	r3, r3
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4413      	add	r3, r2
 8008372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	4b23      	ldr	r3, [pc, #140]	; (800840c <vPortFree+0xb4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4013      	ands	r3, r2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10c      	bne.n	80083a0 <vPortFree+0x48>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	b672      	cpsid	i
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	b662      	cpsie	i
 800839a:	60fb      	str	r3, [r7, #12]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00c      	beq.n	80083c2 <vPortFree+0x6a>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	b672      	cpsid	i
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	b662      	cpsie	i
 80083bc:	60bb      	str	r3, [r7, #8]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	4b11      	ldr	r3, [pc, #68]	; (800840c <vPortFree+0xb4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d019      	beq.n	8008404 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d115      	bne.n	8008404 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <vPortFree+0xb4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	43db      	mvns	r3, r3
 80083e2:	401a      	ands	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083e8:	f7fe fc78 	bl	8006cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <vPortFree+0xb8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4413      	add	r3, r2
 80083f6:	4a06      	ldr	r2, [pc, #24]	; (8008410 <vPortFree+0xb8>)
 80083f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083fa:	6938      	ldr	r0, [r7, #16]
 80083fc:	f000 f86c 	bl	80084d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008400:	f7fe fc7a 	bl	8006cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008404:	bf00      	nop
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200052ec 	.word	0x200052ec
 8008410:	200052e4 	.word	0x200052e4

08008414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800841a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800841e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008420:	4b27      	ldr	r3, [pc, #156]	; (80084c0 <prvHeapInit+0xac>)
 8008422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00c      	beq.n	8008448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3307      	adds	r3, #7
 8008432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0307 	bic.w	r3, r3, #7
 800843a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <prvHeapInit+0xac>)
 8008444:	4413      	add	r3, r2
 8008446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800844c:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <prvHeapInit+0xb0>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <prvHeapInit+0xb0>)
 8008454:	2200      	movs	r2, #0
 8008456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4413      	add	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008460:	2208      	movs	r2, #8
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0307 	bic.w	r3, r3, #7
 800846e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <prvHeapInit+0xb4>)
 8008474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <prvHeapInit+0xb4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2200      	movs	r2, #0
 800847c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800847e:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <prvHeapInit+0xb4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008494:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <prvHeapInit+0xb4>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <prvHeapInit+0xb8>)
 80084a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <prvHeapInit+0xbc>)
 80084aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <prvHeapInit+0xc0>)
 80084ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	200016d8 	.word	0x200016d8
 80084c4:	200052d8 	.word	0x200052d8
 80084c8:	200052e0 	.word	0x200052e0
 80084cc:	200052e8 	.word	0x200052e8
 80084d0:	200052e4 	.word	0x200052e4
 80084d4:	200052ec 	.word	0x200052ec

080084d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084e0:	4b28      	ldr	r3, [pc, #160]	; (8008584 <prvInsertBlockIntoFreeList+0xac>)
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e002      	b.n	80084ec <prvInsertBlockIntoFreeList+0x14>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d8f7      	bhi.n	80084e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	4413      	add	r3, r2
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d108      	bne.n	800851a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	441a      	add	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	441a      	add	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d118      	bne.n	8008560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	4b15      	ldr	r3, [pc, #84]	; (8008588 <prvInsertBlockIntoFreeList+0xb0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d00d      	beq.n	8008556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	441a      	add	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e008      	b.n	8008568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <prvInsertBlockIntoFreeList+0xb0>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	e003      	b.n	8008568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d002      	beq.n	8008576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008576:	bf00      	nop
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	200052d8 	.word	0x200052d8
 8008588:	200052e0 	.word	0x200052e0

0800858c <__cvt>:
 800858c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800858e:	ed2d 8b02 	vpush	{d8}
 8008592:	eeb0 8b40 	vmov.f64	d8, d0
 8008596:	b085      	sub	sp, #20
 8008598:	4617      	mov	r7, r2
 800859a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800859c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800859e:	ee18 2a90 	vmov	r2, s17
 80085a2:	f025 0520 	bic.w	r5, r5, #32
 80085a6:	2a00      	cmp	r2, #0
 80085a8:	bfb6      	itet	lt
 80085aa:	222d      	movlt	r2, #45	; 0x2d
 80085ac:	2200      	movge	r2, #0
 80085ae:	eeb1 8b40 	vneglt.f64	d8, d0
 80085b2:	2d46      	cmp	r5, #70	; 0x46
 80085b4:	460c      	mov	r4, r1
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	d004      	beq.n	80085c4 <__cvt+0x38>
 80085ba:	2d45      	cmp	r5, #69	; 0x45
 80085bc:	d100      	bne.n	80085c0 <__cvt+0x34>
 80085be:	3401      	adds	r4, #1
 80085c0:	2102      	movs	r1, #2
 80085c2:	e000      	b.n	80085c6 <__cvt+0x3a>
 80085c4:	2103      	movs	r1, #3
 80085c6:	ab03      	add	r3, sp, #12
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	ab02      	add	r3, sp, #8
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4622      	mov	r2, r4
 80085d0:	4633      	mov	r3, r6
 80085d2:	eeb0 0b48 	vmov.f64	d0, d8
 80085d6:	f000 fea7 	bl	8009328 <_dtoa_r>
 80085da:	2d47      	cmp	r5, #71	; 0x47
 80085dc:	d101      	bne.n	80085e2 <__cvt+0x56>
 80085de:	07fb      	lsls	r3, r7, #31
 80085e0:	d51a      	bpl.n	8008618 <__cvt+0x8c>
 80085e2:	2d46      	cmp	r5, #70	; 0x46
 80085e4:	eb00 0204 	add.w	r2, r0, r4
 80085e8:	d10c      	bne.n	8008604 <__cvt+0x78>
 80085ea:	7803      	ldrb	r3, [r0, #0]
 80085ec:	2b30      	cmp	r3, #48	; 0x30
 80085ee:	d107      	bne.n	8008600 <__cvt+0x74>
 80085f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	bf1c      	itt	ne
 80085fa:	f1c4 0401 	rsbne	r4, r4, #1
 80085fe:	6034      	strne	r4, [r6, #0]
 8008600:	6833      	ldr	r3, [r6, #0]
 8008602:	441a      	add	r2, r3
 8008604:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860c:	bf08      	it	eq
 800860e:	9203      	streq	r2, [sp, #12]
 8008610:	2130      	movs	r1, #48	; 0x30
 8008612:	9b03      	ldr	r3, [sp, #12]
 8008614:	4293      	cmp	r3, r2
 8008616:	d307      	bcc.n	8008628 <__cvt+0x9c>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800861c:	1a1b      	subs	r3, r3, r0
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	b005      	add	sp, #20
 8008622:	ecbd 8b02 	vpop	{d8}
 8008626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008628:	1c5c      	adds	r4, r3, #1
 800862a:	9403      	str	r4, [sp, #12]
 800862c:	7019      	strb	r1, [r3, #0]
 800862e:	e7f0      	b.n	8008612 <__cvt+0x86>

08008630 <__exponent>:
 8008630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008632:	4603      	mov	r3, r0
 8008634:	2900      	cmp	r1, #0
 8008636:	bfb8      	it	lt
 8008638:	4249      	neglt	r1, r1
 800863a:	f803 2b02 	strb.w	r2, [r3], #2
 800863e:	bfb4      	ite	lt
 8008640:	222d      	movlt	r2, #45	; 0x2d
 8008642:	222b      	movge	r2, #43	; 0x2b
 8008644:	2909      	cmp	r1, #9
 8008646:	7042      	strb	r2, [r0, #1]
 8008648:	dd2a      	ble.n	80086a0 <__exponent+0x70>
 800864a:	f10d 0207 	add.w	r2, sp, #7
 800864e:	4617      	mov	r7, r2
 8008650:	260a      	movs	r6, #10
 8008652:	4694      	mov	ip, r2
 8008654:	fb91 f5f6 	sdiv	r5, r1, r6
 8008658:	fb06 1415 	mls	r4, r6, r5, r1
 800865c:	3430      	adds	r4, #48	; 0x30
 800865e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008662:	460c      	mov	r4, r1
 8008664:	2c63      	cmp	r4, #99	; 0x63
 8008666:	f102 32ff 	add.w	r2, r2, #4294967295
 800866a:	4629      	mov	r1, r5
 800866c:	dcf1      	bgt.n	8008652 <__exponent+0x22>
 800866e:	3130      	adds	r1, #48	; 0x30
 8008670:	f1ac 0402 	sub.w	r4, ip, #2
 8008674:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008678:	1c41      	adds	r1, r0, #1
 800867a:	4622      	mov	r2, r4
 800867c:	42ba      	cmp	r2, r7
 800867e:	d30a      	bcc.n	8008696 <__exponent+0x66>
 8008680:	f10d 0209 	add.w	r2, sp, #9
 8008684:	eba2 020c 	sub.w	r2, r2, ip
 8008688:	42bc      	cmp	r4, r7
 800868a:	bf88      	it	hi
 800868c:	2200      	movhi	r2, #0
 800868e:	4413      	add	r3, r2
 8008690:	1a18      	subs	r0, r3, r0
 8008692:	b003      	add	sp, #12
 8008694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008696:	f812 5b01 	ldrb.w	r5, [r2], #1
 800869a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800869e:	e7ed      	b.n	800867c <__exponent+0x4c>
 80086a0:	2330      	movs	r3, #48	; 0x30
 80086a2:	3130      	adds	r1, #48	; 0x30
 80086a4:	7083      	strb	r3, [r0, #2]
 80086a6:	70c1      	strb	r1, [r0, #3]
 80086a8:	1d03      	adds	r3, r0, #4
 80086aa:	e7f1      	b.n	8008690 <__exponent+0x60>
 80086ac:	0000      	movs	r0, r0
	...

080086b0 <_printf_float>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	b08b      	sub	sp, #44	; 0x2c
 80086b6:	460c      	mov	r4, r1
 80086b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80086bc:	4616      	mov	r6, r2
 80086be:	461f      	mov	r7, r3
 80086c0:	4605      	mov	r5, r0
 80086c2:	f000 fccd 	bl	8009060 <_localeconv_r>
 80086c6:	f8d0 b000 	ldr.w	fp, [r0]
 80086ca:	4658      	mov	r0, fp
 80086cc:	f7f7 fe08 	bl	80002e0 <strlen>
 80086d0:	2300      	movs	r3, #0
 80086d2:	9308      	str	r3, [sp, #32]
 80086d4:	f8d8 3000 	ldr.w	r3, [r8]
 80086d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	3307      	adds	r3, #7
 80086e0:	f023 0307 	bic.w	r3, r3, #7
 80086e4:	f103 0108 	add.w	r1, r3, #8
 80086e8:	f8c8 1000 	str.w	r1, [r8]
 80086ec:	ed93 0b00 	vldr	d0, [r3]
 80086f0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008950 <_printf_float+0x2a0>
 80086f4:	eeb0 7bc0 	vabs.f64	d7, d0
 80086f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80086fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008700:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8008704:	4682      	mov	sl, r0
 8008706:	dd24      	ble.n	8008752 <_printf_float+0xa2>
 8008708:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800870c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008710:	d502      	bpl.n	8008718 <_printf_float+0x68>
 8008712:	232d      	movs	r3, #45	; 0x2d
 8008714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008718:	498f      	ldr	r1, [pc, #572]	; (8008958 <_printf_float+0x2a8>)
 800871a:	4b90      	ldr	r3, [pc, #576]	; (800895c <_printf_float+0x2ac>)
 800871c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008720:	bf94      	ite	ls
 8008722:	4688      	movls	r8, r1
 8008724:	4698      	movhi	r8, r3
 8008726:	2303      	movs	r3, #3
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	f022 0204 	bic.w	r2, r2, #4
 800872e:	2300      	movs	r3, #0
 8008730:	6022      	str	r2, [r4, #0]
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	9700      	str	r7, [sp, #0]
 8008736:	4633      	mov	r3, r6
 8008738:	aa09      	add	r2, sp, #36	; 0x24
 800873a:	4621      	mov	r1, r4
 800873c:	4628      	mov	r0, r5
 800873e:	f000 f9d1 	bl	8008ae4 <_printf_common>
 8008742:	3001      	adds	r0, #1
 8008744:	f040 808a 	bne.w	800885c <_printf_float+0x1ac>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	b00b      	add	sp, #44	; 0x2c
 800874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008752:	eeb4 0b40 	vcmp.f64	d0, d0
 8008756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875a:	d709      	bvc.n	8008770 <_printf_float+0xc0>
 800875c:	ee10 3a90 	vmov	r3, s1
 8008760:	2b00      	cmp	r3, #0
 8008762:	bfbc      	itt	lt
 8008764:	232d      	movlt	r3, #45	; 0x2d
 8008766:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800876a:	497d      	ldr	r1, [pc, #500]	; (8008960 <_printf_float+0x2b0>)
 800876c:	4b7d      	ldr	r3, [pc, #500]	; (8008964 <_printf_float+0x2b4>)
 800876e:	e7d5      	b.n	800871c <_printf_float+0x6c>
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008776:	9104      	str	r1, [sp, #16]
 8008778:	1c59      	adds	r1, r3, #1
 800877a:	d13c      	bne.n	80087f6 <_printf_float+0x146>
 800877c:	2306      	movs	r3, #6
 800877e:	6063      	str	r3, [r4, #4]
 8008780:	2300      	movs	r3, #0
 8008782:	9303      	str	r3, [sp, #12]
 8008784:	ab08      	add	r3, sp, #32
 8008786:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800878a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800878e:	ab07      	add	r3, sp, #28
 8008790:	6861      	ldr	r1, [r4, #4]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	f10d 031b 	add.w	r3, sp, #27
 800879a:	4628      	mov	r0, r5
 800879c:	f7ff fef6 	bl	800858c <__cvt>
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	9907      	ldr	r1, [sp, #28]
 80087a4:	2b47      	cmp	r3, #71	; 0x47
 80087a6:	4680      	mov	r8, r0
 80087a8:	d108      	bne.n	80087bc <_printf_float+0x10c>
 80087aa:	1cc8      	adds	r0, r1, #3
 80087ac:	db02      	blt.n	80087b4 <_printf_float+0x104>
 80087ae:	6863      	ldr	r3, [r4, #4]
 80087b0:	4299      	cmp	r1, r3
 80087b2:	dd41      	ble.n	8008838 <_printf_float+0x188>
 80087b4:	f1a9 0902 	sub.w	r9, r9, #2
 80087b8:	fa5f f989 	uxtb.w	r9, r9
 80087bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087c0:	d820      	bhi.n	8008804 <_printf_float+0x154>
 80087c2:	3901      	subs	r1, #1
 80087c4:	464a      	mov	r2, r9
 80087c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087ca:	9107      	str	r1, [sp, #28]
 80087cc:	f7ff ff30 	bl	8008630 <__exponent>
 80087d0:	9a08      	ldr	r2, [sp, #32]
 80087d2:	9004      	str	r0, [sp, #16]
 80087d4:	1813      	adds	r3, r2, r0
 80087d6:	2a01      	cmp	r2, #1
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	dc02      	bgt.n	80087e2 <_printf_float+0x132>
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	07d2      	lsls	r2, r2, #31
 80087e0:	d501      	bpl.n	80087e6 <_printf_float+0x136>
 80087e2:	3301      	adds	r3, #1
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0a2      	beq.n	8008734 <_printf_float+0x84>
 80087ee:	232d      	movs	r3, #45	; 0x2d
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	e79e      	b.n	8008734 <_printf_float+0x84>
 80087f6:	9904      	ldr	r1, [sp, #16]
 80087f8:	2947      	cmp	r1, #71	; 0x47
 80087fa:	d1c1      	bne.n	8008780 <_printf_float+0xd0>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1bf      	bne.n	8008780 <_printf_float+0xd0>
 8008800:	2301      	movs	r3, #1
 8008802:	e7bc      	b.n	800877e <_printf_float+0xce>
 8008804:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008808:	d118      	bne.n	800883c <_printf_float+0x18c>
 800880a:	2900      	cmp	r1, #0
 800880c:	6863      	ldr	r3, [r4, #4]
 800880e:	dd0b      	ble.n	8008828 <_printf_float+0x178>
 8008810:	6121      	str	r1, [r4, #16]
 8008812:	b913      	cbnz	r3, 800881a <_printf_float+0x16a>
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	07d0      	lsls	r0, r2, #31
 8008818:	d502      	bpl.n	8008820 <_printf_float+0x170>
 800881a:	3301      	adds	r3, #1
 800881c:	440b      	add	r3, r1
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	2300      	movs	r3, #0
 8008822:	65a1      	str	r1, [r4, #88]	; 0x58
 8008824:	9304      	str	r3, [sp, #16]
 8008826:	e7de      	b.n	80087e6 <_printf_float+0x136>
 8008828:	b913      	cbnz	r3, 8008830 <_printf_float+0x180>
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	07d2      	lsls	r2, r2, #31
 800882e:	d501      	bpl.n	8008834 <_printf_float+0x184>
 8008830:	3302      	adds	r3, #2
 8008832:	e7f4      	b.n	800881e <_printf_float+0x16e>
 8008834:	2301      	movs	r3, #1
 8008836:	e7f2      	b.n	800881e <_printf_float+0x16e>
 8008838:	f04f 0967 	mov.w	r9, #103	; 0x67
 800883c:	9b08      	ldr	r3, [sp, #32]
 800883e:	4299      	cmp	r1, r3
 8008840:	db05      	blt.n	800884e <_printf_float+0x19e>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	6121      	str	r1, [r4, #16]
 8008846:	07d8      	lsls	r0, r3, #31
 8008848:	d5ea      	bpl.n	8008820 <_printf_float+0x170>
 800884a:	1c4b      	adds	r3, r1, #1
 800884c:	e7e7      	b.n	800881e <_printf_float+0x16e>
 800884e:	2900      	cmp	r1, #0
 8008850:	bfd4      	ite	le
 8008852:	f1c1 0202 	rsble	r2, r1, #2
 8008856:	2201      	movgt	r2, #1
 8008858:	4413      	add	r3, r2
 800885a:	e7e0      	b.n	800881e <_printf_float+0x16e>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	055a      	lsls	r2, r3, #21
 8008860:	d407      	bmi.n	8008872 <_printf_float+0x1c2>
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	4642      	mov	r2, r8
 8008866:	4631      	mov	r1, r6
 8008868:	4628      	mov	r0, r5
 800886a:	47b8      	blx	r7
 800886c:	3001      	adds	r0, #1
 800886e:	d12a      	bne.n	80088c6 <_printf_float+0x216>
 8008870:	e76a      	b.n	8008748 <_printf_float+0x98>
 8008872:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008876:	f240 80e0 	bls.w	8008a3a <_printf_float+0x38a>
 800887a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800887e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008886:	d133      	bne.n	80088f0 <_printf_float+0x240>
 8008888:	4a37      	ldr	r2, [pc, #220]	; (8008968 <_printf_float+0x2b8>)
 800888a:	2301      	movs	r3, #1
 800888c:	4631      	mov	r1, r6
 800888e:	4628      	mov	r0, r5
 8008890:	47b8      	blx	r7
 8008892:	3001      	adds	r0, #1
 8008894:	f43f af58 	beq.w	8008748 <_printf_float+0x98>
 8008898:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800889c:	429a      	cmp	r2, r3
 800889e:	db02      	blt.n	80088a6 <_printf_float+0x1f6>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	07d8      	lsls	r0, r3, #31
 80088a4:	d50f      	bpl.n	80088c6 <_printf_float+0x216>
 80088a6:	4653      	mov	r3, sl
 80088a8:	465a      	mov	r2, fp
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	f43f af49 	beq.w	8008748 <_printf_float+0x98>
 80088b6:	f04f 0800 	mov.w	r8, #0
 80088ba:	f104 091a 	add.w	r9, r4, #26
 80088be:	9b08      	ldr	r3, [sp, #32]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	4543      	cmp	r3, r8
 80088c4:	dc09      	bgt.n	80088da <_printf_float+0x22a>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	079b      	lsls	r3, r3, #30
 80088ca:	f100 8106 	bmi.w	8008ada <_printf_float+0x42a>
 80088ce:	68e0      	ldr	r0, [r4, #12]
 80088d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d2:	4298      	cmp	r0, r3
 80088d4:	bfb8      	it	lt
 80088d6:	4618      	movlt	r0, r3
 80088d8:	e738      	b.n	800874c <_printf_float+0x9c>
 80088da:	2301      	movs	r3, #1
 80088dc:	464a      	mov	r2, r9
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f af2f 	beq.w	8008748 <_printf_float+0x98>
 80088ea:	f108 0801 	add.w	r8, r8, #1
 80088ee:	e7e6      	b.n	80088be <_printf_float+0x20e>
 80088f0:	9b07      	ldr	r3, [sp, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dc3a      	bgt.n	800896c <_printf_float+0x2bc>
 80088f6:	4a1c      	ldr	r2, [pc, #112]	; (8008968 <_printf_float+0x2b8>)
 80088f8:	2301      	movs	r3, #1
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f af21 	beq.w	8008748 <_printf_float+0x98>
 8008906:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800890a:	4313      	orrs	r3, r2
 800890c:	d102      	bne.n	8008914 <_printf_float+0x264>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	07d9      	lsls	r1, r3, #31
 8008912:	d5d8      	bpl.n	80088c6 <_printf_float+0x216>
 8008914:	4653      	mov	r3, sl
 8008916:	465a      	mov	r2, fp
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	f43f af12 	beq.w	8008748 <_printf_float+0x98>
 8008924:	f04f 0900 	mov.w	r9, #0
 8008928:	f104 0a1a 	add.w	sl, r4, #26
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	425b      	negs	r3, r3
 8008930:	454b      	cmp	r3, r9
 8008932:	dc01      	bgt.n	8008938 <_printf_float+0x288>
 8008934:	9b08      	ldr	r3, [sp, #32]
 8008936:	e795      	b.n	8008864 <_printf_float+0x1b4>
 8008938:	2301      	movs	r3, #1
 800893a:	4652      	mov	r2, sl
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f af00 	beq.w	8008748 <_printf_float+0x98>
 8008948:	f109 0901 	add.w	r9, r9, #1
 800894c:	e7ee      	b.n	800892c <_printf_float+0x27c>
 800894e:	bf00      	nop
 8008950:	ffffffff 	.word	0xffffffff
 8008954:	7fefffff 	.word	0x7fefffff
 8008958:	0800b4ac 	.word	0x0800b4ac
 800895c:	0800b4b0 	.word	0x0800b4b0
 8008960:	0800b4b4 	.word	0x0800b4b4
 8008964:	0800b4b8 	.word	0x0800b4b8
 8008968:	0800b4bc 	.word	0x0800b4bc
 800896c:	9a08      	ldr	r2, [sp, #32]
 800896e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008970:	429a      	cmp	r2, r3
 8008972:	bfa8      	it	ge
 8008974:	461a      	movge	r2, r3
 8008976:	2a00      	cmp	r2, #0
 8008978:	4691      	mov	r9, r2
 800897a:	dc38      	bgt.n	80089ee <_printf_float+0x33e>
 800897c:	2300      	movs	r3, #0
 800897e:	9305      	str	r3, [sp, #20]
 8008980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008984:	f104 021a 	add.w	r2, r4, #26
 8008988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800898a:	9905      	ldr	r1, [sp, #20]
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	eba3 0309 	sub.w	r3, r3, r9
 8008992:	428b      	cmp	r3, r1
 8008994:	dc33      	bgt.n	80089fe <_printf_float+0x34e>
 8008996:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800899a:	429a      	cmp	r2, r3
 800899c:	db3c      	blt.n	8008a18 <_printf_float+0x368>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	07da      	lsls	r2, r3, #31
 80089a2:	d439      	bmi.n	8008a18 <_printf_float+0x368>
 80089a4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80089a8:	eba2 0903 	sub.w	r9, r2, r3
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	4591      	cmp	r9, r2
 80089b2:	bfa8      	it	ge
 80089b4:	4691      	movge	r9, r2
 80089b6:	f1b9 0f00 	cmp.w	r9, #0
 80089ba:	dc35      	bgt.n	8008a28 <_printf_float+0x378>
 80089bc:	f04f 0800 	mov.w	r8, #0
 80089c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089c4:	f104 0a1a 	add.w	sl, r4, #26
 80089c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	eba3 0309 	sub.w	r3, r3, r9
 80089d2:	4543      	cmp	r3, r8
 80089d4:	f77f af77 	ble.w	80088c6 <_printf_float+0x216>
 80089d8:	2301      	movs	r3, #1
 80089da:	4652      	mov	r2, sl
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	f43f aeb0 	beq.w	8008748 <_printf_float+0x98>
 80089e8:	f108 0801 	add.w	r8, r8, #1
 80089ec:	e7ec      	b.n	80089c8 <_printf_float+0x318>
 80089ee:	4613      	mov	r3, r2
 80089f0:	4631      	mov	r1, r6
 80089f2:	4642      	mov	r2, r8
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	d1bf      	bne.n	800897c <_printf_float+0x2cc>
 80089fc:	e6a4      	b.n	8008748 <_printf_float+0x98>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	9204      	str	r2, [sp, #16]
 8008a06:	47b8      	blx	r7
 8008a08:	3001      	adds	r0, #1
 8008a0a:	f43f ae9d 	beq.w	8008748 <_printf_float+0x98>
 8008a0e:	9b05      	ldr	r3, [sp, #20]
 8008a10:	9a04      	ldr	r2, [sp, #16]
 8008a12:	3301      	adds	r3, #1
 8008a14:	9305      	str	r3, [sp, #20]
 8008a16:	e7b7      	b.n	8008988 <_printf_float+0x2d8>
 8008a18:	4653      	mov	r3, sl
 8008a1a:	465a      	mov	r2, fp
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	d1be      	bne.n	80089a4 <_printf_float+0x2f4>
 8008a26:	e68f      	b.n	8008748 <_printf_float+0x98>
 8008a28:	9a04      	ldr	r2, [sp, #16]
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	4442      	add	r2, r8
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	d1c1      	bne.n	80089bc <_printf_float+0x30c>
 8008a38:	e686      	b.n	8008748 <_printf_float+0x98>
 8008a3a:	9a08      	ldr	r2, [sp, #32]
 8008a3c:	2a01      	cmp	r2, #1
 8008a3e:	dc01      	bgt.n	8008a44 <_printf_float+0x394>
 8008a40:	07db      	lsls	r3, r3, #31
 8008a42:	d537      	bpl.n	8008ab4 <_printf_float+0x404>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4642      	mov	r2, r8
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f ae7a 	beq.w	8008748 <_printf_float+0x98>
 8008a54:	4653      	mov	r3, sl
 8008a56:	465a      	mov	r2, fp
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b8      	blx	r7
 8008a5e:	3001      	adds	r0, #1
 8008a60:	f43f ae72 	beq.w	8008748 <_printf_float+0x98>
 8008a64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008a68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	d01a      	beq.n	8008aaa <_printf_float+0x3fa>
 8008a74:	3b01      	subs	r3, #1
 8008a76:	f108 0201 	add.w	r2, r8, #1
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	d10e      	bne.n	8008aa2 <_printf_float+0x3f2>
 8008a84:	e660      	b.n	8008748 <_printf_float+0x98>
 8008a86:	2301      	movs	r3, #1
 8008a88:	464a      	mov	r2, r9
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	f43f ae59 	beq.w	8008748 <_printf_float+0x98>
 8008a96:	f108 0801 	add.w	r8, r8, #1
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	4543      	cmp	r3, r8
 8008aa0:	dcf1      	bgt.n	8008a86 <_printf_float+0x3d6>
 8008aa2:	9b04      	ldr	r3, [sp, #16]
 8008aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008aa8:	e6dd      	b.n	8008866 <_printf_float+0x1b6>
 8008aaa:	f04f 0800 	mov.w	r8, #0
 8008aae:	f104 091a 	add.w	r9, r4, #26
 8008ab2:	e7f2      	b.n	8008a9a <_printf_float+0x3ea>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	4642      	mov	r2, r8
 8008ab8:	e7df      	b.n	8008a7a <_printf_float+0x3ca>
 8008aba:	2301      	movs	r3, #1
 8008abc:	464a      	mov	r2, r9
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	47b8      	blx	r7
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	f43f ae3f 	beq.w	8008748 <_printf_float+0x98>
 8008aca:	f108 0801 	add.w	r8, r8, #1
 8008ace:	68e3      	ldr	r3, [r4, #12]
 8008ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ad2:	1a5b      	subs	r3, r3, r1
 8008ad4:	4543      	cmp	r3, r8
 8008ad6:	dcf0      	bgt.n	8008aba <_printf_float+0x40a>
 8008ad8:	e6f9      	b.n	80088ce <_printf_float+0x21e>
 8008ada:	f04f 0800 	mov.w	r8, #0
 8008ade:	f104 0919 	add.w	r9, r4, #25
 8008ae2:	e7f4      	b.n	8008ace <_printf_float+0x41e>

08008ae4 <_printf_common>:
 8008ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	4616      	mov	r6, r2
 8008aea:	4699      	mov	r9, r3
 8008aec:	688a      	ldr	r2, [r1, #8]
 8008aee:	690b      	ldr	r3, [r1, #16]
 8008af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	bfb8      	it	lt
 8008af8:	4613      	movlt	r3, r2
 8008afa:	6033      	str	r3, [r6, #0]
 8008afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b00:	4607      	mov	r7, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b10a      	cbz	r2, 8008b0a <_printf_common+0x26>
 8008b06:	3301      	adds	r3, #1
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	0699      	lsls	r1, r3, #26
 8008b0e:	bf42      	ittt	mi
 8008b10:	6833      	ldrmi	r3, [r6, #0]
 8008b12:	3302      	addmi	r3, #2
 8008b14:	6033      	strmi	r3, [r6, #0]
 8008b16:	6825      	ldr	r5, [r4, #0]
 8008b18:	f015 0506 	ands.w	r5, r5, #6
 8008b1c:	d106      	bne.n	8008b2c <_printf_common+0x48>
 8008b1e:	f104 0a19 	add.w	sl, r4, #25
 8008b22:	68e3      	ldr	r3, [r4, #12]
 8008b24:	6832      	ldr	r2, [r6, #0]
 8008b26:	1a9b      	subs	r3, r3, r2
 8008b28:	42ab      	cmp	r3, r5
 8008b2a:	dc26      	bgt.n	8008b7a <_printf_common+0x96>
 8008b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b30:	1e13      	subs	r3, r2, #0
 8008b32:	6822      	ldr	r2, [r4, #0]
 8008b34:	bf18      	it	ne
 8008b36:	2301      	movne	r3, #1
 8008b38:	0692      	lsls	r2, r2, #26
 8008b3a:	d42b      	bmi.n	8008b94 <_printf_common+0xb0>
 8008b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b40:	4649      	mov	r1, r9
 8008b42:	4638      	mov	r0, r7
 8008b44:	47c0      	blx	r8
 8008b46:	3001      	adds	r0, #1
 8008b48:	d01e      	beq.n	8008b88 <_printf_common+0xa4>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	f003 0306 	and.w	r3, r3, #6
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	bf02      	ittt	eq
 8008b56:	68e5      	ldreq	r5, [r4, #12]
 8008b58:	6833      	ldreq	r3, [r6, #0]
 8008b5a:	1aed      	subeq	r5, r5, r3
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	bf0c      	ite	eq
 8008b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b64:	2500      	movne	r5, #0
 8008b66:	4293      	cmp	r3, r2
 8008b68:	bfc4      	itt	gt
 8008b6a:	1a9b      	subgt	r3, r3, r2
 8008b6c:	18ed      	addgt	r5, r5, r3
 8008b6e:	2600      	movs	r6, #0
 8008b70:	341a      	adds	r4, #26
 8008b72:	42b5      	cmp	r5, r6
 8008b74:	d11a      	bne.n	8008bac <_printf_common+0xc8>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e008      	b.n	8008b8c <_printf_common+0xa8>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4638      	mov	r0, r7
 8008b82:	47c0      	blx	r8
 8008b84:	3001      	adds	r0, #1
 8008b86:	d103      	bne.n	8008b90 <_printf_common+0xac>
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	3501      	adds	r5, #1
 8008b92:	e7c6      	b.n	8008b22 <_printf_common+0x3e>
 8008b94:	18e1      	adds	r1, r4, r3
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	2030      	movs	r0, #48	; 0x30
 8008b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b9e:	4422      	add	r2, r4
 8008ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ba8:	3302      	adds	r3, #2
 8008baa:	e7c7      	b.n	8008b3c <_printf_common+0x58>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4622      	mov	r2, r4
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47c0      	blx	r8
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d0e6      	beq.n	8008b88 <_printf_common+0xa4>
 8008bba:	3601      	adds	r6, #1
 8008bbc:	e7d9      	b.n	8008b72 <_printf_common+0x8e>
	...

08008bc0 <_printf_i>:
 8008bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	7e0f      	ldrb	r7, [r1, #24]
 8008bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bc8:	2f78      	cmp	r7, #120	; 0x78
 8008bca:	4691      	mov	r9, r2
 8008bcc:	4680      	mov	r8, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	469a      	mov	sl, r3
 8008bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bd6:	d807      	bhi.n	8008be8 <_printf_i+0x28>
 8008bd8:	2f62      	cmp	r7, #98	; 0x62
 8008bda:	d80a      	bhi.n	8008bf2 <_printf_i+0x32>
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	f000 80d4 	beq.w	8008d8a <_printf_i+0x1ca>
 8008be2:	2f58      	cmp	r7, #88	; 0x58
 8008be4:	f000 80c0 	beq.w	8008d68 <_printf_i+0x1a8>
 8008be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bf0:	e03a      	b.n	8008c68 <_printf_i+0xa8>
 8008bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bf6:	2b15      	cmp	r3, #21
 8008bf8:	d8f6      	bhi.n	8008be8 <_printf_i+0x28>
 8008bfa:	a101      	add	r1, pc, #4	; (adr r1, 8008c00 <_printf_i+0x40>)
 8008bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008be9 	.word	0x08008be9
 8008c0c:	08008be9 	.word	0x08008be9
 8008c10:	08008be9 	.word	0x08008be9
 8008c14:	08008be9 	.word	0x08008be9
 8008c18:	08008c6d 	.word	0x08008c6d
 8008c1c:	08008be9 	.word	0x08008be9
 8008c20:	08008be9 	.word	0x08008be9
 8008c24:	08008be9 	.word	0x08008be9
 8008c28:	08008be9 	.word	0x08008be9
 8008c2c:	08008d71 	.word	0x08008d71
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008d2b 	.word	0x08008d2b
 8008c38:	08008be9 	.word	0x08008be9
 8008c3c:	08008be9 	.word	0x08008be9
 8008c40:	08008d93 	.word	0x08008d93
 8008c44:	08008be9 	.word	0x08008be9
 8008c48:	08008c99 	.word	0x08008c99
 8008c4c:	08008be9 	.word	0x08008be9
 8008c50:	08008be9 	.word	0x08008be9
 8008c54:	08008d33 	.word	0x08008d33
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	602a      	str	r2, [r5, #0]
 8008c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e09f      	b.n	8008dac <_printf_i+0x1ec>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	682b      	ldr	r3, [r5, #0]
 8008c70:	0607      	lsls	r7, r0, #24
 8008c72:	f103 0104 	add.w	r1, r3, #4
 8008c76:	6029      	str	r1, [r5, #0]
 8008c78:	d501      	bpl.n	8008c7e <_printf_i+0xbe>
 8008c7a:	681e      	ldr	r6, [r3, #0]
 8008c7c:	e003      	b.n	8008c86 <_printf_i+0xc6>
 8008c7e:	0646      	lsls	r6, r0, #25
 8008c80:	d5fb      	bpl.n	8008c7a <_printf_i+0xba>
 8008c82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	da03      	bge.n	8008c92 <_printf_i+0xd2>
 8008c8a:	232d      	movs	r3, #45	; 0x2d
 8008c8c:	4276      	negs	r6, r6
 8008c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c92:	485a      	ldr	r0, [pc, #360]	; (8008dfc <_printf_i+0x23c>)
 8008c94:	230a      	movs	r3, #10
 8008c96:	e012      	b.n	8008cbe <_printf_i+0xfe>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	6820      	ldr	r0, [r4, #0]
 8008c9c:	1d19      	adds	r1, r3, #4
 8008c9e:	6029      	str	r1, [r5, #0]
 8008ca0:	0605      	lsls	r5, r0, #24
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0xe8>
 8008ca4:	681e      	ldr	r6, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <_printf_i+0xee>
 8008ca8:	0641      	lsls	r1, r0, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0xe4>
 8008cac:	881e      	ldrh	r6, [r3, #0]
 8008cae:	4853      	ldr	r0, [pc, #332]	; (8008dfc <_printf_i+0x23c>)
 8008cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2308      	moveq	r3, #8
 8008cb6:	230a      	movne	r3, #10
 8008cb8:	2100      	movs	r1, #0
 8008cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cbe:	6865      	ldr	r5, [r4, #4]
 8008cc0:	60a5      	str	r5, [r4, #8]
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	bfa2      	ittt	ge
 8008cc6:	6821      	ldrge	r1, [r4, #0]
 8008cc8:	f021 0104 	bicge.w	r1, r1, #4
 8008ccc:	6021      	strge	r1, [r4, #0]
 8008cce:	b90e      	cbnz	r6, 8008cd4 <_printf_i+0x114>
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	d04b      	beq.n	8008d6c <_printf_i+0x1ac>
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cda:	fb03 6711 	mls	r7, r3, r1, r6
 8008cde:	5dc7      	ldrb	r7, [r0, r7]
 8008ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ce4:	4637      	mov	r7, r6
 8008ce6:	42bb      	cmp	r3, r7
 8008ce8:	460e      	mov	r6, r1
 8008cea:	d9f4      	bls.n	8008cd6 <_printf_i+0x116>
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d10b      	bne.n	8008d08 <_printf_i+0x148>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	07de      	lsls	r6, r3, #31
 8008cf4:	d508      	bpl.n	8008d08 <_printf_i+0x148>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	6861      	ldr	r1, [r4, #4]
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	bfde      	ittt	le
 8008cfe:	2330      	movle	r3, #48	; 0x30
 8008d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d08:	1b52      	subs	r2, r2, r5
 8008d0a:	6122      	str	r2, [r4, #16]
 8008d0c:	f8cd a000 	str.w	sl, [sp]
 8008d10:	464b      	mov	r3, r9
 8008d12:	aa03      	add	r2, sp, #12
 8008d14:	4621      	mov	r1, r4
 8008d16:	4640      	mov	r0, r8
 8008d18:	f7ff fee4 	bl	8008ae4 <_printf_common>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d14a      	bne.n	8008db6 <_printf_i+0x1f6>
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	b004      	add	sp, #16
 8008d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f043 0320 	orr.w	r3, r3, #32
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	4833      	ldr	r0, [pc, #204]	; (8008e00 <_printf_i+0x240>)
 8008d34:	2778      	movs	r7, #120	; 0x78
 8008d36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	6829      	ldr	r1, [r5, #0]
 8008d3e:	061f      	lsls	r7, r3, #24
 8008d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d44:	d402      	bmi.n	8008d4c <_printf_i+0x18c>
 8008d46:	065f      	lsls	r7, r3, #25
 8008d48:	bf48      	it	mi
 8008d4a:	b2b6      	uxthmi	r6, r6
 8008d4c:	07df      	lsls	r7, r3, #31
 8008d4e:	bf48      	it	mi
 8008d50:	f043 0320 	orrmi.w	r3, r3, #32
 8008d54:	6029      	str	r1, [r5, #0]
 8008d56:	bf48      	it	mi
 8008d58:	6023      	strmi	r3, [r4, #0]
 8008d5a:	b91e      	cbnz	r6, 8008d64 <_printf_i+0x1a4>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	f023 0320 	bic.w	r3, r3, #32
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	2310      	movs	r3, #16
 8008d66:	e7a7      	b.n	8008cb8 <_printf_i+0xf8>
 8008d68:	4824      	ldr	r0, [pc, #144]	; (8008dfc <_printf_i+0x23c>)
 8008d6a:	e7e4      	b.n	8008d36 <_printf_i+0x176>
 8008d6c:	4615      	mov	r5, r2
 8008d6e:	e7bd      	b.n	8008cec <_printf_i+0x12c>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	6826      	ldr	r6, [r4, #0]
 8008d74:	6961      	ldr	r1, [r4, #20]
 8008d76:	1d18      	adds	r0, r3, #4
 8008d78:	6028      	str	r0, [r5, #0]
 8008d7a:	0635      	lsls	r5, r6, #24
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	d501      	bpl.n	8008d84 <_printf_i+0x1c4>
 8008d80:	6019      	str	r1, [r3, #0]
 8008d82:	e002      	b.n	8008d8a <_printf_i+0x1ca>
 8008d84:	0670      	lsls	r0, r6, #25
 8008d86:	d5fb      	bpl.n	8008d80 <_printf_i+0x1c0>
 8008d88:	8019      	strh	r1, [r3, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	4615      	mov	r5, r2
 8008d90:	e7bc      	b.n	8008d0c <_printf_i+0x14c>
 8008d92:	682b      	ldr	r3, [r5, #0]
 8008d94:	1d1a      	adds	r2, r3, #4
 8008d96:	602a      	str	r2, [r5, #0]
 8008d98:	681d      	ldr	r5, [r3, #0]
 8008d9a:	6862      	ldr	r2, [r4, #4]
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f7f7 fa4e 	bl	8000240 <memchr>
 8008da4:	b108      	cbz	r0, 8008daa <_printf_i+0x1ea>
 8008da6:	1b40      	subs	r0, r0, r5
 8008da8:	6060      	str	r0, [r4, #4]
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	2300      	movs	r3, #0
 8008db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db4:	e7aa      	b.n	8008d0c <_printf_i+0x14c>
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	462a      	mov	r2, r5
 8008dba:	4649      	mov	r1, r9
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	47d0      	blx	sl
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d0ad      	beq.n	8008d20 <_printf_i+0x160>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	079b      	lsls	r3, r3, #30
 8008dc8:	d413      	bmi.n	8008df2 <_printf_i+0x232>
 8008dca:	68e0      	ldr	r0, [r4, #12]
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	4298      	cmp	r0, r3
 8008dd0:	bfb8      	it	lt
 8008dd2:	4618      	movlt	r0, r3
 8008dd4:	e7a6      	b.n	8008d24 <_printf_i+0x164>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	47d0      	blx	sl
 8008de0:	3001      	adds	r0, #1
 8008de2:	d09d      	beq.n	8008d20 <_printf_i+0x160>
 8008de4:	3501      	adds	r5, #1
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	9903      	ldr	r1, [sp, #12]
 8008dea:	1a5b      	subs	r3, r3, r1
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dcf2      	bgt.n	8008dd6 <_printf_i+0x216>
 8008df0:	e7eb      	b.n	8008dca <_printf_i+0x20a>
 8008df2:	2500      	movs	r5, #0
 8008df4:	f104 0619 	add.w	r6, r4, #25
 8008df8:	e7f5      	b.n	8008de6 <_printf_i+0x226>
 8008dfa:	bf00      	nop
 8008dfc:	0800b4be 	.word	0x0800b4be
 8008e00:	0800b4cf 	.word	0x0800b4cf

08008e04 <std>:
 8008e04:	2300      	movs	r3, #0
 8008e06:	b510      	push	{r4, lr}
 8008e08:	4604      	mov	r4, r0
 8008e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e12:	6083      	str	r3, [r0, #8]
 8008e14:	8181      	strh	r1, [r0, #12]
 8008e16:	6643      	str	r3, [r0, #100]	; 0x64
 8008e18:	81c2      	strh	r2, [r0, #14]
 8008e1a:	6183      	str	r3, [r0, #24]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	2208      	movs	r2, #8
 8008e20:	305c      	adds	r0, #92	; 0x5c
 8008e22:	f000 f914 	bl	800904e <memset>
 8008e26:	4b0d      	ldr	r3, [pc, #52]	; (8008e5c <std+0x58>)
 8008e28:	6263      	str	r3, [r4, #36]	; 0x24
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	; (8008e60 <std+0x5c>)
 8008e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <std+0x60>)
 8008e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e32:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <std+0x64>)
 8008e34:	6323      	str	r3, [r4, #48]	; 0x30
 8008e36:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <std+0x68>)
 8008e38:	6224      	str	r4, [r4, #32]
 8008e3a:	429c      	cmp	r4, r3
 8008e3c:	d006      	beq.n	8008e4c <std+0x48>
 8008e3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008e42:	4294      	cmp	r4, r2
 8008e44:	d002      	beq.n	8008e4c <std+0x48>
 8008e46:	33d0      	adds	r3, #208	; 0xd0
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	d105      	bne.n	8008e58 <std+0x54>
 8008e4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e54:	f000 b9ce 	b.w	80091f4 <__retarget_lock_init_recursive>
 8008e58:	bd10      	pop	{r4, pc}
 8008e5a:	bf00      	nop
 8008e5c:	08008fc9 	.word	0x08008fc9
 8008e60:	08008feb 	.word	0x08008feb
 8008e64:	08009023 	.word	0x08009023
 8008e68:	08009047 	.word	0x08009047
 8008e6c:	200052f0 	.word	0x200052f0

08008e70 <stdio_exit_handler>:
 8008e70:	4a02      	ldr	r2, [pc, #8]	; (8008e7c <stdio_exit_handler+0xc>)
 8008e72:	4903      	ldr	r1, [pc, #12]	; (8008e80 <stdio_exit_handler+0x10>)
 8008e74:	4803      	ldr	r0, [pc, #12]	; (8008e84 <stdio_exit_handler+0x14>)
 8008e76:	f000 b869 	b.w	8008f4c <_fwalk_sglue>
 8008e7a:	bf00      	nop
 8008e7c:	20000040 	.word	0x20000040
 8008e80:	0800aab5 	.word	0x0800aab5
 8008e84:	2000004c 	.word	0x2000004c

08008e88 <cleanup_stdio>:
 8008e88:	6841      	ldr	r1, [r0, #4]
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <cleanup_stdio+0x34>)
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	4604      	mov	r4, r0
 8008e92:	d001      	beq.n	8008e98 <cleanup_stdio+0x10>
 8008e94:	f001 fe0e 	bl	800aab4 <_fflush_r>
 8008e98:	68a1      	ldr	r1, [r4, #8]
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <cleanup_stdio+0x38>)
 8008e9c:	4299      	cmp	r1, r3
 8008e9e:	d002      	beq.n	8008ea6 <cleanup_stdio+0x1e>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f001 fe07 	bl	800aab4 <_fflush_r>
 8008ea6:	68e1      	ldr	r1, [r4, #12]
 8008ea8:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <cleanup_stdio+0x3c>)
 8008eaa:	4299      	cmp	r1, r3
 8008eac:	d004      	beq.n	8008eb8 <cleanup_stdio+0x30>
 8008eae:	4620      	mov	r0, r4
 8008eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb4:	f001 bdfe 	b.w	800aab4 <_fflush_r>
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	bf00      	nop
 8008ebc:	200052f0 	.word	0x200052f0
 8008ec0:	20005358 	.word	0x20005358
 8008ec4:	200053c0 	.word	0x200053c0

08008ec8 <global_stdio_init.part.0>:
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <global_stdio_init.part.0+0x30>)
 8008ecc:	4c0b      	ldr	r4, [pc, #44]	; (8008efc <global_stdio_init.part.0+0x34>)
 8008ece:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <global_stdio_init.part.0+0x38>)
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	f7ff ff94 	bl	8008e04 <std>
 8008edc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	2109      	movs	r1, #9
 8008ee4:	f7ff ff8e 	bl	8008e04 <std>
 8008ee8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008eec:	2202      	movs	r2, #2
 8008eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef2:	2112      	movs	r1, #18
 8008ef4:	f7ff bf86 	b.w	8008e04 <std>
 8008ef8:	20005428 	.word	0x20005428
 8008efc:	200052f0 	.word	0x200052f0
 8008f00:	08008e71 	.word	0x08008e71

08008f04 <__sfp_lock_acquire>:
 8008f04:	4801      	ldr	r0, [pc, #4]	; (8008f0c <__sfp_lock_acquire+0x8>)
 8008f06:	f000 b976 	b.w	80091f6 <__retarget_lock_acquire_recursive>
 8008f0a:	bf00      	nop
 8008f0c:	20005431 	.word	0x20005431

08008f10 <__sfp_lock_release>:
 8008f10:	4801      	ldr	r0, [pc, #4]	; (8008f18 <__sfp_lock_release+0x8>)
 8008f12:	f000 b971 	b.w	80091f8 <__retarget_lock_release_recursive>
 8008f16:	bf00      	nop
 8008f18:	20005431 	.word	0x20005431

08008f1c <__sinit>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	f7ff fff0 	bl	8008f04 <__sfp_lock_acquire>
 8008f24:	6a23      	ldr	r3, [r4, #32]
 8008f26:	b11b      	cbz	r3, 8008f30 <__sinit+0x14>
 8008f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f2c:	f7ff bff0 	b.w	8008f10 <__sfp_lock_release>
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <__sinit+0x28>)
 8008f32:	6223      	str	r3, [r4, #32]
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <__sinit+0x2c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f5      	bne.n	8008f28 <__sinit+0xc>
 8008f3c:	f7ff ffc4 	bl	8008ec8 <global_stdio_init.part.0>
 8008f40:	e7f2      	b.n	8008f28 <__sinit+0xc>
 8008f42:	bf00      	nop
 8008f44:	08008e89 	.word	0x08008e89
 8008f48:	20005428 	.word	0x20005428

08008f4c <_fwalk_sglue>:
 8008f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	4607      	mov	r7, r0
 8008f52:	4688      	mov	r8, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	2600      	movs	r6, #0
 8008f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8008f60:	d505      	bpl.n	8008f6e <_fwalk_sglue+0x22>
 8008f62:	6824      	ldr	r4, [r4, #0]
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	d1f7      	bne.n	8008f58 <_fwalk_sglue+0xc>
 8008f68:	4630      	mov	r0, r6
 8008f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6e:	89ab      	ldrh	r3, [r5, #12]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d907      	bls.n	8008f84 <_fwalk_sglue+0x38>
 8008f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	d003      	beq.n	8008f84 <_fwalk_sglue+0x38>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c0      	blx	r8
 8008f82:	4306      	orrs	r6, r0
 8008f84:	3568      	adds	r5, #104	; 0x68
 8008f86:	e7e9      	b.n	8008f5c <_fwalk_sglue+0x10>

08008f88 <siprintf>:
 8008f88:	b40e      	push	{r1, r2, r3}
 8008f8a:	b500      	push	{lr}
 8008f8c:	b09c      	sub	sp, #112	; 0x70
 8008f8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f90:	9002      	str	r0, [sp, #8]
 8008f92:	9006      	str	r0, [sp, #24]
 8008f94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f98:	4809      	ldr	r0, [pc, #36]	; (8008fc0 <siprintf+0x38>)
 8008f9a:	9107      	str	r1, [sp, #28]
 8008f9c:	9104      	str	r1, [sp, #16]
 8008f9e:	4909      	ldr	r1, [pc, #36]	; (8008fc4 <siprintf+0x3c>)
 8008fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa4:	9105      	str	r1, [sp, #20]
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	a902      	add	r1, sp, #8
 8008fac:	f001 fbfe 	bl	800a7ac <_svfiprintf_r>
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	b01c      	add	sp, #112	; 0x70
 8008fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbc:	b003      	add	sp, #12
 8008fbe:	4770      	bx	lr
 8008fc0:	20000098 	.word	0x20000098
 8008fc4:	ffff0208 	.word	0xffff0208

08008fc8 <__sread>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	460c      	mov	r4, r1
 8008fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd0:	f000 f8c2 	bl	8009158 <_read_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	bfab      	itete	ge
 8008fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fda:	89a3      	ldrhlt	r3, [r4, #12]
 8008fdc:	181b      	addge	r3, r3, r0
 8008fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fe2:	bfac      	ite	ge
 8008fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fe6:	81a3      	strhlt	r3, [r4, #12]
 8008fe8:	bd10      	pop	{r4, pc}

08008fea <__swrite>:
 8008fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fee:	461f      	mov	r7, r3
 8008ff0:	898b      	ldrh	r3, [r1, #12]
 8008ff2:	05db      	lsls	r3, r3, #23
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	d505      	bpl.n	8009008 <__swrite+0x1e>
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	2302      	movs	r3, #2
 8009002:	2200      	movs	r2, #0
 8009004:	f000 f896 	bl	8009134 <_lseek_r>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800900e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	4632      	mov	r2, r6
 8009016:	463b      	mov	r3, r7
 8009018:	4628      	mov	r0, r5
 800901a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	f000 b8ad 	b.w	800917c <_write_r>

08009022 <__sseek>:
 8009022:	b510      	push	{r4, lr}
 8009024:	460c      	mov	r4, r1
 8009026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902a:	f000 f883 	bl	8009134 <_lseek_r>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	bf15      	itete	ne
 8009034:	6560      	strne	r0, [r4, #84]	; 0x54
 8009036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800903a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800903e:	81a3      	strheq	r3, [r4, #12]
 8009040:	bf18      	it	ne
 8009042:	81a3      	strhne	r3, [r4, #12]
 8009044:	bd10      	pop	{r4, pc}

08009046 <__sclose>:
 8009046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904a:	f000 b80d 	b.w	8009068 <_close_r>

0800904e <memset>:
 800904e:	4402      	add	r2, r0
 8009050:	4603      	mov	r3, r0
 8009052:	4293      	cmp	r3, r2
 8009054:	d100      	bne.n	8009058 <memset+0xa>
 8009056:	4770      	bx	lr
 8009058:	f803 1b01 	strb.w	r1, [r3], #1
 800905c:	e7f9      	b.n	8009052 <memset+0x4>
	...

08009060 <_localeconv_r>:
 8009060:	4800      	ldr	r0, [pc, #0]	; (8009064 <_localeconv_r+0x4>)
 8009062:	4770      	bx	lr
 8009064:	2000018c 	.word	0x2000018c

08009068 <_close_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d06      	ldr	r5, [pc, #24]	; (8009084 <_close_r+0x1c>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	f7f8 fc41 	bl	80018fa <_close>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_close_r+0x1a>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_close_r+0x1a>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	2000542c 	.word	0x2000542c

08009088 <_reclaim_reent>:
 8009088:	4b29      	ldr	r3, [pc, #164]	; (8009130 <_reclaim_reent+0xa8>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4283      	cmp	r3, r0
 800908e:	b570      	push	{r4, r5, r6, lr}
 8009090:	4604      	mov	r4, r0
 8009092:	d04b      	beq.n	800912c <_reclaim_reent+0xa4>
 8009094:	69c3      	ldr	r3, [r0, #28]
 8009096:	b143      	cbz	r3, 80090aa <_reclaim_reent+0x22>
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d144      	bne.n	8009128 <_reclaim_reent+0xa0>
 800909e:	69e3      	ldr	r3, [r4, #28]
 80090a0:	6819      	ldr	r1, [r3, #0]
 80090a2:	b111      	cbz	r1, 80090aa <_reclaim_reent+0x22>
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 feab 	bl	8009e00 <_free_r>
 80090aa:	6961      	ldr	r1, [r4, #20]
 80090ac:	b111      	cbz	r1, 80090b4 <_reclaim_reent+0x2c>
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 fea6 	bl	8009e00 <_free_r>
 80090b4:	69e1      	ldr	r1, [r4, #28]
 80090b6:	b111      	cbz	r1, 80090be <_reclaim_reent+0x36>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fea1 	bl	8009e00 <_free_r>
 80090be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80090c0:	b111      	cbz	r1, 80090c8 <_reclaim_reent+0x40>
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fe9c 	bl	8009e00 <_free_r>
 80090c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ca:	b111      	cbz	r1, 80090d2 <_reclaim_reent+0x4a>
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 fe97 	bl	8009e00 <_free_r>
 80090d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80090d4:	b111      	cbz	r1, 80090dc <_reclaim_reent+0x54>
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fe92 	bl	8009e00 <_free_r>
 80090dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80090de:	b111      	cbz	r1, 80090e6 <_reclaim_reent+0x5e>
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fe8d 	bl	8009e00 <_free_r>
 80090e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80090e8:	b111      	cbz	r1, 80090f0 <_reclaim_reent+0x68>
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 fe88 	bl	8009e00 <_free_r>
 80090f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80090f2:	b111      	cbz	r1, 80090fa <_reclaim_reent+0x72>
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 fe83 	bl	8009e00 <_free_r>
 80090fa:	6a23      	ldr	r3, [r4, #32]
 80090fc:	b1b3      	cbz	r3, 800912c <_reclaim_reent+0xa4>
 80090fe:	4620      	mov	r0, r4
 8009100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009104:	4718      	bx	r3
 8009106:	5949      	ldr	r1, [r1, r5]
 8009108:	b941      	cbnz	r1, 800911c <_reclaim_reent+0x94>
 800910a:	3504      	adds	r5, #4
 800910c:	69e3      	ldr	r3, [r4, #28]
 800910e:	2d80      	cmp	r5, #128	; 0x80
 8009110:	68d9      	ldr	r1, [r3, #12]
 8009112:	d1f8      	bne.n	8009106 <_reclaim_reent+0x7e>
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fe73 	bl	8009e00 <_free_r>
 800911a:	e7c0      	b.n	800909e <_reclaim_reent+0x16>
 800911c:	680e      	ldr	r6, [r1, #0]
 800911e:	4620      	mov	r0, r4
 8009120:	f000 fe6e 	bl	8009e00 <_free_r>
 8009124:	4631      	mov	r1, r6
 8009126:	e7ef      	b.n	8009108 <_reclaim_reent+0x80>
 8009128:	2500      	movs	r5, #0
 800912a:	e7ef      	b.n	800910c <_reclaim_reent+0x84>
 800912c:	bd70      	pop	{r4, r5, r6, pc}
 800912e:	bf00      	nop
 8009130:	20000098 	.word	0x20000098

08009134 <_lseek_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	; (8009154 <_lseek_r+0x20>)
 8009138:	4604      	mov	r4, r0
 800913a:	4608      	mov	r0, r1
 800913c:	4611      	mov	r1, r2
 800913e:	2200      	movs	r2, #0
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f7f8 fc00 	bl	8001948 <_lseek>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_lseek_r+0x1e>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_lseek_r+0x1e>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	2000542c 	.word	0x2000542c

08009158 <_read_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d07      	ldr	r5, [pc, #28]	; (8009178 <_read_r+0x20>)
 800915c:	4604      	mov	r4, r0
 800915e:	4608      	mov	r0, r1
 8009160:	4611      	mov	r1, r2
 8009162:	2200      	movs	r2, #0
 8009164:	602a      	str	r2, [r5, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f7f8 fb8e 	bl	8001888 <_read>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_read_r+0x1e>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_read_r+0x1e>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	2000542c 	.word	0x2000542c

0800917c <_write_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4d07      	ldr	r5, [pc, #28]	; (800919c <_write_r+0x20>)
 8009180:	4604      	mov	r4, r0
 8009182:	4608      	mov	r0, r1
 8009184:	4611      	mov	r1, r2
 8009186:	2200      	movs	r2, #0
 8009188:	602a      	str	r2, [r5, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f7f8 fb99 	bl	80018c2 <_write>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_write_r+0x1e>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_write_r+0x1e>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	2000542c 	.word	0x2000542c

080091a0 <__errno>:
 80091a0:	4b01      	ldr	r3, [pc, #4]	; (80091a8 <__errno+0x8>)
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20000098 	.word	0x20000098

080091ac <__libc_init_array>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	4d0d      	ldr	r5, [pc, #52]	; (80091e4 <__libc_init_array+0x38>)
 80091b0:	4c0d      	ldr	r4, [pc, #52]	; (80091e8 <__libc_init_array+0x3c>)
 80091b2:	1b64      	subs	r4, r4, r5
 80091b4:	10a4      	asrs	r4, r4, #2
 80091b6:	2600      	movs	r6, #0
 80091b8:	42a6      	cmp	r6, r4
 80091ba:	d109      	bne.n	80091d0 <__libc_init_array+0x24>
 80091bc:	4d0b      	ldr	r5, [pc, #44]	; (80091ec <__libc_init_array+0x40>)
 80091be:	4c0c      	ldr	r4, [pc, #48]	; (80091f0 <__libc_init_array+0x44>)
 80091c0:	f002 f80e 	bl	800b1e0 <_init>
 80091c4:	1b64      	subs	r4, r4, r5
 80091c6:	10a4      	asrs	r4, r4, #2
 80091c8:	2600      	movs	r6, #0
 80091ca:	42a6      	cmp	r6, r4
 80091cc:	d105      	bne.n	80091da <__libc_init_array+0x2e>
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d4:	4798      	blx	r3
 80091d6:	3601      	adds	r6, #1
 80091d8:	e7ee      	b.n	80091b8 <__libc_init_array+0xc>
 80091da:	f855 3b04 	ldr.w	r3, [r5], #4
 80091de:	4798      	blx	r3
 80091e0:	3601      	adds	r6, #1
 80091e2:	e7f2      	b.n	80091ca <__libc_init_array+0x1e>
 80091e4:	0800b824 	.word	0x0800b824
 80091e8:	0800b824 	.word	0x0800b824
 80091ec:	0800b824 	.word	0x0800b824
 80091f0:	0800b828 	.word	0x0800b828

080091f4 <__retarget_lock_init_recursive>:
 80091f4:	4770      	bx	lr

080091f6 <__retarget_lock_acquire_recursive>:
 80091f6:	4770      	bx	lr

080091f8 <__retarget_lock_release_recursive>:
 80091f8:	4770      	bx	lr

080091fa <memcpy>:
 80091fa:	440a      	add	r2, r1
 80091fc:	4291      	cmp	r1, r2
 80091fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009202:	d100      	bne.n	8009206 <memcpy+0xc>
 8009204:	4770      	bx	lr
 8009206:	b510      	push	{r4, lr}
 8009208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009210:	4291      	cmp	r1, r2
 8009212:	d1f9      	bne.n	8009208 <memcpy+0xe>
 8009214:	bd10      	pop	{r4, pc}

08009216 <quorem>:
 8009216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	6903      	ldr	r3, [r0, #16]
 800921c:	690c      	ldr	r4, [r1, #16]
 800921e:	42a3      	cmp	r3, r4
 8009220:	4607      	mov	r7, r0
 8009222:	db7e      	blt.n	8009322 <quorem+0x10c>
 8009224:	3c01      	subs	r4, #1
 8009226:	f101 0814 	add.w	r8, r1, #20
 800922a:	f100 0514 	add.w	r5, r0, #20
 800922e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009238:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800923c:	3301      	adds	r3, #1
 800923e:	429a      	cmp	r2, r3
 8009240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009248:	fbb2 f6f3 	udiv	r6, r2, r3
 800924c:	d331      	bcc.n	80092b2 <quorem+0x9c>
 800924e:	f04f 0e00 	mov.w	lr, #0
 8009252:	4640      	mov	r0, r8
 8009254:	46ac      	mov	ip, r5
 8009256:	46f2      	mov	sl, lr
 8009258:	f850 2b04 	ldr.w	r2, [r0], #4
 800925c:	b293      	uxth	r3, r2
 800925e:	fb06 e303 	mla	r3, r6, r3, lr
 8009262:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009266:	0c1a      	lsrs	r2, r3, #16
 8009268:	b29b      	uxth	r3, r3
 800926a:	ebaa 0303 	sub.w	r3, sl, r3
 800926e:	f8dc a000 	ldr.w	sl, [ip]
 8009272:	fa13 f38a 	uxtah	r3, r3, sl
 8009276:	fb06 220e 	mla	r2, r6, lr, r2
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	9b00      	ldr	r3, [sp, #0]
 800927e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009282:	b292      	uxth	r2, r2
 8009284:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800928c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009290:	4581      	cmp	r9, r0
 8009292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009296:	f84c 3b04 	str.w	r3, [ip], #4
 800929a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800929e:	d2db      	bcs.n	8009258 <quorem+0x42>
 80092a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80092a4:	b92b      	cbnz	r3, 80092b2 <quorem+0x9c>
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	3b04      	subs	r3, #4
 80092aa:	429d      	cmp	r5, r3
 80092ac:	461a      	mov	r2, r3
 80092ae:	d32c      	bcc.n	800930a <quorem+0xf4>
 80092b0:	613c      	str	r4, [r7, #16]
 80092b2:	4638      	mov	r0, r7
 80092b4:	f001 f920 	bl	800a4f8 <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	db22      	blt.n	8009302 <quorem+0xec>
 80092bc:	3601      	adds	r6, #1
 80092be:	4629      	mov	r1, r5
 80092c0:	2000      	movs	r0, #0
 80092c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80092c6:	f8d1 c000 	ldr.w	ip, [r1]
 80092ca:	b293      	uxth	r3, r2
 80092cc:	1ac3      	subs	r3, r0, r3
 80092ce:	0c12      	lsrs	r2, r2, #16
 80092d0:	fa13 f38c 	uxtah	r3, r3, ip
 80092d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80092d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092dc:	b29b      	uxth	r3, r3
 80092de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092e2:	45c1      	cmp	r9, r8
 80092e4:	f841 3b04 	str.w	r3, [r1], #4
 80092e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092ec:	d2e9      	bcs.n	80092c2 <quorem+0xac>
 80092ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092f6:	b922      	cbnz	r2, 8009302 <quorem+0xec>
 80092f8:	3b04      	subs	r3, #4
 80092fa:	429d      	cmp	r5, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	d30a      	bcc.n	8009316 <quorem+0x100>
 8009300:	613c      	str	r4, [r7, #16]
 8009302:	4630      	mov	r0, r6
 8009304:	b003      	add	sp, #12
 8009306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930a:	6812      	ldr	r2, [r2, #0]
 800930c:	3b04      	subs	r3, #4
 800930e:	2a00      	cmp	r2, #0
 8009310:	d1ce      	bne.n	80092b0 <quorem+0x9a>
 8009312:	3c01      	subs	r4, #1
 8009314:	e7c9      	b.n	80092aa <quorem+0x94>
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	3b04      	subs	r3, #4
 800931a:	2a00      	cmp	r2, #0
 800931c:	d1f0      	bne.n	8009300 <quorem+0xea>
 800931e:	3c01      	subs	r4, #1
 8009320:	e7eb      	b.n	80092fa <quorem+0xe4>
 8009322:	2000      	movs	r0, #0
 8009324:	e7ee      	b.n	8009304 <quorem+0xee>
	...

08009328 <_dtoa_r>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	ed2d 8b02 	vpush	{d8}
 8009330:	69c5      	ldr	r5, [r0, #28]
 8009332:	b091      	sub	sp, #68	; 0x44
 8009334:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009338:	ec59 8b10 	vmov	r8, r9, d0
 800933c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800933e:	9106      	str	r1, [sp, #24]
 8009340:	4606      	mov	r6, r0
 8009342:	9208      	str	r2, [sp, #32]
 8009344:	930c      	str	r3, [sp, #48]	; 0x30
 8009346:	b975      	cbnz	r5, 8009366 <_dtoa_r+0x3e>
 8009348:	2010      	movs	r0, #16
 800934a:	f000 fda5 	bl	8009e98 <malloc>
 800934e:	4602      	mov	r2, r0
 8009350:	61f0      	str	r0, [r6, #28]
 8009352:	b920      	cbnz	r0, 800935e <_dtoa_r+0x36>
 8009354:	4ba6      	ldr	r3, [pc, #664]	; (80095f0 <_dtoa_r+0x2c8>)
 8009356:	21ef      	movs	r1, #239	; 0xef
 8009358:	48a6      	ldr	r0, [pc, #664]	; (80095f4 <_dtoa_r+0x2cc>)
 800935a:	f001 fbfd 	bl	800ab58 <__assert_func>
 800935e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009362:	6005      	str	r5, [r0, #0]
 8009364:	60c5      	str	r5, [r0, #12]
 8009366:	69f3      	ldr	r3, [r6, #28]
 8009368:	6819      	ldr	r1, [r3, #0]
 800936a:	b151      	cbz	r1, 8009382 <_dtoa_r+0x5a>
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	604a      	str	r2, [r1, #4]
 8009370:	2301      	movs	r3, #1
 8009372:	4093      	lsls	r3, r2
 8009374:	608b      	str	r3, [r1, #8]
 8009376:	4630      	mov	r0, r6
 8009378:	f000 fe82 	bl	800a080 <_Bfree>
 800937c:	69f3      	ldr	r3, [r6, #28]
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	f1b9 0300 	subs.w	r3, r9, #0
 8009386:	bfbb      	ittet	lt
 8009388:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800938c:	9303      	strlt	r3, [sp, #12]
 800938e:	2300      	movge	r3, #0
 8009390:	2201      	movlt	r2, #1
 8009392:	bfac      	ite	ge
 8009394:	6023      	strge	r3, [r4, #0]
 8009396:	6022      	strlt	r2, [r4, #0]
 8009398:	4b97      	ldr	r3, [pc, #604]	; (80095f8 <_dtoa_r+0x2d0>)
 800939a:	9c03      	ldr	r4, [sp, #12]
 800939c:	43a3      	bics	r3, r4
 800939e:	d11c      	bne.n	80093da <_dtoa_r+0xb2>
 80093a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80093ac:	ea53 0308 	orrs.w	r3, r3, r8
 80093b0:	f000 84fb 	beq.w	8009daa <_dtoa_r+0xa82>
 80093b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093b6:	b963      	cbnz	r3, 80093d2 <_dtoa_r+0xaa>
 80093b8:	4b90      	ldr	r3, [pc, #576]	; (80095fc <_dtoa_r+0x2d4>)
 80093ba:	e020      	b.n	80093fe <_dtoa_r+0xd6>
 80093bc:	4b90      	ldr	r3, [pc, #576]	; (8009600 <_dtoa_r+0x2d8>)
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	3308      	adds	r3, #8
 80093c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	9801      	ldr	r0, [sp, #4]
 80093c8:	b011      	add	sp, #68	; 0x44
 80093ca:	ecbd 8b02 	vpop	{d8}
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	4b8a      	ldr	r3, [pc, #552]	; (80095fc <_dtoa_r+0x2d4>)
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	3303      	adds	r3, #3
 80093d8:	e7f3      	b.n	80093c2 <_dtoa_r+0x9a>
 80093da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80093de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e6:	d10c      	bne.n	8009402 <_dtoa_r+0xda>
 80093e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093ea:	2301      	movs	r3, #1
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 84d7 	beq.w	8009da4 <_dtoa_r+0xa7c>
 80093f6:	4b83      	ldr	r3, [pc, #524]	; (8009604 <_dtoa_r+0x2dc>)
 80093f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	e7e1      	b.n	80093c6 <_dtoa_r+0x9e>
 8009402:	aa0e      	add	r2, sp, #56	; 0x38
 8009404:	a90f      	add	r1, sp, #60	; 0x3c
 8009406:	4630      	mov	r0, r6
 8009408:	eeb0 0b48 	vmov.f64	d0, d8
 800940c:	f001 f91a 	bl	800a644 <__d2b>
 8009410:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8009414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009416:	4605      	mov	r5, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d046      	beq.n	80094aa <_dtoa_r+0x182>
 800941c:	eeb0 7b48 	vmov.f64	d7, d8
 8009420:	ee18 1a90 	vmov	r1, s17
 8009424:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009428:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800942c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009430:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009434:	2000      	movs	r0, #0
 8009436:	ee07 1a90 	vmov	s15, r1
 800943a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800943e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80095d8 <_dtoa_r+0x2b0>
 8009442:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009446:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80095e0 <_dtoa_r+0x2b8>
 800944a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800944e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80095e8 <_dtoa_r+0x2c0>
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800945a:	eeb0 7b46 	vmov.f64	d7, d6
 800945e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009462:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009466:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800946a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946e:	ee16 ba90 	vmov	fp, s13
 8009472:	9009      	str	r0, [sp, #36]	; 0x24
 8009474:	d508      	bpl.n	8009488 <_dtoa_r+0x160>
 8009476:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800947a:	eeb4 6b47 	vcmp.f64	d6, d7
 800947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009482:	bf18      	it	ne
 8009484:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009488:	f1bb 0f16 	cmp.w	fp, #22
 800948c:	d82b      	bhi.n	80094e6 <_dtoa_r+0x1be>
 800948e:	495e      	ldr	r1, [pc, #376]	; (8009608 <_dtoa_r+0x2e0>)
 8009490:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009494:	ed91 7b00 	vldr	d7, [r1]
 8009498:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800949c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a0:	d501      	bpl.n	80094a6 <_dtoa_r+0x17e>
 80094a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094a6:	2100      	movs	r1, #0
 80094a8:	e01e      	b.n	80094e8 <_dtoa_r+0x1c0>
 80094aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ac:	4413      	add	r3, r2
 80094ae:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80094b2:	2920      	cmp	r1, #32
 80094b4:	bfc1      	itttt	gt
 80094b6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80094ba:	408c      	lslgt	r4, r1
 80094bc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80094c0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80094c4:	bfd6      	itet	le
 80094c6:	f1c1 0120 	rsble	r1, r1, #32
 80094ca:	4321      	orrgt	r1, r4
 80094cc:	fa08 f101 	lslle.w	r1, r8, r1
 80094d0:	ee07 1a90 	vmov	s15, r1
 80094d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80094d8:	3b01      	subs	r3, #1
 80094da:	ee17 1a90 	vmov	r1, s15
 80094de:	2001      	movs	r0, #1
 80094e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80094e4:	e7a7      	b.n	8009436 <_dtoa_r+0x10e>
 80094e6:	2101      	movs	r1, #1
 80094e8:	1ad2      	subs	r2, r2, r3
 80094ea:	1e53      	subs	r3, r2, #1
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	bf45      	ittet	mi
 80094f0:	f1c2 0301 	rsbmi	r3, r2, #1
 80094f4:	9304      	strmi	r3, [sp, #16]
 80094f6:	2300      	movpl	r3, #0
 80094f8:	2300      	movmi	r3, #0
 80094fa:	bf4c      	ite	mi
 80094fc:	9305      	strmi	r3, [sp, #20]
 80094fe:	9304      	strpl	r3, [sp, #16]
 8009500:	f1bb 0f00 	cmp.w	fp, #0
 8009504:	910b      	str	r1, [sp, #44]	; 0x2c
 8009506:	db18      	blt.n	800953a <_dtoa_r+0x212>
 8009508:	9b05      	ldr	r3, [sp, #20]
 800950a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800950e:	445b      	add	r3, fp
 8009510:	9305      	str	r3, [sp, #20]
 8009512:	2300      	movs	r3, #0
 8009514:	9a06      	ldr	r2, [sp, #24]
 8009516:	2a09      	cmp	r2, #9
 8009518:	d848      	bhi.n	80095ac <_dtoa_r+0x284>
 800951a:	2a05      	cmp	r2, #5
 800951c:	bfc4      	itt	gt
 800951e:	3a04      	subgt	r2, #4
 8009520:	9206      	strgt	r2, [sp, #24]
 8009522:	9a06      	ldr	r2, [sp, #24]
 8009524:	f1a2 0202 	sub.w	r2, r2, #2
 8009528:	bfcc      	ite	gt
 800952a:	2400      	movgt	r4, #0
 800952c:	2401      	movle	r4, #1
 800952e:	2a03      	cmp	r2, #3
 8009530:	d847      	bhi.n	80095c2 <_dtoa_r+0x29a>
 8009532:	e8df f002 	tbb	[pc, r2]
 8009536:	2d0b      	.short	0x2d0b
 8009538:	392b      	.short	0x392b
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	2200      	movs	r2, #0
 800953e:	eba3 030b 	sub.w	r3, r3, fp
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	920a      	str	r2, [sp, #40]	; 0x28
 8009546:	f1cb 0300 	rsb	r3, fp, #0
 800954a:	e7e3      	b.n	8009514 <_dtoa_r+0x1ec>
 800954c:	2200      	movs	r2, #0
 800954e:	9207      	str	r2, [sp, #28]
 8009550:	9a08      	ldr	r2, [sp, #32]
 8009552:	2a00      	cmp	r2, #0
 8009554:	dc38      	bgt.n	80095c8 <_dtoa_r+0x2a0>
 8009556:	f04f 0a01 	mov.w	sl, #1
 800955a:	46d1      	mov	r9, sl
 800955c:	4652      	mov	r2, sl
 800955e:	f8cd a020 	str.w	sl, [sp, #32]
 8009562:	69f7      	ldr	r7, [r6, #28]
 8009564:	2100      	movs	r1, #0
 8009566:	2004      	movs	r0, #4
 8009568:	f100 0c14 	add.w	ip, r0, #20
 800956c:	4594      	cmp	ip, r2
 800956e:	d930      	bls.n	80095d2 <_dtoa_r+0x2aa>
 8009570:	6079      	str	r1, [r7, #4]
 8009572:	4630      	mov	r0, r6
 8009574:	930d      	str	r3, [sp, #52]	; 0x34
 8009576:	f000 fd43 	bl	800a000 <_Balloc>
 800957a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800957c:	9001      	str	r0, [sp, #4]
 800957e:	4602      	mov	r2, r0
 8009580:	2800      	cmp	r0, #0
 8009582:	d145      	bne.n	8009610 <_dtoa_r+0x2e8>
 8009584:	4b21      	ldr	r3, [pc, #132]	; (800960c <_dtoa_r+0x2e4>)
 8009586:	f240 11af 	movw	r1, #431	; 0x1af
 800958a:	e6e5      	b.n	8009358 <_dtoa_r+0x30>
 800958c:	2201      	movs	r2, #1
 800958e:	e7de      	b.n	800954e <_dtoa_r+0x226>
 8009590:	2200      	movs	r2, #0
 8009592:	9207      	str	r2, [sp, #28]
 8009594:	9a08      	ldr	r2, [sp, #32]
 8009596:	eb0b 0a02 	add.w	sl, fp, r2
 800959a:	f10a 0901 	add.w	r9, sl, #1
 800959e:	464a      	mov	r2, r9
 80095a0:	2a01      	cmp	r2, #1
 80095a2:	bfb8      	it	lt
 80095a4:	2201      	movlt	r2, #1
 80095a6:	e7dc      	b.n	8009562 <_dtoa_r+0x23a>
 80095a8:	2201      	movs	r2, #1
 80095aa:	e7f2      	b.n	8009592 <_dtoa_r+0x26a>
 80095ac:	2401      	movs	r4, #1
 80095ae:	2200      	movs	r2, #0
 80095b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80095b4:	f04f 3aff 	mov.w	sl, #4294967295
 80095b8:	2100      	movs	r1, #0
 80095ba:	46d1      	mov	r9, sl
 80095bc:	2212      	movs	r2, #18
 80095be:	9108      	str	r1, [sp, #32]
 80095c0:	e7cf      	b.n	8009562 <_dtoa_r+0x23a>
 80095c2:	2201      	movs	r2, #1
 80095c4:	9207      	str	r2, [sp, #28]
 80095c6:	e7f5      	b.n	80095b4 <_dtoa_r+0x28c>
 80095c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80095cc:	46d1      	mov	r9, sl
 80095ce:	4652      	mov	r2, sl
 80095d0:	e7c7      	b.n	8009562 <_dtoa_r+0x23a>
 80095d2:	3101      	adds	r1, #1
 80095d4:	0040      	lsls	r0, r0, #1
 80095d6:	e7c7      	b.n	8009568 <_dtoa_r+0x240>
 80095d8:	636f4361 	.word	0x636f4361
 80095dc:	3fd287a7 	.word	0x3fd287a7
 80095e0:	8b60c8b3 	.word	0x8b60c8b3
 80095e4:	3fc68a28 	.word	0x3fc68a28
 80095e8:	509f79fb 	.word	0x509f79fb
 80095ec:	3fd34413 	.word	0x3fd34413
 80095f0:	0800b4ed 	.word	0x0800b4ed
 80095f4:	0800b504 	.word	0x0800b504
 80095f8:	7ff00000 	.word	0x7ff00000
 80095fc:	0800b4e9 	.word	0x0800b4e9
 8009600:	0800b4e0 	.word	0x0800b4e0
 8009604:	0800b4bd 	.word	0x0800b4bd
 8009608:	0800b5f0 	.word	0x0800b5f0
 800960c:	0800b55c 	.word	0x0800b55c
 8009610:	69f2      	ldr	r2, [r6, #28]
 8009612:	9901      	ldr	r1, [sp, #4]
 8009614:	6011      	str	r1, [r2, #0]
 8009616:	f1b9 0f0e 	cmp.w	r9, #14
 800961a:	d86c      	bhi.n	80096f6 <_dtoa_r+0x3ce>
 800961c:	2c00      	cmp	r4, #0
 800961e:	d06a      	beq.n	80096f6 <_dtoa_r+0x3ce>
 8009620:	f1bb 0f00 	cmp.w	fp, #0
 8009624:	f340 80a0 	ble.w	8009768 <_dtoa_r+0x440>
 8009628:	4ac1      	ldr	r2, [pc, #772]	; (8009930 <_dtoa_r+0x608>)
 800962a:	f00b 010f 	and.w	r1, fp, #15
 800962e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009632:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009636:	ed92 7b00 	vldr	d7, [r2]
 800963a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800963e:	f000 8087 	beq.w	8009750 <_dtoa_r+0x428>
 8009642:	49bc      	ldr	r1, [pc, #752]	; (8009934 <_dtoa_r+0x60c>)
 8009644:	ed91 6b08 	vldr	d6, [r1, #32]
 8009648:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800964c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009650:	f002 020f 	and.w	r2, r2, #15
 8009654:	2103      	movs	r1, #3
 8009656:	48b7      	ldr	r0, [pc, #732]	; (8009934 <_dtoa_r+0x60c>)
 8009658:	2a00      	cmp	r2, #0
 800965a:	d17b      	bne.n	8009754 <_dtoa_r+0x42c>
 800965c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009660:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009664:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800966a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800966e:	2a00      	cmp	r2, #0
 8009670:	f000 80a0 	beq.w	80097b4 <_dtoa_r+0x48c>
 8009674:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009678:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800967c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009680:	f140 8098 	bpl.w	80097b4 <_dtoa_r+0x48c>
 8009684:	f1b9 0f00 	cmp.w	r9, #0
 8009688:	f000 8094 	beq.w	80097b4 <_dtoa_r+0x48c>
 800968c:	f1ba 0f00 	cmp.w	sl, #0
 8009690:	dd2f      	ble.n	80096f2 <_dtoa_r+0x3ca>
 8009692:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009696:	ee27 7b06 	vmul.f64	d7, d7, d6
 800969a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800969e:	f10b 32ff 	add.w	r2, fp, #4294967295
 80096a2:	3101      	adds	r1, #1
 80096a4:	4654      	mov	r4, sl
 80096a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80096aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80096ae:	ee07 1a90 	vmov	s15, r1
 80096b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80096b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80096ba:	ee15 7a90 	vmov	r7, s11
 80096be:	ec51 0b15 	vmov	r0, r1, d5
 80096c2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80096c6:	2c00      	cmp	r4, #0
 80096c8:	d177      	bne.n	80097ba <_dtoa_r+0x492>
 80096ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80096ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096d2:	ec41 0b17 	vmov	d7, r0, r1
 80096d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096de:	f300 826a 	bgt.w	8009bb6 <_dtoa_r+0x88e>
 80096e2:	eeb1 7b47 	vneg.f64	d7, d7
 80096e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ee:	f100 8260 	bmi.w	8009bb2 <_dtoa_r+0x88a>
 80096f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	f2c0 811d 	blt.w	8009938 <_dtoa_r+0x610>
 80096fe:	f1bb 0f0e 	cmp.w	fp, #14
 8009702:	f300 8119 	bgt.w	8009938 <_dtoa_r+0x610>
 8009706:	4b8a      	ldr	r3, [pc, #552]	; (8009930 <_dtoa_r+0x608>)
 8009708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800970c:	ed93 6b00 	vldr	d6, [r3]
 8009710:	9b08      	ldr	r3, [sp, #32]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f280 80b7 	bge.w	8009886 <_dtoa_r+0x55e>
 8009718:	f1b9 0f00 	cmp.w	r9, #0
 800971c:	f300 80b3 	bgt.w	8009886 <_dtoa_r+0x55e>
 8009720:	f040 8246 	bne.w	8009bb0 <_dtoa_r+0x888>
 8009724:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009728:	ee26 6b07 	vmul.f64	d6, d6, d7
 800972c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009730:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009738:	464c      	mov	r4, r9
 800973a:	464f      	mov	r7, r9
 800973c:	f280 821c 	bge.w	8009b78 <_dtoa_r+0x850>
 8009740:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009744:	2331      	movs	r3, #49	; 0x31
 8009746:	f808 3b01 	strb.w	r3, [r8], #1
 800974a:	f10b 0b01 	add.w	fp, fp, #1
 800974e:	e218      	b.n	8009b82 <_dtoa_r+0x85a>
 8009750:	2102      	movs	r1, #2
 8009752:	e780      	b.n	8009656 <_dtoa_r+0x32e>
 8009754:	07d4      	lsls	r4, r2, #31
 8009756:	d504      	bpl.n	8009762 <_dtoa_r+0x43a>
 8009758:	ed90 6b00 	vldr	d6, [r0]
 800975c:	3101      	adds	r1, #1
 800975e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009762:	1052      	asrs	r2, r2, #1
 8009764:	3008      	adds	r0, #8
 8009766:	e777      	b.n	8009658 <_dtoa_r+0x330>
 8009768:	d022      	beq.n	80097b0 <_dtoa_r+0x488>
 800976a:	f1cb 0200 	rsb	r2, fp, #0
 800976e:	4970      	ldr	r1, [pc, #448]	; (8009930 <_dtoa_r+0x608>)
 8009770:	f002 000f 	and.w	r0, r2, #15
 8009774:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009778:	ed91 7b00 	vldr	d7, [r1]
 800977c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009780:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009784:	486b      	ldr	r0, [pc, #428]	; (8009934 <_dtoa_r+0x60c>)
 8009786:	1112      	asrs	r2, r2, #4
 8009788:	2400      	movs	r4, #0
 800978a:	2102      	movs	r1, #2
 800978c:	b92a      	cbnz	r2, 800979a <_dtoa_r+0x472>
 800978e:	2c00      	cmp	r4, #0
 8009790:	f43f af6a 	beq.w	8009668 <_dtoa_r+0x340>
 8009794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009798:	e766      	b.n	8009668 <_dtoa_r+0x340>
 800979a:	07d7      	lsls	r7, r2, #31
 800979c:	d505      	bpl.n	80097aa <_dtoa_r+0x482>
 800979e:	ed90 6b00 	vldr	d6, [r0]
 80097a2:	3101      	adds	r1, #1
 80097a4:	2401      	movs	r4, #1
 80097a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097aa:	1052      	asrs	r2, r2, #1
 80097ac:	3008      	adds	r0, #8
 80097ae:	e7ed      	b.n	800978c <_dtoa_r+0x464>
 80097b0:	2102      	movs	r1, #2
 80097b2:	e759      	b.n	8009668 <_dtoa_r+0x340>
 80097b4:	465a      	mov	r2, fp
 80097b6:	464c      	mov	r4, r9
 80097b8:	e775      	b.n	80096a6 <_dtoa_r+0x37e>
 80097ba:	ec41 0b17 	vmov	d7, r0, r1
 80097be:	495c      	ldr	r1, [pc, #368]	; (8009930 <_dtoa_r+0x608>)
 80097c0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80097c4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80097c8:	9901      	ldr	r1, [sp, #4]
 80097ca:	440c      	add	r4, r1
 80097cc:	9907      	ldr	r1, [sp, #28]
 80097ce:	b351      	cbz	r1, 8009826 <_dtoa_r+0x4fe>
 80097d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80097d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80097d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80097dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80097e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80097e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80097e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80097ec:	ee14 1a90 	vmov	r1, s9
 80097f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80097f4:	3130      	adds	r1, #48	; 0x30
 80097f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80097fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009802:	f808 1b01 	strb.w	r1, [r8], #1
 8009806:	d439      	bmi.n	800987c <_dtoa_r+0x554>
 8009808:	ee32 5b46 	vsub.f64	d5, d2, d6
 800980c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009814:	d472      	bmi.n	80098fc <_dtoa_r+0x5d4>
 8009816:	45a0      	cmp	r8, r4
 8009818:	f43f af6b 	beq.w	80096f2 <_dtoa_r+0x3ca>
 800981c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009820:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009824:	e7e0      	b.n	80097e8 <_dtoa_r+0x4c0>
 8009826:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800982a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800982e:	4620      	mov	r0, r4
 8009830:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009834:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009838:	ee14 1a90 	vmov	r1, s9
 800983c:	3130      	adds	r1, #48	; 0x30
 800983e:	f808 1b01 	strb.w	r1, [r8], #1
 8009842:	45a0      	cmp	r8, r4
 8009844:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009848:	ee36 6b45 	vsub.f64	d6, d6, d5
 800984c:	d118      	bne.n	8009880 <_dtoa_r+0x558>
 800984e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009852:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009856:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985e:	dc4d      	bgt.n	80098fc <_dtoa_r+0x5d4>
 8009860:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009864:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986c:	f57f af41 	bpl.w	80096f2 <_dtoa_r+0x3ca>
 8009870:	4680      	mov	r8, r0
 8009872:	3801      	subs	r0, #1
 8009874:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009878:	2b30      	cmp	r3, #48	; 0x30
 800987a:	d0f9      	beq.n	8009870 <_dtoa_r+0x548>
 800987c:	4693      	mov	fp, r2
 800987e:	e02a      	b.n	80098d6 <_dtoa_r+0x5ae>
 8009880:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009884:	e7d6      	b.n	8009834 <_dtoa_r+0x50c>
 8009886:	ed9d 7b02 	vldr	d7, [sp, #8]
 800988a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800988e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009892:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009896:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800989a:	ee15 3a10 	vmov	r3, s10
 800989e:	3330      	adds	r3, #48	; 0x30
 80098a0:	f808 3b01 	strb.w	r3, [r8], #1
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	eba8 0303 	sub.w	r3, r8, r3
 80098aa:	4599      	cmp	r9, r3
 80098ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80098b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80098b4:	d133      	bne.n	800991e <_dtoa_r+0x5f6>
 80098b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80098ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c2:	dc1a      	bgt.n	80098fa <_dtoa_r+0x5d2>
 80098c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	d103      	bne.n	80098d6 <_dtoa_r+0x5ae>
 80098ce:	ee15 3a10 	vmov	r3, s10
 80098d2:	07d9      	lsls	r1, r3, #31
 80098d4:	d411      	bmi.n	80098fa <_dtoa_r+0x5d2>
 80098d6:	4629      	mov	r1, r5
 80098d8:	4630      	mov	r0, r6
 80098da:	f000 fbd1 	bl	800a080 <_Bfree>
 80098de:	2300      	movs	r3, #0
 80098e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098e2:	f888 3000 	strb.w	r3, [r8]
 80098e6:	f10b 0301 	add.w	r3, fp, #1
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f43f ad69 	beq.w	80093c6 <_dtoa_r+0x9e>
 80098f4:	f8c3 8000 	str.w	r8, [r3]
 80098f8:	e565      	b.n	80093c6 <_dtoa_r+0x9e>
 80098fa:	465a      	mov	r2, fp
 80098fc:	4643      	mov	r3, r8
 80098fe:	4698      	mov	r8, r3
 8009900:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009904:	2939      	cmp	r1, #57	; 0x39
 8009906:	d106      	bne.n	8009916 <_dtoa_r+0x5ee>
 8009908:	9901      	ldr	r1, [sp, #4]
 800990a:	4299      	cmp	r1, r3
 800990c:	d1f7      	bne.n	80098fe <_dtoa_r+0x5d6>
 800990e:	9801      	ldr	r0, [sp, #4]
 8009910:	2130      	movs	r1, #48	; 0x30
 8009912:	3201      	adds	r2, #1
 8009914:	7001      	strb	r1, [r0, #0]
 8009916:	7819      	ldrb	r1, [r3, #0]
 8009918:	3101      	adds	r1, #1
 800991a:	7019      	strb	r1, [r3, #0]
 800991c:	e7ae      	b.n	800987c <_dtoa_r+0x554>
 800991e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009922:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992a:	d1b2      	bne.n	8009892 <_dtoa_r+0x56a>
 800992c:	e7d3      	b.n	80098d6 <_dtoa_r+0x5ae>
 800992e:	bf00      	nop
 8009930:	0800b5f0 	.word	0x0800b5f0
 8009934:	0800b5c8 	.word	0x0800b5c8
 8009938:	9907      	ldr	r1, [sp, #28]
 800993a:	2900      	cmp	r1, #0
 800993c:	f000 80d0 	beq.w	8009ae0 <_dtoa_r+0x7b8>
 8009940:	9906      	ldr	r1, [sp, #24]
 8009942:	2901      	cmp	r1, #1
 8009944:	f300 80b4 	bgt.w	8009ab0 <_dtoa_r+0x788>
 8009948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800994a:	2900      	cmp	r1, #0
 800994c:	f000 80ac 	beq.w	8009aa8 <_dtoa_r+0x780>
 8009950:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009954:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009958:	461c      	mov	r4, r3
 800995a:	9309      	str	r3, [sp, #36]	; 0x24
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	4413      	add	r3, r2
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	2101      	movs	r1, #1
 8009966:	4413      	add	r3, r2
 8009968:	4630      	mov	r0, r6
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	f000 fc3e 	bl	800a1ec <__i2b>
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	4607      	mov	r7, r0
 8009974:	f1b8 0f00 	cmp.w	r8, #0
 8009978:	d00d      	beq.n	8009996 <_dtoa_r+0x66e>
 800997a:	9a05      	ldr	r2, [sp, #20]
 800997c:	2a00      	cmp	r2, #0
 800997e:	dd0a      	ble.n	8009996 <_dtoa_r+0x66e>
 8009980:	4542      	cmp	r2, r8
 8009982:	9904      	ldr	r1, [sp, #16]
 8009984:	bfa8      	it	ge
 8009986:	4642      	movge	r2, r8
 8009988:	1a89      	subs	r1, r1, r2
 800998a:	9104      	str	r1, [sp, #16]
 800998c:	9905      	ldr	r1, [sp, #20]
 800998e:	eba8 0802 	sub.w	r8, r8, r2
 8009992:	1a8a      	subs	r2, r1, r2
 8009994:	9205      	str	r2, [sp, #20]
 8009996:	b303      	cbz	r3, 80099da <_dtoa_r+0x6b2>
 8009998:	9a07      	ldr	r2, [sp, #28]
 800999a:	2a00      	cmp	r2, #0
 800999c:	f000 80a5 	beq.w	8009aea <_dtoa_r+0x7c2>
 80099a0:	2c00      	cmp	r4, #0
 80099a2:	dd13      	ble.n	80099cc <_dtoa_r+0x6a4>
 80099a4:	4639      	mov	r1, r7
 80099a6:	4622      	mov	r2, r4
 80099a8:	4630      	mov	r0, r6
 80099aa:	930d      	str	r3, [sp, #52]	; 0x34
 80099ac:	f000 fcde 	bl	800a36c <__pow5mult>
 80099b0:	462a      	mov	r2, r5
 80099b2:	4601      	mov	r1, r0
 80099b4:	4607      	mov	r7, r0
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 fc2e 	bl	800a218 <__multiply>
 80099bc:	4629      	mov	r1, r5
 80099be:	9009      	str	r0, [sp, #36]	; 0x24
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 fb5d 	bl	800a080 <_Bfree>
 80099c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ca:	4615      	mov	r5, r2
 80099cc:	1b1a      	subs	r2, r3, r4
 80099ce:	d004      	beq.n	80099da <_dtoa_r+0x6b2>
 80099d0:	4629      	mov	r1, r5
 80099d2:	4630      	mov	r0, r6
 80099d4:	f000 fcca 	bl	800a36c <__pow5mult>
 80099d8:	4605      	mov	r5, r0
 80099da:	2101      	movs	r1, #1
 80099dc:	4630      	mov	r0, r6
 80099de:	f000 fc05 	bl	800a1ec <__i2b>
 80099e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	f340 8081 	ble.w	8009aee <_dtoa_r+0x7c6>
 80099ec:	461a      	mov	r2, r3
 80099ee:	4601      	mov	r1, r0
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 fcbb 	bl	800a36c <__pow5mult>
 80099f6:	9b06      	ldr	r3, [sp, #24]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	4604      	mov	r4, r0
 80099fc:	dd7a      	ble.n	8009af4 <_dtoa_r+0x7cc>
 80099fe:	2300      	movs	r3, #0
 8009a00:	9309      	str	r3, [sp, #36]	; 0x24
 8009a02:	6922      	ldr	r2, [r4, #16]
 8009a04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a08:	6910      	ldr	r0, [r2, #16]
 8009a0a:	f000 fba1 	bl	800a150 <__hi0bits>
 8009a0e:	f1c0 0020 	rsb	r0, r0, #32
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	4418      	add	r0, r3
 8009a16:	f010 001f 	ands.w	r0, r0, #31
 8009a1a:	f000 8093 	beq.w	8009b44 <_dtoa_r+0x81c>
 8009a1e:	f1c0 0220 	rsb	r2, r0, #32
 8009a22:	2a04      	cmp	r2, #4
 8009a24:	f340 8085 	ble.w	8009b32 <_dtoa_r+0x80a>
 8009a28:	9b04      	ldr	r3, [sp, #16]
 8009a2a:	f1c0 001c 	rsb	r0, r0, #28
 8009a2e:	4403      	add	r3, r0
 8009a30:	9304      	str	r3, [sp, #16]
 8009a32:	9b05      	ldr	r3, [sp, #20]
 8009a34:	4480      	add	r8, r0
 8009a36:	4403      	add	r3, r0
 8009a38:	9305      	str	r3, [sp, #20]
 8009a3a:	9b04      	ldr	r3, [sp, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dd05      	ble.n	8009a4c <_dtoa_r+0x724>
 8009a40:	4629      	mov	r1, r5
 8009a42:	461a      	mov	r2, r3
 8009a44:	4630      	mov	r0, r6
 8009a46:	f000 fceb 	bl	800a420 <__lshift>
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	9b05      	ldr	r3, [sp, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dd05      	ble.n	8009a5e <_dtoa_r+0x736>
 8009a52:	4621      	mov	r1, r4
 8009a54:	461a      	mov	r2, r3
 8009a56:	4630      	mov	r0, r6
 8009a58:	f000 fce2 	bl	800a420 <__lshift>
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d071      	beq.n	8009b48 <_dtoa_r+0x820>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4628      	mov	r0, r5
 8009a68:	f000 fd46 	bl	800a4f8 <__mcmp>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	da6b      	bge.n	8009b48 <_dtoa_r+0x820>
 8009a70:	2300      	movs	r3, #0
 8009a72:	4629      	mov	r1, r5
 8009a74:	220a      	movs	r2, #10
 8009a76:	4630      	mov	r0, r6
 8009a78:	f000 fb24 	bl	800a0c4 <__multadd>
 8009a7c:	9b07      	ldr	r3, [sp, #28]
 8009a7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a82:	4605      	mov	r5, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 8197 	beq.w	8009db8 <_dtoa_r+0xa90>
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	220a      	movs	r2, #10
 8009a90:	4630      	mov	r0, r6
 8009a92:	f000 fb17 	bl	800a0c4 <__multadd>
 8009a96:	f1ba 0f00 	cmp.w	sl, #0
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	f300 8093 	bgt.w	8009bc6 <_dtoa_r+0x89e>
 8009aa0:	9b06      	ldr	r3, [sp, #24]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	dc57      	bgt.n	8009b56 <_dtoa_r+0x82e>
 8009aa6:	e08e      	b.n	8009bc6 <_dtoa_r+0x89e>
 8009aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009aaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009aae:	e751      	b.n	8009954 <_dtoa_r+0x62c>
 8009ab0:	f109 34ff 	add.w	r4, r9, #4294967295
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	bfbf      	itttt	lt
 8009ab8:	1ae2      	sublt	r2, r4, r3
 8009aba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009abc:	189b      	addlt	r3, r3, r2
 8009abe:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009ac0:	bfae      	itee	ge
 8009ac2:	1b1c      	subge	r4, r3, r4
 8009ac4:	4623      	movlt	r3, r4
 8009ac6:	2400      	movlt	r4, #0
 8009ac8:	f1b9 0f00 	cmp.w	r9, #0
 8009acc:	bfb5      	itete	lt
 8009ace:	9a04      	ldrlt	r2, [sp, #16]
 8009ad0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009ad4:	eba2 0809 	sublt.w	r8, r2, r9
 8009ad8:	464a      	movge	r2, r9
 8009ada:	bfb8      	it	lt
 8009adc:	2200      	movlt	r2, #0
 8009ade:	e73c      	b.n	800995a <_dtoa_r+0x632>
 8009ae0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009ae4:	9f07      	ldr	r7, [sp, #28]
 8009ae6:	461c      	mov	r4, r3
 8009ae8:	e744      	b.n	8009974 <_dtoa_r+0x64c>
 8009aea:	461a      	mov	r2, r3
 8009aec:	e770      	b.n	80099d0 <_dtoa_r+0x6a8>
 8009aee:	9b06      	ldr	r3, [sp, #24]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	dc18      	bgt.n	8009b26 <_dtoa_r+0x7fe>
 8009af4:	9b02      	ldr	r3, [sp, #8]
 8009af6:	b9b3      	cbnz	r3, 8009b26 <_dtoa_r+0x7fe>
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009afe:	b9a2      	cbnz	r2, 8009b2a <_dtoa_r+0x802>
 8009b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b04:	0d12      	lsrs	r2, r2, #20
 8009b06:	0512      	lsls	r2, r2, #20
 8009b08:	b18a      	cbz	r2, 8009b2e <_dtoa_r+0x806>
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	9304      	str	r3, [sp, #16]
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	3301      	adds	r3, #1
 8009b14:	9305      	str	r3, [sp, #20]
 8009b16:	2301      	movs	r3, #1
 8009b18:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f47f af70 	bne.w	8009a02 <_dtoa_r+0x6da>
 8009b22:	2001      	movs	r0, #1
 8009b24:	e775      	b.n	8009a12 <_dtoa_r+0x6ea>
 8009b26:	2300      	movs	r3, #0
 8009b28:	e7f6      	b.n	8009b18 <_dtoa_r+0x7f0>
 8009b2a:	9b02      	ldr	r3, [sp, #8]
 8009b2c:	e7f4      	b.n	8009b18 <_dtoa_r+0x7f0>
 8009b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b30:	e7f3      	b.n	8009b1a <_dtoa_r+0x7f2>
 8009b32:	d082      	beq.n	8009a3a <_dtoa_r+0x712>
 8009b34:	9b04      	ldr	r3, [sp, #16]
 8009b36:	321c      	adds	r2, #28
 8009b38:	4413      	add	r3, r2
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	9b05      	ldr	r3, [sp, #20]
 8009b3e:	4490      	add	r8, r2
 8009b40:	4413      	add	r3, r2
 8009b42:	e779      	b.n	8009a38 <_dtoa_r+0x710>
 8009b44:	4602      	mov	r2, r0
 8009b46:	e7f5      	b.n	8009b34 <_dtoa_r+0x80c>
 8009b48:	f1b9 0f00 	cmp.w	r9, #0
 8009b4c:	dc36      	bgt.n	8009bbc <_dtoa_r+0x894>
 8009b4e:	9b06      	ldr	r3, [sp, #24]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	dd33      	ble.n	8009bbc <_dtoa_r+0x894>
 8009b54:	46ca      	mov	sl, r9
 8009b56:	f1ba 0f00 	cmp.w	sl, #0
 8009b5a:	d10d      	bne.n	8009b78 <_dtoa_r+0x850>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4653      	mov	r3, sl
 8009b60:	2205      	movs	r2, #5
 8009b62:	4630      	mov	r0, r6
 8009b64:	f000 faae 	bl	800a0c4 <__multadd>
 8009b68:	4601      	mov	r1, r0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f000 fcc3 	bl	800a4f8 <__mcmp>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f73f ade4 	bgt.w	8009740 <_dtoa_r+0x418>
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b7e:	ea6f 0b03 	mvn.w	fp, r3
 8009b82:	f04f 0900 	mov.w	r9, #0
 8009b86:	4621      	mov	r1, r4
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 fa79 	bl	800a080 <_Bfree>
 8009b8e:	2f00      	cmp	r7, #0
 8009b90:	f43f aea1 	beq.w	80098d6 <_dtoa_r+0x5ae>
 8009b94:	f1b9 0f00 	cmp.w	r9, #0
 8009b98:	d005      	beq.n	8009ba6 <_dtoa_r+0x87e>
 8009b9a:	45b9      	cmp	r9, r7
 8009b9c:	d003      	beq.n	8009ba6 <_dtoa_r+0x87e>
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f000 fa6d 	bl	800a080 <_Bfree>
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f000 fa69 	bl	800a080 <_Bfree>
 8009bae:	e692      	b.n	80098d6 <_dtoa_r+0x5ae>
 8009bb0:	2400      	movs	r4, #0
 8009bb2:	4627      	mov	r7, r4
 8009bb4:	e7e0      	b.n	8009b78 <_dtoa_r+0x850>
 8009bb6:	4693      	mov	fp, r2
 8009bb8:	4627      	mov	r7, r4
 8009bba:	e5c1      	b.n	8009740 <_dtoa_r+0x418>
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	46ca      	mov	sl, r9
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8100 	beq.w	8009dc6 <_dtoa_r+0xa9e>
 8009bc6:	f1b8 0f00 	cmp.w	r8, #0
 8009bca:	dd05      	ble.n	8009bd8 <_dtoa_r+0x8b0>
 8009bcc:	4639      	mov	r1, r7
 8009bce:	4642      	mov	r2, r8
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 fc25 	bl	800a420 <__lshift>
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d05d      	beq.n	8009c9a <_dtoa_r+0x972>
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 fa0d 	bl	800a000 <_Balloc>
 8009be6:	4680      	mov	r8, r0
 8009be8:	b928      	cbnz	r0, 8009bf6 <_dtoa_r+0x8ce>
 8009bea:	4b82      	ldr	r3, [pc, #520]	; (8009df4 <_dtoa_r+0xacc>)
 8009bec:	4602      	mov	r2, r0
 8009bee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009bf2:	f7ff bbb1 	b.w	8009358 <_dtoa_r+0x30>
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	3202      	adds	r2, #2
 8009bfa:	0092      	lsls	r2, r2, #2
 8009bfc:	f107 010c 	add.w	r1, r7, #12
 8009c00:	300c      	adds	r0, #12
 8009c02:	f7ff fafa 	bl	80091fa <memcpy>
 8009c06:	2201      	movs	r2, #1
 8009c08:	4641      	mov	r1, r8
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 fc08 	bl	800a420 <__lshift>
 8009c10:	9b01      	ldr	r3, [sp, #4]
 8009c12:	3301      	adds	r3, #1
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	4453      	add	r3, sl
 8009c1a:	9308      	str	r3, [sp, #32]
 8009c1c:	9b02      	ldr	r3, [sp, #8]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	46b9      	mov	r9, r7
 8009c24:	9307      	str	r3, [sp, #28]
 8009c26:	4607      	mov	r7, r0
 8009c28:	9b04      	ldr	r3, [sp, #16]
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	4628      	mov	r0, r5
 8009c30:	9302      	str	r3, [sp, #8]
 8009c32:	f7ff faf0 	bl	8009216 <quorem>
 8009c36:	4603      	mov	r3, r0
 8009c38:	3330      	adds	r3, #48	; 0x30
 8009c3a:	9005      	str	r0, [sp, #20]
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	4628      	mov	r0, r5
 8009c40:	9309      	str	r3, [sp, #36]	; 0x24
 8009c42:	f000 fc59 	bl	800a4f8 <__mcmp>
 8009c46:	463a      	mov	r2, r7
 8009c48:	4682      	mov	sl, r0
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 fc6f 	bl	800a530 <__mdiff>
 8009c52:	68c2      	ldr	r2, [r0, #12]
 8009c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c56:	4680      	mov	r8, r0
 8009c58:	bb0a      	cbnz	r2, 8009c9e <_dtoa_r+0x976>
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f000 fc4b 	bl	800a4f8 <__mcmp>
 8009c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c64:	4602      	mov	r2, r0
 8009c66:	4641      	mov	r1, r8
 8009c68:	4630      	mov	r0, r6
 8009c6a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009c6e:	f000 fa07 	bl	800a080 <_Bfree>
 8009c72:	9b06      	ldr	r3, [sp, #24]
 8009c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c76:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c7a:	ea43 0102 	orr.w	r1, r3, r2
 8009c7e:	9b07      	ldr	r3, [sp, #28]
 8009c80:	4319      	orrs	r1, r3
 8009c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c84:	d10d      	bne.n	8009ca2 <_dtoa_r+0x97a>
 8009c86:	2b39      	cmp	r3, #57	; 0x39
 8009c88:	d029      	beq.n	8009cde <_dtoa_r+0x9b6>
 8009c8a:	f1ba 0f00 	cmp.w	sl, #0
 8009c8e:	dd01      	ble.n	8009c94 <_dtoa_r+0x96c>
 8009c90:	9b05      	ldr	r3, [sp, #20]
 8009c92:	3331      	adds	r3, #49	; 0x31
 8009c94:	9a02      	ldr	r2, [sp, #8]
 8009c96:	7013      	strb	r3, [r2, #0]
 8009c98:	e775      	b.n	8009b86 <_dtoa_r+0x85e>
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	e7b8      	b.n	8009c10 <_dtoa_r+0x8e8>
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	e7e1      	b.n	8009c66 <_dtoa_r+0x93e>
 8009ca2:	f1ba 0f00 	cmp.w	sl, #0
 8009ca6:	db06      	blt.n	8009cb6 <_dtoa_r+0x98e>
 8009ca8:	9906      	ldr	r1, [sp, #24]
 8009caa:	ea41 0a0a 	orr.w	sl, r1, sl
 8009cae:	9907      	ldr	r1, [sp, #28]
 8009cb0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009cb4:	d120      	bne.n	8009cf8 <_dtoa_r+0x9d0>
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	ddec      	ble.n	8009c94 <_dtoa_r+0x96c>
 8009cba:	4629      	mov	r1, r5
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	f000 fbad 	bl	800a420 <__lshift>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4605      	mov	r5, r0
 8009cca:	f000 fc15 	bl	800a4f8 <__mcmp>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	dc02      	bgt.n	8009cda <_dtoa_r+0x9b2>
 8009cd4:	d1de      	bne.n	8009c94 <_dtoa_r+0x96c>
 8009cd6:	07da      	lsls	r2, r3, #31
 8009cd8:	d5dc      	bpl.n	8009c94 <_dtoa_r+0x96c>
 8009cda:	2b39      	cmp	r3, #57	; 0x39
 8009cdc:	d1d8      	bne.n	8009c90 <_dtoa_r+0x968>
 8009cde:	9a02      	ldr	r2, [sp, #8]
 8009ce0:	2339      	movs	r3, #57	; 0x39
 8009ce2:	7013      	strb	r3, [r2, #0]
 8009ce4:	4643      	mov	r3, r8
 8009ce6:	4698      	mov	r8, r3
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009cee:	2a39      	cmp	r2, #57	; 0x39
 8009cf0:	d051      	beq.n	8009d96 <_dtoa_r+0xa6e>
 8009cf2:	3201      	adds	r2, #1
 8009cf4:	701a      	strb	r2, [r3, #0]
 8009cf6:	e746      	b.n	8009b86 <_dtoa_r+0x85e>
 8009cf8:	2a00      	cmp	r2, #0
 8009cfa:	dd03      	ble.n	8009d04 <_dtoa_r+0x9dc>
 8009cfc:	2b39      	cmp	r3, #57	; 0x39
 8009cfe:	d0ee      	beq.n	8009cde <_dtoa_r+0x9b6>
 8009d00:	3301      	adds	r3, #1
 8009d02:	e7c7      	b.n	8009c94 <_dtoa_r+0x96c>
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	9908      	ldr	r1, [sp, #32]
 8009d08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d0c:	428a      	cmp	r2, r1
 8009d0e:	d02b      	beq.n	8009d68 <_dtoa_r+0xa40>
 8009d10:	4629      	mov	r1, r5
 8009d12:	2300      	movs	r3, #0
 8009d14:	220a      	movs	r2, #10
 8009d16:	4630      	mov	r0, r6
 8009d18:	f000 f9d4 	bl	800a0c4 <__multadd>
 8009d1c:	45b9      	cmp	r9, r7
 8009d1e:	4605      	mov	r5, r0
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	f04f 020a 	mov.w	r2, #10
 8009d28:	4649      	mov	r1, r9
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	d107      	bne.n	8009d3e <_dtoa_r+0xa16>
 8009d2e:	f000 f9c9 	bl	800a0c4 <__multadd>
 8009d32:	4681      	mov	r9, r0
 8009d34:	4607      	mov	r7, r0
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	e774      	b.n	8009c28 <_dtoa_r+0x900>
 8009d3e:	f000 f9c1 	bl	800a0c4 <__multadd>
 8009d42:	4639      	mov	r1, r7
 8009d44:	4681      	mov	r9, r0
 8009d46:	2300      	movs	r3, #0
 8009d48:	220a      	movs	r2, #10
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f000 f9ba 	bl	800a0c4 <__multadd>
 8009d50:	4607      	mov	r7, r0
 8009d52:	e7f0      	b.n	8009d36 <_dtoa_r+0xa0e>
 8009d54:	f1ba 0f00 	cmp.w	sl, #0
 8009d58:	9a01      	ldr	r2, [sp, #4]
 8009d5a:	bfcc      	ite	gt
 8009d5c:	46d0      	movgt	r8, sl
 8009d5e:	f04f 0801 	movle.w	r8, #1
 8009d62:	4490      	add	r8, r2
 8009d64:	f04f 0900 	mov.w	r9, #0
 8009d68:	4629      	mov	r1, r5
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	9302      	str	r3, [sp, #8]
 8009d70:	f000 fb56 	bl	800a420 <__lshift>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4605      	mov	r5, r0
 8009d78:	f000 fbbe 	bl	800a4f8 <__mcmp>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	dcb1      	bgt.n	8009ce4 <_dtoa_r+0x9bc>
 8009d80:	d102      	bne.n	8009d88 <_dtoa_r+0xa60>
 8009d82:	9b02      	ldr	r3, [sp, #8]
 8009d84:	07db      	lsls	r3, r3, #31
 8009d86:	d4ad      	bmi.n	8009ce4 <_dtoa_r+0x9bc>
 8009d88:	4643      	mov	r3, r8
 8009d8a:	4698      	mov	r8, r3
 8009d8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d90:	2a30      	cmp	r2, #48	; 0x30
 8009d92:	d0fa      	beq.n	8009d8a <_dtoa_r+0xa62>
 8009d94:	e6f7      	b.n	8009b86 <_dtoa_r+0x85e>
 8009d96:	9a01      	ldr	r2, [sp, #4]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d1a4      	bne.n	8009ce6 <_dtoa_r+0x9be>
 8009d9c:	f10b 0b01 	add.w	fp, fp, #1
 8009da0:	2331      	movs	r3, #49	; 0x31
 8009da2:	e778      	b.n	8009c96 <_dtoa_r+0x96e>
 8009da4:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <_dtoa_r+0xad0>)
 8009da6:	f7ff bb2a 	b.w	80093fe <_dtoa_r+0xd6>
 8009daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f47f ab05 	bne.w	80093bc <_dtoa_r+0x94>
 8009db2:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <_dtoa_r+0xad4>)
 8009db4:	f7ff bb23 	b.w	80093fe <_dtoa_r+0xd6>
 8009db8:	f1ba 0f00 	cmp.w	sl, #0
 8009dbc:	dc03      	bgt.n	8009dc6 <_dtoa_r+0xa9e>
 8009dbe:	9b06      	ldr	r3, [sp, #24]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	f73f aec8 	bgt.w	8009b56 <_dtoa_r+0x82e>
 8009dc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009dca:	4621      	mov	r1, r4
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f7ff fa22 	bl	8009216 <quorem>
 8009dd2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009dd6:	f808 3b01 	strb.w	r3, [r8], #1
 8009dda:	9a01      	ldr	r2, [sp, #4]
 8009ddc:	eba8 0202 	sub.w	r2, r8, r2
 8009de0:	4592      	cmp	sl, r2
 8009de2:	ddb7      	ble.n	8009d54 <_dtoa_r+0xa2c>
 8009de4:	4629      	mov	r1, r5
 8009de6:	2300      	movs	r3, #0
 8009de8:	220a      	movs	r2, #10
 8009dea:	4630      	mov	r0, r6
 8009dec:	f000 f96a 	bl	800a0c4 <__multadd>
 8009df0:	4605      	mov	r5, r0
 8009df2:	e7ea      	b.n	8009dca <_dtoa_r+0xaa2>
 8009df4:	0800b55c 	.word	0x0800b55c
 8009df8:	0800b4bc 	.word	0x0800b4bc
 8009dfc:	0800b4e0 	.word	0x0800b4e0

08009e00 <_free_r>:
 8009e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e02:	2900      	cmp	r1, #0
 8009e04:	d044      	beq.n	8009e90 <_free_r+0x90>
 8009e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e0a:	9001      	str	r0, [sp, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e12:	bfb8      	it	lt
 8009e14:	18e4      	addlt	r4, r4, r3
 8009e16:	f000 f8e7 	bl	8009fe8 <__malloc_lock>
 8009e1a:	4a1e      	ldr	r2, [pc, #120]	; (8009e94 <_free_r+0x94>)
 8009e1c:	9801      	ldr	r0, [sp, #4]
 8009e1e:	6813      	ldr	r3, [r2, #0]
 8009e20:	b933      	cbnz	r3, 8009e30 <_free_r+0x30>
 8009e22:	6063      	str	r3, [r4, #4]
 8009e24:	6014      	str	r4, [r2, #0]
 8009e26:	b003      	add	sp, #12
 8009e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e2c:	f000 b8e2 	b.w	8009ff4 <__malloc_unlock>
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	d908      	bls.n	8009e46 <_free_r+0x46>
 8009e34:	6825      	ldr	r5, [r4, #0]
 8009e36:	1961      	adds	r1, r4, r5
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	bf01      	itttt	eq
 8009e3c:	6819      	ldreq	r1, [r3, #0]
 8009e3e:	685b      	ldreq	r3, [r3, #4]
 8009e40:	1949      	addeq	r1, r1, r5
 8009e42:	6021      	streq	r1, [r4, #0]
 8009e44:	e7ed      	b.n	8009e22 <_free_r+0x22>
 8009e46:	461a      	mov	r2, r3
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	b10b      	cbz	r3, 8009e50 <_free_r+0x50>
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	d9fa      	bls.n	8009e46 <_free_r+0x46>
 8009e50:	6811      	ldr	r1, [r2, #0]
 8009e52:	1855      	adds	r5, r2, r1
 8009e54:	42a5      	cmp	r5, r4
 8009e56:	d10b      	bne.n	8009e70 <_free_r+0x70>
 8009e58:	6824      	ldr	r4, [r4, #0]
 8009e5a:	4421      	add	r1, r4
 8009e5c:	1854      	adds	r4, r2, r1
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	d1e0      	bne.n	8009e26 <_free_r+0x26>
 8009e64:	681c      	ldr	r4, [r3, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	6053      	str	r3, [r2, #4]
 8009e6a:	440c      	add	r4, r1
 8009e6c:	6014      	str	r4, [r2, #0]
 8009e6e:	e7da      	b.n	8009e26 <_free_r+0x26>
 8009e70:	d902      	bls.n	8009e78 <_free_r+0x78>
 8009e72:	230c      	movs	r3, #12
 8009e74:	6003      	str	r3, [r0, #0]
 8009e76:	e7d6      	b.n	8009e26 <_free_r+0x26>
 8009e78:	6825      	ldr	r5, [r4, #0]
 8009e7a:	1961      	adds	r1, r4, r5
 8009e7c:	428b      	cmp	r3, r1
 8009e7e:	bf04      	itt	eq
 8009e80:	6819      	ldreq	r1, [r3, #0]
 8009e82:	685b      	ldreq	r3, [r3, #4]
 8009e84:	6063      	str	r3, [r4, #4]
 8009e86:	bf04      	itt	eq
 8009e88:	1949      	addeq	r1, r1, r5
 8009e8a:	6021      	streq	r1, [r4, #0]
 8009e8c:	6054      	str	r4, [r2, #4]
 8009e8e:	e7ca      	b.n	8009e26 <_free_r+0x26>
 8009e90:	b003      	add	sp, #12
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	20005434 	.word	0x20005434

08009e98 <malloc>:
 8009e98:	4b02      	ldr	r3, [pc, #8]	; (8009ea4 <malloc+0xc>)
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	f000 b823 	b.w	8009ee8 <_malloc_r>
 8009ea2:	bf00      	nop
 8009ea4:	20000098 	.word	0x20000098

08009ea8 <sbrk_aligned>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	4e0e      	ldr	r6, [pc, #56]	; (8009ee4 <sbrk_aligned+0x3c>)
 8009eac:	460c      	mov	r4, r1
 8009eae:	6831      	ldr	r1, [r6, #0]
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	b911      	cbnz	r1, 8009eba <sbrk_aligned+0x12>
 8009eb4:	f000 fe40 	bl	800ab38 <_sbrk_r>
 8009eb8:	6030      	str	r0, [r6, #0]
 8009eba:	4621      	mov	r1, r4
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f000 fe3b 	bl	800ab38 <_sbrk_r>
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	d00a      	beq.n	8009edc <sbrk_aligned+0x34>
 8009ec6:	1cc4      	adds	r4, r0, #3
 8009ec8:	f024 0403 	bic.w	r4, r4, #3
 8009ecc:	42a0      	cmp	r0, r4
 8009ece:	d007      	beq.n	8009ee0 <sbrk_aligned+0x38>
 8009ed0:	1a21      	subs	r1, r4, r0
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 fe30 	bl	800ab38 <_sbrk_r>
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d101      	bne.n	8009ee0 <sbrk_aligned+0x38>
 8009edc:	f04f 34ff 	mov.w	r4, #4294967295
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	20005438 	.word	0x20005438

08009ee8 <_malloc_r>:
 8009ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eec:	1ccd      	adds	r5, r1, #3
 8009eee:	f025 0503 	bic.w	r5, r5, #3
 8009ef2:	3508      	adds	r5, #8
 8009ef4:	2d0c      	cmp	r5, #12
 8009ef6:	bf38      	it	cc
 8009ef8:	250c      	movcc	r5, #12
 8009efa:	2d00      	cmp	r5, #0
 8009efc:	4607      	mov	r7, r0
 8009efe:	db01      	blt.n	8009f04 <_malloc_r+0x1c>
 8009f00:	42a9      	cmp	r1, r5
 8009f02:	d905      	bls.n	8009f10 <_malloc_r+0x28>
 8009f04:	230c      	movs	r3, #12
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	2600      	movs	r6, #0
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fe4 <_malloc_r+0xfc>
 8009f14:	f000 f868 	bl	8009fe8 <__malloc_lock>
 8009f18:	f8d8 3000 	ldr.w	r3, [r8]
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	bb5c      	cbnz	r4, 8009f78 <_malloc_r+0x90>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4638      	mov	r0, r7
 8009f24:	f7ff ffc0 	bl	8009ea8 <sbrk_aligned>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	d155      	bne.n	8009fda <_malloc_r+0xf2>
 8009f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8009f32:	4626      	mov	r6, r4
 8009f34:	2e00      	cmp	r6, #0
 8009f36:	d145      	bne.n	8009fc4 <_malloc_r+0xdc>
 8009f38:	2c00      	cmp	r4, #0
 8009f3a:	d048      	beq.n	8009fce <_malloc_r+0xe6>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4638      	mov	r0, r7
 8009f42:	eb04 0903 	add.w	r9, r4, r3
 8009f46:	f000 fdf7 	bl	800ab38 <_sbrk_r>
 8009f4a:	4581      	cmp	r9, r0
 8009f4c:	d13f      	bne.n	8009fce <_malloc_r+0xe6>
 8009f4e:	6821      	ldr	r1, [r4, #0]
 8009f50:	1a6d      	subs	r5, r5, r1
 8009f52:	4629      	mov	r1, r5
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff ffa7 	bl	8009ea8 <sbrk_aligned>
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d037      	beq.n	8009fce <_malloc_r+0xe6>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	442b      	add	r3, r5
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	f8d8 3000 	ldr.w	r3, [r8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d038      	beq.n	8009fde <_malloc_r+0xf6>
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	42a2      	cmp	r2, r4
 8009f70:	d12b      	bne.n	8009fca <_malloc_r+0xe2>
 8009f72:	2200      	movs	r2, #0
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	e00f      	b.n	8009f98 <_malloc_r+0xb0>
 8009f78:	6822      	ldr	r2, [r4, #0]
 8009f7a:	1b52      	subs	r2, r2, r5
 8009f7c:	d41f      	bmi.n	8009fbe <_malloc_r+0xd6>
 8009f7e:	2a0b      	cmp	r2, #11
 8009f80:	d917      	bls.n	8009fb2 <_malloc_r+0xca>
 8009f82:	1961      	adds	r1, r4, r5
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	6025      	str	r5, [r4, #0]
 8009f88:	bf18      	it	ne
 8009f8a:	6059      	strne	r1, [r3, #4]
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	bf08      	it	eq
 8009f90:	f8c8 1000 	streq.w	r1, [r8]
 8009f94:	5162      	str	r2, [r4, r5]
 8009f96:	604b      	str	r3, [r1, #4]
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f104 060b 	add.w	r6, r4, #11
 8009f9e:	f000 f829 	bl	8009ff4 <__malloc_unlock>
 8009fa2:	f026 0607 	bic.w	r6, r6, #7
 8009fa6:	1d23      	adds	r3, r4, #4
 8009fa8:	1af2      	subs	r2, r6, r3
 8009faa:	d0ae      	beq.n	8009f0a <_malloc_r+0x22>
 8009fac:	1b9b      	subs	r3, r3, r6
 8009fae:	50a3      	str	r3, [r4, r2]
 8009fb0:	e7ab      	b.n	8009f0a <_malloc_r+0x22>
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	6862      	ldr	r2, [r4, #4]
 8009fb6:	d1dd      	bne.n	8009f74 <_malloc_r+0x8c>
 8009fb8:	f8c8 2000 	str.w	r2, [r8]
 8009fbc:	e7ec      	b.n	8009f98 <_malloc_r+0xb0>
 8009fbe:	4623      	mov	r3, r4
 8009fc0:	6864      	ldr	r4, [r4, #4]
 8009fc2:	e7ac      	b.n	8009f1e <_malloc_r+0x36>
 8009fc4:	4634      	mov	r4, r6
 8009fc6:	6876      	ldr	r6, [r6, #4]
 8009fc8:	e7b4      	b.n	8009f34 <_malloc_r+0x4c>
 8009fca:	4613      	mov	r3, r2
 8009fcc:	e7cc      	b.n	8009f68 <_malloc_r+0x80>
 8009fce:	230c      	movs	r3, #12
 8009fd0:	603b      	str	r3, [r7, #0]
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f000 f80e 	bl	8009ff4 <__malloc_unlock>
 8009fd8:	e797      	b.n	8009f0a <_malloc_r+0x22>
 8009fda:	6025      	str	r5, [r4, #0]
 8009fdc:	e7dc      	b.n	8009f98 <_malloc_r+0xb0>
 8009fde:	605b      	str	r3, [r3, #4]
 8009fe0:	deff      	udf	#255	; 0xff
 8009fe2:	bf00      	nop
 8009fe4:	20005434 	.word	0x20005434

08009fe8 <__malloc_lock>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__malloc_lock+0x8>)
 8009fea:	f7ff b904 	b.w	80091f6 <__retarget_lock_acquire_recursive>
 8009fee:	bf00      	nop
 8009ff0:	20005430 	.word	0x20005430

08009ff4 <__malloc_unlock>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	; (8009ffc <__malloc_unlock+0x8>)
 8009ff6:	f7ff b8ff 	b.w	80091f8 <__retarget_lock_release_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	20005430 	.word	0x20005430

0800a000 <_Balloc>:
 800a000:	b570      	push	{r4, r5, r6, lr}
 800a002:	69c6      	ldr	r6, [r0, #28]
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	b976      	cbnz	r6, 800a028 <_Balloc+0x28>
 800a00a:	2010      	movs	r0, #16
 800a00c:	f7ff ff44 	bl	8009e98 <malloc>
 800a010:	4602      	mov	r2, r0
 800a012:	61e0      	str	r0, [r4, #28]
 800a014:	b920      	cbnz	r0, 800a020 <_Balloc+0x20>
 800a016:	4b18      	ldr	r3, [pc, #96]	; (800a078 <_Balloc+0x78>)
 800a018:	4818      	ldr	r0, [pc, #96]	; (800a07c <_Balloc+0x7c>)
 800a01a:	216b      	movs	r1, #107	; 0x6b
 800a01c:	f000 fd9c 	bl	800ab58 <__assert_func>
 800a020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a024:	6006      	str	r6, [r0, #0]
 800a026:	60c6      	str	r6, [r0, #12]
 800a028:	69e6      	ldr	r6, [r4, #28]
 800a02a:	68f3      	ldr	r3, [r6, #12]
 800a02c:	b183      	cbz	r3, 800a050 <_Balloc+0x50>
 800a02e:	69e3      	ldr	r3, [r4, #28]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a036:	b9b8      	cbnz	r0, 800a068 <_Balloc+0x68>
 800a038:	2101      	movs	r1, #1
 800a03a:	fa01 f605 	lsl.w	r6, r1, r5
 800a03e:	1d72      	adds	r2, r6, #5
 800a040:	0092      	lsls	r2, r2, #2
 800a042:	4620      	mov	r0, r4
 800a044:	f000 fda6 	bl	800ab94 <_calloc_r>
 800a048:	b160      	cbz	r0, 800a064 <_Balloc+0x64>
 800a04a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a04e:	e00e      	b.n	800a06e <_Balloc+0x6e>
 800a050:	2221      	movs	r2, #33	; 0x21
 800a052:	2104      	movs	r1, #4
 800a054:	4620      	mov	r0, r4
 800a056:	f000 fd9d 	bl	800ab94 <_calloc_r>
 800a05a:	69e3      	ldr	r3, [r4, #28]
 800a05c:	60f0      	str	r0, [r6, #12]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e4      	bne.n	800a02e <_Balloc+0x2e>
 800a064:	2000      	movs	r0, #0
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	6802      	ldr	r2, [r0, #0]
 800a06a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a06e:	2300      	movs	r3, #0
 800a070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a074:	e7f7      	b.n	800a066 <_Balloc+0x66>
 800a076:	bf00      	nop
 800a078:	0800b4ed 	.word	0x0800b4ed
 800a07c:	0800b56d 	.word	0x0800b56d

0800a080 <_Bfree>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	69c6      	ldr	r6, [r0, #28]
 800a084:	4605      	mov	r5, r0
 800a086:	460c      	mov	r4, r1
 800a088:	b976      	cbnz	r6, 800a0a8 <_Bfree+0x28>
 800a08a:	2010      	movs	r0, #16
 800a08c:	f7ff ff04 	bl	8009e98 <malloc>
 800a090:	4602      	mov	r2, r0
 800a092:	61e8      	str	r0, [r5, #28]
 800a094:	b920      	cbnz	r0, 800a0a0 <_Bfree+0x20>
 800a096:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <_Bfree+0x3c>)
 800a098:	4809      	ldr	r0, [pc, #36]	; (800a0c0 <_Bfree+0x40>)
 800a09a:	218f      	movs	r1, #143	; 0x8f
 800a09c:	f000 fd5c 	bl	800ab58 <__assert_func>
 800a0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0a4:	6006      	str	r6, [r0, #0]
 800a0a6:	60c6      	str	r6, [r0, #12]
 800a0a8:	b13c      	cbz	r4, 800a0ba <_Bfree+0x3a>
 800a0aa:	69eb      	ldr	r3, [r5, #28]
 800a0ac:	6862      	ldr	r2, [r4, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0b4:	6021      	str	r1, [r4, #0]
 800a0b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	0800b4ed 	.word	0x0800b4ed
 800a0c0:	0800b56d 	.word	0x0800b56d

0800a0c4 <__multadd>:
 800a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c8:	690d      	ldr	r5, [r1, #16]
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	461e      	mov	r6, r3
 800a0d0:	f101 0c14 	add.w	ip, r1, #20
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	f8dc 3000 	ldr.w	r3, [ip]
 800a0da:	b299      	uxth	r1, r3
 800a0dc:	fb02 6101 	mla	r1, r2, r1, r6
 800a0e0:	0c1e      	lsrs	r6, r3, #16
 800a0e2:	0c0b      	lsrs	r3, r1, #16
 800a0e4:	fb02 3306 	mla	r3, r2, r6, r3
 800a0e8:	b289      	uxth	r1, r1
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0f0:	4285      	cmp	r5, r0
 800a0f2:	f84c 1b04 	str.w	r1, [ip], #4
 800a0f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0fa:	dcec      	bgt.n	800a0d6 <__multadd+0x12>
 800a0fc:	b30e      	cbz	r6, 800a142 <__multadd+0x7e>
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	42ab      	cmp	r3, r5
 800a102:	dc19      	bgt.n	800a138 <__multadd+0x74>
 800a104:	6861      	ldr	r1, [r4, #4]
 800a106:	4638      	mov	r0, r7
 800a108:	3101      	adds	r1, #1
 800a10a:	f7ff ff79 	bl	800a000 <_Balloc>
 800a10e:	4680      	mov	r8, r0
 800a110:	b928      	cbnz	r0, 800a11e <__multadd+0x5a>
 800a112:	4602      	mov	r2, r0
 800a114:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <__multadd+0x84>)
 800a116:	480d      	ldr	r0, [pc, #52]	; (800a14c <__multadd+0x88>)
 800a118:	21ba      	movs	r1, #186	; 0xba
 800a11a:	f000 fd1d 	bl	800ab58 <__assert_func>
 800a11e:	6922      	ldr	r2, [r4, #16]
 800a120:	3202      	adds	r2, #2
 800a122:	f104 010c 	add.w	r1, r4, #12
 800a126:	0092      	lsls	r2, r2, #2
 800a128:	300c      	adds	r0, #12
 800a12a:	f7ff f866 	bl	80091fa <memcpy>
 800a12e:	4621      	mov	r1, r4
 800a130:	4638      	mov	r0, r7
 800a132:	f7ff ffa5 	bl	800a080 <_Bfree>
 800a136:	4644      	mov	r4, r8
 800a138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a13c:	3501      	adds	r5, #1
 800a13e:	615e      	str	r6, [r3, #20]
 800a140:	6125      	str	r5, [r4, #16]
 800a142:	4620      	mov	r0, r4
 800a144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a148:	0800b55c 	.word	0x0800b55c
 800a14c:	0800b56d 	.word	0x0800b56d

0800a150 <__hi0bits>:
 800a150:	0c03      	lsrs	r3, r0, #16
 800a152:	041b      	lsls	r3, r3, #16
 800a154:	b9d3      	cbnz	r3, 800a18c <__hi0bits+0x3c>
 800a156:	0400      	lsls	r0, r0, #16
 800a158:	2310      	movs	r3, #16
 800a15a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a15e:	bf04      	itt	eq
 800a160:	0200      	lsleq	r0, r0, #8
 800a162:	3308      	addeq	r3, #8
 800a164:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a168:	bf04      	itt	eq
 800a16a:	0100      	lsleq	r0, r0, #4
 800a16c:	3304      	addeq	r3, #4
 800a16e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a172:	bf04      	itt	eq
 800a174:	0080      	lsleq	r0, r0, #2
 800a176:	3302      	addeq	r3, #2
 800a178:	2800      	cmp	r0, #0
 800a17a:	db05      	blt.n	800a188 <__hi0bits+0x38>
 800a17c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a180:	f103 0301 	add.w	r3, r3, #1
 800a184:	bf08      	it	eq
 800a186:	2320      	moveq	r3, #32
 800a188:	4618      	mov	r0, r3
 800a18a:	4770      	bx	lr
 800a18c:	2300      	movs	r3, #0
 800a18e:	e7e4      	b.n	800a15a <__hi0bits+0xa>

0800a190 <__lo0bits>:
 800a190:	6803      	ldr	r3, [r0, #0]
 800a192:	f013 0207 	ands.w	r2, r3, #7
 800a196:	d00c      	beq.n	800a1b2 <__lo0bits+0x22>
 800a198:	07d9      	lsls	r1, r3, #31
 800a19a:	d422      	bmi.n	800a1e2 <__lo0bits+0x52>
 800a19c:	079a      	lsls	r2, r3, #30
 800a19e:	bf49      	itett	mi
 800a1a0:	085b      	lsrmi	r3, r3, #1
 800a1a2:	089b      	lsrpl	r3, r3, #2
 800a1a4:	6003      	strmi	r3, [r0, #0]
 800a1a6:	2201      	movmi	r2, #1
 800a1a8:	bf5c      	itt	pl
 800a1aa:	6003      	strpl	r3, [r0, #0]
 800a1ac:	2202      	movpl	r2, #2
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4770      	bx	lr
 800a1b2:	b299      	uxth	r1, r3
 800a1b4:	b909      	cbnz	r1, 800a1ba <__lo0bits+0x2a>
 800a1b6:	0c1b      	lsrs	r3, r3, #16
 800a1b8:	2210      	movs	r2, #16
 800a1ba:	b2d9      	uxtb	r1, r3
 800a1bc:	b909      	cbnz	r1, 800a1c2 <__lo0bits+0x32>
 800a1be:	3208      	adds	r2, #8
 800a1c0:	0a1b      	lsrs	r3, r3, #8
 800a1c2:	0719      	lsls	r1, r3, #28
 800a1c4:	bf04      	itt	eq
 800a1c6:	091b      	lsreq	r3, r3, #4
 800a1c8:	3204      	addeq	r2, #4
 800a1ca:	0799      	lsls	r1, r3, #30
 800a1cc:	bf04      	itt	eq
 800a1ce:	089b      	lsreq	r3, r3, #2
 800a1d0:	3202      	addeq	r2, #2
 800a1d2:	07d9      	lsls	r1, r3, #31
 800a1d4:	d403      	bmi.n	800a1de <__lo0bits+0x4e>
 800a1d6:	085b      	lsrs	r3, r3, #1
 800a1d8:	f102 0201 	add.w	r2, r2, #1
 800a1dc:	d003      	beq.n	800a1e6 <__lo0bits+0x56>
 800a1de:	6003      	str	r3, [r0, #0]
 800a1e0:	e7e5      	b.n	800a1ae <__lo0bits+0x1e>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	e7e3      	b.n	800a1ae <__lo0bits+0x1e>
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	e7e1      	b.n	800a1ae <__lo0bits+0x1e>
	...

0800a1ec <__i2b>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	f7ff ff05 	bl	800a000 <_Balloc>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__i2b+0x1a>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <__i2b+0x24>)
 800a1fc:	4805      	ldr	r0, [pc, #20]	; (800a214 <__i2b+0x28>)
 800a1fe:	f240 1145 	movw	r1, #325	; 0x145
 800a202:	f000 fca9 	bl	800ab58 <__assert_func>
 800a206:	2301      	movs	r3, #1
 800a208:	6144      	str	r4, [r0, #20]
 800a20a:	6103      	str	r3, [r0, #16]
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	0800b55c 	.word	0x0800b55c
 800a214:	0800b56d 	.word	0x0800b56d

0800a218 <__multiply>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	4691      	mov	r9, r2
 800a21e:	690a      	ldr	r2, [r1, #16]
 800a220:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a224:	429a      	cmp	r2, r3
 800a226:	bfb8      	it	lt
 800a228:	460b      	movlt	r3, r1
 800a22a:	460c      	mov	r4, r1
 800a22c:	bfbc      	itt	lt
 800a22e:	464c      	movlt	r4, r9
 800a230:	4699      	movlt	r9, r3
 800a232:	6927      	ldr	r7, [r4, #16]
 800a234:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a238:	68a3      	ldr	r3, [r4, #8]
 800a23a:	6861      	ldr	r1, [r4, #4]
 800a23c:	eb07 060a 	add.w	r6, r7, sl
 800a240:	42b3      	cmp	r3, r6
 800a242:	b085      	sub	sp, #20
 800a244:	bfb8      	it	lt
 800a246:	3101      	addlt	r1, #1
 800a248:	f7ff feda 	bl	800a000 <_Balloc>
 800a24c:	b930      	cbnz	r0, 800a25c <__multiply+0x44>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b44      	ldr	r3, [pc, #272]	; (800a364 <__multiply+0x14c>)
 800a252:	4845      	ldr	r0, [pc, #276]	; (800a368 <__multiply+0x150>)
 800a254:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a258:	f000 fc7e 	bl	800ab58 <__assert_func>
 800a25c:	f100 0514 	add.w	r5, r0, #20
 800a260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a264:	462b      	mov	r3, r5
 800a266:	2200      	movs	r2, #0
 800a268:	4543      	cmp	r3, r8
 800a26a:	d321      	bcc.n	800a2b0 <__multiply+0x98>
 800a26c:	f104 0314 	add.w	r3, r4, #20
 800a270:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a274:	f109 0314 	add.w	r3, r9, #20
 800a278:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a27c:	9202      	str	r2, [sp, #8]
 800a27e:	1b3a      	subs	r2, r7, r4
 800a280:	3a15      	subs	r2, #21
 800a282:	f022 0203 	bic.w	r2, r2, #3
 800a286:	3204      	adds	r2, #4
 800a288:	f104 0115 	add.w	r1, r4, #21
 800a28c:	428f      	cmp	r7, r1
 800a28e:	bf38      	it	cc
 800a290:	2204      	movcc	r2, #4
 800a292:	9201      	str	r2, [sp, #4]
 800a294:	9a02      	ldr	r2, [sp, #8]
 800a296:	9303      	str	r3, [sp, #12]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d80c      	bhi.n	800a2b6 <__multiply+0x9e>
 800a29c:	2e00      	cmp	r6, #0
 800a29e:	dd03      	ble.n	800a2a8 <__multiply+0x90>
 800a2a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d05b      	beq.n	800a360 <__multiply+0x148>
 800a2a8:	6106      	str	r6, [r0, #16]
 800a2aa:	b005      	add	sp, #20
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	f843 2b04 	str.w	r2, [r3], #4
 800a2b4:	e7d8      	b.n	800a268 <__multiply+0x50>
 800a2b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2ba:	f1ba 0f00 	cmp.w	sl, #0
 800a2be:	d024      	beq.n	800a30a <__multiply+0xf2>
 800a2c0:	f104 0e14 	add.w	lr, r4, #20
 800a2c4:	46a9      	mov	r9, r5
 800a2c6:	f04f 0c00 	mov.w	ip, #0
 800a2ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2ce:	f8d9 1000 	ldr.w	r1, [r9]
 800a2d2:	fa1f fb82 	uxth.w	fp, r2
 800a2d6:	b289      	uxth	r1, r1
 800a2d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a2e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2e4:	4461      	add	r1, ip
 800a2e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2f2:	b289      	uxth	r1, r1
 800a2f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2f8:	4577      	cmp	r7, lr
 800a2fa:	f849 1b04 	str.w	r1, [r9], #4
 800a2fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a302:	d8e2      	bhi.n	800a2ca <__multiply+0xb2>
 800a304:	9a01      	ldr	r2, [sp, #4]
 800a306:	f845 c002 	str.w	ip, [r5, r2]
 800a30a:	9a03      	ldr	r2, [sp, #12]
 800a30c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a310:	3304      	adds	r3, #4
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	d021      	beq.n	800a35c <__multiply+0x144>
 800a318:	6829      	ldr	r1, [r5, #0]
 800a31a:	f104 0c14 	add.w	ip, r4, #20
 800a31e:	46ae      	mov	lr, r5
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	f8bc b000 	ldrh.w	fp, [ip]
 800a328:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a32c:	fb09 220b 	mla	r2, r9, fp, r2
 800a330:	4452      	add	r2, sl
 800a332:	b289      	uxth	r1, r1
 800a334:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a338:	f84e 1b04 	str.w	r1, [lr], #4
 800a33c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a344:	f8be 1000 	ldrh.w	r1, [lr]
 800a348:	fb09 110a 	mla	r1, r9, sl, r1
 800a34c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a350:	4567      	cmp	r7, ip
 800a352:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a356:	d8e5      	bhi.n	800a324 <__multiply+0x10c>
 800a358:	9a01      	ldr	r2, [sp, #4]
 800a35a:	50a9      	str	r1, [r5, r2]
 800a35c:	3504      	adds	r5, #4
 800a35e:	e799      	b.n	800a294 <__multiply+0x7c>
 800a360:	3e01      	subs	r6, #1
 800a362:	e79b      	b.n	800a29c <__multiply+0x84>
 800a364:	0800b55c 	.word	0x0800b55c
 800a368:	0800b56d 	.word	0x0800b56d

0800a36c <__pow5mult>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	4615      	mov	r5, r2
 800a372:	f012 0203 	ands.w	r2, r2, #3
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	d007      	beq.n	800a38c <__pow5mult+0x20>
 800a37c:	4c25      	ldr	r4, [pc, #148]	; (800a414 <__pow5mult+0xa8>)
 800a37e:	3a01      	subs	r2, #1
 800a380:	2300      	movs	r3, #0
 800a382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a386:	f7ff fe9d 	bl	800a0c4 <__multadd>
 800a38a:	4607      	mov	r7, r0
 800a38c:	10ad      	asrs	r5, r5, #2
 800a38e:	d03d      	beq.n	800a40c <__pow5mult+0xa0>
 800a390:	69f4      	ldr	r4, [r6, #28]
 800a392:	b97c      	cbnz	r4, 800a3b4 <__pow5mult+0x48>
 800a394:	2010      	movs	r0, #16
 800a396:	f7ff fd7f 	bl	8009e98 <malloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	61f0      	str	r0, [r6, #28]
 800a39e:	b928      	cbnz	r0, 800a3ac <__pow5mult+0x40>
 800a3a0:	4b1d      	ldr	r3, [pc, #116]	; (800a418 <__pow5mult+0xac>)
 800a3a2:	481e      	ldr	r0, [pc, #120]	; (800a41c <__pow5mult+0xb0>)
 800a3a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a3a8:	f000 fbd6 	bl	800ab58 <__assert_func>
 800a3ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3b0:	6004      	str	r4, [r0, #0]
 800a3b2:	60c4      	str	r4, [r0, #12]
 800a3b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a3b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3bc:	b94c      	cbnz	r4, 800a3d2 <__pow5mult+0x66>
 800a3be:	f240 2171 	movw	r1, #625	; 0x271
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ff12 	bl	800a1ec <__i2b>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	6003      	str	r3, [r0, #0]
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	07eb      	lsls	r3, r5, #31
 800a3d8:	d50a      	bpl.n	800a3f0 <__pow5mult+0x84>
 800a3da:	4639      	mov	r1, r7
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7ff ff1a 	bl	800a218 <__multiply>
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f7ff fe49 	bl	800a080 <_Bfree>
 800a3ee:	4647      	mov	r7, r8
 800a3f0:	106d      	asrs	r5, r5, #1
 800a3f2:	d00b      	beq.n	800a40c <__pow5mult+0xa0>
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	b938      	cbnz	r0, 800a408 <__pow5mult+0x9c>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff ff0b 	bl	800a218 <__multiply>
 800a402:	6020      	str	r0, [r4, #0]
 800a404:	f8c0 9000 	str.w	r9, [r0]
 800a408:	4604      	mov	r4, r0
 800a40a:	e7e4      	b.n	800a3d6 <__pow5mult+0x6a>
 800a40c:	4638      	mov	r0, r7
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	bf00      	nop
 800a414:	0800b6b8 	.word	0x0800b6b8
 800a418:	0800b4ed 	.word	0x0800b4ed
 800a41c:	0800b56d 	.word	0x0800b56d

0800a420 <__lshift>:
 800a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	6849      	ldr	r1, [r1, #4]
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a42e:	68a3      	ldr	r3, [r4, #8]
 800a430:	4607      	mov	r7, r0
 800a432:	4691      	mov	r9, r2
 800a434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a438:	f108 0601 	add.w	r6, r8, #1
 800a43c:	42b3      	cmp	r3, r6
 800a43e:	db0b      	blt.n	800a458 <__lshift+0x38>
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff fddd 	bl	800a000 <_Balloc>
 800a446:	4605      	mov	r5, r0
 800a448:	b948      	cbnz	r0, 800a45e <__lshift+0x3e>
 800a44a:	4602      	mov	r2, r0
 800a44c:	4b28      	ldr	r3, [pc, #160]	; (800a4f0 <__lshift+0xd0>)
 800a44e:	4829      	ldr	r0, [pc, #164]	; (800a4f4 <__lshift+0xd4>)
 800a450:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a454:	f000 fb80 	bl	800ab58 <__assert_func>
 800a458:	3101      	adds	r1, #1
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	e7ee      	b.n	800a43c <__lshift+0x1c>
 800a45e:	2300      	movs	r3, #0
 800a460:	f100 0114 	add.w	r1, r0, #20
 800a464:	f100 0210 	add.w	r2, r0, #16
 800a468:	4618      	mov	r0, r3
 800a46a:	4553      	cmp	r3, sl
 800a46c:	db33      	blt.n	800a4d6 <__lshift+0xb6>
 800a46e:	6920      	ldr	r0, [r4, #16]
 800a470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a474:	f104 0314 	add.w	r3, r4, #20
 800a478:	f019 091f 	ands.w	r9, r9, #31
 800a47c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a484:	d02b      	beq.n	800a4de <__lshift+0xbe>
 800a486:	f1c9 0e20 	rsb	lr, r9, #32
 800a48a:	468a      	mov	sl, r1
 800a48c:	2200      	movs	r2, #0
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	fa00 f009 	lsl.w	r0, r0, r9
 800a494:	4310      	orrs	r0, r2
 800a496:	f84a 0b04 	str.w	r0, [sl], #4
 800a49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a49e:	459c      	cmp	ip, r3
 800a4a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4a4:	d8f3      	bhi.n	800a48e <__lshift+0x6e>
 800a4a6:	ebac 0304 	sub.w	r3, ip, r4
 800a4aa:	3b15      	subs	r3, #21
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	f104 0015 	add.w	r0, r4, #21
 800a4b6:	4584      	cmp	ip, r0
 800a4b8:	bf38      	it	cc
 800a4ba:	2304      	movcc	r3, #4
 800a4bc:	50ca      	str	r2, [r1, r3]
 800a4be:	b10a      	cbz	r2, 800a4c4 <__lshift+0xa4>
 800a4c0:	f108 0602 	add.w	r6, r8, #2
 800a4c4:	3e01      	subs	r6, #1
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	612e      	str	r6, [r5, #16]
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	f7ff fdd8 	bl	800a080 <_Bfree>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4da:	3301      	adds	r3, #1
 800a4dc:	e7c5      	b.n	800a46a <__lshift+0x4a>
 800a4de:	3904      	subs	r1, #4
 800a4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4e8:	459c      	cmp	ip, r3
 800a4ea:	d8f9      	bhi.n	800a4e0 <__lshift+0xc0>
 800a4ec:	e7ea      	b.n	800a4c4 <__lshift+0xa4>
 800a4ee:	bf00      	nop
 800a4f0:	0800b55c 	.word	0x0800b55c
 800a4f4:	0800b56d 	.word	0x0800b56d

0800a4f8 <__mcmp>:
 800a4f8:	b530      	push	{r4, r5, lr}
 800a4fa:	6902      	ldr	r2, [r0, #16]
 800a4fc:	690c      	ldr	r4, [r1, #16]
 800a4fe:	1b12      	subs	r2, r2, r4
 800a500:	d10e      	bne.n	800a520 <__mcmp+0x28>
 800a502:	f100 0314 	add.w	r3, r0, #20
 800a506:	3114      	adds	r1, #20
 800a508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a50c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a518:	42a5      	cmp	r5, r4
 800a51a:	d003      	beq.n	800a524 <__mcmp+0x2c>
 800a51c:	d305      	bcc.n	800a52a <__mcmp+0x32>
 800a51e:	2201      	movs	r2, #1
 800a520:	4610      	mov	r0, r2
 800a522:	bd30      	pop	{r4, r5, pc}
 800a524:	4283      	cmp	r3, r0
 800a526:	d3f3      	bcc.n	800a510 <__mcmp+0x18>
 800a528:	e7fa      	b.n	800a520 <__mcmp+0x28>
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	e7f7      	b.n	800a520 <__mcmp+0x28>

0800a530 <__mdiff>:
 800a530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	460c      	mov	r4, r1
 800a536:	4606      	mov	r6, r0
 800a538:	4611      	mov	r1, r2
 800a53a:	4620      	mov	r0, r4
 800a53c:	4690      	mov	r8, r2
 800a53e:	f7ff ffdb 	bl	800a4f8 <__mcmp>
 800a542:	1e05      	subs	r5, r0, #0
 800a544:	d110      	bne.n	800a568 <__mdiff+0x38>
 800a546:	4629      	mov	r1, r5
 800a548:	4630      	mov	r0, r6
 800a54a:	f7ff fd59 	bl	800a000 <_Balloc>
 800a54e:	b930      	cbnz	r0, 800a55e <__mdiff+0x2e>
 800a550:	4b3a      	ldr	r3, [pc, #232]	; (800a63c <__mdiff+0x10c>)
 800a552:	4602      	mov	r2, r0
 800a554:	f240 2137 	movw	r1, #567	; 0x237
 800a558:	4839      	ldr	r0, [pc, #228]	; (800a640 <__mdiff+0x110>)
 800a55a:	f000 fafd 	bl	800ab58 <__assert_func>
 800a55e:	2301      	movs	r3, #1
 800a560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a568:	bfa4      	itt	ge
 800a56a:	4643      	movge	r3, r8
 800a56c:	46a0      	movge	r8, r4
 800a56e:	4630      	mov	r0, r6
 800a570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a574:	bfa6      	itte	ge
 800a576:	461c      	movge	r4, r3
 800a578:	2500      	movge	r5, #0
 800a57a:	2501      	movlt	r5, #1
 800a57c:	f7ff fd40 	bl	800a000 <_Balloc>
 800a580:	b920      	cbnz	r0, 800a58c <__mdiff+0x5c>
 800a582:	4b2e      	ldr	r3, [pc, #184]	; (800a63c <__mdiff+0x10c>)
 800a584:	4602      	mov	r2, r0
 800a586:	f240 2145 	movw	r1, #581	; 0x245
 800a58a:	e7e5      	b.n	800a558 <__mdiff+0x28>
 800a58c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a590:	6926      	ldr	r6, [r4, #16]
 800a592:	60c5      	str	r5, [r0, #12]
 800a594:	f104 0914 	add.w	r9, r4, #20
 800a598:	f108 0514 	add.w	r5, r8, #20
 800a59c:	f100 0e14 	add.w	lr, r0, #20
 800a5a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a5a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a5a8:	f108 0210 	add.w	r2, r8, #16
 800a5ac:	46f2      	mov	sl, lr
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5b8:	fa11 f88b 	uxtah	r8, r1, fp
 800a5bc:	b299      	uxth	r1, r3
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	eba8 0801 	sub.w	r8, r8, r1
 800a5c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5cc:	fa1f f888 	uxth.w	r8, r8
 800a5d0:	1419      	asrs	r1, r3, #16
 800a5d2:	454e      	cmp	r6, r9
 800a5d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5d8:	f84a 3b04 	str.w	r3, [sl], #4
 800a5dc:	d8e8      	bhi.n	800a5b0 <__mdiff+0x80>
 800a5de:	1b33      	subs	r3, r6, r4
 800a5e0:	3b15      	subs	r3, #21
 800a5e2:	f023 0303 	bic.w	r3, r3, #3
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	3415      	adds	r4, #21
 800a5ea:	42a6      	cmp	r6, r4
 800a5ec:	bf38      	it	cc
 800a5ee:	2304      	movcc	r3, #4
 800a5f0:	441d      	add	r5, r3
 800a5f2:	4473      	add	r3, lr
 800a5f4:	469e      	mov	lr, r3
 800a5f6:	462e      	mov	r6, r5
 800a5f8:	4566      	cmp	r6, ip
 800a5fa:	d30e      	bcc.n	800a61a <__mdiff+0xea>
 800a5fc:	f10c 0203 	add.w	r2, ip, #3
 800a600:	1b52      	subs	r2, r2, r5
 800a602:	f022 0203 	bic.w	r2, r2, #3
 800a606:	3d03      	subs	r5, #3
 800a608:	45ac      	cmp	ip, r5
 800a60a:	bf38      	it	cc
 800a60c:	2200      	movcc	r2, #0
 800a60e:	4413      	add	r3, r2
 800a610:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a614:	b17a      	cbz	r2, 800a636 <__mdiff+0x106>
 800a616:	6107      	str	r7, [r0, #16]
 800a618:	e7a4      	b.n	800a564 <__mdiff+0x34>
 800a61a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a61e:	fa11 f288 	uxtah	r2, r1, r8
 800a622:	1414      	asrs	r4, r2, #16
 800a624:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a628:	b292      	uxth	r2, r2
 800a62a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a62e:	f84e 2b04 	str.w	r2, [lr], #4
 800a632:	1421      	asrs	r1, r4, #16
 800a634:	e7e0      	b.n	800a5f8 <__mdiff+0xc8>
 800a636:	3f01      	subs	r7, #1
 800a638:	e7ea      	b.n	800a610 <__mdiff+0xe0>
 800a63a:	bf00      	nop
 800a63c:	0800b55c 	.word	0x0800b55c
 800a640:	0800b56d 	.word	0x0800b56d

0800a644 <__d2b>:
 800a644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a648:	460f      	mov	r7, r1
 800a64a:	2101      	movs	r1, #1
 800a64c:	ec59 8b10 	vmov	r8, r9, d0
 800a650:	4616      	mov	r6, r2
 800a652:	f7ff fcd5 	bl	800a000 <_Balloc>
 800a656:	4604      	mov	r4, r0
 800a658:	b930      	cbnz	r0, 800a668 <__d2b+0x24>
 800a65a:	4602      	mov	r2, r0
 800a65c:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <__d2b+0xac>)
 800a65e:	4825      	ldr	r0, [pc, #148]	; (800a6f4 <__d2b+0xb0>)
 800a660:	f240 310f 	movw	r1, #783	; 0x30f
 800a664:	f000 fa78 	bl	800ab58 <__assert_func>
 800a668:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a66c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a670:	bb2d      	cbnz	r5, 800a6be <__d2b+0x7a>
 800a672:	9301      	str	r3, [sp, #4]
 800a674:	f1b8 0300 	subs.w	r3, r8, #0
 800a678:	d026      	beq.n	800a6c8 <__d2b+0x84>
 800a67a:	4668      	mov	r0, sp
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	f7ff fd87 	bl	800a190 <__lo0bits>
 800a682:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a686:	b1e8      	cbz	r0, 800a6c4 <__d2b+0x80>
 800a688:	f1c0 0320 	rsb	r3, r0, #32
 800a68c:	fa02 f303 	lsl.w	r3, r2, r3
 800a690:	430b      	orrs	r3, r1
 800a692:	40c2      	lsrs	r2, r0
 800a694:	6163      	str	r3, [r4, #20]
 800a696:	9201      	str	r2, [sp, #4]
 800a698:	9b01      	ldr	r3, [sp, #4]
 800a69a:	61a3      	str	r3, [r4, #24]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bf14      	ite	ne
 800a6a0:	2202      	movne	r2, #2
 800a6a2:	2201      	moveq	r2, #1
 800a6a4:	6122      	str	r2, [r4, #16]
 800a6a6:	b1bd      	cbz	r5, 800a6d8 <__d2b+0x94>
 800a6a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6ac:	4405      	add	r5, r0
 800a6ae:	603d      	str	r5, [r7, #0]
 800a6b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6b4:	6030      	str	r0, [r6, #0]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	b003      	add	sp, #12
 800a6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6c2:	e7d6      	b.n	800a672 <__d2b+0x2e>
 800a6c4:	6161      	str	r1, [r4, #20]
 800a6c6:	e7e7      	b.n	800a698 <__d2b+0x54>
 800a6c8:	a801      	add	r0, sp, #4
 800a6ca:	f7ff fd61 	bl	800a190 <__lo0bits>
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	6163      	str	r3, [r4, #20]
 800a6d2:	3020      	adds	r0, #32
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	e7e5      	b.n	800a6a4 <__d2b+0x60>
 800a6d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6e0:	6038      	str	r0, [r7, #0]
 800a6e2:	6918      	ldr	r0, [r3, #16]
 800a6e4:	f7ff fd34 	bl	800a150 <__hi0bits>
 800a6e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6ec:	e7e2      	b.n	800a6b4 <__d2b+0x70>
 800a6ee:	bf00      	nop
 800a6f0:	0800b55c 	.word	0x0800b55c
 800a6f4:	0800b56d 	.word	0x0800b56d

0800a6f8 <__ssputs_r>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	688e      	ldr	r6, [r1, #8]
 800a6fe:	461f      	mov	r7, r3
 800a700:	42be      	cmp	r6, r7
 800a702:	680b      	ldr	r3, [r1, #0]
 800a704:	4682      	mov	sl, r0
 800a706:	460c      	mov	r4, r1
 800a708:	4690      	mov	r8, r2
 800a70a:	d82c      	bhi.n	800a766 <__ssputs_r+0x6e>
 800a70c:	898a      	ldrh	r2, [r1, #12]
 800a70e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a712:	d026      	beq.n	800a762 <__ssputs_r+0x6a>
 800a714:	6965      	ldr	r5, [r4, #20]
 800a716:	6909      	ldr	r1, [r1, #16]
 800a718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a71c:	eba3 0901 	sub.w	r9, r3, r1
 800a720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a724:	1c7b      	adds	r3, r7, #1
 800a726:	444b      	add	r3, r9
 800a728:	106d      	asrs	r5, r5, #1
 800a72a:	429d      	cmp	r5, r3
 800a72c:	bf38      	it	cc
 800a72e:	461d      	movcc	r5, r3
 800a730:	0553      	lsls	r3, r2, #21
 800a732:	d527      	bpl.n	800a784 <__ssputs_r+0x8c>
 800a734:	4629      	mov	r1, r5
 800a736:	f7ff fbd7 	bl	8009ee8 <_malloc_r>
 800a73a:	4606      	mov	r6, r0
 800a73c:	b360      	cbz	r0, 800a798 <__ssputs_r+0xa0>
 800a73e:	6921      	ldr	r1, [r4, #16]
 800a740:	464a      	mov	r2, r9
 800a742:	f7fe fd5a 	bl	80091fa <memcpy>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	6126      	str	r6, [r4, #16]
 800a754:	6165      	str	r5, [r4, #20]
 800a756:	444e      	add	r6, r9
 800a758:	eba5 0509 	sub.w	r5, r5, r9
 800a75c:	6026      	str	r6, [r4, #0]
 800a75e:	60a5      	str	r5, [r4, #8]
 800a760:	463e      	mov	r6, r7
 800a762:	42be      	cmp	r6, r7
 800a764:	d900      	bls.n	800a768 <__ssputs_r+0x70>
 800a766:	463e      	mov	r6, r7
 800a768:	6820      	ldr	r0, [r4, #0]
 800a76a:	4632      	mov	r2, r6
 800a76c:	4641      	mov	r1, r8
 800a76e:	f000 f9c9 	bl	800ab04 <memmove>
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	1b9b      	subs	r3, r3, r6
 800a776:	60a3      	str	r3, [r4, #8]
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	4433      	add	r3, r6
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	2000      	movs	r0, #0
 800a780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a784:	462a      	mov	r2, r5
 800a786:	f000 fa2d 	bl	800abe4 <_realloc_r>
 800a78a:	4606      	mov	r6, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d1e0      	bne.n	800a752 <__ssputs_r+0x5a>
 800a790:	6921      	ldr	r1, [r4, #16]
 800a792:	4650      	mov	r0, sl
 800a794:	f7ff fb34 	bl	8009e00 <_free_r>
 800a798:	230c      	movs	r3, #12
 800a79a:	f8ca 3000 	str.w	r3, [sl]
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	e7e9      	b.n	800a780 <__ssputs_r+0x88>

0800a7ac <_svfiprintf_r>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	4698      	mov	r8, r3
 800a7b2:	898b      	ldrh	r3, [r1, #12]
 800a7b4:	061b      	lsls	r3, r3, #24
 800a7b6:	b09d      	sub	sp, #116	; 0x74
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	4614      	mov	r4, r2
 800a7be:	d50e      	bpl.n	800a7de <_svfiprintf_r+0x32>
 800a7c0:	690b      	ldr	r3, [r1, #16]
 800a7c2:	b963      	cbnz	r3, 800a7de <_svfiprintf_r+0x32>
 800a7c4:	2140      	movs	r1, #64	; 0x40
 800a7c6:	f7ff fb8f 	bl	8009ee8 <_malloc_r>
 800a7ca:	6028      	str	r0, [r5, #0]
 800a7cc:	6128      	str	r0, [r5, #16]
 800a7ce:	b920      	cbnz	r0, 800a7da <_svfiprintf_r+0x2e>
 800a7d0:	230c      	movs	r3, #12
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	e0d0      	b.n	800a97c <_svfiprintf_r+0x1d0>
 800a7da:	2340      	movs	r3, #64	; 0x40
 800a7dc:	616b      	str	r3, [r5, #20]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e2:	2320      	movs	r3, #32
 800a7e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ec:	2330      	movs	r3, #48	; 0x30
 800a7ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a994 <_svfiprintf_r+0x1e8>
 800a7f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7f6:	f04f 0901 	mov.w	r9, #1
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	469a      	mov	sl, r3
 800a7fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a802:	b10a      	cbz	r2, 800a808 <_svfiprintf_r+0x5c>
 800a804:	2a25      	cmp	r2, #37	; 0x25
 800a806:	d1f9      	bne.n	800a7fc <_svfiprintf_r+0x50>
 800a808:	ebba 0b04 	subs.w	fp, sl, r4
 800a80c:	d00b      	beq.n	800a826 <_svfiprintf_r+0x7a>
 800a80e:	465b      	mov	r3, fp
 800a810:	4622      	mov	r2, r4
 800a812:	4629      	mov	r1, r5
 800a814:	4638      	mov	r0, r7
 800a816:	f7ff ff6f 	bl	800a6f8 <__ssputs_r>
 800a81a:	3001      	adds	r0, #1
 800a81c:	f000 80a9 	beq.w	800a972 <_svfiprintf_r+0x1c6>
 800a820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a822:	445a      	add	r2, fp
 800a824:	9209      	str	r2, [sp, #36]	; 0x24
 800a826:	f89a 3000 	ldrb.w	r3, [sl]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 80a1 	beq.w	800a972 <_svfiprintf_r+0x1c6>
 800a830:	2300      	movs	r3, #0
 800a832:	f04f 32ff 	mov.w	r2, #4294967295
 800a836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a83a:	f10a 0a01 	add.w	sl, sl, #1
 800a83e:	9304      	str	r3, [sp, #16]
 800a840:	9307      	str	r3, [sp, #28]
 800a842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a846:	931a      	str	r3, [sp, #104]	; 0x68
 800a848:	4654      	mov	r4, sl
 800a84a:	2205      	movs	r2, #5
 800a84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a850:	4850      	ldr	r0, [pc, #320]	; (800a994 <_svfiprintf_r+0x1e8>)
 800a852:	f7f5 fcf5 	bl	8000240 <memchr>
 800a856:	9a04      	ldr	r2, [sp, #16]
 800a858:	b9d8      	cbnz	r0, 800a892 <_svfiprintf_r+0xe6>
 800a85a:	06d0      	lsls	r0, r2, #27
 800a85c:	bf44      	itt	mi
 800a85e:	2320      	movmi	r3, #32
 800a860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a864:	0711      	lsls	r1, r2, #28
 800a866:	bf44      	itt	mi
 800a868:	232b      	movmi	r3, #43	; 0x2b
 800a86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a86e:	f89a 3000 	ldrb.w	r3, [sl]
 800a872:	2b2a      	cmp	r3, #42	; 0x2a
 800a874:	d015      	beq.n	800a8a2 <_svfiprintf_r+0xf6>
 800a876:	9a07      	ldr	r2, [sp, #28]
 800a878:	4654      	mov	r4, sl
 800a87a:	2000      	movs	r0, #0
 800a87c:	f04f 0c0a 	mov.w	ip, #10
 800a880:	4621      	mov	r1, r4
 800a882:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a886:	3b30      	subs	r3, #48	; 0x30
 800a888:	2b09      	cmp	r3, #9
 800a88a:	d94d      	bls.n	800a928 <_svfiprintf_r+0x17c>
 800a88c:	b1b0      	cbz	r0, 800a8bc <_svfiprintf_r+0x110>
 800a88e:	9207      	str	r2, [sp, #28]
 800a890:	e014      	b.n	800a8bc <_svfiprintf_r+0x110>
 800a892:	eba0 0308 	sub.w	r3, r0, r8
 800a896:	fa09 f303 	lsl.w	r3, r9, r3
 800a89a:	4313      	orrs	r3, r2
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	46a2      	mov	sl, r4
 800a8a0:	e7d2      	b.n	800a848 <_svfiprintf_r+0x9c>
 800a8a2:	9b03      	ldr	r3, [sp, #12]
 800a8a4:	1d19      	adds	r1, r3, #4
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	9103      	str	r1, [sp, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bfbb      	ittet	lt
 800a8ae:	425b      	neglt	r3, r3
 800a8b0:	f042 0202 	orrlt.w	r2, r2, #2
 800a8b4:	9307      	strge	r3, [sp, #28]
 800a8b6:	9307      	strlt	r3, [sp, #28]
 800a8b8:	bfb8      	it	lt
 800a8ba:	9204      	strlt	r2, [sp, #16]
 800a8bc:	7823      	ldrb	r3, [r4, #0]
 800a8be:	2b2e      	cmp	r3, #46	; 0x2e
 800a8c0:	d10c      	bne.n	800a8dc <_svfiprintf_r+0x130>
 800a8c2:	7863      	ldrb	r3, [r4, #1]
 800a8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c6:	d134      	bne.n	800a932 <_svfiprintf_r+0x186>
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	1d1a      	adds	r2, r3, #4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	9203      	str	r2, [sp, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	bfb8      	it	lt
 800a8d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8d8:	3402      	adds	r4, #2
 800a8da:	9305      	str	r3, [sp, #20]
 800a8dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a9a4 <_svfiprintf_r+0x1f8>
 800a8e0:	7821      	ldrb	r1, [r4, #0]
 800a8e2:	2203      	movs	r2, #3
 800a8e4:	4650      	mov	r0, sl
 800a8e6:	f7f5 fcab 	bl	8000240 <memchr>
 800a8ea:	b138      	cbz	r0, 800a8fc <_svfiprintf_r+0x150>
 800a8ec:	9b04      	ldr	r3, [sp, #16]
 800a8ee:	eba0 000a 	sub.w	r0, r0, sl
 800a8f2:	2240      	movs	r2, #64	; 0x40
 800a8f4:	4082      	lsls	r2, r0
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	3401      	adds	r4, #1
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a900:	4825      	ldr	r0, [pc, #148]	; (800a998 <_svfiprintf_r+0x1ec>)
 800a902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a906:	2206      	movs	r2, #6
 800a908:	f7f5 fc9a 	bl	8000240 <memchr>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d038      	beq.n	800a982 <_svfiprintf_r+0x1d6>
 800a910:	4b22      	ldr	r3, [pc, #136]	; (800a99c <_svfiprintf_r+0x1f0>)
 800a912:	bb1b      	cbnz	r3, 800a95c <_svfiprintf_r+0x1b0>
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	3307      	adds	r3, #7
 800a918:	f023 0307 	bic.w	r3, r3, #7
 800a91c:	3308      	adds	r3, #8
 800a91e:	9303      	str	r3, [sp, #12]
 800a920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a922:	4433      	add	r3, r6
 800a924:	9309      	str	r3, [sp, #36]	; 0x24
 800a926:	e768      	b.n	800a7fa <_svfiprintf_r+0x4e>
 800a928:	fb0c 3202 	mla	r2, ip, r2, r3
 800a92c:	460c      	mov	r4, r1
 800a92e:	2001      	movs	r0, #1
 800a930:	e7a6      	b.n	800a880 <_svfiprintf_r+0xd4>
 800a932:	2300      	movs	r3, #0
 800a934:	3401      	adds	r4, #1
 800a936:	9305      	str	r3, [sp, #20]
 800a938:	4619      	mov	r1, r3
 800a93a:	f04f 0c0a 	mov.w	ip, #10
 800a93e:	4620      	mov	r0, r4
 800a940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a944:	3a30      	subs	r2, #48	; 0x30
 800a946:	2a09      	cmp	r2, #9
 800a948:	d903      	bls.n	800a952 <_svfiprintf_r+0x1a6>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0c6      	beq.n	800a8dc <_svfiprintf_r+0x130>
 800a94e:	9105      	str	r1, [sp, #20]
 800a950:	e7c4      	b.n	800a8dc <_svfiprintf_r+0x130>
 800a952:	fb0c 2101 	mla	r1, ip, r1, r2
 800a956:	4604      	mov	r4, r0
 800a958:	2301      	movs	r3, #1
 800a95a:	e7f0      	b.n	800a93e <_svfiprintf_r+0x192>
 800a95c:	ab03      	add	r3, sp, #12
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	462a      	mov	r2, r5
 800a962:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <_svfiprintf_r+0x1f4>)
 800a964:	a904      	add	r1, sp, #16
 800a966:	4638      	mov	r0, r7
 800a968:	f7fd fea2 	bl	80086b0 <_printf_float>
 800a96c:	1c42      	adds	r2, r0, #1
 800a96e:	4606      	mov	r6, r0
 800a970:	d1d6      	bne.n	800a920 <_svfiprintf_r+0x174>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	065b      	lsls	r3, r3, #25
 800a976:	f53f af2d 	bmi.w	800a7d4 <_svfiprintf_r+0x28>
 800a97a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a97c:	b01d      	add	sp, #116	; 0x74
 800a97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a982:	ab03      	add	r3, sp, #12
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	462a      	mov	r2, r5
 800a988:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <_svfiprintf_r+0x1f4>)
 800a98a:	a904      	add	r1, sp, #16
 800a98c:	4638      	mov	r0, r7
 800a98e:	f7fe f917 	bl	8008bc0 <_printf_i>
 800a992:	e7eb      	b.n	800a96c <_svfiprintf_r+0x1c0>
 800a994:	0800b6c4 	.word	0x0800b6c4
 800a998:	0800b6ce 	.word	0x0800b6ce
 800a99c:	080086b1 	.word	0x080086b1
 800a9a0:	0800a6f9 	.word	0x0800a6f9
 800a9a4:	0800b6ca 	.word	0x0800b6ca

0800a9a8 <__sflush_r>:
 800a9a8:	898a      	ldrh	r2, [r1, #12]
 800a9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	0710      	lsls	r0, r2, #28
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	d458      	bmi.n	800aa68 <__sflush_r+0xc0>
 800a9b6:	684b      	ldr	r3, [r1, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	dc05      	bgt.n	800a9c8 <__sflush_r+0x20>
 800a9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dc02      	bgt.n	800a9c8 <__sflush_r+0x20>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ca:	2e00      	cmp	r6, #0
 800a9cc:	d0f9      	beq.n	800a9c2 <__sflush_r+0x1a>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9d4:	682f      	ldr	r7, [r5, #0]
 800a9d6:	6a21      	ldr	r1, [r4, #32]
 800a9d8:	602b      	str	r3, [r5, #0]
 800a9da:	d032      	beq.n	800aa42 <__sflush_r+0x9a>
 800a9dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9de:	89a3      	ldrh	r3, [r4, #12]
 800a9e0:	075a      	lsls	r2, r3, #29
 800a9e2:	d505      	bpl.n	800a9f0 <__sflush_r+0x48>
 800a9e4:	6863      	ldr	r3, [r4, #4]
 800a9e6:	1ac0      	subs	r0, r0, r3
 800a9e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9ea:	b10b      	cbz	r3, 800a9f0 <__sflush_r+0x48>
 800a9ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9ee:	1ac0      	subs	r0, r0, r3
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9f6:	6a21      	ldr	r1, [r4, #32]
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	47b0      	blx	r6
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	d106      	bne.n	800aa10 <__sflush_r+0x68>
 800aa02:	6829      	ldr	r1, [r5, #0]
 800aa04:	291d      	cmp	r1, #29
 800aa06:	d82b      	bhi.n	800aa60 <__sflush_r+0xb8>
 800aa08:	4a29      	ldr	r2, [pc, #164]	; (800aab0 <__sflush_r+0x108>)
 800aa0a:	410a      	asrs	r2, r1
 800aa0c:	07d6      	lsls	r6, r2, #31
 800aa0e:	d427      	bmi.n	800aa60 <__sflush_r+0xb8>
 800aa10:	2200      	movs	r2, #0
 800aa12:	6062      	str	r2, [r4, #4]
 800aa14:	04d9      	lsls	r1, r3, #19
 800aa16:	6922      	ldr	r2, [r4, #16]
 800aa18:	6022      	str	r2, [r4, #0]
 800aa1a:	d504      	bpl.n	800aa26 <__sflush_r+0x7e>
 800aa1c:	1c42      	adds	r2, r0, #1
 800aa1e:	d101      	bne.n	800aa24 <__sflush_r+0x7c>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	b903      	cbnz	r3, 800aa26 <__sflush_r+0x7e>
 800aa24:	6560      	str	r0, [r4, #84]	; 0x54
 800aa26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa28:	602f      	str	r7, [r5, #0]
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	d0c9      	beq.n	800a9c2 <__sflush_r+0x1a>
 800aa2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa32:	4299      	cmp	r1, r3
 800aa34:	d002      	beq.n	800aa3c <__sflush_r+0x94>
 800aa36:	4628      	mov	r0, r5
 800aa38:	f7ff f9e2 	bl	8009e00 <_free_r>
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	6360      	str	r0, [r4, #52]	; 0x34
 800aa40:	e7c0      	b.n	800a9c4 <__sflush_r+0x1c>
 800aa42:	2301      	movs	r3, #1
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b0      	blx	r6
 800aa48:	1c41      	adds	r1, r0, #1
 800aa4a:	d1c8      	bne.n	800a9de <__sflush_r+0x36>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0c5      	beq.n	800a9de <__sflush_r+0x36>
 800aa52:	2b1d      	cmp	r3, #29
 800aa54:	d001      	beq.n	800aa5a <__sflush_r+0xb2>
 800aa56:	2b16      	cmp	r3, #22
 800aa58:	d101      	bne.n	800aa5e <__sflush_r+0xb6>
 800aa5a:	602f      	str	r7, [r5, #0]
 800aa5c:	e7b1      	b.n	800a9c2 <__sflush_r+0x1a>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	e7ad      	b.n	800a9c4 <__sflush_r+0x1c>
 800aa68:	690f      	ldr	r7, [r1, #16]
 800aa6a:	2f00      	cmp	r7, #0
 800aa6c:	d0a9      	beq.n	800a9c2 <__sflush_r+0x1a>
 800aa6e:	0793      	lsls	r3, r2, #30
 800aa70:	680e      	ldr	r6, [r1, #0]
 800aa72:	bf08      	it	eq
 800aa74:	694b      	ldreq	r3, [r1, #20]
 800aa76:	600f      	str	r7, [r1, #0]
 800aa78:	bf18      	it	ne
 800aa7a:	2300      	movne	r3, #0
 800aa7c:	eba6 0807 	sub.w	r8, r6, r7
 800aa80:	608b      	str	r3, [r1, #8]
 800aa82:	f1b8 0f00 	cmp.w	r8, #0
 800aa86:	dd9c      	ble.n	800a9c2 <__sflush_r+0x1a>
 800aa88:	6a21      	ldr	r1, [r4, #32]
 800aa8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa8c:	4643      	mov	r3, r8
 800aa8e:	463a      	mov	r2, r7
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b0      	blx	r6
 800aa94:	2800      	cmp	r0, #0
 800aa96:	dc06      	bgt.n	800aaa6 <__sflush_r+0xfe>
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa9e:	81a3      	strh	r3, [r4, #12]
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e78e      	b.n	800a9c4 <__sflush_r+0x1c>
 800aaa6:	4407      	add	r7, r0
 800aaa8:	eba8 0800 	sub.w	r8, r8, r0
 800aaac:	e7e9      	b.n	800aa82 <__sflush_r+0xda>
 800aaae:	bf00      	nop
 800aab0:	dfbffffe 	.word	0xdfbffffe

0800aab4 <_fflush_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	690b      	ldr	r3, [r1, #16]
 800aab8:	4605      	mov	r5, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	b913      	cbnz	r3, 800aac4 <_fflush_r+0x10>
 800aabe:	2500      	movs	r5, #0
 800aac0:	4628      	mov	r0, r5
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	b118      	cbz	r0, 800aace <_fflush_r+0x1a>
 800aac6:	6a03      	ldr	r3, [r0, #32]
 800aac8:	b90b      	cbnz	r3, 800aace <_fflush_r+0x1a>
 800aaca:	f7fe fa27 	bl	8008f1c <__sinit>
 800aace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d0f3      	beq.n	800aabe <_fflush_r+0xa>
 800aad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aad8:	07d0      	lsls	r0, r2, #31
 800aada:	d404      	bmi.n	800aae6 <_fflush_r+0x32>
 800aadc:	0599      	lsls	r1, r3, #22
 800aade:	d402      	bmi.n	800aae6 <_fflush_r+0x32>
 800aae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aae2:	f7fe fb88 	bl	80091f6 <__retarget_lock_acquire_recursive>
 800aae6:	4628      	mov	r0, r5
 800aae8:	4621      	mov	r1, r4
 800aaea:	f7ff ff5d 	bl	800a9a8 <__sflush_r>
 800aaee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaf0:	07da      	lsls	r2, r3, #31
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	d4e4      	bmi.n	800aac0 <_fflush_r+0xc>
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	059b      	lsls	r3, r3, #22
 800aafa:	d4e1      	bmi.n	800aac0 <_fflush_r+0xc>
 800aafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aafe:	f7fe fb7b 	bl	80091f8 <__retarget_lock_release_recursive>
 800ab02:	e7dd      	b.n	800aac0 <_fflush_r+0xc>

0800ab04 <memmove>:
 800ab04:	4288      	cmp	r0, r1
 800ab06:	b510      	push	{r4, lr}
 800ab08:	eb01 0402 	add.w	r4, r1, r2
 800ab0c:	d902      	bls.n	800ab14 <memmove+0x10>
 800ab0e:	4284      	cmp	r4, r0
 800ab10:	4623      	mov	r3, r4
 800ab12:	d807      	bhi.n	800ab24 <memmove+0x20>
 800ab14:	1e43      	subs	r3, r0, #1
 800ab16:	42a1      	cmp	r1, r4
 800ab18:	d008      	beq.n	800ab2c <memmove+0x28>
 800ab1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab22:	e7f8      	b.n	800ab16 <memmove+0x12>
 800ab24:	4402      	add	r2, r0
 800ab26:	4601      	mov	r1, r0
 800ab28:	428a      	cmp	r2, r1
 800ab2a:	d100      	bne.n	800ab2e <memmove+0x2a>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab36:	e7f7      	b.n	800ab28 <memmove+0x24>

0800ab38 <_sbrk_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d06      	ldr	r5, [pc, #24]	; (800ab54 <_sbrk_r+0x1c>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	f7f6 ff0e 	bl	8001964 <_sbrk>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_sbrk_r+0x1a>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_sbrk_r+0x1a>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	2000542c 	.word	0x2000542c

0800ab58 <__assert_func>:
 800ab58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab5a:	4614      	mov	r4, r2
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <__assert_func+0x2c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4605      	mov	r5, r0
 800ab64:	68d8      	ldr	r0, [r3, #12]
 800ab66:	b14c      	cbz	r4, 800ab7c <__assert_func+0x24>
 800ab68:	4b07      	ldr	r3, [pc, #28]	; (800ab88 <__assert_func+0x30>)
 800ab6a:	9100      	str	r1, [sp, #0]
 800ab6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab70:	4906      	ldr	r1, [pc, #24]	; (800ab8c <__assert_func+0x34>)
 800ab72:	462b      	mov	r3, r5
 800ab74:	f000 f872 	bl	800ac5c <fiprintf>
 800ab78:	f000 f882 	bl	800ac80 <abort>
 800ab7c:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <__assert_func+0x38>)
 800ab7e:	461c      	mov	r4, r3
 800ab80:	e7f3      	b.n	800ab6a <__assert_func+0x12>
 800ab82:	bf00      	nop
 800ab84:	20000098 	.word	0x20000098
 800ab88:	0800b6df 	.word	0x0800b6df
 800ab8c:	0800b6ec 	.word	0x0800b6ec
 800ab90:	0800b71a 	.word	0x0800b71a

0800ab94 <_calloc_r>:
 800ab94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab96:	fba1 2402 	umull	r2, r4, r1, r2
 800ab9a:	b94c      	cbnz	r4, 800abb0 <_calloc_r+0x1c>
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	9201      	str	r2, [sp, #4]
 800aba0:	f7ff f9a2 	bl	8009ee8 <_malloc_r>
 800aba4:	9a01      	ldr	r2, [sp, #4]
 800aba6:	4605      	mov	r5, r0
 800aba8:	b930      	cbnz	r0, 800abb8 <_calloc_r+0x24>
 800abaa:	4628      	mov	r0, r5
 800abac:	b003      	add	sp, #12
 800abae:	bd30      	pop	{r4, r5, pc}
 800abb0:	220c      	movs	r2, #12
 800abb2:	6002      	str	r2, [r0, #0]
 800abb4:	2500      	movs	r5, #0
 800abb6:	e7f8      	b.n	800abaa <_calloc_r+0x16>
 800abb8:	4621      	mov	r1, r4
 800abba:	f7fe fa48 	bl	800904e <memset>
 800abbe:	e7f4      	b.n	800abaa <_calloc_r+0x16>

0800abc0 <__ascii_mbtowc>:
 800abc0:	b082      	sub	sp, #8
 800abc2:	b901      	cbnz	r1, 800abc6 <__ascii_mbtowc+0x6>
 800abc4:	a901      	add	r1, sp, #4
 800abc6:	b142      	cbz	r2, 800abda <__ascii_mbtowc+0x1a>
 800abc8:	b14b      	cbz	r3, 800abde <__ascii_mbtowc+0x1e>
 800abca:	7813      	ldrb	r3, [r2, #0]
 800abcc:	600b      	str	r3, [r1, #0]
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	1e10      	subs	r0, r2, #0
 800abd2:	bf18      	it	ne
 800abd4:	2001      	movne	r0, #1
 800abd6:	b002      	add	sp, #8
 800abd8:	4770      	bx	lr
 800abda:	4610      	mov	r0, r2
 800abdc:	e7fb      	b.n	800abd6 <__ascii_mbtowc+0x16>
 800abde:	f06f 0001 	mvn.w	r0, #1
 800abe2:	e7f8      	b.n	800abd6 <__ascii_mbtowc+0x16>

0800abe4 <_realloc_r>:
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	4680      	mov	r8, r0
 800abea:	4614      	mov	r4, r2
 800abec:	460e      	mov	r6, r1
 800abee:	b921      	cbnz	r1, 800abfa <_realloc_r+0x16>
 800abf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abf4:	4611      	mov	r1, r2
 800abf6:	f7ff b977 	b.w	8009ee8 <_malloc_r>
 800abfa:	b92a      	cbnz	r2, 800ac08 <_realloc_r+0x24>
 800abfc:	f7ff f900 	bl	8009e00 <_free_r>
 800ac00:	4625      	mov	r5, r4
 800ac02:	4628      	mov	r0, r5
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	f000 f841 	bl	800ac8e <_malloc_usable_size_r>
 800ac0c:	4284      	cmp	r4, r0
 800ac0e:	4607      	mov	r7, r0
 800ac10:	d802      	bhi.n	800ac18 <_realloc_r+0x34>
 800ac12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac16:	d812      	bhi.n	800ac3e <_realloc_r+0x5a>
 800ac18:	4621      	mov	r1, r4
 800ac1a:	4640      	mov	r0, r8
 800ac1c:	f7ff f964 	bl	8009ee8 <_malloc_r>
 800ac20:	4605      	mov	r5, r0
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d0ed      	beq.n	800ac02 <_realloc_r+0x1e>
 800ac26:	42bc      	cmp	r4, r7
 800ac28:	4622      	mov	r2, r4
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	bf28      	it	cs
 800ac2e:	463a      	movcs	r2, r7
 800ac30:	f7fe fae3 	bl	80091fa <memcpy>
 800ac34:	4631      	mov	r1, r6
 800ac36:	4640      	mov	r0, r8
 800ac38:	f7ff f8e2 	bl	8009e00 <_free_r>
 800ac3c:	e7e1      	b.n	800ac02 <_realloc_r+0x1e>
 800ac3e:	4635      	mov	r5, r6
 800ac40:	e7df      	b.n	800ac02 <_realloc_r+0x1e>

0800ac42 <__ascii_wctomb>:
 800ac42:	b149      	cbz	r1, 800ac58 <__ascii_wctomb+0x16>
 800ac44:	2aff      	cmp	r2, #255	; 0xff
 800ac46:	bf85      	ittet	hi
 800ac48:	238a      	movhi	r3, #138	; 0x8a
 800ac4a:	6003      	strhi	r3, [r0, #0]
 800ac4c:	700a      	strbls	r2, [r1, #0]
 800ac4e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac52:	bf98      	it	ls
 800ac54:	2001      	movls	r0, #1
 800ac56:	4770      	bx	lr
 800ac58:	4608      	mov	r0, r1
 800ac5a:	4770      	bx	lr

0800ac5c <fiprintf>:
 800ac5c:	b40e      	push	{r1, r2, r3}
 800ac5e:	b503      	push	{r0, r1, lr}
 800ac60:	4601      	mov	r1, r0
 800ac62:	ab03      	add	r3, sp, #12
 800ac64:	4805      	ldr	r0, [pc, #20]	; (800ac7c <fiprintf+0x20>)
 800ac66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac6a:	6800      	ldr	r0, [r0, #0]
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	f000 f83f 	bl	800acf0 <_vfiprintf_r>
 800ac72:	b002      	add	sp, #8
 800ac74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac78:	b003      	add	sp, #12
 800ac7a:	4770      	bx	lr
 800ac7c:	20000098 	.word	0x20000098

0800ac80 <abort>:
 800ac80:	b508      	push	{r3, lr}
 800ac82:	2006      	movs	r0, #6
 800ac84:	f000 fa0c 	bl	800b0a0 <raise>
 800ac88:	2001      	movs	r0, #1
 800ac8a:	f7f6 fdf3 	bl	8001874 <_exit>

0800ac8e <_malloc_usable_size_r>:
 800ac8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac92:	1f18      	subs	r0, r3, #4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	bfbc      	itt	lt
 800ac98:	580b      	ldrlt	r3, [r1, r0]
 800ac9a:	18c0      	addlt	r0, r0, r3
 800ac9c:	4770      	bx	lr

0800ac9e <__sfputc_r>:
 800ac9e:	6893      	ldr	r3, [r2, #8]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	b410      	push	{r4}
 800aca6:	6093      	str	r3, [r2, #8]
 800aca8:	da08      	bge.n	800acbc <__sfputc_r+0x1e>
 800acaa:	6994      	ldr	r4, [r2, #24]
 800acac:	42a3      	cmp	r3, r4
 800acae:	db01      	blt.n	800acb4 <__sfputc_r+0x16>
 800acb0:	290a      	cmp	r1, #10
 800acb2:	d103      	bne.n	800acbc <__sfputc_r+0x1e>
 800acb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb8:	f000 b934 	b.w	800af24 <__swbuf_r>
 800acbc:	6813      	ldr	r3, [r2, #0]
 800acbe:	1c58      	adds	r0, r3, #1
 800acc0:	6010      	str	r0, [r2, #0]
 800acc2:	7019      	strb	r1, [r3, #0]
 800acc4:	4608      	mov	r0, r1
 800acc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acca:	4770      	bx	lr

0800accc <__sfputs_r>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	4606      	mov	r6, r0
 800acd0:	460f      	mov	r7, r1
 800acd2:	4614      	mov	r4, r2
 800acd4:	18d5      	adds	r5, r2, r3
 800acd6:	42ac      	cmp	r4, r5
 800acd8:	d101      	bne.n	800acde <__sfputs_r+0x12>
 800acda:	2000      	movs	r0, #0
 800acdc:	e007      	b.n	800acee <__sfputs_r+0x22>
 800acde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace2:	463a      	mov	r2, r7
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7ff ffda 	bl	800ac9e <__sfputc_r>
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	d1f3      	bne.n	800acd6 <__sfputs_r+0xa>
 800acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acf0 <_vfiprintf_r>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	460d      	mov	r5, r1
 800acf6:	b09d      	sub	sp, #116	; 0x74
 800acf8:	4614      	mov	r4, r2
 800acfa:	4698      	mov	r8, r3
 800acfc:	4606      	mov	r6, r0
 800acfe:	b118      	cbz	r0, 800ad08 <_vfiprintf_r+0x18>
 800ad00:	6a03      	ldr	r3, [r0, #32]
 800ad02:	b90b      	cbnz	r3, 800ad08 <_vfiprintf_r+0x18>
 800ad04:	f7fe f90a 	bl	8008f1c <__sinit>
 800ad08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad0a:	07d9      	lsls	r1, r3, #31
 800ad0c:	d405      	bmi.n	800ad1a <_vfiprintf_r+0x2a>
 800ad0e:	89ab      	ldrh	r3, [r5, #12]
 800ad10:	059a      	lsls	r2, r3, #22
 800ad12:	d402      	bmi.n	800ad1a <_vfiprintf_r+0x2a>
 800ad14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad16:	f7fe fa6e 	bl	80091f6 <__retarget_lock_acquire_recursive>
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	071b      	lsls	r3, r3, #28
 800ad1e:	d501      	bpl.n	800ad24 <_vfiprintf_r+0x34>
 800ad20:	692b      	ldr	r3, [r5, #16]
 800ad22:	b99b      	cbnz	r3, 800ad4c <_vfiprintf_r+0x5c>
 800ad24:	4629      	mov	r1, r5
 800ad26:	4630      	mov	r0, r6
 800ad28:	f000 f93a 	bl	800afa0 <__swsetup_r>
 800ad2c:	b170      	cbz	r0, 800ad4c <_vfiprintf_r+0x5c>
 800ad2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad30:	07dc      	lsls	r4, r3, #31
 800ad32:	d504      	bpl.n	800ad3e <_vfiprintf_r+0x4e>
 800ad34:	f04f 30ff 	mov.w	r0, #4294967295
 800ad38:	b01d      	add	sp, #116	; 0x74
 800ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3e:	89ab      	ldrh	r3, [r5, #12]
 800ad40:	0598      	lsls	r0, r3, #22
 800ad42:	d4f7      	bmi.n	800ad34 <_vfiprintf_r+0x44>
 800ad44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad46:	f7fe fa57 	bl	80091f8 <__retarget_lock_release_recursive>
 800ad4a:	e7f3      	b.n	800ad34 <_vfiprintf_r+0x44>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad50:	2320      	movs	r3, #32
 800ad52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad5a:	2330      	movs	r3, #48	; 0x30
 800ad5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800af10 <_vfiprintf_r+0x220>
 800ad60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad64:	f04f 0901 	mov.w	r9, #1
 800ad68:	4623      	mov	r3, r4
 800ad6a:	469a      	mov	sl, r3
 800ad6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad70:	b10a      	cbz	r2, 800ad76 <_vfiprintf_r+0x86>
 800ad72:	2a25      	cmp	r2, #37	; 0x25
 800ad74:	d1f9      	bne.n	800ad6a <_vfiprintf_r+0x7a>
 800ad76:	ebba 0b04 	subs.w	fp, sl, r4
 800ad7a:	d00b      	beq.n	800ad94 <_vfiprintf_r+0xa4>
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	4622      	mov	r2, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7ff ffa2 	bl	800accc <__sfputs_r>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	f000 80a9 	beq.w	800aee0 <_vfiprintf_r+0x1f0>
 800ad8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad90:	445a      	add	r2, fp
 800ad92:	9209      	str	r2, [sp, #36]	; 0x24
 800ad94:	f89a 3000 	ldrb.w	r3, [sl]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 80a1 	beq.w	800aee0 <_vfiprintf_r+0x1f0>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f04f 32ff 	mov.w	r2, #4294967295
 800ada4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ada8:	f10a 0a01 	add.w	sl, sl, #1
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	9307      	str	r3, [sp, #28]
 800adb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb4:	931a      	str	r3, [sp, #104]	; 0x68
 800adb6:	4654      	mov	r4, sl
 800adb8:	2205      	movs	r2, #5
 800adba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adbe:	4854      	ldr	r0, [pc, #336]	; (800af10 <_vfiprintf_r+0x220>)
 800adc0:	f7f5 fa3e 	bl	8000240 <memchr>
 800adc4:	9a04      	ldr	r2, [sp, #16]
 800adc6:	b9d8      	cbnz	r0, 800ae00 <_vfiprintf_r+0x110>
 800adc8:	06d1      	lsls	r1, r2, #27
 800adca:	bf44      	itt	mi
 800adcc:	2320      	movmi	r3, #32
 800adce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add2:	0713      	lsls	r3, r2, #28
 800add4:	bf44      	itt	mi
 800add6:	232b      	movmi	r3, #43	; 0x2b
 800add8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800addc:	f89a 3000 	ldrb.w	r3, [sl]
 800ade0:	2b2a      	cmp	r3, #42	; 0x2a
 800ade2:	d015      	beq.n	800ae10 <_vfiprintf_r+0x120>
 800ade4:	9a07      	ldr	r2, [sp, #28]
 800ade6:	4654      	mov	r4, sl
 800ade8:	2000      	movs	r0, #0
 800adea:	f04f 0c0a 	mov.w	ip, #10
 800adee:	4621      	mov	r1, r4
 800adf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf4:	3b30      	subs	r3, #48	; 0x30
 800adf6:	2b09      	cmp	r3, #9
 800adf8:	d94d      	bls.n	800ae96 <_vfiprintf_r+0x1a6>
 800adfa:	b1b0      	cbz	r0, 800ae2a <_vfiprintf_r+0x13a>
 800adfc:	9207      	str	r2, [sp, #28]
 800adfe:	e014      	b.n	800ae2a <_vfiprintf_r+0x13a>
 800ae00:	eba0 0308 	sub.w	r3, r0, r8
 800ae04:	fa09 f303 	lsl.w	r3, r9, r3
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	46a2      	mov	sl, r4
 800ae0e:	e7d2      	b.n	800adb6 <_vfiprintf_r+0xc6>
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	1d19      	adds	r1, r3, #4
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	9103      	str	r1, [sp, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bfbb      	ittet	lt
 800ae1c:	425b      	neglt	r3, r3
 800ae1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae22:	9307      	strge	r3, [sp, #28]
 800ae24:	9307      	strlt	r3, [sp, #28]
 800ae26:	bfb8      	it	lt
 800ae28:	9204      	strlt	r2, [sp, #16]
 800ae2a:	7823      	ldrb	r3, [r4, #0]
 800ae2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae2e:	d10c      	bne.n	800ae4a <_vfiprintf_r+0x15a>
 800ae30:	7863      	ldrb	r3, [r4, #1]
 800ae32:	2b2a      	cmp	r3, #42	; 0x2a
 800ae34:	d134      	bne.n	800aea0 <_vfiprintf_r+0x1b0>
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	1d1a      	adds	r2, r3, #4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	9203      	str	r2, [sp, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bfb8      	it	lt
 800ae42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae46:	3402      	adds	r4, #2
 800ae48:	9305      	str	r3, [sp, #20]
 800ae4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800af20 <_vfiprintf_r+0x230>
 800ae4e:	7821      	ldrb	r1, [r4, #0]
 800ae50:	2203      	movs	r2, #3
 800ae52:	4650      	mov	r0, sl
 800ae54:	f7f5 f9f4 	bl	8000240 <memchr>
 800ae58:	b138      	cbz	r0, 800ae6a <_vfiprintf_r+0x17a>
 800ae5a:	9b04      	ldr	r3, [sp, #16]
 800ae5c:	eba0 000a 	sub.w	r0, r0, sl
 800ae60:	2240      	movs	r2, #64	; 0x40
 800ae62:	4082      	lsls	r2, r0
 800ae64:	4313      	orrs	r3, r2
 800ae66:	3401      	adds	r4, #1
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae6e:	4829      	ldr	r0, [pc, #164]	; (800af14 <_vfiprintf_r+0x224>)
 800ae70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae74:	2206      	movs	r2, #6
 800ae76:	f7f5 f9e3 	bl	8000240 <memchr>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d03f      	beq.n	800aefe <_vfiprintf_r+0x20e>
 800ae7e:	4b26      	ldr	r3, [pc, #152]	; (800af18 <_vfiprintf_r+0x228>)
 800ae80:	bb1b      	cbnz	r3, 800aeca <_vfiprintf_r+0x1da>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	3307      	adds	r3, #7
 800ae86:	f023 0307 	bic.w	r3, r3, #7
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	9303      	str	r3, [sp, #12]
 800ae8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae90:	443b      	add	r3, r7
 800ae92:	9309      	str	r3, [sp, #36]	; 0x24
 800ae94:	e768      	b.n	800ad68 <_vfiprintf_r+0x78>
 800ae96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	2001      	movs	r0, #1
 800ae9e:	e7a6      	b.n	800adee <_vfiprintf_r+0xfe>
 800aea0:	2300      	movs	r3, #0
 800aea2:	3401      	adds	r4, #1
 800aea4:	9305      	str	r3, [sp, #20]
 800aea6:	4619      	mov	r1, r3
 800aea8:	f04f 0c0a 	mov.w	ip, #10
 800aeac:	4620      	mov	r0, r4
 800aeae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb2:	3a30      	subs	r2, #48	; 0x30
 800aeb4:	2a09      	cmp	r2, #9
 800aeb6:	d903      	bls.n	800aec0 <_vfiprintf_r+0x1d0>
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d0c6      	beq.n	800ae4a <_vfiprintf_r+0x15a>
 800aebc:	9105      	str	r1, [sp, #20]
 800aebe:	e7c4      	b.n	800ae4a <_vfiprintf_r+0x15a>
 800aec0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aec4:	4604      	mov	r4, r0
 800aec6:	2301      	movs	r3, #1
 800aec8:	e7f0      	b.n	800aeac <_vfiprintf_r+0x1bc>
 800aeca:	ab03      	add	r3, sp, #12
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	462a      	mov	r2, r5
 800aed0:	4b12      	ldr	r3, [pc, #72]	; (800af1c <_vfiprintf_r+0x22c>)
 800aed2:	a904      	add	r1, sp, #16
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7fd fbeb 	bl	80086b0 <_printf_float>
 800aeda:	4607      	mov	r7, r0
 800aedc:	1c78      	adds	r0, r7, #1
 800aede:	d1d6      	bne.n	800ae8e <_vfiprintf_r+0x19e>
 800aee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee2:	07d9      	lsls	r1, r3, #31
 800aee4:	d405      	bmi.n	800aef2 <_vfiprintf_r+0x202>
 800aee6:	89ab      	ldrh	r3, [r5, #12]
 800aee8:	059a      	lsls	r2, r3, #22
 800aeea:	d402      	bmi.n	800aef2 <_vfiprintf_r+0x202>
 800aeec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeee:	f7fe f983 	bl	80091f8 <__retarget_lock_release_recursive>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	065b      	lsls	r3, r3, #25
 800aef6:	f53f af1d 	bmi.w	800ad34 <_vfiprintf_r+0x44>
 800aefa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefc:	e71c      	b.n	800ad38 <_vfiprintf_r+0x48>
 800aefe:	ab03      	add	r3, sp, #12
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	462a      	mov	r2, r5
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <_vfiprintf_r+0x22c>)
 800af06:	a904      	add	r1, sp, #16
 800af08:	4630      	mov	r0, r6
 800af0a:	f7fd fe59 	bl	8008bc0 <_printf_i>
 800af0e:	e7e4      	b.n	800aeda <_vfiprintf_r+0x1ea>
 800af10:	0800b6c4 	.word	0x0800b6c4
 800af14:	0800b6ce 	.word	0x0800b6ce
 800af18:	080086b1 	.word	0x080086b1
 800af1c:	0800accd 	.word	0x0800accd
 800af20:	0800b6ca 	.word	0x0800b6ca

0800af24 <__swbuf_r>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	460e      	mov	r6, r1
 800af28:	4614      	mov	r4, r2
 800af2a:	4605      	mov	r5, r0
 800af2c:	b118      	cbz	r0, 800af36 <__swbuf_r+0x12>
 800af2e:	6a03      	ldr	r3, [r0, #32]
 800af30:	b90b      	cbnz	r3, 800af36 <__swbuf_r+0x12>
 800af32:	f7fd fff3 	bl	8008f1c <__sinit>
 800af36:	69a3      	ldr	r3, [r4, #24]
 800af38:	60a3      	str	r3, [r4, #8]
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	071a      	lsls	r2, r3, #28
 800af3e:	d525      	bpl.n	800af8c <__swbuf_r+0x68>
 800af40:	6923      	ldr	r3, [r4, #16]
 800af42:	b31b      	cbz	r3, 800af8c <__swbuf_r+0x68>
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	1a98      	subs	r0, r3, r2
 800af4a:	6963      	ldr	r3, [r4, #20]
 800af4c:	b2f6      	uxtb	r6, r6
 800af4e:	4283      	cmp	r3, r0
 800af50:	4637      	mov	r7, r6
 800af52:	dc04      	bgt.n	800af5e <__swbuf_r+0x3a>
 800af54:	4621      	mov	r1, r4
 800af56:	4628      	mov	r0, r5
 800af58:	f7ff fdac 	bl	800aab4 <_fflush_r>
 800af5c:	b9e0      	cbnz	r0, 800af98 <__swbuf_r+0x74>
 800af5e:	68a3      	ldr	r3, [r4, #8]
 800af60:	3b01      	subs	r3, #1
 800af62:	60a3      	str	r3, [r4, #8]
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	6022      	str	r2, [r4, #0]
 800af6a:	701e      	strb	r6, [r3, #0]
 800af6c:	6962      	ldr	r2, [r4, #20]
 800af6e:	1c43      	adds	r3, r0, #1
 800af70:	429a      	cmp	r2, r3
 800af72:	d004      	beq.n	800af7e <__swbuf_r+0x5a>
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	07db      	lsls	r3, r3, #31
 800af78:	d506      	bpl.n	800af88 <__swbuf_r+0x64>
 800af7a:	2e0a      	cmp	r6, #10
 800af7c:	d104      	bne.n	800af88 <__swbuf_r+0x64>
 800af7e:	4621      	mov	r1, r4
 800af80:	4628      	mov	r0, r5
 800af82:	f7ff fd97 	bl	800aab4 <_fflush_r>
 800af86:	b938      	cbnz	r0, 800af98 <__swbuf_r+0x74>
 800af88:	4638      	mov	r0, r7
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f806 	bl	800afa0 <__swsetup_r>
 800af94:	2800      	cmp	r0, #0
 800af96:	d0d5      	beq.n	800af44 <__swbuf_r+0x20>
 800af98:	f04f 37ff 	mov.w	r7, #4294967295
 800af9c:	e7f4      	b.n	800af88 <__swbuf_r+0x64>
	...

0800afa0 <__swsetup_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4b2a      	ldr	r3, [pc, #168]	; (800b04c <__swsetup_r+0xac>)
 800afa4:	4605      	mov	r5, r0
 800afa6:	6818      	ldr	r0, [r3, #0]
 800afa8:	460c      	mov	r4, r1
 800afaa:	b118      	cbz	r0, 800afb4 <__swsetup_r+0x14>
 800afac:	6a03      	ldr	r3, [r0, #32]
 800afae:	b90b      	cbnz	r3, 800afb4 <__swsetup_r+0x14>
 800afb0:	f7fd ffb4 	bl	8008f1c <__sinit>
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afba:	0718      	lsls	r0, r3, #28
 800afbc:	d422      	bmi.n	800b004 <__swsetup_r+0x64>
 800afbe:	06d9      	lsls	r1, r3, #27
 800afc0:	d407      	bmi.n	800afd2 <__swsetup_r+0x32>
 800afc2:	2309      	movs	r3, #9
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afca:	81a3      	strh	r3, [r4, #12]
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	e034      	b.n	800b03c <__swsetup_r+0x9c>
 800afd2:	0758      	lsls	r0, r3, #29
 800afd4:	d512      	bpl.n	800affc <__swsetup_r+0x5c>
 800afd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afd8:	b141      	cbz	r1, 800afec <__swsetup_r+0x4c>
 800afda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afde:	4299      	cmp	r1, r3
 800afe0:	d002      	beq.n	800afe8 <__swsetup_r+0x48>
 800afe2:	4628      	mov	r0, r5
 800afe4:	f7fe ff0c 	bl	8009e00 <_free_r>
 800afe8:	2300      	movs	r3, #0
 800afea:	6363      	str	r3, [r4, #52]	; 0x34
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aff2:	81a3      	strh	r3, [r4, #12]
 800aff4:	2300      	movs	r3, #0
 800aff6:	6063      	str	r3, [r4, #4]
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f043 0308 	orr.w	r3, r3, #8
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	b94b      	cbnz	r3, 800b01c <__swsetup_r+0x7c>
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b00e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b012:	d003      	beq.n	800b01c <__swsetup_r+0x7c>
 800b014:	4621      	mov	r1, r4
 800b016:	4628      	mov	r0, r5
 800b018:	f000 f884 	bl	800b124 <__smakebuf_r>
 800b01c:	89a0      	ldrh	r0, [r4, #12]
 800b01e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b022:	f010 0301 	ands.w	r3, r0, #1
 800b026:	d00a      	beq.n	800b03e <__swsetup_r+0x9e>
 800b028:	2300      	movs	r3, #0
 800b02a:	60a3      	str	r3, [r4, #8]
 800b02c:	6963      	ldr	r3, [r4, #20]
 800b02e:	425b      	negs	r3, r3
 800b030:	61a3      	str	r3, [r4, #24]
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	b943      	cbnz	r3, 800b048 <__swsetup_r+0xa8>
 800b036:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b03a:	d1c4      	bne.n	800afc6 <__swsetup_r+0x26>
 800b03c:	bd38      	pop	{r3, r4, r5, pc}
 800b03e:	0781      	lsls	r1, r0, #30
 800b040:	bf58      	it	pl
 800b042:	6963      	ldrpl	r3, [r4, #20]
 800b044:	60a3      	str	r3, [r4, #8]
 800b046:	e7f4      	b.n	800b032 <__swsetup_r+0x92>
 800b048:	2000      	movs	r0, #0
 800b04a:	e7f7      	b.n	800b03c <__swsetup_r+0x9c>
 800b04c:	20000098 	.word	0x20000098

0800b050 <_raise_r>:
 800b050:	291f      	cmp	r1, #31
 800b052:	b538      	push	{r3, r4, r5, lr}
 800b054:	4604      	mov	r4, r0
 800b056:	460d      	mov	r5, r1
 800b058:	d904      	bls.n	800b064 <_raise_r+0x14>
 800b05a:	2316      	movs	r3, #22
 800b05c:	6003      	str	r3, [r0, #0]
 800b05e:	f04f 30ff 	mov.w	r0, #4294967295
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b066:	b112      	cbz	r2, 800b06e <_raise_r+0x1e>
 800b068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b06c:	b94b      	cbnz	r3, 800b082 <_raise_r+0x32>
 800b06e:	4620      	mov	r0, r4
 800b070:	f000 f830 	bl	800b0d4 <_getpid_r>
 800b074:	462a      	mov	r2, r5
 800b076:	4601      	mov	r1, r0
 800b078:	4620      	mov	r0, r4
 800b07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b07e:	f000 b817 	b.w	800b0b0 <_kill_r>
 800b082:	2b01      	cmp	r3, #1
 800b084:	d00a      	beq.n	800b09c <_raise_r+0x4c>
 800b086:	1c59      	adds	r1, r3, #1
 800b088:	d103      	bne.n	800b092 <_raise_r+0x42>
 800b08a:	2316      	movs	r3, #22
 800b08c:	6003      	str	r3, [r0, #0]
 800b08e:	2001      	movs	r0, #1
 800b090:	e7e7      	b.n	800b062 <_raise_r+0x12>
 800b092:	2400      	movs	r4, #0
 800b094:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b098:	4628      	mov	r0, r5
 800b09a:	4798      	blx	r3
 800b09c:	2000      	movs	r0, #0
 800b09e:	e7e0      	b.n	800b062 <_raise_r+0x12>

0800b0a0 <raise>:
 800b0a0:	4b02      	ldr	r3, [pc, #8]	; (800b0ac <raise+0xc>)
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	6818      	ldr	r0, [r3, #0]
 800b0a6:	f7ff bfd3 	b.w	800b050 <_raise_r>
 800b0aa:	bf00      	nop
 800b0ac:	20000098 	.word	0x20000098

0800b0b0 <_kill_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4d07      	ldr	r5, [pc, #28]	; (800b0d0 <_kill_r+0x20>)
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	f7f6 fbc9 	bl	8001854 <_kill>
 800b0c2:	1c43      	adds	r3, r0, #1
 800b0c4:	d102      	bne.n	800b0cc <_kill_r+0x1c>
 800b0c6:	682b      	ldr	r3, [r5, #0]
 800b0c8:	b103      	cbz	r3, 800b0cc <_kill_r+0x1c>
 800b0ca:	6023      	str	r3, [r4, #0]
 800b0cc:	bd38      	pop	{r3, r4, r5, pc}
 800b0ce:	bf00      	nop
 800b0d0:	2000542c 	.word	0x2000542c

0800b0d4 <_getpid_r>:
 800b0d4:	f7f6 bbb6 	b.w	8001844 <_getpid>

0800b0d8 <__swhatbuf_r>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e0:	2900      	cmp	r1, #0
 800b0e2:	b096      	sub	sp, #88	; 0x58
 800b0e4:	4615      	mov	r5, r2
 800b0e6:	461e      	mov	r6, r3
 800b0e8:	da0d      	bge.n	800b106 <__swhatbuf_r+0x2e>
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0f0:	f04f 0100 	mov.w	r1, #0
 800b0f4:	bf0c      	ite	eq
 800b0f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0fa:	2340      	movne	r3, #64	; 0x40
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	6031      	str	r1, [r6, #0]
 800b100:	602b      	str	r3, [r5, #0]
 800b102:	b016      	add	sp, #88	; 0x58
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	466a      	mov	r2, sp
 800b108:	f000 f848 	bl	800b19c <_fstat_r>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	dbec      	blt.n	800b0ea <__swhatbuf_r+0x12>
 800b110:	9901      	ldr	r1, [sp, #4]
 800b112:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b116:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b11a:	4259      	negs	r1, r3
 800b11c:	4159      	adcs	r1, r3
 800b11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b122:	e7eb      	b.n	800b0fc <__swhatbuf_r+0x24>

0800b124 <__smakebuf_r>:
 800b124:	898b      	ldrh	r3, [r1, #12]
 800b126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b128:	079d      	lsls	r5, r3, #30
 800b12a:	4606      	mov	r6, r0
 800b12c:	460c      	mov	r4, r1
 800b12e:	d507      	bpl.n	800b140 <__smakebuf_r+0x1c>
 800b130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	6123      	str	r3, [r4, #16]
 800b138:	2301      	movs	r3, #1
 800b13a:	6163      	str	r3, [r4, #20]
 800b13c:	b002      	add	sp, #8
 800b13e:	bd70      	pop	{r4, r5, r6, pc}
 800b140:	ab01      	add	r3, sp, #4
 800b142:	466a      	mov	r2, sp
 800b144:	f7ff ffc8 	bl	800b0d8 <__swhatbuf_r>
 800b148:	9900      	ldr	r1, [sp, #0]
 800b14a:	4605      	mov	r5, r0
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7fe fecb 	bl	8009ee8 <_malloc_r>
 800b152:	b948      	cbnz	r0, 800b168 <__smakebuf_r+0x44>
 800b154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b158:	059a      	lsls	r2, r3, #22
 800b15a:	d4ef      	bmi.n	800b13c <__smakebuf_r+0x18>
 800b15c:	f023 0303 	bic.w	r3, r3, #3
 800b160:	f043 0302 	orr.w	r3, r3, #2
 800b164:	81a3      	strh	r3, [r4, #12]
 800b166:	e7e3      	b.n	800b130 <__smakebuf_r+0xc>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	6020      	str	r0, [r4, #0]
 800b16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b170:	81a3      	strh	r3, [r4, #12]
 800b172:	9b00      	ldr	r3, [sp, #0]
 800b174:	6163      	str	r3, [r4, #20]
 800b176:	9b01      	ldr	r3, [sp, #4]
 800b178:	6120      	str	r0, [r4, #16]
 800b17a:	b15b      	cbz	r3, 800b194 <__smakebuf_r+0x70>
 800b17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b180:	4630      	mov	r0, r6
 800b182:	f000 f81d 	bl	800b1c0 <_isatty_r>
 800b186:	b128      	cbz	r0, 800b194 <__smakebuf_r+0x70>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f023 0303 	bic.w	r3, r3, #3
 800b18e:	f043 0301 	orr.w	r3, r3, #1
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	431d      	orrs	r5, r3
 800b198:	81a5      	strh	r5, [r4, #12]
 800b19a:	e7cf      	b.n	800b13c <__smakebuf_r+0x18>

0800b19c <_fstat_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d07      	ldr	r5, [pc, #28]	; (800b1bc <_fstat_r+0x20>)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	f7f6 fbb2 	bl	8001912 <_fstat>
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	d102      	bne.n	800b1b8 <_fstat_r+0x1c>
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	b103      	cbz	r3, 800b1b8 <_fstat_r+0x1c>
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ba:	bf00      	nop
 800b1bc:	2000542c 	.word	0x2000542c

0800b1c0 <_isatty_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_isatty_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f6 fbb1 	bl	8001932 <_isatty>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_isatty_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_isatty_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	2000542c 	.word	0x2000542c

0800b1e0 <_init>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	bf00      	nop
 800b1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e6:	bc08      	pop	{r3}
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	4770      	bx	lr

0800b1ec <_fini>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	bf00      	nop
 800b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f2:	bc08      	pop	{r3}
 800b1f4:	469e      	mov	lr, r3
 800b1f6:	4770      	bx	lr
