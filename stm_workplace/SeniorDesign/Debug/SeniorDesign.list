
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca30  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cd0  0800cc30  0800cc30  0001cc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e900  0800e900  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e900  0800e900  0001e900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e908  0800e908  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e908  0800e908  0001e908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e90c  0800e90c  0001e90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000533c  200001e4  0800eaf4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005520  0800eaf4  00025520  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f95  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005046  00000000  00000000  000451ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d10  00000000  00000000  0004a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001671  00000000  00000000  0004bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0da  00000000  00000000  0004d5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024aec  00000000  00000000  0007a68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111cde  00000000  00000000  0009f177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b20  00000000  00000000  001b0e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b9978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cc18 	.word	0x0800cc18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800cc18 	.word	0x0800cc18

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f002 f943 	bl	80028a0 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f001 fa46 	bl	8001ab0 <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <readFlow>:
float readFlow(float voltage)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	ed87 0a01 	vstr	s0, [r7, #4]
	//	instFlow = roundf(instFlow);*/
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
 800063a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000678 <readFlow+0x48>
 800063e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000646:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800067c <readFlow+0x4c>
 800064a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000680 <readFlow+0x50>
 8000656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <readFlow+0x54>)
 800065c:	edc3 7a00 	vstr	s15, [r3]
	return instFlow;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <readFlow+0x54>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
}
 8000668:	eeb0 0a67 	vmov.f32	s0, s15
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	3f298953 	.word	0x3f298953
 800067c:	00000001 	.word	0x00000001
 8000680:	3ca3d70a 	.word	0x3ca3d70a
 8000684:	20000200 	.word	0x20000200

08000688 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800069c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80006cc <setFlowRate+0x44>
 80006a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80006d0 <setFlowRate+0x48>
 80006a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80006d4 <setFlowRate+0x4c>
 80006b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006b8:	eef0 7a66 	vmov.f32	s15, s13

}
 80006bc:	eeb0 0a67 	vmov.f32	s0, s15
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	3ca3d70a 	.word	0x3ca3d70a
 80006d0:	00000001 	.word	0x00000001
 80006d4:	3fc147ae 	.word	0x3fc147ae

080006d8 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
return;
 80006dc:	bf00      	nop
}
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <flowStateOpen>:
void flowStateOpen(void){
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
return;
 80006ea:	bf00      	nop
}
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <flowStateControl>:
void flowStateControl(void){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
return;
 80006f8:	bf00      	nop
}
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	pumpTestsParameters[0].currentState = &pumpTestsParameters[0].stateList[0];
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <main+0x68>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <main+0x68>)
 800070c:	60da      	str	r2, [r3, #12]
	pumpTestsParameters[1].currentState = &pumpTestsParameters[1].stateList[0];
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x68>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <main+0x6c>)
 8000712:	655a      	str	r2, [r3, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f001 fe95 	bl	8002442 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f838 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 f9b2 	bl	8000a84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000720:	f000 f952 	bl	80009c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000724:	f000 f980 	bl	8000a28 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000728:	f000 f8a2 	bl	8000870 <MX_ADC1_Init>
  MX_DAC_Init();
 800072c:	f000 f8da 	bl	80008e4 <MX_DAC_Init>
  MX_TIM10_Init();
 8000730:	f000 f902 	bl	8000938 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000734:	f000 f924 	bl	8000980 <MX_TIM11_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000738:	f006 f9e8 	bl	8006b0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <main+0x70>)
 800073e:	2100      	movs	r1, #0
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <main+0x74>)
 8000742:	f006 fa4d 	bl	8006be0 <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <main+0x78>)
 800074a:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 800074c:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <main+0x7c>)
 800074e:	2100      	movs	r1, #0
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <main+0x80>)
 8000752:	f006 fa45 	bl	8006be0 <osThreadNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <main+0x84>)
 800075a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <main+0x84>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fae3 	bl	8006d2c <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000766:	f006 fa05 	bl	8006b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x66>
 800076c:	20000890 	.word	0x20000890
 8000770:	200008d8 	.word	0x200008d8
 8000774:	0800cc74 	.word	0x0800cc74
 8000778:	08000cd9 	.word	0x08000cd9
 800077c:	20000888 	.word	0x20000888
 8000780:	0800cc98 	.word	0x0800cc98
 8000784:	08001915 	.word	0x08001915
 8000788:	2000088c 	.word	0x2000088c

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f009 fe7f 	bl	800a49e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f003 f8b8 	bl	8003924 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <SystemClock_Config+0xdc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <SystemClock_Config+0xdc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <SystemClock_Config+0xdc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <SystemClock_Config+0xe0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <SystemClock_Config+0xe0>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <SystemClock_Config+0xe0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f003 f8e5 	bl	80039e4 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000820:	f001 f946 	bl	8001ab0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000824:	f003 f88e 	bl	8003944 <HAL_PWREx_EnableOverDrive>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800082e:	f001 f93f 	bl	8001ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2103      	movs	r1, #3
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fb76 	bl	8003f40 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800085a:	f001 f929 	bl	8001ab0 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <MX_ADC1_Init+0x6c>)
 8000878:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_ADC1_Init+0x68>)
 800087c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000880:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_ADC1_Init+0x68>)
 800088a:	2201      	movs	r2, #1
 800088c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000890:	2201      	movs	r2, #1
 8000892:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_ADC1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <MX_ADC1_Init+0x70>)
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008be:	2201      	movs	r2, #1
 80008c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008c4:	f001 fe0e 	bl	80024e4 <HAL_ADC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80008ce:	f001 f8ef 	bl	8001ab0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000204 	.word	0x20000204
 80008dc:	40012000 	.word	0x40012000
 80008e0:	0f000001 	.word	0x0f000001

080008e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_DAC_Init+0x4c>)
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_DAC_Init+0x50>)
 80008f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_DAC_Init+0x4c>)
 80008fa:	f002 fb03 	bl	8002f04 <HAL_DAC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000904:	f001 f8d4 	bl	8001ab0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_DAC_Init+0x4c>)
 8000918:	f002 fbf1 	bl	80030fe <HAL_DAC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000922:	f001 f8c5 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000024c 	.word	0x2000024c
 8000934:	40007400 	.word	0x40007400

08000938 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_TIM10_Init+0x40>)
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <MX_TIM10_Init+0x44>)
 8000940:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48000 - 1;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_TIM10_Init+0x40>)
 8000944:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000948:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_TIM10_Init+0x40>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000 - 1;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_TIM10_Init+0x40>)
 8000952:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000956:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_TIM10_Init+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_TIM10_Init+0x40>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_TIM10_Init+0x40>)
 8000966:	f004 f96b 	bl	8004c40 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000970:	f001 f89e 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000260 	.word	0x20000260
 800097c:	40014400 	.word	0x40014400

08000980 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_TIM11_Init+0x40>)
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <MX_TIM11_Init+0x44>)
 8000988:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 48000;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_TIM11_Init+0x40>)
 800098c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000990:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_TIM11_Init+0x40>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_TIM11_Init+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_TIM11_Init+0x40>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_TIM11_Init+0x40>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM11_Init+0x40>)
 80009ac:	f004 f948 	bl	8004c40 <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80009b6:	f001 f87b 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200002ac 	.word	0x200002ac
 80009c4:	40014800 	.word	0x40014800

080009c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART3_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a0c:	f004 fc1c 	bl	8005248 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f001 f84b 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002f8 	.word	0x200002f8
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2206      	movs	r2, #6
 8000a38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	f002 fe11 	bl	8003692 <HAL_PCD_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a76:	f001 f81b 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000380 	.word	0x20000380

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7d      	ldr	r2, [pc, #500]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab2:	4b78      	ldr	r3, [pc, #480]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a77      	ldr	r2, [pc, #476]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b75      	ldr	r3, [pc, #468]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0320 	and.w	r3, r3, #32
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a71      	ldr	r2, [pc, #452]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b6c      	ldr	r3, [pc, #432]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6b      	ldr	r2, [pc, #428]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b66      	ldr	r3, [pc, #408]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a65      	ldr	r2, [pc, #404]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a5f      	ldr	r2, [pc, #380]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b5d      	ldr	r3, [pc, #372]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b57      	ldr	r3, [pc, #348]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000b42:	2200      	movs	r2, #0
 8000b44:	2137      	movs	r1, #55	; 0x37
 8000b46:	4854      	ldr	r0, [pc, #336]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b48:	f002 fd70 	bl	800362c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b52:	4852      	ldr	r0, [pc, #328]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000b54:	f002 fd6a 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	4850      	ldr	r0, [pc, #320]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000b5e:	f002 fd65 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	484a      	ldr	r0, [pc, #296]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b7a:	f002 fbab 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF4
                           PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000b7e:	2337      	movs	r3, #55	; 0x37
 8000b80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4840      	ldr	r0, [pc, #256]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b96:	f002 fb9d 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b9a:	2332      	movs	r3, #50	; 0x32
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000bb6:	f002 fb8d 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bba:	2386      	movs	r3, #134	; 0x86
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4834      	ldr	r0, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000bd6:	f002 fb7d 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bda:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	482a      	ldr	r0, [pc, #168]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000bf4:	f002 fb6e 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4821      	ldr	r0, [pc, #132]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000c16:	f002 fb5d 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c1a:	2340      	movs	r3, #64	; 0x40
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c32:	f002 fb4f 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c4a:	f002 fb43 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI3_Pin DI2_Pin DI1_Pin */
  GPIO_InitStruct.Pin = DI3_Pin|DI2_Pin|DI1_Pin;
 8000c4e:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000c64:	f002 fb36 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c86:	f002 fb25 	bl	80032d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40021400 	.word	0x40021400
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40021800 	.word	0x40021800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000

08000cac <resetTime>:
        //HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 5);
    }
}


void resetTime(){
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	seconds = 0;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <resetTime+0x20>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	minutes = 0;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <resetTime+0x24>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	hours = 0;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <resetTime+0x28>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	2000098c 	.word	0x2000098c
 8000cd0:	2000098b 	.word	0x2000098b
 8000cd4:	2000098a 	.word	0x2000098a

08000cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(pumpTestsParameters[pump].eNextState) {
 8000ce0:	4bc7      	ldr	r3, [pc, #796]	; (8001000 <StartDefaultTask+0x328>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4ac7      	ldr	r2, [pc, #796]	; (8001004 <StartDefaultTask+0x32c>)
 8000ce8:	460b      	mov	r3, r1
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3310      	adds	r3, #16
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b0f      	cmp	r3, #15
 8000cf8:	f200 85dc 	bhi.w	80018b4 <StartDefaultTask+0xbdc>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <StartDefaultTask+0x2c>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d45 	.word	0x08000d45
 8000d08:	08000e09 	.word	0x08000e09
 8000d0c:	08000e7d 	.word	0x08000e7d
 8000d10:	08001035 	.word	0x08001035
 8000d14:	080010d5 	.word	0x080010d5
 8000d18:	08001271 	.word	0x08001271
 8000d1c:	0800131d 	.word	0x0800131d
 8000d20:	080013ef 	.word	0x080013ef
 8000d24:	08001489 	.word	0x08001489
 8000d28:	08001583 	.word	0x08001583
 8000d2c:	08001625 	.word	0x08001625
 8000d30:	0800174f 	.word	0x0800174f
 8000d34:	080017bd 	.word	0x080017bd
 8000d38:	08001889 	.word	0x08001889
 8000d3c:	080018d1 	.word	0x080018d1
 8000d40:	08001893 	.word	0x08001893
	  			case START:
					volts = setFlowRate(0);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fc9f 	bl	8000688 <setFlowRate>
 8000d4a:	eef0 7a40 	vmov.f32	s15, s0
 8000d4e:	4bae      	ldr	r3, [pc, #696]	; (8001008 <StartDefaultTask+0x330>)
 8000d50:	edc3 7a00 	vstr	s15, [r3]
					dacSet(&hdac, DAC_CHANNEL_1, volts);
 8000d54:	4bac      	ldr	r3, [pc, #688]	; (8001008 <StartDefaultTask+0x330>)
 8000d56:	edd3 7a00 	vldr	s15, [r3]
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	2100      	movs	r1, #0
 8000d60:	48aa      	ldr	r0, [pc, #680]	; (800100c <StartDefaultTask+0x334>)
 8000d62:	f000 fead 	bl	8001ac0 <dacSet>

					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2101      	movs	r1, #1
 8000d6a:	48a9      	ldr	r0, [pc, #676]	; (8001010 <StartDefaultTask+0x338>)
 8000d6c:	f002 fc5e 	bl	800362c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2102      	movs	r1, #2
 8000d74:	48a6      	ldr	r0, [pc, #664]	; (8001010 <StartDefaultTask+0x338>)
 8000d76:	f002 fc59 	bl	800362c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	48a4      	ldr	r0, [pc, #656]	; (8001010 <StartDefaultTask+0x338>)
 8000d80:	f002 fc54 	bl	800362c <HAL_GPIO_WritePin>

//	  				osDelay(1000);


					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000d84:	4b9e      	ldr	r3, [pc, #632]	; (8001000 <StartDefaultTask+0x328>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	3310      	adds	r3, #16
 8000d94:	4a9b      	ldr	r2, [pc, #620]	; (8001004 <StartDefaultTask+0x32c>)
 8000d96:	1899      	adds	r1, r3, r2
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	489d      	ldr	r0, [pc, #628]	; (8001014 <StartDefaultTask+0x33c>)
 8000da0:	f004 faa0 	bl	80052e4 <HAL_UART_Transmit>

					// Receives State List
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[pump].stateList, 10, HAL_MAX_DELAY);
 8000da4:	4b96      	ldr	r3, [pc, #600]	; (8001000 <StartDefaultTask+0x328>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4a94      	ldr	r2, [pc, #592]	; (8001004 <StartDefaultTask+0x32c>)
 8000db4:	1899      	adds	r1, r3, r2
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	220a      	movs	r2, #10
 8000dbc:	4895      	ldr	r0, [pc, #596]	; (8001014 <StartDefaultTask+0x33c>)
 8000dbe:	f004 fb14 	bl	80053ea <HAL_UART_Receive>

	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000dc2:	4b8f      	ldr	r3, [pc, #572]	; (8001000 <StartDefaultTask+0x328>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	498e      	ldr	r1, [pc, #568]	; (8001004 <StartDefaultTask+0x32c>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	330c      	adds	r3, #12
 8000dd6:	6819      	ldr	r1, [r3, #0]
 8000dd8:	1c48      	adds	r0, r1, #1
 8000dda:	4c8a      	ldr	r4, [pc, #552]	; (8001004 <StartDefaultTask+0x32c>)
 8000ddc:	4613      	mov	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4423      	add	r3, r4
 8000de6:	330c      	adds	r3, #12
 8000de8:	6018      	str	r0, [r3, #0]
 8000dea:	4b85      	ldr	r3, [pc, #532]	; (8001000 <StartDefaultTask+0x328>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	7809      	ldrb	r1, [r1, #0]
 8000df2:	4a84      	ldr	r2, [pc, #528]	; (8001004 <StartDefaultTask+0x32c>)
 8000df4:	4603      	mov	r3, r0
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4403      	add	r3, r0
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3310      	adds	r3, #16
 8000e00:	460a      	mov	r2, r1
 8000e02:	701a      	strb	r2, [r3, #0]

	  				break;
 8000e04:	f000 bd6b 	b.w	80018de <StartDefaultTask+0xc06>
//	  				printMsg(msg, &huart3);



					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000e08:	4b7d      	ldr	r3, [pc, #500]	; (8001000 <StartDefaultTask+0x328>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4413      	add	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	3310      	adds	r3, #16
 8000e18:	4a7a      	ldr	r2, [pc, #488]	; (8001004 <StartDefaultTask+0x32c>)
 8000e1a:	1899      	adds	r1, r3, r2
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	2201      	movs	r2, #1
 8000e22:	487c      	ldr	r0, [pc, #496]	; (8001014 <StartDefaultTask+0x33c>)
 8000e24:	f004 fa5e 	bl	80052e4 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].VATI[0], 8, HAL_MAX_DELAY);
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	497a      	ldr	r1, [pc, #488]	; (8001018 <StartDefaultTask+0x340>)
 8000e30:	4878      	ldr	r0, [pc, #480]	; (8001014 <StartDefaultTask+0x33c>)
 8000e32:	f004 fada 	bl	80053ea <HAL_UART_Receive>

	  				flowStateClose();
 8000e36:	f7ff fc4f 	bl	80006d8 <flowStateClose>
	  				stepperOpen();
 8000e3a:	f000 fed5 	bl	8001be8 <stepperOpen>
	  				solenoidOpen();
 8000e3e:	f000 fec5 	bl	8001bcc <solenoidOpen>
	  				solenoidClose();
 8000e42:	f000 feca 	bl	8001bda <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000e46:	4875      	ldr	r0, [pc, #468]	; (800101c <StartDefaultTask+0x344>)
 8000e48:	f001 fa5e 	bl	8002308 <vacuumGaugeADC>

	  				pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
 8000e4c:	4b6c      	ldr	r3, [pc, #432]	; (8001000 <StartDefaultTask+0x328>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4a6c      	ldr	r2, [pc, #432]	; (8001004 <StartDefaultTask+0x32c>)
 8000e54:	460b      	mov	r3, r1
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3310      	adds	r3, #16
 8000e60:	2202      	movs	r2, #2
 8000e62:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8000e64:	486e      	ldr	r0, [pc, #440]	; (8001020 <StartDefaultTask+0x348>)
 8000e66:	f003 ff43 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 8000e6a:	f7ff ff1f 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 8000e6e:	4b6d      	ldr	r3, [pc, #436]	; (8001024 <StartDefaultTask+0x34c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 ff8e 	bl	8006d94 <osThreadResume>
	  				break;
 8000e78:	f000 bd31 	b.w	80018de <StartDefaultTask+0xc06>
	  			case VAC_ACHIEVMENT_TEST:
	  				volts = adcGet(&hadc1);
 8000e7c:	4867      	ldr	r0, [pc, #412]	; (800101c <StartDefaultTask+0x344>)
 8000e7e:	f000 fe53 	bl	8001b28 <adcGet>
 8000e82:	eef0 7a40 	vmov.f32	s15, s0
 8000e86:	4b60      	ldr	r3, [pc, #384]	; (8001008 <StartDefaultTask+0x330>)
 8000e88:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <StartDefaultTask+0x330>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	eeb0 0a67 	vmov.f32	s0, s15
 8000e96:	f001 fa5b 	bl	8002350 <readVacuum>
 8000e9a:	eef0 7a40 	vmov.f32	s15, s0
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <StartDefaultTask+0x350>)
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
	  				//sprintf(msg,"VAC_ACHIEVMENT_TEST Scanning\r\n");
	  				//printMsg(msg, &huart3);
	  				//osDelay(1000);


	  				if(vacuumScale <= (float)pumpTestsParameters[pump].VATI[6] / 1000.0){	// Success
 8000ea4:	4b60      	ldr	r3, [pc, #384]	; (8001028 <StartDefaultTask+0x350>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eae:	4b54      	ldr	r3, [pc, #336]	; (8001000 <StartDefaultTask+0x328>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4a53      	ldr	r2, [pc, #332]	; (8001004 <StartDefaultTask+0x32c>)
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	440b      	add	r3, r1
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3317      	adds	r3, #23
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ecc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ed0:	ed9f 4b49 	vldr	d4, [pc, #292]	; 8000ff8 <StartDefaultTask+0x320>
 8000ed4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000ed8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee0:	d829      	bhi.n	8000f36 <StartDefaultTask+0x25e>
//		  				sprintf(msg,"vacuum of 50 mTorr reached\r\n");
//		  				printMsg(msg, &huart3);
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8000ee2:	484f      	ldr	r0, [pc, #316]	; (8001020 <StartDefaultTask+0x348>)
 8000ee4:	f003 ff7c 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
		  				osThreadSuspend(sendDataHandle);
 8000ee8:	4b4e      	ldr	r3, [pc, #312]	; (8001024 <StartDefaultTask+0x34c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 ff1d 	bl	8006d2c <osThreadSuspend>
//		  				osDelay(1000);
		  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <StartDefaultTask+0x328>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4942      	ldr	r1, [pc, #264]	; (8001004 <StartDefaultTask+0x32c>)
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	330c      	adds	r3, #12
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	1c48      	adds	r0, r1, #1
 8000f0a:	4c3e      	ldr	r4, [pc, #248]	; (8001004 <StartDefaultTask+0x32c>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4423      	add	r3, r4
 8000f16:	330c      	adds	r3, #12
 8000f18:	6018      	str	r0, [r3, #0]
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <StartDefaultTask+0x328>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	7809      	ldrb	r1, [r1, #0]
 8000f22:	4a38      	ldr	r2, [pc, #224]	; (8001004 <StartDefaultTask+0x32c>)
 8000f24:	4603      	mov	r3, r0
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4403      	add	r3, r0
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3310      	adds	r3, #16
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	e05b      	b.n	8000fee <StartDefaultTask+0x316>
	  				}else if(25 >= pumpTestsParameters[pump].VATI[7]){	// if current temp is >= temp limit
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <StartDefaultTask+0x328>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4a31      	ldr	r2, [pc, #196]	; (8001004 <StartDefaultTask+0x32c>)
 8000f3e:	460b      	mov	r3, r1
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	3318      	adds	r3, #24
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b19      	cmp	r3, #25
 8000f4e:	d818      	bhi.n	8000f82 <StartDefaultTask+0x2aa>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <StartDefaultTask+0x328>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <StartDefaultTask+0x32c>)
 8000f58:	460b      	mov	r3, r1
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4413      	add	r3, r2
 8000f62:	3310      	adds	r3, #16
 8000f64:	220e      	movs	r2, #14
 8000f66:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <StartDefaultTask+0x328>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4a25      	ldr	r2, [pc, #148]	; (8001004 <StartDefaultTask+0x32c>)
 8000f70:	460b      	mov	r3, r1
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	440b      	add	r3, r1
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	3346      	adds	r3, #70	; 0x46
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e035      	b.n	8000fee <StartDefaultTask+0x316>
	  				}else if(pumpTestsParameters[pump].VATI[2] == hours && pumpTestsParameters[pump].VATI[3] == minutes){
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <StartDefaultTask+0x328>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <StartDefaultTask+0x32c>)
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	3313      	adds	r3, #19
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <StartDefaultTask+0x354>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d126      	bne.n	8000fee <StartDefaultTask+0x316>
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <StartDefaultTask+0x328>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <StartDefaultTask+0x32c>)
 8000fa8:	460b      	mov	r3, r1
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3314      	adds	r3, #20
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <StartDefaultTask+0x358>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d117      	bne.n	8000fee <StartDefaultTask+0x316>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <StartDefaultTask+0x328>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <StartDefaultTask+0x32c>)
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	3310      	adds	r3, #16
 8000fd2:	220e      	movs	r2, #14
 8000fd4:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <StartDefaultTask+0x328>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4a09      	ldr	r2, [pc, #36]	; (8001004 <StartDefaultTask+0x32c>)
 8000fde:	460b      	mov	r3, r1
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3346      	adds	r3, #70	; 0x46
 8000fea:	2202      	movs	r2, #2
 8000fec:	701a      	strb	r2, [r3, #0]
	  				}
//	  				else{
//	  					pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
//	  				}

	  				osDelay(100); // Checks condition every 100 ms
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f005 ff04 	bl	8006dfc <osDelay>

	  				break;
 8000ff4:	f000 bc73 	b.w	80018de <StartDefaultTask+0xc06>
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	408f4000 	.word	0x408f4000
 8001000:	20000920 	.word	0x20000920
 8001004:	20000890 	.word	0x20000890
 8001008:	20000924 	.word	0x20000924
 800100c:	2000024c 	.word	0x2000024c
 8001010:	40021400 	.word	0x40021400
 8001014:	200002f8 	.word	0x200002f8
 8001018:	200008a1 	.word	0x200008a1
 800101c:	20000204 	.word	0x20000204
 8001020:	20000260 	.word	0x20000260
 8001024:	2000088c 	.word	0x2000088c
 8001028:	2000092c 	.word	0x2000092c
 800102c:	2000098a 	.word	0x2000098a
 8001030:	2000098b 	.word	0x2000098b
//	  				sprintf(msg,"SPECIAL_TEST_INIT\r\n");
//	  				printMsg(msg, &huart3);
//	  				osDelay(1000);

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001034:	4bab      	ldr	r3, [pc, #684]	; (80012e4 <StartDefaultTask+0x60c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	3310      	adds	r3, #16
 8001044:	4aa8      	ldr	r2, [pc, #672]	; (80012e8 <StartDefaultTask+0x610>)
 8001046:	1899      	adds	r1, r3, r2
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2201      	movs	r2, #1
 800104e:	48a7      	ldr	r0, [pc, #668]	; (80012ec <StartDefaultTask+0x614>)
 8001050:	f004 f948 	bl	80052e4 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].STI[0], 13, HAL_MAX_DELAY);
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	220d      	movs	r2, #13
 800105a:	49a5      	ldr	r1, [pc, #660]	; (80012f0 <StartDefaultTask+0x618>)
 800105c:	48a3      	ldr	r0, [pc, #652]	; (80012ec <StartDefaultTask+0x614>)
 800105e:	f004 f9c4 	bl	80053ea <HAL_UART_Receive>

	  				flowStateControl();
 8001062:	f7ff fb47 	bl	80006f4 <flowStateControl>
	  				stepperOpen();
 8001066:	f000 fdbf 	bl	8001be8 <stepperOpen>
	  				solenoidOpen();
 800106a:	f000 fdaf 	bl	8001bcc <solenoidOpen>
	  				solenoidClose();
 800106e:	f000 fdb4 	bl	8001bda <solenoidClose>
	  				flowControllerADC(&hadc1);
 8001072:	48a0      	ldr	r0, [pc, #640]	; (80012f4 <StartDefaultTask+0x61c>)
 8001074:	f7ff faba 	bl	80005ec <flowControllerADC>


	  				pumpTestsParameters[pump].eNextState = SPECIAL_TEST;
 8001078:	4b9a      	ldr	r3, [pc, #616]	; (80012e4 <StartDefaultTask+0x60c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4a9a      	ldr	r2, [pc, #616]	; (80012e8 <StartDefaultTask+0x610>)
 8001080:	460b      	mov	r3, r1
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	3310      	adds	r3, #16
 800108c:	2204      	movs	r2, #4
 800108e:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8001090:	4899      	ldr	r0, [pc, #612]	; (80012f8 <StartDefaultTask+0x620>)
 8001092:	f003 fe2d 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 8001096:	f7ff fe09 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 800109a:	4b98      	ldr	r3, [pc, #608]	; (80012fc <StartDefaultTask+0x624>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 fe78 	bl	8006d94 <osThreadResume>
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].STI[8]));
 80010a4:	4b8f      	ldr	r3, [pc, #572]	; (80012e4 <StartDefaultTask+0x60c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4a8f      	ldr	r2, [pc, #572]	; (80012e8 <StartDefaultTask+0x610>)
 80010ac:	460b      	mov	r3, r1
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	3321      	adds	r3, #33	; 0x21
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fae4 	bl	8000688 <setFlowRate>
 80010c0:	eef0 7a40 	vmov.f32	s15, s0
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	2100      	movs	r1, #0
 80010ca:	488d      	ldr	r0, [pc, #564]	; (8001300 <StartDefaultTask+0x628>)
 80010cc:	f000 fcf8 	bl	8001ac0 <dacSet>
	  				break;
 80010d0:	f000 bc05 	b.w	80018de <StartDefaultTask+0xc06>
	  			case SPECIAL_TEST:
//	  				sprintf(msg,"SPECIAL_TEST Scanning\r\n");
//					printMsg(msg, &huart3);
//					osDelay(1000);

	  				flowControllerADC(&hadc1);
 80010d4:	4887      	ldr	r0, [pc, #540]	; (80012f4 <StartDefaultTask+0x61c>)
 80010d6:	f7ff fa89 	bl	80005ec <flowControllerADC>
					volts = adcGet(&hadc1);
 80010da:	4886      	ldr	r0, [pc, #536]	; (80012f4 <StartDefaultTask+0x61c>)
 80010dc:	f000 fd24 	bl	8001b28 <adcGet>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	4b87      	ldr	r3, [pc, #540]	; (8001304 <StartDefaultTask+0x62c>)
 80010e6:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 80010ea:	4b86      	ldr	r3, [pc, #536]	; (8001304 <StartDefaultTask+0x62c>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	f7ff fa9c 	bl	8000630 <readFlow>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	4b82      	ldr	r3, [pc, #520]	; (8001308 <StartDefaultTask+0x630>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]

					vacuumGaugeADC(&hadc1);
 8001102:	487c      	ldr	r0, [pc, #496]	; (80012f4 <StartDefaultTask+0x61c>)
 8001104:	f001 f900 	bl	8002308 <vacuumGaugeADC>
	  				volts = adcGet(&hadc1);
 8001108:	487a      	ldr	r0, [pc, #488]	; (80012f4 <StartDefaultTask+0x61c>)
 800110a:	f000 fd0d 	bl	8001b28 <adcGet>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
 8001112:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <StartDefaultTask+0x62c>)
 8001114:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 8001118:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <StartDefaultTask+0x62c>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	f001 f915 	bl	8002350 <readVacuum>
 8001126:	eef0 7a40 	vmov.f32	s15, s0
 800112a:	4b78      	ldr	r3, [pc, #480]	; (800130c <StartDefaultTask+0x634>)
 800112c:	edc3 7a00 	vstr	s15, [r3]

	  				if((uint8_t)flowRate == pumpTestsParameters[pump].STI[8]){	// success
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <StartDefaultTask+0x630>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113a:	edc7 7a00 	vstr	s15, [r7]
 800113e:	783b      	ldrb	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <StartDefaultTask+0x60c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	4967      	ldr	r1, [pc, #412]	; (80012e8 <StartDefaultTask+0x610>)
 800114a:	4603      	mov	r3, r0
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4403      	add	r3, r0
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	3321      	adds	r3, #33	; 0x21
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d129      	bne.n	80011b0 <StartDefaultTask+0x4d8>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 800115c:	4866      	ldr	r0, [pc, #408]	; (80012f8 <StartDefaultTask+0x620>)
 800115e:	f003 fe3f 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
						osThreadSuspend(sendDataHandle);
 8001162:	4b66      	ldr	r3, [pc, #408]	; (80012fc <StartDefaultTask+0x624>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f005 fde0 	bl	8006d2c <osThreadSuspend>
						pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 800116c:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <StartDefaultTask+0x60c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	495d      	ldr	r1, [pc, #372]	; (80012e8 <StartDefaultTask+0x610>)
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	330c      	adds	r3, #12
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	1c48      	adds	r0, r1, #1
 8001184:	4c58      	ldr	r4, [pc, #352]	; (80012e8 <StartDefaultTask+0x610>)
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4423      	add	r3, r4
 8001190:	330c      	adds	r3, #12
 8001192:	6018      	str	r0, [r3, #0]
 8001194:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <StartDefaultTask+0x60c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	7809      	ldrb	r1, [r1, #0]
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <StartDefaultTask+0x610>)
 800119e:	4603      	mov	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4403      	add	r3, r0
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	3310      	adds	r3, #16
 80011aa:	460a      	mov	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e05b      	b.n	8001268 <StartDefaultTask+0x590>
	  				}else if(25 >= pumpTestsParameters[pump].STI[7]){	// if current temp is >= temp limit
 80011b0:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <StartDefaultTask+0x60c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <StartDefaultTask+0x610>)
 80011b8:	460b      	mov	r3, r1
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	3320      	adds	r3, #32
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b19      	cmp	r3, #25
 80011c8:	d818      	bhi.n	80011fc <StartDefaultTask+0x524>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80011ca:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <StartDefaultTask+0x60c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4a45      	ldr	r2, [pc, #276]	; (80012e8 <StartDefaultTask+0x610>)
 80011d2:	460b      	mov	r3, r1
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	3310      	adds	r3, #16
 80011de:	220e      	movs	r2, #14
 80011e0:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <StartDefaultTask+0x60c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4a3f      	ldr	r2, [pc, #252]	; (80012e8 <StartDefaultTask+0x610>)
 80011ea:	460b      	mov	r3, r1
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	440b      	add	r3, r1
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	3346      	adds	r3, #70	; 0x46
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e035      	b.n	8001268 <StartDefaultTask+0x590>
	  				}else if(pumpTestsParameters[pump].STI[2] == hours && pumpTestsParameters[pump].STI[3] == minutes){
 80011fc:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <StartDefaultTask+0x60c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4a39      	ldr	r2, [pc, #228]	; (80012e8 <StartDefaultTask+0x610>)
 8001204:	460b      	mov	r3, r1
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	331b      	adds	r3, #27
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <StartDefaultTask+0x638>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d126      	bne.n	8001268 <StartDefaultTask+0x590>
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <StartDefaultTask+0x60c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <StartDefaultTask+0x610>)
 8001222:	460b      	mov	r3, r1
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	331c      	adds	r3, #28
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <StartDefaultTask+0x63c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d117      	bne.n	8001268 <StartDefaultTask+0x590>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <StartDefaultTask+0x60c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <StartDefaultTask+0x610>)
 8001240:	460b      	mov	r3, r1
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	3310      	adds	r3, #16
 800124c:	220e      	movs	r2, #14
 800124e:	701a      	strb	r2, [r3, #0]
						pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <StartDefaultTask+0x60c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <StartDefaultTask+0x610>)
 8001258:	460b      	mov	r3, r1
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	3346      	adds	r3, #70	; 0x46
 8001264:	2202      	movs	r2, #2
 8001266:	701a      	strb	r2, [r3, #0]
	  				}
	  				osDelay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f005 fdc7 	bl	8006dfc <osDelay>
					break;
 800126e:	e336      	b.n	80018de <StartDefaultTask+0xc06>
//	  				sprintf(msg,"open/close solenoids, open flow controller, open stepper motor\r\n");
//	  				printMsg(msg, &huart3);
//	  				osDelay(1000);

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <StartDefaultTask+0x60c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	3310      	adds	r3, #16
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <StartDefaultTask+0x610>)
 8001282:	1899      	adds	r1, r3, r2
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	2201      	movs	r2, #1
 800128a:	4818      	ldr	r0, [pc, #96]	; (80012ec <StartDefaultTask+0x614>)
 800128c:	f004 f82a 	bl	80052e4 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].WUI[0], 8, HAL_MAX_DELAY);
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	2208      	movs	r2, #8
 8001296:	4920      	ldr	r1, [pc, #128]	; (8001318 <StartDefaultTask+0x640>)
 8001298:	4814      	ldr	r0, [pc, #80]	; (80012ec <StartDefaultTask+0x614>)
 800129a:	f004 f8a6 	bl	80053ea <HAL_UART_Receive>

	  				flowStateOpen();
 800129e:	f7ff fa22 	bl	80006e6 <flowStateOpen>
	  				stepperOpen();
 80012a2:	f000 fca1 	bl	8001be8 <stepperOpen>
	  				solenoidOpen();
 80012a6:	f000 fc91 	bl	8001bcc <solenoidOpen>
	  				solenoidClose();
 80012aa:	f000 fc96 	bl	8001bda <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <StartDefaultTask+0x61c>)
 80012b0:	f001 f82a 	bl	8002308 <vacuumGaugeADC>

	  				pumpTestsParameters[pump].eNextState = WARM_UP;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <StartDefaultTask+0x60c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <StartDefaultTask+0x610>)
 80012bc:	460b      	mov	r3, r1
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	3310      	adds	r3, #16
 80012c8:	2206      	movs	r2, #6
 80012ca:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <StartDefaultTask+0x620>)
 80012ce:	f003 fd0f 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80012d2:	f7ff fceb 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <StartDefaultTask+0x624>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fd5a 	bl	8006d94 <osThreadResume>
	  				break;
 80012e0:	e2fd      	b.n	80018de <StartDefaultTask+0xc06>
 80012e2:	bf00      	nop
 80012e4:	20000920 	.word	0x20000920
 80012e8:	20000890 	.word	0x20000890
 80012ec:	200002f8 	.word	0x200002f8
 80012f0:	200008a9 	.word	0x200008a9
 80012f4:	20000204 	.word	0x20000204
 80012f8:	20000260 	.word	0x20000260
 80012fc:	2000088c 	.word	0x2000088c
 8001300:	2000024c 	.word	0x2000024c
 8001304:	20000924 	.word	0x20000924
 8001308:	20000928 	.word	0x20000928
 800130c:	2000092c 	.word	0x2000092c
 8001310:	2000098a 	.word	0x2000098a
 8001314:	2000098b 	.word	0x2000098b
 8001318:	200008b2 	.word	0x200008b2
//	  				sprintf(msg,"WARM_UP Scanning\r\n");
//	  				printMsg(msg, &huart3);
//	  				osDelay(1000);

	  				// record internal/external temperatures
	  				if(pumpTestsParameters[pump].WUI[2] == hours && pumpTestsParameters[pump].WUI[3] == minutes){
 800131c:	4bb4      	ldr	r3, [pc, #720]	; (80015f0 <StartDefaultTask+0x918>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	4ab4      	ldr	r2, [pc, #720]	; (80015f4 <StartDefaultTask+0x91c>)
 8001324:	460b      	mov	r3, r1
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	3324      	adds	r3, #36	; 0x24
 8001330:	781a      	ldrb	r2, [r3, #0]
 8001332:	4bb1      	ldr	r3, [pc, #708]	; (80015f8 <StartDefaultTask+0x920>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d138      	bne.n	80013ac <StartDefaultTask+0x6d4>
 800133a:	4bad      	ldr	r3, [pc, #692]	; (80015f0 <StartDefaultTask+0x918>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4aac      	ldr	r2, [pc, #688]	; (80015f4 <StartDefaultTask+0x91c>)
 8001342:	460b      	mov	r3, r1
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	3325      	adds	r3, #37	; 0x25
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	4baa      	ldr	r3, [pc, #680]	; (80015fc <StartDefaultTask+0x924>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d129      	bne.n	80013ac <StartDefaultTask+0x6d4>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001358:	48a9      	ldr	r0, [pc, #676]	; (8001600 <StartDefaultTask+0x928>)
 800135a:	f003 fd41 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 800135e:	4ba9      	ldr	r3, [pc, #676]	; (8001604 <StartDefaultTask+0x92c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fce2 	bl	8006d2c <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001368:	4ba1      	ldr	r3, [pc, #644]	; (80015f0 <StartDefaultTask+0x918>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	49a1      	ldr	r1, [pc, #644]	; (80015f4 <StartDefaultTask+0x91c>)
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	330c      	adds	r3, #12
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	1c48      	adds	r0, r1, #1
 8001380:	4c9c      	ldr	r4, [pc, #624]	; (80015f4 <StartDefaultTask+0x91c>)
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4423      	add	r3, r4
 800138c:	330c      	adds	r3, #12
 800138e:	6018      	str	r0, [r3, #0]
 8001390:	4b97      	ldr	r3, [pc, #604]	; (80015f0 <StartDefaultTask+0x918>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	7809      	ldrb	r1, [r1, #0]
 8001398:	4a96      	ldr	r2, [pc, #600]	; (80015f4 <StartDefaultTask+0x91c>)
 800139a:	4603      	mov	r3, r0
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4403      	add	r3, r0
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	3310      	adds	r3, #16
 80013a6:	460a      	mov	r2, r1
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e01c      	b.n	80013e6 <StartDefaultTask+0x70e>
	  				}else if(25 >= pumpTestsParameters[0].WUI[7]){	// if current temp is >= temp limit
 80013ac:	4b91      	ldr	r3, [pc, #580]	; (80015f4 <StartDefaultTask+0x91c>)
 80013ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80013b2:	2b19      	cmp	r3, #25
 80013b4:	d817      	bhi.n	80013e6 <StartDefaultTask+0x70e>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80013b6:	4b8e      	ldr	r3, [pc, #568]	; (80015f0 <StartDefaultTask+0x918>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4a8d      	ldr	r2, [pc, #564]	; (80015f4 <StartDefaultTask+0x91c>)
 80013be:	460b      	mov	r3, r1
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4413      	add	r3, r2
 80013c8:	3310      	adds	r3, #16
 80013ca:	220e      	movs	r2, #14
 80013cc:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <StartDefaultTask+0x918>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4a87      	ldr	r2, [pc, #540]	; (80015f4 <StartDefaultTask+0x91c>)
 80013d6:	460b      	mov	r3, r1
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	3346      	adds	r3, #70	; 0x46
 80013e2:	2202      	movs	r2, #2
 80013e4:	701a      	strb	r2, [r3, #0]
	  				}
//	  				else{
//	  					pumpTestsParameters[pump].eNextState = WARM_UP;
//	  				}
	  				osDelay(100);
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f005 fd08 	bl	8006dfc <osDelay>
	  				break;
 80013ec:	e277      	b.n	80018de <StartDefaultTask+0xc06>
//
//	  				flowStateControl();
//	  				dacVolts = setFlowRate(50);
//	  				dacSet(&hdac, DAC_CHANNEL_1, dacVolts);
					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80013ee:	4b80      	ldr	r3, [pc, #512]	; (80015f0 <StartDefaultTask+0x918>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	3310      	adds	r3, #16
 80013fe:	4a7d      	ldr	r2, [pc, #500]	; (80015f4 <StartDefaultTask+0x91c>)
 8001400:	1899      	adds	r1, r3, r2
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	2201      	movs	r2, #1
 8001408:	487f      	ldr	r0, [pc, #508]	; (8001608 <StartDefaultTask+0x930>)
 800140a:	f003 ff6b 	bl	80052e4 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].LTI[0], 8, HAL_MAX_DELAY);
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	2208      	movs	r2, #8
 8001414:	497d      	ldr	r1, [pc, #500]	; (800160c <StartDefaultTask+0x934>)
 8001416:	487c      	ldr	r0, [pc, #496]	; (8001608 <StartDefaultTask+0x930>)
 8001418:	f003 ffe7 	bl	80053ea <HAL_UART_Receive>

	  				stepperOpen();
 800141c:	f000 fbe4 	bl	8001be8 <stepperOpen>
	  				solenoidOpen();
 8001420:	f000 fbd4 	bl	8001bcc <solenoidOpen>
	  				solenoidClose();
 8001424:	f000 fbd9 	bl	8001bda <solenoidClose>
	  				flowControllerADC(&hadc1);
 8001428:	4879      	ldr	r0, [pc, #484]	; (8001610 <StartDefaultTask+0x938>)
 800142a:	f7ff f8df 	bl	80005ec <flowControllerADC>

	  				pumpTestsParameters[pump].eNextState = LOAD_TEST;
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <StartDefaultTask+0x918>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	4a6f      	ldr	r2, [pc, #444]	; (80015f4 <StartDefaultTask+0x91c>)
 8001436:	460b      	mov	r3, r1
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	3310      	adds	r3, #16
 8001442:	2208      	movs	r2, #8
 8001444:	701a      	strb	r2, [r3, #0]
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <StartDefaultTask+0x918>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4a69      	ldr	r2, [pc, #420]	; (80015f4 <StartDefaultTask+0x91c>)
 800144e:	460b      	mov	r3, r1
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	3332      	adds	r3, #50	; 0x32
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f913 	bl	8000688 <setFlowRate>
 8001462:	eef0 7a40 	vmov.f32	s15, s0
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	2100      	movs	r1, #0
 800146c:	4869      	ldr	r0, [pc, #420]	; (8001614 <StartDefaultTask+0x93c>)
 800146e:	f000 fb27 	bl	8001ac0 <dacSet>
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8001472:	4863      	ldr	r0, [pc, #396]	; (8001600 <StartDefaultTask+0x928>)
 8001474:	f003 fc3c 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 8001478:	f7ff fc18 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <StartDefaultTask+0x92c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f005 fc87 	bl	8006d94 <osThreadResume>

	  				break;
 8001486:	e22a      	b.n	80018de <StartDefaultTask+0xc06>
	  			case LOAD_TEST:
//	  				sprintf(msg,"LOAD_TEST Scanning\r\n");
//	  				printMsg(msg, &huart3);
//	  				osDelay(1000);

					volts = adcGet(&hadc1);
 8001488:	4861      	ldr	r0, [pc, #388]	; (8001610 <StartDefaultTask+0x938>)
 800148a:	f000 fb4d 	bl	8001b28 <adcGet>
 800148e:	eef0 7a40 	vmov.f32	s15, s0
 8001492:	4b61      	ldr	r3, [pc, #388]	; (8001618 <StartDefaultTask+0x940>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 8001498:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <StartDefaultTask+0x940>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	f7ff f8c5 	bl	8000630 <readFlow>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	4b5c      	ldr	r3, [pc, #368]	; (800161c <StartDefaultTask+0x944>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]

	  				if(pumpTestsParameters[pump].LTI[2] == hours && pumpTestsParameters[pump].LTI[3] == minutes){
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <StartDefaultTask+0x918>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <StartDefaultTask+0x91c>)
 80014b8:	460b      	mov	r3, r1
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	332c      	adds	r3, #44	; 0x2c
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <StartDefaultTask+0x920>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d138      	bne.n	8001540 <StartDefaultTask+0x868>
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <StartDefaultTask+0x918>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <StartDefaultTask+0x91c>)
 80014d6:	460b      	mov	r3, r1
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	332d      	adds	r3, #45	; 0x2d
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b45      	ldr	r3, [pc, #276]	; (80015fc <StartDefaultTask+0x924>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d129      	bne.n	8001540 <StartDefaultTask+0x868>
//	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80014ec:	4844      	ldr	r0, [pc, #272]	; (8001600 <StartDefaultTask+0x928>)
 80014ee:	f003 fc77 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <StartDefaultTask+0x92c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fc18 	bl	8006d2c <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 80014fc:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <StartDefaultTask+0x918>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	493c      	ldr	r1, [pc, #240]	; (80015f4 <StartDefaultTask+0x91c>)
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	330c      	adds	r3, #12
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	1c48      	adds	r0, r1, #1
 8001514:	4c37      	ldr	r4, [pc, #220]	; (80015f4 <StartDefaultTask+0x91c>)
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4423      	add	r3, r4
 8001520:	330c      	adds	r3, #12
 8001522:	6018      	str	r0, [r3, #0]
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <StartDefaultTask+0x918>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	7809      	ldrb	r1, [r1, #0]
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <StartDefaultTask+0x91c>)
 800152e:	4603      	mov	r3, r0
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4403      	add	r3, r0
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	3310      	adds	r3, #16
 800153a:	460a      	mov	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e01c      	b.n	800157a <StartDefaultTask+0x8a2>
	  				}else if(25 >= pumpTestsParameters[0].LTI[7]){	// if current temp is >= temp limit
 8001540:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <StartDefaultTask+0x91c>)
 8001542:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001546:	2b19      	cmp	r3, #25
 8001548:	d817      	bhi.n	800157a <StartDefaultTask+0x8a2>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <StartDefaultTask+0x918>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <StartDefaultTask+0x91c>)
 8001552:	460b      	mov	r3, r1
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4413      	add	r3, r2
 800155c:	3310      	adds	r3, #16
 800155e:	220e      	movs	r2, #14
 8001560:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <StartDefaultTask+0x918>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <StartDefaultTask+0x91c>)
 800156a:	460b      	mov	r3, r1
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	3346      	adds	r3, #70	; 0x46
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
	  				}
//	  				else{
//	  					pumpTestsParameters[pump].eNextState = LOAD_TEST;
//	  				}
	  				osDelay(100);
 800157a:	2064      	movs	r0, #100	; 0x64
 800157c:	f005 fc3e 	bl	8006dfc <osDelay>
	  				break;
 8001580:	e1ad      	b.n	80018de <StartDefaultTask+0xc06>
//	  				printMsg(msg, &huart3);
//	  				osDelay(1000);
//	  				pumpTestsParameters[pump].eNextState = OPERATION_TEST;

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <StartDefaultTask+0x918>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	3310      	adds	r3, #16
 8001592:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <StartDefaultTask+0x91c>)
 8001594:	1899      	adds	r1, r3, r2
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	2201      	movs	r2, #1
 800159c:	481a      	ldr	r0, [pc, #104]	; (8001608 <StartDefaultTask+0x930>)
 800159e:	f003 fea1 	bl	80052e4 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].OTI[0], 8, HAL_MAX_DELAY);
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	2208      	movs	r2, #8
 80015a8:	491d      	ldr	r1, [pc, #116]	; (8001620 <StartDefaultTask+0x948>)
 80015aa:	4817      	ldr	r0, [pc, #92]	; (8001608 <StartDefaultTask+0x930>)
 80015ac:	f003 ff1d 	bl	80053ea <HAL_UART_Receive>

	  				stepperOpen();
 80015b0:	f000 fb1a 	bl	8001be8 <stepperOpen>
	  				solenoidOpen();
 80015b4:	f000 fb0a 	bl	8001bcc <solenoidOpen>
	  				solenoidClose();
 80015b8:	f000 fb0f 	bl	8001bda <solenoidClose>
	  				flowControllerADC(&hadc1);
 80015bc:	4814      	ldr	r0, [pc, #80]	; (8001610 <StartDefaultTask+0x938>)
 80015be:	f7ff f815 	bl	80005ec <flowControllerADC>

	  				pumpTestsParameters[pump].eNextState = OPERATION_TEST;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <StartDefaultTask+0x918>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <StartDefaultTask+0x91c>)
 80015ca:	460b      	mov	r3, r1
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	3310      	adds	r3, #16
 80015d6:	220a      	movs	r2, #10
 80015d8:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80015da:	4809      	ldr	r0, [pc, #36]	; (8001600 <StartDefaultTask+0x928>)
 80015dc:	f003 fb88 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80015e0:	f7ff fb64 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <StartDefaultTask+0x92c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fbd3 	bl	8006d94 <osThreadResume>

	  				break;
 80015ee:	e176      	b.n	80018de <StartDefaultTask+0xc06>
 80015f0:	20000920 	.word	0x20000920
 80015f4:	20000890 	.word	0x20000890
 80015f8:	2000098a 	.word	0x2000098a
 80015fc:	2000098b 	.word	0x2000098b
 8001600:	20000260 	.word	0x20000260
 8001604:	2000088c 	.word	0x2000088c
 8001608:	200002f8 	.word	0x200002f8
 800160c:	200008ba 	.word	0x200008ba
 8001610:	20000204 	.word	0x20000204
 8001614:	2000024c 	.word	0x2000024c
 8001618:	20000924 	.word	0x20000924
 800161c:	20000928 	.word	0x20000928
 8001620:	200008c3 	.word	0x200008c3
//	  				printMsg(msg, &huart3);
//	  				osThreadResume(sendDataHandle);
//	  				osDelay(1000);
//	  				osThreadSuspend(sendDataHandle);

	  				flowControllerADC(&hadc1);
 8001624:	48af      	ldr	r0, [pc, #700]	; (80018e4 <StartDefaultTask+0xc0c>)
 8001626:	f7fe ffe1 	bl	80005ec <flowControllerADC>
					volts = adcGet(&hadc1);
 800162a:	48ae      	ldr	r0, [pc, #696]	; (80018e4 <StartDefaultTask+0xc0c>)
 800162c:	f000 fa7c 	bl	8001b28 <adcGet>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	4bac      	ldr	r3, [pc, #688]	; (80018e8 <StartDefaultTask+0xc10>)
 8001636:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 800163a:	4bab      	ldr	r3, [pc, #684]	; (80018e8 <StartDefaultTask+0xc10>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	f7fe fff4 	bl	8000630 <readFlow>
 8001648:	eef0 7a40 	vmov.f32	s15, s0
 800164c:	4ba7      	ldr	r3, [pc, #668]	; (80018ec <StartDefaultTask+0xc14>)
 800164e:	edc3 7a00 	vstr	s15, [r3]

					vacuumGaugeADC(&hadc1);
 8001652:	48a4      	ldr	r0, [pc, #656]	; (80018e4 <StartDefaultTask+0xc0c>)
 8001654:	f000 fe58 	bl	8002308 <vacuumGaugeADC>
					volts = adcGet(&hadc1);
 8001658:	48a2      	ldr	r0, [pc, #648]	; (80018e4 <StartDefaultTask+0xc0c>)
 800165a:	f000 fa65 	bl	8001b28 <adcGet>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	4ba1      	ldr	r3, [pc, #644]	; (80018e8 <StartDefaultTask+0xc10>)
 8001664:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(volts);
 8001668:	4b9f      	ldr	r3, [pc, #636]	; (80018e8 <StartDefaultTask+0xc10>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	f000 fe6d 	bl	8002350 <readVacuum>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	4b9d      	ldr	r3, [pc, #628]	; (80018f0 <StartDefaultTask+0xc18>)
 800167c:	edc3 7a00 	vstr	s15, [r3]

	  				if(pumpTestsParameters[pump].OTI[2] == hours && pumpTestsParameters[pump].OTI[3] == minutes){
 8001680:	4b9c      	ldr	r3, [pc, #624]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	4a9c      	ldr	r2, [pc, #624]	; (80018f8 <StartDefaultTask+0xc20>)
 8001688:	460b      	mov	r3, r1
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4413      	add	r3, r2
 8001692:	3335      	adds	r3, #53	; 0x35
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b99      	ldr	r3, [pc, #612]	; (80018fc <StartDefaultTask+0xc24>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d138      	bne.n	8001710 <StartDefaultTask+0xa38>
 800169e:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <StartDefaultTask+0xc1c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4a94      	ldr	r2, [pc, #592]	; (80018f8 <StartDefaultTask+0xc20>)
 80016a6:	460b      	mov	r3, r1
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	3336      	adds	r3, #54	; 0x36
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <StartDefaultTask+0xc28>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d129      	bne.n	8001710 <StartDefaultTask+0xa38>
//	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80016bc:	4891      	ldr	r0, [pc, #580]	; (8001904 <StartDefaultTask+0xc2c>)
 80016be:	f003 fb8f 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 80016c2:	4b91      	ldr	r3, [pc, #580]	; (8001908 <StartDefaultTask+0xc30>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 fb30 	bl	8006d2c <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 80016cc:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <StartDefaultTask+0xc1c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4989      	ldr	r1, [pc, #548]	; (80018f8 <StartDefaultTask+0xc20>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	330c      	adds	r3, #12
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	1c48      	adds	r0, r1, #1
 80016e4:	4c84      	ldr	r4, [pc, #528]	; (80018f8 <StartDefaultTask+0xc20>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4423      	add	r3, r4
 80016f0:	330c      	adds	r3, #12
 80016f2:	6018      	str	r0, [r3, #0]
 80016f4:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <StartDefaultTask+0xc1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	7809      	ldrb	r1, [r1, #0]
 80016fc:	4a7e      	ldr	r2, [pc, #504]	; (80018f8 <StartDefaultTask+0xc20>)
 80016fe:	4603      	mov	r3, r0
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4403      	add	r3, r0
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	3310      	adds	r3, #16
 800170a:	460a      	mov	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]
	  				}else if(25 >= pumpTestsParameters[0].OTI[7]){	// if current temp is >= temp limit
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
	  				}

	  				break;
 800170e:	e0e2      	b.n	80018d6 <StartDefaultTask+0xbfe>
	  				}else if(25 >= pumpTestsParameters[0].OTI[7]){	// if current temp is >= temp limit
 8001710:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <StartDefaultTask+0xc20>)
 8001712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001716:	2b19      	cmp	r3, #25
 8001718:	f200 80dd 	bhi.w	80018d6 <StartDefaultTask+0xbfe>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 800171c:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <StartDefaultTask+0xc1c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4a75      	ldr	r2, [pc, #468]	; (80018f8 <StartDefaultTask+0xc20>)
 8001724:	460b      	mov	r3, r1
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	3310      	adds	r3, #16
 8001730:	220e      	movs	r2, #14
 8001732:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	4a6f      	ldr	r2, [pc, #444]	; (80018f8 <StartDefaultTask+0xc20>)
 800173c:	460b      	mov	r3, r1
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	3346      	adds	r3, #70	; 0x46
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
	  				break;
 800174c:	e0c3      	b.n	80018d6 <StartDefaultTask+0xbfe>
//	  				osThreadSuspend(sendDataHandle);
//	  				sprintf(msg,"ULTIMATE_MEASURE_TEST_INIT\r\n");
//	  				printMsg(msg, &huart3);
//					osDelay(1000);

	  				stepperOpen();
 800174e:	f000 fa4b 	bl	8001be8 <stepperOpen>
	  				solenoidOpen();
 8001752:	f000 fa3b 	bl	8001bcc <solenoidOpen>
	  				solenoidClose();
 8001756:	f000 fa40 	bl	8001bda <solenoidClose>
	  				flowControllerADC(&hadc1);
 800175a:	4862      	ldr	r0, [pc, #392]	; (80018e4 <StartDefaultTask+0xc0c>)
 800175c:	f7fe ff46 	bl	80005ec <flowControllerADC>

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4613      	mov	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	3310      	adds	r3, #16
 8001770:	4a61      	ldr	r2, [pc, #388]	; (80018f8 <StartDefaultTask+0xc20>)
 8001772:	1899      	adds	r1, r3, r2
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	2201      	movs	r2, #1
 800177a:	4864      	ldr	r0, [pc, #400]	; (800190c <StartDefaultTask+0xc34>)
 800177c:	f003 fdb2 	bl	80052e4 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].UMTI[0], 9, HAL_MAX_DELAY);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	2209      	movs	r2, #9
 8001786:	4962      	ldr	r1, [pc, #392]	; (8001910 <StartDefaultTask+0xc38>)
 8001788:	4860      	ldr	r0, [pc, #384]	; (800190c <StartDefaultTask+0xc34>)
 800178a:	f003 fe2e 	bl	80053ea <HAL_UART_Receive>

					pumpTestsParameters[pump].eNextState = ULTIMATE_MEASURE_TEST;
 800178e:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <StartDefaultTask+0xc20>)
 8001796:	460b      	mov	r3, r1
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	3310      	adds	r3, #16
 80017a2:	220c      	movs	r2, #12
 80017a4:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80017a6:	4857      	ldr	r0, [pc, #348]	; (8001904 <StartDefaultTask+0xc2c>)
 80017a8:	f003 faa2 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80017ac:	f7ff fa7e 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80017b0:	4b55      	ldr	r3, [pc, #340]	; (8001908 <StartDefaultTask+0xc30>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 faed 	bl	8006d94 <osThreadResume>

	  				break;
 80017ba:	e090      	b.n	80018de <StartDefaultTask+0xc06>
//	  				osThreadResume(sendDataHandle);
//	  				osDelay(1000);
//	  				osThreadSuspend(sendDataHandle);


	  				if(pumpTestsParameters[pump].UMTI[2] == hours && pumpTestsParameters[pump].UMTI[3] == minutes){
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <StartDefaultTask+0xc1c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <StartDefaultTask+0xc20>)
 80017c4:	460b      	mov	r3, r1
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	333e      	adds	r3, #62	; 0x3e
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <StartDefaultTask+0xc24>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d138      	bne.n	800184c <StartDefaultTask+0xb74>
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <StartDefaultTask+0xc1c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <StartDefaultTask+0xc20>)
 80017e2:	460b      	mov	r3, r1
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	333f      	adds	r3, #63	; 0x3f
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <StartDefaultTask+0xc28>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d129      	bne.n	800184c <StartDefaultTask+0xb74>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80017f8:	4842      	ldr	r0, [pc, #264]	; (8001904 <StartDefaultTask+0xc2c>)
 80017fa:	f003 faf1 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <StartDefaultTask+0xc30>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f005 fa92 	bl	8006d2c <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001808:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <StartDefaultTask+0xc1c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	493a      	ldr	r1, [pc, #232]	; (80018f8 <StartDefaultTask+0xc20>)
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	330c      	adds	r3, #12
 800181c:	6819      	ldr	r1, [r3, #0]
 800181e:	1c48      	adds	r0, r1, #1
 8001820:	4c35      	ldr	r4, [pc, #212]	; (80018f8 <StartDefaultTask+0xc20>)
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4423      	add	r3, r4
 800182c:	330c      	adds	r3, #12
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	7809      	ldrb	r1, [r1, #0]
 8001838:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <StartDefaultTask+0xc20>)
 800183a:	4603      	mov	r3, r0
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4403      	add	r3, r0
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	3310      	adds	r3, #16
 8001846:	460a      	mov	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
	  				}else if(25 >= pumpTestsParameters[0].UMTI[7]){	// if current temp is >= temp limit
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
	  				}
	  				break;
 800184a:	e047      	b.n	80018dc <StartDefaultTask+0xc04>
	  				}else if(25 >= pumpTestsParameters[0].UMTI[7]){	// if current temp is >= temp limit
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <StartDefaultTask+0xc20>)
 800184e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001852:	2b19      	cmp	r3, #25
 8001854:	d842      	bhi.n	80018dc <StartDefaultTask+0xc04>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4619      	mov	r1, r3
 800185c:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <StartDefaultTask+0xc20>)
 800185e:	460b      	mov	r3, r1
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	3310      	adds	r3, #16
 800186a:	220e      	movs	r2, #14
 800186c:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <StartDefaultTask+0xc20>)
 8001876:	460b      	mov	r3, r1
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	3346      	adds	r3, #70	; 0x46
 8001882:	2202      	movs	r2, #2
 8001884:	701a      	strb	r2, [r3, #0]
	  				break;
 8001886:	e029      	b.n	80018dc <StartDefaultTask+0xc04>
//	  				volts = adcGet(&hadc1);
//	  				vacuumScale = readVacuum(volts);
//	  				sprintf(msg, "Vacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r", volts, vacuumScale);
//	  				printMsg(msg, &huart3);
//	  				pumpTestsParameters[pump].eNextState = IDLE;
					osDelay(1000);
 8001888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800188c:	f005 fab6 	bl	8006dfc <osDelay>

	  				break;
 8001890:	e025      	b.n	80018de <StartDefaultTask+0xc06>
	  			case FAIL_STATE:
	  				break;
	  			case STOP:
	  				pumpTestsParameters[pump].eNextState = STOP;
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <StartDefaultTask+0xc1c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4619      	mov	r1, r3
 8001898:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <StartDefaultTask+0xc20>)
 800189a:	460b      	mov	r3, r1
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	3310      	adds	r3, #16
 80018a6:	220f      	movs	r2, #15
 80018a8:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 80018aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80018ae:	f000 fdf5 	bl	800249c <HAL_Delay>
	  				break;
 80018b2:	e014      	b.n	80018de <StartDefaultTask+0xc06>
	  			default:
	  				pumpTestsParameters[pump].eNextState = STOP;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <StartDefaultTask+0xc1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <StartDefaultTask+0xc20>)
 80018bc:	460b      	mov	r3, r1
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	3310      	adds	r3, #16
 80018c8:	220f      	movs	r2, #15
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	f7ff ba08 	b.w	8000ce0 <StartDefaultTask+0x8>
	  				break;
 80018d0:	bf00      	nop
 80018d2:	f7ff ba05 	b.w	8000ce0 <StartDefaultTask+0x8>
	  				break;
 80018d6:	bf00      	nop
 80018d8:	f7ff ba02 	b.w	8000ce0 <StartDefaultTask+0x8>
	  				break;
 80018dc:	bf00      	nop
	  switch(pumpTestsParameters[pump].eNextState) {
 80018de:	f7ff b9ff 	b.w	8000ce0 <StartDefaultTask+0x8>
 80018e2:	bf00      	nop
 80018e4:	20000204 	.word	0x20000204
 80018e8:	20000924 	.word	0x20000924
 80018ec:	20000928 	.word	0x20000928
 80018f0:	2000092c 	.word	0x2000092c
 80018f4:	20000920 	.word	0x20000920
 80018f8:	20000890 	.word	0x20000890
 80018fc:	2000098a 	.word	0x2000098a
 8001900:	2000098b 	.word	0x2000098b
 8001904:	20000260 	.word	0x20000260
 8001908:	2000088c 	.word	0x2000088c
 800190c:	200002f8 	.word	0x200002f8
 8001910:	200008cc 	.word	0x200008cc

08001914 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg,"Sending Data\r\n");
 800191c:	492b      	ldr	r1, [pc, #172]	; (80019cc <StartTask02+0xb8>)
 800191e:	482c      	ldr	r0, [pc, #176]	; (80019d0 <StartTask02+0xbc>)
 8001920:	f008 fd5a 	bl	800a3d8 <siprintf>
	printMsg(msg, &huart3);
 8001924:	492b      	ldr	r1, [pc, #172]	; (80019d4 <StartTask02+0xc0>)
 8001926:	482a      	ldr	r0, [pc, #168]	; (80019d0 <StartTask02+0xbc>)
 8001928:	f000 f93c 	bl	8001ba4 <printMsg>

    switch(pumpTestsParameters[pump].eNextState){
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <StartTask02+0xc4>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <StartTask02+0xc8>)
 8001934:	460b      	mov	r3, r1
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	3310      	adds	r3, #16
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	3b02      	subs	r3, #2
 8001944:	2b0a      	cmp	r3, #10
 8001946:	d83a      	bhi.n	80019be <StartTask02+0xaa>
 8001948:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <StartTask02+0x3c>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	0800197d 	.word	0x0800197d
 8001954:	080019bf 	.word	0x080019bf
 8001958:	080019bf 	.word	0x080019bf
 800195c:	080019bf 	.word	0x080019bf
 8001960:	080019bf 	.word	0x080019bf
 8001964:	080019bf 	.word	0x080019bf
 8001968:	080019bf 	.word	0x080019bf
 800196c:	080019bf 	.word	0x080019bf
 8001970:	080019bf 	.word	0x080019bf
 8001974:	080019bf 	.word	0x080019bf
 8001978:	080019bf 	.word	0x080019bf
    case VAC_ACHIEVMENT_TEST:
    	tx_buffer[0] = VAC_ACHIEVMENT_TEST;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <StartTask02+0xcc>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = PUMP1;
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <StartTask02+0xcc>)
 8001984:	2200      	movs	r2, #0
 8001986:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <StartTask02+0xd0>)
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <StartTask02+0xcc>)
 800198e:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <StartTask02+0xd4>)
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <StartTask02+0xcc>)
 8001996:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <StartTask02+0xd8>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <StartTask02+0xcc>)
 800199e:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <StartTask02+0xdc>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019aa:	edc7 7a00 	vstr	s15, [r7]
 80019ae:	783b      	ldrb	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <StartTask02+0xcc>)
 80019b4:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <StartTask02+0xcc>)
 80019b8:	2219      	movs	r2, #25
 80019ba:	719a      	strb	r2, [r3, #6]
    	break;
 80019bc:	e000      	b.n	80019c0 <StartTask02+0xac>
    case OPERATION_TEST:
    	break;
    case ULTIMATE_MEASURE_TEST:
    	break;
    default:
    	break;
 80019be:	bf00      	nop
    }
    osDelay(1000);
 80019c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c4:	f005 fa1a 	bl	8006dfc <osDelay>
	sprintf(msg,"Sending Data\r\n");
 80019c8:	e7a8      	b.n	800191c <StartTask02+0x8>
 80019ca:	bf00      	nop
 80019cc:	0800cc4c 	.word	0x0800cc4c
 80019d0:	20000930 	.word	0x20000930
 80019d4:	200002f8 	.word	0x200002f8
 80019d8:	20000920 	.word	0x20000920
 80019dc:	20000890 	.word	0x20000890
 80019e0:	20000974 	.word	0x20000974
 80019e4:	2000098a 	.word	0x2000098a
 80019e8:	2000098b 	.word	0x2000098b
 80019ec:	2000098c 	.word	0x2000098c
 80019f0:	2000092c 	.word	0x2000092c

080019f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a06:	f000 fd29 	bl	800245c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim10) { // This a timer period = 1 sec
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d11f      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x5e>
  		seconds++;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a1c:	701a      	strb	r2, [r3, #0]
  		if(seconds == 60){
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b3c      	cmp	r3, #60	; 0x3c
 8001a24:	d115      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x5e>
  			seconds = 0;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  			minutes++;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a36:	701a      	strb	r2, [r3, #0]
  			if(minutes == 60){
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b3c      	cmp	r3, #60	; 0x3c
 8001a3e:	d108      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x5e>
  				minutes = 0;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
  				hours++;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a50:	701a      	strb	r2, [r3, #0]
  			}
  		}
  	}
  if(htim == &htim11) { // This is for PWM
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d115      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x92>
	pulseCount++;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a64:	801a      	strh	r2, [r3, #0]
	if(pulseCount >= 3200){
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001a6e:	d306      	bcc.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x8a>
		//HAL_TIM_Base_Stop_IT(&htim7);
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 8001a70:	2110      	movs	r1, #16
 8001a72:	480e      	ldr	r0, [pc, #56]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a74:	f001 fdf3 	bl	800365e <HAL_GPIO_TogglePin>
		pulseCount = 0;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	801a      	strh	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_5);
 8001a7e:	2120      	movs	r1, #32
 8001a80:	480a      	ldr	r0, [pc, #40]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a82:	f001 fdec 	bl	800365e <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40001000 	.word	0x40001000
 8001a94:	20000260 	.word	0x20000260
 8001a98:	2000098c 	.word	0x2000098c
 8001a9c:	2000098b 	.word	0x2000098b
 8001aa0:	2000098a 	.word	0x2000098a
 8001aa4:	200002ac 	.word	0x200002ac
 8001aa8:	20000988 	.word	0x20000988
 8001aac:	40021400 	.word	0x40021400

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <Error_Handler+0x8>
 8001aba:	0000      	movs	r0, r0
 8001abc:	0000      	movs	r0, r0
	...

08001ac0 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f001 fa39 	bl	8002f48 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 8001ad6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ada:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ade:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001b10 <dacSet+0x50>
 8001ae2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ae6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001b18 <dacSet+0x58>
 8001aea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001af2:	ee17 2a90 	vmov	r2, s15
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <dacSet+0x60>)
 8001af8:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <dacSet+0x60>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f001 facc 	bl	80030a0 <HAL_DAC_SetValue>
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	66666666 	.word	0x66666666
 8001b14:	400a6666 	.word	0x400a6666
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40affe00 	.word	0x40affe00
 8001b20:	20000990 	.word	0x20000990
 8001b24:	00000000 	.word	0x00000000

08001b28 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fd1b 	bl	800256c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 8001b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fe18 	bl	8002770 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fea0 	bl	8002886 <HAL_ADC_GetValue>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <adcGet+0x70>)
 8001b4c:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <adcGet+0x70>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b5a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001b9c <adcGet+0x74>
 8001b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b66:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001b90 <adcGet+0x68>
 8001b6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <adcGet+0x78>)
 8001b74:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fdc5 	bl	8002708 <HAL_ADC_Stop>
	return adcVolts;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <adcGet+0x78>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	ee07 3a90 	vmov	s15, r3
}
 8001b86:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	66666666 	.word	0x66666666
 8001b94:	400a6666 	.word	0x400a6666
 8001b98:	20000994 	.word	0x20000994
 8001b9c:	457ff000 	.word	0x457ff000
 8001ba0:	20000998 	.word	0x20000998

08001ba4 <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char* str, UART_HandleTypeDef *huart2){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fb96 	bl	80002e0 <strlen>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f003 fb90 	bl	80052e4 <HAL_UART_Transmit>
	return;
 8001bc4:	bf00      	nop
}
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <solenoidOpen>:
    // Now you can use buffer as a string
    //HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOpen(){
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 1);	// 3.3 V
	return;
 8001bd0:	bf00      	nop
}
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <solenoidClose>:
void solenoidClose(){
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 0);	// gnd
	return;
 8001bde:	bf00      	nop
}
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <stepperOpen>:
// Public Functions		------------------------------------------------//

void stepperClose(){
}

void stepperOpen(){
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	210f      	movs	r1, #15
 8001c32:	f06f 0001 	mvn.w	r0, #1
 8001c36:	f001 f93b 	bl	8002eb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a21      	ldr	r2, [pc, #132]	; (8001cec <HAL_ADC_MspInit+0xa4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d13b      	bne.n	8001ce2 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_ADC_MspInit+0xa8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cb2:	2360      	movs	r3, #96	; 0x60
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <HAL_ADC_MspInit+0xac>)
 8001cc6:	f001 fb05 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <HAL_ADC_MspInit+0xb0>)
 8001cde:	f001 faf9 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40012000 	.word	0x40012000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400

08001cfc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_DAC_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_DAC_MspInit+0x88>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_DAC_MspInit+0x88>)
 8001d24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_DAC_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_DAC_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_DAC_MspInit+0x88>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_DAC_MspInit+0x88>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d4e:	2310      	movs	r3, #16
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d52:	2303      	movs	r3, #3
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4809      	ldr	r0, [pc, #36]	; (8001d88 <HAL_DAC_MspInit+0x8c>)
 8001d62:	f001 fab7 	bl	80032d4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	210f      	movs	r1, #15
 8001d6a:	2036      	movs	r0, #54	; 0x36
 8001d6c:	f001 f8a0 	bl	8002eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d70:	2036      	movs	r0, #54	; 0x36
 8001d72:	f001 f8b9 	bl	8002ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40007400 	.word	0x40007400
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <HAL_TIM_Base_MspInit+0x78>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d114      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_TIM_Base_MspInit+0x7c>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_TIM_Base_MspInit+0x7c>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_TIM_Base_MspInit+0x7c>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2105      	movs	r1, #5
 8001dba:	2019      	movs	r0, #25
 8001dbc:	f001 f878 	bl	8002eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dc0:	2019      	movs	r0, #25
 8001dc2:	f001 f891 	bl	8002ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001dc6:	e018      	b.n	8001dfa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM11)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_TIM_Base_MspInit+0x80>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d113      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_TIM_Base_MspInit+0x7c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_TIM_Base_MspInit+0x7c>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_TIM_Base_MspInit+0x7c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2105      	movs	r1, #5
 8001dee:	201a      	movs	r0, #26
 8001df0:	f001 f85e 	bl	8002eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001df4:	201a      	movs	r0, #26
 8001df6:	f001 f877 	bl	8002ee8 <HAL_NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40014400 	.word	0x40014400
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40014800 	.word	0x40014800

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0ae      	sub	sp, #184	; 0xb8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2290      	movs	r2, #144	; 0x90
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f008 fb34 	bl	800a49e <memset>
  if(huart->Instance==USART3)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <HAL_UART_MspInit+0xc4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d144      	bne.n	8001eca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 face 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e5a:	f7ff fe29 	bl	8001ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_UART_MspInit+0xc8>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_UART_MspInit+0xc8>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_UART_MspInit+0xc8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_UART_MspInit+0xc8>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_UART_MspInit+0xc8>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_UART_MspInit+0xc8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4809      	ldr	r0, [pc, #36]	; (8001edc <HAL_UART_MspInit+0xcc>)
 8001eb6:	f001 fa0d 	bl	80032d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2105      	movs	r1, #5
 8001ebe:	2027      	movs	r0, #39	; 0x27
 8001ec0:	f000 fff6 	bl	8002eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ec4:	2027      	movs	r0, #39	; 0x27
 8001ec6:	f001 f80f 	bl	8002ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eca:	bf00      	nop
 8001ecc:	37b8      	adds	r7, #184	; 0xb8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40004800 	.word	0x40004800
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020c00 	.word	0x40020c00

08001ee0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0ae      	sub	sp, #184	; 0xb8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2290      	movs	r2, #144	; 0x90
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f008 facc 	bl	800a49e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0e:	d159      	bne.n	8001fc4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fa65 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001f2c:	f7ff fdc0 	bl	8001ab0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f62:	230a      	movs	r3, #10
 8001f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4818      	ldr	r0, [pc, #96]	; (8001fd0 <HAL_PCD_MspInit+0xf0>)
 8001f70:	f001 f9b0 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_PCD_MspInit+0xf0>)
 8001f90:	f001 f9a0 	bl	80032d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_PCD_MspInit+0xec>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001fc4:	bf00      	nop
 8001fc6:	37b8      	adds	r7, #184	; 0xb8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	; 0x38
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <HAL_InitTick+0xe0>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <HAL_InitTick+0xe0>)
 8001fea:	f043 0310 	orr.w	r3, r3, #16
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <HAL_InitTick+0xe0>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ffc:	f107 0210 	add.w	r2, r7, #16
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f002 f9c0 	bl	800438c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002016:	f002 f991 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 800201a:	6378      	str	r0, [r7, #52]	; 0x34
 800201c:	e004      	b.n	8002028 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800201e:	f002 f98d 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8002022:	4603      	mov	r3, r0
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_InitTick+0xe4>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	0c9b      	lsrs	r3, r3, #18
 8002032:	3b01      	subs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_InitTick+0xe8>)
 8002038:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <HAL_InitTick+0xec>)
 800203a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <HAL_InitTick+0xe8>)
 800203e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002042:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002044:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <HAL_InitTick+0xe8>)
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_InitTick+0xe8>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_InitTick+0xe8>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_InitTick+0xe8>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800205c:	4817      	ldr	r0, [pc, #92]	; (80020bc <HAL_InitTick+0xe8>)
 800205e:	f002 fdef 	bl	8004c40 <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11b      	bne.n	80020a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002070:	4812      	ldr	r0, [pc, #72]	; (80020bc <HAL_InitTick+0xe8>)
 8002072:	f002 fe3d 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800207c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002080:	2b00      	cmp	r3, #0
 8002082:	d111      	bne.n	80020a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002084:	2036      	movs	r0, #54	; 0x36
 8002086:	f000 ff2f 	bl	8002ee8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d808      	bhi.n	80020a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	2036      	movs	r0, #54	; 0x36
 8002096:	f000 ff0b 	bl	8002eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_InitTick+0xf0>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e002      	b.n	80020a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3738      	adds	r7, #56	; 0x38
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	431bde83 	.word	0x431bde83
 80020bc:	2000099c 	.word	0x2000099c
 80020c0:	40001000 	.word	0x40001000
 80020c4:	20000010 	.word	0x20000010

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler+0x4>

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020fa:	f002 fea0 	bl	8004e3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000260 	.word	0x20000260

08002108 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800210e:	f002 fe96 	bl	8004e3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200002ac 	.word	0x200002ac

0800211c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <USART3_IRQHandler+0x10>)
 8002122:	f003 fa27 	bl	8005574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200002f8 	.word	0x200002f8

08002130 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <TIM6_DAC_IRQHandler+0x20>)
 8002136:	791b      	ldrb	r3, [r3, #4]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800213e:	4804      	ldr	r0, [pc, #16]	; (8002150 <TIM6_DAC_IRQHandler+0x20>)
 8002140:	f000 ff54 	bl	8002fec <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <TIM6_DAC_IRQHandler+0x24>)
 8002146:	f002 fe7a 	bl	8004e3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000024c 	.word	0x2000024c
 8002154:	2000099c 	.word	0x2000099c

08002158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return 1;
 800215c:	2301      	movs	r3, #1
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_kill>:

int _kill(int pid, int sig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002172:	f008 fa3d 	bl	800a5f0 <__errno>
 8002176:	4603      	mov	r3, r0
 8002178:	2216      	movs	r2, #22
 800217a:	601a      	str	r2, [r3, #0]
  return -1;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_exit>:

void _exit (int status)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ffe7 	bl	8002168 <_kill>
  while (1) {}    /* Make sure we hang here */
 800219a:	e7fe      	b.n	800219a <_exit+0x12>

0800219c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e00a      	b.n	80021c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ae:	f3af 8000 	nop.w
 80021b2:	4601      	mov	r1, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf0      	blt.n	80021ae <_read+0x12>
  }

  return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e009      	b.n	80021fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf1      	blt.n	80021e8 <_write+0x12>
  }
  return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_close>:

int _close(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002236:	605a      	str	r2, [r3, #4]
  return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_isatty>:

int _isatty(int file)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f008 f9a2 	bl	800a5f0 <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20080000 	.word	0x20080000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	200009e8 	.word	0x200009e8
 80022e0:	20005520 	.word	0x20005520

080022e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 800231e:	2306      	movs	r3, #6
 8002320:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002322:	2301      	movs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002326:	2301      	movs	r3, #1
 8002328:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fab5 	bl	80028a0 <HAL_ADC_ConfigChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 800233c:	f7ff fbb8 	bl	8001ab0 <Error_Handler>
	}
	return;
 8002340:	bf00      	nop
 8002342:	bf00      	nop
}
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	0000      	movs	r0, r0
 800234c:	0000      	movs	r0, r0
	...

08002350 <readVacuum>:

float readVacuum(float voltage){
 8002350:	b580      	push	{r7, lr}
 8002352:	ed2d 8b02 	vpush	{d8}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	ed87 0a01 	vstr	s0, [r7, #4]

	float exponent = (voltage * 3.13 - referenceVoltage)/scalingFactor;
 800235e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002362:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002366:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80023d8 <readVacuum+0x88>
 800236a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <readVacuum+0x90>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002378:	ee36 5b47 	vsub.f64	d5, d6, d7
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <readVacuum+0x94>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002386:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800238a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800238e:	edc7 7a03 	vstr	s15, [r7, #12]
	pressure = referencePressure * pow(10, exponent);
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <readVacuum+0x98>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800239c:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023a4:	eeb0 1b47 	vmov.f64	d1, d7
 80023a8:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80023ac:	f00a f974 	bl	800c698 <pow>
 80023b0:	eeb0 7b40 	vmov.f64	d7, d0
 80023b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80023b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <readVacuum+0x9c>)
 80023be:	edc3 7a00 	vstr	s15, [r3]

	return pressure;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <readVacuum+0x9c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	ee07 3a90 	vmov	s15, r3
}
 80023ca:	eeb0 0a67 	vmov.f32	s0, s15
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	ecbd 8b02 	vpop	{d8}
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	70a3d70a 	.word	0x70a3d70a
 80023dc:	40090a3d 	.word	0x40090a3d
 80023e0:	20000008 	.word	0x20000008
 80023e4:	2000000c 	.word	0x2000000c
 80023e8:	20000004 	.word	0x20000004
 80023ec:	200009ec 	.word	0x200009ec

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023f6:	490e      	ldr	r1, [pc, #56]	; (8002430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800240c:	4c0b      	ldr	r4, [pc, #44]	; (800243c <LoopFillZerobss+0x26>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241a:	f7ff ff63 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f008 f8ed 	bl	800a5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7fe f96f 	bl	8000704 <main>
  bx  lr    
 8002426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002428:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002434:	0800e910 	.word	0x0800e910
  ldr r2, =_sbss
 8002438:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800243c:	20005520 	.word	0x20005520

08002440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC_IRQHandler>

08002442 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002446:	2003      	movs	r0, #3
 8002448:	f000 fd27 	bl	8002e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244c:	200f      	movs	r0, #15
 800244e:	f7ff fdc1 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002452:	f7ff fbd1 	bl	8001bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x20>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x24>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_IncTick+0x24>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000014 	.word	0x20000014
 8002480:	200009f0 	.word	0x200009f0

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200009f0 	.word	0x200009f0

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff ffee 	bl	8002484 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d005      	beq.n	80024c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_Delay+0x44>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c2:	bf00      	nop
 80024c4:	f7ff ffde 	bl	8002484 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d8f7      	bhi.n	80024c4 <HAL_Delay+0x28>
  {
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000014 	.word	0x20000014

080024e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e031      	b.n	800255e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fba0 	bl	8001c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_ADC_Init+0x84>)
 8002528:	4013      	ands	r3, r2
 800252a:	f043 0202 	orr.w	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fb0a 	bl	8002b4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f023 0303 	bic.w	r3, r3, #3
 8002546:	f043 0201 	orr.w	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
 800254e:	e001      	b.n	8002554 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	ffffeefd 	.word	0xffffeefd

0800256c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Start+0x1a>
 8002582:	2302      	movs	r3, #2
 8002584:	e0ad      	b.n	80026e2 <HAL_ADC_Start+0x176>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d018      	beq.n	80025ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_ADC_Start+0x184>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a50      	ldr	r2, [pc, #320]	; (80026f4 <HAL_ADC_Start+0x188>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0c9a      	lsrs	r2, r3, #18
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80025c0:	e002      	b.n	80025c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f9      	bne.n	80025c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d175      	bne.n	80026c8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e0:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <HAL_ADC_Start+0x18c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002602:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d106      	bne.n	8002626 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f023 0206 	bic.w	r2, r3, #6
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
 8002624:	e002      	b.n	800262c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800263c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_ADC_Start+0x190>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d143      	bne.n	80026e0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	e03a      	b.n	80026e0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a24      	ldr	r2, [pc, #144]	; (8002700 <HAL_ADC_Start+0x194>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10e      	bne.n	8002692 <HAL_ADC_Start+0x126>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002690:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_ADC_Start+0x190>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d120      	bne.n	80026e0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_ADC_Start+0x198>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d11b      	bne.n	80026e0 <HAL_ADC_Start+0x174>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d114      	bne.n	80026e0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	e00b      	b.n	80026e0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0210 	orr.w	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000000 	.word	0x20000000
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	fffff8fe 	.word	0xfffff8fe
 80026fc:	40012300 	.word	0x40012300
 8002700:	40012000 	.word	0x40012000
 8002704:	40012200 	.word	0x40012200

08002708 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADC_Stop+0x16>
 800271a:	2302      	movs	r3, #2
 800271c:	e01f      	b.n	800275e <HAL_ADC_Stop+0x56>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_ADC_Stop+0x64>)
 800274a:	4013      	ands	r3, r2
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	ffffeefe 	.word	0xffffeefe

08002770 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278c:	d113      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d10b      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e063      	b.n	800287e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027b6:	f7ff fe65 	bl	8002484 <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027bc:	e021      	b.n	8002802 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d01d      	beq.n	8002802 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_ADC_PollForConversion+0x6c>
 80027cc:	f7ff fe5a 	bl	8002484 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d212      	bcs.n	8002802 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d00b      	beq.n	8002802 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e03d      	b.n	800287e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b02      	cmp	r3, #2
 800280e:	d1d6      	bne.n	80027be <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0212 	mvn.w	r2, #18
 8002818:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d123      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11f      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e136      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x28a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b09      	cmp	r3, #9
 80028ca:	d93a      	bls.n	8002942 <HAL_ADC_ConfigChannel+0xa2>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028d4:	d035      	beq.n	8002942 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68d9      	ldr	r1, [r3, #12]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	3b1e      	subs	r3, #30
 80028ec:	2207      	movs	r2, #7
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	400a      	ands	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a8d      	ldr	r2, [pc, #564]	; (8002b38 <HAL_ADC_ConfigChannel+0x298>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68d9      	ldr	r1, [r3, #12]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	061a      	lsls	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800291a:	e035      	b.n	8002988 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68d9      	ldr	r1, [r3, #12]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	4603      	mov	r3, r0
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4403      	add	r3, r0
 8002934:	3b1e      	subs	r3, #30
 8002936:	409a      	lsls	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002940:	e022      	b.n	8002988 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6919      	ldr	r1, [r3, #16]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43da      	mvns	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	400a      	ands	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6919      	ldr	r1, [r3, #16]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	4603      	mov	r3, r0
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4403      	add	r3, r0
 800297e:	409a      	lsls	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b06      	cmp	r3, #6
 800298e:	d824      	bhi.n	80029da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b05      	subs	r3, #5
 80029a2:	221f      	movs	r2, #31
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43da      	mvns	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	400a      	ands	r2, r1
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b05      	subs	r3, #5
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34
 80029d8:	e04c      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d824      	bhi.n	8002a2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	3b23      	subs	r3, #35	; 0x23
 80029f4:	221f      	movs	r2, #31
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	400a      	ands	r2, r1
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	4618      	mov	r0, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b23      	subs	r3, #35	; 0x23
 8002a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	e023      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b41      	subs	r3, #65	; 0x41
 8002a3e:	221f      	movs	r2, #31
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43da      	mvns	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3b41      	subs	r3, #65	; 0x41
 8002a68:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <HAL_ADC_ConfigChannel+0x29c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1f4>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_ADC_ConfigChannel+0x29c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10f      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x21e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d10b      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ab0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002abc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_ADC_ConfigChannel+0x29c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d12b      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x280>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_ADC_ConfigChannel+0x298>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x23a>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b11      	cmp	r3, #17
 8002ad8:	d122      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ae4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002af0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_ADC_ConfigChannel+0x298>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d111      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_ADC_ConfigChannel+0x2a4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0c9a      	lsrs	r2, r3, #18
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b12:	e002      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	10000012 	.word	0x10000012
 8002b3c:	40012000 	.word	0x40012000
 8002b40:	40012300 	.word	0x40012300
 8002b44:	20000000 	.word	0x20000000
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b54:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <ADC_Init+0x1ec>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <ADC_Init+0x1ec>)
 8002b5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <ADC_Init+0x1ec>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4973      	ldr	r1, [pc, #460]	; (8002d38 <ADC_Init+0x1ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <ADC_Init+0x1f0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e00f      	b.n	8002c46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0202 	bic.w	r2, r2, #2
 8002c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	005a      	lsls	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01b      	beq.n	8002cac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	035a      	lsls	r2, r3, #13
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	e007      	b.n	8002cbc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	051a      	lsls	r2, r3, #20
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cfe:	025a      	lsls	r2, r3, #9
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	029a      	lsls	r2, r3, #10
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012300 	.word	0x40012300
 8002d3c:	0f000001 	.word	0x0f000001

08002d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <__NVIC_SetPriorityGrouping+0x40>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x40>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00
 8002d84:	05fa0000 	.word	0x05fa0000

08002d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db0b      	blt.n	8002dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	4907      	ldr	r1, [pc, #28]	; (8002ddc <__NVIC_EnableIRQ+0x38>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	db0a      	blt.n	8002e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <__NVIC_SetPriority+0x4c>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	440b      	add	r3, r1
 8002e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e08:	e00a      	b.n	8002e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <__NVIC_SetPriority+0x50>)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	3b04      	subs	r3, #4
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	761a      	strb	r2, [r3, #24]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f1c3 0307 	rsb	r3, r3, #7
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	bf28      	it	cs
 8002e52:	2304      	movcs	r3, #4
 8002e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d902      	bls.n	8002e64 <NVIC_EncodePriority+0x30>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3b03      	subs	r3, #3
 8002e62:	e000      	b.n	8002e66 <NVIC_EncodePriority+0x32>
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43d9      	mvns	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	4313      	orrs	r3, r2
         );
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ff4c 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec2:	f7ff ff61 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	6978      	ldr	r0, [r7, #20]
 8002ece:	f7ff ffb1 	bl	8002e34 <NVIC_EncodePriority>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff80 	bl	8002de0 <__NVIC_SetPriority>
}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff54 	bl	8002da4 <__NVIC_EnableIRQ>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e014      	b.n	8002f40 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	791b      	ldrb	r3, [r3, #4]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fee8 	bl	8001cfc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	795b      	ldrb	r3, [r3, #5]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_DAC_Start+0x16>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e040      	b.n	8002fe0 <HAL_DAC_Start+0x98>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2201      	movs	r2, #1
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10f      	bne.n	8002fa8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002f92:	2b3c      	cmp	r3, #60	; 0x3c
 8002f94:	d11d      	bne.n	8002fd2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	e014      	b.n	8002fd2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	213c      	movs	r1, #60	; 0x3c
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0202 	orr.w	r2, r2, #2
 8002fd0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003002:	d120      	bne.n	8003046 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	d118      	bne.n	8003046 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2204      	movs	r2, #4
 8003018:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800303e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f852 	bl	80030ea <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003054:	d120      	bne.n	8003098 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003064:	d118      	bne.n	8003098 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f043 0202 	orr.w	r2, r3, #2
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003080:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003090:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f882 	bl	800319c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	3308      	adds	r3, #8
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e004      	b.n	80030d4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	3314      	adds	r3, #20
 80030d2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	461a      	mov	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	795b      	ldrb	r3, [r3, #5]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_DAC_ConfigChannel+0x18>
 8003112:	2302      	movs	r3, #2
 8003114:	e03c      	b.n	8003190 <HAL_DAC_ConfigChannel+0x92>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2202      	movs	r2, #2
 8003120:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4013      	ands	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	22c0      	movs	r2, #192	; 0xc0
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43da      	mvns	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	400a      	ands	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031be:	f7ff f961 	bl	8002484 <HAL_GetTick>
 80031c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d008      	beq.n	80031e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e052      	b.n	8003288 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0216 	bic.w	r2, r2, #22
 80031f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003200:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_DMA_Abort+0x62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0208 	bic.w	r2, r2, #8
 8003220:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003232:	e013      	b.n	800325c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003234:	f7ff f926 	bl	8002484 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b05      	cmp	r3, #5
 8003240:	d90c      	bls.n	800325c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2203      	movs	r2, #3
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e015      	b.n	8003288 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e4      	bne.n	8003234 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	223f      	movs	r2, #63	; 0x3f
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d004      	beq.n	80032ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00c      	b.n	80032c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2205      	movs	r2, #5
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e175      	b.n	80035e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 8164 	bne.w	80035da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d005      	beq.n	800332a <HAL_GPIO_Init+0x56>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d130      	bne.n	800338c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	69b9      	ldr	r1, [r7, #24]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80be 	beq.w	80035da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_GPIO_Init+0x324>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <HAL_GPIO_Init+0x324>)
 8003464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_GPIO_Init+0x324>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003476:	4a61      	ldr	r2, [pc, #388]	; (80035fc <HAL_GPIO_Init+0x328>)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a58      	ldr	r2, [pc, #352]	; (8003600 <HAL_GPIO_Init+0x32c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d037      	beq.n	8003512 <HAL_GPIO_Init+0x23e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a57      	ldr	r2, [pc, #348]	; (8003604 <HAL_GPIO_Init+0x330>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d031      	beq.n	800350e <HAL_GPIO_Init+0x23a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a56      	ldr	r2, [pc, #344]	; (8003608 <HAL_GPIO_Init+0x334>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02b      	beq.n	800350a <HAL_GPIO_Init+0x236>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_GPIO_Init+0x338>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d025      	beq.n	8003506 <HAL_GPIO_Init+0x232>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_GPIO_Init+0x33c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01f      	beq.n	8003502 <HAL_GPIO_Init+0x22e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a53      	ldr	r2, [pc, #332]	; (8003614 <HAL_GPIO_Init+0x340>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d019      	beq.n	80034fe <HAL_GPIO_Init+0x22a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_GPIO_Init+0x344>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_GPIO_Init+0x226>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a51      	ldr	r2, [pc, #324]	; (800361c <HAL_GPIO_Init+0x348>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00d      	beq.n	80034f6 <HAL_GPIO_Init+0x222>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a50      	ldr	r2, [pc, #320]	; (8003620 <HAL_GPIO_Init+0x34c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <HAL_GPIO_Init+0x21e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4f      	ldr	r2, [pc, #316]	; (8003624 <HAL_GPIO_Init+0x350>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_GPIO_Init+0x21a>
 80034ea:	2309      	movs	r3, #9
 80034ec:	e012      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034ee:	230a      	movs	r3, #10
 80034f0:	e010      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034f2:	2308      	movs	r3, #8
 80034f4:	e00e      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00c      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034fa:	2306      	movs	r3, #6
 80034fc:	e00a      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034fe:	2305      	movs	r3, #5
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x240>
 8003502:	2304      	movs	r3, #4
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x240>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x240>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x240>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x240>
 8003512:	2300      	movs	r3, #0
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003524:	4935      	ldr	r1, [pc, #212]	; (80035fc <HAL_GPIO_Init+0x328>)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003532:	4b3d      	ldr	r3, [pc, #244]	; (8003628 <HAL_GPIO_Init+0x354>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003556:	4a34      	ldr	r2, [pc, #208]	; (8003628 <HAL_GPIO_Init+0x354>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800355c:	4b32      	ldr	r3, [pc, #200]	; (8003628 <HAL_GPIO_Init+0x354>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <HAL_GPIO_Init+0x354>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003586:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_GPIO_Init+0x354>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_GPIO_Init+0x354>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_GPIO_Init+0x354>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_GPIO_Init+0x354>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	f67f ae86 	bls.w	80032f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40013800 	.word	0x40013800
 8003600:	40020000 	.word	0x40020000
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
 800360c:	40020c00 	.word	0x40020c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40021400 	.word	0x40021400
 8003618:	40021800 	.word	0x40021800
 800361c:	40021c00 	.word	0x40021c00
 8003620:	40022000 	.word	0x40022000
 8003624:	40022400 	.word	0x40022400
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003670:	887a      	ldrh	r2, [r7, #2]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43d9      	mvns	r1, r3
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	400b      	ands	r3, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	619a      	str	r2, [r3, #24]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003694:	b08f      	sub	sp, #60	; 0x3c
 8003696:	af0a      	add	r7, sp, #40	; 0x28
 8003698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e116      	b.n	80038d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe fc0e 	bl	8001ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 ff6e 	bl	80065c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	687e      	ldr	r6, [r7, #4]
 80036f0:	466d      	mov	r5, sp
 80036f2:	f106 0410 	add.w	r4, r6, #16
 80036f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003702:	e885 0003 	stmia.w	r5, {r0, r1}
 8003706:	1d33      	adds	r3, r6, #4
 8003708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f002 ff02 	bl	8006514 <USB_CoreInit>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0d7      	b.n	80038d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f002 ff5c 	bl	80065e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	e04a      	b.n	80037ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	333d      	adds	r3, #61	; 0x3d
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	333c      	adds	r3, #60	; 0x3c
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	b298      	uxth	r0, r3
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3344      	adds	r3, #68	; 0x44
 8003770:	4602      	mov	r2, r0
 8003772:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3340      	adds	r3, #64	; 0x40
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3348      	adds	r3, #72	; 0x48
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334c      	adds	r3, #76	; 0x4c
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3354      	adds	r3, #84	; 0x54
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	3301      	adds	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3af      	bcc.n	8003734 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e044      	b.n	8003864 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	3301      	adds	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d3b5      	bcc.n	80037da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	687e      	ldr	r6, [r7, #4]
 8003876:	466d      	mov	r5, sp
 8003878:	f106 0410 	add.w	r4, r6, #16
 800387c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800387e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003884:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003888:	e885 0003 	stmia.w	r5, {r0, r1}
 800388c:	1d33      	adds	r3, r6, #4
 800388e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003890:	6838      	ldr	r0, [r7, #0]
 8003892:	f002 fef5 	bl	8006680 <USB_DevInit>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e014      	b.n	80038d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f80b 	bl	80038dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 f8b3 	bl	8006a36 <USB_DevDisconnect>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080038dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_PCDEx_ActivateLPM+0x44>)
 800390c:	4313      	orrs	r3, r2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	10000003 	.word	0x10000003

08003924 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a04      	ldr	r2, [pc, #16]	; (8003940 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40007000 	.word	0x40007000

08003944 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_PWREx_EnableOverDrive+0x98>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a22      	ldr	r2, [pc, #136]	; (80039dc <HAL_PWREx_EnableOverDrive+0x98>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_PWREx_EnableOverDrive+0x98>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003972:	f7fe fd87 	bl	8002484 <HAL_GetTick>
 8003976:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003978:	e009      	b.n	800398e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800397a:	f7fe fd83 	bl	8002484 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003988:	d901      	bls.n	800398e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e022      	b.n	80039d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800398e:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d1ee      	bne.n	800397a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0f      	ldr	r2, [pc, #60]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a8:	f7fe fd6c 	bl	8002484 <HAL_GetTick>
 80039ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ae:	e009      	b.n	80039c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b0:	f7fe fd68 	bl	8002484 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039be:	d901      	bls.n	80039c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e007      	b.n	80039d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d0:	d1ee      	bne.n	80039b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40007000 	.word	0x40007000

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e29b      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8087 	beq.w	8003b16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a08:	4b96      	ldr	r3, [pc, #600]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d00c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a14:	4b93      	ldr	r3, [pc, #588]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d112      	bne.n	8003a46 <HAL_RCC_OscConfig+0x62>
 8003a20:	4b90      	ldr	r3, [pc, #576]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2c:	d10b      	bne.n	8003a46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2e:	4b8d      	ldr	r3, [pc, #564]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d06c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x130>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d168      	bne.n	8003b14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e275      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x7a>
 8003a50:	4b84      	ldr	r3, [pc, #528]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a83      	ldr	r2, [pc, #524]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	e02e      	b.n	8003abc <HAL_RCC_OscConfig+0xd8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x9c>
 8003a66:	4b7f      	ldr	r3, [pc, #508]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7e      	ldr	r2, [pc, #504]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b7c      	ldr	r3, [pc, #496]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7b      	ldr	r2, [pc, #492]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e01d      	b.n	8003abc <HAL_RCC_OscConfig+0xd8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003a8a:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a75      	ldr	r2, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a72      	ldr	r2, [pc, #456]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xd8>
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6b      	ldr	r2, [pc, #428]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fcde 	bl	8002484 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe fcda 	bl	8002484 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e229      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b61      	ldr	r3, [pc, #388]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe fcca 	bl	8002484 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe fcc6 	bl	8002484 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e215      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	4b57      	ldr	r3, [pc, #348]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x110>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d069      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b22:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x190>
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x17a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e1e9      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	493d      	ldr	r1, [pc, #244]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	e040      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe fc7c 	bl	8002484 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fe fc78 	bl	8002484 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e1c7      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4929      	ldr	r1, [pc, #164]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
 8003bc2:	e018      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fc58 	bl	8002484 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fe fc54 	bl	8002484 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1a3      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b1e      	ldr	r3, [pc, #120]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d038      	beq.n	8003c74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d019      	beq.n	8003c3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fe fc35 	bl	8002484 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fe fc31 	bl	8002484 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e180      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x23a>
 8003c3c:	e01a      	b.n	8003c74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fc1b 	bl	8002484 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c52:	f7fe fc17 	bl	8002484 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d903      	bls.n	8003c68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e166      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
 8003c64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	4b92      	ldr	r3, [pc, #584]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a4 	beq.w	8003dca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c82:	4b8c      	ldr	r3, [pc, #560]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	4b89      	ldr	r3, [pc, #548]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a88      	ldr	r2, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9a:	4b86      	ldr	r3, [pc, #536]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003caa:	4b83      	ldr	r3, [pc, #524]	; (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d118      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cb6:	4b80      	ldr	r3, [pc, #512]	; (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7f      	ldr	r2, [pc, #508]	; (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc2:	f7fe fbdf 	bl	8002484 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cca:	f7fe fbdb 	bl	8002484 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b64      	cmp	r3, #100	; 0x64
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e12a      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cdc:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0x31a>
 8003cf0:	4b70      	ldr	r3, [pc, #448]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a6f      	ldr	r2, [pc, #444]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	e02d      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x33c>
 8003d06:	4b6b      	ldr	r3, [pc, #428]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a6a      	ldr	r2, [pc, #424]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a67      	ldr	r2, [pc, #412]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1e:	e01c      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d10c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x35e>
 8003d28:	4b62      	ldr	r3, [pc, #392]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a61      	ldr	r2, [pc, #388]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
 8003d34:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a5e      	ldr	r2, [pc, #376]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	e00b      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a5b      	ldr	r2, [pc, #364]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a58      	ldr	r2, [pc, #352]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d015      	beq.n	8003d8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fe fb8f 	bl	8002484 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fe fb8b 	bl	8002484 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0d8      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	4b4c      	ldr	r3, [pc, #304]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ee      	beq.n	8003d6a <HAL_RCC_OscConfig+0x386>
 8003d8c:	e014      	b.n	8003db8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fe fb79 	bl	8002484 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d94:	e00a      	b.n	8003dac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fe fb75 	bl	8002484 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e0c2      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dac:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ee      	bne.n	8003d96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a3c      	ldr	r2, [pc, #240]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80ae 	beq.w	8003f30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd4:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d06d      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d14b      	bne.n	8003e80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de8:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe fb46 	bl	8002484 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe fb42 	bl	8002484 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e091      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	491b      	ldr	r1, [pc, #108]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fb14 	bl	8002484 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fe fb10 	bl	8002484 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e05f      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x47c>
 8003e7e:	e057      	b.n	8003f30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0b      	ldr	r2, [pc, #44]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fafa 	bl	8002484 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fe faf6 	bl	8002484 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e045      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4b0>
 8003eb2:	e03d      	b.n	8003f30 <HAL_RCC_OscConfig+0x54c>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ebc:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <HAL_RCC_OscConfig+0x558>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d030      	beq.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d129      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d122      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ef2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d119      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	3b01      	subs	r3, #1
 8003f06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d10f      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0d0      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d910      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b67      	ldr	r3, [pc, #412]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 020f 	bic.w	r2, r3, #15
 8003f6e:	4965      	ldr	r1, [pc, #404]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b63      	ldr	r3, [pc, #396]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0b8      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa0:	4b59      	ldr	r3, [pc, #356]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a58      	ldr	r2, [pc, #352]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003faa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb8:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc4:	4b50      	ldr	r3, [pc, #320]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	494d      	ldr	r1, [pc, #308]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d040      	beq.n	8004064 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d115      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e07f      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e073      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06b      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4936      	ldr	r1, [pc, #216]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004034:	f7fe fa26 	bl	8002484 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	e00a      	b.n	8004052 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403c:	f7fe fa22 	bl	8002484 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e053      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 020c 	and.w	r2, r3, #12
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d1eb      	bne.n	800403c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004064:	4b27      	ldr	r3, [pc, #156]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d210      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	4922      	ldr	r1, [pc, #136]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e032      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4916      	ldr	r1, [pc, #88]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	490e      	ldr	r1, [pc, #56]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d2:	f000 f821 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	490a      	ldr	r1, [pc, #40]	; (800410c <HAL_RCC_ClockConfig+0x1cc>)
 80040e4:	5ccb      	ldrb	r3, [r1, r3]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a09      	ldr	r2, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x1d0>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1d4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd ff6e 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023c00 	.word	0x40023c00
 8004108:	40023800 	.word	0x40023800
 800410c:	0800ccbc 	.word	0x0800ccbc
 8004110:	20000000 	.word	0x20000000
 8004114:	20000010 	.word	0x20000010

08004118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800411c:	b094      	sub	sp, #80	; 0x50
 800411e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	647b      	str	r3, [r7, #68]	; 0x44
 8004124:	2300      	movs	r3, #0
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004128:	2300      	movs	r3, #0
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004130:	4b79      	ldr	r3, [pc, #484]	; (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b08      	cmp	r3, #8
 800413a:	d00d      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x40>
 800413c:	2b08      	cmp	r3, #8
 800413e:	f200 80e1 	bhi.w	8004304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x34>
 8004146:	2b04      	cmp	r3, #4
 8004148:	d003      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0x3a>
 800414a:	e0db      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b73      	ldr	r3, [pc, #460]	; (800431c <HAL_RCC_GetSysClockFreq+0x204>)
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004150:	e0db      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004152:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCC_GetSysClockFreq+0x208>)
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004156:	e0d8      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004158:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004160:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004162:	4b6d      	ldr	r3, [pc, #436]	; (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d063      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b6a      	ldr	r3, [pc, #424]	; (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	2200      	movs	r2, #0
 8004176:	63bb      	str	r3, [r7, #56]	; 0x38
 8004178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
 8004182:	2300      	movs	r3, #0
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
 8004186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419c:	0150      	lsls	r0, r2, #5
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4621      	mov	r1, r4
 80041a4:	1a51      	subs	r1, r2, r1
 80041a6:	6139      	str	r1, [r7, #16]
 80041a8:	4629      	mov	r1, r5
 80041aa:	eb63 0301 	sbc.w	r3, r3, r1
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041bc:	4659      	mov	r1, fp
 80041be:	018b      	lsls	r3, r1, #6
 80041c0:	4651      	mov	r1, sl
 80041c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c6:	4651      	mov	r1, sl
 80041c8:	018a      	lsls	r2, r1, #6
 80041ca:	4651      	mov	r1, sl
 80041cc:	ebb2 0801 	subs.w	r8, r2, r1
 80041d0:	4659      	mov	r1, fp
 80041d2:	eb63 0901 	sbc.w	r9, r3, r1
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ea:	4690      	mov	r8, r2
 80041ec:	4699      	mov	r9, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	eb18 0303 	adds.w	r3, r8, r3
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	462b      	mov	r3, r5
 80041f8:	eb49 0303 	adc.w	r3, r9, r3
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800420a:	4629      	mov	r1, r5
 800420c:	024b      	lsls	r3, r1, #9
 800420e:	4621      	mov	r1, r4
 8004210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004214:	4621      	mov	r1, r4
 8004216:	024a      	lsls	r2, r1, #9
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421e:	2200      	movs	r2, #0
 8004220:	62bb      	str	r3, [r7, #40]	; 0x28
 8004222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004228:	f7fc f862 	bl	80002f0 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4613      	mov	r3, r2
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004234:	e058      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b38      	ldr	r3, [pc, #224]	; (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	2200      	movs	r2, #0
 800423e:	4618      	mov	r0, r3
 8004240:	4611      	mov	r1, r2
 8004242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	2300      	movs	r3, #0
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
 800424c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	0159      	lsls	r1, r3, #5
 800425e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004262:	0150      	lsls	r0, r2, #5
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4641      	mov	r1, r8
 800426a:	ebb2 0a01 	subs.w	sl, r2, r1
 800426e:	4649      	mov	r1, r9
 8004270:	eb63 0b01 	sbc.w	fp, r3, r1
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004288:	ebb2 040a 	subs.w	r4, r2, sl
 800428c:	eb63 050b 	sbc.w	r5, r3, fp
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	00eb      	lsls	r3, r5, #3
 800429a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800429e:	00e2      	lsls	r2, r4, #3
 80042a0:	4614      	mov	r4, r2
 80042a2:	461d      	mov	r5, r3
 80042a4:	4643      	mov	r3, r8
 80042a6:	18e3      	adds	r3, r4, r3
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	464b      	mov	r3, r9
 80042ac:	eb45 0303 	adc.w	r3, r5, r3
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042be:	4629      	mov	r1, r5
 80042c0:	028b      	lsls	r3, r1, #10
 80042c2:	4621      	mov	r1, r4
 80042c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c8:	4621      	mov	r1, r4
 80042ca:	028a      	lsls	r2, r1, #10
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d2:	2200      	movs	r2, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	61fa      	str	r2, [r7, #28]
 80042d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042dc:	f7fc f808 	bl	80002f0 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4613      	mov	r3, r2
 80042e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004302:	e002      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetSysClockFreq+0x204>)
 8004306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800430c:	4618      	mov	r0, r3
 800430e:	3750      	adds	r7, #80	; 0x50
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800
 800431c:	00f42400 	.word	0x00f42400
 8004320:	007a1200 	.word	0x007a1200

08004324 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <HAL_RCC_GetHCLKFreq+0x14>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000000 	.word	0x20000000

0800433c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004340:	f7ff fff0 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4903      	ldr	r1, [pc, #12]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	0800cccc 	.word	0x0800cccc

08004364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004368:	f7ff ffdc 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	0b5b      	lsrs	r3, r3, #13
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4903      	ldr	r1, [pc, #12]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	0800cccc 	.word	0x0800cccc

0800438c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	220f      	movs	r2, #15
 800439a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_RCC_GetClockConfig+0x60>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40023c00 	.word	0x40023c00

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d012      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004418:	4b69      	ldr	r3, [pc, #420]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a68      	ldr	r2, [pc, #416]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004422:	6093      	str	r3, [r2, #8]
 8004424:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	4964      	ldr	r1, [pc, #400]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800444a:	4b5d      	ldr	r3, [pc, #372]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	4959      	ldr	r1, [pc, #356]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004468:	d101      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800446a:	2301      	movs	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d017      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004486:	4b4e      	ldr	r3, [pc, #312]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800448c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	494a      	ldr	r1, [pc, #296]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a4:	d101      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 808b 	beq.w	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044d4:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	4a39      	ldr	r2, [pc, #228]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044de:	6413      	str	r3, [r2, #64]	; 0x40
 80044e0:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044ec:	4b35      	ldr	r3, [pc, #212]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a34      	ldr	r2, [pc, #208]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fd ffc4 	bl	8002484 <HAL_GetTick>
 80044fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fd ffc0 	bl	8002484 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e38f      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004512:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800451e:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d035      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	429a      	cmp	r2, r3
 800453a:	d02e      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453c:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800455e:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004564:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d114      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd ff88 	bl	8002484 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fd ff84 	bl	8002484 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e351      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ee      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a6:	d111      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045b6:	400b      	ands	r3, r1
 80045b8:	4901      	ldr	r1, [pc, #4]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
 80045be:	e00b      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40007000 	.word	0x40007000
 80045c8:	0ffffcff 	.word	0x0ffffcff
 80045cc:	4bac      	ldr	r3, [pc, #688]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4aab      	ldr	r2, [pc, #684]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045d6:	6093      	str	r3, [r2, #8]
 80045d8:	4ba9      	ldr	r3, [pc, #676]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e4:	49a6      	ldr	r1, [pc, #664]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045f6:	4ba2      	ldr	r3, [pc, #648]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fc:	4aa0      	ldr	r2, [pc, #640]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004602:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004606:	4b9e      	ldr	r3, [pc, #632]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004608:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	499b      	ldr	r1, [pc, #620]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004624:	4b96      	ldr	r3, [pc, #600]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004632:	4993      	ldr	r1, [pc, #588]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004646:	4b8e      	ldr	r3, [pc, #568]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004654:	498a      	ldr	r1, [pc, #552]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004668:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004676:	4982      	ldr	r1, [pc, #520]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800468a:	4b7d      	ldr	r3, [pc, #500]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4979      	ldr	r1, [pc, #484]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ac:	4b74      	ldr	r3, [pc, #464]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f023 0203 	bic.w	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	4971      	ldr	r1, [pc, #452]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ce:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	f023 020c 	bic.w	r2, r3, #12
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046dc:	4968      	ldr	r1, [pc, #416]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046f0:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	4960      	ldr	r1, [pc, #384]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004712:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	4957      	ldr	r1, [pc, #348]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004734:	4b52      	ldr	r3, [pc, #328]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	494f      	ldr	r1, [pc, #316]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	4946      	ldr	r1, [pc, #280]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004778:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	493e      	ldr	r1, [pc, #248]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a8:	4935      	ldr	r1, [pc, #212]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047bc:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ca:	492d      	ldr	r1, [pc, #180]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d011      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ec:	4924      	ldr	r1, [pc, #144]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047fc:	d101      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800480e:	2301      	movs	r3, #1
 8004810:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482c:	4914      	ldr	r1, [pc, #80]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004850:	490b      	ldr	r1, [pc, #44]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00f      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	4902      	ldr	r1, [pc, #8]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800487c:	e002      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004890:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004896:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	4986      	ldr	r1, [pc, #536]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048b4:	4b81      	ldr	r3, [pc, #516]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c4:	497d      	ldr	r1, [pc, #500]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d006      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80d6 	beq.w	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048e0:	4b76      	ldr	r3, [pc, #472]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a75      	ldr	r2, [pc, #468]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fd fdca 	bl	8002484 <HAL_GetTick>
 80048f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048f4:	f7fd fdc6 	bl	8002484 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e195      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004906:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d021      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11d      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004926:	4b65      	ldr	r3, [pc, #404]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004934:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493a:	0e1b      	lsrs	r3, r3, #24
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	019a      	lsls	r2, r3, #6
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	071b      	lsls	r3, r3, #28
 800495a:	4958      	ldr	r1, [pc, #352]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02e      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498c:	d129      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800498e:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800499c:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a2:	0f1b      	lsrs	r3, r3, #28
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	019a      	lsls	r2, r3, #6
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	431a      	orrs	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	493e      	ldr	r1, [pc, #248]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049ca:	4b3c      	ldr	r3, [pc, #240]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d0:	f023 021f 	bic.w	r2, r3, #31
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	3b01      	subs	r3, #1
 80049da:	4938      	ldr	r1, [pc, #224]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01d      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049ee:	4b33      	ldr	r3, [pc, #204]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	0e1b      	lsrs	r3, r3, #24
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049fc:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	0f1b      	lsrs	r3, r3, #28
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	4926      	ldr	r1, [pc, #152]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d011      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	019a      	lsls	r2, r3, #6
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	071b      	lsls	r3, r3, #28
 8004a52:	491a      	ldr	r1, [pc, #104]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a17      	ldr	r2, [pc, #92]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a66:	f7fd fd0d 	bl	8002484 <HAL_GetTick>
 8004a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a6e:	f7fd fd09 	bl	8002484 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b64      	cmp	r3, #100	; 0x64
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0d8      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	f040 80ce 	bne.w	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa0:	f7fd fcf0 	bl	8002484 <HAL_GetTick>
 8004aa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004aa8:	f7fd fcec 	bl	8002484 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d904      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e0bb      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ac0:	4b5e      	ldr	r3, [pc, #376]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004acc:	d0ec      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02e      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d12a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004af6:	4b51      	ldr	r3, [pc, #324]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b04:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	0f1b      	lsrs	r3, r3, #28
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	019a      	lsls	r2, r3, #6
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	071b      	lsls	r3, r3, #28
 8004b2a:	4944      	ldr	r1, [pc, #272]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b32:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	493d      	ldr	r1, [pc, #244]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d022      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b60:	d11d      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b62:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b70:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	0f1b      	lsrs	r3, r3, #28
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	019a      	lsls	r2, r3, #6
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	071b      	lsls	r3, r3, #28
 8004b96:	4929      	ldr	r1, [pc, #164]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d028      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004baa:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	0e1b      	lsrs	r3, r3, #24
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bb8:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	019a      	lsls	r2, r3, #6
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	041b      	lsls	r3, r3, #16
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	071b      	lsls	r3, r3, #28
 8004bde:	4917      	ldr	r1, [pc, #92]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4911      	ldr	r1, [pc, #68]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0e      	ldr	r2, [pc, #56]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c08:	f7fd fc3c 	bl	8002484 <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c10:	f7fd fc38 	bl	8002484 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e007      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2e:	d1ef      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800

08004c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e049      	b.n	8004ce6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd f890 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f000 fa24 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e054      	b.n	8004db2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d022      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d01d      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1c      	ldr	r2, [pc, #112]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x80>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d115      	bne.n	8004d9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_TIM_Base_Start_IT+0xec>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d015      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0xbe>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d011      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9a:	e008      	b.n	8004dae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e000      	b.n	8004db0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40010400 	.word	0x40010400
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40001800 	.word	0x40001800
 8004ddc:	00010007 	.word	0x00010007

08004de0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <HAL_TIM_Base_Stop_IT+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	f240 4344 	movw	r3, #1092	; 0x444
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_Base_Stop_IT+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d122      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d11b      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0202 	mvn.w	r2, #2
 8004e6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f905 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004e86:	e005      	b.n	8004e94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f8f7 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f908 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d122      	bne.n	8004eee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d11b      	bne.n	8004eee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f06f 0204 	mvn.w	r2, #4
 8004ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f8db 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004eda:	e005      	b.n	8004ee8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8cd 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f8de 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d122      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d11b      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f06f 0208 	mvn.w	r2, #8
 8004f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2204      	movs	r2, #4
 8004f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8b1 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004f2e:	e005      	b.n	8004f3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f8a3 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8b4 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d122      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d11b      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f06f 0210 	mvn.w	r2, #16
 8004f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f887 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004f82:	e005      	b.n	8004f90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f879 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f88a 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10e      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d107      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f06f 0201 	mvn.w	r2, #1
 8004fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fc fd19 	bl	80019f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d10e      	bne.n	8004fee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f919 	bl	8005220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f90c 	bl	8005234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f838 	bl	80050b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0220 	mvn.w	r2, #32
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8cc 	bl	800520c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a40      	ldr	r2, [pc, #256]	; (80051e0 <TIM_Base_SetConfig+0x114>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d00f      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3d      	ldr	r2, [pc, #244]	; (80051e4 <TIM_Base_SetConfig+0x118>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00b      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3c      	ldr	r2, [pc, #240]	; (80051e8 <TIM_Base_SetConfig+0x11c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d007      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3b      	ldr	r2, [pc, #236]	; (80051ec <TIM_Base_SetConfig+0x120>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a3a      	ldr	r2, [pc, #232]	; (80051f0 <TIM_Base_SetConfig+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d108      	bne.n	800511e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2f      	ldr	r2, [pc, #188]	; (80051e0 <TIM_Base_SetConfig+0x114>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02b      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d027      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <TIM_Base_SetConfig+0x118>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d023      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <TIM_Base_SetConfig+0x11c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <TIM_Base_SetConfig+0x120>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01b      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <TIM_Base_SetConfig+0x124>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d017      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a28      	ldr	r2, [pc, #160]	; (80051f4 <TIM_Base_SetConfig+0x128>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a27      	ldr	r2, [pc, #156]	; (80051f8 <TIM_Base_SetConfig+0x12c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a26      	ldr	r2, [pc, #152]	; (80051fc <TIM_Base_SetConfig+0x130>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a25      	ldr	r2, [pc, #148]	; (8005200 <TIM_Base_SetConfig+0x134>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a24      	ldr	r2, [pc, #144]	; (8005204 <TIM_Base_SetConfig+0x138>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a23      	ldr	r2, [pc, #140]	; (8005208 <TIM_Base_SetConfig+0x13c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <TIM_Base_SetConfig+0x114>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0xf8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <TIM_Base_SetConfig+0x124>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d103      	bne.n	80051cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	615a      	str	r2, [r3, #20]
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40010400 	.word	0x40010400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800
 8005200:	40001800 	.word	0x40001800
 8005204:	40001c00 	.word	0x40001c00
 8005208:	40002000 	.word	0x40002000

0800520c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e040      	b.n	80052dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fc fdd0 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2224      	movs	r2, #36	; 0x24
 8005274:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fc86 	bl	8005b98 <UART_SetConfig>
 800528c:	4603      	mov	r3, r0
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e022      	b.n	80052dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fede 	bl	8006060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 ff65 	bl	80061a4 <UART_CheckIdleState>
 80052da:	4603      	mov	r3, r0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d171      	bne.n	80053e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_UART_Transmit+0x24>
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e06a      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2221      	movs	r2, #33	; 0x21
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fd f8b3 	bl	8002484 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x68>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005354:	e02c      	b.n	80053b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 ff6c 	bl	800623e <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e038      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	3302      	adds	r3, #2
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e007      	b.n	800539e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1cc      	bne.n	8005356 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2140      	movs	r1, #64	; 0x40
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 ff39 	bl	800623e <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e005      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b08a      	sub	sp, #40	; 0x28
 80053ee:	af02      	add	r7, sp, #8
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005400:	2b20      	cmp	r3, #32
 8005402:	f040 80b1 	bne.w	8005568 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_UART_Receive+0x28>
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e0a9      	b.n	800556a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2222      	movs	r2, #34	; 0x22
 8005422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542c:	f7fd f82a 	bl	8002484 <HAL_GetTick>
 8005430:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	88fa      	ldrh	r2, [r7, #6]
 8005436:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d10e      	bne.n	800546a <HAL_UART_Receive+0x80>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_UART_Receive+0x76>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f240 12ff 	movw	r2, #511	; 0x1ff
 800545a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800545e:	e02d      	b.n	80054bc <HAL_UART_Receive+0xd2>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	22ff      	movs	r2, #255	; 0xff
 8005464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005468:	e028      	b.n	80054bc <HAL_UART_Receive+0xd2>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10d      	bne.n	800548e <HAL_UART_Receive+0xa4>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <HAL_UART_Receive+0x9a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005482:	e01b      	b.n	80054bc <HAL_UART_Receive+0xd2>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	227f      	movs	r2, #127	; 0x7f
 8005488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800548c:	e016      	b.n	80054bc <HAL_UART_Receive+0xd2>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005496:	d10d      	bne.n	80054b4 <HAL_UART_Receive+0xca>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <HAL_UART_Receive+0xc0>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	227f      	movs	r2, #127	; 0x7f
 80054a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054a8:	e008      	b.n	80054bc <HAL_UART_Receive+0xd2>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	223f      	movs	r2, #63	; 0x3f
 80054ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b2:	e003      	b.n	80054bc <HAL_UART_Receive+0xd2>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d108      	bne.n	80054e0 <HAL_UART_Receive+0xf6>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e003      	b.n	80054e8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80054e8:	e032      	b.n	8005550 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2120      	movs	r1, #32
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fea2 	bl	800623e <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e032      	b.n	800556a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	b29a      	uxth	r2, r3
 8005512:	8a7b      	ldrh	r3, [r7, #18]
 8005514:	4013      	ands	r3, r2
 8005516:	b29a      	uxth	r2, r3
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	3302      	adds	r3, #2
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e00c      	b.n	800553e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	b2da      	uxtb	r2, r3
 800552c:	8a7b      	ldrh	r3, [r7, #18]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	4013      	ands	r3, r2
 8005532:	b2da      	uxtb	r2, r3
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1c6      	bne.n	80054ea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	e000      	b.n	800556a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005568:	2302      	movs	r3, #2
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b0ba      	sub	sp, #232	; 0xe8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800559a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800559e:	f640 030f 	movw	r3, #2063	; 0x80f
 80055a2:	4013      	ands	r3, r2
 80055a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d115      	bne.n	80055dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00f      	beq.n	80055dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 82ac 	beq.w	8005b2a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
      }
      return;
 80055da:	e2a6      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8117 	beq.w	8005814 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055f6:	4b85      	ldr	r3, [pc, #532]	; (800580c <HAL_UART_IRQHandler+0x298>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 810a 	beq.w	8005814 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d011      	beq.n	8005630 <HAL_UART_IRQHandler+0xbc>
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005626:	f043 0201 	orr.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d011      	beq.n	8005660 <HAL_UART_IRQHandler+0xec>
 800563c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2202      	movs	r2, #2
 800564e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005656:	f043 0204 	orr.w	r2, r3, #4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d011      	beq.n	8005690 <HAL_UART_IRQHandler+0x11c>
 800566c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2204      	movs	r2, #4
 800567e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005686:	f043 0202 	orr.w	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d017      	beq.n	80056cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00b      	beq.n	80056cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2208      	movs	r2, #8
 80056ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c2:	f043 0208 	orr.w	r2, r3, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d012      	beq.n	80056fe <HAL_UART_IRQHandler+0x18a>
 80056d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00c      	beq.n	80056fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8212 	beq.w	8005b2e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800570a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00d      	beq.n	8005732 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005738:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d005      	beq.n	8005756 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800574a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d04f      	beq.n	80057f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fe37 	bl	80063ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d141      	bne.n	80057ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005796:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800579a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1d9      	bne.n	800576a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d013      	beq.n	80057e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c2:	4a13      	ldr	r2, [pc, #76]	; (8005810 <HAL_UART_IRQHandler+0x29c>)
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fd fd60 	bl	8003290 <HAL_DMA_Abort_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d017      	beq.n	8005806 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00f      	b.n	8005806 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9b6 	bl	8005b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e00b      	b.n	8005806 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9b2 	bl	8005b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f4:	e007      	b.n	8005806 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9ae 	bl	8005b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005804:	e193      	b.n	8005b2e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005806:	bf00      	nop
    return;
 8005808:	e191      	b.n	8005b2e <HAL_UART_IRQHandler+0x5ba>
 800580a:	bf00      	nop
 800580c:	04000120 	.word	0x04000120
 8005810:	08006493 	.word	0x08006493

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005818:	2b01      	cmp	r3, #1
 800581a:	f040 814c 	bne.w	8005ab6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8145 	beq.w	8005ab6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 813e 	beq.w	8005ab6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	f040 80b6 	bne.w	80059be <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800585e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8165 	beq.w	8005b32 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800586e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005872:	429a      	cmp	r2, r3
 8005874:	f080 815d 	bcs.w	8005b32 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800587e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588c:	f000 8086 	beq.w	800599c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1da      	bne.n	8005890 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e1      	bne.n	80058da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800593a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800593c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e3      	bne.n	8005916 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800596a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800596c:	f023 0310 	bic.w	r3, r3, #16
 8005970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800597e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005980:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800598c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e4      	bne.n	800595c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005996:	4618      	mov	r0, r3
 8005998:	f7fd fc0a 	bl	80031b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8d8 	bl	8005b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059bc:	e0b9      	b.n	8005b32 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80ab 	beq.w	8005b36 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80059e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80a6 	beq.w	8005b36 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e4      	bne.n	80059ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a44:	633a      	str	r2, [r7, #48]	; 0x30
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e3      	bne.n	8005a20 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 0310 	bic.w	r3, r3, #16
 8005a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	69b9      	ldr	r1, [r7, #24]
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e4      	bne.n	8005a6c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f85c 	bl	8005b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ab4:	e03f      	b.n	8005b36 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x56c>
 8005ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d008      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ad6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f853 	bl	8005b84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ade:	e02d      	b.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01c      	beq.n	8005b3a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4798      	blx	r3
    }
    return;
 8005b08:	e017      	b.n	8005b3a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d012      	beq.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fccb 	bl	80064be <UART_EndTransmit_IT>
    return;
 8005b28:	e008      	b.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b2a:	bf00      	nop
 8005b2c:	e006      	b.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b2e:	bf00      	nop
 8005b30:	e004      	b.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b3a:	bf00      	nop
  }

}
 8005b3c:	37e8      	adds	r7, #232	; 0xe8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop

08005b44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4ba6      	ldr	r3, [pc, #664]	; (8005e5c <UART_SetConfig+0x2c4>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a94      	ldr	r2, [pc, #592]	; (8005e60 <UART_SetConfig+0x2c8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d120      	bne.n	8005c56 <UART_SetConfig+0xbe>
 8005c14:	4b93      	ldr	r3, [pc, #588]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d816      	bhi.n	8005c50 <UART_SetConfig+0xb8>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x90>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c3f 	.word	0x08005c3f
 8005c34:	08005c4b 	.word	0x08005c4b
 8005c38:	2301      	movs	r3, #1
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e150      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e14d      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005c44:	2304      	movs	r3, #4
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e14a      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e147      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005c50:	2310      	movs	r3, #16
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e144      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a83      	ldr	r2, [pc, #524]	; (8005e68 <UART_SetConfig+0x2d0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d132      	bne.n	8005cc6 <UART_SetConfig+0x12e>
 8005c60:	4b80      	ldr	r3, [pc, #512]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f003 030c 	and.w	r3, r3, #12
 8005c6a:	2b0c      	cmp	r3, #12
 8005c6c:	d828      	bhi.n	8005cc0 <UART_SetConfig+0x128>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0xdc>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005ca9 	.word	0x08005ca9
 8005c78:	08005cc1 	.word	0x08005cc1
 8005c7c:	08005cc1 	.word	0x08005cc1
 8005c80:	08005cc1 	.word	0x08005cc1
 8005c84:	08005cb5 	.word	0x08005cb5
 8005c88:	08005cc1 	.word	0x08005cc1
 8005c8c:	08005cc1 	.word	0x08005cc1
 8005c90:	08005cc1 	.word	0x08005cc1
 8005c94:	08005caf 	.word	0x08005caf
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc1 	.word	0x08005cc1
 8005ca4:	08005cbb 	.word	0x08005cbb
 8005ca8:	2300      	movs	r3, #0
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e118      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e115      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e112      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005cba:	2308      	movs	r3, #8
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e10f      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e10c      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a68      	ldr	r2, [pc, #416]	; (8005e6c <UART_SetConfig+0x2d4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d120      	bne.n	8005d12 <UART_SetConfig+0x17a>
 8005cd0:	4b64      	ldr	r3, [pc, #400]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cda:	2b30      	cmp	r3, #48	; 0x30
 8005cdc:	d013      	beq.n	8005d06 <UART_SetConfig+0x16e>
 8005cde:	2b30      	cmp	r3, #48	; 0x30
 8005ce0:	d814      	bhi.n	8005d0c <UART_SetConfig+0x174>
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d009      	beq.n	8005cfa <UART_SetConfig+0x162>
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d810      	bhi.n	8005d0c <UART_SetConfig+0x174>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <UART_SetConfig+0x15c>
 8005cee:	2b10      	cmp	r3, #16
 8005cf0:	d006      	beq.n	8005d00 <UART_SetConfig+0x168>
 8005cf2:	e00b      	b.n	8005d0c <UART_SetConfig+0x174>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e0f2      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e0ef      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e0ec      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e0e9      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e0e6      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <UART_SetConfig+0x2d8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d120      	bne.n	8005d5e <UART_SetConfig+0x1c6>
 8005d1c:	4b51      	ldr	r3, [pc, #324]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d26:	2bc0      	cmp	r3, #192	; 0xc0
 8005d28:	d013      	beq.n	8005d52 <UART_SetConfig+0x1ba>
 8005d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d2c:	d814      	bhi.n	8005d58 <UART_SetConfig+0x1c0>
 8005d2e:	2b80      	cmp	r3, #128	; 0x80
 8005d30:	d009      	beq.n	8005d46 <UART_SetConfig+0x1ae>
 8005d32:	2b80      	cmp	r3, #128	; 0x80
 8005d34:	d810      	bhi.n	8005d58 <UART_SetConfig+0x1c0>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <UART_SetConfig+0x1a8>
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d006      	beq.n	8005d4c <UART_SetConfig+0x1b4>
 8005d3e:	e00b      	b.n	8005d58 <UART_SetConfig+0x1c0>
 8005d40:	2300      	movs	r3, #0
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e0cc      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d46:	2302      	movs	r3, #2
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e0c9      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e0c6      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d52:	2308      	movs	r3, #8
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e0c3      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e0c0      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a44      	ldr	r2, [pc, #272]	; (8005e74 <UART_SetConfig+0x2dc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d125      	bne.n	8005db4 <UART_SetConfig+0x21c>
 8005d68:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d76:	d017      	beq.n	8005da8 <UART_SetConfig+0x210>
 8005d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7c:	d817      	bhi.n	8005dae <UART_SetConfig+0x216>
 8005d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d82:	d00b      	beq.n	8005d9c <UART_SetConfig+0x204>
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d811      	bhi.n	8005dae <UART_SetConfig+0x216>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <UART_SetConfig+0x1fe>
 8005d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d92:	d006      	beq.n	8005da2 <UART_SetConfig+0x20a>
 8005d94:	e00b      	b.n	8005dae <UART_SetConfig+0x216>
 8005d96:	2300      	movs	r3, #0
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e0a1      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e09e      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005da2:	2304      	movs	r3, #4
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e09b      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005da8:	2308      	movs	r3, #8
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e098      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005dae:	2310      	movs	r3, #16
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e095      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <UART_SetConfig+0x2e0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d125      	bne.n	8005e0a <UART_SetConfig+0x272>
 8005dbe:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005dc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dcc:	d017      	beq.n	8005dfe <UART_SetConfig+0x266>
 8005dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd2:	d817      	bhi.n	8005e04 <UART_SetConfig+0x26c>
 8005dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd8:	d00b      	beq.n	8005df2 <UART_SetConfig+0x25a>
 8005dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dde:	d811      	bhi.n	8005e04 <UART_SetConfig+0x26c>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <UART_SetConfig+0x254>
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d006      	beq.n	8005df8 <UART_SetConfig+0x260>
 8005dea:	e00b      	b.n	8005e04 <UART_SetConfig+0x26c>
 8005dec:	2301      	movs	r3, #1
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e076      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005df2:	2302      	movs	r3, #2
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e073      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e070      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e06d      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005e04:	2310      	movs	r3, #16
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e06a      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <UART_SetConfig+0x2e4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d138      	bne.n	8005e86 <UART_SetConfig+0x2ee>
 8005e14:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <UART_SetConfig+0x2cc>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e22:	d017      	beq.n	8005e54 <UART_SetConfig+0x2bc>
 8005e24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e28:	d82a      	bhi.n	8005e80 <UART_SetConfig+0x2e8>
 8005e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2e:	d00b      	beq.n	8005e48 <UART_SetConfig+0x2b0>
 8005e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e34:	d824      	bhi.n	8005e80 <UART_SetConfig+0x2e8>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <UART_SetConfig+0x2aa>
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d006      	beq.n	8005e4e <UART_SetConfig+0x2b6>
 8005e40:	e01e      	b.n	8005e80 <UART_SetConfig+0x2e8>
 8005e42:	2300      	movs	r3, #0
 8005e44:	77fb      	strb	r3, [r7, #31]
 8005e46:	e04b      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e048      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005e4e:	2304      	movs	r3, #4
 8005e50:	77fb      	strb	r3, [r7, #31]
 8005e52:	e045      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005e54:	2308      	movs	r3, #8
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e042      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005e5a:	bf00      	nop
 8005e5c:	efff69f3 	.word	0xefff69f3
 8005e60:	40011000 	.word	0x40011000
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40004400 	.word	0x40004400
 8005e6c:	40004800 	.word	0x40004800
 8005e70:	40004c00 	.word	0x40004c00
 8005e74:	40005000 	.word	0x40005000
 8005e78:	40011400 	.word	0x40011400
 8005e7c:	40007800 	.word	0x40007800
 8005e80:	2310      	movs	r3, #16
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e02c      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a72      	ldr	r2, [pc, #456]	; (8006054 <UART_SetConfig+0x4bc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d125      	bne.n	8005edc <UART_SetConfig+0x344>
 8005e90:	4b71      	ldr	r3, [pc, #452]	; (8006058 <UART_SetConfig+0x4c0>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e9e:	d017      	beq.n	8005ed0 <UART_SetConfig+0x338>
 8005ea0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ea4:	d817      	bhi.n	8005ed6 <UART_SetConfig+0x33e>
 8005ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eaa:	d00b      	beq.n	8005ec4 <UART_SetConfig+0x32c>
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb0:	d811      	bhi.n	8005ed6 <UART_SetConfig+0x33e>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <UART_SetConfig+0x326>
 8005eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eba:	d006      	beq.n	8005eca <UART_SetConfig+0x332>
 8005ebc:	e00b      	b.n	8005ed6 <UART_SetConfig+0x33e>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e00d      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e00a      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e007      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e004      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	e001      	b.n	8005ee0 <UART_SetConfig+0x348>
 8005edc:	2310      	movs	r3, #16
 8005ede:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee8:	d15b      	bne.n	8005fa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005eea:	7ffb      	ldrb	r3, [r7, #31]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d828      	bhi.n	8005f42 <UART_SetConfig+0x3aa>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x360>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	08005f43 	.word	0x08005f43
 8005f08:	08005f33 	.word	0x08005f33
 8005f0c:	08005f43 	.word	0x08005f43
 8005f10:	08005f43 	.word	0x08005f43
 8005f14:	08005f43 	.word	0x08005f43
 8005f18:	08005f3b 	.word	0x08005f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1c:	f7fe fa0e 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005f20:	61b8      	str	r0, [r7, #24]
        break;
 8005f22:	e013      	b.n	8005f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f24:	f7fe fa1e 	bl	8004364 <HAL_RCC_GetPCLK2Freq>
 8005f28:	61b8      	str	r0, [r7, #24]
        break;
 8005f2a:	e00f      	b.n	8005f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	; (800605c <UART_SetConfig+0x4c4>)
 8005f2e:	61bb      	str	r3, [r7, #24]
        break;
 8005f30:	e00c      	b.n	8005f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f32:	f7fe f8f1 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 8005f36:	61b8      	str	r0, [r7, #24]
        break;
 8005f38:	e008      	b.n	8005f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	61bb      	str	r3, [r7, #24]
        break;
 8005f40:	e004      	b.n	8005f4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	77bb      	strb	r3, [r7, #30]
        break;
 8005f4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d074      	beq.n	800603c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	005a      	lsls	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	441a      	add	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	d916      	bls.n	8005f9c <UART_SetConfig+0x404>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f74:	d212      	bcs.n	8005f9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f023 030f 	bic.w	r3, r3, #15
 8005f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	89fb      	ldrh	r3, [r7, #14]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	89fa      	ldrh	r2, [r7, #14]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e04f      	b.n	800603c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	77bb      	strb	r3, [r7, #30]
 8005fa0:	e04c      	b.n	800603c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa2:	7ffb      	ldrb	r3, [r7, #31]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d828      	bhi.n	8005ffa <UART_SetConfig+0x462>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x418>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005ffb 	.word	0x08005ffb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe f9b2 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61b8      	str	r0, [r7, #24]
        break;
 8005fda:	e013      	b.n	8006004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fe f9c2 	bl	8004364 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61b8      	str	r0, [r7, #24]
        break;
 8005fe2:	e00f      	b.n	8006004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <UART_SetConfig+0x4c4>)
 8005fe6:	61bb      	str	r3, [r7, #24]
        break;
 8005fe8:	e00c      	b.n	8006004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7fe f895 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 8005fee:	61b8      	str	r0, [r7, #24]
        break;
 8005ff0:	e008      	b.n	8006004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff6:	61bb      	str	r3, [r7, #24]
        break;
 8005ff8:	e004      	b.n	8006004 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	77bb      	strb	r3, [r7, #30]
        break;
 8006002:	bf00      	nop
    }

    if (pclk != 0U)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d018      	beq.n	800603c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	085a      	lsrs	r2, r3, #1
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	441a      	add	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b0f      	cmp	r3, #15
 8006022:	d909      	bls.n	8006038 <UART_SetConfig+0x4a0>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602a:	d205      	bcs.n	8006038 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	e001      	b.n	800603c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006048:	7fbb      	ldrb	r3, [r7, #30]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40007c00 	.word	0x40007c00
 8006058:	40023800 	.word	0x40023800
 800605c:	00f42400 	.word	0x00f42400

08006060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01a      	beq.n	8006176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800615e:	d10a      	bne.n	8006176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]
  }
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b4:	f7fc f966 	bl	8002484 <HAL_GetTick>
 80061b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d10e      	bne.n	80061e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f831 	bl	800623e <UART_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e027      	b.n	8006236 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d10e      	bne.n	8006212 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f81b 	bl	800623e <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e011      	b.n	8006236 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b09c      	sub	sp, #112	; 0x70
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624e:	e0a7      	b.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	f000 80a3 	beq.w	80063a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625a:	f7fc f913 	bl	8002484 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <UART_WaitOnFlagUntilTimeout+0x32>
 800626a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800626c:	2b00      	cmp	r3, #0
 800626e:	d13f      	bne.n	80062f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800627e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006284:	667b      	str	r3, [r7, #100]	; 0x64
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006290:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800629c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e6      	bne.n	8006270 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	663b      	str	r3, [r7, #96]	; 0x60
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3308      	adds	r3, #8
 80062c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e068      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d050      	beq.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630c:	d148      	bne.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006316:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800632c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006336:	637b      	str	r3, [r7, #52]	; 0x34
 8006338:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800633c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e6      	bne.n	8006318 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	613b      	str	r3, [r7, #16]
   return(result);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	66bb      	str	r3, [r7, #104]	; 0x68
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800636a:	623a      	str	r2, [r7, #32]
 800636c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	69f9      	ldr	r1, [r7, #28]
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	61bb      	str	r3, [r7, #24]
   return(result);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e010      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69da      	ldr	r2, [r3, #28]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4013      	ands	r3, r2
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	f43f af48 	beq.w	8006250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3770      	adds	r7, #112	; 0x70
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b095      	sub	sp, #84	; 0x54
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f0:	643b      	str	r3, [r7, #64]	; 0x40
 80063f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e6      	bne.n	80063d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	61fb      	str	r3, [r7, #28]
   return(result);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	64bb      	str	r3, [r7, #72]	; 0x48
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3308      	adds	r3, #8
 8006422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006424:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800642a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e5      	bne.n	8006404 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643c:	2b01      	cmp	r3, #1
 800643e:	d118      	bne.n	8006472 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	60bb      	str	r3, [r7, #8]
   return(result);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006486:	bf00      	nop
 8006488:	3754      	adds	r7, #84	; 0x54
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff fb51 	bl	8005b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b088      	sub	sp, #32
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6979      	ldr	r1, [r7, #20]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	613b      	str	r3, [r7, #16]
   return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e6      	bne.n	80064c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fb1d 	bl	8005b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650a:	bf00      	nop
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006514:	b084      	sub	sp, #16
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	f107 001c 	add.w	r0, r7, #28
 8006522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	2b01      	cmp	r3, #1
 800652a:	d120      	bne.n	800656e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <USB_CoreInit+0xac>)
 800653e:	4013      	ands	r3, r2
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d105      	bne.n	8006562 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa96 	bl	8006a94 <USB_CoreReset>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
 800656c:	e010      	b.n	8006590 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa8a 	bl	8006a94 <USB_CoreReset>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10b      	bne.n	80065ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f043 0206 	orr.w	r2, r3, #6
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f043 0220 	orr.w	r2, r3, #32
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ba:	b004      	add	sp, #16
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	ffbdffbf 	.word	0xffbdffbf

080065c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f023 0201 	bic.w	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d115      	bne.n	8006634 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006614:	2001      	movs	r0, #1
 8006616:	f7fb ff41 	bl	800249c <HAL_Delay>
      ms++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa29 	bl	8006a78 <USB_GetMode>
 8006626:	4603      	mov	r3, r0
 8006628:	2b01      	cmp	r3, #1
 800662a:	d01e      	beq.n	800666a <USB_SetCurrentMode+0x84>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b31      	cmp	r3, #49	; 0x31
 8006630:	d9f0      	bls.n	8006614 <USB_SetCurrentMode+0x2e>
 8006632:	e01a      	b.n	800666a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d115      	bne.n	8006666 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006646:	2001      	movs	r0, #1
 8006648:	f7fb ff28 	bl	800249c <HAL_Delay>
      ms++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa10 	bl	8006a78 <USB_GetMode>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <USB_SetCurrentMode+0x84>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b31      	cmp	r3, #49	; 0x31
 8006662:	d9f0      	bls.n	8006646 <USB_SetCurrentMode+0x60>
 8006664:	e001      	b.n	800666a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e005      	b.n	8006676 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b32      	cmp	r3, #50	; 0x32
 800666e:	d101      	bne.n	8006674 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006680:	b084      	sub	sp, #16
 8006682:	b580      	push	{r7, lr}
 8006684:	b086      	sub	sp, #24
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800668e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	e009      	b.n	80066b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	3340      	adds	r3, #64	; 0x40
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	3301      	adds	r3, #1
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b0e      	cmp	r3, #14
 80066b8:	d9f2      	bls.n	80066a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11c      	bne.n	80066fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ce:	f043 0302 	orr.w	r3, r3, #2
 80066d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e005      	b.n	8006706 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	4619      	mov	r1, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	461a      	mov	r2, r3
 8006722:	680b      	ldr	r3, [r1, #0]
 8006724:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10c      	bne.n	8006746 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006732:	2100      	movs	r1, #0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f965 	bl	8006a04 <USB_SetDevSpeed>
 800673a:	e008      	b.n	800674e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800673c:	2101      	movs	r1, #1
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f960 	bl	8006a04 <USB_SetDevSpeed>
 8006744:	e003      	b.n	800674e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006746:	2103      	movs	r1, #3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f95b 	bl	8006a04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800674e:	2110      	movs	r1, #16
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8f3 	bl	800693c <USB_FlushTxFifo>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f91f 	bl	80069a4 <USB_FlushRxFifo>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	461a      	mov	r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	461a      	mov	r2, r3
 8006784:	2300      	movs	r3, #0
 8006786:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	461a      	mov	r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e043      	b.n	8006822 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d118      	bne.n	80067e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	e013      	b.n	80067f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	e008      	b.n	80067f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	461a      	mov	r2, r3
 8006816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800681a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3301      	adds	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d3b7      	bcc.n	800679a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	e043      	b.n	80068b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006846:	d118      	bne.n	800687a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e013      	b.n	800688c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e008      	b.n	800688c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006886:	461a      	mov	r2, r3
 8006888:	2300      	movs	r3, #0
 800688a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068aa:	461a      	mov	r2, r3
 80068ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3301      	adds	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3b7      	bcc.n	8006830 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f043 0210 	orr.w	r2, r3, #16
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <USB_DevInit+0x2b4>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f043 0208 	orr.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d105      	bne.n	8006924 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <USB_DevInit+0x2b8>)
 800691e:	4313      	orrs	r3, r2
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006924:	7dfb      	ldrb	r3, [r7, #23]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006930:	b004      	add	sp, #16
 8006932:	4770      	bx	lr
 8006934:	803c3800 	.word	0x803c3800
 8006938:	40000004 	.word	0x40000004

0800693c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <USB_FlushTxFifo+0x64>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d901      	bls.n	800695c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e01b      	b.n	8006994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	daf2      	bge.n	800694a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	019b      	lsls	r3, r3, #6
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3301      	adds	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <USB_FlushTxFifo+0x64>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d901      	bls.n	8006986 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e006      	b.n	8006994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b20      	cmp	r3, #32
 8006990:	d0f0      	beq.n	8006974 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	00030d40 	.word	0x00030d40

080069a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a11      	ldr	r2, [pc, #68]	; (8006a00 <USB_FlushRxFifo+0x5c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e018      	b.n	80069f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	daf2      	bge.n	80069b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2210      	movs	r2, #16
 80069d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <USB_FlushRxFifo+0x5c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d901      	bls.n	80069e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e006      	b.n	80069f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d0f0      	beq.n	80069d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	00030d40 	.word	0x00030d40

08006a04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a24:	4313      	orrs	r3, r2
 8006a26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a50:	f023 0303 	bic.w	r3, r3, #3
 8006a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a64:	f043 0302 	orr.w	r3, r3, #2
 8006a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	f003 0301 	and.w	r3, r3, #1
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a13      	ldr	r2, [pc, #76]	; (8006af8 <USB_CoreReset+0x64>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d901      	bls.n	8006ab2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e01b      	b.n	8006aea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	daf2      	bge.n	8006aa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f043 0201 	orr.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3301      	adds	r3, #1
 8006ace:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <USB_CoreReset+0x64>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e006      	b.n	8006aea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d0f0      	beq.n	8006aca <USB_CoreReset+0x36>

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	00030d40 	.word	0x00030d40

08006afc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b12:	f3ef 8305 	mrs	r3, IPSR
 8006b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10f      	bne.n	8006b3e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b22:	607b      	str	r3, [r7, #4]
  return(result);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d105      	bne.n	8006b36 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <osKernelInitialize+0x3a>
 8006b36:	4b0e      	ldr	r3, [pc, #56]	; (8006b70 <osKernelInitialize+0x64>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d103      	bne.n	8006b46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006b3e:	f06f 0305 	mvn.w	r3, #5
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e00c      	b.n	8006b60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b46:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <osKernelInitialize+0x64>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b4e:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <osKernelInitialize+0x64>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	e002      	b.n	8006b60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b60:	68fb      	ldr	r3, [r7, #12]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	200009f4 	.word	0x200009f4

08006b74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b7a:	f3ef 8305 	mrs	r3, IPSR
 8006b7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10f      	bne.n	8006ba6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b86:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8a:	607b      	str	r3, [r7, #4]
  return(result);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d105      	bne.n	8006b9e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b92:	f3ef 8311 	mrs	r3, BASEPRI
 8006b96:	603b      	str	r3, [r7, #0]
  return(result);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <osKernelStart+0x3a>
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <osKernelStart+0x68>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d103      	bne.n	8006bae <osKernelStart+0x3a>
    stat = osErrorISR;
 8006ba6:	f06f 0305 	mvn.w	r3, #5
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e010      	b.n	8006bd0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006bae:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <osKernelStart+0x68>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d109      	bne.n	8006bca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006bb6:	f7ff ffa1 	bl	8006afc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006bba:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <osKernelStart+0x68>)
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006bc0:	f001 fa3e 	bl	8008040 <vTaskStartScheduler>
      stat = osOK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e002      	b.n	8006bd0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295
 8006bce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200009f4 	.word	0x200009f4

08006be0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b090      	sub	sp, #64	; 0x40
 8006be4:	af04      	add	r7, sp, #16
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf0:	f3ef 8305 	mrs	r3, IPSR
 8006bf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006bf6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 808f 	bne.w	8006d1c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8006c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c0e:	617b      	str	r3, [r7, #20]
  return(result);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <osThreadNew+0x3e>
 8006c16:	4b44      	ldr	r3, [pc, #272]	; (8006d28 <osThreadNew+0x148>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d07e      	beq.n	8006d1c <osThreadNew+0x13c>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d07b      	beq.n	8006d1c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006c28:	2318      	movs	r3, #24
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d045      	beq.n	8006cc8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <osThreadNew+0x6a>
        name = attr->name;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <osThreadNew+0x90>
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	2b38      	cmp	r3, #56	; 0x38
 8006c62:	d805      	bhi.n	8006c70 <osThreadNew+0x90>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <osThreadNew+0x94>
        return (NULL);
 8006c70:	2300      	movs	r3, #0
 8006c72:	e054      	b.n	8006d1e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	089b      	lsrs	r3, r3, #2
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <osThreadNew+0xca>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2ba7      	cmp	r3, #167	; 0xa7
 8006c92:	d90a      	bls.n	8006caa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d006      	beq.n	8006caa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <osThreadNew+0xca>
        mem = 1;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	623b      	str	r3, [r7, #32]
 8006ca8:	e010      	b.n	8006ccc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10c      	bne.n	8006ccc <osThreadNew+0xec>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d108      	bne.n	8006ccc <osThreadNew+0xec>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <osThreadNew+0xec>
          mem = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	623b      	str	r3, [r7, #32]
 8006cc6:	e001      	b.n	8006ccc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d110      	bne.n	8006cf4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cda:	9202      	str	r2, [sp, #8]
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 fea7 	bl	8007a3c <xTaskCreateStatic>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	e013      	b.n	8006d1c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d110      	bne.n	8006d1c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fef8 	bl	8007b02 <xTaskCreate>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d001      	beq.n	8006d1c <osThreadNew+0x13c>
          hTask = NULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d1c:	693b      	ldr	r3, [r7, #16]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3730      	adds	r7, #48	; 0x30
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	200009f4 	.word	0x200009f4

08006d2c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d38:	f3ef 8305 	mrs	r3, IPSR
 8006d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8006d3e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10f      	bne.n	8006d64 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d44:	f3ef 8310 	mrs	r3, PRIMASK
 8006d48:	613b      	str	r3, [r7, #16]
  return(result);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d105      	bne.n	8006d5c <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d50:	f3ef 8311 	mrs	r3, BASEPRI
 8006d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <osThreadSuspend+0x40>
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <osThreadSuspend+0x64>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d103      	bne.n	8006d6c <osThreadSuspend+0x40>
    stat = osErrorISR;
 8006d64:	f06f 0305 	mvn.w	r3, #5
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	e00b      	b.n	8006d84 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d103      	bne.n	8006d7a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8006d72:	f06f 0303 	mvn.w	r3, #3
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e004      	b.n	8006d84 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8006d7e:	69b8      	ldr	r0, [r7, #24]
 8006d80:	f001 f852 	bl	8007e28 <vTaskSuspend>
  }

  return (stat);
 8006d84:	69fb      	ldr	r3, [r7, #28]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	200009f4 	.word	0x200009f4

08006d94 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da0:	f3ef 8305 	mrs	r3, IPSR
 8006da4:	617b      	str	r3, [r7, #20]
  return(result);
 8006da6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dac:	f3ef 8310 	mrs	r3, PRIMASK
 8006db0:	613b      	str	r3, [r7, #16]
  return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006db8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <osThreadResume+0x40>
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <osThreadResume+0x64>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d103      	bne.n	8006dd4 <osThreadResume+0x40>
    stat = osErrorISR;
 8006dcc:	f06f 0305 	mvn.w	r3, #5
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	e00b      	b.n	8006dec <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8006dda:	f06f 0303 	mvn.w	r3, #3
 8006dde:	61fb      	str	r3, [r7, #28]
 8006de0:	e004      	b.n	8006dec <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8006de6:	69b8      	ldr	r0, [r7, #24]
 8006de8:	f001 f8ca 	bl	8007f80 <vTaskResume>
  }

  return (stat);
 8006dec:	69fb      	ldr	r3, [r7, #28]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200009f4 	.word	0x200009f4

08006dfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e04:	f3ef 8305 	mrs	r3, IPSR
 8006e08:	613b      	str	r3, [r7, #16]
  return(result);
 8006e0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e10:	f3ef 8310 	mrs	r3, PRIMASK
 8006e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <osDelay+0x3c>
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <osDelay+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d103      	bne.n	8006e38 <osDelay+0x3c>
    stat = osErrorISR;
 8006e30:	f06f 0305 	mvn.w	r3, #5
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	e007      	b.n	8006e48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 ffba 	bl	8007dbc <vTaskDelay>
    }
  }

  return (stat);
 8006e48:	697b      	ldr	r3, [r7, #20]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200009f4 	.word	0x200009f4

08006e58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4a06      	ldr	r2, [pc, #24]	; (8006e88 <vApplicationGetIdleTaskMemory+0x30>)
 8006e6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2280      	movs	r2, #128	; 0x80
 8006e74:	601a      	str	r2, [r3, #0]
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	200009f8 	.word	0x200009f8
 8006e88:	20000aa0 	.word	0x20000aa0

08006e8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4a06      	ldr	r2, [pc, #24]	; (8006ebc <vApplicationGetTimerTaskMemory+0x30>)
 8006ea2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eaa:	601a      	str	r2, [r3, #0]
}
 8006eac:	bf00      	nop
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	20000ca0 	.word	0x20000ca0
 8006ebc:	20000d48 	.word	0x20000d48

08006ec0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f103 0208 	add.w	r2, r3, #8
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f103 0208 	add.w	r2, r3, #8
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f103 0208 	add.w	r2, r3, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d103      	bne.n	8006f82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e00c      	b.n	8006f9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3308      	adds	r3, #8
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e002      	b.n	8006f90 <vListInsert+0x2e>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d2f6      	bcs.n	8006f8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6892      	ldr	r2, [r2, #8]
 8006fea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6852      	ldr	r2, [r2, #4]
 8006ff4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d103      	bne.n	8007008 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	b672      	cpsid	i
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	b662      	cpsie	i
 8007050:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007056:	f002 f9b1 	bl	80093bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	441a      	add	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	3b01      	subs	r3, #1
 8007088:	68f9      	ldr	r1, [r7, #12]
 800708a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	22ff      	movs	r2, #255	; 0xff
 800709a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	22ff      	movs	r2, #255	; 0xff
 80070a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d114      	bne.n	80070d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01a      	beq.n	80070ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3310      	adds	r3, #16
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 fa69 	bl	8008590 <xTaskRemoveFromEventList>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d012      	beq.n	80070ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <xQueueGenericReset+0xd0>)
 80070c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	e009      	b.n	80070ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3310      	adds	r3, #16
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fef0 	bl	8006ec0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff feeb 	bl	8006ec0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f002 f99b 	bl	8009424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070ee:	2301      	movs	r3, #1
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08e      	sub	sp, #56	; 0x38
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10c      	bne.n	800712a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	b672      	cpsid	i
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	b662      	cpsie	i
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10c      	bne.n	800714a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <xQueueGenericCreateStatic+0x5a>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <xQueueGenericCreateStatic+0x5e>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <xQueueGenericCreateStatic+0x60>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10c      	bne.n	800717a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	b672      	cpsid	i
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	b662      	cpsie	i
 8007174:	623b      	str	r3, [r7, #32]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <xQueueGenericCreateStatic+0x8a>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <xQueueGenericCreateStatic+0x8e>
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <xQueueGenericCreateStatic+0x90>
 800718a:	2300      	movs	r3, #0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10c      	bne.n	80071aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	b672      	cpsid	i
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	b662      	cpsie	i
 80071a4:	61fb      	str	r3, [r7, #28]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071aa:	2350      	movs	r3, #80	; 0x50
 80071ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b50      	cmp	r3, #80	; 0x50
 80071b2:	d00c      	beq.n	80071ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	b672      	cpsid	i
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	b662      	cpsie	i
 80071c8:	61bb      	str	r3, [r7, #24]
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00d      	beq.n	80071f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f805 	bl	8007200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3730      	adds	r7, #48	; 0x30
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e002      	b.n	8007222 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800722e:	2101      	movs	r1, #1
 8007230:	69b8      	ldr	r0, [r7, #24]
 8007232:	f7ff fef9 	bl	8007028 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	78fa      	ldrb	r2, [r7, #3]
 800723a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08e      	sub	sp, #56	; 0x38
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007256:	2300      	movs	r3, #0
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10c      	bne.n	800727e <xQueueGenericSend+0x36>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	b672      	cpsid	i
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	b662      	cpsie	i
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800727a:	bf00      	nop
 800727c:	e7fe      	b.n	800727c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <xQueueGenericSend+0x44>
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <xQueueGenericSend+0x48>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <xQueueGenericSend+0x4a>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10c      	bne.n	80072b0 <xQueueGenericSend+0x68>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	b672      	cpsid	i
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	b662      	cpsie	i
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072ac:	bf00      	nop
 80072ae:	e7fe      	b.n	80072ae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d103      	bne.n	80072be <xQueueGenericSend+0x76>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <xQueueGenericSend+0x7a>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <xQueueGenericSend+0x7c>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10c      	bne.n	80072e2 <xQueueGenericSend+0x9a>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	b672      	cpsid	i
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	b662      	cpsie	i
 80072dc:	623b      	str	r3, [r7, #32]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072e2:	f001 fb1f 	bl	8008924 <xTaskGetSchedulerState>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <xQueueGenericSend+0xaa>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <xQueueGenericSend+0xae>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <xQueueGenericSend+0xb0>
 80072f6:	2300      	movs	r3, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10c      	bne.n	8007316 <xQueueGenericSend+0xce>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	b672      	cpsid	i
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	b662      	cpsie	i
 8007310:	61fb      	str	r3, [r7, #28]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007316:	f002 f851 	bl	80093bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <xQueueGenericSend+0xe4>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d129      	bne.n	8007380 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007332:	f000 fa15 	bl	8007760 <prvCopyDataToQueue>
 8007336:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d010      	beq.n	8007362 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	3324      	adds	r3, #36	; 0x24
 8007344:	4618      	mov	r0, r3
 8007346:	f001 f923 	bl	8008590 <xTaskRemoveFromEventList>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d013      	beq.n	8007378 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007350:	4b3f      	ldr	r3, [pc, #252]	; (8007450 <xQueueGenericSend+0x208>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	e00a      	b.n	8007378 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007368:	4b39      	ldr	r3, [pc, #228]	; (8007450 <xQueueGenericSend+0x208>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007378:	f002 f854 	bl	8009424 <vPortExitCritical>
				return pdPASS;
 800737c:	2301      	movs	r3, #1
 800737e:	e063      	b.n	8007448 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007386:	f002 f84d 	bl	8009424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800738a:	2300      	movs	r3, #0
 800738c:	e05c      	b.n	8007448 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007394:	f107 0314 	add.w	r3, r7, #20
 8007398:	4618      	mov	r0, r3
 800739a:	f001 f95f 	bl	800865c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073a2:	f002 f83f 	bl	8009424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073a6:	f000 febf 	bl	8008128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073aa:	f002 f807 	bl	80093bc <vPortEnterCritical>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d103      	bne.n	80073c4 <xQueueGenericSend+0x17c>
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ca:	b25b      	sxtb	r3, r3
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d103      	bne.n	80073da <xQueueGenericSend+0x192>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073da:	f002 f823 	bl	8009424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073de:	1d3a      	adds	r2, r7, #4
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f94e 	bl	8008688 <xTaskCheckForTimeOut>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d124      	bne.n	800743c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073f4:	f000 faac 	bl	8007950 <prvIsQueueFull>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d018      	beq.n	8007430 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	3310      	adds	r3, #16
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f001 f86e 	bl	80084e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800740c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800740e:	f000 fa37 	bl	8007880 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007412:	f000 fe97 	bl	8008144 <xTaskResumeAll>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f af7c 	bne.w	8007316 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <xQueueGenericSend+0x208>)
 8007420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	e772      	b.n	8007316 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007432:	f000 fa25 	bl	8007880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007436:	f000 fe85 	bl	8008144 <xTaskResumeAll>
 800743a:	e76c      	b.n	8007316 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800743c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800743e:	f000 fa1f 	bl	8007880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007442:	f000 fe7f 	bl	8008144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007448:	4618      	mov	r0, r3
 800744a:	3738      	adds	r7, #56	; 0x38
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	; 0x38
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	b672      	cpsid	i
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	b662      	cpsie	i
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <xQueueGenericSendFromISR+0x40>
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <xQueueGenericSendFromISR+0x44>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <xQueueGenericSendFromISR+0x46>
 8007498:	2300      	movs	r3, #0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10c      	bne.n	80074b8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	b672      	cpsid	i
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	b662      	cpsie	i
 80074b2:	623b      	str	r3, [r7, #32]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d103      	bne.n	80074c6 <xQueueGenericSendFromISR+0x72>
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <xQueueGenericSendFromISR+0x76>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueGenericSendFromISR+0x78>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10c      	bne.n	80074ea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	b672      	cpsid	i
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	b662      	cpsie	i
 80074e4:	61fb      	str	r3, [r7, #28]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074ea:	f002 f84f 	bl	800958c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074ee:	f3ef 8211 	mrs	r2, BASEPRI
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	b672      	cpsid	i
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	b662      	cpsie	i
 8007506:	61ba      	str	r2, [r7, #24]
 8007508:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800750a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <xQueueGenericSendFromISR+0xcc>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d12c      	bne.n	800757a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007530:	f000 f916 	bl	8007760 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007534:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d112      	bne.n	8007564 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	3324      	adds	r3, #36	; 0x24
 800754a:	4618      	mov	r0, r3
 800754c:	f001 f820 	bl	8008590 <xTaskRemoveFromEventList>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00e      	beq.n	8007574 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e007      	b.n	8007574 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007568:	3301      	adds	r3, #1
 800756a:	b2db      	uxtb	r3, r3
 800756c:	b25a      	sxtb	r2, r3
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007574:	2301      	movs	r3, #1
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007578:	e001      	b.n	800757e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800757a:	2300      	movs	r3, #0
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007588:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800758c:	4618      	mov	r0, r3
 800758e:	3738      	adds	r7, #56	; 0x38
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08c      	sub	sp, #48	; 0x30
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <xQueueReceive+0x34>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	b672      	cpsid	i
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	b662      	cpsie	i
 80075c2:	623b      	str	r3, [r7, #32]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <xQueueReceive+0x42>
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <xQueueReceive+0x46>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <xQueueReceive+0x48>
 80075da:	2300      	movs	r3, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10c      	bne.n	80075fa <xQueueReceive+0x66>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	b672      	cpsid	i
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	b662      	cpsie	i
 80075f4:	61fb      	str	r3, [r7, #28]
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075fa:	f001 f993 	bl	8008924 <xTaskGetSchedulerState>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <xQueueReceive+0x76>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <xQueueReceive+0x7a>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <xQueueReceive+0x7c>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10c      	bne.n	800762e <xQueueReceive+0x9a>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	b672      	cpsid	i
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	b662      	cpsie	i
 8007628:	61bb      	str	r3, [r7, #24]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800762e:	f001 fec5 	bl	80093bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01f      	beq.n	800767e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007642:	f000 f8f7 	bl	8007834 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	1e5a      	subs	r2, r3, #1
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00f      	beq.n	8007676 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	3310      	adds	r3, #16
 800765a:	4618      	mov	r0, r3
 800765c:	f000 ff98 	bl	8008590 <xTaskRemoveFromEventList>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007666:	4b3d      	ldr	r3, [pc, #244]	; (800775c <xQueueReceive+0x1c8>)
 8007668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007676:	f001 fed5 	bl	8009424 <vPortExitCritical>
				return pdPASS;
 800767a:	2301      	movs	r3, #1
 800767c:	e069      	b.n	8007752 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007684:	f001 fece 	bl	8009424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007688:	2300      	movs	r3, #0
 800768a:	e062      	b.n	8007752 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007692:	f107 0310 	add.w	r3, r7, #16
 8007696:	4618      	mov	r0, r3
 8007698:	f000 ffe0 	bl	800865c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800769c:	2301      	movs	r3, #1
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076a0:	f001 fec0 	bl	8009424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076a4:	f000 fd40 	bl	8008128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a8:	f001 fe88 	bl	80093bc <vPortEnterCritical>
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d103      	bne.n	80076c2 <xQueueReceive+0x12e>
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c8:	b25b      	sxtb	r3, r3
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d103      	bne.n	80076d8 <xQueueReceive+0x144>
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d8:	f001 fea4 	bl	8009424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076dc:	1d3a      	adds	r2, r7, #4
 80076de:	f107 0310 	add.w	r3, r7, #16
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ffcf 	bl	8008688 <xTaskCheckForTimeOut>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d123      	bne.n	8007738 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f2:	f000 f917 	bl	8007924 <prvIsQueueEmpty>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d017      	beq.n	800772c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	3324      	adds	r3, #36	; 0x24
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f000 feef 	bl	80084e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800770a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800770c:	f000 f8b8 	bl	8007880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007710:	f000 fd18 	bl	8008144 <xTaskResumeAll>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d189      	bne.n	800762e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800771a:	4b10      	ldr	r3, [pc, #64]	; (800775c <xQueueReceive+0x1c8>)
 800771c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	e780      	b.n	800762e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800772c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772e:	f000 f8a7 	bl	8007880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007732:	f000 fd07 	bl	8008144 <xTaskResumeAll>
 8007736:	e77a      	b.n	800762e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773a:	f000 f8a1 	bl	8007880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800773e:	f000 fd01 	bl	8008144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007744:	f000 f8ee 	bl	8007924 <prvIsQueueEmpty>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	f43f af6f 	beq.w	800762e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007750:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007752:	4618      	mov	r0, r3
 8007754:	3730      	adds	r7, #48	; 0x30
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10d      	bne.n	800779a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d14d      	bne.n	8007822 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	4618      	mov	r0, r3
 800778c:	f001 f8e8 	bl	8008960 <xTaskPriorityDisinherit>
 8007790:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	609a      	str	r2, [r3, #8]
 8007798:	e043      	b.n	8007822 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d119      	bne.n	80077d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6858      	ldr	r0, [r3, #4]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	461a      	mov	r2, r3
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	f002 ff4d 	bl	800a64a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	441a      	add	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d32b      	bcc.n	8007822 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]
 80077d2:	e026      	b.n	8007822 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	68d8      	ldr	r0, [r3, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	461a      	mov	r2, r3
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	f002 ff33 	bl	800a64a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	425b      	negs	r3, r3
 80077ee:	441a      	add	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d207      	bcs.n	8007810 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	425b      	negs	r3, r3
 800780a:	441a      	add	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d105      	bne.n	8007822 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	3b01      	subs	r3, #1
 8007820:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800782a:	697b      	ldr	r3, [r7, #20]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d018      	beq.n	8007878 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	441a      	add	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d303      	bcc.n	8007868 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68d9      	ldr	r1, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	461a      	mov	r2, r3
 8007872:	6838      	ldr	r0, [r7, #0]
 8007874:	f002 fee9 	bl	800a64a <memcpy>
	}
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007888:	f001 fd98 	bl	80093bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007892:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007894:	e011      	b.n	80078ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d012      	beq.n	80078c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fe74 	bl	8008590 <xTaskRemoveFromEventList>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078ae:	f000 ff51 	bl	8008754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dce9      	bgt.n	8007896 <prvUnlockQueue+0x16>
 80078c2:	e000      	b.n	80078c6 <prvUnlockQueue+0x46>
					break;
 80078c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	22ff      	movs	r2, #255	; 0xff
 80078ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80078ce:	f001 fda9 	bl	8009424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078d2:	f001 fd73 	bl	80093bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078de:	e011      	b.n	8007904 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d012      	beq.n	800790e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3310      	adds	r3, #16
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fe4f 	bl	8008590 <xTaskRemoveFromEventList>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078f8:	f000 ff2c 	bl	8008754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	3b01      	subs	r3, #1
 8007900:	b2db      	uxtb	r3, r3
 8007902:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	dce9      	bgt.n	80078e0 <prvUnlockQueue+0x60>
 800790c:	e000      	b.n	8007910 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800790e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	22ff      	movs	r2, #255	; 0xff
 8007914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007918:	f001 fd84 	bl	8009424 <vPortExitCritical>
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800792c:	f001 fd46 	bl	80093bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	d102      	bne.n	800793e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007938:	2301      	movs	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e001      	b.n	8007942 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007942:	f001 fd6f 	bl	8009424 <vPortExitCritical>

	return xReturn;
 8007946:	68fb      	ldr	r3, [r7, #12]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007958:	f001 fd30 	bl	80093bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007964:	429a      	cmp	r2, r3
 8007966:	d102      	bne.n	800796e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e001      	b.n	8007972 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007972:	f001 fd57 	bl	8009424 <vPortExitCritical>

	return xReturn;
 8007976:	68fb      	ldr	r3, [r7, #12]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	e014      	b.n	80079ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007990:	4a0f      	ldr	r2, [pc, #60]	; (80079d0 <vQueueAddToRegistry+0x50>)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10b      	bne.n	80079b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800799c:	490c      	ldr	r1, [pc, #48]	; (80079d0 <vQueueAddToRegistry+0x50>)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079a6:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <vQueueAddToRegistry+0x50>)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	4413      	add	r3, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80079b2:	e006      	b.n	80079c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b07      	cmp	r3, #7
 80079be:	d9e7      	bls.n	8007990 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079c0:	bf00      	nop
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20001148 	.word	0x20001148

080079d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80079e4:	f001 fcea 	bl	80093bc <vPortEnterCritical>
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079ee:	b25b      	sxtb	r3, r3
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f4:	d103      	bne.n	80079fe <vQueueWaitForMessageRestricted+0x2a>
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a04:	b25b      	sxtb	r3, r3
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d103      	bne.n	8007a14 <vQueueWaitForMessageRestricted+0x40>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a14:	f001 fd06 	bl	8009424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	3324      	adds	r3, #36	; 0x24
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fd83 	bl	8008534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a2e:	6978      	ldr	r0, [r7, #20]
 8007a30:	f7ff ff26 	bl	8007880 <prvUnlockQueue>
	}
 8007a34:	bf00      	nop
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08e      	sub	sp, #56	; 0x38
 8007a40:	af04      	add	r7, sp, #16
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10c      	bne.n	8007a6a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	623b      	str	r3, [r7, #32]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10c      	bne.n	8007a8a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	b672      	cpsid	i
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	b662      	cpsie	i
 8007a84:	61fb      	str	r3, [r7, #28]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a8a:	23a8      	movs	r3, #168	; 0xa8
 8007a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2ba8      	cmp	r3, #168	; 0xa8
 8007a92:	d00c      	beq.n	8007aae <xTaskCreateStatic+0x72>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	b672      	cpsid	i
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	b662      	cpsie	i
 8007aa8:	61bb      	str	r3, [r7, #24]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007aae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01e      	beq.n	8007af4 <xTaskCreateStatic+0xb8>
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01b      	beq.n	8007af4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	2202      	movs	r2, #2
 8007aca:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	9302      	str	r3, [sp, #8]
 8007ad6:	f107 0314 	add.w	r3, r7, #20
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f850 	bl	8007b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aee:	f000 f8f5 	bl	8007cdc <prvAddNewTaskToReadyList>
 8007af2:	e001      	b.n	8007af8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007af8:	697b      	ldr	r3, [r7, #20]
	}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3728      	adds	r7, #40	; 0x28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b08c      	sub	sp, #48	; 0x30
 8007b06:	af04      	add	r7, sp, #16
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 fd7c 	bl	8009614 <pvPortMalloc>
 8007b1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00e      	beq.n	8007b42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b24:	20a8      	movs	r0, #168	; 0xa8
 8007b26:	f001 fd75 	bl	8009614 <pvPortMalloc>
 8007b2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	631a      	str	r2, [r3, #48]	; 0x30
 8007b38:	e005      	b.n	8007b46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b3a:	6978      	ldr	r0, [r7, #20]
 8007b3c:	f001 fe34 	bl	80097a8 <vPortFree>
 8007b40:	e001      	b.n	8007b46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d017      	beq.n	8007b7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b54:	88fa      	ldrh	r2, [r7, #6]
 8007b56:	2300      	movs	r3, #0
 8007b58:	9303      	str	r3, [sp, #12]
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	9302      	str	r3, [sp, #8]
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f80e 	bl	8007b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b70:	69f8      	ldr	r0, [r7, #28]
 8007b72:	f000 f8b3 	bl	8007cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b76:	2301      	movs	r3, #1
 8007b78:	61bb      	str	r3, [r7, #24]
 8007b7a:	e002      	b.n	8007b82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b82:	69bb      	ldr	r3, [r7, #24]
	}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3720      	adds	r7, #32
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	21a5      	movs	r1, #165	; 0xa5
 8007ba6:	f002 fc7a 	bl	800a49e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007bb4:	440b      	add	r3, r1
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f023 0307 	bic.w	r3, r3, #7
 8007bc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00c      	beq.n	8007be8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	b672      	cpsid	i
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	b662      	cpsie	i
 8007be2:	617b      	str	r3, [r7, #20]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01f      	beq.n	8007c2e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	e012      	b.n	8007c1a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	7819      	ldrb	r1, [r3, #0]
 8007bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	3334      	adds	r3, #52	; 0x34
 8007c04:	460a      	mov	r2, r1
 8007c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d006      	beq.n	8007c22 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3301      	adds	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	2b0f      	cmp	r3, #15
 8007c1e:	d9e9      	bls.n	8007bf4 <prvInitialiseNewTask+0x68>
 8007c20:	e000      	b.n	8007c24 <prvInitialiseNewTask+0x98>
			{
				break;
 8007c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c2c:	e003      	b.n	8007c36 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	2b37      	cmp	r3, #55	; 0x37
 8007c3a:	d901      	bls.n	8007c40 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c3c:	2337      	movs	r3, #55	; 0x37
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	2200      	movs	r2, #0
 8007c50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	3304      	adds	r3, #4
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff f952 	bl	8006f00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	3318      	adds	r3, #24
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff f94d 	bl	8006f00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	3354      	adds	r3, #84	; 0x54
 8007c90:	224c      	movs	r2, #76	; 0x4c
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f002 fc02 	bl	800a49e <memset>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <prvInitialiseNewTask+0x144>)
 8007c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <prvInitialiseNewTask+0x148>)
 8007ca4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	4a0b      	ldr	r2, [pc, #44]	; (8007cd8 <prvInitialiseNewTask+0x14c>)
 8007caa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	69b8      	ldr	r0, [r7, #24]
 8007cb2:	f001 fa77 	bl	80091a4 <pxPortInitialiseStack>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc8:	bf00      	nop
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200053d4 	.word	0x200053d4
 8007cd4:	2000543c 	.word	0x2000543c
 8007cd8:	200054a4 	.word	0x200054a4

08007cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ce4:	f001 fb6a 	bl	80093bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ce8:	4b2d      	ldr	r3, [pc, #180]	; (8007da0 <prvAddNewTaskToReadyList+0xc4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3301      	adds	r3, #1
 8007cee:	4a2c      	ldr	r2, [pc, #176]	; (8007da0 <prvAddNewTaskToReadyList+0xc4>)
 8007cf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cf2:	4b2c      	ldr	r3, [pc, #176]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cfa:	4a2a      	ldr	r2, [pc, #168]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d00:	4b27      	ldr	r3, [pc, #156]	; (8007da0 <prvAddNewTaskToReadyList+0xc4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d110      	bne.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d08:	f000 fd48 	bl	800879c <prvInitialiseTaskLists>
 8007d0c:	e00d      	b.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <prvAddNewTaskToReadyList+0xcc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d16:	4b23      	ldr	r3, [pc, #140]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d802      	bhi.n	8007d2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d24:	4a1f      	ldr	r2, [pc, #124]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d2a:	4b20      	ldr	r3, [pc, #128]	; (8007dac <prvAddNewTaskToReadyList+0xd0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	4a1e      	ldr	r2, [pc, #120]	; (8007dac <prvAddNewTaskToReadyList+0xd0>)
 8007d32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d34:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <prvAddNewTaskToReadyList+0xd0>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <prvAddNewTaskToReadyList+0xd4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d903      	bls.n	8007d50 <prvAddNewTaskToReadyList+0x74>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	4a18      	ldr	r2, [pc, #96]	; (8007db0 <prvAddNewTaskToReadyList+0xd4>)
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <prvAddNewTaskToReadyList+0xd8>)
 8007d5e:	441a      	add	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7ff f8d7 	bl	8006f1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d6c:	f001 fb5a 	bl	8009424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d70:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <prvAddNewTaskToReadyList+0xcc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00e      	beq.n	8007d96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <prvAddNewTaskToReadyList+0xc8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d207      	bcs.n	8007d96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d86:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <prvAddNewTaskToReadyList+0xdc>)
 8007d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	2000165c 	.word	0x2000165c
 8007da4:	20001188 	.word	0x20001188
 8007da8:	20001668 	.word	0x20001668
 8007dac:	20001678 	.word	0x20001678
 8007db0:	20001664 	.word	0x20001664
 8007db4:	2000118c 	.word	0x2000118c
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d019      	beq.n	8007e02 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <vTaskDelay+0x64>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00c      	beq.n	8007df0 <vTaskDelay+0x34>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	b672      	cpsid	i
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	b662      	cpsie	i
 8007dea:	60bb      	str	r3, [r7, #8]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007df0:	f000 f99a 	bl	8008128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007df4:	2100      	movs	r1, #0
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fe24 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007dfc:	f000 f9a2 	bl	8008144 <xTaskResumeAll>
 8007e00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d107      	bne.n	8007e18 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <vTaskDelay+0x68>)
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20001684 	.word	0x20001684
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e30:	f001 fac4 	bl	80093bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <vTaskSuspend+0x18>
 8007e3a:	4b31      	ldr	r3, [pc, #196]	; (8007f00 <vTaskSuspend+0xd8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	e000      	b.n	8007e42 <vTaskSuspend+0x1a>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff f8c3 	bl	8006fd4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3318      	adds	r3, #24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff f8ba 	bl	8006fd4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4827      	ldr	r0, [pc, #156]	; (8007f04 <vTaskSuspend+0xdc>)
 8007e68:	f7ff f857 	bl	8006f1a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d103      	bne.n	8007e80 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007e80:	f001 fad0 	bl	8009424 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007e84:	4b20      	ldr	r3, [pc, #128]	; (8007f08 <vTaskSuspend+0xe0>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007e8c:	f001 fa96 	bl	80093bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007e90:	f000 fd28 	bl	80088e4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007e94:	f001 fac6 	bl	8009424 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007e98:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <vTaskSuspend+0xd8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d129      	bne.n	8007ef6 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8007ea2:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <vTaskSuspend+0xe0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d019      	beq.n	8007ede <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007eaa:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <vTaskSuspend+0xe4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00c      	beq.n	8007ecc <vTaskSuspend+0xa4>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	b672      	cpsid	i
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	b662      	cpsie	i
 8007ec6:	60bb      	str	r3, [r7, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8007ecc:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <vTaskSuspend+0xe8>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007edc:	e00b      	b.n	8007ef6 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <vTaskSuspend+0xdc>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <vTaskSuspend+0xec>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d103      	bne.n	8007ef2 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <vTaskSuspend+0xd8>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
	}
 8007ef0:	e001      	b.n	8007ef6 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8007ef2:	f000 fa93 	bl	800841c <vTaskSwitchContext>
	}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20001188 	.word	0x20001188
 8007f04:	20001648 	.word	0x20001648
 8007f08:	20001668 	.word	0x20001668
 8007f0c:	20001684 	.word	0x20001684
 8007f10:	e000ed04 	.word	0xe000ed04
 8007f14:	2000165c 	.word	0x2000165c

08007f18 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10c      	bne.n	8007f48 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	b672      	cpsid	i
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	b662      	cpsie	i
 8007f42:	60fb      	str	r3, [r7, #12]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <prvTaskIsTaskSuspended+0x60>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d10a      	bne.n	8007f68 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	4a09      	ldr	r2, [pc, #36]	; (8007f7c <prvTaskIsTaskSuspended+0x64>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d005      	beq.n	8007f68 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f68:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20001648 	.word	0x20001648
 8007f7c:	2000161c 	.word	0x2000161c

08007f80 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10c      	bne.n	8007fac <vTaskResume+0x2c>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	b672      	cpsid	i
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	b662      	cpsie	i
 8007fa6:	60bb      	str	r3, [r7, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	e7fe      	b.n	8007faa <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007fac:	4b20      	ldr	r3, [pc, #128]	; (8008030 <vTaskResume+0xb0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d038      	beq.n	8008028 <vTaskResume+0xa8>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d035      	beq.n	8008028 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8007fbc:	f001 f9fe 	bl	80093bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff ffa9 	bl	8007f18 <prvTaskIsTaskSuspended>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02b      	beq.n	8008024 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe ffff 	bl	8006fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4b16      	ldr	r3, [pc, #88]	; (8008034 <vTaskResume+0xb4>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d903      	bls.n	8007fea <vTaskResume+0x6a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a13      	ldr	r2, [pc, #76]	; (8008034 <vTaskResume+0xb4>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <vTaskResume+0xb8>)
 8007ff8:	441a      	add	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fe ff8a 	bl	8006f1a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <vTaskResume+0xb0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	429a      	cmp	r2, r3
 8008012:	d307      	bcc.n	8008024 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <vTaskResume+0xbc>)
 8008016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008024:	f001 f9fe 	bl	8009424 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008028:	bf00      	nop
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20001188 	.word	0x20001188
 8008034:	20001664 	.word	0x20001664
 8008038:	2000118c 	.word	0x2000118c
 800803c:	e000ed04 	.word	0xe000ed04

08008040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	; 0x28
 8008044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800804e:	463a      	mov	r2, r7
 8008050:	1d39      	adds	r1, r7, #4
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fefe 	bl	8006e58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	9202      	str	r2, [sp, #8]
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	2300      	movs	r3, #0
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	460a      	mov	r2, r1
 800806e:	4926      	ldr	r1, [pc, #152]	; (8008108 <vTaskStartScheduler+0xc8>)
 8008070:	4826      	ldr	r0, [pc, #152]	; (800810c <vTaskStartScheduler+0xcc>)
 8008072:	f7ff fce3 	bl	8007a3c <xTaskCreateStatic>
 8008076:	4603      	mov	r3, r0
 8008078:	4a25      	ldr	r2, [pc, #148]	; (8008110 <vTaskStartScheduler+0xd0>)
 800807a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <vTaskStartScheduler+0xd0>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008084:	2301      	movs	r3, #1
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e001      	b.n	800808e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d102      	bne.n	800809a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008094:	f000 fd2a 	bl	8008aec <xTimerCreateTimerTask>
 8008098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d11d      	bne.n	80080dc <vTaskStartScheduler+0x9c>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	b672      	cpsid	i
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	b662      	cpsie	i
 80080b4:	613b      	str	r3, [r7, #16]
}
 80080b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080b8:	4b16      	ldr	r3, [pc, #88]	; (8008114 <vTaskStartScheduler+0xd4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3354      	adds	r3, #84	; 0x54
 80080be:	4a16      	ldr	r2, [pc, #88]	; (8008118 <vTaskStartScheduler+0xd8>)
 80080c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080c2:	4b16      	ldr	r3, [pc, #88]	; (800811c <vTaskStartScheduler+0xdc>)
 80080c4:	f04f 32ff 	mov.w	r2, #4294967295
 80080c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080ca:	4b15      	ldr	r3, [pc, #84]	; (8008120 <vTaskStartScheduler+0xe0>)
 80080cc:	2201      	movs	r2, #1
 80080ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080d0:	4b14      	ldr	r3, [pc, #80]	; (8008124 <vTaskStartScheduler+0xe4>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080d6:	f001 f8f3 	bl	80092c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080da:	e010      	b.n	80080fe <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d10c      	bne.n	80080fe <vTaskStartScheduler+0xbe>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	b672      	cpsid	i
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	b662      	cpsie	i
 80080f8:	60fb      	str	r3, [r7, #12]
}
 80080fa:	bf00      	nop
 80080fc:	e7fe      	b.n	80080fc <vTaskStartScheduler+0xbc>
}
 80080fe:	bf00      	nop
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	0800cc5c 	.word	0x0800cc5c
 800810c:	0800876d 	.word	0x0800876d
 8008110:	20001680 	.word	0x20001680
 8008114:	20001188 	.word	0x20001188
 8008118:	20000074 	.word	0x20000074
 800811c:	2000167c 	.word	0x2000167c
 8008120:	20001668 	.word	0x20001668
 8008124:	20001660 	.word	0x20001660

08008128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800812c:	4b04      	ldr	r3, [pc, #16]	; (8008140 <vTaskSuspendAll+0x18>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3301      	adds	r3, #1
 8008132:	4a03      	ldr	r2, [pc, #12]	; (8008140 <vTaskSuspendAll+0x18>)
 8008134:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008136:	bf00      	nop
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	20001684 	.word	0x20001684

08008144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800814e:	2300      	movs	r3, #0
 8008150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008152:	4b43      	ldr	r3, [pc, #268]	; (8008260 <xTaskResumeAll+0x11c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10c      	bne.n	8008174 <xTaskResumeAll+0x30>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	b672      	cpsid	i
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	b662      	cpsie	i
 800816e:	603b      	str	r3, [r7, #0]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008174:	f001 f922 	bl	80093bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008178:	4b39      	ldr	r3, [pc, #228]	; (8008260 <xTaskResumeAll+0x11c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3b01      	subs	r3, #1
 800817e:	4a38      	ldr	r2, [pc, #224]	; (8008260 <xTaskResumeAll+0x11c>)
 8008180:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008182:	4b37      	ldr	r3, [pc, #220]	; (8008260 <xTaskResumeAll+0x11c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d162      	bne.n	8008250 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800818a:	4b36      	ldr	r3, [pc, #216]	; (8008264 <xTaskResumeAll+0x120>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d05e      	beq.n	8008250 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008192:	e02f      	b.n	80081f4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	4b34      	ldr	r3, [pc, #208]	; (8008268 <xTaskResumeAll+0x124>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3318      	adds	r3, #24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe ff17 	bl	8006fd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe ff12 	bl	8006fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b4:	4b2d      	ldr	r3, [pc, #180]	; (800826c <xTaskResumeAll+0x128>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d903      	bls.n	80081c4 <xTaskResumeAll+0x80>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	4a2a      	ldr	r2, [pc, #168]	; (800826c <xTaskResumeAll+0x128>)
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4a27      	ldr	r2, [pc, #156]	; (8008270 <xTaskResumeAll+0x12c>)
 80081d2:	441a      	add	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f7fe fe9d 	bl	8006f1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	4b23      	ldr	r3, [pc, #140]	; (8008274 <xTaskResumeAll+0x130>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d302      	bcc.n	80081f4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80081ee:	4b22      	ldr	r3, [pc, #136]	; (8008278 <xTaskResumeAll+0x134>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081f4:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <xTaskResumeAll+0x124>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1cb      	bne.n	8008194 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008202:	f000 fb6f 	bl	80088e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008206:	4b1d      	ldr	r3, [pc, #116]	; (800827c <xTaskResumeAll+0x138>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d010      	beq.n	8008234 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008212:	f000 f847 	bl	80082a4 <xTaskIncrementTick>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800821c:	4b16      	ldr	r3, [pc, #88]	; (8008278 <xTaskResumeAll+0x134>)
 800821e:	2201      	movs	r2, #1
 8008220:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3b01      	subs	r3, #1
 8008226:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f1      	bne.n	8008212 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <xTaskResumeAll+0x138>)
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008234:	4b10      	ldr	r3, [pc, #64]	; (8008278 <xTaskResumeAll+0x134>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008240:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <xTaskResumeAll+0x13c>)
 8008242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008250:	f001 f8e8 	bl	8009424 <vPortExitCritical>

	return xAlreadyYielded;
 8008254:	68bb      	ldr	r3, [r7, #8]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20001684 	.word	0x20001684
 8008264:	2000165c 	.word	0x2000165c
 8008268:	2000161c 	.word	0x2000161c
 800826c:	20001664 	.word	0x20001664
 8008270:	2000118c 	.word	0x2000118c
 8008274:	20001188 	.word	0x20001188
 8008278:	20001670 	.word	0x20001670
 800827c:	2000166c 	.word	0x2000166c
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <xTaskGetTickCount+0x1c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008290:	687b      	ldr	r3, [r7, #4]
}
 8008292:	4618      	mov	r0, r3
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20001660 	.word	0x20001660

080082a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ae:	4b50      	ldr	r3, [pc, #320]	; (80083f0 <xTaskIncrementTick+0x14c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 808b 	bne.w	80083ce <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082b8:	4b4e      	ldr	r3, [pc, #312]	; (80083f4 <xTaskIncrementTick+0x150>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3301      	adds	r3, #1
 80082be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082c0:	4a4c      	ldr	r2, [pc, #304]	; (80083f4 <xTaskIncrementTick+0x150>)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d122      	bne.n	8008312 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80082cc:	4b4a      	ldr	r3, [pc, #296]	; (80083f8 <xTaskIncrementTick+0x154>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	b672      	cpsid	i
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	b662      	cpsie	i
 80082ea:	603b      	str	r3, [r7, #0]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xTaskIncrementTick+0x4a>
 80082f0:	4b41      	ldr	r3, [pc, #260]	; (80083f8 <xTaskIncrementTick+0x154>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	4b41      	ldr	r3, [pc, #260]	; (80083fc <xTaskIncrementTick+0x158>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3f      	ldr	r2, [pc, #252]	; (80083f8 <xTaskIncrementTick+0x154>)
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	4a3f      	ldr	r2, [pc, #252]	; (80083fc <xTaskIncrementTick+0x158>)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	4b3e      	ldr	r3, [pc, #248]	; (8008400 <xTaskIncrementTick+0x15c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	4a3d      	ldr	r2, [pc, #244]	; (8008400 <xTaskIncrementTick+0x15c>)
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	f000 fae9 	bl	80088e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008312:	4b3c      	ldr	r3, [pc, #240]	; (8008404 <xTaskIncrementTick+0x160>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	429a      	cmp	r2, r3
 800831a:	d349      	bcc.n	80083b0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800831c:	4b36      	ldr	r3, [pc, #216]	; (80083f8 <xTaskIncrementTick+0x154>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008326:	4b37      	ldr	r3, [pc, #220]	; (8008404 <xTaskIncrementTick+0x160>)
 8008328:	f04f 32ff 	mov.w	r2, #4294967295
 800832c:	601a      	str	r2, [r3, #0]
					break;
 800832e:	e03f      	b.n	80083b0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008330:	4b31      	ldr	r3, [pc, #196]	; (80083f8 <xTaskIncrementTick+0x154>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d203      	bcs.n	8008350 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008348:	4a2e      	ldr	r2, [pc, #184]	; (8008404 <xTaskIncrementTick+0x160>)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800834e:	e02f      	b.n	80083b0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	3304      	adds	r3, #4
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe fe3d 	bl	8006fd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	3318      	adds	r3, #24
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fe34 	bl	8006fd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4b25      	ldr	r3, [pc, #148]	; (8008408 <xTaskIncrementTick+0x164>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d903      	bls.n	8008380 <xTaskIncrementTick+0xdc>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	4a22      	ldr	r2, [pc, #136]	; (8008408 <xTaskIncrementTick+0x164>)
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4a1f      	ldr	r2, [pc, #124]	; (800840c <xTaskIncrementTick+0x168>)
 800838e:	441a      	add	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f7fe fdbf 	bl	8006f1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <xTaskIncrementTick+0x16c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d3b8      	bcc.n	800831c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80083aa:	2301      	movs	r3, #1
 80083ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ae:	e7b5      	b.n	800831c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083b0:	4b17      	ldr	r3, [pc, #92]	; (8008410 <xTaskIncrementTick+0x16c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b6:	4915      	ldr	r1, [pc, #84]	; (800840c <xTaskIncrementTick+0x168>)
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d907      	bls.n	80083d8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80083c8:	2301      	movs	r3, #1
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	e004      	b.n	80083d8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80083ce:	4b11      	ldr	r3, [pc, #68]	; (8008414 <xTaskIncrementTick+0x170>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3301      	adds	r3, #1
 80083d4:	4a0f      	ldr	r2, [pc, #60]	; (8008414 <xTaskIncrementTick+0x170>)
 80083d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80083d8:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <xTaskIncrementTick+0x174>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80083e4:	697b      	ldr	r3, [r7, #20]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20001684 	.word	0x20001684
 80083f4:	20001660 	.word	0x20001660
 80083f8:	20001614 	.word	0x20001614
 80083fc:	20001618 	.word	0x20001618
 8008400:	20001674 	.word	0x20001674
 8008404:	2000167c 	.word	0x2000167c
 8008408:	20001664 	.word	0x20001664
 800840c:	2000118c 	.word	0x2000118c
 8008410:	20001188 	.word	0x20001188
 8008414:	2000166c 	.word	0x2000166c
 8008418:	20001670 	.word	0x20001670

0800841c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008422:	4b2b      	ldr	r3, [pc, #172]	; (80084d0 <vTaskSwitchContext+0xb4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800842a:	4b2a      	ldr	r3, [pc, #168]	; (80084d4 <vTaskSwitchContext+0xb8>)
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008430:	e048      	b.n	80084c4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008432:	4b28      	ldr	r3, [pc, #160]	; (80084d4 <vTaskSwitchContext+0xb8>)
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008438:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <vTaskSwitchContext+0xbc>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	e012      	b.n	8008466 <vTaskSwitchContext+0x4a>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10c      	bne.n	8008460 <vTaskSwitchContext+0x44>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	b672      	cpsid	i
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	b662      	cpsie	i
 800845a:	607b      	str	r3, [r7, #4]
}
 800845c:	bf00      	nop
 800845e:	e7fe      	b.n	800845e <vTaskSwitchContext+0x42>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3b01      	subs	r3, #1
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	491d      	ldr	r1, [pc, #116]	; (80084dc <vTaskSwitchContext+0xc0>)
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0e2      	beq.n	8008440 <vTaskSwitchContext+0x24>
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4a15      	ldr	r2, [pc, #84]	; (80084dc <vTaskSwitchContext+0xc0>)
 8008486:	4413      	add	r3, r2
 8008488:	60bb      	str	r3, [r7, #8]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3308      	adds	r3, #8
 800849c:	429a      	cmp	r2, r3
 800849e:	d104      	bne.n	80084aa <vTaskSwitchContext+0x8e>
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	4a0b      	ldr	r2, [pc, #44]	; (80084e0 <vTaskSwitchContext+0xc4>)
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	4a08      	ldr	r2, [pc, #32]	; (80084d8 <vTaskSwitchContext+0xbc>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084ba:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <vTaskSwitchContext+0xc4>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3354      	adds	r3, #84	; 0x54
 80084c0:	4a08      	ldr	r2, [pc, #32]	; (80084e4 <vTaskSwitchContext+0xc8>)
 80084c2:	6013      	str	r3, [r2, #0]
}
 80084c4:	bf00      	nop
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20001684 	.word	0x20001684
 80084d4:	20001670 	.word	0x20001670
 80084d8:	20001664 	.word	0x20001664
 80084dc:	2000118c 	.word	0x2000118c
 80084e0:	20001188 	.word	0x20001188
 80084e4:	20000074 	.word	0x20000074

080084e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10c      	bne.n	8008512 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	b672      	cpsid	i
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	b662      	cpsie	i
 800850c:	60fb      	str	r3, [r7, #12]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <vTaskPlaceOnEventList+0x48>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3318      	adds	r3, #24
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fe fd21 	bl	8006f62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008520:	2101      	movs	r1, #1
 8008522:	6838      	ldr	r0, [r7, #0]
 8008524:	f000 fa8e 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20001188 	.word	0x20001188

08008534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10c      	bne.n	8008560 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	b672      	cpsid	i
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	b662      	cpsie	i
 800855a:	617b      	str	r3, [r7, #20]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <vTaskPlaceOnEventListRestricted+0x58>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3318      	adds	r3, #24
 8008566:	4619      	mov	r1, r3
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7fe fcd6 	bl	8006f1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008574:	f04f 33ff 	mov.w	r3, #4294967295
 8008578:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	68b8      	ldr	r0, [r7, #8]
 800857e:	f000 fa61 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
	}
 8008582:	bf00      	nop
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20001188 	.word	0x20001188

08008590 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10c      	bne.n	80085c0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	b672      	cpsid	i
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	b662      	cpsie	i
 80085ba:	60fb      	str	r3, [r7, #12]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3318      	adds	r3, #24
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe fd05 	bl	8006fd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ca:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <xTaskRemoveFromEventList+0xb4>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d11d      	bne.n	800860e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fcfc 	bl	8006fd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e0:	4b19      	ldr	r3, [pc, #100]	; (8008648 <xTaskRemoveFromEventList+0xb8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d903      	bls.n	80085f0 <xTaskRemoveFromEventList+0x60>
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a16      	ldr	r2, [pc, #88]	; (8008648 <xTaskRemoveFromEventList+0xb8>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4a13      	ldr	r2, [pc, #76]	; (800864c <xTaskRemoveFromEventList+0xbc>)
 80085fe:	441a      	add	r2, r3
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	3304      	adds	r3, #4
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7fe fc87 	bl	8006f1a <vListInsertEnd>
 800860c:	e005      	b.n	800861a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	3318      	adds	r3, #24
 8008612:	4619      	mov	r1, r3
 8008614:	480e      	ldr	r0, [pc, #56]	; (8008650 <xTaskRemoveFromEventList+0xc0>)
 8008616:	f7fe fc80 	bl	8006f1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861e:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <xTaskRemoveFromEventList+0xc4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	429a      	cmp	r2, r3
 8008626:	d905      	bls.n	8008634 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008628:	2301      	movs	r3, #1
 800862a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <xTaskRemoveFromEventList+0xc8>)
 800862e:	2201      	movs	r2, #1
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e001      	b.n	8008638 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008638:	697b      	ldr	r3, [r7, #20]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20001684 	.word	0x20001684
 8008648:	20001664 	.word	0x20001664
 800864c:	2000118c 	.word	0x2000118c
 8008650:	2000161c 	.word	0x2000161c
 8008654:	20001188 	.word	0x20001188
 8008658:	20001670 	.word	0x20001670

0800865c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008664:	4b06      	ldr	r3, [pc, #24]	; (8008680 <vTaskInternalSetTimeOutState+0x24>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <vTaskInternalSetTimeOutState+0x28>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	605a      	str	r2, [r3, #4]
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20001674 	.word	0x20001674
 8008684:	20001660 	.word	0x20001660

08008688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10c      	bne.n	80086b2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	613b      	str	r3, [r7, #16]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10c      	bne.n	80086d2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	b672      	cpsid	i
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	b662      	cpsie	i
 80086cc:	60fb      	str	r3, [r7, #12]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80086d2:	f000 fe73 	bl	80093bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086d6:	4b1d      	ldr	r3, [pc, #116]	; (800874c <xTaskCheckForTimeOut+0xc4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d102      	bne.n	80086f6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	e023      	b.n	800873e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b15      	ldr	r3, [pc, #84]	; (8008750 <xTaskCheckForTimeOut+0xc8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d007      	beq.n	8008712 <xTaskCheckForTimeOut+0x8a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	429a      	cmp	r2, r3
 800870a:	d302      	bcc.n	8008712 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	e015      	b.n	800873e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	429a      	cmp	r2, r3
 800871a:	d20b      	bcs.n	8008734 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	1ad2      	subs	r2, r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff ff97 	bl	800865c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	e004      	b.n	800873e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800873a:	2301      	movs	r3, #1
 800873c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800873e:	f000 fe71 	bl	8009424 <vPortExitCritical>

	return xReturn;
 8008742:	69fb      	ldr	r3, [r7, #28]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20001660 	.word	0x20001660
 8008750:	20001674 	.word	0x20001674

08008754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008758:	4b03      	ldr	r3, [pc, #12]	; (8008768 <vTaskMissedYield+0x14>)
 800875a:	2201      	movs	r2, #1
 800875c:	601a      	str	r2, [r3, #0]
}
 800875e:	bf00      	nop
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	20001670 	.word	0x20001670

0800876c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008774:	f000 f852 	bl	800881c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008778:	4b06      	ldr	r3, [pc, #24]	; (8008794 <prvIdleTask+0x28>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d9f9      	bls.n	8008774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008780:	4b05      	ldr	r3, [pc, #20]	; (8008798 <prvIdleTask+0x2c>)
 8008782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008790:	e7f0      	b.n	8008774 <prvIdleTask+0x8>
 8008792:	bf00      	nop
 8008794:	2000118c 	.word	0x2000118c
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a2:	2300      	movs	r3, #0
 80087a4:	607b      	str	r3, [r7, #4]
 80087a6:	e00c      	b.n	80087c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4a12      	ldr	r2, [pc, #72]	; (80087fc <prvInitialiseTaskLists+0x60>)
 80087b4:	4413      	add	r3, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fb82 	bl	8006ec0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3301      	adds	r3, #1
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b37      	cmp	r3, #55	; 0x37
 80087c6:	d9ef      	bls.n	80087a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087c8:	480d      	ldr	r0, [pc, #52]	; (8008800 <prvInitialiseTaskLists+0x64>)
 80087ca:	f7fe fb79 	bl	8006ec0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087ce:	480d      	ldr	r0, [pc, #52]	; (8008804 <prvInitialiseTaskLists+0x68>)
 80087d0:	f7fe fb76 	bl	8006ec0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087d4:	480c      	ldr	r0, [pc, #48]	; (8008808 <prvInitialiseTaskLists+0x6c>)
 80087d6:	f7fe fb73 	bl	8006ec0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087da:	480c      	ldr	r0, [pc, #48]	; (800880c <prvInitialiseTaskLists+0x70>)
 80087dc:	f7fe fb70 	bl	8006ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087e0:	480b      	ldr	r0, [pc, #44]	; (8008810 <prvInitialiseTaskLists+0x74>)
 80087e2:	f7fe fb6d 	bl	8006ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <prvInitialiseTaskLists+0x78>)
 80087e8:	4a05      	ldr	r2, [pc, #20]	; (8008800 <prvInitialiseTaskLists+0x64>)
 80087ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087ec:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <prvInitialiseTaskLists+0x7c>)
 80087ee:	4a05      	ldr	r2, [pc, #20]	; (8008804 <prvInitialiseTaskLists+0x68>)
 80087f0:	601a      	str	r2, [r3, #0]
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	2000118c 	.word	0x2000118c
 8008800:	200015ec 	.word	0x200015ec
 8008804:	20001600 	.word	0x20001600
 8008808:	2000161c 	.word	0x2000161c
 800880c:	20001630 	.word	0x20001630
 8008810:	20001648 	.word	0x20001648
 8008814:	20001614 	.word	0x20001614
 8008818:	20001618 	.word	0x20001618

0800881c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008822:	e019      	b.n	8008858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008824:	f000 fdca 	bl	80093bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008828:	4b10      	ldr	r3, [pc, #64]	; (800886c <prvCheckTasksWaitingTermination+0x50>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe fbcd 	bl	8006fd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800883a:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <prvCheckTasksWaitingTermination+0x54>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3b01      	subs	r3, #1
 8008840:	4a0b      	ldr	r2, [pc, #44]	; (8008870 <prvCheckTasksWaitingTermination+0x54>)
 8008842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008844:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <prvCheckTasksWaitingTermination+0x58>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3b01      	subs	r3, #1
 800884a:	4a0a      	ldr	r2, [pc, #40]	; (8008874 <prvCheckTasksWaitingTermination+0x58>)
 800884c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800884e:	f000 fde9 	bl	8009424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f810 	bl	8008878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008858:	4b06      	ldr	r3, [pc, #24]	; (8008874 <prvCheckTasksWaitingTermination+0x58>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e1      	bne.n	8008824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20001630 	.word	0x20001630
 8008870:	2000165c 	.word	0x2000165c
 8008874:	20001644 	.word	0x20001644

08008878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3354      	adds	r3, #84	; 0x54
 8008884:	4618      	mov	r0, r3
 8008886:	f001 fe27 	bl	800a4d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008890:	2b00      	cmp	r3, #0
 8008892:	d108      	bne.n	80088a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	4618      	mov	r0, r3
 800889a:	f000 ff85 	bl	80097a8 <vPortFree>
				vPortFree( pxTCB );
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 ff82 	bl	80097a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088a4:	e01a      	b.n	80088dc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d103      	bne.n	80088b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 ff79 	bl	80097a8 <vPortFree>
	}
 80088b6:	e011      	b.n	80088dc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d00c      	beq.n	80088dc <prvDeleteTCB+0x64>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	b672      	cpsid	i
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	b662      	cpsie	i
 80088d6:	60fb      	str	r3, [r7, #12]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <prvDeleteTCB+0x62>
	}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <prvResetNextTaskUnblockTime+0x38>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <prvResetNextTaskUnblockTime+0x3c>)
 80088f6:	f04f 32ff 	mov.w	r2, #4294967295
 80088fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088fc:	e008      	b.n	8008910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fe:	4b07      	ldr	r3, [pc, #28]	; (800891c <prvResetNextTaskUnblockTime+0x38>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	4a04      	ldr	r2, [pc, #16]	; (8008920 <prvResetNextTaskUnblockTime+0x3c>)
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	20001614 	.word	0x20001614
 8008920:	2000167c 	.word	0x2000167c

08008924 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800892a:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <xTaskGetSchedulerState+0x34>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d102      	bne.n	8008938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008932:	2301      	movs	r3, #1
 8008934:	607b      	str	r3, [r7, #4]
 8008936:	e008      	b.n	800894a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008938:	4b08      	ldr	r3, [pc, #32]	; (800895c <xTaskGetSchedulerState+0x38>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008940:	2302      	movs	r3, #2
 8008942:	607b      	str	r3, [r7, #4]
 8008944:	e001      	b.n	800894a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800894a:	687b      	ldr	r3, [r7, #4]
	}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20001668 	.word	0x20001668
 800895c:	20001684 	.word	0x20001684

08008960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d05a      	beq.n	8008a2c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008976:	4b30      	ldr	r3, [pc, #192]	; (8008a38 <xTaskPriorityDisinherit+0xd8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	429a      	cmp	r2, r3
 800897e:	d00c      	beq.n	800899a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	b672      	cpsid	i
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	b662      	cpsie	i
 8008994:	60fb      	str	r3, [r7, #12]
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10c      	bne.n	80089bc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	b672      	cpsid	i
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	b662      	cpsie	i
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	e7fe      	b.n	80089ba <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c0:	1e5a      	subs	r2, r3, #1
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d02c      	beq.n	8008a2c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d128      	bne.n	8008a2c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3304      	adds	r3, #4
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe faf8 	bl	8006fd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <xTaskPriorityDisinherit+0xdc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d903      	bls.n	8008a0c <xTaskPriorityDisinherit+0xac>
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	4a0c      	ldr	r2, [pc, #48]	; (8008a3c <xTaskPriorityDisinherit+0xdc>)
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <xTaskPriorityDisinherit+0xe0>)
 8008a1a:	441a      	add	r2, r3
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f7fe fa79 	bl	8006f1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a2c:	697b      	ldr	r3, [r7, #20]
	}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20001188 	.word	0x20001188
 8008a3c:	20001664 	.word	0x20001664
 8008a40:	2000118c 	.word	0x2000118c

08008a44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a4e:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a54:	4b20      	ldr	r3, [pc, #128]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe faba 	bl	8006fd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d10a      	bne.n	8008a7e <prvAddCurrentTaskToDelayedList+0x3a>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a6e:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4619      	mov	r1, r3
 8008a76:	4819      	ldr	r0, [pc, #100]	; (8008adc <prvAddCurrentTaskToDelayedList+0x98>)
 8008a78:	f7fe fa4f 	bl	8006f1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a7c:	e026      	b.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4413      	add	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d209      	bcs.n	8008aaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a96:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fa5d 	bl	8006f62 <vListInsert>
}
 8008aa8:	e010      	b.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fa53 	bl	8006f62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d202      	bcs.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ac6:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6013      	str	r3, [r2, #0]
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20001660 	.word	0x20001660
 8008ad8:	20001188 	.word	0x20001188
 8008adc:	20001648 	.word	0x20001648
 8008ae0:	20001618 	.word	0x20001618
 8008ae4:	20001614 	.word	0x20001614
 8008ae8:	2000167c 	.word	0x2000167c

08008aec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008af6:	f000 fb15 	bl	8009124 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008afa:	4b1d      	ldr	r3, [pc, #116]	; (8008b70 <xTimerCreateTimerTask+0x84>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d021      	beq.n	8008b46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b0a:	1d3a      	adds	r2, r7, #4
 8008b0c:	f107 0108 	add.w	r1, r7, #8
 8008b10:	f107 030c 	add.w	r3, r7, #12
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe f9b9 	bl	8006e8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	9202      	str	r2, [sp, #8]
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	2302      	movs	r3, #2
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	4911      	ldr	r1, [pc, #68]	; (8008b74 <xTimerCreateTimerTask+0x88>)
 8008b2e:	4812      	ldr	r0, [pc, #72]	; (8008b78 <xTimerCreateTimerTask+0x8c>)
 8008b30:	f7fe ff84 	bl	8007a3c <xTaskCreateStatic>
 8008b34:	4603      	mov	r3, r0
 8008b36:	4a11      	ldr	r2, [pc, #68]	; (8008b7c <xTimerCreateTimerTask+0x90>)
 8008b38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b3a:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <xTimerCreateTimerTask+0x90>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b42:	2301      	movs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10c      	bne.n	8008b66 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	b672      	cpsid	i
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	b662      	cpsie	i
 8008b60:	613b      	str	r3, [r7, #16]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008b66:	697b      	ldr	r3, [r7, #20]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	200016b8 	.word	0x200016b8
 8008b74:	0800cc64 	.word	0x0800cc64
 8008b78:	08008cbd 	.word	0x08008cbd
 8008b7c:	200016bc 	.word	0x200016bc

08008b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	; 0x28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10c      	bne.n	8008bb2 <xTimerGenericCommand+0x32>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	b672      	cpsid	i
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	b662      	cpsie	i
 8008bac:	623b      	str	r3, [r7, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bb2:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <xTimerGenericCommand+0x9c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d02a      	beq.n	8008c10 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b05      	cmp	r3, #5
 8008bca:	dc18      	bgt.n	8008bfe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bcc:	f7ff feaa 	bl	8008924 <xTaskGetSchedulerState>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d109      	bne.n	8008bea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bd6:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <xTimerGenericCommand+0x9c>)
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f107 0110 	add.w	r1, r7, #16
 8008bde:	2300      	movs	r3, #0
 8008be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be2:	f7fe fb31 	bl	8007248 <xQueueGenericSend>
 8008be6:	6278      	str	r0, [r7, #36]	; 0x24
 8008be8:	e012      	b.n	8008c10 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <xTimerGenericCommand+0x9c>)
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	f107 0110 	add.w	r1, r7, #16
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f7fe fb27 	bl	8007248 <xQueueGenericSend>
 8008bfa:	6278      	str	r0, [r7, #36]	; 0x24
 8008bfc:	e008      	b.n	8008c10 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bfe:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <xTimerGenericCommand+0x9c>)
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	f107 0110 	add.w	r1, r7, #16
 8008c06:	2300      	movs	r3, #0
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	f7fe fc23 	bl	8007454 <xQueueGenericSendFromISR>
 8008c0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3728      	adds	r7, #40	; 0x28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200016b8 	.word	0x200016b8

08008c20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c2a:	4b23      	ldr	r3, [pc, #140]	; (8008cb8 <prvProcessExpiredTimer+0x98>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe f9cb 	bl	8006fd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d024      	beq.n	8008c96 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	699a      	ldr	r2, [r3, #24]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	18d1      	adds	r1, r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	6978      	ldr	r0, [r7, #20]
 8008c5a:	f000 f8d3 	bl	8008e04 <prvInsertTimerInActiveList>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d021      	beq.n	8008ca8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c64:	2300      	movs	r3, #0
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	6978      	ldr	r0, [r7, #20]
 8008c70:	f7ff ff86 	bl	8008b80 <xTimerGenericCommand>
 8008c74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d115      	bne.n	8008ca8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	b672      	cpsid	i
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	b662      	cpsie	i
 8008c90:	60fb      	str	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c9c:	f023 0301 	bic.w	r3, r3, #1
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	6978      	ldr	r0, [r7, #20]
 8008cae:	4798      	blx	r3
}
 8008cb0:	bf00      	nop
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	200016b0 	.word	0x200016b0

08008cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cc4:	f107 0308 	add.w	r3, r7, #8
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f857 	bl	8008d7c <prvGetNextExpireTime>
 8008cce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f803 	bl	8008ce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cda:	f000 f8d5 	bl	8008e88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cde:	e7f1      	b.n	8008cc4 <prvTimerTask+0x8>

08008ce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cea:	f7ff fa1d 	bl	8008128 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f866 	bl	8008dc4 <prvSampleTimeNow>
 8008cf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d130      	bne.n	8008d62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <prvProcessTimerOrBlockTask+0x3c>
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d806      	bhi.n	8008d1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d0e:	f7ff fa19 	bl	8008144 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff ff83 	bl	8008c20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d1a:	e024      	b.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d22:	4b13      	ldr	r3, [pc, #76]	; (8008d70 <prvProcessTimerOrBlockTask+0x90>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <prvProcessTimerOrBlockTask+0x50>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <prvProcessTimerOrBlockTask+0x52>
 8008d30:	2300      	movs	r3, #0
 8008d32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d34:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <prvProcessTimerOrBlockTask+0x94>)
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4619      	mov	r1, r3
 8008d42:	f7fe fe47 	bl	80079d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d46:	f7ff f9fd 	bl	8008144 <xTaskResumeAll>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d50:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <prvProcessTimerOrBlockTask+0x98>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
}
 8008d60:	e001      	b.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d62:	f7ff f9ef 	bl	8008144 <xTaskResumeAll>
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200016b4 	.word	0x200016b4
 8008d74:	200016b8 	.word	0x200016b8
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d84:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <prvGetNextExpireTime+0x44>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <prvGetNextExpireTime+0x16>
 8008d8e:	2201      	movs	r2, #1
 8008d90:	e000      	b.n	8008d94 <prvGetNextExpireTime+0x18>
 8008d92:	2200      	movs	r2, #0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d105      	bne.n	8008dac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008da0:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <prvGetNextExpireTime+0x44>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e001      	b.n	8008db0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008db0:	68fb      	ldr	r3, [r7, #12]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	200016b0 	.word	0x200016b0

08008dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008dcc:	f7ff fa5a 	bl	8008284 <xTaskGetTickCount>
 8008dd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <prvSampleTimeNow+0x3c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d205      	bcs.n	8008de8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ddc:	f000 f93c 	bl	8009058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e002      	b.n	8008dee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dee:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <prvSampleTimeNow+0x3c>)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008df4:	68fb      	ldr	r3, [r7, #12]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	200016c0 	.word	0x200016c0

08008e04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d812      	bhi.n	8008e50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d302      	bcc.n	8008e3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e01b      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e3e:	4b10      	ldr	r3, [pc, #64]	; (8008e80 <prvInsertTimerInActiveList+0x7c>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3304      	adds	r3, #4
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f7fe f88a 	bl	8006f62 <vListInsert>
 8008e4e:	e012      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d206      	bcs.n	8008e66 <prvInsertTimerInActiveList+0x62>
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d302      	bcc.n	8008e66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e60:	2301      	movs	r3, #1
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	e007      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e66:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <prvInsertTimerInActiveList+0x80>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7fe f876 	bl	8006f62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e76:	697b      	ldr	r3, [r7, #20]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	200016b4 	.word	0x200016b4
 8008e84:	200016b0 	.word	0x200016b0

08008e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08e      	sub	sp, #56	; 0x38
 8008e8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e8e:	e0d0      	b.n	8009032 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da1a      	bge.n	8008ecc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e96:	1d3b      	adds	r3, r7, #4
 8008e98:	3304      	adds	r3, #4
 8008e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10c      	bne.n	8008ebc <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	b672      	cpsid	i
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	b662      	cpsie	i
 8008eb6:	61fb      	str	r3, [r7, #28]
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	6850      	ldr	r0, [r2, #4]
 8008ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec6:	6892      	ldr	r2, [r2, #8]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f2c0 80af 	blt.w	8009032 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe f875 	bl	8006fd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008eea:	463b      	mov	r3, r7
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff ff69 	bl	8008dc4 <prvSampleTimeNow>
 8008ef2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b09      	cmp	r3, #9
 8008ef8:	f200 809a 	bhi.w	8009030 <prvProcessReceivedCommands+0x1a8>
 8008efc:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <prvProcessReceivedCommands+0x7c>)
 8008efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f02:	bf00      	nop
 8008f04:	08008f2d 	.word	0x08008f2d
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f2d 	.word	0x08008f2d
 8008f10:	08008fa5 	.word	0x08008fa5
 8008f14:	08008fb9 	.word	0x08008fb9
 8008f18:	08009007 	.word	0x08009007
 8008f1c:	08008f2d 	.word	0x08008f2d
 8008f20:	08008f2d 	.word	0x08008f2d
 8008f24:	08008fa5 	.word	0x08008fa5
 8008f28:	08008fb9 	.word	0x08008fb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f32:	f043 0301 	orr.w	r3, r3, #1
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	18d1      	adds	r1, r2, r3
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f4c:	f7ff ff5a 	bl	8008e04 <prvInsertTimerInActiveList>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d06d      	beq.n	8009032 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f64:	f003 0304 	and.w	r3, r3, #4
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d062      	beq.n	8009032 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	441a      	add	r2, r3
 8008f74:	2300      	movs	r3, #0
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7e:	f7ff fdff 	bl	8008b80 <xTimerGenericCommand>
 8008f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d153      	bne.n	8009032 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	b672      	cpsid	i
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	b662      	cpsie	i
 8008f9e:	61bb      	str	r3, [r7, #24]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008faa:	f023 0301 	bic.w	r3, r3, #1
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008fb6:	e03c      	b.n	8009032 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10c      	bne.n	8008ff2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	b672      	cpsid	i
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	b662      	cpsie	i
 8008fec:	617b      	str	r3, [r7, #20]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	18d1      	adds	r1, r2, r3
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009000:	f7ff ff00 	bl	8008e04 <prvInsertTimerInActiveList>
					break;
 8009004:	e015      	b.n	8009032 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d103      	bne.n	800901c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009016:	f000 fbc7 	bl	80097a8 <vPortFree>
 800901a:	e00a      	b.n	8009032 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009022:	f023 0301 	bic.w	r3, r3, #1
 8009026:	b2da      	uxtb	r2, r3
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800902e:	e000      	b.n	8009032 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8009030:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <prvProcessReceivedCommands+0x1cc>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	1d39      	adds	r1, r7, #4
 8009038:	2200      	movs	r2, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe faaa 	bl	8007594 <xQueueReceive>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	f47f af24 	bne.w	8008e90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	3730      	adds	r7, #48	; 0x30
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	200016b8 	.word	0x200016b8

08009058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800905e:	e04a      	b.n	80090f6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009060:	4b2e      	ldr	r3, [pc, #184]	; (800911c <prvSwitchTimerLists+0xc4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906a:	4b2c      	ldr	r3, [pc, #176]	; (800911c <prvSwitchTimerLists+0xc4>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3304      	adds	r3, #4
 8009078:	4618      	mov	r0, r3
 800907a:	f7fd ffab 	bl	8006fd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d030      	beq.n	80090f6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4413      	add	r3, r2
 800909c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d90e      	bls.n	80090c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090b2:	4b1a      	ldr	r3, [pc, #104]	; (800911c <prvSwitchTimerLists+0xc4>)
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f7fd ff50 	bl	8006f62 <vListInsert>
 80090c2:	e018      	b.n	80090f6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090c4:	2300      	movs	r3, #0
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	2300      	movs	r3, #0
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	2100      	movs	r1, #0
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f7ff fd56 	bl	8008b80 <xTimerGenericCommand>
 80090d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10c      	bne.n	80090f6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	b672      	cpsid	i
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	b662      	cpsie	i
 80090f0:	603b      	str	r3, [r7, #0]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090f6:	4b09      	ldr	r3, [pc, #36]	; (800911c <prvSwitchTimerLists+0xc4>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1af      	bne.n	8009060 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009100:	4b06      	ldr	r3, [pc, #24]	; (800911c <prvSwitchTimerLists+0xc4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009106:	4b06      	ldr	r3, [pc, #24]	; (8009120 <prvSwitchTimerLists+0xc8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a04      	ldr	r2, [pc, #16]	; (800911c <prvSwitchTimerLists+0xc4>)
 800910c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800910e:	4a04      	ldr	r2, [pc, #16]	; (8009120 <prvSwitchTimerLists+0xc8>)
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	6013      	str	r3, [r2, #0]
}
 8009114:	bf00      	nop
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	200016b0 	.word	0x200016b0
 8009120:	200016b4 	.word	0x200016b4

08009124 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800912a:	f000 f947 	bl	80093bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800912e:	4b15      	ldr	r3, [pc, #84]	; (8009184 <prvCheckForValidListAndQueue+0x60>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d120      	bne.n	8009178 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009136:	4814      	ldr	r0, [pc, #80]	; (8009188 <prvCheckForValidListAndQueue+0x64>)
 8009138:	f7fd fec2 	bl	8006ec0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800913c:	4813      	ldr	r0, [pc, #76]	; (800918c <prvCheckForValidListAndQueue+0x68>)
 800913e:	f7fd febf 	bl	8006ec0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009142:	4b13      	ldr	r3, [pc, #76]	; (8009190 <prvCheckForValidListAndQueue+0x6c>)
 8009144:	4a10      	ldr	r2, [pc, #64]	; (8009188 <prvCheckForValidListAndQueue+0x64>)
 8009146:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009148:	4b12      	ldr	r3, [pc, #72]	; (8009194 <prvCheckForValidListAndQueue+0x70>)
 800914a:	4a10      	ldr	r2, [pc, #64]	; (800918c <prvCheckForValidListAndQueue+0x68>)
 800914c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800914e:	2300      	movs	r3, #0
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	4b11      	ldr	r3, [pc, #68]	; (8009198 <prvCheckForValidListAndQueue+0x74>)
 8009154:	4a11      	ldr	r2, [pc, #68]	; (800919c <prvCheckForValidListAndQueue+0x78>)
 8009156:	2110      	movs	r1, #16
 8009158:	200a      	movs	r0, #10
 800915a:	f7fd ffcf 	bl	80070fc <xQueueGenericCreateStatic>
 800915e:	4603      	mov	r3, r0
 8009160:	4a08      	ldr	r2, [pc, #32]	; (8009184 <prvCheckForValidListAndQueue+0x60>)
 8009162:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009164:	4b07      	ldr	r3, [pc, #28]	; (8009184 <prvCheckForValidListAndQueue+0x60>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <prvCheckForValidListAndQueue+0x60>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	490b      	ldr	r1, [pc, #44]	; (80091a0 <prvCheckForValidListAndQueue+0x7c>)
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fc04 	bl	8007980 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009178:	f000 f954 	bl	8009424 <vPortExitCritical>
}
 800917c:	bf00      	nop
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	200016b8 	.word	0x200016b8
 8009188:	20001688 	.word	0x20001688
 800918c:	2000169c 	.word	0x2000169c
 8009190:	200016b0 	.word	0x200016b0
 8009194:	200016b4 	.word	0x200016b4
 8009198:	20001764 	.word	0x20001764
 800919c:	200016c4 	.word	0x200016c4
 80091a0:	0800cc6c 	.word	0x0800cc6c

080091a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3b04      	subs	r3, #4
 80091b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3b04      	subs	r3, #4
 80091c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f023 0201 	bic.w	r2, r3, #1
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3b04      	subs	r3, #4
 80091d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091d4:	4a0c      	ldr	r2, [pc, #48]	; (8009208 <pxPortInitialiseStack+0x64>)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3b14      	subs	r3, #20
 80091de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3b04      	subs	r3, #4
 80091ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f06f 0202 	mvn.w	r2, #2
 80091f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3b20      	subs	r3, #32
 80091f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091fa:	68fb      	ldr	r3, [r7, #12]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	0800920d 	.word	0x0800920d

0800920c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <prvTaskExitError+0x5c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921e:	d00c      	beq.n	800923a <prvTaskExitError+0x2e>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	b672      	cpsid	i
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	b662      	cpsie	i
 8009234:	60fb      	str	r3, [r7, #12]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <prvTaskExitError+0x2c>
	__asm volatile
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	b672      	cpsid	i
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	b662      	cpsie	i
 800924e:	60bb      	str	r3, [r7, #8]
}
 8009250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009252:	bf00      	nop
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0fc      	beq.n	8009254 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	20000018 	.word	0x20000018
 800926c:	00000000 	.word	0x00000000

08009270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <pxCurrentTCBConst2>)
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	6808      	ldr	r0, [r1, #0]
 8009276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927a:	f380 8809 	msr	PSP, r0
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8811 	msr	BASEPRI, r0
 800928a:	4770      	bx	lr
 800928c:	f3af 8000 	nop.w

08009290 <pxCurrentTCBConst2>:
 8009290:	20001188 	.word	0x20001188
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop

08009298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009298:	4808      	ldr	r0, [pc, #32]	; (80092bc <prvPortStartFirstTask+0x24>)
 800929a:	6800      	ldr	r0, [r0, #0]
 800929c:	6800      	ldr	r0, [r0, #0]
 800929e:	f380 8808 	msr	MSP, r0
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8814 	msr	CONTROL, r0
 80092aa:	b662      	cpsie	i
 80092ac:	b661      	cpsie	f
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	df00      	svc	0
 80092b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ba:	bf00      	nop
 80092bc:	e000ed08 	.word	0xe000ed08

080092c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092c6:	4b37      	ldr	r3, [pc, #220]	; (80093a4 <xPortStartScheduler+0xe4>)
 80092c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	22ff      	movs	r2, #255	; 0xff
 80092d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	4b2f      	ldr	r3, [pc, #188]	; (80093a8 <xPortStartScheduler+0xe8>)
 80092ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ee:	4b2f      	ldr	r3, [pc, #188]	; (80093ac <xPortStartScheduler+0xec>)
 80092f0:	2207      	movs	r2, #7
 80092f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092f4:	e009      	b.n	800930a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80092f6:	4b2d      	ldr	r3, [pc, #180]	; (80093ac <xPortStartScheduler+0xec>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	4a2b      	ldr	r2, [pc, #172]	; (80093ac <xPortStartScheduler+0xec>)
 80092fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009312:	2b80      	cmp	r3, #128	; 0x80
 8009314:	d0ef      	beq.n	80092f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009316:	4b25      	ldr	r3, [pc, #148]	; (80093ac <xPortStartScheduler+0xec>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f1c3 0307 	rsb	r3, r3, #7
 800931e:	2b04      	cmp	r3, #4
 8009320:	d00c      	beq.n	800933c <xPortStartScheduler+0x7c>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	b672      	cpsid	i
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	b662      	cpsie	i
 8009336:	60bb      	str	r3, [r7, #8]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800933c:	4b1b      	ldr	r3, [pc, #108]	; (80093ac <xPortStartScheduler+0xec>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	4a1a      	ldr	r2, [pc, #104]	; (80093ac <xPortStartScheduler+0xec>)
 8009344:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009346:	4b19      	ldr	r3, [pc, #100]	; (80093ac <xPortStartScheduler+0xec>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800934e:	4a17      	ldr	r2, [pc, #92]	; (80093ac <xPortStartScheduler+0xec>)
 8009350:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	b2da      	uxtb	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800935a:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <xPortStartScheduler+0xf0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <xPortStartScheduler+0xf0>)
 8009360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009364:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009366:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <xPortStartScheduler+0xf0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a11      	ldr	r2, [pc, #68]	; (80093b0 <xPortStartScheduler+0xf0>)
 800936c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009370:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009372:	f000 f8dd 	bl	8009530 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009376:	4b0f      	ldr	r3, [pc, #60]	; (80093b4 <xPortStartScheduler+0xf4>)
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800937c:	f000 f8fc 	bl	8009578 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <xPortStartScheduler+0xf8>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a0c      	ldr	r2, [pc, #48]	; (80093b8 <xPortStartScheduler+0xf8>)
 8009386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800938a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800938c:	f7ff ff84 	bl	8009298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009390:	f7ff f844 	bl	800841c <vTaskSwitchContext>
	prvTaskExitError();
 8009394:	f7ff ff3a 	bl	800920c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	e000e400 	.word	0xe000e400
 80093a8:	200017b4 	.word	0x200017b4
 80093ac:	200017b8 	.word	0x200017b8
 80093b0:	e000ed20 	.word	0xe000ed20
 80093b4:	20000018 	.word	0x20000018
 80093b8:	e000ef34 	.word	0xe000ef34

080093bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	b672      	cpsid	i
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	b662      	cpsie	i
 80093d6:	607b      	str	r3, [r7, #4]
}
 80093d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093da:	4b10      	ldr	r3, [pc, #64]	; (800941c <vPortEnterCritical+0x60>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	4a0e      	ldr	r2, [pc, #56]	; (800941c <vPortEnterCritical+0x60>)
 80093e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093e4:	4b0d      	ldr	r3, [pc, #52]	; (800941c <vPortEnterCritical+0x60>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d111      	bne.n	8009410 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093ec:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <vPortEnterCritical+0x64>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00c      	beq.n	8009410 <vPortEnterCritical+0x54>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	b672      	cpsid	i
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	b662      	cpsie	i
 800940a:	603b      	str	r3, [r7, #0]
}
 800940c:	bf00      	nop
 800940e:	e7fe      	b.n	800940e <vPortEnterCritical+0x52>
	}
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	20000018 	.word	0x20000018
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <vPortExitCritical+0x54>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10c      	bne.n	800944c <vPortExitCritical+0x28>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	b672      	cpsid	i
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	b662      	cpsie	i
 8009446:	607b      	str	r3, [r7, #4]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <vPortExitCritical+0x54>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3b01      	subs	r3, #1
 8009452:	4a09      	ldr	r2, [pc, #36]	; (8009478 <vPortExitCritical+0x54>)
 8009454:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009456:	4b08      	ldr	r3, [pc, #32]	; (8009478 <vPortExitCritical+0x54>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d105      	bne.n	800946a <vPortExitCritical+0x46>
 800945e:	2300      	movs	r3, #0
 8009460:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f383 8811 	msr	BASEPRI, r3
}
 8009468:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20000018 	.word	0x20000018
 800947c:	00000000 	.word	0x00000000

08009480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009480:	f3ef 8009 	mrs	r0, PSP
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	4b15      	ldr	r3, [pc, #84]	; (80094e0 <pxCurrentTCBConst>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	f01e 0f10 	tst.w	lr, #16
 8009490:	bf08      	it	eq
 8009492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949a:	6010      	str	r0, [r2, #0]
 800949c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094a4:	b672      	cpsid	i
 80094a6:	f380 8811 	msr	BASEPRI, r0
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	b662      	cpsie	i
 80094b4:	f7fe ffb2 	bl	800841c <vTaskSwitchContext>
 80094b8:	f04f 0000 	mov.w	r0, #0
 80094bc:	f380 8811 	msr	BASEPRI, r0
 80094c0:	bc09      	pop	{r0, r3}
 80094c2:	6819      	ldr	r1, [r3, #0]
 80094c4:	6808      	ldr	r0, [r1, #0]
 80094c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ca:	f01e 0f10 	tst.w	lr, #16
 80094ce:	bf08      	it	eq
 80094d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094d4:	f380 8809 	msr	PSP, r0
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop

080094e0 <pxCurrentTCBConst>:
 80094e0:	20001188 	.word	0x20001188
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop

080094e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	b672      	cpsid	i
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	b662      	cpsie	i
 8009502:	607b      	str	r3, [r7, #4]
}
 8009504:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009506:	f7fe fecd 	bl	80082a4 <xTaskIncrementTick>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009510:	4b06      	ldr	r3, [pc, #24]	; (800952c <SysTick_Handler+0x44>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	2300      	movs	r3, #0
 800951a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	f383 8811 	msr	BASEPRI, r3
}
 8009522:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <vPortSetupTimerInterrupt+0x34>)
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800953a:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <vPortSetupTimerInterrupt+0x38>)
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <vPortSetupTimerInterrupt+0x3c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a0a      	ldr	r2, [pc, #40]	; (8009570 <vPortSetupTimerInterrupt+0x40>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	099b      	lsrs	r3, r3, #6
 800954c:	4a09      	ldr	r2, [pc, #36]	; (8009574 <vPortSetupTimerInterrupt+0x44>)
 800954e:	3b01      	subs	r3, #1
 8009550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009552:	4b04      	ldr	r3, [pc, #16]	; (8009564 <vPortSetupTimerInterrupt+0x34>)
 8009554:	2207      	movs	r2, #7
 8009556:	601a      	str	r2, [r3, #0]
}
 8009558:	bf00      	nop
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	e000e010 	.word	0xe000e010
 8009568:	e000e018 	.word	0xe000e018
 800956c:	20000000 	.word	0x20000000
 8009570:	10624dd3 	.word	0x10624dd3
 8009574:	e000e014 	.word	0xe000e014

08009578 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009578:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009588 <vPortEnableVFP+0x10>
 800957c:	6801      	ldr	r1, [r0, #0]
 800957e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009582:	6001      	str	r1, [r0, #0]
 8009584:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009586:	bf00      	nop
 8009588:	e000ed88 	.word	0xe000ed88

0800958c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009592:	f3ef 8305 	mrs	r3, IPSR
 8009596:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b0f      	cmp	r3, #15
 800959c:	d916      	bls.n	80095cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800959e:	4a19      	ldr	r2, [pc, #100]	; (8009604 <vPortValidateInterruptPriority+0x78>)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <vPortValidateInterruptPriority+0x7c>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	7afa      	ldrb	r2, [r7, #11]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d20c      	bcs.n	80095cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	b672      	cpsid	i
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	b662      	cpsie	i
 80095c6:	607b      	str	r3, [r7, #4]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095cc:	4b0f      	ldr	r3, [pc, #60]	; (800960c <vPortValidateInterruptPriority+0x80>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095d4:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <vPortValidateInterruptPriority+0x84>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d90c      	bls.n	80095f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	b672      	cpsid	i
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	b662      	cpsie	i
 80095f0:	603b      	str	r3, [r7, #0]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <vPortValidateInterruptPriority+0x68>
	}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	e000e3f0 	.word	0xe000e3f0
 8009608:	200017b4 	.word	0x200017b4
 800960c:	e000ed0c 	.word	0xe000ed0c
 8009610:	200017b8 	.word	0x200017b8

08009614 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009620:	f7fe fd82 	bl	8008128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009624:	4b5b      	ldr	r3, [pc, #364]	; (8009794 <pvPortMalloc+0x180>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800962c:	f000 f91a 	bl	8009864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009630:	4b59      	ldr	r3, [pc, #356]	; (8009798 <pvPortMalloc+0x184>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 8092 	bne.w	8009762 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01f      	beq.n	8009684 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009644:	2208      	movs	r2, #8
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	2b00      	cmp	r3, #0
 8009654:	d016      	beq.n	8009684 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f023 0307 	bic.w	r3, r3, #7
 800965c:	3308      	adds	r3, #8
 800965e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00c      	beq.n	8009684 <pvPortMalloc+0x70>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	b672      	cpsid	i
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	b662      	cpsie	i
 800967e:	617b      	str	r3, [r7, #20]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d06b      	beq.n	8009762 <pvPortMalloc+0x14e>
 800968a:	4b44      	ldr	r3, [pc, #272]	; (800979c <pvPortMalloc+0x188>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	429a      	cmp	r2, r3
 8009692:	d866      	bhi.n	8009762 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009694:	4b42      	ldr	r3, [pc, #264]	; (80097a0 <pvPortMalloc+0x18c>)
 8009696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009698:	4b41      	ldr	r3, [pc, #260]	; (80097a0 <pvPortMalloc+0x18c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800969e:	e004      	b.n	80096aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d903      	bls.n	80096bc <pvPortMalloc+0xa8>
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f1      	bne.n	80096a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096bc:	4b35      	ldr	r3, [pc, #212]	; (8009794 <pvPortMalloc+0x180>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d04d      	beq.n	8009762 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2208      	movs	r2, #8
 80096cc:	4413      	add	r3, r2
 80096ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	1ad2      	subs	r2, r2, r3
 80096e0:	2308      	movs	r3, #8
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d921      	bls.n	800972c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00c      	beq.n	8009714 <pvPortMalloc+0x100>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	b672      	cpsid	i
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	b662      	cpsie	i
 800970e:	613b      	str	r3, [r7, #16]
}
 8009710:	bf00      	nop
 8009712:	e7fe      	b.n	8009712 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	1ad2      	subs	r2, r2, r3
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009726:	69b8      	ldr	r0, [r7, #24]
 8009728:	f000 f8fe 	bl	8009928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800972c:	4b1b      	ldr	r3, [pc, #108]	; (800979c <pvPortMalloc+0x188>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	4a19      	ldr	r2, [pc, #100]	; (800979c <pvPortMalloc+0x188>)
 8009738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800973a:	4b18      	ldr	r3, [pc, #96]	; (800979c <pvPortMalloc+0x188>)
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <pvPortMalloc+0x190>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d203      	bcs.n	800974e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009746:	4b15      	ldr	r3, [pc, #84]	; (800979c <pvPortMalloc+0x188>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a16      	ldr	r2, [pc, #88]	; (80097a4 <pvPortMalloc+0x190>)
 800974c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	4b11      	ldr	r3, [pc, #68]	; (8009798 <pvPortMalloc+0x184>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	431a      	orrs	r2, r3
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009762:	f7fe fcef 	bl	8008144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00c      	beq.n	800978a <pvPortMalloc+0x176>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	b672      	cpsid	i
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	b662      	cpsie	i
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <pvPortMalloc+0x174>
	return pvReturn;
 800978a:	69fb      	ldr	r3, [r7, #28]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3728      	adds	r7, #40	; 0x28
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200053c4 	.word	0x200053c4
 8009798:	200053d0 	.word	0x200053d0
 800979c:	200053c8 	.word	0x200053c8
 80097a0:	200053bc 	.word	0x200053bc
 80097a4:	200053cc 	.word	0x200053cc

080097a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04c      	beq.n	8009854 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ba:	2308      	movs	r3, #8
 80097bc:	425b      	negs	r3, r3
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	4413      	add	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	4b23      	ldr	r3, [pc, #140]	; (800985c <vPortFree+0xb4>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4013      	ands	r3, r2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10c      	bne.n	80097f0 <vPortFree+0x48>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	b672      	cpsid	i
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	b662      	cpsie	i
 80097ea:	60fb      	str	r3, [r7, #12]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <vPortFree+0x6a>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	b672      	cpsid	i
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	b662      	cpsie	i
 800980c:	60bb      	str	r3, [r7, #8]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	4b11      	ldr	r3, [pc, #68]	; (800985c <vPortFree+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4013      	ands	r3, r2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d019      	beq.n	8009854 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d115      	bne.n	8009854 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b0b      	ldr	r3, [pc, #44]	; (800985c <vPortFree+0xb4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	43db      	mvns	r3, r3
 8009832:	401a      	ands	r2, r3
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009838:	f7fe fc76 	bl	8008128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <vPortFree+0xb8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4413      	add	r3, r2
 8009846:	4a06      	ldr	r2, [pc, #24]	; (8009860 <vPortFree+0xb8>)
 8009848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800984a:	6938      	ldr	r0, [r7, #16]
 800984c:	f000 f86c 	bl	8009928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009850:	f7fe fc78 	bl	8008144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009854:	bf00      	nop
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200053d0 	.word	0x200053d0
 8009860:	200053c8 	.word	0x200053c8

08009864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800986a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800986e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009870:	4b27      	ldr	r3, [pc, #156]	; (8009910 <prvHeapInit+0xac>)
 8009872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00c      	beq.n	8009898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3307      	adds	r3, #7
 8009882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f023 0307 	bic.w	r3, r3, #7
 800988a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	4a1f      	ldr	r2, [pc, #124]	; (8009910 <prvHeapInit+0xac>)
 8009894:	4413      	add	r3, r2
 8009896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800989c:	4a1d      	ldr	r2, [pc, #116]	; (8009914 <prvHeapInit+0xb0>)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098a2:	4b1c      	ldr	r3, [pc, #112]	; (8009914 <prvHeapInit+0xb0>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4413      	add	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098b0:	2208      	movs	r2, #8
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	1a9b      	subs	r3, r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0307 	bic.w	r3, r3, #7
 80098be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4a15      	ldr	r2, [pc, #84]	; (8009918 <prvHeapInit+0xb4>)
 80098c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098c6:	4b14      	ldr	r3, [pc, #80]	; (8009918 <prvHeapInit+0xb4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2200      	movs	r2, #0
 80098cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098ce:	4b12      	ldr	r3, [pc, #72]	; (8009918 <prvHeapInit+0xb4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098e4:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <prvHeapInit+0xb4>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	4a0a      	ldr	r2, [pc, #40]	; (800991c <prvHeapInit+0xb8>)
 80098f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4a09      	ldr	r2, [pc, #36]	; (8009920 <prvHeapInit+0xbc>)
 80098fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098fc:	4b09      	ldr	r3, [pc, #36]	; (8009924 <prvHeapInit+0xc0>)
 80098fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009902:	601a      	str	r2, [r3, #0]
}
 8009904:	bf00      	nop
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	200017bc 	.word	0x200017bc
 8009914:	200053bc 	.word	0x200053bc
 8009918:	200053c4 	.word	0x200053c4
 800991c:	200053cc 	.word	0x200053cc
 8009920:	200053c8 	.word	0x200053c8
 8009924:	200053d0 	.word	0x200053d0

08009928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009930:	4b28      	ldr	r3, [pc, #160]	; (80099d4 <prvInsertBlockIntoFreeList+0xac>)
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e002      	b.n	800993c <prvInsertBlockIntoFreeList+0x14>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	429a      	cmp	r2, r3
 8009944:	d8f7      	bhi.n	8009936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	429a      	cmp	r2, r3
 8009956:	d108      	bne.n	800996a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	441a      	add	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	441a      	add	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d118      	bne.n	80099b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d00d      	beq.n	80099a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	441a      	add	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	e008      	b.n	80099b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099a6:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <prvInsertBlockIntoFreeList+0xb0>)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	e003      	b.n	80099b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d002      	beq.n	80099c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	200053bc 	.word	0x200053bc
 80099d8:	200053c4 	.word	0x200053c4

080099dc <__cvt>:
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	ed2d 8b02 	vpush	{d8}
 80099e2:	eeb0 8b40 	vmov.f64	d8, d0
 80099e6:	b085      	sub	sp, #20
 80099e8:	4617      	mov	r7, r2
 80099ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80099ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80099ee:	ee18 2a90 	vmov	r2, s17
 80099f2:	f025 0520 	bic.w	r5, r5, #32
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	bfb6      	itet	lt
 80099fa:	222d      	movlt	r2, #45	; 0x2d
 80099fc:	2200      	movge	r2, #0
 80099fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8009a02:	2d46      	cmp	r5, #70	; 0x46
 8009a04:	460c      	mov	r4, r1
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	d004      	beq.n	8009a14 <__cvt+0x38>
 8009a0a:	2d45      	cmp	r5, #69	; 0x45
 8009a0c:	d100      	bne.n	8009a10 <__cvt+0x34>
 8009a0e:	3401      	adds	r4, #1
 8009a10:	2102      	movs	r1, #2
 8009a12:	e000      	b.n	8009a16 <__cvt+0x3a>
 8009a14:	2103      	movs	r1, #3
 8009a16:	ab03      	add	r3, sp, #12
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	ab02      	add	r3, sp, #8
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4622      	mov	r2, r4
 8009a20:	4633      	mov	r3, r6
 8009a22:	eeb0 0b48 	vmov.f64	d0, d8
 8009a26:	f000 fea7 	bl	800a778 <_dtoa_r>
 8009a2a:	2d47      	cmp	r5, #71	; 0x47
 8009a2c:	d101      	bne.n	8009a32 <__cvt+0x56>
 8009a2e:	07fb      	lsls	r3, r7, #31
 8009a30:	d51a      	bpl.n	8009a68 <__cvt+0x8c>
 8009a32:	2d46      	cmp	r5, #70	; 0x46
 8009a34:	eb00 0204 	add.w	r2, r0, r4
 8009a38:	d10c      	bne.n	8009a54 <__cvt+0x78>
 8009a3a:	7803      	ldrb	r3, [r0, #0]
 8009a3c:	2b30      	cmp	r3, #48	; 0x30
 8009a3e:	d107      	bne.n	8009a50 <__cvt+0x74>
 8009a40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a48:	bf1c      	itt	ne
 8009a4a:	f1c4 0401 	rsbne	r4, r4, #1
 8009a4e:	6034      	strne	r4, [r6, #0]
 8009a50:	6833      	ldr	r3, [r6, #0]
 8009a52:	441a      	add	r2, r3
 8009a54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5c:	bf08      	it	eq
 8009a5e:	9203      	streq	r2, [sp, #12]
 8009a60:	2130      	movs	r1, #48	; 0x30
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d307      	bcc.n	8009a78 <__cvt+0x9c>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a6c:	1a1b      	subs	r3, r3, r0
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	b005      	add	sp, #20
 8009a72:	ecbd 8b02 	vpop	{d8}
 8009a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a78:	1c5c      	adds	r4, r3, #1
 8009a7a:	9403      	str	r4, [sp, #12]
 8009a7c:	7019      	strb	r1, [r3, #0]
 8009a7e:	e7f0      	b.n	8009a62 <__cvt+0x86>

08009a80 <__exponent>:
 8009a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a82:	4603      	mov	r3, r0
 8009a84:	2900      	cmp	r1, #0
 8009a86:	bfb8      	it	lt
 8009a88:	4249      	neglt	r1, r1
 8009a8a:	f803 2b02 	strb.w	r2, [r3], #2
 8009a8e:	bfb4      	ite	lt
 8009a90:	222d      	movlt	r2, #45	; 0x2d
 8009a92:	222b      	movge	r2, #43	; 0x2b
 8009a94:	2909      	cmp	r1, #9
 8009a96:	7042      	strb	r2, [r0, #1]
 8009a98:	dd2a      	ble.n	8009af0 <__exponent+0x70>
 8009a9a:	f10d 0207 	add.w	r2, sp, #7
 8009a9e:	4617      	mov	r7, r2
 8009aa0:	260a      	movs	r6, #10
 8009aa2:	4694      	mov	ip, r2
 8009aa4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009aa8:	fb06 1415 	mls	r4, r6, r5, r1
 8009aac:	3430      	adds	r4, #48	; 0x30
 8009aae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	2c63      	cmp	r4, #99	; 0x63
 8009ab6:	f102 32ff 	add.w	r2, r2, #4294967295
 8009aba:	4629      	mov	r1, r5
 8009abc:	dcf1      	bgt.n	8009aa2 <__exponent+0x22>
 8009abe:	3130      	adds	r1, #48	; 0x30
 8009ac0:	f1ac 0402 	sub.w	r4, ip, #2
 8009ac4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ac8:	1c41      	adds	r1, r0, #1
 8009aca:	4622      	mov	r2, r4
 8009acc:	42ba      	cmp	r2, r7
 8009ace:	d30a      	bcc.n	8009ae6 <__exponent+0x66>
 8009ad0:	f10d 0209 	add.w	r2, sp, #9
 8009ad4:	eba2 020c 	sub.w	r2, r2, ip
 8009ad8:	42bc      	cmp	r4, r7
 8009ada:	bf88      	it	hi
 8009adc:	2200      	movhi	r2, #0
 8009ade:	4413      	add	r3, r2
 8009ae0:	1a18      	subs	r0, r3, r0
 8009ae2:	b003      	add	sp, #12
 8009ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009aea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009aee:	e7ed      	b.n	8009acc <__exponent+0x4c>
 8009af0:	2330      	movs	r3, #48	; 0x30
 8009af2:	3130      	adds	r1, #48	; 0x30
 8009af4:	7083      	strb	r3, [r0, #2]
 8009af6:	70c1      	strb	r1, [r0, #3]
 8009af8:	1d03      	adds	r3, r0, #4
 8009afa:	e7f1      	b.n	8009ae0 <__exponent+0x60>
 8009afc:	0000      	movs	r0, r0
	...

08009b00 <_printf_float>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	b08b      	sub	sp, #44	; 0x2c
 8009b06:	460c      	mov	r4, r1
 8009b08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	461f      	mov	r7, r3
 8009b10:	4605      	mov	r5, r0
 8009b12:	f000 fccd 	bl	800a4b0 <_localeconv_r>
 8009b16:	f8d0 b000 	ldr.w	fp, [r0]
 8009b1a:	4658      	mov	r0, fp
 8009b1c:	f7f6 fbe0 	bl	80002e0 <strlen>
 8009b20:	2300      	movs	r3, #0
 8009b22:	9308      	str	r3, [sp, #32]
 8009b24:	f8d8 3000 	ldr.w	r3, [r8]
 8009b28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b2c:	6822      	ldr	r2, [r4, #0]
 8009b2e:	3307      	adds	r3, #7
 8009b30:	f023 0307 	bic.w	r3, r3, #7
 8009b34:	f103 0108 	add.w	r1, r3, #8
 8009b38:	f8c8 1000 	str.w	r1, [r8]
 8009b3c:	ed93 0b00 	vldr	d0, [r3]
 8009b40:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009da0 <_printf_float+0x2a0>
 8009b44:	eeb0 7bc0 	vabs.f64	d7, d0
 8009b48:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b50:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009b54:	4682      	mov	sl, r0
 8009b56:	dd24      	ble.n	8009ba2 <_printf_float+0xa2>
 8009b58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b60:	d502      	bpl.n	8009b68 <_printf_float+0x68>
 8009b62:	232d      	movs	r3, #45	; 0x2d
 8009b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b68:	498f      	ldr	r1, [pc, #572]	; (8009da8 <_printf_float+0x2a8>)
 8009b6a:	4b90      	ldr	r3, [pc, #576]	; (8009dac <_printf_float+0x2ac>)
 8009b6c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009b70:	bf94      	ite	ls
 8009b72:	4688      	movls	r8, r1
 8009b74:	4698      	movhi	r8, r3
 8009b76:	2303      	movs	r3, #3
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	f022 0204 	bic.w	r2, r2, #4
 8009b7e:	2300      	movs	r3, #0
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	9304      	str	r3, [sp, #16]
 8009b84:	9700      	str	r7, [sp, #0]
 8009b86:	4633      	mov	r3, r6
 8009b88:	aa09      	add	r2, sp, #36	; 0x24
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f000 f9d1 	bl	8009f34 <_printf_common>
 8009b92:	3001      	adds	r0, #1
 8009b94:	f040 808a 	bne.w	8009cac <_printf_float+0x1ac>
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	b00b      	add	sp, #44	; 0x2c
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	eeb4 0b40 	vcmp.f64	d0, d0
 8009ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009baa:	d709      	bvc.n	8009bc0 <_printf_float+0xc0>
 8009bac:	ee10 3a90 	vmov	r3, s1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfbc      	itt	lt
 8009bb4:	232d      	movlt	r3, #45	; 0x2d
 8009bb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bba:	497d      	ldr	r1, [pc, #500]	; (8009db0 <_printf_float+0x2b0>)
 8009bbc:	4b7d      	ldr	r3, [pc, #500]	; (8009db4 <_printf_float+0x2b4>)
 8009bbe:	e7d5      	b.n	8009b6c <_printf_float+0x6c>
 8009bc0:	6863      	ldr	r3, [r4, #4]
 8009bc2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009bc6:	9104      	str	r1, [sp, #16]
 8009bc8:	1c59      	adds	r1, r3, #1
 8009bca:	d13c      	bne.n	8009c46 <_printf_float+0x146>
 8009bcc:	2306      	movs	r3, #6
 8009bce:	6063      	str	r3, [r4, #4]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9303      	str	r3, [sp, #12]
 8009bd4:	ab08      	add	r3, sp, #32
 8009bd6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009bda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bde:	ab07      	add	r3, sp, #28
 8009be0:	6861      	ldr	r1, [r4, #4]
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	6022      	str	r2, [r4, #0]
 8009be6:	f10d 031b 	add.w	r3, sp, #27
 8009bea:	4628      	mov	r0, r5
 8009bec:	f7ff fef6 	bl	80099dc <__cvt>
 8009bf0:	9b04      	ldr	r3, [sp, #16]
 8009bf2:	9907      	ldr	r1, [sp, #28]
 8009bf4:	2b47      	cmp	r3, #71	; 0x47
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	d108      	bne.n	8009c0c <_printf_float+0x10c>
 8009bfa:	1cc8      	adds	r0, r1, #3
 8009bfc:	db02      	blt.n	8009c04 <_printf_float+0x104>
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	4299      	cmp	r1, r3
 8009c02:	dd41      	ble.n	8009c88 <_printf_float+0x188>
 8009c04:	f1a9 0902 	sub.w	r9, r9, #2
 8009c08:	fa5f f989 	uxtb.w	r9, r9
 8009c0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c10:	d820      	bhi.n	8009c54 <_printf_float+0x154>
 8009c12:	3901      	subs	r1, #1
 8009c14:	464a      	mov	r2, r9
 8009c16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c1a:	9107      	str	r1, [sp, #28]
 8009c1c:	f7ff ff30 	bl	8009a80 <__exponent>
 8009c20:	9a08      	ldr	r2, [sp, #32]
 8009c22:	9004      	str	r0, [sp, #16]
 8009c24:	1813      	adds	r3, r2, r0
 8009c26:	2a01      	cmp	r2, #1
 8009c28:	6123      	str	r3, [r4, #16]
 8009c2a:	dc02      	bgt.n	8009c32 <_printf_float+0x132>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	07d2      	lsls	r2, r2, #31
 8009c30:	d501      	bpl.n	8009c36 <_printf_float+0x136>
 8009c32:	3301      	adds	r3, #1
 8009c34:	6123      	str	r3, [r4, #16]
 8009c36:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0a2      	beq.n	8009b84 <_printf_float+0x84>
 8009c3e:	232d      	movs	r3, #45	; 0x2d
 8009c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c44:	e79e      	b.n	8009b84 <_printf_float+0x84>
 8009c46:	9904      	ldr	r1, [sp, #16]
 8009c48:	2947      	cmp	r1, #71	; 0x47
 8009c4a:	d1c1      	bne.n	8009bd0 <_printf_float+0xd0>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1bf      	bne.n	8009bd0 <_printf_float+0xd0>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e7bc      	b.n	8009bce <_printf_float+0xce>
 8009c54:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009c58:	d118      	bne.n	8009c8c <_printf_float+0x18c>
 8009c5a:	2900      	cmp	r1, #0
 8009c5c:	6863      	ldr	r3, [r4, #4]
 8009c5e:	dd0b      	ble.n	8009c78 <_printf_float+0x178>
 8009c60:	6121      	str	r1, [r4, #16]
 8009c62:	b913      	cbnz	r3, 8009c6a <_printf_float+0x16a>
 8009c64:	6822      	ldr	r2, [r4, #0]
 8009c66:	07d0      	lsls	r0, r2, #31
 8009c68:	d502      	bpl.n	8009c70 <_printf_float+0x170>
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	440b      	add	r3, r1
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	2300      	movs	r3, #0
 8009c72:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	e7de      	b.n	8009c36 <_printf_float+0x136>
 8009c78:	b913      	cbnz	r3, 8009c80 <_printf_float+0x180>
 8009c7a:	6822      	ldr	r2, [r4, #0]
 8009c7c:	07d2      	lsls	r2, r2, #31
 8009c7e:	d501      	bpl.n	8009c84 <_printf_float+0x184>
 8009c80:	3302      	adds	r3, #2
 8009c82:	e7f4      	b.n	8009c6e <_printf_float+0x16e>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e7f2      	b.n	8009c6e <_printf_float+0x16e>
 8009c88:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009c8c:	9b08      	ldr	r3, [sp, #32]
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	db05      	blt.n	8009c9e <_printf_float+0x19e>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	6121      	str	r1, [r4, #16]
 8009c96:	07d8      	lsls	r0, r3, #31
 8009c98:	d5ea      	bpl.n	8009c70 <_printf_float+0x170>
 8009c9a:	1c4b      	adds	r3, r1, #1
 8009c9c:	e7e7      	b.n	8009c6e <_printf_float+0x16e>
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	bfd4      	ite	le
 8009ca2:	f1c1 0202 	rsble	r2, r1, #2
 8009ca6:	2201      	movgt	r2, #1
 8009ca8:	4413      	add	r3, r2
 8009caa:	e7e0      	b.n	8009c6e <_printf_float+0x16e>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	055a      	lsls	r2, r3, #21
 8009cb0:	d407      	bmi.n	8009cc2 <_printf_float+0x1c2>
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d12a      	bne.n	8009d16 <_printf_float+0x216>
 8009cc0:	e76a      	b.n	8009b98 <_printf_float+0x98>
 8009cc2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cc6:	f240 80e0 	bls.w	8009e8a <_printf_float+0x38a>
 8009cca:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009cce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd6:	d133      	bne.n	8009d40 <_printf_float+0x240>
 8009cd8:	4a37      	ldr	r2, [pc, #220]	; (8009db8 <_printf_float+0x2b8>)
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f af58 	beq.w	8009b98 <_printf_float+0x98>
 8009ce8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	db02      	blt.n	8009cf6 <_printf_float+0x1f6>
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	07d8      	lsls	r0, r3, #31
 8009cf4:	d50f      	bpl.n	8009d16 <_printf_float+0x216>
 8009cf6:	4653      	mov	r3, sl
 8009cf8:	465a      	mov	r2, fp
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f af49 	beq.w	8009b98 <_printf_float+0x98>
 8009d06:	f04f 0800 	mov.w	r8, #0
 8009d0a:	f104 091a 	add.w	r9, r4, #26
 8009d0e:	9b08      	ldr	r3, [sp, #32]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	4543      	cmp	r3, r8
 8009d14:	dc09      	bgt.n	8009d2a <_printf_float+0x22a>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	079b      	lsls	r3, r3, #30
 8009d1a:	f100 8106 	bmi.w	8009f2a <_printf_float+0x42a>
 8009d1e:	68e0      	ldr	r0, [r4, #12]
 8009d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d22:	4298      	cmp	r0, r3
 8009d24:	bfb8      	it	lt
 8009d26:	4618      	movlt	r0, r3
 8009d28:	e738      	b.n	8009b9c <_printf_float+0x9c>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f af2f 	beq.w	8009b98 <_printf_float+0x98>
 8009d3a:	f108 0801 	add.w	r8, r8, #1
 8009d3e:	e7e6      	b.n	8009d0e <_printf_float+0x20e>
 8009d40:	9b07      	ldr	r3, [sp, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dc3a      	bgt.n	8009dbc <_printf_float+0x2bc>
 8009d46:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <_printf_float+0x2b8>)
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f af21 	beq.w	8009b98 <_printf_float+0x98>
 8009d56:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	d102      	bne.n	8009d64 <_printf_float+0x264>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	07d9      	lsls	r1, r3, #31
 8009d62:	d5d8      	bpl.n	8009d16 <_printf_float+0x216>
 8009d64:	4653      	mov	r3, sl
 8009d66:	465a      	mov	r2, fp
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f43f af12 	beq.w	8009b98 <_printf_float+0x98>
 8009d74:	f04f 0900 	mov.w	r9, #0
 8009d78:	f104 0a1a 	add.w	sl, r4, #26
 8009d7c:	9b07      	ldr	r3, [sp, #28]
 8009d7e:	425b      	negs	r3, r3
 8009d80:	454b      	cmp	r3, r9
 8009d82:	dc01      	bgt.n	8009d88 <_printf_float+0x288>
 8009d84:	9b08      	ldr	r3, [sp, #32]
 8009d86:	e795      	b.n	8009cb4 <_printf_float+0x1b4>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4652      	mov	r2, sl
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b8      	blx	r7
 8009d92:	3001      	adds	r0, #1
 8009d94:	f43f af00 	beq.w	8009b98 <_printf_float+0x98>
 8009d98:	f109 0901 	add.w	r9, r9, #1
 8009d9c:	e7ee      	b.n	8009d7c <_printf_float+0x27c>
 8009d9e:	bf00      	nop
 8009da0:	ffffffff 	.word	0xffffffff
 8009da4:	7fefffff 	.word	0x7fefffff
 8009da8:	0800ccd4 	.word	0x0800ccd4
 8009dac:	0800ccd8 	.word	0x0800ccd8
 8009db0:	0800ccdc 	.word	0x0800ccdc
 8009db4:	0800cce0 	.word	0x0800cce0
 8009db8:	0800cce4 	.word	0x0800cce4
 8009dbc:	9a08      	ldr	r2, [sp, #32]
 8009dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	bfa8      	it	ge
 8009dc4:	461a      	movge	r2, r3
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	4691      	mov	r9, r2
 8009dca:	dc38      	bgt.n	8009e3e <_printf_float+0x33e>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9305      	str	r3, [sp, #20]
 8009dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dd4:	f104 021a 	add.w	r2, r4, #26
 8009dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dda:	9905      	ldr	r1, [sp, #20]
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	eba3 0309 	sub.w	r3, r3, r9
 8009de2:	428b      	cmp	r3, r1
 8009de4:	dc33      	bgt.n	8009e4e <_printf_float+0x34e>
 8009de6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	db3c      	blt.n	8009e68 <_printf_float+0x368>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	07da      	lsls	r2, r3, #31
 8009df2:	d439      	bmi.n	8009e68 <_printf_float+0x368>
 8009df4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009df8:	eba2 0903 	sub.w	r9, r2, r3
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	4591      	cmp	r9, r2
 8009e02:	bfa8      	it	ge
 8009e04:	4691      	movge	r9, r2
 8009e06:	f1b9 0f00 	cmp.w	r9, #0
 8009e0a:	dc35      	bgt.n	8009e78 <_printf_float+0x378>
 8009e0c:	f04f 0800 	mov.w	r8, #0
 8009e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e14:	f104 0a1a 	add.w	sl, r4, #26
 8009e18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e1c:	1a9b      	subs	r3, r3, r2
 8009e1e:	eba3 0309 	sub.w	r3, r3, r9
 8009e22:	4543      	cmp	r3, r8
 8009e24:	f77f af77 	ble.w	8009d16 <_printf_float+0x216>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4652      	mov	r2, sl
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f aeb0 	beq.w	8009b98 <_printf_float+0x98>
 8009e38:	f108 0801 	add.w	r8, r8, #1
 8009e3c:	e7ec      	b.n	8009e18 <_printf_float+0x318>
 8009e3e:	4613      	mov	r3, r2
 8009e40:	4631      	mov	r1, r6
 8009e42:	4642      	mov	r2, r8
 8009e44:	4628      	mov	r0, r5
 8009e46:	47b8      	blx	r7
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d1bf      	bne.n	8009dcc <_printf_float+0x2cc>
 8009e4c:	e6a4      	b.n	8009b98 <_printf_float+0x98>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	9204      	str	r2, [sp, #16]
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	f43f ae9d 	beq.w	8009b98 <_printf_float+0x98>
 8009e5e:	9b05      	ldr	r3, [sp, #20]
 8009e60:	9a04      	ldr	r2, [sp, #16]
 8009e62:	3301      	adds	r3, #1
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	e7b7      	b.n	8009dd8 <_printf_float+0x2d8>
 8009e68:	4653      	mov	r3, sl
 8009e6a:	465a      	mov	r2, fp
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	d1be      	bne.n	8009df4 <_printf_float+0x2f4>
 8009e76:	e68f      	b.n	8009b98 <_printf_float+0x98>
 8009e78:	9a04      	ldr	r2, [sp, #16]
 8009e7a:	464b      	mov	r3, r9
 8009e7c:	4442      	add	r2, r8
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	d1c1      	bne.n	8009e0c <_printf_float+0x30c>
 8009e88:	e686      	b.n	8009b98 <_printf_float+0x98>
 8009e8a:	9a08      	ldr	r2, [sp, #32]
 8009e8c:	2a01      	cmp	r2, #1
 8009e8e:	dc01      	bgt.n	8009e94 <_printf_float+0x394>
 8009e90:	07db      	lsls	r3, r3, #31
 8009e92:	d537      	bpl.n	8009f04 <_printf_float+0x404>
 8009e94:	2301      	movs	r3, #1
 8009e96:	4642      	mov	r2, r8
 8009e98:	4631      	mov	r1, r6
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	47b8      	blx	r7
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	f43f ae7a 	beq.w	8009b98 <_printf_float+0x98>
 8009ea4:	4653      	mov	r3, sl
 8009ea6:	465a      	mov	r2, fp
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f43f ae72 	beq.w	8009b98 <_printf_float+0x98>
 8009eb4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009eb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec0:	9b08      	ldr	r3, [sp, #32]
 8009ec2:	d01a      	beq.n	8009efa <_printf_float+0x3fa>
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	f108 0201 	add.w	r2, r8, #1
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4628      	mov	r0, r5
 8009ece:	47b8      	blx	r7
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	d10e      	bne.n	8009ef2 <_printf_float+0x3f2>
 8009ed4:	e660      	b.n	8009b98 <_printf_float+0x98>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	464a      	mov	r2, r9
 8009eda:	4631      	mov	r1, r6
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b8      	blx	r7
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	f43f ae59 	beq.w	8009b98 <_printf_float+0x98>
 8009ee6:	f108 0801 	add.w	r8, r8, #1
 8009eea:	9b08      	ldr	r3, [sp, #32]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	4543      	cmp	r3, r8
 8009ef0:	dcf1      	bgt.n	8009ed6 <_printf_float+0x3d6>
 8009ef2:	9b04      	ldr	r3, [sp, #16]
 8009ef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ef8:	e6dd      	b.n	8009cb6 <_printf_float+0x1b6>
 8009efa:	f04f 0800 	mov.w	r8, #0
 8009efe:	f104 091a 	add.w	r9, r4, #26
 8009f02:	e7f2      	b.n	8009eea <_printf_float+0x3ea>
 8009f04:	2301      	movs	r3, #1
 8009f06:	4642      	mov	r2, r8
 8009f08:	e7df      	b.n	8009eca <_printf_float+0x3ca>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	464a      	mov	r2, r9
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	f43f ae3f 	beq.w	8009b98 <_printf_float+0x98>
 8009f1a:	f108 0801 	add.w	r8, r8, #1
 8009f1e:	68e3      	ldr	r3, [r4, #12]
 8009f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f22:	1a5b      	subs	r3, r3, r1
 8009f24:	4543      	cmp	r3, r8
 8009f26:	dcf0      	bgt.n	8009f0a <_printf_float+0x40a>
 8009f28:	e6f9      	b.n	8009d1e <_printf_float+0x21e>
 8009f2a:	f04f 0800 	mov.w	r8, #0
 8009f2e:	f104 0919 	add.w	r9, r4, #25
 8009f32:	e7f4      	b.n	8009f1e <_printf_float+0x41e>

08009f34 <_printf_common>:
 8009f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	4616      	mov	r6, r2
 8009f3a:	4699      	mov	r9, r3
 8009f3c:	688a      	ldr	r2, [r1, #8]
 8009f3e:	690b      	ldr	r3, [r1, #16]
 8009f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f44:	4293      	cmp	r3, r2
 8009f46:	bfb8      	it	lt
 8009f48:	4613      	movlt	r3, r2
 8009f4a:	6033      	str	r3, [r6, #0]
 8009f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f50:	4607      	mov	r7, r0
 8009f52:	460c      	mov	r4, r1
 8009f54:	b10a      	cbz	r2, 8009f5a <_printf_common+0x26>
 8009f56:	3301      	adds	r3, #1
 8009f58:	6033      	str	r3, [r6, #0]
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	0699      	lsls	r1, r3, #26
 8009f5e:	bf42      	ittt	mi
 8009f60:	6833      	ldrmi	r3, [r6, #0]
 8009f62:	3302      	addmi	r3, #2
 8009f64:	6033      	strmi	r3, [r6, #0]
 8009f66:	6825      	ldr	r5, [r4, #0]
 8009f68:	f015 0506 	ands.w	r5, r5, #6
 8009f6c:	d106      	bne.n	8009f7c <_printf_common+0x48>
 8009f6e:	f104 0a19 	add.w	sl, r4, #25
 8009f72:	68e3      	ldr	r3, [r4, #12]
 8009f74:	6832      	ldr	r2, [r6, #0]
 8009f76:	1a9b      	subs	r3, r3, r2
 8009f78:	42ab      	cmp	r3, r5
 8009f7a:	dc26      	bgt.n	8009fca <_printf_common+0x96>
 8009f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f80:	1e13      	subs	r3, r2, #0
 8009f82:	6822      	ldr	r2, [r4, #0]
 8009f84:	bf18      	it	ne
 8009f86:	2301      	movne	r3, #1
 8009f88:	0692      	lsls	r2, r2, #26
 8009f8a:	d42b      	bmi.n	8009fe4 <_printf_common+0xb0>
 8009f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f90:	4649      	mov	r1, r9
 8009f92:	4638      	mov	r0, r7
 8009f94:	47c0      	blx	r8
 8009f96:	3001      	adds	r0, #1
 8009f98:	d01e      	beq.n	8009fd8 <_printf_common+0xa4>
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	6922      	ldr	r2, [r4, #16]
 8009f9e:	f003 0306 	and.w	r3, r3, #6
 8009fa2:	2b04      	cmp	r3, #4
 8009fa4:	bf02      	ittt	eq
 8009fa6:	68e5      	ldreq	r5, [r4, #12]
 8009fa8:	6833      	ldreq	r3, [r6, #0]
 8009faa:	1aed      	subeq	r5, r5, r3
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	bf0c      	ite	eq
 8009fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fb4:	2500      	movne	r5, #0
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	bfc4      	itt	gt
 8009fba:	1a9b      	subgt	r3, r3, r2
 8009fbc:	18ed      	addgt	r5, r5, r3
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	341a      	adds	r4, #26
 8009fc2:	42b5      	cmp	r5, r6
 8009fc4:	d11a      	bne.n	8009ffc <_printf_common+0xc8>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e008      	b.n	8009fdc <_printf_common+0xa8>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4652      	mov	r2, sl
 8009fce:	4649      	mov	r1, r9
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	47c0      	blx	r8
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d103      	bne.n	8009fe0 <_printf_common+0xac>
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe0:	3501      	adds	r5, #1
 8009fe2:	e7c6      	b.n	8009f72 <_printf_common+0x3e>
 8009fe4:	18e1      	adds	r1, r4, r3
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	2030      	movs	r0, #48	; 0x30
 8009fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fee:	4422      	add	r2, r4
 8009ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ff8:	3302      	adds	r3, #2
 8009ffa:	e7c7      	b.n	8009f8c <_printf_common+0x58>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	4622      	mov	r2, r4
 800a000:	4649      	mov	r1, r9
 800a002:	4638      	mov	r0, r7
 800a004:	47c0      	blx	r8
 800a006:	3001      	adds	r0, #1
 800a008:	d0e6      	beq.n	8009fd8 <_printf_common+0xa4>
 800a00a:	3601      	adds	r6, #1
 800a00c:	e7d9      	b.n	8009fc2 <_printf_common+0x8e>
	...

0800a010 <_printf_i>:
 800a010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a014:	7e0f      	ldrb	r7, [r1, #24]
 800a016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a018:	2f78      	cmp	r7, #120	; 0x78
 800a01a:	4691      	mov	r9, r2
 800a01c:	4680      	mov	r8, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	469a      	mov	sl, r3
 800a022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a026:	d807      	bhi.n	800a038 <_printf_i+0x28>
 800a028:	2f62      	cmp	r7, #98	; 0x62
 800a02a:	d80a      	bhi.n	800a042 <_printf_i+0x32>
 800a02c:	2f00      	cmp	r7, #0
 800a02e:	f000 80d4 	beq.w	800a1da <_printf_i+0x1ca>
 800a032:	2f58      	cmp	r7, #88	; 0x58
 800a034:	f000 80c0 	beq.w	800a1b8 <_printf_i+0x1a8>
 800a038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a03c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a040:	e03a      	b.n	800a0b8 <_printf_i+0xa8>
 800a042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a046:	2b15      	cmp	r3, #21
 800a048:	d8f6      	bhi.n	800a038 <_printf_i+0x28>
 800a04a:	a101      	add	r1, pc, #4	; (adr r1, 800a050 <_printf_i+0x40>)
 800a04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a050:	0800a0a9 	.word	0x0800a0a9
 800a054:	0800a0bd 	.word	0x0800a0bd
 800a058:	0800a039 	.word	0x0800a039
 800a05c:	0800a039 	.word	0x0800a039
 800a060:	0800a039 	.word	0x0800a039
 800a064:	0800a039 	.word	0x0800a039
 800a068:	0800a0bd 	.word	0x0800a0bd
 800a06c:	0800a039 	.word	0x0800a039
 800a070:	0800a039 	.word	0x0800a039
 800a074:	0800a039 	.word	0x0800a039
 800a078:	0800a039 	.word	0x0800a039
 800a07c:	0800a1c1 	.word	0x0800a1c1
 800a080:	0800a0e9 	.word	0x0800a0e9
 800a084:	0800a17b 	.word	0x0800a17b
 800a088:	0800a039 	.word	0x0800a039
 800a08c:	0800a039 	.word	0x0800a039
 800a090:	0800a1e3 	.word	0x0800a1e3
 800a094:	0800a039 	.word	0x0800a039
 800a098:	0800a0e9 	.word	0x0800a0e9
 800a09c:	0800a039 	.word	0x0800a039
 800a0a0:	0800a039 	.word	0x0800a039
 800a0a4:	0800a183 	.word	0x0800a183
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	1d1a      	adds	r2, r3, #4
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	602a      	str	r2, [r5, #0]
 800a0b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e09f      	b.n	800a1fc <_printf_i+0x1ec>
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	682b      	ldr	r3, [r5, #0]
 800a0c0:	0607      	lsls	r7, r0, #24
 800a0c2:	f103 0104 	add.w	r1, r3, #4
 800a0c6:	6029      	str	r1, [r5, #0]
 800a0c8:	d501      	bpl.n	800a0ce <_printf_i+0xbe>
 800a0ca:	681e      	ldr	r6, [r3, #0]
 800a0cc:	e003      	b.n	800a0d6 <_printf_i+0xc6>
 800a0ce:	0646      	lsls	r6, r0, #25
 800a0d0:	d5fb      	bpl.n	800a0ca <_printf_i+0xba>
 800a0d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a0d6:	2e00      	cmp	r6, #0
 800a0d8:	da03      	bge.n	800a0e2 <_printf_i+0xd2>
 800a0da:	232d      	movs	r3, #45	; 0x2d
 800a0dc:	4276      	negs	r6, r6
 800a0de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e2:	485a      	ldr	r0, [pc, #360]	; (800a24c <_printf_i+0x23c>)
 800a0e4:	230a      	movs	r3, #10
 800a0e6:	e012      	b.n	800a10e <_printf_i+0xfe>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	6820      	ldr	r0, [r4, #0]
 800a0ec:	1d19      	adds	r1, r3, #4
 800a0ee:	6029      	str	r1, [r5, #0]
 800a0f0:	0605      	lsls	r5, r0, #24
 800a0f2:	d501      	bpl.n	800a0f8 <_printf_i+0xe8>
 800a0f4:	681e      	ldr	r6, [r3, #0]
 800a0f6:	e002      	b.n	800a0fe <_printf_i+0xee>
 800a0f8:	0641      	lsls	r1, r0, #25
 800a0fa:	d5fb      	bpl.n	800a0f4 <_printf_i+0xe4>
 800a0fc:	881e      	ldrh	r6, [r3, #0]
 800a0fe:	4853      	ldr	r0, [pc, #332]	; (800a24c <_printf_i+0x23c>)
 800a100:	2f6f      	cmp	r7, #111	; 0x6f
 800a102:	bf0c      	ite	eq
 800a104:	2308      	moveq	r3, #8
 800a106:	230a      	movne	r3, #10
 800a108:	2100      	movs	r1, #0
 800a10a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a10e:	6865      	ldr	r5, [r4, #4]
 800a110:	60a5      	str	r5, [r4, #8]
 800a112:	2d00      	cmp	r5, #0
 800a114:	bfa2      	ittt	ge
 800a116:	6821      	ldrge	r1, [r4, #0]
 800a118:	f021 0104 	bicge.w	r1, r1, #4
 800a11c:	6021      	strge	r1, [r4, #0]
 800a11e:	b90e      	cbnz	r6, 800a124 <_printf_i+0x114>
 800a120:	2d00      	cmp	r5, #0
 800a122:	d04b      	beq.n	800a1bc <_printf_i+0x1ac>
 800a124:	4615      	mov	r5, r2
 800a126:	fbb6 f1f3 	udiv	r1, r6, r3
 800a12a:	fb03 6711 	mls	r7, r3, r1, r6
 800a12e:	5dc7      	ldrb	r7, [r0, r7]
 800a130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a134:	4637      	mov	r7, r6
 800a136:	42bb      	cmp	r3, r7
 800a138:	460e      	mov	r6, r1
 800a13a:	d9f4      	bls.n	800a126 <_printf_i+0x116>
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d10b      	bne.n	800a158 <_printf_i+0x148>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	07de      	lsls	r6, r3, #31
 800a144:	d508      	bpl.n	800a158 <_printf_i+0x148>
 800a146:	6923      	ldr	r3, [r4, #16]
 800a148:	6861      	ldr	r1, [r4, #4]
 800a14a:	4299      	cmp	r1, r3
 800a14c:	bfde      	ittt	le
 800a14e:	2330      	movle	r3, #48	; 0x30
 800a150:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a154:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a158:	1b52      	subs	r2, r2, r5
 800a15a:	6122      	str	r2, [r4, #16]
 800a15c:	f8cd a000 	str.w	sl, [sp]
 800a160:	464b      	mov	r3, r9
 800a162:	aa03      	add	r2, sp, #12
 800a164:	4621      	mov	r1, r4
 800a166:	4640      	mov	r0, r8
 800a168:	f7ff fee4 	bl	8009f34 <_printf_common>
 800a16c:	3001      	adds	r0, #1
 800a16e:	d14a      	bne.n	800a206 <_printf_i+0x1f6>
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	b004      	add	sp, #16
 800a176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	f043 0320 	orr.w	r3, r3, #32
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	4833      	ldr	r0, [pc, #204]	; (800a250 <_printf_i+0x240>)
 800a184:	2778      	movs	r7, #120	; 0x78
 800a186:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	6829      	ldr	r1, [r5, #0]
 800a18e:	061f      	lsls	r7, r3, #24
 800a190:	f851 6b04 	ldr.w	r6, [r1], #4
 800a194:	d402      	bmi.n	800a19c <_printf_i+0x18c>
 800a196:	065f      	lsls	r7, r3, #25
 800a198:	bf48      	it	mi
 800a19a:	b2b6      	uxthmi	r6, r6
 800a19c:	07df      	lsls	r7, r3, #31
 800a19e:	bf48      	it	mi
 800a1a0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1a4:	6029      	str	r1, [r5, #0]
 800a1a6:	bf48      	it	mi
 800a1a8:	6023      	strmi	r3, [r4, #0]
 800a1aa:	b91e      	cbnz	r6, 800a1b4 <_printf_i+0x1a4>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	f023 0320 	bic.w	r3, r3, #32
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	2310      	movs	r3, #16
 800a1b6:	e7a7      	b.n	800a108 <_printf_i+0xf8>
 800a1b8:	4824      	ldr	r0, [pc, #144]	; (800a24c <_printf_i+0x23c>)
 800a1ba:	e7e4      	b.n	800a186 <_printf_i+0x176>
 800a1bc:	4615      	mov	r5, r2
 800a1be:	e7bd      	b.n	800a13c <_printf_i+0x12c>
 800a1c0:	682b      	ldr	r3, [r5, #0]
 800a1c2:	6826      	ldr	r6, [r4, #0]
 800a1c4:	6961      	ldr	r1, [r4, #20]
 800a1c6:	1d18      	adds	r0, r3, #4
 800a1c8:	6028      	str	r0, [r5, #0]
 800a1ca:	0635      	lsls	r5, r6, #24
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	d501      	bpl.n	800a1d4 <_printf_i+0x1c4>
 800a1d0:	6019      	str	r1, [r3, #0]
 800a1d2:	e002      	b.n	800a1da <_printf_i+0x1ca>
 800a1d4:	0670      	lsls	r0, r6, #25
 800a1d6:	d5fb      	bpl.n	800a1d0 <_printf_i+0x1c0>
 800a1d8:	8019      	strh	r1, [r3, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6123      	str	r3, [r4, #16]
 800a1de:	4615      	mov	r5, r2
 800a1e0:	e7bc      	b.n	800a15c <_printf_i+0x14c>
 800a1e2:	682b      	ldr	r3, [r5, #0]
 800a1e4:	1d1a      	adds	r2, r3, #4
 800a1e6:	602a      	str	r2, [r5, #0]
 800a1e8:	681d      	ldr	r5, [r3, #0]
 800a1ea:	6862      	ldr	r2, [r4, #4]
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f7f6 f826 	bl	8000240 <memchr>
 800a1f4:	b108      	cbz	r0, 800a1fa <_printf_i+0x1ea>
 800a1f6:	1b40      	subs	r0, r0, r5
 800a1f8:	6060      	str	r0, [r4, #4]
 800a1fa:	6863      	ldr	r3, [r4, #4]
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	2300      	movs	r3, #0
 800a200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a204:	e7aa      	b.n	800a15c <_printf_i+0x14c>
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	462a      	mov	r2, r5
 800a20a:	4649      	mov	r1, r9
 800a20c:	4640      	mov	r0, r8
 800a20e:	47d0      	blx	sl
 800a210:	3001      	adds	r0, #1
 800a212:	d0ad      	beq.n	800a170 <_printf_i+0x160>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	079b      	lsls	r3, r3, #30
 800a218:	d413      	bmi.n	800a242 <_printf_i+0x232>
 800a21a:	68e0      	ldr	r0, [r4, #12]
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	4298      	cmp	r0, r3
 800a220:	bfb8      	it	lt
 800a222:	4618      	movlt	r0, r3
 800a224:	e7a6      	b.n	800a174 <_printf_i+0x164>
 800a226:	2301      	movs	r3, #1
 800a228:	4632      	mov	r2, r6
 800a22a:	4649      	mov	r1, r9
 800a22c:	4640      	mov	r0, r8
 800a22e:	47d0      	blx	sl
 800a230:	3001      	adds	r0, #1
 800a232:	d09d      	beq.n	800a170 <_printf_i+0x160>
 800a234:	3501      	adds	r5, #1
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	9903      	ldr	r1, [sp, #12]
 800a23a:	1a5b      	subs	r3, r3, r1
 800a23c:	42ab      	cmp	r3, r5
 800a23e:	dcf2      	bgt.n	800a226 <_printf_i+0x216>
 800a240:	e7eb      	b.n	800a21a <_printf_i+0x20a>
 800a242:	2500      	movs	r5, #0
 800a244:	f104 0619 	add.w	r6, r4, #25
 800a248:	e7f5      	b.n	800a236 <_printf_i+0x226>
 800a24a:	bf00      	nop
 800a24c:	0800cce6 	.word	0x0800cce6
 800a250:	0800ccf7 	.word	0x0800ccf7

0800a254 <std>:
 800a254:	2300      	movs	r3, #0
 800a256:	b510      	push	{r4, lr}
 800a258:	4604      	mov	r4, r0
 800a25a:	e9c0 3300 	strd	r3, r3, [r0]
 800a25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a262:	6083      	str	r3, [r0, #8]
 800a264:	8181      	strh	r1, [r0, #12]
 800a266:	6643      	str	r3, [r0, #100]	; 0x64
 800a268:	81c2      	strh	r2, [r0, #14]
 800a26a:	6183      	str	r3, [r0, #24]
 800a26c:	4619      	mov	r1, r3
 800a26e:	2208      	movs	r2, #8
 800a270:	305c      	adds	r0, #92	; 0x5c
 800a272:	f000 f914 	bl	800a49e <memset>
 800a276:	4b0d      	ldr	r3, [pc, #52]	; (800a2ac <std+0x58>)
 800a278:	6263      	str	r3, [r4, #36]	; 0x24
 800a27a:	4b0d      	ldr	r3, [pc, #52]	; (800a2b0 <std+0x5c>)
 800a27c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a27e:	4b0d      	ldr	r3, [pc, #52]	; (800a2b4 <std+0x60>)
 800a280:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a282:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <std+0x64>)
 800a284:	6323      	str	r3, [r4, #48]	; 0x30
 800a286:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <std+0x68>)
 800a288:	6224      	str	r4, [r4, #32]
 800a28a:	429c      	cmp	r4, r3
 800a28c:	d006      	beq.n	800a29c <std+0x48>
 800a28e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a292:	4294      	cmp	r4, r2
 800a294:	d002      	beq.n	800a29c <std+0x48>
 800a296:	33d0      	adds	r3, #208	; 0xd0
 800a298:	429c      	cmp	r4, r3
 800a29a:	d105      	bne.n	800a2a8 <std+0x54>
 800a29c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a4:	f000 b9ce 	b.w	800a644 <__retarget_lock_init_recursive>
 800a2a8:	bd10      	pop	{r4, pc}
 800a2aa:	bf00      	nop
 800a2ac:	0800a419 	.word	0x0800a419
 800a2b0:	0800a43b 	.word	0x0800a43b
 800a2b4:	0800a473 	.word	0x0800a473
 800a2b8:	0800a497 	.word	0x0800a497
 800a2bc:	200053d4 	.word	0x200053d4

0800a2c0 <stdio_exit_handler>:
 800a2c0:	4a02      	ldr	r2, [pc, #8]	; (800a2cc <stdio_exit_handler+0xc>)
 800a2c2:	4903      	ldr	r1, [pc, #12]	; (800a2d0 <stdio_exit_handler+0x10>)
 800a2c4:	4803      	ldr	r0, [pc, #12]	; (800a2d4 <stdio_exit_handler+0x14>)
 800a2c6:	f000 b869 	b.w	800a39c <_fwalk_sglue>
 800a2ca:	bf00      	nop
 800a2cc:	2000001c 	.word	0x2000001c
 800a2d0:	0800bf05 	.word	0x0800bf05
 800a2d4:	20000028 	.word	0x20000028

0800a2d8 <cleanup_stdio>:
 800a2d8:	6841      	ldr	r1, [r0, #4]
 800a2da:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <cleanup_stdio+0x34>)
 800a2dc:	4299      	cmp	r1, r3
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	d001      	beq.n	800a2e8 <cleanup_stdio+0x10>
 800a2e4:	f001 fe0e 	bl	800bf04 <_fflush_r>
 800a2e8:	68a1      	ldr	r1, [r4, #8]
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <cleanup_stdio+0x38>)
 800a2ec:	4299      	cmp	r1, r3
 800a2ee:	d002      	beq.n	800a2f6 <cleanup_stdio+0x1e>
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f001 fe07 	bl	800bf04 <_fflush_r>
 800a2f6:	68e1      	ldr	r1, [r4, #12]
 800a2f8:	4b06      	ldr	r3, [pc, #24]	; (800a314 <cleanup_stdio+0x3c>)
 800a2fa:	4299      	cmp	r1, r3
 800a2fc:	d004      	beq.n	800a308 <cleanup_stdio+0x30>
 800a2fe:	4620      	mov	r0, r4
 800a300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a304:	f001 bdfe 	b.w	800bf04 <_fflush_r>
 800a308:	bd10      	pop	{r4, pc}
 800a30a:	bf00      	nop
 800a30c:	200053d4 	.word	0x200053d4
 800a310:	2000543c 	.word	0x2000543c
 800a314:	200054a4 	.word	0x200054a4

0800a318 <global_stdio_init.part.0>:
 800a318:	b510      	push	{r4, lr}
 800a31a:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <global_stdio_init.part.0+0x30>)
 800a31c:	4c0b      	ldr	r4, [pc, #44]	; (800a34c <global_stdio_init.part.0+0x34>)
 800a31e:	4a0c      	ldr	r2, [pc, #48]	; (800a350 <global_stdio_init.part.0+0x38>)
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	4620      	mov	r0, r4
 800a324:	2200      	movs	r2, #0
 800a326:	2104      	movs	r1, #4
 800a328:	f7ff ff94 	bl	800a254 <std>
 800a32c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a330:	2201      	movs	r2, #1
 800a332:	2109      	movs	r1, #9
 800a334:	f7ff ff8e 	bl	800a254 <std>
 800a338:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a33c:	2202      	movs	r2, #2
 800a33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a342:	2112      	movs	r1, #18
 800a344:	f7ff bf86 	b.w	800a254 <std>
 800a348:	2000550c 	.word	0x2000550c
 800a34c:	200053d4 	.word	0x200053d4
 800a350:	0800a2c1 	.word	0x0800a2c1

0800a354 <__sfp_lock_acquire>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__sfp_lock_acquire+0x8>)
 800a356:	f000 b976 	b.w	800a646 <__retarget_lock_acquire_recursive>
 800a35a:	bf00      	nop
 800a35c:	20005515 	.word	0x20005515

0800a360 <__sfp_lock_release>:
 800a360:	4801      	ldr	r0, [pc, #4]	; (800a368 <__sfp_lock_release+0x8>)
 800a362:	f000 b971 	b.w	800a648 <__retarget_lock_release_recursive>
 800a366:	bf00      	nop
 800a368:	20005515 	.word	0x20005515

0800a36c <__sinit>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4604      	mov	r4, r0
 800a370:	f7ff fff0 	bl	800a354 <__sfp_lock_acquire>
 800a374:	6a23      	ldr	r3, [r4, #32]
 800a376:	b11b      	cbz	r3, 800a380 <__sinit+0x14>
 800a378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a37c:	f7ff bff0 	b.w	800a360 <__sfp_lock_release>
 800a380:	4b04      	ldr	r3, [pc, #16]	; (800a394 <__sinit+0x28>)
 800a382:	6223      	str	r3, [r4, #32]
 800a384:	4b04      	ldr	r3, [pc, #16]	; (800a398 <__sinit+0x2c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1f5      	bne.n	800a378 <__sinit+0xc>
 800a38c:	f7ff ffc4 	bl	800a318 <global_stdio_init.part.0>
 800a390:	e7f2      	b.n	800a378 <__sinit+0xc>
 800a392:	bf00      	nop
 800a394:	0800a2d9 	.word	0x0800a2d9
 800a398:	2000550c 	.word	0x2000550c

0800a39c <_fwalk_sglue>:
 800a39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	4688      	mov	r8, r1
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	2600      	movs	r6, #0
 800a3a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3ac:	f1b9 0901 	subs.w	r9, r9, #1
 800a3b0:	d505      	bpl.n	800a3be <_fwalk_sglue+0x22>
 800a3b2:	6824      	ldr	r4, [r4, #0]
 800a3b4:	2c00      	cmp	r4, #0
 800a3b6:	d1f7      	bne.n	800a3a8 <_fwalk_sglue+0xc>
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d907      	bls.n	800a3d4 <_fwalk_sglue+0x38>
 800a3c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	d003      	beq.n	800a3d4 <_fwalk_sglue+0x38>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	47c0      	blx	r8
 800a3d2:	4306      	orrs	r6, r0
 800a3d4:	3568      	adds	r5, #104	; 0x68
 800a3d6:	e7e9      	b.n	800a3ac <_fwalk_sglue+0x10>

0800a3d8 <siprintf>:
 800a3d8:	b40e      	push	{r1, r2, r3}
 800a3da:	b500      	push	{lr}
 800a3dc:	b09c      	sub	sp, #112	; 0x70
 800a3de:	ab1d      	add	r3, sp, #116	; 0x74
 800a3e0:	9002      	str	r0, [sp, #8]
 800a3e2:	9006      	str	r0, [sp, #24]
 800a3e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3e8:	4809      	ldr	r0, [pc, #36]	; (800a410 <siprintf+0x38>)
 800a3ea:	9107      	str	r1, [sp, #28]
 800a3ec:	9104      	str	r1, [sp, #16]
 800a3ee:	4909      	ldr	r1, [pc, #36]	; (800a414 <siprintf+0x3c>)
 800a3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f4:	9105      	str	r1, [sp, #20]
 800a3f6:	6800      	ldr	r0, [r0, #0]
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	a902      	add	r1, sp, #8
 800a3fc:	f001 fbfe 	bl	800bbfc <_svfiprintf_r>
 800a400:	9b02      	ldr	r3, [sp, #8]
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	b01c      	add	sp, #112	; 0x70
 800a408:	f85d eb04 	ldr.w	lr, [sp], #4
 800a40c:	b003      	add	sp, #12
 800a40e:	4770      	bx	lr
 800a410:	20000074 	.word	0x20000074
 800a414:	ffff0208 	.word	0xffff0208

0800a418 <__sread>:
 800a418:	b510      	push	{r4, lr}
 800a41a:	460c      	mov	r4, r1
 800a41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a420:	f000 f8c2 	bl	800a5a8 <_read_r>
 800a424:	2800      	cmp	r0, #0
 800a426:	bfab      	itete	ge
 800a428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a42a:	89a3      	ldrhlt	r3, [r4, #12]
 800a42c:	181b      	addge	r3, r3, r0
 800a42e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a432:	bfac      	ite	ge
 800a434:	6563      	strge	r3, [r4, #84]	; 0x54
 800a436:	81a3      	strhlt	r3, [r4, #12]
 800a438:	bd10      	pop	{r4, pc}

0800a43a <__swrite>:
 800a43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a43e:	461f      	mov	r7, r3
 800a440:	898b      	ldrh	r3, [r1, #12]
 800a442:	05db      	lsls	r3, r3, #23
 800a444:	4605      	mov	r5, r0
 800a446:	460c      	mov	r4, r1
 800a448:	4616      	mov	r6, r2
 800a44a:	d505      	bpl.n	800a458 <__swrite+0x1e>
 800a44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a450:	2302      	movs	r3, #2
 800a452:	2200      	movs	r2, #0
 800a454:	f000 f896 	bl	800a584 <_lseek_r>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a45e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	4632      	mov	r2, r6
 800a466:	463b      	mov	r3, r7
 800a468:	4628      	mov	r0, r5
 800a46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	f000 b8ad 	b.w	800a5cc <_write_r>

0800a472 <__sseek>:
 800a472:	b510      	push	{r4, lr}
 800a474:	460c      	mov	r4, r1
 800a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47a:	f000 f883 	bl	800a584 <_lseek_r>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	bf15      	itete	ne
 800a484:	6560      	strne	r0, [r4, #84]	; 0x54
 800a486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a48a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a48e:	81a3      	strheq	r3, [r4, #12]
 800a490:	bf18      	it	ne
 800a492:	81a3      	strhne	r3, [r4, #12]
 800a494:	bd10      	pop	{r4, pc}

0800a496 <__sclose>:
 800a496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49a:	f000 b80d 	b.w	800a4b8 <_close_r>

0800a49e <memset>:
 800a49e:	4402      	add	r2, r0
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d100      	bne.n	800a4a8 <memset+0xa>
 800a4a6:	4770      	bx	lr
 800a4a8:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ac:	e7f9      	b.n	800a4a2 <memset+0x4>
	...

0800a4b0 <_localeconv_r>:
 800a4b0:	4800      	ldr	r0, [pc, #0]	; (800a4b4 <_localeconv_r+0x4>)
 800a4b2:	4770      	bx	lr
 800a4b4:	20000168 	.word	0x20000168

0800a4b8 <_close_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d06      	ldr	r5, [pc, #24]	; (800a4d4 <_close_r+0x1c>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f7 fea3 	bl	800220e <_close>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_close_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_close_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20005510 	.word	0x20005510

0800a4d8 <_reclaim_reent>:
 800a4d8:	4b29      	ldr	r3, [pc, #164]	; (800a580 <_reclaim_reent+0xa8>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4283      	cmp	r3, r0
 800a4de:	b570      	push	{r4, r5, r6, lr}
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	d04b      	beq.n	800a57c <_reclaim_reent+0xa4>
 800a4e4:	69c3      	ldr	r3, [r0, #28]
 800a4e6:	b143      	cbz	r3, 800a4fa <_reclaim_reent+0x22>
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d144      	bne.n	800a578 <_reclaim_reent+0xa0>
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	6819      	ldr	r1, [r3, #0]
 800a4f2:	b111      	cbz	r1, 800a4fa <_reclaim_reent+0x22>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 feab 	bl	800b250 <_free_r>
 800a4fa:	6961      	ldr	r1, [r4, #20]
 800a4fc:	b111      	cbz	r1, 800a504 <_reclaim_reent+0x2c>
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 fea6 	bl	800b250 <_free_r>
 800a504:	69e1      	ldr	r1, [r4, #28]
 800a506:	b111      	cbz	r1, 800a50e <_reclaim_reent+0x36>
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 fea1 	bl	800b250 <_free_r>
 800a50e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a510:	b111      	cbz	r1, 800a518 <_reclaim_reent+0x40>
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fe9c 	bl	800b250 <_free_r>
 800a518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a51a:	b111      	cbz	r1, 800a522 <_reclaim_reent+0x4a>
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 fe97 	bl	800b250 <_free_r>
 800a522:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a524:	b111      	cbz	r1, 800a52c <_reclaim_reent+0x54>
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fe92 	bl	800b250 <_free_r>
 800a52c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a52e:	b111      	cbz	r1, 800a536 <_reclaim_reent+0x5e>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 fe8d 	bl	800b250 <_free_r>
 800a536:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a538:	b111      	cbz	r1, 800a540 <_reclaim_reent+0x68>
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fe88 	bl	800b250 <_free_r>
 800a540:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a542:	b111      	cbz	r1, 800a54a <_reclaim_reent+0x72>
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fe83 	bl	800b250 <_free_r>
 800a54a:	6a23      	ldr	r3, [r4, #32]
 800a54c:	b1b3      	cbz	r3, 800a57c <_reclaim_reent+0xa4>
 800a54e:	4620      	mov	r0, r4
 800a550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a554:	4718      	bx	r3
 800a556:	5949      	ldr	r1, [r1, r5]
 800a558:	b941      	cbnz	r1, 800a56c <_reclaim_reent+0x94>
 800a55a:	3504      	adds	r5, #4
 800a55c:	69e3      	ldr	r3, [r4, #28]
 800a55e:	2d80      	cmp	r5, #128	; 0x80
 800a560:	68d9      	ldr	r1, [r3, #12]
 800a562:	d1f8      	bne.n	800a556 <_reclaim_reent+0x7e>
 800a564:	4620      	mov	r0, r4
 800a566:	f000 fe73 	bl	800b250 <_free_r>
 800a56a:	e7c0      	b.n	800a4ee <_reclaim_reent+0x16>
 800a56c:	680e      	ldr	r6, [r1, #0]
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 fe6e 	bl	800b250 <_free_r>
 800a574:	4631      	mov	r1, r6
 800a576:	e7ef      	b.n	800a558 <_reclaim_reent+0x80>
 800a578:	2500      	movs	r5, #0
 800a57a:	e7ef      	b.n	800a55c <_reclaim_reent+0x84>
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
 800a57e:	bf00      	nop
 800a580:	20000074 	.word	0x20000074

0800a584 <_lseek_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_lseek_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f7 fe62 	bl	800225c <_lseek>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_lseek_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_lseek_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20005510 	.word	0x20005510

0800a5a8 <_read_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_read_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f7 fdf0 	bl	800219c <_read>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_read_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_read_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	20005510 	.word	0x20005510

0800a5cc <_write_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d07      	ldr	r5, [pc, #28]	; (800a5ec <_write_r+0x20>)
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f7f7 fdfb 	bl	80021d6 <_write>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_write_r+0x1e>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_write_r+0x1e>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	20005510 	.word	0x20005510

0800a5f0 <__errno>:
 800a5f0:	4b01      	ldr	r3, [pc, #4]	; (800a5f8 <__errno+0x8>)
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000074 	.word	0x20000074

0800a5fc <__libc_init_array>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4d0d      	ldr	r5, [pc, #52]	; (800a634 <__libc_init_array+0x38>)
 800a600:	4c0d      	ldr	r4, [pc, #52]	; (800a638 <__libc_init_array+0x3c>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	2600      	movs	r6, #0
 800a608:	42a6      	cmp	r6, r4
 800a60a:	d109      	bne.n	800a620 <__libc_init_array+0x24>
 800a60c:	4d0b      	ldr	r5, [pc, #44]	; (800a63c <__libc_init_array+0x40>)
 800a60e:	4c0c      	ldr	r4, [pc, #48]	; (800a640 <__libc_init_array+0x44>)
 800a610:	f002 fb02 	bl	800cc18 <_init>
 800a614:	1b64      	subs	r4, r4, r5
 800a616:	10a4      	asrs	r4, r4, #2
 800a618:	2600      	movs	r6, #0
 800a61a:	42a6      	cmp	r6, r4
 800a61c:	d105      	bne.n	800a62a <__libc_init_array+0x2e>
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	f855 3b04 	ldr.w	r3, [r5], #4
 800a624:	4798      	blx	r3
 800a626:	3601      	adds	r6, #1
 800a628:	e7ee      	b.n	800a608 <__libc_init_array+0xc>
 800a62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62e:	4798      	blx	r3
 800a630:	3601      	adds	r6, #1
 800a632:	e7f2      	b.n	800a61a <__libc_init_array+0x1e>
 800a634:	0800e908 	.word	0x0800e908
 800a638:	0800e908 	.word	0x0800e908
 800a63c:	0800e908 	.word	0x0800e908
 800a640:	0800e90c 	.word	0x0800e90c

0800a644 <__retarget_lock_init_recursive>:
 800a644:	4770      	bx	lr

0800a646 <__retarget_lock_acquire_recursive>:
 800a646:	4770      	bx	lr

0800a648 <__retarget_lock_release_recursive>:
 800a648:	4770      	bx	lr

0800a64a <memcpy>:
 800a64a:	440a      	add	r2, r1
 800a64c:	4291      	cmp	r1, r2
 800a64e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a652:	d100      	bne.n	800a656 <memcpy+0xc>
 800a654:	4770      	bx	lr
 800a656:	b510      	push	{r4, lr}
 800a658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a65c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a660:	4291      	cmp	r1, r2
 800a662:	d1f9      	bne.n	800a658 <memcpy+0xe>
 800a664:	bd10      	pop	{r4, pc}

0800a666 <quorem>:
 800a666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	6903      	ldr	r3, [r0, #16]
 800a66c:	690c      	ldr	r4, [r1, #16]
 800a66e:	42a3      	cmp	r3, r4
 800a670:	4607      	mov	r7, r0
 800a672:	db7e      	blt.n	800a772 <quorem+0x10c>
 800a674:	3c01      	subs	r4, #1
 800a676:	f101 0814 	add.w	r8, r1, #20
 800a67a:	f100 0514 	add.w	r5, r0, #20
 800a67e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a68c:	3301      	adds	r3, #1
 800a68e:	429a      	cmp	r2, r3
 800a690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a698:	fbb2 f6f3 	udiv	r6, r2, r3
 800a69c:	d331      	bcc.n	800a702 <quorem+0x9c>
 800a69e:	f04f 0e00 	mov.w	lr, #0
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	46ac      	mov	ip, r5
 800a6a6:	46f2      	mov	sl, lr
 800a6a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6ac:	b293      	uxth	r3, r2
 800a6ae:	fb06 e303 	mla	r3, r6, r3, lr
 800a6b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6b6:	0c1a      	lsrs	r2, r3, #16
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	ebaa 0303 	sub.w	r3, sl, r3
 800a6be:	f8dc a000 	ldr.w	sl, [ip]
 800a6c2:	fa13 f38a 	uxtah	r3, r3, sl
 800a6c6:	fb06 220e 	mla	r2, r6, lr, r2
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	9b00      	ldr	r3, [sp, #0]
 800a6ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6d2:	b292      	uxth	r2, r2
 800a6d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6dc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6e0:	4581      	cmp	r9, r0
 800a6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6e6:	f84c 3b04 	str.w	r3, [ip], #4
 800a6ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6ee:	d2db      	bcs.n	800a6a8 <quorem+0x42>
 800a6f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6f4:	b92b      	cbnz	r3, 800a702 <quorem+0x9c>
 800a6f6:	9b01      	ldr	r3, [sp, #4]
 800a6f8:	3b04      	subs	r3, #4
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	d32c      	bcc.n	800a75a <quorem+0xf4>
 800a700:	613c      	str	r4, [r7, #16]
 800a702:	4638      	mov	r0, r7
 800a704:	f001 f920 	bl	800b948 <__mcmp>
 800a708:	2800      	cmp	r0, #0
 800a70a:	db22      	blt.n	800a752 <quorem+0xec>
 800a70c:	3601      	adds	r6, #1
 800a70e:	4629      	mov	r1, r5
 800a710:	2000      	movs	r0, #0
 800a712:	f858 2b04 	ldr.w	r2, [r8], #4
 800a716:	f8d1 c000 	ldr.w	ip, [r1]
 800a71a:	b293      	uxth	r3, r2
 800a71c:	1ac3      	subs	r3, r0, r3
 800a71e:	0c12      	lsrs	r2, r2, #16
 800a720:	fa13 f38c 	uxtah	r3, r3, ip
 800a724:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a732:	45c1      	cmp	r9, r8
 800a734:	f841 3b04 	str.w	r3, [r1], #4
 800a738:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a73c:	d2e9      	bcs.n	800a712 <quorem+0xac>
 800a73e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a746:	b922      	cbnz	r2, 800a752 <quorem+0xec>
 800a748:	3b04      	subs	r3, #4
 800a74a:	429d      	cmp	r5, r3
 800a74c:	461a      	mov	r2, r3
 800a74e:	d30a      	bcc.n	800a766 <quorem+0x100>
 800a750:	613c      	str	r4, [r7, #16]
 800a752:	4630      	mov	r0, r6
 800a754:	b003      	add	sp, #12
 800a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75a:	6812      	ldr	r2, [r2, #0]
 800a75c:	3b04      	subs	r3, #4
 800a75e:	2a00      	cmp	r2, #0
 800a760:	d1ce      	bne.n	800a700 <quorem+0x9a>
 800a762:	3c01      	subs	r4, #1
 800a764:	e7c9      	b.n	800a6fa <quorem+0x94>
 800a766:	6812      	ldr	r2, [r2, #0]
 800a768:	3b04      	subs	r3, #4
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	d1f0      	bne.n	800a750 <quorem+0xea>
 800a76e:	3c01      	subs	r4, #1
 800a770:	e7eb      	b.n	800a74a <quorem+0xe4>
 800a772:	2000      	movs	r0, #0
 800a774:	e7ee      	b.n	800a754 <quorem+0xee>
	...

0800a778 <_dtoa_r>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	ed2d 8b02 	vpush	{d8}
 800a780:	69c5      	ldr	r5, [r0, #28]
 800a782:	b091      	sub	sp, #68	; 0x44
 800a784:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a788:	ec59 8b10 	vmov	r8, r9, d0
 800a78c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a78e:	9106      	str	r1, [sp, #24]
 800a790:	4606      	mov	r6, r0
 800a792:	9208      	str	r2, [sp, #32]
 800a794:	930c      	str	r3, [sp, #48]	; 0x30
 800a796:	b975      	cbnz	r5, 800a7b6 <_dtoa_r+0x3e>
 800a798:	2010      	movs	r0, #16
 800a79a:	f000 fda5 	bl	800b2e8 <malloc>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	61f0      	str	r0, [r6, #28]
 800a7a2:	b920      	cbnz	r0, 800a7ae <_dtoa_r+0x36>
 800a7a4:	4ba6      	ldr	r3, [pc, #664]	; (800aa40 <_dtoa_r+0x2c8>)
 800a7a6:	21ef      	movs	r1, #239	; 0xef
 800a7a8:	48a6      	ldr	r0, [pc, #664]	; (800aa44 <_dtoa_r+0x2cc>)
 800a7aa:	f001 fbfd 	bl	800bfa8 <__assert_func>
 800a7ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7b2:	6005      	str	r5, [r0, #0]
 800a7b4:	60c5      	str	r5, [r0, #12]
 800a7b6:	69f3      	ldr	r3, [r6, #28]
 800a7b8:	6819      	ldr	r1, [r3, #0]
 800a7ba:	b151      	cbz	r1, 800a7d2 <_dtoa_r+0x5a>
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	604a      	str	r2, [r1, #4]
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4093      	lsls	r3, r2
 800a7c4:	608b      	str	r3, [r1, #8]
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f000 fe82 	bl	800b4d0 <_Bfree>
 800a7cc:	69f3      	ldr	r3, [r6, #28]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	f1b9 0300 	subs.w	r3, r9, #0
 800a7d6:	bfbb      	ittet	lt
 800a7d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7dc:	9303      	strlt	r3, [sp, #12]
 800a7de:	2300      	movge	r3, #0
 800a7e0:	2201      	movlt	r2, #1
 800a7e2:	bfac      	ite	ge
 800a7e4:	6023      	strge	r3, [r4, #0]
 800a7e6:	6022      	strlt	r2, [r4, #0]
 800a7e8:	4b97      	ldr	r3, [pc, #604]	; (800aa48 <_dtoa_r+0x2d0>)
 800a7ea:	9c03      	ldr	r4, [sp, #12]
 800a7ec:	43a3      	bics	r3, r4
 800a7ee:	d11c      	bne.n	800a82a <_dtoa_r+0xb2>
 800a7f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a7fc:	ea53 0308 	orrs.w	r3, r3, r8
 800a800:	f000 84fb 	beq.w	800b1fa <_dtoa_r+0xa82>
 800a804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a806:	b963      	cbnz	r3, 800a822 <_dtoa_r+0xaa>
 800a808:	4b90      	ldr	r3, [pc, #576]	; (800aa4c <_dtoa_r+0x2d4>)
 800a80a:	e020      	b.n	800a84e <_dtoa_r+0xd6>
 800a80c:	4b90      	ldr	r3, [pc, #576]	; (800aa50 <_dtoa_r+0x2d8>)
 800a80e:	9301      	str	r3, [sp, #4]
 800a810:	3308      	adds	r3, #8
 800a812:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	9801      	ldr	r0, [sp, #4]
 800a818:	b011      	add	sp, #68	; 0x44
 800a81a:	ecbd 8b02 	vpop	{d8}
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	4b8a      	ldr	r3, [pc, #552]	; (800aa4c <_dtoa_r+0x2d4>)
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	3303      	adds	r3, #3
 800a828:	e7f3      	b.n	800a812 <_dtoa_r+0x9a>
 800a82a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a82e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a836:	d10c      	bne.n	800a852 <_dtoa_r+0xda>
 800a838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a83a:	2301      	movs	r3, #1
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 84d7 	beq.w	800b1f4 <_dtoa_r+0xa7c>
 800a846:	4b83      	ldr	r3, [pc, #524]	; (800aa54 <_dtoa_r+0x2dc>)
 800a848:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	e7e1      	b.n	800a816 <_dtoa_r+0x9e>
 800a852:	aa0e      	add	r2, sp, #56	; 0x38
 800a854:	a90f      	add	r1, sp, #60	; 0x3c
 800a856:	4630      	mov	r0, r6
 800a858:	eeb0 0b48 	vmov.f64	d0, d8
 800a85c:	f001 f91a 	bl	800ba94 <__d2b>
 800a860:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a866:	4605      	mov	r5, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d046      	beq.n	800a8fa <_dtoa_r+0x182>
 800a86c:	eeb0 7b48 	vmov.f64	d7, d8
 800a870:	ee18 1a90 	vmov	r1, s17
 800a874:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a878:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a87c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a880:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a884:	2000      	movs	r0, #0
 800a886:	ee07 1a90 	vmov	s15, r1
 800a88a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a88e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aa28 <_dtoa_r+0x2b0>
 800a892:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a896:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800aa30 <_dtoa_r+0x2b8>
 800a89a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a89e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aa38 <_dtoa_r+0x2c0>
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a8aa:	eeb0 7b46 	vmov.f64	d7, d6
 800a8ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a8b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a8b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8be:	ee16 ba90 	vmov	fp, s13
 800a8c2:	9009      	str	r0, [sp, #36]	; 0x24
 800a8c4:	d508      	bpl.n	800a8d8 <_dtoa_r+0x160>
 800a8c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a8ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800a8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d2:	bf18      	it	ne
 800a8d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a8d8:	f1bb 0f16 	cmp.w	fp, #22
 800a8dc:	d82b      	bhi.n	800a936 <_dtoa_r+0x1be>
 800a8de:	495e      	ldr	r1, [pc, #376]	; (800aa58 <_dtoa_r+0x2e0>)
 800a8e0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a8e4:	ed91 7b00 	vldr	d7, [r1]
 800a8e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f0:	d501      	bpl.n	800a8f6 <_dtoa_r+0x17e>
 800a8f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	e01e      	b.n	800a938 <_dtoa_r+0x1c0>
 800a8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a902:	2920      	cmp	r1, #32
 800a904:	bfc1      	itttt	gt
 800a906:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a90a:	408c      	lslgt	r4, r1
 800a90c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a910:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a914:	bfd6      	itet	le
 800a916:	f1c1 0120 	rsble	r1, r1, #32
 800a91a:	4321      	orrgt	r1, r4
 800a91c:	fa08 f101 	lslle.w	r1, r8, r1
 800a920:	ee07 1a90 	vmov	s15, r1
 800a924:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a928:	3b01      	subs	r3, #1
 800a92a:	ee17 1a90 	vmov	r1, s15
 800a92e:	2001      	movs	r0, #1
 800a930:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a934:	e7a7      	b.n	800a886 <_dtoa_r+0x10e>
 800a936:	2101      	movs	r1, #1
 800a938:	1ad2      	subs	r2, r2, r3
 800a93a:	1e53      	subs	r3, r2, #1
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	bf45      	ittet	mi
 800a940:	f1c2 0301 	rsbmi	r3, r2, #1
 800a944:	9304      	strmi	r3, [sp, #16]
 800a946:	2300      	movpl	r3, #0
 800a948:	2300      	movmi	r3, #0
 800a94a:	bf4c      	ite	mi
 800a94c:	9305      	strmi	r3, [sp, #20]
 800a94e:	9304      	strpl	r3, [sp, #16]
 800a950:	f1bb 0f00 	cmp.w	fp, #0
 800a954:	910b      	str	r1, [sp, #44]	; 0x2c
 800a956:	db18      	blt.n	800a98a <_dtoa_r+0x212>
 800a958:	9b05      	ldr	r3, [sp, #20]
 800a95a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a95e:	445b      	add	r3, fp
 800a960:	9305      	str	r3, [sp, #20]
 800a962:	2300      	movs	r3, #0
 800a964:	9a06      	ldr	r2, [sp, #24]
 800a966:	2a09      	cmp	r2, #9
 800a968:	d848      	bhi.n	800a9fc <_dtoa_r+0x284>
 800a96a:	2a05      	cmp	r2, #5
 800a96c:	bfc4      	itt	gt
 800a96e:	3a04      	subgt	r2, #4
 800a970:	9206      	strgt	r2, [sp, #24]
 800a972:	9a06      	ldr	r2, [sp, #24]
 800a974:	f1a2 0202 	sub.w	r2, r2, #2
 800a978:	bfcc      	ite	gt
 800a97a:	2400      	movgt	r4, #0
 800a97c:	2401      	movle	r4, #1
 800a97e:	2a03      	cmp	r2, #3
 800a980:	d847      	bhi.n	800aa12 <_dtoa_r+0x29a>
 800a982:	e8df f002 	tbb	[pc, r2]
 800a986:	2d0b      	.short	0x2d0b
 800a988:	392b      	.short	0x392b
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	2200      	movs	r2, #0
 800a98e:	eba3 030b 	sub.w	r3, r3, fp
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	920a      	str	r2, [sp, #40]	; 0x28
 800a996:	f1cb 0300 	rsb	r3, fp, #0
 800a99a:	e7e3      	b.n	800a964 <_dtoa_r+0x1ec>
 800a99c:	2200      	movs	r2, #0
 800a99e:	9207      	str	r2, [sp, #28]
 800a9a0:	9a08      	ldr	r2, [sp, #32]
 800a9a2:	2a00      	cmp	r2, #0
 800a9a4:	dc38      	bgt.n	800aa18 <_dtoa_r+0x2a0>
 800a9a6:	f04f 0a01 	mov.w	sl, #1
 800a9aa:	46d1      	mov	r9, sl
 800a9ac:	4652      	mov	r2, sl
 800a9ae:	f8cd a020 	str.w	sl, [sp, #32]
 800a9b2:	69f7      	ldr	r7, [r6, #28]
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	2004      	movs	r0, #4
 800a9b8:	f100 0c14 	add.w	ip, r0, #20
 800a9bc:	4594      	cmp	ip, r2
 800a9be:	d930      	bls.n	800aa22 <_dtoa_r+0x2aa>
 800a9c0:	6079      	str	r1, [r7, #4]
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	930d      	str	r3, [sp, #52]	; 0x34
 800a9c6:	f000 fd43 	bl	800b450 <_Balloc>
 800a9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9cc:	9001      	str	r0, [sp, #4]
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d145      	bne.n	800aa60 <_dtoa_r+0x2e8>
 800a9d4:	4b21      	ldr	r3, [pc, #132]	; (800aa5c <_dtoa_r+0x2e4>)
 800a9d6:	f240 11af 	movw	r1, #431	; 0x1af
 800a9da:	e6e5      	b.n	800a7a8 <_dtoa_r+0x30>
 800a9dc:	2201      	movs	r2, #1
 800a9de:	e7de      	b.n	800a99e <_dtoa_r+0x226>
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	9207      	str	r2, [sp, #28]
 800a9e4:	9a08      	ldr	r2, [sp, #32]
 800a9e6:	eb0b 0a02 	add.w	sl, fp, r2
 800a9ea:	f10a 0901 	add.w	r9, sl, #1
 800a9ee:	464a      	mov	r2, r9
 800a9f0:	2a01      	cmp	r2, #1
 800a9f2:	bfb8      	it	lt
 800a9f4:	2201      	movlt	r2, #1
 800a9f6:	e7dc      	b.n	800a9b2 <_dtoa_r+0x23a>
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	e7f2      	b.n	800a9e2 <_dtoa_r+0x26a>
 800a9fc:	2401      	movs	r4, #1
 800a9fe:	2200      	movs	r2, #0
 800aa00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800aa04:	f04f 3aff 	mov.w	sl, #4294967295
 800aa08:	2100      	movs	r1, #0
 800aa0a:	46d1      	mov	r9, sl
 800aa0c:	2212      	movs	r2, #18
 800aa0e:	9108      	str	r1, [sp, #32]
 800aa10:	e7cf      	b.n	800a9b2 <_dtoa_r+0x23a>
 800aa12:	2201      	movs	r2, #1
 800aa14:	9207      	str	r2, [sp, #28]
 800aa16:	e7f5      	b.n	800aa04 <_dtoa_r+0x28c>
 800aa18:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa1c:	46d1      	mov	r9, sl
 800aa1e:	4652      	mov	r2, sl
 800aa20:	e7c7      	b.n	800a9b2 <_dtoa_r+0x23a>
 800aa22:	3101      	adds	r1, #1
 800aa24:	0040      	lsls	r0, r0, #1
 800aa26:	e7c7      	b.n	800a9b8 <_dtoa_r+0x240>
 800aa28:	636f4361 	.word	0x636f4361
 800aa2c:	3fd287a7 	.word	0x3fd287a7
 800aa30:	8b60c8b3 	.word	0x8b60c8b3
 800aa34:	3fc68a28 	.word	0x3fc68a28
 800aa38:	509f79fb 	.word	0x509f79fb
 800aa3c:	3fd34413 	.word	0x3fd34413
 800aa40:	0800cd15 	.word	0x0800cd15
 800aa44:	0800cd2c 	.word	0x0800cd2c
 800aa48:	7ff00000 	.word	0x7ff00000
 800aa4c:	0800cd11 	.word	0x0800cd11
 800aa50:	0800cd08 	.word	0x0800cd08
 800aa54:	0800cce5 	.word	0x0800cce5
 800aa58:	0800ce18 	.word	0x0800ce18
 800aa5c:	0800cd84 	.word	0x0800cd84
 800aa60:	69f2      	ldr	r2, [r6, #28]
 800aa62:	9901      	ldr	r1, [sp, #4]
 800aa64:	6011      	str	r1, [r2, #0]
 800aa66:	f1b9 0f0e 	cmp.w	r9, #14
 800aa6a:	d86c      	bhi.n	800ab46 <_dtoa_r+0x3ce>
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	d06a      	beq.n	800ab46 <_dtoa_r+0x3ce>
 800aa70:	f1bb 0f00 	cmp.w	fp, #0
 800aa74:	f340 80a0 	ble.w	800abb8 <_dtoa_r+0x440>
 800aa78:	4ac1      	ldr	r2, [pc, #772]	; (800ad80 <_dtoa_r+0x608>)
 800aa7a:	f00b 010f 	and.w	r1, fp, #15
 800aa7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aa82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aa86:	ed92 7b00 	vldr	d7, [r2]
 800aa8a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800aa8e:	f000 8087 	beq.w	800aba0 <_dtoa_r+0x428>
 800aa92:	49bc      	ldr	r1, [pc, #752]	; (800ad84 <_dtoa_r+0x60c>)
 800aa94:	ed91 6b08 	vldr	d6, [r1, #32]
 800aa98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800aa9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aaa0:	f002 020f 	and.w	r2, r2, #15
 800aaa4:	2103      	movs	r1, #3
 800aaa6:	48b7      	ldr	r0, [pc, #732]	; (800ad84 <_dtoa_r+0x60c>)
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	d17b      	bne.n	800aba4 <_dtoa_r+0x42c>
 800aaac:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aab0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	f000 80a0 	beq.w	800ac04 <_dtoa_r+0x48c>
 800aac4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aac8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad0:	f140 8098 	bpl.w	800ac04 <_dtoa_r+0x48c>
 800aad4:	f1b9 0f00 	cmp.w	r9, #0
 800aad8:	f000 8094 	beq.w	800ac04 <_dtoa_r+0x48c>
 800aadc:	f1ba 0f00 	cmp.w	sl, #0
 800aae0:	dd2f      	ble.n	800ab42 <_dtoa_r+0x3ca>
 800aae2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800aae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aaea:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aaee:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aaf2:	3101      	adds	r1, #1
 800aaf4:	4654      	mov	r4, sl
 800aaf6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aafa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800aafe:	ee07 1a90 	vmov	s15, r1
 800ab02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab06:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ab0a:	ee15 7a90 	vmov	r7, s11
 800ab0e:	ec51 0b15 	vmov	r0, r1, d5
 800ab12:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d177      	bne.n	800ac0a <_dtoa_r+0x492>
 800ab1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ab1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ab22:	ec41 0b17 	vmov	d7, r0, r1
 800ab26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2e:	f300 826a 	bgt.w	800b006 <_dtoa_r+0x88e>
 800ab32:	eeb1 7b47 	vneg.f64	d7, d7
 800ab36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3e:	f100 8260 	bmi.w	800b002 <_dtoa_r+0x88a>
 800ab42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab48:	2a00      	cmp	r2, #0
 800ab4a:	f2c0 811d 	blt.w	800ad88 <_dtoa_r+0x610>
 800ab4e:	f1bb 0f0e 	cmp.w	fp, #14
 800ab52:	f300 8119 	bgt.w	800ad88 <_dtoa_r+0x610>
 800ab56:	4b8a      	ldr	r3, [pc, #552]	; (800ad80 <_dtoa_r+0x608>)
 800ab58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab5c:	ed93 6b00 	vldr	d6, [r3]
 800ab60:	9b08      	ldr	r3, [sp, #32]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f280 80b7 	bge.w	800acd6 <_dtoa_r+0x55e>
 800ab68:	f1b9 0f00 	cmp.w	r9, #0
 800ab6c:	f300 80b3 	bgt.w	800acd6 <_dtoa_r+0x55e>
 800ab70:	f040 8246 	bne.w	800b000 <_dtoa_r+0x888>
 800ab74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ab78:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ab7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab88:	464c      	mov	r4, r9
 800ab8a:	464f      	mov	r7, r9
 800ab8c:	f280 821c 	bge.w	800afc8 <_dtoa_r+0x850>
 800ab90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab94:	2331      	movs	r3, #49	; 0x31
 800ab96:	f808 3b01 	strb.w	r3, [r8], #1
 800ab9a:	f10b 0b01 	add.w	fp, fp, #1
 800ab9e:	e218      	b.n	800afd2 <_dtoa_r+0x85a>
 800aba0:	2102      	movs	r1, #2
 800aba2:	e780      	b.n	800aaa6 <_dtoa_r+0x32e>
 800aba4:	07d4      	lsls	r4, r2, #31
 800aba6:	d504      	bpl.n	800abb2 <_dtoa_r+0x43a>
 800aba8:	ed90 6b00 	vldr	d6, [r0]
 800abac:	3101      	adds	r1, #1
 800abae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abb2:	1052      	asrs	r2, r2, #1
 800abb4:	3008      	adds	r0, #8
 800abb6:	e777      	b.n	800aaa8 <_dtoa_r+0x330>
 800abb8:	d022      	beq.n	800ac00 <_dtoa_r+0x488>
 800abba:	f1cb 0200 	rsb	r2, fp, #0
 800abbe:	4970      	ldr	r1, [pc, #448]	; (800ad80 <_dtoa_r+0x608>)
 800abc0:	f002 000f 	and.w	r0, r2, #15
 800abc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800abc8:	ed91 7b00 	vldr	d7, [r1]
 800abcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800abd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abd4:	486b      	ldr	r0, [pc, #428]	; (800ad84 <_dtoa_r+0x60c>)
 800abd6:	1112      	asrs	r2, r2, #4
 800abd8:	2400      	movs	r4, #0
 800abda:	2102      	movs	r1, #2
 800abdc:	b92a      	cbnz	r2, 800abea <_dtoa_r+0x472>
 800abde:	2c00      	cmp	r4, #0
 800abe0:	f43f af6a 	beq.w	800aab8 <_dtoa_r+0x340>
 800abe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abe8:	e766      	b.n	800aab8 <_dtoa_r+0x340>
 800abea:	07d7      	lsls	r7, r2, #31
 800abec:	d505      	bpl.n	800abfa <_dtoa_r+0x482>
 800abee:	ed90 6b00 	vldr	d6, [r0]
 800abf2:	3101      	adds	r1, #1
 800abf4:	2401      	movs	r4, #1
 800abf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abfa:	1052      	asrs	r2, r2, #1
 800abfc:	3008      	adds	r0, #8
 800abfe:	e7ed      	b.n	800abdc <_dtoa_r+0x464>
 800ac00:	2102      	movs	r1, #2
 800ac02:	e759      	b.n	800aab8 <_dtoa_r+0x340>
 800ac04:	465a      	mov	r2, fp
 800ac06:	464c      	mov	r4, r9
 800ac08:	e775      	b.n	800aaf6 <_dtoa_r+0x37e>
 800ac0a:	ec41 0b17 	vmov	d7, r0, r1
 800ac0e:	495c      	ldr	r1, [pc, #368]	; (800ad80 <_dtoa_r+0x608>)
 800ac10:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ac14:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ac18:	9901      	ldr	r1, [sp, #4]
 800ac1a:	440c      	add	r4, r1
 800ac1c:	9907      	ldr	r1, [sp, #28]
 800ac1e:	b351      	cbz	r1, 800ac76 <_dtoa_r+0x4fe>
 800ac20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ac24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ac28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac2c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ac30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ac34:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ac38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac3c:	ee14 1a90 	vmov	r1, s9
 800ac40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac44:	3130      	adds	r1, #48	; 0x30
 800ac46:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac52:	f808 1b01 	strb.w	r1, [r8], #1
 800ac56:	d439      	bmi.n	800accc <_dtoa_r+0x554>
 800ac58:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ac5c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ac60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac64:	d472      	bmi.n	800ad4c <_dtoa_r+0x5d4>
 800ac66:	45a0      	cmp	r8, r4
 800ac68:	f43f af6b 	beq.w	800ab42 <_dtoa_r+0x3ca>
 800ac6c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ac70:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ac74:	e7e0      	b.n	800ac38 <_dtoa_r+0x4c0>
 800ac76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac7e:	4620      	mov	r0, r4
 800ac80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ac84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac88:	ee14 1a90 	vmov	r1, s9
 800ac8c:	3130      	adds	r1, #48	; 0x30
 800ac8e:	f808 1b01 	strb.w	r1, [r8], #1
 800ac92:	45a0      	cmp	r8, r4
 800ac94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac98:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac9c:	d118      	bne.n	800acd0 <_dtoa_r+0x558>
 800ac9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aca2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aca6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800acaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acae:	dc4d      	bgt.n	800ad4c <_dtoa_r+0x5d4>
 800acb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800acb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800acb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acbc:	f57f af41 	bpl.w	800ab42 <_dtoa_r+0x3ca>
 800acc0:	4680      	mov	r8, r0
 800acc2:	3801      	subs	r0, #1
 800acc4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800acc8:	2b30      	cmp	r3, #48	; 0x30
 800acca:	d0f9      	beq.n	800acc0 <_dtoa_r+0x548>
 800accc:	4693      	mov	fp, r2
 800acce:	e02a      	b.n	800ad26 <_dtoa_r+0x5ae>
 800acd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800acd4:	e7d6      	b.n	800ac84 <_dtoa_r+0x50c>
 800acd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acda:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800acde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ace2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ace6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800acea:	ee15 3a10 	vmov	r3, s10
 800acee:	3330      	adds	r3, #48	; 0x30
 800acf0:	f808 3b01 	strb.w	r3, [r8], #1
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	eba8 0303 	sub.w	r3, r8, r3
 800acfa:	4599      	cmp	r9, r3
 800acfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ad00:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ad04:	d133      	bne.n	800ad6e <_dtoa_r+0x5f6>
 800ad06:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ad0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ad0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad12:	dc1a      	bgt.n	800ad4a <_dtoa_r+0x5d2>
 800ad14:	eeb4 7b46 	vcmp.f64	d7, d6
 800ad18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad1c:	d103      	bne.n	800ad26 <_dtoa_r+0x5ae>
 800ad1e:	ee15 3a10 	vmov	r3, s10
 800ad22:	07d9      	lsls	r1, r3, #31
 800ad24:	d411      	bmi.n	800ad4a <_dtoa_r+0x5d2>
 800ad26:	4629      	mov	r1, r5
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f000 fbd1 	bl	800b4d0 <_Bfree>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad32:	f888 3000 	strb.w	r3, [r8]
 800ad36:	f10b 0301 	add.w	r3, fp, #1
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f43f ad69 	beq.w	800a816 <_dtoa_r+0x9e>
 800ad44:	f8c3 8000 	str.w	r8, [r3]
 800ad48:	e565      	b.n	800a816 <_dtoa_r+0x9e>
 800ad4a:	465a      	mov	r2, fp
 800ad4c:	4643      	mov	r3, r8
 800ad4e:	4698      	mov	r8, r3
 800ad50:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ad54:	2939      	cmp	r1, #57	; 0x39
 800ad56:	d106      	bne.n	800ad66 <_dtoa_r+0x5ee>
 800ad58:	9901      	ldr	r1, [sp, #4]
 800ad5a:	4299      	cmp	r1, r3
 800ad5c:	d1f7      	bne.n	800ad4e <_dtoa_r+0x5d6>
 800ad5e:	9801      	ldr	r0, [sp, #4]
 800ad60:	2130      	movs	r1, #48	; 0x30
 800ad62:	3201      	adds	r2, #1
 800ad64:	7001      	strb	r1, [r0, #0]
 800ad66:	7819      	ldrb	r1, [r3, #0]
 800ad68:	3101      	adds	r1, #1
 800ad6a:	7019      	strb	r1, [r3, #0]
 800ad6c:	e7ae      	b.n	800accc <_dtoa_r+0x554>
 800ad6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7a:	d1b2      	bne.n	800ace2 <_dtoa_r+0x56a>
 800ad7c:	e7d3      	b.n	800ad26 <_dtoa_r+0x5ae>
 800ad7e:	bf00      	nop
 800ad80:	0800ce18 	.word	0x0800ce18
 800ad84:	0800cdf0 	.word	0x0800cdf0
 800ad88:	9907      	ldr	r1, [sp, #28]
 800ad8a:	2900      	cmp	r1, #0
 800ad8c:	f000 80d0 	beq.w	800af30 <_dtoa_r+0x7b8>
 800ad90:	9906      	ldr	r1, [sp, #24]
 800ad92:	2901      	cmp	r1, #1
 800ad94:	f300 80b4 	bgt.w	800af00 <_dtoa_r+0x788>
 800ad98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad9a:	2900      	cmp	r1, #0
 800ad9c:	f000 80ac 	beq.w	800aef8 <_dtoa_r+0x780>
 800ada0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ada4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ada8:	461c      	mov	r4, r3
 800adaa:	9309      	str	r3, [sp, #36]	; 0x24
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	4413      	add	r3, r2
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	9b05      	ldr	r3, [sp, #20]
 800adb4:	2101      	movs	r1, #1
 800adb6:	4413      	add	r3, r2
 800adb8:	4630      	mov	r0, r6
 800adba:	9305      	str	r3, [sp, #20]
 800adbc:	f000 fc3e 	bl	800b63c <__i2b>
 800adc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc2:	4607      	mov	r7, r0
 800adc4:	f1b8 0f00 	cmp.w	r8, #0
 800adc8:	d00d      	beq.n	800ade6 <_dtoa_r+0x66e>
 800adca:	9a05      	ldr	r2, [sp, #20]
 800adcc:	2a00      	cmp	r2, #0
 800adce:	dd0a      	ble.n	800ade6 <_dtoa_r+0x66e>
 800add0:	4542      	cmp	r2, r8
 800add2:	9904      	ldr	r1, [sp, #16]
 800add4:	bfa8      	it	ge
 800add6:	4642      	movge	r2, r8
 800add8:	1a89      	subs	r1, r1, r2
 800adda:	9104      	str	r1, [sp, #16]
 800addc:	9905      	ldr	r1, [sp, #20]
 800adde:	eba8 0802 	sub.w	r8, r8, r2
 800ade2:	1a8a      	subs	r2, r1, r2
 800ade4:	9205      	str	r2, [sp, #20]
 800ade6:	b303      	cbz	r3, 800ae2a <_dtoa_r+0x6b2>
 800ade8:	9a07      	ldr	r2, [sp, #28]
 800adea:	2a00      	cmp	r2, #0
 800adec:	f000 80a5 	beq.w	800af3a <_dtoa_r+0x7c2>
 800adf0:	2c00      	cmp	r4, #0
 800adf2:	dd13      	ble.n	800ae1c <_dtoa_r+0x6a4>
 800adf4:	4639      	mov	r1, r7
 800adf6:	4622      	mov	r2, r4
 800adf8:	4630      	mov	r0, r6
 800adfa:	930d      	str	r3, [sp, #52]	; 0x34
 800adfc:	f000 fcde 	bl	800b7bc <__pow5mult>
 800ae00:	462a      	mov	r2, r5
 800ae02:	4601      	mov	r1, r0
 800ae04:	4607      	mov	r7, r0
 800ae06:	4630      	mov	r0, r6
 800ae08:	f000 fc2e 	bl	800b668 <__multiply>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	9009      	str	r0, [sp, #36]	; 0x24
 800ae10:	4630      	mov	r0, r6
 800ae12:	f000 fb5d 	bl	800b4d0 <_Bfree>
 800ae16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae1a:	4615      	mov	r5, r2
 800ae1c:	1b1a      	subs	r2, r3, r4
 800ae1e:	d004      	beq.n	800ae2a <_dtoa_r+0x6b2>
 800ae20:	4629      	mov	r1, r5
 800ae22:	4630      	mov	r0, r6
 800ae24:	f000 fcca 	bl	800b7bc <__pow5mult>
 800ae28:	4605      	mov	r5, r0
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f000 fc05 	bl	800b63c <__i2b>
 800ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	4604      	mov	r4, r0
 800ae38:	f340 8081 	ble.w	800af3e <_dtoa_r+0x7c6>
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	4601      	mov	r1, r0
 800ae40:	4630      	mov	r0, r6
 800ae42:	f000 fcbb 	bl	800b7bc <__pow5mult>
 800ae46:	9b06      	ldr	r3, [sp, #24]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	dd7a      	ble.n	800af44 <_dtoa_r+0x7cc>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9309      	str	r3, [sp, #36]	; 0x24
 800ae52:	6922      	ldr	r2, [r4, #16]
 800ae54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ae58:	6910      	ldr	r0, [r2, #16]
 800ae5a:	f000 fba1 	bl	800b5a0 <__hi0bits>
 800ae5e:	f1c0 0020 	rsb	r0, r0, #32
 800ae62:	9b05      	ldr	r3, [sp, #20]
 800ae64:	4418      	add	r0, r3
 800ae66:	f010 001f 	ands.w	r0, r0, #31
 800ae6a:	f000 8093 	beq.w	800af94 <_dtoa_r+0x81c>
 800ae6e:	f1c0 0220 	rsb	r2, r0, #32
 800ae72:	2a04      	cmp	r2, #4
 800ae74:	f340 8085 	ble.w	800af82 <_dtoa_r+0x80a>
 800ae78:	9b04      	ldr	r3, [sp, #16]
 800ae7a:	f1c0 001c 	rsb	r0, r0, #28
 800ae7e:	4403      	add	r3, r0
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	9b05      	ldr	r3, [sp, #20]
 800ae84:	4480      	add	r8, r0
 800ae86:	4403      	add	r3, r0
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dd05      	ble.n	800ae9c <_dtoa_r+0x724>
 800ae90:	4629      	mov	r1, r5
 800ae92:	461a      	mov	r2, r3
 800ae94:	4630      	mov	r0, r6
 800ae96:	f000 fceb 	bl	800b870 <__lshift>
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	9b05      	ldr	r3, [sp, #20]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dd05      	ble.n	800aeae <_dtoa_r+0x736>
 800aea2:	4621      	mov	r1, r4
 800aea4:	461a      	mov	r2, r3
 800aea6:	4630      	mov	r0, r6
 800aea8:	f000 fce2 	bl	800b870 <__lshift>
 800aeac:	4604      	mov	r4, r0
 800aeae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d071      	beq.n	800af98 <_dtoa_r+0x820>
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f000 fd46 	bl	800b948 <__mcmp>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	da6b      	bge.n	800af98 <_dtoa_r+0x820>
 800aec0:	2300      	movs	r3, #0
 800aec2:	4629      	mov	r1, r5
 800aec4:	220a      	movs	r2, #10
 800aec6:	4630      	mov	r0, r6
 800aec8:	f000 fb24 	bl	800b514 <__multadd>
 800aecc:	9b07      	ldr	r3, [sp, #28]
 800aece:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aed2:	4605      	mov	r5, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 8197 	beq.w	800b208 <_dtoa_r+0xa90>
 800aeda:	4639      	mov	r1, r7
 800aedc:	2300      	movs	r3, #0
 800aede:	220a      	movs	r2, #10
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 fb17 	bl	800b514 <__multadd>
 800aee6:	f1ba 0f00 	cmp.w	sl, #0
 800aeea:	4607      	mov	r7, r0
 800aeec:	f300 8093 	bgt.w	800b016 <_dtoa_r+0x89e>
 800aef0:	9b06      	ldr	r3, [sp, #24]
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	dc57      	bgt.n	800afa6 <_dtoa_r+0x82e>
 800aef6:	e08e      	b.n	800b016 <_dtoa_r+0x89e>
 800aef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aefa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aefe:	e751      	b.n	800ada4 <_dtoa_r+0x62c>
 800af00:	f109 34ff 	add.w	r4, r9, #4294967295
 800af04:	42a3      	cmp	r3, r4
 800af06:	bfbf      	itttt	lt
 800af08:	1ae2      	sublt	r2, r4, r3
 800af0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af0c:	189b      	addlt	r3, r3, r2
 800af0e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af10:	bfae      	itee	ge
 800af12:	1b1c      	subge	r4, r3, r4
 800af14:	4623      	movlt	r3, r4
 800af16:	2400      	movlt	r4, #0
 800af18:	f1b9 0f00 	cmp.w	r9, #0
 800af1c:	bfb5      	itete	lt
 800af1e:	9a04      	ldrlt	r2, [sp, #16]
 800af20:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800af24:	eba2 0809 	sublt.w	r8, r2, r9
 800af28:	464a      	movge	r2, r9
 800af2a:	bfb8      	it	lt
 800af2c:	2200      	movlt	r2, #0
 800af2e:	e73c      	b.n	800adaa <_dtoa_r+0x632>
 800af30:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af34:	9f07      	ldr	r7, [sp, #28]
 800af36:	461c      	mov	r4, r3
 800af38:	e744      	b.n	800adc4 <_dtoa_r+0x64c>
 800af3a:	461a      	mov	r2, r3
 800af3c:	e770      	b.n	800ae20 <_dtoa_r+0x6a8>
 800af3e:	9b06      	ldr	r3, [sp, #24]
 800af40:	2b01      	cmp	r3, #1
 800af42:	dc18      	bgt.n	800af76 <_dtoa_r+0x7fe>
 800af44:	9b02      	ldr	r3, [sp, #8]
 800af46:	b9b3      	cbnz	r3, 800af76 <_dtoa_r+0x7fe>
 800af48:	9b03      	ldr	r3, [sp, #12]
 800af4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800af4e:	b9a2      	cbnz	r2, 800af7a <_dtoa_r+0x802>
 800af50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af54:	0d12      	lsrs	r2, r2, #20
 800af56:	0512      	lsls	r2, r2, #20
 800af58:	b18a      	cbz	r2, 800af7e <_dtoa_r+0x806>
 800af5a:	9b04      	ldr	r3, [sp, #16]
 800af5c:	3301      	adds	r3, #1
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	9b05      	ldr	r3, [sp, #20]
 800af62:	3301      	adds	r3, #1
 800af64:	9305      	str	r3, [sp, #20]
 800af66:	2301      	movs	r3, #1
 800af68:	9309      	str	r3, [sp, #36]	; 0x24
 800af6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f47f af70 	bne.w	800ae52 <_dtoa_r+0x6da>
 800af72:	2001      	movs	r0, #1
 800af74:	e775      	b.n	800ae62 <_dtoa_r+0x6ea>
 800af76:	2300      	movs	r3, #0
 800af78:	e7f6      	b.n	800af68 <_dtoa_r+0x7f0>
 800af7a:	9b02      	ldr	r3, [sp, #8]
 800af7c:	e7f4      	b.n	800af68 <_dtoa_r+0x7f0>
 800af7e:	9209      	str	r2, [sp, #36]	; 0x24
 800af80:	e7f3      	b.n	800af6a <_dtoa_r+0x7f2>
 800af82:	d082      	beq.n	800ae8a <_dtoa_r+0x712>
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	321c      	adds	r2, #28
 800af88:	4413      	add	r3, r2
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	9b05      	ldr	r3, [sp, #20]
 800af8e:	4490      	add	r8, r2
 800af90:	4413      	add	r3, r2
 800af92:	e779      	b.n	800ae88 <_dtoa_r+0x710>
 800af94:	4602      	mov	r2, r0
 800af96:	e7f5      	b.n	800af84 <_dtoa_r+0x80c>
 800af98:	f1b9 0f00 	cmp.w	r9, #0
 800af9c:	dc36      	bgt.n	800b00c <_dtoa_r+0x894>
 800af9e:	9b06      	ldr	r3, [sp, #24]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	dd33      	ble.n	800b00c <_dtoa_r+0x894>
 800afa4:	46ca      	mov	sl, r9
 800afa6:	f1ba 0f00 	cmp.w	sl, #0
 800afaa:	d10d      	bne.n	800afc8 <_dtoa_r+0x850>
 800afac:	4621      	mov	r1, r4
 800afae:	4653      	mov	r3, sl
 800afb0:	2205      	movs	r2, #5
 800afb2:	4630      	mov	r0, r6
 800afb4:	f000 faae 	bl	800b514 <__multadd>
 800afb8:	4601      	mov	r1, r0
 800afba:	4604      	mov	r4, r0
 800afbc:	4628      	mov	r0, r5
 800afbe:	f000 fcc3 	bl	800b948 <__mcmp>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	f73f ade4 	bgt.w	800ab90 <_dtoa_r+0x418>
 800afc8:	9b08      	ldr	r3, [sp, #32]
 800afca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800afce:	ea6f 0b03 	mvn.w	fp, r3
 800afd2:	f04f 0900 	mov.w	r9, #0
 800afd6:	4621      	mov	r1, r4
 800afd8:	4630      	mov	r0, r6
 800afda:	f000 fa79 	bl	800b4d0 <_Bfree>
 800afde:	2f00      	cmp	r7, #0
 800afe0:	f43f aea1 	beq.w	800ad26 <_dtoa_r+0x5ae>
 800afe4:	f1b9 0f00 	cmp.w	r9, #0
 800afe8:	d005      	beq.n	800aff6 <_dtoa_r+0x87e>
 800afea:	45b9      	cmp	r9, r7
 800afec:	d003      	beq.n	800aff6 <_dtoa_r+0x87e>
 800afee:	4649      	mov	r1, r9
 800aff0:	4630      	mov	r0, r6
 800aff2:	f000 fa6d 	bl	800b4d0 <_Bfree>
 800aff6:	4639      	mov	r1, r7
 800aff8:	4630      	mov	r0, r6
 800affa:	f000 fa69 	bl	800b4d0 <_Bfree>
 800affe:	e692      	b.n	800ad26 <_dtoa_r+0x5ae>
 800b000:	2400      	movs	r4, #0
 800b002:	4627      	mov	r7, r4
 800b004:	e7e0      	b.n	800afc8 <_dtoa_r+0x850>
 800b006:	4693      	mov	fp, r2
 800b008:	4627      	mov	r7, r4
 800b00a:	e5c1      	b.n	800ab90 <_dtoa_r+0x418>
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	46ca      	mov	sl, r9
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 8100 	beq.w	800b216 <_dtoa_r+0xa9e>
 800b016:	f1b8 0f00 	cmp.w	r8, #0
 800b01a:	dd05      	ble.n	800b028 <_dtoa_r+0x8b0>
 800b01c:	4639      	mov	r1, r7
 800b01e:	4642      	mov	r2, r8
 800b020:	4630      	mov	r0, r6
 800b022:	f000 fc25 	bl	800b870 <__lshift>
 800b026:	4607      	mov	r7, r0
 800b028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d05d      	beq.n	800b0ea <_dtoa_r+0x972>
 800b02e:	6879      	ldr	r1, [r7, #4]
 800b030:	4630      	mov	r0, r6
 800b032:	f000 fa0d 	bl	800b450 <_Balloc>
 800b036:	4680      	mov	r8, r0
 800b038:	b928      	cbnz	r0, 800b046 <_dtoa_r+0x8ce>
 800b03a:	4b82      	ldr	r3, [pc, #520]	; (800b244 <_dtoa_r+0xacc>)
 800b03c:	4602      	mov	r2, r0
 800b03e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b042:	f7ff bbb1 	b.w	800a7a8 <_dtoa_r+0x30>
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	3202      	adds	r2, #2
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	f107 010c 	add.w	r1, r7, #12
 800b050:	300c      	adds	r0, #12
 800b052:	f7ff fafa 	bl	800a64a <memcpy>
 800b056:	2201      	movs	r2, #1
 800b058:	4641      	mov	r1, r8
 800b05a:	4630      	mov	r0, r6
 800b05c:	f000 fc08 	bl	800b870 <__lshift>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	3301      	adds	r3, #1
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	4453      	add	r3, sl
 800b06a:	9308      	str	r3, [sp, #32]
 800b06c:	9b02      	ldr	r3, [sp, #8]
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	46b9      	mov	r9, r7
 800b074:	9307      	str	r3, [sp, #28]
 800b076:	4607      	mov	r7, r0
 800b078:	9b04      	ldr	r3, [sp, #16]
 800b07a:	4621      	mov	r1, r4
 800b07c:	3b01      	subs	r3, #1
 800b07e:	4628      	mov	r0, r5
 800b080:	9302      	str	r3, [sp, #8]
 800b082:	f7ff faf0 	bl	800a666 <quorem>
 800b086:	4603      	mov	r3, r0
 800b088:	3330      	adds	r3, #48	; 0x30
 800b08a:	9005      	str	r0, [sp, #20]
 800b08c:	4649      	mov	r1, r9
 800b08e:	4628      	mov	r0, r5
 800b090:	9309      	str	r3, [sp, #36]	; 0x24
 800b092:	f000 fc59 	bl	800b948 <__mcmp>
 800b096:	463a      	mov	r2, r7
 800b098:	4682      	mov	sl, r0
 800b09a:	4621      	mov	r1, r4
 800b09c:	4630      	mov	r0, r6
 800b09e:	f000 fc6f 	bl	800b980 <__mdiff>
 800b0a2:	68c2      	ldr	r2, [r0, #12]
 800b0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	bb0a      	cbnz	r2, 800b0ee <_dtoa_r+0x976>
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f000 fc4b 	bl	800b948 <__mcmp>
 800b0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	4641      	mov	r1, r8
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b0be:	f000 fa07 	bl	800b4d0 <_Bfree>
 800b0c2:	9b06      	ldr	r3, [sp, #24]
 800b0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b0ca:	ea43 0102 	orr.w	r1, r3, r2
 800b0ce:	9b07      	ldr	r3, [sp, #28]
 800b0d0:	4319      	orrs	r1, r3
 800b0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d4:	d10d      	bne.n	800b0f2 <_dtoa_r+0x97a>
 800b0d6:	2b39      	cmp	r3, #57	; 0x39
 800b0d8:	d029      	beq.n	800b12e <_dtoa_r+0x9b6>
 800b0da:	f1ba 0f00 	cmp.w	sl, #0
 800b0de:	dd01      	ble.n	800b0e4 <_dtoa_r+0x96c>
 800b0e0:	9b05      	ldr	r3, [sp, #20]
 800b0e2:	3331      	adds	r3, #49	; 0x31
 800b0e4:	9a02      	ldr	r2, [sp, #8]
 800b0e6:	7013      	strb	r3, [r2, #0]
 800b0e8:	e775      	b.n	800afd6 <_dtoa_r+0x85e>
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	e7b8      	b.n	800b060 <_dtoa_r+0x8e8>
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	e7e1      	b.n	800b0b6 <_dtoa_r+0x93e>
 800b0f2:	f1ba 0f00 	cmp.w	sl, #0
 800b0f6:	db06      	blt.n	800b106 <_dtoa_r+0x98e>
 800b0f8:	9906      	ldr	r1, [sp, #24]
 800b0fa:	ea41 0a0a 	orr.w	sl, r1, sl
 800b0fe:	9907      	ldr	r1, [sp, #28]
 800b100:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b104:	d120      	bne.n	800b148 <_dtoa_r+0x9d0>
 800b106:	2a00      	cmp	r2, #0
 800b108:	ddec      	ble.n	800b0e4 <_dtoa_r+0x96c>
 800b10a:	4629      	mov	r1, r5
 800b10c:	2201      	movs	r2, #1
 800b10e:	4630      	mov	r0, r6
 800b110:	9304      	str	r3, [sp, #16]
 800b112:	f000 fbad 	bl	800b870 <__lshift>
 800b116:	4621      	mov	r1, r4
 800b118:	4605      	mov	r5, r0
 800b11a:	f000 fc15 	bl	800b948 <__mcmp>
 800b11e:	2800      	cmp	r0, #0
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	dc02      	bgt.n	800b12a <_dtoa_r+0x9b2>
 800b124:	d1de      	bne.n	800b0e4 <_dtoa_r+0x96c>
 800b126:	07da      	lsls	r2, r3, #31
 800b128:	d5dc      	bpl.n	800b0e4 <_dtoa_r+0x96c>
 800b12a:	2b39      	cmp	r3, #57	; 0x39
 800b12c:	d1d8      	bne.n	800b0e0 <_dtoa_r+0x968>
 800b12e:	9a02      	ldr	r2, [sp, #8]
 800b130:	2339      	movs	r3, #57	; 0x39
 800b132:	7013      	strb	r3, [r2, #0]
 800b134:	4643      	mov	r3, r8
 800b136:	4698      	mov	r8, r3
 800b138:	3b01      	subs	r3, #1
 800b13a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b13e:	2a39      	cmp	r2, #57	; 0x39
 800b140:	d051      	beq.n	800b1e6 <_dtoa_r+0xa6e>
 800b142:	3201      	adds	r2, #1
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e746      	b.n	800afd6 <_dtoa_r+0x85e>
 800b148:	2a00      	cmp	r2, #0
 800b14a:	dd03      	ble.n	800b154 <_dtoa_r+0x9dc>
 800b14c:	2b39      	cmp	r3, #57	; 0x39
 800b14e:	d0ee      	beq.n	800b12e <_dtoa_r+0x9b6>
 800b150:	3301      	adds	r3, #1
 800b152:	e7c7      	b.n	800b0e4 <_dtoa_r+0x96c>
 800b154:	9a04      	ldr	r2, [sp, #16]
 800b156:	9908      	ldr	r1, [sp, #32]
 800b158:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b15c:	428a      	cmp	r2, r1
 800b15e:	d02b      	beq.n	800b1b8 <_dtoa_r+0xa40>
 800b160:	4629      	mov	r1, r5
 800b162:	2300      	movs	r3, #0
 800b164:	220a      	movs	r2, #10
 800b166:	4630      	mov	r0, r6
 800b168:	f000 f9d4 	bl	800b514 <__multadd>
 800b16c:	45b9      	cmp	r9, r7
 800b16e:	4605      	mov	r5, r0
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	f04f 020a 	mov.w	r2, #10
 800b178:	4649      	mov	r1, r9
 800b17a:	4630      	mov	r0, r6
 800b17c:	d107      	bne.n	800b18e <_dtoa_r+0xa16>
 800b17e:	f000 f9c9 	bl	800b514 <__multadd>
 800b182:	4681      	mov	r9, r0
 800b184:	4607      	mov	r7, r0
 800b186:	9b04      	ldr	r3, [sp, #16]
 800b188:	3301      	adds	r3, #1
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	e774      	b.n	800b078 <_dtoa_r+0x900>
 800b18e:	f000 f9c1 	bl	800b514 <__multadd>
 800b192:	4639      	mov	r1, r7
 800b194:	4681      	mov	r9, r0
 800b196:	2300      	movs	r3, #0
 800b198:	220a      	movs	r2, #10
 800b19a:	4630      	mov	r0, r6
 800b19c:	f000 f9ba 	bl	800b514 <__multadd>
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	e7f0      	b.n	800b186 <_dtoa_r+0xa0e>
 800b1a4:	f1ba 0f00 	cmp.w	sl, #0
 800b1a8:	9a01      	ldr	r2, [sp, #4]
 800b1aa:	bfcc      	ite	gt
 800b1ac:	46d0      	movgt	r8, sl
 800b1ae:	f04f 0801 	movle.w	r8, #1
 800b1b2:	4490      	add	r8, r2
 800b1b4:	f04f 0900 	mov.w	r9, #0
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4630      	mov	r0, r6
 800b1be:	9302      	str	r3, [sp, #8]
 800b1c0:	f000 fb56 	bl	800b870 <__lshift>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	f000 fbbe 	bl	800b948 <__mcmp>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	dcb1      	bgt.n	800b134 <_dtoa_r+0x9bc>
 800b1d0:	d102      	bne.n	800b1d8 <_dtoa_r+0xa60>
 800b1d2:	9b02      	ldr	r3, [sp, #8]
 800b1d4:	07db      	lsls	r3, r3, #31
 800b1d6:	d4ad      	bmi.n	800b134 <_dtoa_r+0x9bc>
 800b1d8:	4643      	mov	r3, r8
 800b1da:	4698      	mov	r8, r3
 800b1dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1e0:	2a30      	cmp	r2, #48	; 0x30
 800b1e2:	d0fa      	beq.n	800b1da <_dtoa_r+0xa62>
 800b1e4:	e6f7      	b.n	800afd6 <_dtoa_r+0x85e>
 800b1e6:	9a01      	ldr	r2, [sp, #4]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d1a4      	bne.n	800b136 <_dtoa_r+0x9be>
 800b1ec:	f10b 0b01 	add.w	fp, fp, #1
 800b1f0:	2331      	movs	r3, #49	; 0x31
 800b1f2:	e778      	b.n	800b0e6 <_dtoa_r+0x96e>
 800b1f4:	4b14      	ldr	r3, [pc, #80]	; (800b248 <_dtoa_r+0xad0>)
 800b1f6:	f7ff bb2a 	b.w	800a84e <_dtoa_r+0xd6>
 800b1fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f47f ab05 	bne.w	800a80c <_dtoa_r+0x94>
 800b202:	4b12      	ldr	r3, [pc, #72]	; (800b24c <_dtoa_r+0xad4>)
 800b204:	f7ff bb23 	b.w	800a84e <_dtoa_r+0xd6>
 800b208:	f1ba 0f00 	cmp.w	sl, #0
 800b20c:	dc03      	bgt.n	800b216 <_dtoa_r+0xa9e>
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	2b02      	cmp	r3, #2
 800b212:	f73f aec8 	bgt.w	800afa6 <_dtoa_r+0x82e>
 800b216:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b21a:	4621      	mov	r1, r4
 800b21c:	4628      	mov	r0, r5
 800b21e:	f7ff fa22 	bl	800a666 <quorem>
 800b222:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b226:	f808 3b01 	strb.w	r3, [r8], #1
 800b22a:	9a01      	ldr	r2, [sp, #4]
 800b22c:	eba8 0202 	sub.w	r2, r8, r2
 800b230:	4592      	cmp	sl, r2
 800b232:	ddb7      	ble.n	800b1a4 <_dtoa_r+0xa2c>
 800b234:	4629      	mov	r1, r5
 800b236:	2300      	movs	r3, #0
 800b238:	220a      	movs	r2, #10
 800b23a:	4630      	mov	r0, r6
 800b23c:	f000 f96a 	bl	800b514 <__multadd>
 800b240:	4605      	mov	r5, r0
 800b242:	e7ea      	b.n	800b21a <_dtoa_r+0xaa2>
 800b244:	0800cd84 	.word	0x0800cd84
 800b248:	0800cce4 	.word	0x0800cce4
 800b24c:	0800cd08 	.word	0x0800cd08

0800b250 <_free_r>:
 800b250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b252:	2900      	cmp	r1, #0
 800b254:	d044      	beq.n	800b2e0 <_free_r+0x90>
 800b256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25a:	9001      	str	r0, [sp, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f1a1 0404 	sub.w	r4, r1, #4
 800b262:	bfb8      	it	lt
 800b264:	18e4      	addlt	r4, r4, r3
 800b266:	f000 f8e7 	bl	800b438 <__malloc_lock>
 800b26a:	4a1e      	ldr	r2, [pc, #120]	; (800b2e4 <_free_r+0x94>)
 800b26c:	9801      	ldr	r0, [sp, #4]
 800b26e:	6813      	ldr	r3, [r2, #0]
 800b270:	b933      	cbnz	r3, 800b280 <_free_r+0x30>
 800b272:	6063      	str	r3, [r4, #4]
 800b274:	6014      	str	r4, [r2, #0]
 800b276:	b003      	add	sp, #12
 800b278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b27c:	f000 b8e2 	b.w	800b444 <__malloc_unlock>
 800b280:	42a3      	cmp	r3, r4
 800b282:	d908      	bls.n	800b296 <_free_r+0x46>
 800b284:	6825      	ldr	r5, [r4, #0]
 800b286:	1961      	adds	r1, r4, r5
 800b288:	428b      	cmp	r3, r1
 800b28a:	bf01      	itttt	eq
 800b28c:	6819      	ldreq	r1, [r3, #0]
 800b28e:	685b      	ldreq	r3, [r3, #4]
 800b290:	1949      	addeq	r1, r1, r5
 800b292:	6021      	streq	r1, [r4, #0]
 800b294:	e7ed      	b.n	800b272 <_free_r+0x22>
 800b296:	461a      	mov	r2, r3
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	b10b      	cbz	r3, 800b2a0 <_free_r+0x50>
 800b29c:	42a3      	cmp	r3, r4
 800b29e:	d9fa      	bls.n	800b296 <_free_r+0x46>
 800b2a0:	6811      	ldr	r1, [r2, #0]
 800b2a2:	1855      	adds	r5, r2, r1
 800b2a4:	42a5      	cmp	r5, r4
 800b2a6:	d10b      	bne.n	800b2c0 <_free_r+0x70>
 800b2a8:	6824      	ldr	r4, [r4, #0]
 800b2aa:	4421      	add	r1, r4
 800b2ac:	1854      	adds	r4, r2, r1
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	d1e0      	bne.n	800b276 <_free_r+0x26>
 800b2b4:	681c      	ldr	r4, [r3, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	6053      	str	r3, [r2, #4]
 800b2ba:	440c      	add	r4, r1
 800b2bc:	6014      	str	r4, [r2, #0]
 800b2be:	e7da      	b.n	800b276 <_free_r+0x26>
 800b2c0:	d902      	bls.n	800b2c8 <_free_r+0x78>
 800b2c2:	230c      	movs	r3, #12
 800b2c4:	6003      	str	r3, [r0, #0]
 800b2c6:	e7d6      	b.n	800b276 <_free_r+0x26>
 800b2c8:	6825      	ldr	r5, [r4, #0]
 800b2ca:	1961      	adds	r1, r4, r5
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	bf04      	itt	eq
 800b2d0:	6819      	ldreq	r1, [r3, #0]
 800b2d2:	685b      	ldreq	r3, [r3, #4]
 800b2d4:	6063      	str	r3, [r4, #4]
 800b2d6:	bf04      	itt	eq
 800b2d8:	1949      	addeq	r1, r1, r5
 800b2da:	6021      	streq	r1, [r4, #0]
 800b2dc:	6054      	str	r4, [r2, #4]
 800b2de:	e7ca      	b.n	800b276 <_free_r+0x26>
 800b2e0:	b003      	add	sp, #12
 800b2e2:	bd30      	pop	{r4, r5, pc}
 800b2e4:	20005518 	.word	0x20005518

0800b2e8 <malloc>:
 800b2e8:	4b02      	ldr	r3, [pc, #8]	; (800b2f4 <malloc+0xc>)
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	6818      	ldr	r0, [r3, #0]
 800b2ee:	f000 b823 	b.w	800b338 <_malloc_r>
 800b2f2:	bf00      	nop
 800b2f4:	20000074 	.word	0x20000074

0800b2f8 <sbrk_aligned>:
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	4e0e      	ldr	r6, [pc, #56]	; (800b334 <sbrk_aligned+0x3c>)
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	6831      	ldr	r1, [r6, #0]
 800b300:	4605      	mov	r5, r0
 800b302:	b911      	cbnz	r1, 800b30a <sbrk_aligned+0x12>
 800b304:	f000 fe40 	bl	800bf88 <_sbrk_r>
 800b308:	6030      	str	r0, [r6, #0]
 800b30a:	4621      	mov	r1, r4
 800b30c:	4628      	mov	r0, r5
 800b30e:	f000 fe3b 	bl	800bf88 <_sbrk_r>
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	d00a      	beq.n	800b32c <sbrk_aligned+0x34>
 800b316:	1cc4      	adds	r4, r0, #3
 800b318:	f024 0403 	bic.w	r4, r4, #3
 800b31c:	42a0      	cmp	r0, r4
 800b31e:	d007      	beq.n	800b330 <sbrk_aligned+0x38>
 800b320:	1a21      	subs	r1, r4, r0
 800b322:	4628      	mov	r0, r5
 800b324:	f000 fe30 	bl	800bf88 <_sbrk_r>
 800b328:	3001      	adds	r0, #1
 800b32a:	d101      	bne.n	800b330 <sbrk_aligned+0x38>
 800b32c:	f04f 34ff 	mov.w	r4, #4294967295
 800b330:	4620      	mov	r0, r4
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	2000551c 	.word	0x2000551c

0800b338 <_malloc_r>:
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	1ccd      	adds	r5, r1, #3
 800b33e:	f025 0503 	bic.w	r5, r5, #3
 800b342:	3508      	adds	r5, #8
 800b344:	2d0c      	cmp	r5, #12
 800b346:	bf38      	it	cc
 800b348:	250c      	movcc	r5, #12
 800b34a:	2d00      	cmp	r5, #0
 800b34c:	4607      	mov	r7, r0
 800b34e:	db01      	blt.n	800b354 <_malloc_r+0x1c>
 800b350:	42a9      	cmp	r1, r5
 800b352:	d905      	bls.n	800b360 <_malloc_r+0x28>
 800b354:	230c      	movs	r3, #12
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	2600      	movs	r6, #0
 800b35a:	4630      	mov	r0, r6
 800b35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b360:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b434 <_malloc_r+0xfc>
 800b364:	f000 f868 	bl	800b438 <__malloc_lock>
 800b368:	f8d8 3000 	ldr.w	r3, [r8]
 800b36c:	461c      	mov	r4, r3
 800b36e:	bb5c      	cbnz	r4, 800b3c8 <_malloc_r+0x90>
 800b370:	4629      	mov	r1, r5
 800b372:	4638      	mov	r0, r7
 800b374:	f7ff ffc0 	bl	800b2f8 <sbrk_aligned>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	4604      	mov	r4, r0
 800b37c:	d155      	bne.n	800b42a <_malloc_r+0xf2>
 800b37e:	f8d8 4000 	ldr.w	r4, [r8]
 800b382:	4626      	mov	r6, r4
 800b384:	2e00      	cmp	r6, #0
 800b386:	d145      	bne.n	800b414 <_malloc_r+0xdc>
 800b388:	2c00      	cmp	r4, #0
 800b38a:	d048      	beq.n	800b41e <_malloc_r+0xe6>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	4631      	mov	r1, r6
 800b390:	4638      	mov	r0, r7
 800b392:	eb04 0903 	add.w	r9, r4, r3
 800b396:	f000 fdf7 	bl	800bf88 <_sbrk_r>
 800b39a:	4581      	cmp	r9, r0
 800b39c:	d13f      	bne.n	800b41e <_malloc_r+0xe6>
 800b39e:	6821      	ldr	r1, [r4, #0]
 800b3a0:	1a6d      	subs	r5, r5, r1
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7ff ffa7 	bl	800b2f8 <sbrk_aligned>
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	d037      	beq.n	800b41e <_malloc_r+0xe6>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	442b      	add	r3, r5
 800b3b2:	6023      	str	r3, [r4, #0]
 800b3b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d038      	beq.n	800b42e <_malloc_r+0xf6>
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	42a2      	cmp	r2, r4
 800b3c0:	d12b      	bne.n	800b41a <_malloc_r+0xe2>
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	605a      	str	r2, [r3, #4]
 800b3c6:	e00f      	b.n	800b3e8 <_malloc_r+0xb0>
 800b3c8:	6822      	ldr	r2, [r4, #0]
 800b3ca:	1b52      	subs	r2, r2, r5
 800b3cc:	d41f      	bmi.n	800b40e <_malloc_r+0xd6>
 800b3ce:	2a0b      	cmp	r2, #11
 800b3d0:	d917      	bls.n	800b402 <_malloc_r+0xca>
 800b3d2:	1961      	adds	r1, r4, r5
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	6025      	str	r5, [r4, #0]
 800b3d8:	bf18      	it	ne
 800b3da:	6059      	strne	r1, [r3, #4]
 800b3dc:	6863      	ldr	r3, [r4, #4]
 800b3de:	bf08      	it	eq
 800b3e0:	f8c8 1000 	streq.w	r1, [r8]
 800b3e4:	5162      	str	r2, [r4, r5]
 800b3e6:	604b      	str	r3, [r1, #4]
 800b3e8:	4638      	mov	r0, r7
 800b3ea:	f104 060b 	add.w	r6, r4, #11
 800b3ee:	f000 f829 	bl	800b444 <__malloc_unlock>
 800b3f2:	f026 0607 	bic.w	r6, r6, #7
 800b3f6:	1d23      	adds	r3, r4, #4
 800b3f8:	1af2      	subs	r2, r6, r3
 800b3fa:	d0ae      	beq.n	800b35a <_malloc_r+0x22>
 800b3fc:	1b9b      	subs	r3, r3, r6
 800b3fe:	50a3      	str	r3, [r4, r2]
 800b400:	e7ab      	b.n	800b35a <_malloc_r+0x22>
 800b402:	42a3      	cmp	r3, r4
 800b404:	6862      	ldr	r2, [r4, #4]
 800b406:	d1dd      	bne.n	800b3c4 <_malloc_r+0x8c>
 800b408:	f8c8 2000 	str.w	r2, [r8]
 800b40c:	e7ec      	b.n	800b3e8 <_malloc_r+0xb0>
 800b40e:	4623      	mov	r3, r4
 800b410:	6864      	ldr	r4, [r4, #4]
 800b412:	e7ac      	b.n	800b36e <_malloc_r+0x36>
 800b414:	4634      	mov	r4, r6
 800b416:	6876      	ldr	r6, [r6, #4]
 800b418:	e7b4      	b.n	800b384 <_malloc_r+0x4c>
 800b41a:	4613      	mov	r3, r2
 800b41c:	e7cc      	b.n	800b3b8 <_malloc_r+0x80>
 800b41e:	230c      	movs	r3, #12
 800b420:	603b      	str	r3, [r7, #0]
 800b422:	4638      	mov	r0, r7
 800b424:	f000 f80e 	bl	800b444 <__malloc_unlock>
 800b428:	e797      	b.n	800b35a <_malloc_r+0x22>
 800b42a:	6025      	str	r5, [r4, #0]
 800b42c:	e7dc      	b.n	800b3e8 <_malloc_r+0xb0>
 800b42e:	605b      	str	r3, [r3, #4]
 800b430:	deff      	udf	#255	; 0xff
 800b432:	bf00      	nop
 800b434:	20005518 	.word	0x20005518

0800b438 <__malloc_lock>:
 800b438:	4801      	ldr	r0, [pc, #4]	; (800b440 <__malloc_lock+0x8>)
 800b43a:	f7ff b904 	b.w	800a646 <__retarget_lock_acquire_recursive>
 800b43e:	bf00      	nop
 800b440:	20005514 	.word	0x20005514

0800b444 <__malloc_unlock>:
 800b444:	4801      	ldr	r0, [pc, #4]	; (800b44c <__malloc_unlock+0x8>)
 800b446:	f7ff b8ff 	b.w	800a648 <__retarget_lock_release_recursive>
 800b44a:	bf00      	nop
 800b44c:	20005514 	.word	0x20005514

0800b450 <_Balloc>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	69c6      	ldr	r6, [r0, #28]
 800b454:	4604      	mov	r4, r0
 800b456:	460d      	mov	r5, r1
 800b458:	b976      	cbnz	r6, 800b478 <_Balloc+0x28>
 800b45a:	2010      	movs	r0, #16
 800b45c:	f7ff ff44 	bl	800b2e8 <malloc>
 800b460:	4602      	mov	r2, r0
 800b462:	61e0      	str	r0, [r4, #28]
 800b464:	b920      	cbnz	r0, 800b470 <_Balloc+0x20>
 800b466:	4b18      	ldr	r3, [pc, #96]	; (800b4c8 <_Balloc+0x78>)
 800b468:	4818      	ldr	r0, [pc, #96]	; (800b4cc <_Balloc+0x7c>)
 800b46a:	216b      	movs	r1, #107	; 0x6b
 800b46c:	f000 fd9c 	bl	800bfa8 <__assert_func>
 800b470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b474:	6006      	str	r6, [r0, #0]
 800b476:	60c6      	str	r6, [r0, #12]
 800b478:	69e6      	ldr	r6, [r4, #28]
 800b47a:	68f3      	ldr	r3, [r6, #12]
 800b47c:	b183      	cbz	r3, 800b4a0 <_Balloc+0x50>
 800b47e:	69e3      	ldr	r3, [r4, #28]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b486:	b9b8      	cbnz	r0, 800b4b8 <_Balloc+0x68>
 800b488:	2101      	movs	r1, #1
 800b48a:	fa01 f605 	lsl.w	r6, r1, r5
 800b48e:	1d72      	adds	r2, r6, #5
 800b490:	0092      	lsls	r2, r2, #2
 800b492:	4620      	mov	r0, r4
 800b494:	f000 fda6 	bl	800bfe4 <_calloc_r>
 800b498:	b160      	cbz	r0, 800b4b4 <_Balloc+0x64>
 800b49a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b49e:	e00e      	b.n	800b4be <_Balloc+0x6e>
 800b4a0:	2221      	movs	r2, #33	; 0x21
 800b4a2:	2104      	movs	r1, #4
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 fd9d 	bl	800bfe4 <_calloc_r>
 800b4aa:	69e3      	ldr	r3, [r4, #28]
 800b4ac:	60f0      	str	r0, [r6, #12]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e4      	bne.n	800b47e <_Balloc+0x2e>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	6802      	ldr	r2, [r0, #0]
 800b4ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4c4:	e7f7      	b.n	800b4b6 <_Balloc+0x66>
 800b4c6:	bf00      	nop
 800b4c8:	0800cd15 	.word	0x0800cd15
 800b4cc:	0800cd95 	.word	0x0800cd95

0800b4d0 <_Bfree>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	69c6      	ldr	r6, [r0, #28]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	b976      	cbnz	r6, 800b4f8 <_Bfree+0x28>
 800b4da:	2010      	movs	r0, #16
 800b4dc:	f7ff ff04 	bl	800b2e8 <malloc>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	61e8      	str	r0, [r5, #28]
 800b4e4:	b920      	cbnz	r0, 800b4f0 <_Bfree+0x20>
 800b4e6:	4b09      	ldr	r3, [pc, #36]	; (800b50c <_Bfree+0x3c>)
 800b4e8:	4809      	ldr	r0, [pc, #36]	; (800b510 <_Bfree+0x40>)
 800b4ea:	218f      	movs	r1, #143	; 0x8f
 800b4ec:	f000 fd5c 	bl	800bfa8 <__assert_func>
 800b4f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4f4:	6006      	str	r6, [r0, #0]
 800b4f6:	60c6      	str	r6, [r0, #12]
 800b4f8:	b13c      	cbz	r4, 800b50a <_Bfree+0x3a>
 800b4fa:	69eb      	ldr	r3, [r5, #28]
 800b4fc:	6862      	ldr	r2, [r4, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b504:	6021      	str	r1, [r4, #0]
 800b506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	0800cd15 	.word	0x0800cd15
 800b510:	0800cd95 	.word	0x0800cd95

0800b514 <__multadd>:
 800b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b518:	690d      	ldr	r5, [r1, #16]
 800b51a:	4607      	mov	r7, r0
 800b51c:	460c      	mov	r4, r1
 800b51e:	461e      	mov	r6, r3
 800b520:	f101 0c14 	add.w	ip, r1, #20
 800b524:	2000      	movs	r0, #0
 800b526:	f8dc 3000 	ldr.w	r3, [ip]
 800b52a:	b299      	uxth	r1, r3
 800b52c:	fb02 6101 	mla	r1, r2, r1, r6
 800b530:	0c1e      	lsrs	r6, r3, #16
 800b532:	0c0b      	lsrs	r3, r1, #16
 800b534:	fb02 3306 	mla	r3, r2, r6, r3
 800b538:	b289      	uxth	r1, r1
 800b53a:	3001      	adds	r0, #1
 800b53c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b540:	4285      	cmp	r5, r0
 800b542:	f84c 1b04 	str.w	r1, [ip], #4
 800b546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b54a:	dcec      	bgt.n	800b526 <__multadd+0x12>
 800b54c:	b30e      	cbz	r6, 800b592 <__multadd+0x7e>
 800b54e:	68a3      	ldr	r3, [r4, #8]
 800b550:	42ab      	cmp	r3, r5
 800b552:	dc19      	bgt.n	800b588 <__multadd+0x74>
 800b554:	6861      	ldr	r1, [r4, #4]
 800b556:	4638      	mov	r0, r7
 800b558:	3101      	adds	r1, #1
 800b55a:	f7ff ff79 	bl	800b450 <_Balloc>
 800b55e:	4680      	mov	r8, r0
 800b560:	b928      	cbnz	r0, 800b56e <__multadd+0x5a>
 800b562:	4602      	mov	r2, r0
 800b564:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <__multadd+0x84>)
 800b566:	480d      	ldr	r0, [pc, #52]	; (800b59c <__multadd+0x88>)
 800b568:	21ba      	movs	r1, #186	; 0xba
 800b56a:	f000 fd1d 	bl	800bfa8 <__assert_func>
 800b56e:	6922      	ldr	r2, [r4, #16]
 800b570:	3202      	adds	r2, #2
 800b572:	f104 010c 	add.w	r1, r4, #12
 800b576:	0092      	lsls	r2, r2, #2
 800b578:	300c      	adds	r0, #12
 800b57a:	f7ff f866 	bl	800a64a <memcpy>
 800b57e:	4621      	mov	r1, r4
 800b580:	4638      	mov	r0, r7
 800b582:	f7ff ffa5 	bl	800b4d0 <_Bfree>
 800b586:	4644      	mov	r4, r8
 800b588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b58c:	3501      	adds	r5, #1
 800b58e:	615e      	str	r6, [r3, #20]
 800b590:	6125      	str	r5, [r4, #16]
 800b592:	4620      	mov	r0, r4
 800b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b598:	0800cd84 	.word	0x0800cd84
 800b59c:	0800cd95 	.word	0x0800cd95

0800b5a0 <__hi0bits>:
 800b5a0:	0c03      	lsrs	r3, r0, #16
 800b5a2:	041b      	lsls	r3, r3, #16
 800b5a4:	b9d3      	cbnz	r3, 800b5dc <__hi0bits+0x3c>
 800b5a6:	0400      	lsls	r0, r0, #16
 800b5a8:	2310      	movs	r3, #16
 800b5aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5ae:	bf04      	itt	eq
 800b5b0:	0200      	lsleq	r0, r0, #8
 800b5b2:	3308      	addeq	r3, #8
 800b5b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5b8:	bf04      	itt	eq
 800b5ba:	0100      	lsleq	r0, r0, #4
 800b5bc:	3304      	addeq	r3, #4
 800b5be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5c2:	bf04      	itt	eq
 800b5c4:	0080      	lsleq	r0, r0, #2
 800b5c6:	3302      	addeq	r3, #2
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	db05      	blt.n	800b5d8 <__hi0bits+0x38>
 800b5cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5d0:	f103 0301 	add.w	r3, r3, #1
 800b5d4:	bf08      	it	eq
 800b5d6:	2320      	moveq	r3, #32
 800b5d8:	4618      	mov	r0, r3
 800b5da:	4770      	bx	lr
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e7e4      	b.n	800b5aa <__hi0bits+0xa>

0800b5e0 <__lo0bits>:
 800b5e0:	6803      	ldr	r3, [r0, #0]
 800b5e2:	f013 0207 	ands.w	r2, r3, #7
 800b5e6:	d00c      	beq.n	800b602 <__lo0bits+0x22>
 800b5e8:	07d9      	lsls	r1, r3, #31
 800b5ea:	d422      	bmi.n	800b632 <__lo0bits+0x52>
 800b5ec:	079a      	lsls	r2, r3, #30
 800b5ee:	bf49      	itett	mi
 800b5f0:	085b      	lsrmi	r3, r3, #1
 800b5f2:	089b      	lsrpl	r3, r3, #2
 800b5f4:	6003      	strmi	r3, [r0, #0]
 800b5f6:	2201      	movmi	r2, #1
 800b5f8:	bf5c      	itt	pl
 800b5fa:	6003      	strpl	r3, [r0, #0]
 800b5fc:	2202      	movpl	r2, #2
 800b5fe:	4610      	mov	r0, r2
 800b600:	4770      	bx	lr
 800b602:	b299      	uxth	r1, r3
 800b604:	b909      	cbnz	r1, 800b60a <__lo0bits+0x2a>
 800b606:	0c1b      	lsrs	r3, r3, #16
 800b608:	2210      	movs	r2, #16
 800b60a:	b2d9      	uxtb	r1, r3
 800b60c:	b909      	cbnz	r1, 800b612 <__lo0bits+0x32>
 800b60e:	3208      	adds	r2, #8
 800b610:	0a1b      	lsrs	r3, r3, #8
 800b612:	0719      	lsls	r1, r3, #28
 800b614:	bf04      	itt	eq
 800b616:	091b      	lsreq	r3, r3, #4
 800b618:	3204      	addeq	r2, #4
 800b61a:	0799      	lsls	r1, r3, #30
 800b61c:	bf04      	itt	eq
 800b61e:	089b      	lsreq	r3, r3, #2
 800b620:	3202      	addeq	r2, #2
 800b622:	07d9      	lsls	r1, r3, #31
 800b624:	d403      	bmi.n	800b62e <__lo0bits+0x4e>
 800b626:	085b      	lsrs	r3, r3, #1
 800b628:	f102 0201 	add.w	r2, r2, #1
 800b62c:	d003      	beq.n	800b636 <__lo0bits+0x56>
 800b62e:	6003      	str	r3, [r0, #0]
 800b630:	e7e5      	b.n	800b5fe <__lo0bits+0x1e>
 800b632:	2200      	movs	r2, #0
 800b634:	e7e3      	b.n	800b5fe <__lo0bits+0x1e>
 800b636:	2220      	movs	r2, #32
 800b638:	e7e1      	b.n	800b5fe <__lo0bits+0x1e>
	...

0800b63c <__i2b>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	460c      	mov	r4, r1
 800b640:	2101      	movs	r1, #1
 800b642:	f7ff ff05 	bl	800b450 <_Balloc>
 800b646:	4602      	mov	r2, r0
 800b648:	b928      	cbnz	r0, 800b656 <__i2b+0x1a>
 800b64a:	4b05      	ldr	r3, [pc, #20]	; (800b660 <__i2b+0x24>)
 800b64c:	4805      	ldr	r0, [pc, #20]	; (800b664 <__i2b+0x28>)
 800b64e:	f240 1145 	movw	r1, #325	; 0x145
 800b652:	f000 fca9 	bl	800bfa8 <__assert_func>
 800b656:	2301      	movs	r3, #1
 800b658:	6144      	str	r4, [r0, #20]
 800b65a:	6103      	str	r3, [r0, #16]
 800b65c:	bd10      	pop	{r4, pc}
 800b65e:	bf00      	nop
 800b660:	0800cd84 	.word	0x0800cd84
 800b664:	0800cd95 	.word	0x0800cd95

0800b668 <__multiply>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4691      	mov	r9, r2
 800b66e:	690a      	ldr	r2, [r1, #16]
 800b670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b674:	429a      	cmp	r2, r3
 800b676:	bfb8      	it	lt
 800b678:	460b      	movlt	r3, r1
 800b67a:	460c      	mov	r4, r1
 800b67c:	bfbc      	itt	lt
 800b67e:	464c      	movlt	r4, r9
 800b680:	4699      	movlt	r9, r3
 800b682:	6927      	ldr	r7, [r4, #16]
 800b684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	6861      	ldr	r1, [r4, #4]
 800b68c:	eb07 060a 	add.w	r6, r7, sl
 800b690:	42b3      	cmp	r3, r6
 800b692:	b085      	sub	sp, #20
 800b694:	bfb8      	it	lt
 800b696:	3101      	addlt	r1, #1
 800b698:	f7ff feda 	bl	800b450 <_Balloc>
 800b69c:	b930      	cbnz	r0, 800b6ac <__multiply+0x44>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4b44      	ldr	r3, [pc, #272]	; (800b7b4 <__multiply+0x14c>)
 800b6a2:	4845      	ldr	r0, [pc, #276]	; (800b7b8 <__multiply+0x150>)
 800b6a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b6a8:	f000 fc7e 	bl	800bfa8 <__assert_func>
 800b6ac:	f100 0514 	add.w	r5, r0, #20
 800b6b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6b4:	462b      	mov	r3, r5
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	d321      	bcc.n	800b700 <__multiply+0x98>
 800b6bc:	f104 0314 	add.w	r3, r4, #20
 800b6c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6c4:	f109 0314 	add.w	r3, r9, #20
 800b6c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6cc:	9202      	str	r2, [sp, #8]
 800b6ce:	1b3a      	subs	r2, r7, r4
 800b6d0:	3a15      	subs	r2, #21
 800b6d2:	f022 0203 	bic.w	r2, r2, #3
 800b6d6:	3204      	adds	r2, #4
 800b6d8:	f104 0115 	add.w	r1, r4, #21
 800b6dc:	428f      	cmp	r7, r1
 800b6de:	bf38      	it	cc
 800b6e0:	2204      	movcc	r2, #4
 800b6e2:	9201      	str	r2, [sp, #4]
 800b6e4:	9a02      	ldr	r2, [sp, #8]
 800b6e6:	9303      	str	r3, [sp, #12]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d80c      	bhi.n	800b706 <__multiply+0x9e>
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	dd03      	ble.n	800b6f8 <__multiply+0x90>
 800b6f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d05b      	beq.n	800b7b0 <__multiply+0x148>
 800b6f8:	6106      	str	r6, [r0, #16]
 800b6fa:	b005      	add	sp, #20
 800b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b700:	f843 2b04 	str.w	r2, [r3], #4
 800b704:	e7d8      	b.n	800b6b8 <__multiply+0x50>
 800b706:	f8b3 a000 	ldrh.w	sl, [r3]
 800b70a:	f1ba 0f00 	cmp.w	sl, #0
 800b70e:	d024      	beq.n	800b75a <__multiply+0xf2>
 800b710:	f104 0e14 	add.w	lr, r4, #20
 800b714:	46a9      	mov	r9, r5
 800b716:	f04f 0c00 	mov.w	ip, #0
 800b71a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b71e:	f8d9 1000 	ldr.w	r1, [r9]
 800b722:	fa1f fb82 	uxth.w	fp, r2
 800b726:	b289      	uxth	r1, r1
 800b728:	fb0a 110b 	mla	r1, sl, fp, r1
 800b72c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b730:	f8d9 2000 	ldr.w	r2, [r9]
 800b734:	4461      	add	r1, ip
 800b736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b73a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b73e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b742:	b289      	uxth	r1, r1
 800b744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b748:	4577      	cmp	r7, lr
 800b74a:	f849 1b04 	str.w	r1, [r9], #4
 800b74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b752:	d8e2      	bhi.n	800b71a <__multiply+0xb2>
 800b754:	9a01      	ldr	r2, [sp, #4]
 800b756:	f845 c002 	str.w	ip, [r5, r2]
 800b75a:	9a03      	ldr	r2, [sp, #12]
 800b75c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b760:	3304      	adds	r3, #4
 800b762:	f1b9 0f00 	cmp.w	r9, #0
 800b766:	d021      	beq.n	800b7ac <__multiply+0x144>
 800b768:	6829      	ldr	r1, [r5, #0]
 800b76a:	f104 0c14 	add.w	ip, r4, #20
 800b76e:	46ae      	mov	lr, r5
 800b770:	f04f 0a00 	mov.w	sl, #0
 800b774:	f8bc b000 	ldrh.w	fp, [ip]
 800b778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b77c:	fb09 220b 	mla	r2, r9, fp, r2
 800b780:	4452      	add	r2, sl
 800b782:	b289      	uxth	r1, r1
 800b784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b788:	f84e 1b04 	str.w	r1, [lr], #4
 800b78c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b790:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b794:	f8be 1000 	ldrh.w	r1, [lr]
 800b798:	fb09 110a 	mla	r1, r9, sl, r1
 800b79c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b7a0:	4567      	cmp	r7, ip
 800b7a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b7a6:	d8e5      	bhi.n	800b774 <__multiply+0x10c>
 800b7a8:	9a01      	ldr	r2, [sp, #4]
 800b7aa:	50a9      	str	r1, [r5, r2]
 800b7ac:	3504      	adds	r5, #4
 800b7ae:	e799      	b.n	800b6e4 <__multiply+0x7c>
 800b7b0:	3e01      	subs	r6, #1
 800b7b2:	e79b      	b.n	800b6ec <__multiply+0x84>
 800b7b4:	0800cd84 	.word	0x0800cd84
 800b7b8:	0800cd95 	.word	0x0800cd95

0800b7bc <__pow5mult>:
 800b7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c0:	4615      	mov	r5, r2
 800b7c2:	f012 0203 	ands.w	r2, r2, #3
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	d007      	beq.n	800b7dc <__pow5mult+0x20>
 800b7cc:	4c25      	ldr	r4, [pc, #148]	; (800b864 <__pow5mult+0xa8>)
 800b7ce:	3a01      	subs	r2, #1
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7d6:	f7ff fe9d 	bl	800b514 <__multadd>
 800b7da:	4607      	mov	r7, r0
 800b7dc:	10ad      	asrs	r5, r5, #2
 800b7de:	d03d      	beq.n	800b85c <__pow5mult+0xa0>
 800b7e0:	69f4      	ldr	r4, [r6, #28]
 800b7e2:	b97c      	cbnz	r4, 800b804 <__pow5mult+0x48>
 800b7e4:	2010      	movs	r0, #16
 800b7e6:	f7ff fd7f 	bl	800b2e8 <malloc>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	61f0      	str	r0, [r6, #28]
 800b7ee:	b928      	cbnz	r0, 800b7fc <__pow5mult+0x40>
 800b7f0:	4b1d      	ldr	r3, [pc, #116]	; (800b868 <__pow5mult+0xac>)
 800b7f2:	481e      	ldr	r0, [pc, #120]	; (800b86c <__pow5mult+0xb0>)
 800b7f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7f8:	f000 fbd6 	bl	800bfa8 <__assert_func>
 800b7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b800:	6004      	str	r4, [r0, #0]
 800b802:	60c4      	str	r4, [r0, #12]
 800b804:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b80c:	b94c      	cbnz	r4, 800b822 <__pow5mult+0x66>
 800b80e:	f240 2171 	movw	r1, #625	; 0x271
 800b812:	4630      	mov	r0, r6
 800b814:	f7ff ff12 	bl	800b63c <__i2b>
 800b818:	2300      	movs	r3, #0
 800b81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b81e:	4604      	mov	r4, r0
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	f04f 0900 	mov.w	r9, #0
 800b826:	07eb      	lsls	r3, r5, #31
 800b828:	d50a      	bpl.n	800b840 <__pow5mult+0x84>
 800b82a:	4639      	mov	r1, r7
 800b82c:	4622      	mov	r2, r4
 800b82e:	4630      	mov	r0, r6
 800b830:	f7ff ff1a 	bl	800b668 <__multiply>
 800b834:	4639      	mov	r1, r7
 800b836:	4680      	mov	r8, r0
 800b838:	4630      	mov	r0, r6
 800b83a:	f7ff fe49 	bl	800b4d0 <_Bfree>
 800b83e:	4647      	mov	r7, r8
 800b840:	106d      	asrs	r5, r5, #1
 800b842:	d00b      	beq.n	800b85c <__pow5mult+0xa0>
 800b844:	6820      	ldr	r0, [r4, #0]
 800b846:	b938      	cbnz	r0, 800b858 <__pow5mult+0x9c>
 800b848:	4622      	mov	r2, r4
 800b84a:	4621      	mov	r1, r4
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7ff ff0b 	bl	800b668 <__multiply>
 800b852:	6020      	str	r0, [r4, #0]
 800b854:	f8c0 9000 	str.w	r9, [r0]
 800b858:	4604      	mov	r4, r0
 800b85a:	e7e4      	b.n	800b826 <__pow5mult+0x6a>
 800b85c:	4638      	mov	r0, r7
 800b85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b862:	bf00      	nop
 800b864:	0800cee0 	.word	0x0800cee0
 800b868:	0800cd15 	.word	0x0800cd15
 800b86c:	0800cd95 	.word	0x0800cd95

0800b870 <__lshift>:
 800b870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b874:	460c      	mov	r4, r1
 800b876:	6849      	ldr	r1, [r1, #4]
 800b878:	6923      	ldr	r3, [r4, #16]
 800b87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b87e:	68a3      	ldr	r3, [r4, #8]
 800b880:	4607      	mov	r7, r0
 800b882:	4691      	mov	r9, r2
 800b884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b888:	f108 0601 	add.w	r6, r8, #1
 800b88c:	42b3      	cmp	r3, r6
 800b88e:	db0b      	blt.n	800b8a8 <__lshift+0x38>
 800b890:	4638      	mov	r0, r7
 800b892:	f7ff fddd 	bl	800b450 <_Balloc>
 800b896:	4605      	mov	r5, r0
 800b898:	b948      	cbnz	r0, 800b8ae <__lshift+0x3e>
 800b89a:	4602      	mov	r2, r0
 800b89c:	4b28      	ldr	r3, [pc, #160]	; (800b940 <__lshift+0xd0>)
 800b89e:	4829      	ldr	r0, [pc, #164]	; (800b944 <__lshift+0xd4>)
 800b8a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b8a4:	f000 fb80 	bl	800bfa8 <__assert_func>
 800b8a8:	3101      	adds	r1, #1
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	e7ee      	b.n	800b88c <__lshift+0x1c>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f100 0114 	add.w	r1, r0, #20
 800b8b4:	f100 0210 	add.w	r2, r0, #16
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	4553      	cmp	r3, sl
 800b8bc:	db33      	blt.n	800b926 <__lshift+0xb6>
 800b8be:	6920      	ldr	r0, [r4, #16]
 800b8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8c4:	f104 0314 	add.w	r3, r4, #20
 800b8c8:	f019 091f 	ands.w	r9, r9, #31
 800b8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8d4:	d02b      	beq.n	800b92e <__lshift+0xbe>
 800b8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b8da:	468a      	mov	sl, r1
 800b8dc:	2200      	movs	r2, #0
 800b8de:	6818      	ldr	r0, [r3, #0]
 800b8e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b8e4:	4310      	orrs	r0, r2
 800b8e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ee:	459c      	cmp	ip, r3
 800b8f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8f4:	d8f3      	bhi.n	800b8de <__lshift+0x6e>
 800b8f6:	ebac 0304 	sub.w	r3, ip, r4
 800b8fa:	3b15      	subs	r3, #21
 800b8fc:	f023 0303 	bic.w	r3, r3, #3
 800b900:	3304      	adds	r3, #4
 800b902:	f104 0015 	add.w	r0, r4, #21
 800b906:	4584      	cmp	ip, r0
 800b908:	bf38      	it	cc
 800b90a:	2304      	movcc	r3, #4
 800b90c:	50ca      	str	r2, [r1, r3]
 800b90e:	b10a      	cbz	r2, 800b914 <__lshift+0xa4>
 800b910:	f108 0602 	add.w	r6, r8, #2
 800b914:	3e01      	subs	r6, #1
 800b916:	4638      	mov	r0, r7
 800b918:	612e      	str	r6, [r5, #16]
 800b91a:	4621      	mov	r1, r4
 800b91c:	f7ff fdd8 	bl	800b4d0 <_Bfree>
 800b920:	4628      	mov	r0, r5
 800b922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b926:	f842 0f04 	str.w	r0, [r2, #4]!
 800b92a:	3301      	adds	r3, #1
 800b92c:	e7c5      	b.n	800b8ba <__lshift+0x4a>
 800b92e:	3904      	subs	r1, #4
 800b930:	f853 2b04 	ldr.w	r2, [r3], #4
 800b934:	f841 2f04 	str.w	r2, [r1, #4]!
 800b938:	459c      	cmp	ip, r3
 800b93a:	d8f9      	bhi.n	800b930 <__lshift+0xc0>
 800b93c:	e7ea      	b.n	800b914 <__lshift+0xa4>
 800b93e:	bf00      	nop
 800b940:	0800cd84 	.word	0x0800cd84
 800b944:	0800cd95 	.word	0x0800cd95

0800b948 <__mcmp>:
 800b948:	b530      	push	{r4, r5, lr}
 800b94a:	6902      	ldr	r2, [r0, #16]
 800b94c:	690c      	ldr	r4, [r1, #16]
 800b94e:	1b12      	subs	r2, r2, r4
 800b950:	d10e      	bne.n	800b970 <__mcmp+0x28>
 800b952:	f100 0314 	add.w	r3, r0, #20
 800b956:	3114      	adds	r1, #20
 800b958:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b95c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b960:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b964:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b968:	42a5      	cmp	r5, r4
 800b96a:	d003      	beq.n	800b974 <__mcmp+0x2c>
 800b96c:	d305      	bcc.n	800b97a <__mcmp+0x32>
 800b96e:	2201      	movs	r2, #1
 800b970:	4610      	mov	r0, r2
 800b972:	bd30      	pop	{r4, r5, pc}
 800b974:	4283      	cmp	r3, r0
 800b976:	d3f3      	bcc.n	800b960 <__mcmp+0x18>
 800b978:	e7fa      	b.n	800b970 <__mcmp+0x28>
 800b97a:	f04f 32ff 	mov.w	r2, #4294967295
 800b97e:	e7f7      	b.n	800b970 <__mcmp+0x28>

0800b980 <__mdiff>:
 800b980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	460c      	mov	r4, r1
 800b986:	4606      	mov	r6, r0
 800b988:	4611      	mov	r1, r2
 800b98a:	4620      	mov	r0, r4
 800b98c:	4690      	mov	r8, r2
 800b98e:	f7ff ffdb 	bl	800b948 <__mcmp>
 800b992:	1e05      	subs	r5, r0, #0
 800b994:	d110      	bne.n	800b9b8 <__mdiff+0x38>
 800b996:	4629      	mov	r1, r5
 800b998:	4630      	mov	r0, r6
 800b99a:	f7ff fd59 	bl	800b450 <_Balloc>
 800b99e:	b930      	cbnz	r0, 800b9ae <__mdiff+0x2e>
 800b9a0:	4b3a      	ldr	r3, [pc, #232]	; (800ba8c <__mdiff+0x10c>)
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	f240 2137 	movw	r1, #567	; 0x237
 800b9a8:	4839      	ldr	r0, [pc, #228]	; (800ba90 <__mdiff+0x110>)
 800b9aa:	f000 fafd 	bl	800bfa8 <__assert_func>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b8:	bfa4      	itt	ge
 800b9ba:	4643      	movge	r3, r8
 800b9bc:	46a0      	movge	r8, r4
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b9c4:	bfa6      	itte	ge
 800b9c6:	461c      	movge	r4, r3
 800b9c8:	2500      	movge	r5, #0
 800b9ca:	2501      	movlt	r5, #1
 800b9cc:	f7ff fd40 	bl	800b450 <_Balloc>
 800b9d0:	b920      	cbnz	r0, 800b9dc <__mdiff+0x5c>
 800b9d2:	4b2e      	ldr	r3, [pc, #184]	; (800ba8c <__mdiff+0x10c>)
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	f240 2145 	movw	r1, #581	; 0x245
 800b9da:	e7e5      	b.n	800b9a8 <__mdiff+0x28>
 800b9dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9e0:	6926      	ldr	r6, [r4, #16]
 800b9e2:	60c5      	str	r5, [r0, #12]
 800b9e4:	f104 0914 	add.w	r9, r4, #20
 800b9e8:	f108 0514 	add.w	r5, r8, #20
 800b9ec:	f100 0e14 	add.w	lr, r0, #20
 800b9f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9f8:	f108 0210 	add.w	r2, r8, #16
 800b9fc:	46f2      	mov	sl, lr
 800b9fe:	2100      	movs	r1, #0
 800ba00:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba08:	fa11 f88b 	uxtah	r8, r1, fp
 800ba0c:	b299      	uxth	r1, r3
 800ba0e:	0c1b      	lsrs	r3, r3, #16
 800ba10:	eba8 0801 	sub.w	r8, r8, r1
 800ba14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba1c:	fa1f f888 	uxth.w	r8, r8
 800ba20:	1419      	asrs	r1, r3, #16
 800ba22:	454e      	cmp	r6, r9
 800ba24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba28:	f84a 3b04 	str.w	r3, [sl], #4
 800ba2c:	d8e8      	bhi.n	800ba00 <__mdiff+0x80>
 800ba2e:	1b33      	subs	r3, r6, r4
 800ba30:	3b15      	subs	r3, #21
 800ba32:	f023 0303 	bic.w	r3, r3, #3
 800ba36:	3304      	adds	r3, #4
 800ba38:	3415      	adds	r4, #21
 800ba3a:	42a6      	cmp	r6, r4
 800ba3c:	bf38      	it	cc
 800ba3e:	2304      	movcc	r3, #4
 800ba40:	441d      	add	r5, r3
 800ba42:	4473      	add	r3, lr
 800ba44:	469e      	mov	lr, r3
 800ba46:	462e      	mov	r6, r5
 800ba48:	4566      	cmp	r6, ip
 800ba4a:	d30e      	bcc.n	800ba6a <__mdiff+0xea>
 800ba4c:	f10c 0203 	add.w	r2, ip, #3
 800ba50:	1b52      	subs	r2, r2, r5
 800ba52:	f022 0203 	bic.w	r2, r2, #3
 800ba56:	3d03      	subs	r5, #3
 800ba58:	45ac      	cmp	ip, r5
 800ba5a:	bf38      	it	cc
 800ba5c:	2200      	movcc	r2, #0
 800ba5e:	4413      	add	r3, r2
 800ba60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba64:	b17a      	cbz	r2, 800ba86 <__mdiff+0x106>
 800ba66:	6107      	str	r7, [r0, #16]
 800ba68:	e7a4      	b.n	800b9b4 <__mdiff+0x34>
 800ba6a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba6e:	fa11 f288 	uxtah	r2, r1, r8
 800ba72:	1414      	asrs	r4, r2, #16
 800ba74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba78:	b292      	uxth	r2, r2
 800ba7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba7e:	f84e 2b04 	str.w	r2, [lr], #4
 800ba82:	1421      	asrs	r1, r4, #16
 800ba84:	e7e0      	b.n	800ba48 <__mdiff+0xc8>
 800ba86:	3f01      	subs	r7, #1
 800ba88:	e7ea      	b.n	800ba60 <__mdiff+0xe0>
 800ba8a:	bf00      	nop
 800ba8c:	0800cd84 	.word	0x0800cd84
 800ba90:	0800cd95 	.word	0x0800cd95

0800ba94 <__d2b>:
 800ba94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	460f      	mov	r7, r1
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	ec59 8b10 	vmov	r8, r9, d0
 800baa0:	4616      	mov	r6, r2
 800baa2:	f7ff fcd5 	bl	800b450 <_Balloc>
 800baa6:	4604      	mov	r4, r0
 800baa8:	b930      	cbnz	r0, 800bab8 <__d2b+0x24>
 800baaa:	4602      	mov	r2, r0
 800baac:	4b24      	ldr	r3, [pc, #144]	; (800bb40 <__d2b+0xac>)
 800baae:	4825      	ldr	r0, [pc, #148]	; (800bb44 <__d2b+0xb0>)
 800bab0:	f240 310f 	movw	r1, #783	; 0x30f
 800bab4:	f000 fa78 	bl	800bfa8 <__assert_func>
 800bab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800babc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bac0:	bb2d      	cbnz	r5, 800bb0e <__d2b+0x7a>
 800bac2:	9301      	str	r3, [sp, #4]
 800bac4:	f1b8 0300 	subs.w	r3, r8, #0
 800bac8:	d026      	beq.n	800bb18 <__d2b+0x84>
 800baca:	4668      	mov	r0, sp
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	f7ff fd87 	bl	800b5e0 <__lo0bits>
 800bad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bad6:	b1e8      	cbz	r0, 800bb14 <__d2b+0x80>
 800bad8:	f1c0 0320 	rsb	r3, r0, #32
 800badc:	fa02 f303 	lsl.w	r3, r2, r3
 800bae0:	430b      	orrs	r3, r1
 800bae2:	40c2      	lsrs	r2, r0
 800bae4:	6163      	str	r3, [r4, #20]
 800bae6:	9201      	str	r2, [sp, #4]
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	61a3      	str	r3, [r4, #24]
 800baec:	2b00      	cmp	r3, #0
 800baee:	bf14      	ite	ne
 800baf0:	2202      	movne	r2, #2
 800baf2:	2201      	moveq	r2, #1
 800baf4:	6122      	str	r2, [r4, #16]
 800baf6:	b1bd      	cbz	r5, 800bb28 <__d2b+0x94>
 800baf8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bafc:	4405      	add	r5, r0
 800bafe:	603d      	str	r5, [r7, #0]
 800bb00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb04:	6030      	str	r0, [r6, #0]
 800bb06:	4620      	mov	r0, r4
 800bb08:	b003      	add	sp, #12
 800bb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb12:	e7d6      	b.n	800bac2 <__d2b+0x2e>
 800bb14:	6161      	str	r1, [r4, #20]
 800bb16:	e7e7      	b.n	800bae8 <__d2b+0x54>
 800bb18:	a801      	add	r0, sp, #4
 800bb1a:	f7ff fd61 	bl	800b5e0 <__lo0bits>
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	6163      	str	r3, [r4, #20]
 800bb22:	3020      	adds	r0, #32
 800bb24:	2201      	movs	r2, #1
 800bb26:	e7e5      	b.n	800baf4 <__d2b+0x60>
 800bb28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb30:	6038      	str	r0, [r7, #0]
 800bb32:	6918      	ldr	r0, [r3, #16]
 800bb34:	f7ff fd34 	bl	800b5a0 <__hi0bits>
 800bb38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb3c:	e7e2      	b.n	800bb04 <__d2b+0x70>
 800bb3e:	bf00      	nop
 800bb40:	0800cd84 	.word	0x0800cd84
 800bb44:	0800cd95 	.word	0x0800cd95

0800bb48 <__ssputs_r>:
 800bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb4c:	688e      	ldr	r6, [r1, #8]
 800bb4e:	461f      	mov	r7, r3
 800bb50:	42be      	cmp	r6, r7
 800bb52:	680b      	ldr	r3, [r1, #0]
 800bb54:	4682      	mov	sl, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	4690      	mov	r8, r2
 800bb5a:	d82c      	bhi.n	800bbb6 <__ssputs_r+0x6e>
 800bb5c:	898a      	ldrh	r2, [r1, #12]
 800bb5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb62:	d026      	beq.n	800bbb2 <__ssputs_r+0x6a>
 800bb64:	6965      	ldr	r5, [r4, #20]
 800bb66:	6909      	ldr	r1, [r1, #16]
 800bb68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb6c:	eba3 0901 	sub.w	r9, r3, r1
 800bb70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb74:	1c7b      	adds	r3, r7, #1
 800bb76:	444b      	add	r3, r9
 800bb78:	106d      	asrs	r5, r5, #1
 800bb7a:	429d      	cmp	r5, r3
 800bb7c:	bf38      	it	cc
 800bb7e:	461d      	movcc	r5, r3
 800bb80:	0553      	lsls	r3, r2, #21
 800bb82:	d527      	bpl.n	800bbd4 <__ssputs_r+0x8c>
 800bb84:	4629      	mov	r1, r5
 800bb86:	f7ff fbd7 	bl	800b338 <_malloc_r>
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	b360      	cbz	r0, 800bbe8 <__ssputs_r+0xa0>
 800bb8e:	6921      	ldr	r1, [r4, #16]
 800bb90:	464a      	mov	r2, r9
 800bb92:	f7fe fd5a 	bl	800a64a <memcpy>
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba0:	81a3      	strh	r3, [r4, #12]
 800bba2:	6126      	str	r6, [r4, #16]
 800bba4:	6165      	str	r5, [r4, #20]
 800bba6:	444e      	add	r6, r9
 800bba8:	eba5 0509 	sub.w	r5, r5, r9
 800bbac:	6026      	str	r6, [r4, #0]
 800bbae:	60a5      	str	r5, [r4, #8]
 800bbb0:	463e      	mov	r6, r7
 800bbb2:	42be      	cmp	r6, r7
 800bbb4:	d900      	bls.n	800bbb8 <__ssputs_r+0x70>
 800bbb6:	463e      	mov	r6, r7
 800bbb8:	6820      	ldr	r0, [r4, #0]
 800bbba:	4632      	mov	r2, r6
 800bbbc:	4641      	mov	r1, r8
 800bbbe:	f000 f9c9 	bl	800bf54 <memmove>
 800bbc2:	68a3      	ldr	r3, [r4, #8]
 800bbc4:	1b9b      	subs	r3, r3, r6
 800bbc6:	60a3      	str	r3, [r4, #8]
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	4433      	add	r3, r6
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	2000      	movs	r0, #0
 800bbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd4:	462a      	mov	r2, r5
 800bbd6:	f000 fa2d 	bl	800c034 <_realloc_r>
 800bbda:	4606      	mov	r6, r0
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d1e0      	bne.n	800bba2 <__ssputs_r+0x5a>
 800bbe0:	6921      	ldr	r1, [r4, #16]
 800bbe2:	4650      	mov	r0, sl
 800bbe4:	f7ff fb34 	bl	800b250 <_free_r>
 800bbe8:	230c      	movs	r3, #12
 800bbea:	f8ca 3000 	str.w	r3, [sl]
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfa:	e7e9      	b.n	800bbd0 <__ssputs_r+0x88>

0800bbfc <_svfiprintf_r>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	4698      	mov	r8, r3
 800bc02:	898b      	ldrh	r3, [r1, #12]
 800bc04:	061b      	lsls	r3, r3, #24
 800bc06:	b09d      	sub	sp, #116	; 0x74
 800bc08:	4607      	mov	r7, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	d50e      	bpl.n	800bc2e <_svfiprintf_r+0x32>
 800bc10:	690b      	ldr	r3, [r1, #16]
 800bc12:	b963      	cbnz	r3, 800bc2e <_svfiprintf_r+0x32>
 800bc14:	2140      	movs	r1, #64	; 0x40
 800bc16:	f7ff fb8f 	bl	800b338 <_malloc_r>
 800bc1a:	6028      	str	r0, [r5, #0]
 800bc1c:	6128      	str	r0, [r5, #16]
 800bc1e:	b920      	cbnz	r0, 800bc2a <_svfiprintf_r+0x2e>
 800bc20:	230c      	movs	r3, #12
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	e0d0      	b.n	800bdcc <_svfiprintf_r+0x1d0>
 800bc2a:	2340      	movs	r3, #64	; 0x40
 800bc2c:	616b      	str	r3, [r5, #20]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9309      	str	r3, [sp, #36]	; 0x24
 800bc32:	2320      	movs	r3, #32
 800bc34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc38:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc3c:	2330      	movs	r3, #48	; 0x30
 800bc3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bde4 <_svfiprintf_r+0x1e8>
 800bc42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc46:	f04f 0901 	mov.w	r9, #1
 800bc4a:	4623      	mov	r3, r4
 800bc4c:	469a      	mov	sl, r3
 800bc4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc52:	b10a      	cbz	r2, 800bc58 <_svfiprintf_r+0x5c>
 800bc54:	2a25      	cmp	r2, #37	; 0x25
 800bc56:	d1f9      	bne.n	800bc4c <_svfiprintf_r+0x50>
 800bc58:	ebba 0b04 	subs.w	fp, sl, r4
 800bc5c:	d00b      	beq.n	800bc76 <_svfiprintf_r+0x7a>
 800bc5e:	465b      	mov	r3, fp
 800bc60:	4622      	mov	r2, r4
 800bc62:	4629      	mov	r1, r5
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7ff ff6f 	bl	800bb48 <__ssputs_r>
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	f000 80a9 	beq.w	800bdc2 <_svfiprintf_r+0x1c6>
 800bc70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc72:	445a      	add	r2, fp
 800bc74:	9209      	str	r2, [sp, #36]	; 0x24
 800bc76:	f89a 3000 	ldrb.w	r3, [sl]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 80a1 	beq.w	800bdc2 <_svfiprintf_r+0x1c6>
 800bc80:	2300      	movs	r3, #0
 800bc82:	f04f 32ff 	mov.w	r2, #4294967295
 800bc86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc8a:	f10a 0a01 	add.w	sl, sl, #1
 800bc8e:	9304      	str	r3, [sp, #16]
 800bc90:	9307      	str	r3, [sp, #28]
 800bc92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc96:	931a      	str	r3, [sp, #104]	; 0x68
 800bc98:	4654      	mov	r4, sl
 800bc9a:	2205      	movs	r2, #5
 800bc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca0:	4850      	ldr	r0, [pc, #320]	; (800bde4 <_svfiprintf_r+0x1e8>)
 800bca2:	f7f4 facd 	bl	8000240 <memchr>
 800bca6:	9a04      	ldr	r2, [sp, #16]
 800bca8:	b9d8      	cbnz	r0, 800bce2 <_svfiprintf_r+0xe6>
 800bcaa:	06d0      	lsls	r0, r2, #27
 800bcac:	bf44      	itt	mi
 800bcae:	2320      	movmi	r3, #32
 800bcb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcb4:	0711      	lsls	r1, r2, #28
 800bcb6:	bf44      	itt	mi
 800bcb8:	232b      	movmi	r3, #43	; 0x2b
 800bcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcbe:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcc4:	d015      	beq.n	800bcf2 <_svfiprintf_r+0xf6>
 800bcc6:	9a07      	ldr	r2, [sp, #28]
 800bcc8:	4654      	mov	r4, sl
 800bcca:	2000      	movs	r0, #0
 800bccc:	f04f 0c0a 	mov.w	ip, #10
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcd6:	3b30      	subs	r3, #48	; 0x30
 800bcd8:	2b09      	cmp	r3, #9
 800bcda:	d94d      	bls.n	800bd78 <_svfiprintf_r+0x17c>
 800bcdc:	b1b0      	cbz	r0, 800bd0c <_svfiprintf_r+0x110>
 800bcde:	9207      	str	r2, [sp, #28]
 800bce0:	e014      	b.n	800bd0c <_svfiprintf_r+0x110>
 800bce2:	eba0 0308 	sub.w	r3, r0, r8
 800bce6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcea:	4313      	orrs	r3, r2
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	46a2      	mov	sl, r4
 800bcf0:	e7d2      	b.n	800bc98 <_svfiprintf_r+0x9c>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	1d19      	adds	r1, r3, #4
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	9103      	str	r1, [sp, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	bfbb      	ittet	lt
 800bcfe:	425b      	neglt	r3, r3
 800bd00:	f042 0202 	orrlt.w	r2, r2, #2
 800bd04:	9307      	strge	r3, [sp, #28]
 800bd06:	9307      	strlt	r3, [sp, #28]
 800bd08:	bfb8      	it	lt
 800bd0a:	9204      	strlt	r2, [sp, #16]
 800bd0c:	7823      	ldrb	r3, [r4, #0]
 800bd0e:	2b2e      	cmp	r3, #46	; 0x2e
 800bd10:	d10c      	bne.n	800bd2c <_svfiprintf_r+0x130>
 800bd12:	7863      	ldrb	r3, [r4, #1]
 800bd14:	2b2a      	cmp	r3, #42	; 0x2a
 800bd16:	d134      	bne.n	800bd82 <_svfiprintf_r+0x186>
 800bd18:	9b03      	ldr	r3, [sp, #12]
 800bd1a:	1d1a      	adds	r2, r3, #4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	9203      	str	r2, [sp, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bfb8      	it	lt
 800bd24:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd28:	3402      	adds	r4, #2
 800bd2a:	9305      	str	r3, [sp, #20]
 800bd2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bdf4 <_svfiprintf_r+0x1f8>
 800bd30:	7821      	ldrb	r1, [r4, #0]
 800bd32:	2203      	movs	r2, #3
 800bd34:	4650      	mov	r0, sl
 800bd36:	f7f4 fa83 	bl	8000240 <memchr>
 800bd3a:	b138      	cbz	r0, 800bd4c <_svfiprintf_r+0x150>
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	eba0 000a 	sub.w	r0, r0, sl
 800bd42:	2240      	movs	r2, #64	; 0x40
 800bd44:	4082      	lsls	r2, r0
 800bd46:	4313      	orrs	r3, r2
 800bd48:	3401      	adds	r4, #1
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd50:	4825      	ldr	r0, [pc, #148]	; (800bde8 <_svfiprintf_r+0x1ec>)
 800bd52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd56:	2206      	movs	r2, #6
 800bd58:	f7f4 fa72 	bl	8000240 <memchr>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d038      	beq.n	800bdd2 <_svfiprintf_r+0x1d6>
 800bd60:	4b22      	ldr	r3, [pc, #136]	; (800bdec <_svfiprintf_r+0x1f0>)
 800bd62:	bb1b      	cbnz	r3, 800bdac <_svfiprintf_r+0x1b0>
 800bd64:	9b03      	ldr	r3, [sp, #12]
 800bd66:	3307      	adds	r3, #7
 800bd68:	f023 0307 	bic.w	r3, r3, #7
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd72:	4433      	add	r3, r6
 800bd74:	9309      	str	r3, [sp, #36]	; 0x24
 800bd76:	e768      	b.n	800bc4a <_svfiprintf_r+0x4e>
 800bd78:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	2001      	movs	r0, #1
 800bd80:	e7a6      	b.n	800bcd0 <_svfiprintf_r+0xd4>
 800bd82:	2300      	movs	r3, #0
 800bd84:	3401      	adds	r4, #1
 800bd86:	9305      	str	r3, [sp, #20]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	f04f 0c0a 	mov.w	ip, #10
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd94:	3a30      	subs	r2, #48	; 0x30
 800bd96:	2a09      	cmp	r2, #9
 800bd98:	d903      	bls.n	800bda2 <_svfiprintf_r+0x1a6>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0c6      	beq.n	800bd2c <_svfiprintf_r+0x130>
 800bd9e:	9105      	str	r1, [sp, #20]
 800bda0:	e7c4      	b.n	800bd2c <_svfiprintf_r+0x130>
 800bda2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bda6:	4604      	mov	r4, r0
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e7f0      	b.n	800bd8e <_svfiprintf_r+0x192>
 800bdac:	ab03      	add	r3, sp, #12
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	462a      	mov	r2, r5
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <_svfiprintf_r+0x1f4>)
 800bdb4:	a904      	add	r1, sp, #16
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f7fd fea2 	bl	8009b00 <_printf_float>
 800bdbc:	1c42      	adds	r2, r0, #1
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	d1d6      	bne.n	800bd70 <_svfiprintf_r+0x174>
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	065b      	lsls	r3, r3, #25
 800bdc6:	f53f af2d 	bmi.w	800bc24 <_svfiprintf_r+0x28>
 800bdca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdcc:	b01d      	add	sp, #116	; 0x74
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd2:	ab03      	add	r3, sp, #12
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	462a      	mov	r2, r5
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <_svfiprintf_r+0x1f4>)
 800bdda:	a904      	add	r1, sp, #16
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7fe f917 	bl	800a010 <_printf_i>
 800bde2:	e7eb      	b.n	800bdbc <_svfiprintf_r+0x1c0>
 800bde4:	0800ceec 	.word	0x0800ceec
 800bde8:	0800cef6 	.word	0x0800cef6
 800bdec:	08009b01 	.word	0x08009b01
 800bdf0:	0800bb49 	.word	0x0800bb49
 800bdf4:	0800cef2 	.word	0x0800cef2

0800bdf8 <__sflush_r>:
 800bdf8:	898a      	ldrh	r2, [r1, #12]
 800bdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfe:	4605      	mov	r5, r0
 800be00:	0710      	lsls	r0, r2, #28
 800be02:	460c      	mov	r4, r1
 800be04:	d458      	bmi.n	800beb8 <__sflush_r+0xc0>
 800be06:	684b      	ldr	r3, [r1, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	dc05      	bgt.n	800be18 <__sflush_r+0x20>
 800be0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dc02      	bgt.n	800be18 <__sflush_r+0x20>
 800be12:	2000      	movs	r0, #0
 800be14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be1a:	2e00      	cmp	r6, #0
 800be1c:	d0f9      	beq.n	800be12 <__sflush_r+0x1a>
 800be1e:	2300      	movs	r3, #0
 800be20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be24:	682f      	ldr	r7, [r5, #0]
 800be26:	6a21      	ldr	r1, [r4, #32]
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	d032      	beq.n	800be92 <__sflush_r+0x9a>
 800be2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	075a      	lsls	r2, r3, #29
 800be32:	d505      	bpl.n	800be40 <__sflush_r+0x48>
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	1ac0      	subs	r0, r0, r3
 800be38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be3a:	b10b      	cbz	r3, 800be40 <__sflush_r+0x48>
 800be3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be3e:	1ac0      	subs	r0, r0, r3
 800be40:	2300      	movs	r3, #0
 800be42:	4602      	mov	r2, r0
 800be44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be46:	6a21      	ldr	r1, [r4, #32]
 800be48:	4628      	mov	r0, r5
 800be4a:	47b0      	blx	r6
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	d106      	bne.n	800be60 <__sflush_r+0x68>
 800be52:	6829      	ldr	r1, [r5, #0]
 800be54:	291d      	cmp	r1, #29
 800be56:	d82b      	bhi.n	800beb0 <__sflush_r+0xb8>
 800be58:	4a29      	ldr	r2, [pc, #164]	; (800bf00 <__sflush_r+0x108>)
 800be5a:	410a      	asrs	r2, r1
 800be5c:	07d6      	lsls	r6, r2, #31
 800be5e:	d427      	bmi.n	800beb0 <__sflush_r+0xb8>
 800be60:	2200      	movs	r2, #0
 800be62:	6062      	str	r2, [r4, #4]
 800be64:	04d9      	lsls	r1, r3, #19
 800be66:	6922      	ldr	r2, [r4, #16]
 800be68:	6022      	str	r2, [r4, #0]
 800be6a:	d504      	bpl.n	800be76 <__sflush_r+0x7e>
 800be6c:	1c42      	adds	r2, r0, #1
 800be6e:	d101      	bne.n	800be74 <__sflush_r+0x7c>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	b903      	cbnz	r3, 800be76 <__sflush_r+0x7e>
 800be74:	6560      	str	r0, [r4, #84]	; 0x54
 800be76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be78:	602f      	str	r7, [r5, #0]
 800be7a:	2900      	cmp	r1, #0
 800be7c:	d0c9      	beq.n	800be12 <__sflush_r+0x1a>
 800be7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be82:	4299      	cmp	r1, r3
 800be84:	d002      	beq.n	800be8c <__sflush_r+0x94>
 800be86:	4628      	mov	r0, r5
 800be88:	f7ff f9e2 	bl	800b250 <_free_r>
 800be8c:	2000      	movs	r0, #0
 800be8e:	6360      	str	r0, [r4, #52]	; 0x34
 800be90:	e7c0      	b.n	800be14 <__sflush_r+0x1c>
 800be92:	2301      	movs	r3, #1
 800be94:	4628      	mov	r0, r5
 800be96:	47b0      	blx	r6
 800be98:	1c41      	adds	r1, r0, #1
 800be9a:	d1c8      	bne.n	800be2e <__sflush_r+0x36>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d0c5      	beq.n	800be2e <__sflush_r+0x36>
 800bea2:	2b1d      	cmp	r3, #29
 800bea4:	d001      	beq.n	800beaa <__sflush_r+0xb2>
 800bea6:	2b16      	cmp	r3, #22
 800bea8:	d101      	bne.n	800beae <__sflush_r+0xb6>
 800beaa:	602f      	str	r7, [r5, #0]
 800beac:	e7b1      	b.n	800be12 <__sflush_r+0x1a>
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	e7ad      	b.n	800be14 <__sflush_r+0x1c>
 800beb8:	690f      	ldr	r7, [r1, #16]
 800beba:	2f00      	cmp	r7, #0
 800bebc:	d0a9      	beq.n	800be12 <__sflush_r+0x1a>
 800bebe:	0793      	lsls	r3, r2, #30
 800bec0:	680e      	ldr	r6, [r1, #0]
 800bec2:	bf08      	it	eq
 800bec4:	694b      	ldreq	r3, [r1, #20]
 800bec6:	600f      	str	r7, [r1, #0]
 800bec8:	bf18      	it	ne
 800beca:	2300      	movne	r3, #0
 800becc:	eba6 0807 	sub.w	r8, r6, r7
 800bed0:	608b      	str	r3, [r1, #8]
 800bed2:	f1b8 0f00 	cmp.w	r8, #0
 800bed6:	dd9c      	ble.n	800be12 <__sflush_r+0x1a>
 800bed8:	6a21      	ldr	r1, [r4, #32]
 800beda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bedc:	4643      	mov	r3, r8
 800bede:	463a      	mov	r2, r7
 800bee0:	4628      	mov	r0, r5
 800bee2:	47b0      	blx	r6
 800bee4:	2800      	cmp	r0, #0
 800bee6:	dc06      	bgt.n	800bef6 <__sflush_r+0xfe>
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beee:	81a3      	strh	r3, [r4, #12]
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	e78e      	b.n	800be14 <__sflush_r+0x1c>
 800bef6:	4407      	add	r7, r0
 800bef8:	eba8 0800 	sub.w	r8, r8, r0
 800befc:	e7e9      	b.n	800bed2 <__sflush_r+0xda>
 800befe:	bf00      	nop
 800bf00:	dfbffffe 	.word	0xdfbffffe

0800bf04 <_fflush_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	690b      	ldr	r3, [r1, #16]
 800bf08:	4605      	mov	r5, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	b913      	cbnz	r3, 800bf14 <_fflush_r+0x10>
 800bf0e:	2500      	movs	r5, #0
 800bf10:	4628      	mov	r0, r5
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	b118      	cbz	r0, 800bf1e <_fflush_r+0x1a>
 800bf16:	6a03      	ldr	r3, [r0, #32]
 800bf18:	b90b      	cbnz	r3, 800bf1e <_fflush_r+0x1a>
 800bf1a:	f7fe fa27 	bl	800a36c <__sinit>
 800bf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0f3      	beq.n	800bf0e <_fflush_r+0xa>
 800bf26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf28:	07d0      	lsls	r0, r2, #31
 800bf2a:	d404      	bmi.n	800bf36 <_fflush_r+0x32>
 800bf2c:	0599      	lsls	r1, r3, #22
 800bf2e:	d402      	bmi.n	800bf36 <_fflush_r+0x32>
 800bf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf32:	f7fe fb88 	bl	800a646 <__retarget_lock_acquire_recursive>
 800bf36:	4628      	mov	r0, r5
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f7ff ff5d 	bl	800bdf8 <__sflush_r>
 800bf3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf40:	07da      	lsls	r2, r3, #31
 800bf42:	4605      	mov	r5, r0
 800bf44:	d4e4      	bmi.n	800bf10 <_fflush_r+0xc>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	059b      	lsls	r3, r3, #22
 800bf4a:	d4e1      	bmi.n	800bf10 <_fflush_r+0xc>
 800bf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf4e:	f7fe fb7b 	bl	800a648 <__retarget_lock_release_recursive>
 800bf52:	e7dd      	b.n	800bf10 <_fflush_r+0xc>

0800bf54 <memmove>:
 800bf54:	4288      	cmp	r0, r1
 800bf56:	b510      	push	{r4, lr}
 800bf58:	eb01 0402 	add.w	r4, r1, r2
 800bf5c:	d902      	bls.n	800bf64 <memmove+0x10>
 800bf5e:	4284      	cmp	r4, r0
 800bf60:	4623      	mov	r3, r4
 800bf62:	d807      	bhi.n	800bf74 <memmove+0x20>
 800bf64:	1e43      	subs	r3, r0, #1
 800bf66:	42a1      	cmp	r1, r4
 800bf68:	d008      	beq.n	800bf7c <memmove+0x28>
 800bf6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf72:	e7f8      	b.n	800bf66 <memmove+0x12>
 800bf74:	4402      	add	r2, r0
 800bf76:	4601      	mov	r1, r0
 800bf78:	428a      	cmp	r2, r1
 800bf7a:	d100      	bne.n	800bf7e <memmove+0x2a>
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf86:	e7f7      	b.n	800bf78 <memmove+0x24>

0800bf88 <_sbrk_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4d06      	ldr	r5, [pc, #24]	; (800bfa4 <_sbrk_r+0x1c>)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	602b      	str	r3, [r5, #0]
 800bf94:	f7f6 f970 	bl	8002278 <_sbrk>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_sbrk_r+0x1a>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_sbrk_r+0x1a>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	20005510 	.word	0x20005510

0800bfa8 <__assert_func>:
 800bfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfaa:	4614      	mov	r4, r2
 800bfac:	461a      	mov	r2, r3
 800bfae:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <__assert_func+0x2c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	68d8      	ldr	r0, [r3, #12]
 800bfb6:	b14c      	cbz	r4, 800bfcc <__assert_func+0x24>
 800bfb8:	4b07      	ldr	r3, [pc, #28]	; (800bfd8 <__assert_func+0x30>)
 800bfba:	9100      	str	r1, [sp, #0]
 800bfbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfc0:	4906      	ldr	r1, [pc, #24]	; (800bfdc <__assert_func+0x34>)
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	f000 f872 	bl	800c0ac <fiprintf>
 800bfc8:	f000 f882 	bl	800c0d0 <abort>
 800bfcc:	4b04      	ldr	r3, [pc, #16]	; (800bfe0 <__assert_func+0x38>)
 800bfce:	461c      	mov	r4, r3
 800bfd0:	e7f3      	b.n	800bfba <__assert_func+0x12>
 800bfd2:	bf00      	nop
 800bfd4:	20000074 	.word	0x20000074
 800bfd8:	0800cf07 	.word	0x0800cf07
 800bfdc:	0800cf14 	.word	0x0800cf14
 800bfe0:	0800cf42 	.word	0x0800cf42

0800bfe4 <_calloc_r>:
 800bfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfe6:	fba1 2402 	umull	r2, r4, r1, r2
 800bfea:	b94c      	cbnz	r4, 800c000 <_calloc_r+0x1c>
 800bfec:	4611      	mov	r1, r2
 800bfee:	9201      	str	r2, [sp, #4]
 800bff0:	f7ff f9a2 	bl	800b338 <_malloc_r>
 800bff4:	9a01      	ldr	r2, [sp, #4]
 800bff6:	4605      	mov	r5, r0
 800bff8:	b930      	cbnz	r0, 800c008 <_calloc_r+0x24>
 800bffa:	4628      	mov	r0, r5
 800bffc:	b003      	add	sp, #12
 800bffe:	bd30      	pop	{r4, r5, pc}
 800c000:	220c      	movs	r2, #12
 800c002:	6002      	str	r2, [r0, #0]
 800c004:	2500      	movs	r5, #0
 800c006:	e7f8      	b.n	800bffa <_calloc_r+0x16>
 800c008:	4621      	mov	r1, r4
 800c00a:	f7fe fa48 	bl	800a49e <memset>
 800c00e:	e7f4      	b.n	800bffa <_calloc_r+0x16>

0800c010 <__ascii_mbtowc>:
 800c010:	b082      	sub	sp, #8
 800c012:	b901      	cbnz	r1, 800c016 <__ascii_mbtowc+0x6>
 800c014:	a901      	add	r1, sp, #4
 800c016:	b142      	cbz	r2, 800c02a <__ascii_mbtowc+0x1a>
 800c018:	b14b      	cbz	r3, 800c02e <__ascii_mbtowc+0x1e>
 800c01a:	7813      	ldrb	r3, [r2, #0]
 800c01c:	600b      	str	r3, [r1, #0]
 800c01e:	7812      	ldrb	r2, [r2, #0]
 800c020:	1e10      	subs	r0, r2, #0
 800c022:	bf18      	it	ne
 800c024:	2001      	movne	r0, #1
 800c026:	b002      	add	sp, #8
 800c028:	4770      	bx	lr
 800c02a:	4610      	mov	r0, r2
 800c02c:	e7fb      	b.n	800c026 <__ascii_mbtowc+0x16>
 800c02e:	f06f 0001 	mvn.w	r0, #1
 800c032:	e7f8      	b.n	800c026 <__ascii_mbtowc+0x16>

0800c034 <_realloc_r>:
 800c034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c038:	4680      	mov	r8, r0
 800c03a:	4614      	mov	r4, r2
 800c03c:	460e      	mov	r6, r1
 800c03e:	b921      	cbnz	r1, 800c04a <_realloc_r+0x16>
 800c040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c044:	4611      	mov	r1, r2
 800c046:	f7ff b977 	b.w	800b338 <_malloc_r>
 800c04a:	b92a      	cbnz	r2, 800c058 <_realloc_r+0x24>
 800c04c:	f7ff f900 	bl	800b250 <_free_r>
 800c050:	4625      	mov	r5, r4
 800c052:	4628      	mov	r0, r5
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	f000 f841 	bl	800c0de <_malloc_usable_size_r>
 800c05c:	4284      	cmp	r4, r0
 800c05e:	4607      	mov	r7, r0
 800c060:	d802      	bhi.n	800c068 <_realloc_r+0x34>
 800c062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c066:	d812      	bhi.n	800c08e <_realloc_r+0x5a>
 800c068:	4621      	mov	r1, r4
 800c06a:	4640      	mov	r0, r8
 800c06c:	f7ff f964 	bl	800b338 <_malloc_r>
 800c070:	4605      	mov	r5, r0
 800c072:	2800      	cmp	r0, #0
 800c074:	d0ed      	beq.n	800c052 <_realloc_r+0x1e>
 800c076:	42bc      	cmp	r4, r7
 800c078:	4622      	mov	r2, r4
 800c07a:	4631      	mov	r1, r6
 800c07c:	bf28      	it	cs
 800c07e:	463a      	movcs	r2, r7
 800c080:	f7fe fae3 	bl	800a64a <memcpy>
 800c084:	4631      	mov	r1, r6
 800c086:	4640      	mov	r0, r8
 800c088:	f7ff f8e2 	bl	800b250 <_free_r>
 800c08c:	e7e1      	b.n	800c052 <_realloc_r+0x1e>
 800c08e:	4635      	mov	r5, r6
 800c090:	e7df      	b.n	800c052 <_realloc_r+0x1e>

0800c092 <__ascii_wctomb>:
 800c092:	b149      	cbz	r1, 800c0a8 <__ascii_wctomb+0x16>
 800c094:	2aff      	cmp	r2, #255	; 0xff
 800c096:	bf85      	ittet	hi
 800c098:	238a      	movhi	r3, #138	; 0x8a
 800c09a:	6003      	strhi	r3, [r0, #0]
 800c09c:	700a      	strbls	r2, [r1, #0]
 800c09e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0a2:	bf98      	it	ls
 800c0a4:	2001      	movls	r0, #1
 800c0a6:	4770      	bx	lr
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	4770      	bx	lr

0800c0ac <fiprintf>:
 800c0ac:	b40e      	push	{r1, r2, r3}
 800c0ae:	b503      	push	{r0, r1, lr}
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	ab03      	add	r3, sp, #12
 800c0b4:	4805      	ldr	r0, [pc, #20]	; (800c0cc <fiprintf+0x20>)
 800c0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ba:	6800      	ldr	r0, [r0, #0]
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f000 f83f 	bl	800c140 <_vfiprintf_r>
 800c0c2:	b002      	add	sp, #8
 800c0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c8:	b003      	add	sp, #12
 800c0ca:	4770      	bx	lr
 800c0cc:	20000074 	.word	0x20000074

0800c0d0 <abort>:
 800c0d0:	b508      	push	{r3, lr}
 800c0d2:	2006      	movs	r0, #6
 800c0d4:	f000 fa0c 	bl	800c4f0 <raise>
 800c0d8:	2001      	movs	r0, #1
 800c0da:	f7f6 f855 	bl	8002188 <_exit>

0800c0de <_malloc_usable_size_r>:
 800c0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e2:	1f18      	subs	r0, r3, #4
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bfbc      	itt	lt
 800c0e8:	580b      	ldrlt	r3, [r1, r0]
 800c0ea:	18c0      	addlt	r0, r0, r3
 800c0ec:	4770      	bx	lr

0800c0ee <__sfputc_r>:
 800c0ee:	6893      	ldr	r3, [r2, #8]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	b410      	push	{r4}
 800c0f6:	6093      	str	r3, [r2, #8]
 800c0f8:	da08      	bge.n	800c10c <__sfputc_r+0x1e>
 800c0fa:	6994      	ldr	r4, [r2, #24]
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	db01      	blt.n	800c104 <__sfputc_r+0x16>
 800c100:	290a      	cmp	r1, #10
 800c102:	d103      	bne.n	800c10c <__sfputc_r+0x1e>
 800c104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c108:	f000 b934 	b.w	800c374 <__swbuf_r>
 800c10c:	6813      	ldr	r3, [r2, #0]
 800c10e:	1c58      	adds	r0, r3, #1
 800c110:	6010      	str	r0, [r2, #0]
 800c112:	7019      	strb	r1, [r3, #0]
 800c114:	4608      	mov	r0, r1
 800c116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <__sfputs_r>:
 800c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11e:	4606      	mov	r6, r0
 800c120:	460f      	mov	r7, r1
 800c122:	4614      	mov	r4, r2
 800c124:	18d5      	adds	r5, r2, r3
 800c126:	42ac      	cmp	r4, r5
 800c128:	d101      	bne.n	800c12e <__sfputs_r+0x12>
 800c12a:	2000      	movs	r0, #0
 800c12c:	e007      	b.n	800c13e <__sfputs_r+0x22>
 800c12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c132:	463a      	mov	r2, r7
 800c134:	4630      	mov	r0, r6
 800c136:	f7ff ffda 	bl	800c0ee <__sfputc_r>
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	d1f3      	bne.n	800c126 <__sfputs_r+0xa>
 800c13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c140 <_vfiprintf_r>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	460d      	mov	r5, r1
 800c146:	b09d      	sub	sp, #116	; 0x74
 800c148:	4614      	mov	r4, r2
 800c14a:	4698      	mov	r8, r3
 800c14c:	4606      	mov	r6, r0
 800c14e:	b118      	cbz	r0, 800c158 <_vfiprintf_r+0x18>
 800c150:	6a03      	ldr	r3, [r0, #32]
 800c152:	b90b      	cbnz	r3, 800c158 <_vfiprintf_r+0x18>
 800c154:	f7fe f90a 	bl	800a36c <__sinit>
 800c158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c15a:	07d9      	lsls	r1, r3, #31
 800c15c:	d405      	bmi.n	800c16a <_vfiprintf_r+0x2a>
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	059a      	lsls	r2, r3, #22
 800c162:	d402      	bmi.n	800c16a <_vfiprintf_r+0x2a>
 800c164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c166:	f7fe fa6e 	bl	800a646 <__retarget_lock_acquire_recursive>
 800c16a:	89ab      	ldrh	r3, [r5, #12]
 800c16c:	071b      	lsls	r3, r3, #28
 800c16e:	d501      	bpl.n	800c174 <_vfiprintf_r+0x34>
 800c170:	692b      	ldr	r3, [r5, #16]
 800c172:	b99b      	cbnz	r3, 800c19c <_vfiprintf_r+0x5c>
 800c174:	4629      	mov	r1, r5
 800c176:	4630      	mov	r0, r6
 800c178:	f000 f93a 	bl	800c3f0 <__swsetup_r>
 800c17c:	b170      	cbz	r0, 800c19c <_vfiprintf_r+0x5c>
 800c17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c180:	07dc      	lsls	r4, r3, #31
 800c182:	d504      	bpl.n	800c18e <_vfiprintf_r+0x4e>
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	b01d      	add	sp, #116	; 0x74
 800c18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18e:	89ab      	ldrh	r3, [r5, #12]
 800c190:	0598      	lsls	r0, r3, #22
 800c192:	d4f7      	bmi.n	800c184 <_vfiprintf_r+0x44>
 800c194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c196:	f7fe fa57 	bl	800a648 <__retarget_lock_release_recursive>
 800c19a:	e7f3      	b.n	800c184 <_vfiprintf_r+0x44>
 800c19c:	2300      	movs	r3, #0
 800c19e:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a0:	2320      	movs	r3, #32
 800c1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1aa:	2330      	movs	r3, #48	; 0x30
 800c1ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c360 <_vfiprintf_r+0x220>
 800c1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1b4:	f04f 0901 	mov.w	r9, #1
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	469a      	mov	sl, r3
 800c1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c0:	b10a      	cbz	r2, 800c1c6 <_vfiprintf_r+0x86>
 800c1c2:	2a25      	cmp	r2, #37	; 0x25
 800c1c4:	d1f9      	bne.n	800c1ba <_vfiprintf_r+0x7a>
 800c1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ca:	d00b      	beq.n	800c1e4 <_vfiprintf_r+0xa4>
 800c1cc:	465b      	mov	r3, fp
 800c1ce:	4622      	mov	r2, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff ffa2 	bl	800c11c <__sfputs_r>
 800c1d8:	3001      	adds	r0, #1
 800c1da:	f000 80a9 	beq.w	800c330 <_vfiprintf_r+0x1f0>
 800c1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1e0:	445a      	add	r2, fp
 800c1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 80a1 	beq.w	800c330 <_vfiprintf_r+0x1f0>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f8:	f10a 0a01 	add.w	sl, sl, #1
 800c1fc:	9304      	str	r3, [sp, #16]
 800c1fe:	9307      	str	r3, [sp, #28]
 800c200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c204:	931a      	str	r3, [sp, #104]	; 0x68
 800c206:	4654      	mov	r4, sl
 800c208:	2205      	movs	r2, #5
 800c20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c20e:	4854      	ldr	r0, [pc, #336]	; (800c360 <_vfiprintf_r+0x220>)
 800c210:	f7f4 f816 	bl	8000240 <memchr>
 800c214:	9a04      	ldr	r2, [sp, #16]
 800c216:	b9d8      	cbnz	r0, 800c250 <_vfiprintf_r+0x110>
 800c218:	06d1      	lsls	r1, r2, #27
 800c21a:	bf44      	itt	mi
 800c21c:	2320      	movmi	r3, #32
 800c21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c222:	0713      	lsls	r3, r2, #28
 800c224:	bf44      	itt	mi
 800c226:	232b      	movmi	r3, #43	; 0x2b
 800c228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c22c:	f89a 3000 	ldrb.w	r3, [sl]
 800c230:	2b2a      	cmp	r3, #42	; 0x2a
 800c232:	d015      	beq.n	800c260 <_vfiprintf_r+0x120>
 800c234:	9a07      	ldr	r2, [sp, #28]
 800c236:	4654      	mov	r4, sl
 800c238:	2000      	movs	r0, #0
 800c23a:	f04f 0c0a 	mov.w	ip, #10
 800c23e:	4621      	mov	r1, r4
 800c240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c244:	3b30      	subs	r3, #48	; 0x30
 800c246:	2b09      	cmp	r3, #9
 800c248:	d94d      	bls.n	800c2e6 <_vfiprintf_r+0x1a6>
 800c24a:	b1b0      	cbz	r0, 800c27a <_vfiprintf_r+0x13a>
 800c24c:	9207      	str	r2, [sp, #28]
 800c24e:	e014      	b.n	800c27a <_vfiprintf_r+0x13a>
 800c250:	eba0 0308 	sub.w	r3, r0, r8
 800c254:	fa09 f303 	lsl.w	r3, r9, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	46a2      	mov	sl, r4
 800c25e:	e7d2      	b.n	800c206 <_vfiprintf_r+0xc6>
 800c260:	9b03      	ldr	r3, [sp, #12]
 800c262:	1d19      	adds	r1, r3, #4
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	9103      	str	r1, [sp, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bfbb      	ittet	lt
 800c26c:	425b      	neglt	r3, r3
 800c26e:	f042 0202 	orrlt.w	r2, r2, #2
 800c272:	9307      	strge	r3, [sp, #28]
 800c274:	9307      	strlt	r3, [sp, #28]
 800c276:	bfb8      	it	lt
 800c278:	9204      	strlt	r2, [sp, #16]
 800c27a:	7823      	ldrb	r3, [r4, #0]
 800c27c:	2b2e      	cmp	r3, #46	; 0x2e
 800c27e:	d10c      	bne.n	800c29a <_vfiprintf_r+0x15a>
 800c280:	7863      	ldrb	r3, [r4, #1]
 800c282:	2b2a      	cmp	r3, #42	; 0x2a
 800c284:	d134      	bne.n	800c2f0 <_vfiprintf_r+0x1b0>
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	1d1a      	adds	r2, r3, #4
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	9203      	str	r2, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bfb8      	it	lt
 800c292:	f04f 33ff 	movlt.w	r3, #4294967295
 800c296:	3402      	adds	r4, #2
 800c298:	9305      	str	r3, [sp, #20]
 800c29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c370 <_vfiprintf_r+0x230>
 800c29e:	7821      	ldrb	r1, [r4, #0]
 800c2a0:	2203      	movs	r2, #3
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f7f3 ffcc 	bl	8000240 <memchr>
 800c2a8:	b138      	cbz	r0, 800c2ba <_vfiprintf_r+0x17a>
 800c2aa:	9b04      	ldr	r3, [sp, #16]
 800c2ac:	eba0 000a 	sub.w	r0, r0, sl
 800c2b0:	2240      	movs	r2, #64	; 0x40
 800c2b2:	4082      	lsls	r2, r0
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	3401      	adds	r4, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2be:	4829      	ldr	r0, [pc, #164]	; (800c364 <_vfiprintf_r+0x224>)
 800c2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c4:	2206      	movs	r2, #6
 800c2c6:	f7f3 ffbb 	bl	8000240 <memchr>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d03f      	beq.n	800c34e <_vfiprintf_r+0x20e>
 800c2ce:	4b26      	ldr	r3, [pc, #152]	; (800c368 <_vfiprintf_r+0x228>)
 800c2d0:	bb1b      	cbnz	r3, 800c31a <_vfiprintf_r+0x1da>
 800c2d2:	9b03      	ldr	r3, [sp, #12]
 800c2d4:	3307      	adds	r3, #7
 800c2d6:	f023 0307 	bic.w	r3, r3, #7
 800c2da:	3308      	adds	r3, #8
 800c2dc:	9303      	str	r3, [sp, #12]
 800c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e0:	443b      	add	r3, r7
 800c2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e4:	e768      	b.n	800c1b8 <_vfiprintf_r+0x78>
 800c2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	e7a6      	b.n	800c23e <_vfiprintf_r+0xfe>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	3401      	adds	r4, #1
 800c2f4:	9305      	str	r3, [sp, #20]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	f04f 0c0a 	mov.w	ip, #10
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c302:	3a30      	subs	r2, #48	; 0x30
 800c304:	2a09      	cmp	r2, #9
 800c306:	d903      	bls.n	800c310 <_vfiprintf_r+0x1d0>
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d0c6      	beq.n	800c29a <_vfiprintf_r+0x15a>
 800c30c:	9105      	str	r1, [sp, #20]
 800c30e:	e7c4      	b.n	800c29a <_vfiprintf_r+0x15a>
 800c310:	fb0c 2101 	mla	r1, ip, r1, r2
 800c314:	4604      	mov	r4, r0
 800c316:	2301      	movs	r3, #1
 800c318:	e7f0      	b.n	800c2fc <_vfiprintf_r+0x1bc>
 800c31a:	ab03      	add	r3, sp, #12
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	462a      	mov	r2, r5
 800c320:	4b12      	ldr	r3, [pc, #72]	; (800c36c <_vfiprintf_r+0x22c>)
 800c322:	a904      	add	r1, sp, #16
 800c324:	4630      	mov	r0, r6
 800c326:	f7fd fbeb 	bl	8009b00 <_printf_float>
 800c32a:	4607      	mov	r7, r0
 800c32c:	1c78      	adds	r0, r7, #1
 800c32e:	d1d6      	bne.n	800c2de <_vfiprintf_r+0x19e>
 800c330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c332:	07d9      	lsls	r1, r3, #31
 800c334:	d405      	bmi.n	800c342 <_vfiprintf_r+0x202>
 800c336:	89ab      	ldrh	r3, [r5, #12]
 800c338:	059a      	lsls	r2, r3, #22
 800c33a:	d402      	bmi.n	800c342 <_vfiprintf_r+0x202>
 800c33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c33e:	f7fe f983 	bl	800a648 <__retarget_lock_release_recursive>
 800c342:	89ab      	ldrh	r3, [r5, #12]
 800c344:	065b      	lsls	r3, r3, #25
 800c346:	f53f af1d 	bmi.w	800c184 <_vfiprintf_r+0x44>
 800c34a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c34c:	e71c      	b.n	800c188 <_vfiprintf_r+0x48>
 800c34e:	ab03      	add	r3, sp, #12
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	462a      	mov	r2, r5
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <_vfiprintf_r+0x22c>)
 800c356:	a904      	add	r1, sp, #16
 800c358:	4630      	mov	r0, r6
 800c35a:	f7fd fe59 	bl	800a010 <_printf_i>
 800c35e:	e7e4      	b.n	800c32a <_vfiprintf_r+0x1ea>
 800c360:	0800ceec 	.word	0x0800ceec
 800c364:	0800cef6 	.word	0x0800cef6
 800c368:	08009b01 	.word	0x08009b01
 800c36c:	0800c11d 	.word	0x0800c11d
 800c370:	0800cef2 	.word	0x0800cef2

0800c374 <__swbuf_r>:
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c376:	460e      	mov	r6, r1
 800c378:	4614      	mov	r4, r2
 800c37a:	4605      	mov	r5, r0
 800c37c:	b118      	cbz	r0, 800c386 <__swbuf_r+0x12>
 800c37e:	6a03      	ldr	r3, [r0, #32]
 800c380:	b90b      	cbnz	r3, 800c386 <__swbuf_r+0x12>
 800c382:	f7fd fff3 	bl	800a36c <__sinit>
 800c386:	69a3      	ldr	r3, [r4, #24]
 800c388:	60a3      	str	r3, [r4, #8]
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	071a      	lsls	r2, r3, #28
 800c38e:	d525      	bpl.n	800c3dc <__swbuf_r+0x68>
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	b31b      	cbz	r3, 800c3dc <__swbuf_r+0x68>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	6922      	ldr	r2, [r4, #16]
 800c398:	1a98      	subs	r0, r3, r2
 800c39a:	6963      	ldr	r3, [r4, #20]
 800c39c:	b2f6      	uxtb	r6, r6
 800c39e:	4283      	cmp	r3, r0
 800c3a0:	4637      	mov	r7, r6
 800c3a2:	dc04      	bgt.n	800c3ae <__swbuf_r+0x3a>
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f7ff fdac 	bl	800bf04 <_fflush_r>
 800c3ac:	b9e0      	cbnz	r0, 800c3e8 <__swbuf_r+0x74>
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	60a3      	str	r3, [r4, #8]
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	6022      	str	r2, [r4, #0]
 800c3ba:	701e      	strb	r6, [r3, #0]
 800c3bc:	6962      	ldr	r2, [r4, #20]
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d004      	beq.n	800c3ce <__swbuf_r+0x5a>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	07db      	lsls	r3, r3, #31
 800c3c8:	d506      	bpl.n	800c3d8 <__swbuf_r+0x64>
 800c3ca:	2e0a      	cmp	r6, #10
 800c3cc:	d104      	bne.n	800c3d8 <__swbuf_r+0x64>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f7ff fd97 	bl	800bf04 <_fflush_r>
 800c3d6:	b938      	cbnz	r0, 800c3e8 <__swbuf_r+0x74>
 800c3d8:	4638      	mov	r0, r7
 800c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3dc:	4621      	mov	r1, r4
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f000 f806 	bl	800c3f0 <__swsetup_r>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d0d5      	beq.n	800c394 <__swbuf_r+0x20>
 800c3e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c3ec:	e7f4      	b.n	800c3d8 <__swbuf_r+0x64>
	...

0800c3f0 <__swsetup_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4b2a      	ldr	r3, [pc, #168]	; (800c49c <__swsetup_r+0xac>)
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	b118      	cbz	r0, 800c404 <__swsetup_r+0x14>
 800c3fc:	6a03      	ldr	r3, [r0, #32]
 800c3fe:	b90b      	cbnz	r3, 800c404 <__swsetup_r+0x14>
 800c400:	f7fd ffb4 	bl	800a36c <__sinit>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c40a:	0718      	lsls	r0, r3, #28
 800c40c:	d422      	bmi.n	800c454 <__swsetup_r+0x64>
 800c40e:	06d9      	lsls	r1, r3, #27
 800c410:	d407      	bmi.n	800c422 <__swsetup_r+0x32>
 800c412:	2309      	movs	r3, #9
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295
 800c420:	e034      	b.n	800c48c <__swsetup_r+0x9c>
 800c422:	0758      	lsls	r0, r3, #29
 800c424:	d512      	bpl.n	800c44c <__swsetup_r+0x5c>
 800c426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c428:	b141      	cbz	r1, 800c43c <__swsetup_r+0x4c>
 800c42a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c42e:	4299      	cmp	r1, r3
 800c430:	d002      	beq.n	800c438 <__swsetup_r+0x48>
 800c432:	4628      	mov	r0, r5
 800c434:	f7fe ff0c 	bl	800b250 <_free_r>
 800c438:	2300      	movs	r3, #0
 800c43a:	6363      	str	r3, [r4, #52]	; 0x34
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c442:	81a3      	strh	r3, [r4, #12]
 800c444:	2300      	movs	r3, #0
 800c446:	6063      	str	r3, [r4, #4]
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f043 0308 	orr.w	r3, r3, #8
 800c452:	81a3      	strh	r3, [r4, #12]
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	b94b      	cbnz	r3, 800c46c <__swsetup_r+0x7c>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c45e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c462:	d003      	beq.n	800c46c <__swsetup_r+0x7c>
 800c464:	4621      	mov	r1, r4
 800c466:	4628      	mov	r0, r5
 800c468:	f000 f884 	bl	800c574 <__smakebuf_r>
 800c46c:	89a0      	ldrh	r0, [r4, #12]
 800c46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c472:	f010 0301 	ands.w	r3, r0, #1
 800c476:	d00a      	beq.n	800c48e <__swsetup_r+0x9e>
 800c478:	2300      	movs	r3, #0
 800c47a:	60a3      	str	r3, [r4, #8]
 800c47c:	6963      	ldr	r3, [r4, #20]
 800c47e:	425b      	negs	r3, r3
 800c480:	61a3      	str	r3, [r4, #24]
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	b943      	cbnz	r3, 800c498 <__swsetup_r+0xa8>
 800c486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c48a:	d1c4      	bne.n	800c416 <__swsetup_r+0x26>
 800c48c:	bd38      	pop	{r3, r4, r5, pc}
 800c48e:	0781      	lsls	r1, r0, #30
 800c490:	bf58      	it	pl
 800c492:	6963      	ldrpl	r3, [r4, #20]
 800c494:	60a3      	str	r3, [r4, #8]
 800c496:	e7f4      	b.n	800c482 <__swsetup_r+0x92>
 800c498:	2000      	movs	r0, #0
 800c49a:	e7f7      	b.n	800c48c <__swsetup_r+0x9c>
 800c49c:	20000074 	.word	0x20000074

0800c4a0 <_raise_r>:
 800c4a0:	291f      	cmp	r1, #31
 800c4a2:	b538      	push	{r3, r4, r5, lr}
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	d904      	bls.n	800c4b4 <_raise_r+0x14>
 800c4aa:	2316      	movs	r3, #22
 800c4ac:	6003      	str	r3, [r0, #0]
 800c4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c4b6:	b112      	cbz	r2, 800c4be <_raise_r+0x1e>
 800c4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4bc:	b94b      	cbnz	r3, 800c4d2 <_raise_r+0x32>
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 f830 	bl	800c524 <_getpid_r>
 800c4c4:	462a      	mov	r2, r5
 800c4c6:	4601      	mov	r1, r0
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ce:	f000 b817 	b.w	800c500 <_kill_r>
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d00a      	beq.n	800c4ec <_raise_r+0x4c>
 800c4d6:	1c59      	adds	r1, r3, #1
 800c4d8:	d103      	bne.n	800c4e2 <_raise_r+0x42>
 800c4da:	2316      	movs	r3, #22
 800c4dc:	6003      	str	r3, [r0, #0]
 800c4de:	2001      	movs	r0, #1
 800c4e0:	e7e7      	b.n	800c4b2 <_raise_r+0x12>
 800c4e2:	2400      	movs	r4, #0
 800c4e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	4798      	blx	r3
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	e7e0      	b.n	800c4b2 <_raise_r+0x12>

0800c4f0 <raise>:
 800c4f0:	4b02      	ldr	r3, [pc, #8]	; (800c4fc <raise+0xc>)
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	f7ff bfd3 	b.w	800c4a0 <_raise_r>
 800c4fa:	bf00      	nop
 800c4fc:	20000074 	.word	0x20000074

0800c500 <_kill_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d07      	ldr	r5, [pc, #28]	; (800c520 <_kill_r+0x20>)
 800c504:	2300      	movs	r3, #0
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	4611      	mov	r1, r2
 800c50c:	602b      	str	r3, [r5, #0]
 800c50e:	f7f5 fe2b 	bl	8002168 <_kill>
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	d102      	bne.n	800c51c <_kill_r+0x1c>
 800c516:	682b      	ldr	r3, [r5, #0]
 800c518:	b103      	cbz	r3, 800c51c <_kill_r+0x1c>
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	bd38      	pop	{r3, r4, r5, pc}
 800c51e:	bf00      	nop
 800c520:	20005510 	.word	0x20005510

0800c524 <_getpid_r>:
 800c524:	f7f5 be18 	b.w	8002158 <_getpid>

0800c528 <__swhatbuf_r>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	460c      	mov	r4, r1
 800c52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c530:	2900      	cmp	r1, #0
 800c532:	b096      	sub	sp, #88	; 0x58
 800c534:	4615      	mov	r5, r2
 800c536:	461e      	mov	r6, r3
 800c538:	da0d      	bge.n	800c556 <__swhatbuf_r+0x2e>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c540:	f04f 0100 	mov.w	r1, #0
 800c544:	bf0c      	ite	eq
 800c546:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c54a:	2340      	movne	r3, #64	; 0x40
 800c54c:	2000      	movs	r0, #0
 800c54e:	6031      	str	r1, [r6, #0]
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	b016      	add	sp, #88	; 0x58
 800c554:	bd70      	pop	{r4, r5, r6, pc}
 800c556:	466a      	mov	r2, sp
 800c558:	f000 f848 	bl	800c5ec <_fstat_r>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	dbec      	blt.n	800c53a <__swhatbuf_r+0x12>
 800c560:	9901      	ldr	r1, [sp, #4]
 800c562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c56a:	4259      	negs	r1, r3
 800c56c:	4159      	adcs	r1, r3
 800c56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c572:	e7eb      	b.n	800c54c <__swhatbuf_r+0x24>

0800c574 <__smakebuf_r>:
 800c574:	898b      	ldrh	r3, [r1, #12]
 800c576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c578:	079d      	lsls	r5, r3, #30
 800c57a:	4606      	mov	r6, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	d507      	bpl.n	800c590 <__smakebuf_r+0x1c>
 800c580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	6123      	str	r3, [r4, #16]
 800c588:	2301      	movs	r3, #1
 800c58a:	6163      	str	r3, [r4, #20]
 800c58c:	b002      	add	sp, #8
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	ab01      	add	r3, sp, #4
 800c592:	466a      	mov	r2, sp
 800c594:	f7ff ffc8 	bl	800c528 <__swhatbuf_r>
 800c598:	9900      	ldr	r1, [sp, #0]
 800c59a:	4605      	mov	r5, r0
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7fe fecb 	bl	800b338 <_malloc_r>
 800c5a2:	b948      	cbnz	r0, 800c5b8 <__smakebuf_r+0x44>
 800c5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a8:	059a      	lsls	r2, r3, #22
 800c5aa:	d4ef      	bmi.n	800c58c <__smakebuf_r+0x18>
 800c5ac:	f023 0303 	bic.w	r3, r3, #3
 800c5b0:	f043 0302 	orr.w	r3, r3, #2
 800c5b4:	81a3      	strh	r3, [r4, #12]
 800c5b6:	e7e3      	b.n	800c580 <__smakebuf_r+0xc>
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	6020      	str	r0, [r4, #0]
 800c5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5c0:	81a3      	strh	r3, [r4, #12]
 800c5c2:	9b00      	ldr	r3, [sp, #0]
 800c5c4:	6163      	str	r3, [r4, #20]
 800c5c6:	9b01      	ldr	r3, [sp, #4]
 800c5c8:	6120      	str	r0, [r4, #16]
 800c5ca:	b15b      	cbz	r3, 800c5e4 <__smakebuf_r+0x70>
 800c5cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f000 f81d 	bl	800c610 <_isatty_r>
 800c5d6:	b128      	cbz	r0, 800c5e4 <__smakebuf_r+0x70>
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	f023 0303 	bic.w	r3, r3, #3
 800c5de:	f043 0301 	orr.w	r3, r3, #1
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	431d      	orrs	r5, r3
 800c5e8:	81a5      	strh	r5, [r4, #12]
 800c5ea:	e7cf      	b.n	800c58c <__smakebuf_r+0x18>

0800c5ec <_fstat_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d07      	ldr	r5, [pc, #28]	; (800c60c <_fstat_r+0x20>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	f7f5 fe14 	bl	8002226 <_fstat>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d102      	bne.n	800c608 <_fstat_r+0x1c>
 800c602:	682b      	ldr	r3, [r5, #0]
 800c604:	b103      	cbz	r3, 800c608 <_fstat_r+0x1c>
 800c606:	6023      	str	r3, [r4, #0]
 800c608:	bd38      	pop	{r3, r4, r5, pc}
 800c60a:	bf00      	nop
 800c60c:	20005510 	.word	0x20005510

0800c610 <_isatty_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4d06      	ldr	r5, [pc, #24]	; (800c62c <_isatty_r+0x1c>)
 800c614:	2300      	movs	r3, #0
 800c616:	4604      	mov	r4, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	602b      	str	r3, [r5, #0]
 800c61c:	f7f5 fe13 	bl	8002246 <_isatty>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_isatty_r+0x1a>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	b103      	cbz	r3, 800c62a <_isatty_r+0x1a>
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	20005510 	.word	0x20005510

0800c630 <checkint>:
 800c630:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c634:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800c638:	429a      	cmp	r2, r3
 800c63a:	b570      	push	{r4, r5, r6, lr}
 800c63c:	dd2a      	ble.n	800c694 <checkint+0x64>
 800c63e:	f240 4333 	movw	r3, #1075	; 0x433
 800c642:	429a      	cmp	r2, r3
 800c644:	dc24      	bgt.n	800c690 <checkint+0x60>
 800c646:	1a9b      	subs	r3, r3, r2
 800c648:	f1a3 0620 	sub.w	r6, r3, #32
 800c64c:	f04f 32ff 	mov.w	r2, #4294967295
 800c650:	fa02 f403 	lsl.w	r4, r2, r3
 800c654:	fa02 f606 	lsl.w	r6, r2, r6
 800c658:	f1c3 0520 	rsb	r5, r3, #32
 800c65c:	fa22 f505 	lsr.w	r5, r2, r5
 800c660:	4334      	orrs	r4, r6
 800c662:	432c      	orrs	r4, r5
 800c664:	409a      	lsls	r2, r3
 800c666:	ea20 0202 	bic.w	r2, r0, r2
 800c66a:	ea21 0404 	bic.w	r4, r1, r4
 800c66e:	4322      	orrs	r2, r4
 800c670:	f1a3 0420 	sub.w	r4, r3, #32
 800c674:	f1c3 0220 	rsb	r2, r3, #32
 800c678:	d10c      	bne.n	800c694 <checkint+0x64>
 800c67a:	40d8      	lsrs	r0, r3
 800c67c:	fa01 f302 	lsl.w	r3, r1, r2
 800c680:	4318      	orrs	r0, r3
 800c682:	40e1      	lsrs	r1, r4
 800c684:	4308      	orrs	r0, r1
 800c686:	f000 0001 	and.w	r0, r0, #1
 800c68a:	f1d0 0002 	rsbs	r0, r0, #2
 800c68e:	bd70      	pop	{r4, r5, r6, pc}
 800c690:	2002      	movs	r0, #2
 800c692:	e7fc      	b.n	800c68e <checkint+0x5e>
 800c694:	2000      	movs	r0, #0
 800c696:	e7fa      	b.n	800c68e <checkint+0x5e>

0800c698 <pow>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	ee10 4a90 	vmov	r4, s1
 800c6a0:	ed2d 8b0a 	vpush	{d8-d12}
 800c6a4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800c6a8:	ee11 aa90 	vmov	sl, s3
 800c6ac:	f108 32ff 	add.w	r2, r8, #4294967295
 800c6b0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	ee10 5a10 	vmov	r5, s0
 800c6ba:	ee11 0a10 	vmov	r0, s2
 800c6be:	b087      	sub	sp, #28
 800c6c0:	46c4      	mov	ip, r8
 800c6c2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800c6c6:	d806      	bhi.n	800c6d6 <pow+0x3e>
 800c6c8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800c6cc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800c6d0:	2b7f      	cmp	r3, #127	; 0x7f
 800c6d2:	f240 8156 	bls.w	800c982 <pow+0x2ea>
 800c6d6:	1802      	adds	r2, r0, r0
 800c6d8:	eb4a 010a 	adc.w	r1, sl, sl
 800c6dc:	f06f 0b01 	mvn.w	fp, #1
 800c6e0:	1e57      	subs	r7, r2, #1
 800c6e2:	f141 33ff 	adc.w	r3, r1, #4294967295
 800c6e6:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800c6ea:	45bb      	cmp	fp, r7
 800c6ec:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c6f0:	d242      	bcs.n	800c778 <pow+0xe0>
 800c6f2:	ea52 0301 	orrs.w	r3, r2, r1
 800c6f6:	f04f 0300 	mov.w	r3, #0
 800c6fa:	d10c      	bne.n	800c716 <pow+0x7e>
 800c6fc:	196d      	adds	r5, r5, r5
 800c6fe:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800c702:	4164      	adcs	r4, r4
 800c704:	42ab      	cmp	r3, r5
 800c706:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c70a:	41a3      	sbcs	r3, r4
 800c70c:	f0c0 808f 	bcc.w	800c82e <pow+0x196>
 800c710:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c714:	e02b      	b.n	800c76e <pow+0xd6>
 800c716:	4ed4      	ldr	r6, [pc, #848]	; (800ca68 <pow+0x3d0>)
 800c718:	42b4      	cmp	r4, r6
 800c71a:	bf08      	it	eq
 800c71c:	429d      	cmpeq	r5, r3
 800c71e:	d109      	bne.n	800c734 <pow+0x9c>
 800c720:	1800      	adds	r0, r0, r0
 800c722:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800c726:	eb4a 0a0a 	adc.w	sl, sl, sl
 800c72a:	4283      	cmp	r3, r0
 800c72c:	4bcf      	ldr	r3, [pc, #828]	; (800ca6c <pow+0x3d4>)
 800c72e:	eb73 030a 	sbcs.w	r3, r3, sl
 800c732:	e7eb      	b.n	800c70c <pow+0x74>
 800c734:	196d      	adds	r5, r5, r5
 800c736:	48ce      	ldr	r0, [pc, #824]	; (800ca70 <pow+0x3d8>)
 800c738:	4164      	adcs	r4, r4
 800c73a:	42ab      	cmp	r3, r5
 800c73c:	eb70 0604 	sbcs.w	r6, r0, r4
 800c740:	d375      	bcc.n	800c82e <pow+0x196>
 800c742:	4281      	cmp	r1, r0
 800c744:	bf08      	it	eq
 800c746:	429a      	cmpeq	r2, r3
 800c748:	d171      	bne.n	800c82e <pow+0x196>
 800c74a:	4aca      	ldr	r2, [pc, #808]	; (800ca74 <pow+0x3dc>)
 800c74c:	4294      	cmp	r4, r2
 800c74e:	bf08      	it	eq
 800c750:	429d      	cmpeq	r5, r3
 800c752:	d0dd      	beq.n	800c710 <pow+0x78>
 800c754:	4294      	cmp	r4, r2
 800c756:	ea6f 0a0a 	mvn.w	sl, sl
 800c75a:	bf34      	ite	cc
 800c75c:	2400      	movcc	r4, #0
 800c75e:	2401      	movcs	r4, #1
 800c760:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800c764:	4554      	cmp	r4, sl
 800c766:	f040 81dc 	bne.w	800cb22 <pow+0x48a>
 800c76a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800c76e:	b007      	add	sp, #28
 800c770:	ecbd 8b0a 	vpop	{d8-d12}
 800c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c778:	196f      	adds	r7, r5, r5
 800c77a:	eb44 0904 	adc.w	r9, r4, r4
 800c77e:	1e7a      	subs	r2, r7, #1
 800c780:	f169 0300 	sbc.w	r3, r9, #0
 800c784:	4593      	cmp	fp, r2
 800c786:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c78a:	d225      	bcs.n	800c7d8 <pow+0x140>
 800c78c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800c790:	2c00      	cmp	r4, #0
 800c792:	da13      	bge.n	800c7bc <pow+0x124>
 800c794:	4651      	mov	r1, sl
 800c796:	f7ff ff4b 	bl	800c630 <checkint>
 800c79a:	2801      	cmp	r0, #1
 800c79c:	d10e      	bne.n	800c7bc <pow+0x124>
 800c79e:	eeb1 0b40 	vneg.f64	d0, d0
 800c7a2:	ea57 0909 	orrs.w	r9, r7, r9
 800c7a6:	d10b      	bne.n	800c7c0 <pow+0x128>
 800c7a8:	f1ba 0f00 	cmp.w	sl, #0
 800c7ac:	dadf      	bge.n	800c76e <pow+0xd6>
 800c7ae:	b007      	add	sp, #28
 800c7b0:	ecbd 8b0a 	vpop	{d8-d12}
 800c7b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	f000 b9ea 	b.w	800cb90 <__math_divzero>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e7f0      	b.n	800c7a2 <pow+0x10a>
 800c7c0:	f1ba 0f00 	cmp.w	sl, #0
 800c7c4:	dad3      	bge.n	800c76e <pow+0xd6>
 800c7c6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c7ca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c7ce:	ed8d 7b00 	vstr	d7, [sp]
 800c7d2:	ed9d 0b00 	vldr	d0, [sp]
 800c7d6:	e7ca      	b.n	800c76e <pow+0xd6>
 800c7d8:	2c00      	cmp	r4, #0
 800c7da:	da2b      	bge.n	800c834 <pow+0x19c>
 800c7dc:	4651      	mov	r1, sl
 800c7de:	f7ff ff27 	bl	800c630 <checkint>
 800c7e2:	b930      	cbnz	r0, 800c7f2 <pow+0x15a>
 800c7e4:	b007      	add	sp, #28
 800c7e6:	ecbd 8b0a 	vpop	{d8-d12}
 800c7ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ee:	f000 b9e7 	b.w	800cbc0 <__math_invalid>
 800c7f2:	1e41      	subs	r1, r0, #1
 800c7f4:	4248      	negs	r0, r1
 800c7f6:	4148      	adcs	r0, r1
 800c7f8:	0480      	lsls	r0, r0, #18
 800c7fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c7fe:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800c802:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800c806:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800c80a:	2b7f      	cmp	r3, #127	; 0x7f
 800c80c:	d92d      	bls.n	800c86a <pow+0x1d2>
 800c80e:	4b96      	ldr	r3, [pc, #600]	; (800ca68 <pow+0x3d0>)
 800c810:	2000      	movs	r0, #0
 800c812:	429c      	cmp	r4, r3
 800c814:	bf08      	it	eq
 800c816:	4285      	cmpeq	r5, r0
 800c818:	f43f af7a 	beq.w	800c710 <pow+0x78>
 800c81c:	f240 31bd 	movw	r1, #957	; 0x3bd
 800c820:	428a      	cmp	r2, r1
 800c822:	d80c      	bhi.n	800c83e <pow+0x1a6>
 800c824:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c828:	42a8      	cmp	r0, r5
 800c82a:	41a3      	sbcs	r3, r4
 800c82c:	d204      	bcs.n	800c838 <pow+0x1a0>
 800c82e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800c832:	e79c      	b.n	800c76e <pow+0xd6>
 800c834:	2000      	movs	r0, #0
 800c836:	e7e4      	b.n	800c802 <pow+0x16a>
 800c838:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c83c:	e797      	b.n	800c76e <pow+0xd6>
 800c83e:	2d01      	cmp	r5, #1
 800c840:	eb74 0303 	sbcs.w	r3, r4, r3
 800c844:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c848:	bf34      	ite	cc
 800c84a:	2301      	movcc	r3, #1
 800c84c:	2300      	movcs	r3, #0
 800c84e:	4296      	cmp	r6, r2
 800c850:	bf8c      	ite	hi
 800c852:	2600      	movhi	r6, #0
 800c854:	2601      	movls	r6, #1
 800c856:	42b3      	cmp	r3, r6
 800c858:	f000 809b 	beq.w	800c992 <pow+0x2fa>
 800c85c:	b007      	add	sp, #28
 800c85e:	ecbd 8b0a 	vpop	{d8-d12}
 800c862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c866:	f000 b98b 	b.w	800cb80 <__math_oflow>
 800c86a:	f1bc 0f00 	cmp.w	ip, #0
 800c86e:	d10b      	bne.n	800c888 <pow+0x1f0>
 800c870:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800ca58 <pow+0x3c0>
 800c874:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c878:	ec53 2b17 	vmov	r2, r3, d7
 800c87c:	ee17 5a10 	vmov	r5, s14
 800c880:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c884:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800c888:	4b7b      	ldr	r3, [pc, #492]	; (800ca78 <pow+0x3e0>)
 800c88a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c88e:	4423      	add	r3, r4
 800c890:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800c894:	1519      	asrs	r1, r3, #20
 800c896:	0d1b      	lsrs	r3, r3, #20
 800c898:	051b      	lsls	r3, r3, #20
 800c89a:	1ae7      	subs	r7, r4, r3
 800c89c:	4b77      	ldr	r3, [pc, #476]	; (800ca7c <pow+0x3e4>)
 800c89e:	ee03 1a10 	vmov	s6, r1
 800c8a2:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800c8a6:	1e2e      	subs	r6, r5, #0
 800c8a8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800c8ac:	ec47 6b15 	vmov	d5, r6, r7
 800c8b0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800c8b4:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c8b8:	ed93 7b00 	vldr	d7, [r3]
 800c8bc:	ed93 5b02 	vldr	d5, [r3, #8]
 800c8c0:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800c8c4:	eea3 2b07 	vfma.f64	d2, d3, d7
 800c8c8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800c8cc:	ee36 4b02 	vadd.f64	d4, d6, d2
 800c8d0:	ee32 2b44 	vsub.f64	d2, d2, d4
 800c8d4:	eea3 7b05 	vfma.f64	d7, d3, d5
 800c8d8:	ed93 5b04 	vldr	d5, [r3, #16]
 800c8dc:	ee32 2b06 	vadd.f64	d2, d2, d6
 800c8e0:	ee37 7b02 	vadd.f64	d7, d7, d2
 800c8e4:	ee26 5b05 	vmul.f64	d5, d6, d5
 800c8e8:	ee26 0b05 	vmul.f64	d0, d6, d5
 800c8ec:	ee34 8b00 	vadd.f64	d8, d4, d0
 800c8f0:	eeb0 9b40 	vmov.f64	d9, d0
 800c8f4:	ee34 4b48 	vsub.f64	d4, d4, d8
 800c8f8:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800c8fc:	ee34 ab00 	vadd.f64	d10, d4, d0
 800c900:	ed93 5b06 	vldr	d5, [r3, #24]
 800c904:	ee26 bb00 	vmul.f64	d11, d6, d0
 800c908:	ee37 7b09 	vadd.f64	d7, d7, d9
 800c90c:	ed93 4b08 	vldr	d4, [r3, #32]
 800c910:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800c914:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800c918:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c91c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800c920:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800c924:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c928:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800c92c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800c930:	eea0 4b03 	vfma.f64	d4, d0, d3
 800c934:	eea0 5b04 	vfma.f64	d5, d0, d4
 800c938:	eeab 7b05 	vfma.f64	d7, d11, d5
 800c93c:	ee38 4b07 	vadd.f64	d4, d8, d7
 800c940:	ee21 6b04 	vmul.f64	d6, d1, d4
 800c944:	ee16 3a90 	vmov	r3, s13
 800c948:	eeb0 5b46 	vmov.f64	d5, d6
 800c94c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800c950:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800c954:	18b2      	adds	r2, r6, r2
 800c956:	2a3e      	cmp	r2, #62	; 0x3e
 800c958:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800c95c:	ee38 8b44 	vsub.f64	d8, d8, d4
 800c960:	ee38 8b07 	vadd.f64	d8, d8, d7
 800c964:	eea1 5b08 	vfma.f64	d5, d1, d8
 800c968:	d91b      	bls.n	800c9a2 <pow+0x30a>
 800c96a:	2a00      	cmp	r2, #0
 800c96c:	da0b      	bge.n	800c986 <pow+0x2ee>
 800c96e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c972:	ee36 0b00 	vadd.f64	d0, d6, d0
 800c976:	2800      	cmp	r0, #0
 800c978:	f43f aef9 	beq.w	800c76e <pow+0xd6>
 800c97c:	eeb1 0b40 	vneg.f64	d0, d0
 800c980:	e6f5      	b.n	800c76e <pow+0xd6>
 800c982:	2000      	movs	r0, #0
 800c984:	e780      	b.n	800c888 <pow+0x1f0>
 800c986:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800c98a:	d909      	bls.n	800c9a0 <pow+0x308>
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f6bf af65 	bge.w	800c85c <pow+0x1c4>
 800c992:	b007      	add	sp, #28
 800c994:	ecbd 8b0a 	vpop	{d8-d12}
 800c998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	f000 b8e8 	b.w	800cb70 <__math_uflow>
 800c9a0:	2600      	movs	r6, #0
 800c9a2:	4937      	ldr	r1, [pc, #220]	; (800ca80 <pow+0x3e8>)
 800c9a4:	ed91 4b02 	vldr	d4, [r1, #8]
 800c9a8:	ed91 3b00 	vldr	d3, [r1]
 800c9ac:	eeb0 7b44 	vmov.f64	d7, d4
 800c9b0:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c9b4:	ee17 5a10 	vmov	r5, s14
 800c9b8:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c9bc:	ed91 4b04 	vldr	d4, [r1, #16]
 800c9c0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800c9c4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c9c8:	ed91 4b06 	vldr	d4, [r1, #24]
 800c9cc:	18dc      	adds	r4, r3, r3
 800c9ce:	f104 030f 	add.w	r3, r4, #15
 800c9d2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800c9d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c9da:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800c9de:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c9e2:	ee25 6b05 	vmul.f64	d6, d5, d5
 800c9e6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800c9ea:	ed91 4b08 	vldr	d4, [r1, #32]
 800c9ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c9f2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800c9f6:	eea5 4b03 	vfma.f64	d4, d5, d3
 800c9fa:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800c9fe:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ca02:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ca06:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800ca0a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ca0e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ca12:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ca16:	1940      	adds	r0, r0, r5
 800ca18:	2700      	movs	r7, #0
 800ca1a:	eb17 020c 	adds.w	r2, r7, ip
 800ca1e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800ca22:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ca26:	2e00      	cmp	r6, #0
 800ca28:	d176      	bne.n	800cb18 <pow+0x480>
 800ca2a:	42bd      	cmp	r5, r7
 800ca2c:	db2a      	blt.n	800ca84 <pow+0x3ec>
 800ca2e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800ca32:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800ca36:	4610      	mov	r0, r2
 800ca38:	ec41 0b10 	vmov	d0, r0, r1
 800ca3c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ca40:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800ca60 <pow+0x3c8>
 800ca44:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ca48:	b007      	add	sp, #28
 800ca4a:	ecbd 8b0a 	vpop	{d8-d12}
 800ca4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca52:	f000 b8cd 	b.w	800cbf0 <__math_check_oflow>
 800ca56:	bf00      	nop
 800ca58:	00000000 	.word	0x00000000
 800ca5c:	43300000 	.word	0x43300000
 800ca60:	00000000 	.word	0x00000000
 800ca64:	7f000000 	.word	0x7f000000
 800ca68:	3ff00000 	.word	0x3ff00000
 800ca6c:	fff00000 	.word	0xfff00000
 800ca70:	ffe00000 	.word	0xffe00000
 800ca74:	7fe00000 	.word	0x7fe00000
 800ca78:	c0196aab 	.word	0xc0196aab
 800ca7c:	0800d048 	.word	0x0800d048
 800ca80:	0800e090 	.word	0x0800e090
 800ca84:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ca88:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	ec41 0b15 	vmov	d5, r0, r1
 800ca92:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800ca96:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ca9a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800ca9e:	eeb0 4bc7 	vabs.f64	d4, d7
 800caa2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800caa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caaa:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800cb28 <pow+0x490>
 800caae:	d52a      	bpl.n	800cb06 <pow+0x46e>
 800cab0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cab4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabc:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cac0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800cac4:	bf58      	it	pl
 800cac6:	eeb0 4b43 	vmovpl.f64	d4, d3
 800caca:	ee37 3b04 	vadd.f64	d3, d7, d4
 800cace:	ee34 6b43 	vsub.f64	d6, d4, d3
 800cad2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cad6:	ee36 6b05 	vadd.f64	d6, d6, d5
 800cada:	ee36 6b03 	vadd.f64	d6, d6, d3
 800cade:	ee36 7b44 	vsub.f64	d7, d6, d4
 800cae2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caea:	d104      	bne.n	800caf6 <pow+0x45e>
 800caec:	4632      	mov	r2, r6
 800caee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800caf2:	ec43 2b17 	vmov	d7, r2, r3
 800caf6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cafa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cafe:	ee26 6b00 	vmul.f64	d6, d6, d0
 800cb02:	ed8d 6b04 	vstr	d6, [sp, #16]
 800cb06:	ee27 0b00 	vmul.f64	d0, d7, d0
 800cb0a:	b007      	add	sp, #28
 800cb0c:	ecbd 8b0a 	vpop	{d8-d12}
 800cb10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	f000 b863 	b.w	800cbde <__math_check_uflow>
 800cb18:	ec43 2b10 	vmov	d0, r2, r3
 800cb1c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cb20:	e625      	b.n	800c76e <pow+0xd6>
 800cb22:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800cb30 <pow+0x498>
 800cb26:	e622      	b.n	800c76e <pow+0xd6>
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	00100000 	.word	0x00100000
	...

0800cb38 <with_errno>:
 800cb38:	b513      	push	{r0, r1, r4, lr}
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	ed8d 0b00 	vstr	d0, [sp]
 800cb40:	f7fd fd56 	bl	800a5f0 <__errno>
 800cb44:	ed9d 0b00 	vldr	d0, [sp]
 800cb48:	6004      	str	r4, [r0, #0]
 800cb4a:	b002      	add	sp, #8
 800cb4c:	bd10      	pop	{r4, pc}

0800cb4e <xflow>:
 800cb4e:	b082      	sub	sp, #8
 800cb50:	b158      	cbz	r0, 800cb6a <xflow+0x1c>
 800cb52:	eeb1 7b40 	vneg.f64	d7, d0
 800cb56:	ed8d 7b00 	vstr	d7, [sp]
 800cb5a:	ed9d 7b00 	vldr	d7, [sp]
 800cb5e:	2022      	movs	r0, #34	; 0x22
 800cb60:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cb64:	b002      	add	sp, #8
 800cb66:	f7ff bfe7 	b.w	800cb38 <with_errno>
 800cb6a:	eeb0 7b40 	vmov.f64	d7, d0
 800cb6e:	e7f2      	b.n	800cb56 <xflow+0x8>

0800cb70 <__math_uflow>:
 800cb70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb78 <__math_uflow+0x8>
 800cb74:	f7ff bfeb 	b.w	800cb4e <xflow>
 800cb78:	00000000 	.word	0x00000000
 800cb7c:	10000000 	.word	0x10000000

0800cb80 <__math_oflow>:
 800cb80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb88 <__math_oflow+0x8>
 800cb84:	f7ff bfe3 	b.w	800cb4e <xflow>
 800cb88:	00000000 	.word	0x00000000
 800cb8c:	70000000 	.word	0x70000000

0800cb90 <__math_divzero>:
 800cb90:	b082      	sub	sp, #8
 800cb92:	2800      	cmp	r0, #0
 800cb94:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cb98:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800cb9c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800cba0:	ed8d 7b00 	vstr	d7, [sp]
 800cba4:	ed9d 0b00 	vldr	d0, [sp]
 800cba8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800cbb8 <__math_divzero+0x28>
 800cbac:	2022      	movs	r0, #34	; 0x22
 800cbae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800cbb2:	b002      	add	sp, #8
 800cbb4:	f7ff bfc0 	b.w	800cb38 <with_errno>
	...

0800cbc0 <__math_invalid>:
 800cbc0:	eeb0 7b40 	vmov.f64	d7, d0
 800cbc4:	eeb4 7b47 	vcmp.f64	d7, d7
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800cbd0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800cbd4:	d602      	bvs.n	800cbdc <__math_invalid+0x1c>
 800cbd6:	2021      	movs	r0, #33	; 0x21
 800cbd8:	f7ff bfae 	b.w	800cb38 <with_errno>
 800cbdc:	4770      	bx	lr

0800cbde <__math_check_uflow>:
 800cbde:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe6:	d102      	bne.n	800cbee <__math_check_uflow+0x10>
 800cbe8:	2022      	movs	r0, #34	; 0x22
 800cbea:	f7ff bfa5 	b.w	800cb38 <with_errno>
 800cbee:	4770      	bx	lr

0800cbf0 <__math_check_oflow>:
 800cbf0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800cc10 <__math_check_oflow+0x20>
 800cbf4:	eeb0 7bc0 	vabs.f64	d7, d0
 800cbf8:	eeb4 7b46 	vcmp.f64	d7, d6
 800cbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc00:	dd02      	ble.n	800cc08 <__math_check_oflow+0x18>
 800cc02:	2022      	movs	r0, #34	; 0x22
 800cc04:	f7ff bf98 	b.w	800cb38 <with_errno>
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	f3af 8000 	nop.w
 800cc10:	ffffffff 	.word	0xffffffff
 800cc14:	7fefffff 	.word	0x7fefffff

0800cc18 <_init>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	bf00      	nop
 800cc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1e:	bc08      	pop	{r3}
 800cc20:	469e      	mov	lr, r3
 800cc22:	4770      	bx	lr

0800cc24 <_fini>:
 800cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc26:	bf00      	nop
 800cc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc2a:	bc08      	pop	{r3}
 800cc2c:	469e      	mov	lr, r3
 800cc2e:	4770      	bx	lr
