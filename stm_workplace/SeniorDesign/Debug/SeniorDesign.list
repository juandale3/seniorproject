
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfa8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800c1a8  0800c1a8  0001c1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7bc  0800c7bc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c4  0800c7c4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000523c  20000204  0800c9d0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005440  0800c9d0  00025440  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024a06  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000501a  00000000  00000000  00044c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd8  00000000  00000000  00049c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001645  00000000  00000000  0004b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0ce  00000000  00000000  0004cfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000247cd  00000000  00000000  0007a083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111c5a  00000000  00000000  0009e850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008814  00000000  00000000  001b04ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001b8cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000204 	.word	0x20000204
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c190 	.word	0x0800c190

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000208 	.word	0x20000208
 800023c:	0800c190 	.word	0x0800c190

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 fc69 	bl	8001eec <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f000 fe0c 	bl	800123c <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000644:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000674 <setFlowRate+0x44>
 8000648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800064c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000678 <setFlowRate+0x48>
 8000650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000658:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800067c <setFlowRate+0x4c>
 800065c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000660:	eef0 7a66 	vmov.f32	s15, s13

}
 8000664:	eeb0 0a67 	vmov.f32	s0, s15
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	3ca3d70a 	.word	0x3ca3d70a
 8000678:	00000001 	.word	0x00000001
 800067c:	3fc147ae 	.word	0x3fc147ae

08000680 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
return;
 8000684:	bf00      	nop
}
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <flowStateOpen>:
void flowStateOpen(void){
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
return;
 8000692:	bf00      	nop
}
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <flowStateControl>:
void flowStateControl(void){
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
return;
 80006a0:	bf00      	nop
}
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f001 f9ed 	bl	8001a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f860 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f9ba 	bl	8000a30 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006bc:	f000 f95a 	bl	8000974 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c0:	f000 f988 	bl	80009d4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006c4:	f000 f8ca 	bl	800085c <MX_ADC1_Init>
  MX_DAC_Init();
 80006c8:	f000 f92a 	bl	8000920 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  volts = setFlowRate(0);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ffaf 	bl	8000630 <setFlowRate>
 80006d2:	eef0 7a40 	vmov.f32	s15, s0
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0xa0>)
 80006d8:	edc3 7a00 	vstr	s15, [r3]
  dacSet(&hdac, DAC_CHANNEL_1, volts);
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <main+0xa0>)
 80006de:	edd3 7a00 	vldr	s15, [r3]
 80006e2:	eeb0 0a67 	vmov.f32	s0, s15
 80006e6:	2100      	movs	r1, #0
 80006e8:	4819      	ldr	r0, [pc, #100]	; (8000750 <main+0xa4>)
 80006ea:	f000 fdad 	bl	8001248 <dacSet>



  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	4818      	ldr	r0, [pc, #96]	; (8000754 <main+0xa8>)
 80006f4:	f002 fac0 	bl	8002c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2102      	movs	r1, #2
 80006fc:	4815      	ldr	r0, [pc, #84]	; (8000754 <main+0xa8>)
 80006fe:	f002 fabb 	bl	8002c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2104      	movs	r1, #4
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <main+0xa8>)
 8000708:	f002 fab6 	bl	8002c78 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 5);
 800070c:	2205      	movs	r2, #5
 800070e:	4912      	ldr	r1, [pc, #72]	; (8000758 <main+0xac>)
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <main+0xb0>)
 8000712:	f004 f9b1 	bl	8004a78 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000716:	f005 ffa7 	bl	8006668 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 800071a:	4a11      	ldr	r2, [pc, #68]	; (8000760 <main+0xb4>)
 800071c:	2100      	movs	r1, #0
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <main+0xb8>)
 8000720:	f006 f80c 	bl	800673c <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <main+0xbc>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <main+0xc0>)
 800072c:	2100      	movs	r1, #0
 800072e:	4810      	ldr	r0, [pc, #64]	; (8000770 <main+0xc4>)
 8000730:	f006 f804 	bl	800673c <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <main+0xc8>)
 8000738:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <main+0xc8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f006 f8a2 	bl	8006888 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000744:	f005 ffc4 	bl	80066d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	e7fe      	b.n	8000748 <main+0x9c>
 800074a:	bf00      	nop
 800074c:	2000083c 	.word	0x2000083c
 8000750:	20000268 	.word	0x20000268
 8000754:	40021400 	.word	0x40021400
 8000758:	200008ac 	.word	0x200008ac
 800075c:	2000027c 	.word	0x2000027c
 8000760:	0800c3ec 	.word	0x0800c3ec
 8000764:	08000c91 	.word	0x08000c91
 8000768:	2000080c 	.word	0x2000080c
 800076c:	0800c410 	.word	0x0800c410
 8000770:	080011ed 	.word	0x080011ed
 8000774:	20000810 	.word	0x20000810

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2234      	movs	r2, #52	; 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f009 fc39 	bl	8009ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079c:	f002 fbce 	bl	8002f3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <SystemClock_Config+0xdc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a2b      	ldr	r2, [pc, #172]	; (8000854 <SystemClock_Config+0xdc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <SystemClock_Config+0xdc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <SystemClock_Config+0xe0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <SystemClock_Config+0xe0>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <SystemClock_Config+0xe0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fbfb 	bl	8002ffc <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f000 fd16 	bl	800123c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000810:	f002 fba4 	bl	8002f5c <HAL_PWREx_EnableOverDrive>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800081a:	f000 fd0f 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2103      	movs	r1, #3
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fe8c 	bl	8003558 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000846:	f000 fcf9 	bl	800123c <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	; 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_ADC1_Init+0xb8>)
 8000870:	4a29      	ldr	r2, [pc, #164]	; (8000918 <MX_ADC1_Init+0xbc>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_ADC1_Init+0xb8>)
 8000876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_ADC1_Init+0xb8>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_ADC1_Init+0xb8>)
 8000884:	2201      	movs	r2, #1
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_ADC1_Init+0xb8>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_ADC1_Init+0xb8>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ADC1_Init+0xb8>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_ADC1_Init+0xb8>)
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_ADC1_Init+0xc0>)
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ADC1_Init+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ADC1_Init+0xb8>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ADC1_Init+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ADC1_Init+0xb8>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	4815      	ldr	r0, [pc, #84]	; (8000914 <MX_ADC1_Init+0xb8>)
 80008be:	f001 f937 	bl	8001b30 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fcb8 	bl	800123c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008cc:	2309      	movs	r3, #9
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008d4:	2302      	movs	r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_ADC1_Init+0xb8>)
 80008de:	f001 fb05 	bl	8001eec <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fca8 	bl	800123c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008ec:	2306      	movs	r3, #6
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_ADC1_Init+0xb8>)
 80008fe:	f001 faf5 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000908:	f000 fc98 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000220 	.word	0x20000220
 8000918:	40012000 	.word	0x40012000
 800091c:	0f000001 	.word	0x0f000001

08000920 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_DAC_Init+0x4c>)
 8000930:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <MX_DAC_Init+0x50>)
 8000932:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_DAC_Init+0x4c>)
 8000936:	f001 fe0b 	bl	8002550 <HAL_DAC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000940:	f000 fc7c 	bl	800123c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_DAC_Init+0x4c>)
 8000954:	f001 fef9 	bl	800274a <HAL_DAC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800095e:	f000 fc6d 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000268 	.word	0x20000268
 8000970:	40007400 	.word	0x40007400

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART3_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b8:	f003 ff2e 	bl	8004818 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 fc3b 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000027c 	.word	0x2000027c
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2206      	movs	r2, #6
 80009e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	f002 f947 	bl	8002caa <HAL_PCD_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 fc0b 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000304 	.word	0x20000304

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b7e      	ldr	r3, [pc, #504]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a7d      	ldr	r2, [pc, #500]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b7b      	ldr	r3, [pc, #492]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	4b78      	ldr	r3, [pc, #480]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a77      	ldr	r2, [pc, #476]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b75      	ldr	r3, [pc, #468]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4b72      	ldr	r3, [pc, #456]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a71      	ldr	r2, [pc, #452]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b6f      	ldr	r3, [pc, #444]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b6c      	ldr	r3, [pc, #432]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a6b      	ldr	r2, [pc, #428]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b69      	ldr	r3, [pc, #420]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a65      	ldr	r2, [pc, #404]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b63      	ldr	r3, [pc, #396]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	4b60      	ldr	r3, [pc, #384]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a5f      	ldr	r2, [pc, #380]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b5d      	ldr	r3, [pc, #372]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b5a      	ldr	r3, [pc, #360]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a59      	ldr	r2, [pc, #356]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b57      	ldr	r3, [pc, #348]	; (8000c40 <MX_GPIO_Init+0x210>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2107      	movs	r1, #7
 8000af2:	4854      	ldr	r0, [pc, #336]	; (8000c44 <MX_GPIO_Init+0x214>)
 8000af4:	f002 f8c0 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f244 0181 	movw	r1, #16513	; 0x4081
 8000afe:	4852      	ldr	r0, [pc, #328]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000b00:	f002 f8ba 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4850      	ldr	r0, [pc, #320]	; (8000c4c <MX_GPIO_Init+0x21c>)
 8000b0a:	f002 f8b5 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	484a      	ldr	r0, [pc, #296]	; (8000c50 <MX_GPIO_Init+0x220>)
 8000b26:	f001 fefb 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4840      	ldr	r0, [pc, #256]	; (8000c44 <MX_GPIO_Init+0x214>)
 8000b42:	f001 feed 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b46:	2332      	movs	r3, #50	; 0x32
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b56:	230b      	movs	r3, #11
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	483b      	ldr	r0, [pc, #236]	; (8000c50 <MX_GPIO_Init+0x220>)
 8000b62:	f001 fedd 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b66:	2386      	movs	r3, #134	; 0x86
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b76:	230b      	movs	r3, #11
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4834      	ldr	r0, [pc, #208]	; (8000c54 <MX_GPIO_Init+0x224>)
 8000b82:	f001 fecd 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b86:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	482a      	ldr	r0, [pc, #168]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000ba0:	f001 febe 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb6:	230b      	movs	r3, #11
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4821      	ldr	r0, [pc, #132]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000bc2:	f001 fead 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481b      	ldr	r0, [pc, #108]	; (8000c4c <MX_GPIO_Init+0x21c>)
 8000bde:	f001 fe9f 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4815      	ldr	r0, [pc, #84]	; (8000c4c <MX_GPIO_Init+0x21c>)
 8000bf6:	f001 fe93 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI3_Pin DI2_Pin DI1_Pin */
  GPIO_InitStruct.Pin = DI3_Pin|DI2_Pin|DI1_Pin;
 8000bfa:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <MX_GPIO_Init+0x220>)
 8000c10:	f001 fe86 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c26:	230b      	movs	r3, #11
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_GPIO_Init+0x21c>)
 8000c32:	f001 fe75 	bl	8002920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_UART_RxCpltCallback+0x2c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d109      	bne.n	8000c7c <HAL_UART_RxCpltCallback+0x24>
    {
        // Echo received data back
        HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buffer, 20);
 8000c68:	2214      	movs	r2, #20
 8000c6a:	4907      	ldr	r1, [pc, #28]	; (8000c88 <HAL_UART_RxCpltCallback+0x30>)
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_UART_RxCpltCallback+0x2c>)
 8000c6e:	f003 fea5 	bl	80049bc <HAL_UART_Transmit_IT>

        // Start a new receive operation
        HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 5);
 8000c72:	2205      	movs	r2, #5
 8000c74:	4905      	ldr	r1, [pc, #20]	; (8000c8c <HAL_UART_RxCpltCallback+0x34>)
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <HAL_UART_RxCpltCallback+0x2c>)
 8000c78:	f003 fefe 	bl	8004a78 <HAL_UART_Receive_IT>
    }
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000027c 	.word	0x2000027c
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200008ac 	.word	0x200008ac

08000c90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(eNextState) {
 8000c98:	4ba2      	ldr	r3, [pc, #648]	; (8000f24 <StartDefaultTask+0x294>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b0d      	cmp	r3, #13
 8000c9e:	f200 8272 	bhi.w	8001186 <StartDefaultTask+0x4f6>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <StartDefaultTask+0x18>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000ce1 	.word	0x08000ce1
 8000cac:	08000d31 	.word	0x08000d31
 8000cb0:	08000da1 	.word	0x08000da1
 8000cb4:	08000e2f 	.word	0x08000e2f
 8000cb8:	08000e95 	.word	0x08000e95
 8000cbc:	08000f89 	.word	0x08000f89
 8000cc0:	08001011 	.word	0x08001011
 8000cc4:	0800109f 	.word	0x0800109f
 8000cc8:	080010bf 	.word	0x080010bf
 8000ccc:	08001103 	.word	0x08001103
 8000cd0:	08001123 	.word	0x08001123
 8000cd4:	08001167 	.word	0x08001167
 8000cd8:	0800118f 	.word	0x0800118f
 8000cdc:	08001177 	.word	0x08001177
//					LOAD_TEST_INIT,
//					OPERATION_TEST_INIT,
//					ULTIMATE_MEASURE_TEST_INT,

	  				// void listenMsg(int * str, UART_HandleTypeDef *huart2);
	  				sprintf(msg,"STARTING\r\n");
 8000ce0:	4991      	ldr	r1, [pc, #580]	; (8000f28 <StartDefaultTask+0x298>)
 8000ce2:	4892      	ldr	r0, [pc, #584]	; (8000f2c <StartDefaultTask+0x29c>)
 8000ce4:	f009 f928 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000ce8:	4991      	ldr	r1, [pc, #580]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000cea:	4890      	ldr	r0, [pc, #576]	; (8000f2c <StartDefaultTask+0x29c>)
 8000cec:	f000 fb1e 	bl	800132c <printMsg>
	  				osDelay(1000);
 8000cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf4:	f005 fe30 	bl	8006958 <osDelay>

					tests[0] = 1;
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	; (8000f34 <StartDefaultTask+0x2a4>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
					tests[1] = 3;
 8000cfe:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <StartDefaultTask+0x2a4>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	605a      	str	r2, [r3, #4]
					tests[2] = 5;
 8000d04:	4b8b      	ldr	r3, [pc, #556]	; (8000f34 <StartDefaultTask+0x2a4>)
 8000d06:	2205      	movs	r2, #5
 8000d08:	609a      	str	r2, [r3, #8]
					tests[3] = 7;
 8000d0a:	4b8a      	ldr	r3, [pc, #552]	; (8000f34 <StartDefaultTask+0x2a4>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	60da      	str	r2, [r3, #12]
					tests[4] = 9;
 8000d10:	4b88      	ldr	r3, [pc, #544]	; (8000f34 <StartDefaultTask+0x2a4>)
 8000d12:	2209      	movs	r2, #9
 8000d14:	611a      	str	r2, [r3, #16]
					tests[5] = 11;
 8000d16:	4b87      	ldr	r3, [pc, #540]	; (8000f34 <StartDefaultTask+0x2a4>)
 8000d18:	220b      	movs	r2, #11
 8000d1a:	615a      	str	r2, [r3, #20]
					tests[6] = 13;
 8000d1c:	4b85      	ldr	r3, [pc, #532]	; (8000f34 <StartDefaultTask+0x2a4>)
 8000d1e:	220d      	movs	r2, #13
 8000d20:	619a      	str	r2, [r3, #24]

					eNextState = *currentTest;
 8000d22:	4b85      	ldr	r3, [pc, #532]	; (8000f38 <StartDefaultTask+0x2a8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b7e      	ldr	r3, [pc, #504]	; (8000f24 <StartDefaultTask+0x294>)
 8000d2c:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d2e:	e22f      	b.n	8001190 <StartDefaultTask+0x500>
//					Task Number One:
//						recieve parameters from GUI
//						Initialization
//						- set timer, target mTorr, assign which pump
//						- open/close solonoids, close flow controller, open stepper motor
	  				osThreadSuspend(sendDataHandle);
 8000d30:	4b82      	ldr	r3, [pc, #520]	; (8000f3c <StartDefaultTask+0x2ac>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 fda7 	bl	8006888 <osThreadSuspend>
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST_INIT\r\n");
 8000d3a:	4981      	ldr	r1, [pc, #516]	; (8000f40 <StartDefaultTask+0x2b0>)
 8000d3c:	487b      	ldr	r0, [pc, #492]	; (8000f2c <StartDefaultTask+0x29c>)
 8000d3e:	f009 f8fb 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000d42:	497b      	ldr	r1, [pc, #492]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000d44:	4879      	ldr	r0, [pc, #484]	; (8000f2c <StartDefaultTask+0x29c>)
 8000d46:	f000 faf1 	bl	800132c <printMsg>
	  				osDelay(1000);
 8000d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4e:	f005 fe03 	bl	8006958 <osDelay>

	  				sprintf(msg,"open/close solenoids, close flow controller, open stepper motor\r\n");
 8000d52:	497c      	ldr	r1, [pc, #496]	; (8000f44 <StartDefaultTask+0x2b4>)
 8000d54:	4875      	ldr	r0, [pc, #468]	; (8000f2c <StartDefaultTask+0x29c>)
 8000d56:	f009 f8ef 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000d5a:	4975      	ldr	r1, [pc, #468]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000d5c:	4873      	ldr	r0, [pc, #460]	; (8000f2c <StartDefaultTask+0x29c>)
 8000d5e:	f000 fae5 	bl	800132c <printMsg>
	  				osDelay(1000);
 8000d62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d66:	f005 fdf7 	bl	8006958 <osDelay>

	  				flowStateClose();
 8000d6a:	f7ff fc89 	bl	8000680 <flowStateClose>
	  				stepperOpen();
 8000d6e:	f000 fb09 	bl	8001384 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000d72:	4b75      	ldr	r3, [pc, #468]	; (8000f48 <StartDefaultTask+0x2b8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a75      	ldr	r2, [pc, #468]	; (8000f4c <StartDefaultTask+0x2bc>)
 8000d78:	8812      	ldrh	r2, [r2, #0]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fae9 	bl	8001354 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000d82:	4b73      	ldr	r3, [pc, #460]	; (8000f50 <StartDefaultTask+0x2c0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a73      	ldr	r2, [pc, #460]	; (8000f54 <StartDefaultTask+0x2c4>)
 8000d88:	8812      	ldrh	r2, [r2, #0]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 faed 	bl	800136c <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000d92:	4871      	ldr	r0, [pc, #452]	; (8000f58 <StartDefaultTask+0x2c8>)
 8000d94:	f000 fe30 	bl	80019f8 <vacuumGaugeADC>

	  				eNextState = VAC_ACHIEVMENT_TEST;
 8000d98:	4b62      	ldr	r3, [pc, #392]	; (8000f24 <StartDefaultTask+0x294>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d9e:	e1f7      	b.n	8001190 <StartDefaultTask+0x500>
	  			case VAC_ACHIEVMENT_TEST:
//	  				monitor status
//	  				- mTorr if mTorr = target, shut pump off, success
//	  				- Timer if Timer > set time, shut pump off, failure
//	  				- if success/failure, send data, remove task two&three, move to next state
	  				volts = adcGet(&hadc1);
 8000da0:	486d      	ldr	r0, [pc, #436]	; (8000f58 <StartDefaultTask+0x2c8>)
 8000da2:	f000 fa85 	bl	80012b0 <adcGet>
 8000da6:	eef0 7a40 	vmov.f32	s15, s0
 8000daa:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <StartDefaultTask+0x2cc>)
 8000dac:	edc3 7a00 	vstr	s15, [r3]
//	  				vacuumScale = readVacuum(volts);
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST Scanning\r\n");
 8000db0:	496b      	ldr	r1, [pc, #428]	; (8000f60 <StartDefaultTask+0x2d0>)
 8000db2:	485e      	ldr	r0, [pc, #376]	; (8000f2c <StartDefaultTask+0x29c>)
 8000db4:	f009 f8c0 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000db8:	495d      	ldr	r1, [pc, #372]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000dba:	485c      	ldr	r0, [pc, #368]	; (8000f2c <StartDefaultTask+0x29c>)
 8000dbc:	f000 fab6 	bl	800132c <printMsg>
	  				osThreadResume(sendDataHandle);
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <StartDefaultTask+0x2ac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 fd93 	bl	80068f0 <osThreadResume>
	  				osDelay(1000);
 8000dca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dce:	f005 fdc3 	bl	8006958 <osDelay>


	  				vacuumScale = 50.0;
 8000dd2:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <StartDefaultTask+0x2d4>)
 8000dd4:	4a64      	ldr	r2, [pc, #400]	; (8000f68 <StartDefaultTask+0x2d8>)
 8000dd6:	601a      	str	r2, [r3, #0]
	  				if(vacuumScale >= 50){
 8000dd8:	4b62      	ldr	r3, [pc, #392]	; (8000f64 <StartDefaultTask+0x2d4>)
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000f6c <StartDefaultTask+0x2dc>
 8000de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dea:	db1c      	blt.n	8000e26 <StartDefaultTask+0x196>
		  				sprintf(msg,"vacuum of 50 mTorr reached\r\n");
 8000dec:	4960      	ldr	r1, [pc, #384]	; (8000f70 <StartDefaultTask+0x2e0>)
 8000dee:	484f      	ldr	r0, [pc, #316]	; (8000f2c <StartDefaultTask+0x29c>)
 8000df0:	f009 f8a2 	bl	8009f38 <siprintf>
		  				printMsg(msg, &huart3);
 8000df4:	494e      	ldr	r1, [pc, #312]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000df6:	484d      	ldr	r0, [pc, #308]	; (8000f2c <StartDefaultTask+0x29c>)
 8000df8:	f000 fa98 	bl	800132c <printMsg>
		  				osThreadSuspend(sendDataHandle);
 8000dfc:	4b4f      	ldr	r3, [pc, #316]	; (8000f3c <StartDefaultTask+0x2ac>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 fd41 	bl	8006888 <osThreadSuspend>
		  				osDelay(1000);
 8000e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0a:	f005 fda5 	bl	8006958 <osDelay>
		  				currentTest++;
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <StartDefaultTask+0x2a8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3304      	adds	r3, #4
 8000e14:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <StartDefaultTask+0x2a8>)
 8000e16:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000e18:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <StartDefaultTask+0x2a8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <StartDefaultTask+0x294>)
 8000e22:	701a      	strb	r2, [r3, #0]
	  					eNextState = VAC_ACHIEVMENT_TEST;
	  				}

	  				//osDelay(100);

	  				break;
 8000e24:	e1b4      	b.n	8001190 <StartDefaultTask+0x500>
	  					eNextState = VAC_ACHIEVMENT_TEST;
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <StartDefaultTask+0x294>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e2c:	e1b0      	b.n	8001190 <StartDefaultTask+0x500>

//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor
	  				sprintf(msg,"WARM_UP_INIT\r\n");
 8000e2e:	4951      	ldr	r1, [pc, #324]	; (8000f74 <StartDefaultTask+0x2e4>)
 8000e30:	483e      	ldr	r0, [pc, #248]	; (8000f2c <StartDefaultTask+0x29c>)
 8000e32:	f009 f881 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000e36:	493e      	ldr	r1, [pc, #248]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000e38:	483c      	ldr	r0, [pc, #240]	; (8000f2c <StartDefaultTask+0x29c>)
 8000e3a:	f000 fa77 	bl	800132c <printMsg>
	  				osDelay(1000);
 8000e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e42:	f005 fd89 	bl	8006958 <osDelay>

	  				sprintf(msg,"open/close solenoids, open flow controller, open stepper motor\r\n");
 8000e46:	494c      	ldr	r1, [pc, #304]	; (8000f78 <StartDefaultTask+0x2e8>)
 8000e48:	4838      	ldr	r0, [pc, #224]	; (8000f2c <StartDefaultTask+0x29c>)
 8000e4a:	f009 f875 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000e4e:	4938      	ldr	r1, [pc, #224]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000e50:	4836      	ldr	r0, [pc, #216]	; (8000f2c <StartDefaultTask+0x29c>)
 8000e52:	f000 fa6b 	bl	800132c <printMsg>
	  				osDelay(1000);
 8000e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5a:	f005 fd7d 	bl	8006958 <osDelay>

	  				flowStateOpen();
 8000e5e:	f7ff fc16 	bl	800068e <flowStateOpen>
	  				stepperOpen();
 8000e62:	f000 fa8f 	bl	8001384 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000e66:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <StartDefaultTask+0x2b8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <StartDefaultTask+0x2bc>)
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa6f 	bl	8001354 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <StartDefaultTask+0x2c0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a36      	ldr	r2, [pc, #216]	; (8000f54 <StartDefaultTask+0x2c4>)
 8000e7c:	8812      	ldrh	r2, [r2, #0]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fa73 	bl	800136c <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000e86:	4834      	ldr	r0, [pc, #208]	; (8000f58 <StartDefaultTask+0x2c8>)
 8000e88:	f000 fdb6 	bl	80019f8 <vacuumGaugeADC>

	  				eNextState = WARM_UP;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <StartDefaultTask+0x294>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e92:	e17d      	b.n	8001190 <StartDefaultTask+0x500>
	  			case WARM_UP:
//					- Timer if Timer >= set time, success,
//					- temperature if temp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				float temp = 0;
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
	  				int timer = 3;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"WARM_UP Scanning\r\n");
 8000e9e:	4937      	ldr	r1, [pc, #220]	; (8000f7c <StartDefaultTask+0x2ec>)
 8000ea0:	4822      	ldr	r0, [pc, #136]	; (8000f2c <StartDefaultTask+0x29c>)
 8000ea2:	f009 f849 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000ea6:	4922      	ldr	r1, [pc, #136]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000ea8:	4820      	ldr	r0, [pc, #128]	; (8000f2c <StartDefaultTask+0x29c>)
 8000eaa:	f000 fa3f 	bl	800132c <printMsg>
	  				osThreadResume(sendDataHandle);
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <StartDefaultTask+0x2ac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 fd1c 	bl	80068f0 <osThreadResume>
	  				osDelay(1000);
 8000eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ebc:	f005 fd4c 	bl	8006958 <osDelay>


	  				if(temp > 100){
 8000ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000f80 <StartDefaultTask+0x2f0>
 8000ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed0:	dd03      	ble.n	8000eda <StartDefaultTask+0x24a>
//	  					test failed
	  					eNextState = FAIL_STATE;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <StartDefaultTask+0x294>)
 8000ed4:	220c      	movs	r2, #12
 8000ed6:	701a      	strb	r2, [r3, #0]
		  				osDelay(1000);
	  				}else{
	  					eNextState = WARM_UP;
	  				}
	  				//osDelay(250);
	  				break;
 8000ed8:	e15a      	b.n	8001190 <StartDefaultTask+0x500>
	  				}else if(timer >= 3){
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	dd1c      	ble.n	8000f1a <StartDefaultTask+0x28a>
		  				sprintf(msg,"Time is up: success\r\n");
 8000ee0:	4928      	ldr	r1, [pc, #160]	; (8000f84 <StartDefaultTask+0x2f4>)
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <StartDefaultTask+0x29c>)
 8000ee4:	f009 f828 	bl	8009f38 <siprintf>
		  				printMsg(msg, &huart3);
 8000ee8:	4911      	ldr	r1, [pc, #68]	; (8000f30 <StartDefaultTask+0x2a0>)
 8000eea:	4810      	ldr	r0, [pc, #64]	; (8000f2c <StartDefaultTask+0x29c>)
 8000eec:	f000 fa1e 	bl	800132c <printMsg>
		  				currentTest++;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <StartDefaultTask+0x2a8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <StartDefaultTask+0x2a8>)
 8000ef8:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <StartDefaultTask+0x2a8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <StartDefaultTask+0x294>)
 8000f04:	701a      	strb	r2, [r3, #0]
		  				osThreadSuspend(sendDataHandle);
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <StartDefaultTask+0x2ac>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fcbc 	bl	8006888 <osThreadSuspend>
		  				osDelay(1000);
 8000f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f14:	f005 fd20 	bl	8006958 <osDelay>
	  				break;
 8000f18:	e13a      	b.n	8001190 <StartDefaultTask+0x500>
	  					eNextState = WARM_UP;
 8000f1a:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <StartDefaultTask+0x294>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	701a      	strb	r2, [r3, #0]
	  				break;
 8000f20:	e136      	b.n	8001190 <StartDefaultTask+0x500>
 8000f22:	bf00      	nop
 8000f24:	20000004 	.word	0x20000004
 8000f28:	0800c1c4 	.word	0x0800c1c4
 8000f2c:	20000848 	.word	0x20000848
 8000f30:	2000027c 	.word	0x2000027c
 8000f34:	20000814 	.word	0x20000814
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000810 	.word	0x20000810
 8000f40:	0800c1d0 	.word	0x0800c1d0
 8000f44:	0800c1ec 	.word	0x0800c1ec
 8000f48:	2000001c 	.word	0x2000001c
 8000f4c:	20000020 	.word	0x20000020
 8000f50:	20000024 	.word	0x20000024
 8000f54:	20000028 	.word	0x20000028
 8000f58:	20000220 	.word	0x20000220
 8000f5c:	2000083c 	.word	0x2000083c
 8000f60:	0800c230 	.word	0x0800c230
 8000f64:	20000844 	.word	0x20000844
 8000f68:	42480000 	.word	0x42480000
 8000f6c:	42480000 	.word	0x42480000
 8000f70:	0800c250 	.word	0x0800c250
 8000f74:	0800c270 	.word	0x0800c270
 8000f78:	0800c280 	.word	0x0800c280
 8000f7c:	0800c2c4 	.word	0x0800c2c4
 8000f80:	42c80000 	.word	0x42c80000
 8000f84:	0800c2d8 	.word	0x0800c2d8
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump, flow load
//					- open/close solonoids, control flow controller, open stepper motor

	  				sprintf(msg,"LOAD_TEST_INIT\r\n");
 8000f88:	4983      	ldr	r1, [pc, #524]	; (8001198 <StartDefaultTask+0x508>)
 8000f8a:	4884      	ldr	r0, [pc, #528]	; (800119c <StartDefaultTask+0x50c>)
 8000f8c:	f008 ffd4 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000f90:	4983      	ldr	r1, [pc, #524]	; (80011a0 <StartDefaultTask+0x510>)
 8000f92:	4882      	ldr	r0, [pc, #520]	; (800119c <StartDefaultTask+0x50c>)
 8000f94:	f000 f9ca 	bl	800132c <printMsg>
	  				osDelay(1000);
 8000f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9c:	f005 fcdc 	bl	8006958 <osDelay>

	  				sprintf(msg,"open/close solenoids, control flow controller, open stepper motor\r\n");
 8000fa0:	4980      	ldr	r1, [pc, #512]	; (80011a4 <StartDefaultTask+0x514>)
 8000fa2:	487e      	ldr	r0, [pc, #504]	; (800119c <StartDefaultTask+0x50c>)
 8000fa4:	f008 ffc8 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8000fa8:	497d      	ldr	r1, [pc, #500]	; (80011a0 <StartDefaultTask+0x510>)
 8000faa:	487c      	ldr	r0, [pc, #496]	; (800119c <StartDefaultTask+0x50c>)
 8000fac:	f000 f9be 	bl	800132c <printMsg>
	  				osDelay(1000);
 8000fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb4:	f005 fcd0 	bl	8006958 <osDelay>

	  				flowStateControl();
 8000fb8:	f7ff fb70 	bl	800069c <flowStateControl>
	  				dacVolts = setFlowRate(50);
 8000fbc:	2032      	movs	r0, #50	; 0x32
 8000fbe:	f7ff fb37 	bl	8000630 <setFlowRate>
 8000fc2:	eef0 7a40 	vmov.f32	s15, s0
 8000fc6:	4b78      	ldr	r3, [pc, #480]	; (80011a8 <StartDefaultTask+0x518>)
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
	  				dacSet(&hdac, DAC_CHANNEL_1, dacVolts);
 8000fcc:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <StartDefaultTask+0x518>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4874      	ldr	r0, [pc, #464]	; (80011ac <StartDefaultTask+0x51c>)
 8000fda:	f000 f935 	bl	8001248 <dacSet>

	  				stepperOpen();
 8000fde:	f000 f9d1 	bl	8001384 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000fe2:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <StartDefaultTask+0x520>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a73      	ldr	r2, [pc, #460]	; (80011b4 <StartDefaultTask+0x524>)
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9b1 	bl	8001354 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000ff2:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <StartDefaultTask+0x528>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a71      	ldr	r2, [pc, #452]	; (80011bc <StartDefaultTask+0x52c>)
 8000ff8:	8812      	ldrh	r2, [r2, #0]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f9b5 	bl	800136c <solenoidClose>
	  				flowControllerADC(&hadc1);
 8001002:	486f      	ldr	r0, [pc, #444]	; (80011c0 <StartDefaultTask+0x530>)
 8001004:	f7ff faf2 	bl	80005ec <flowControllerADC>

	  				eNextState = LOAD_TEST;
 8001008:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <StartDefaultTask+0x534>)
 800100a:	2206      	movs	r2, #6
 800100c:	701a      	strb	r2, [r3, #0]

	  				break;
 800100e:	e0bf      	b.n	8001190 <StartDefaultTask+0x500>
	  			case LOAD_TEST:
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- flow rate < flow load, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				temp = 0;
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
	  				timer = 8;
 8001016:	2308      	movs	r3, #8
 8001018:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"LOAD_TEST Scanning\r\n");
 800101a:	496b      	ldr	r1, [pc, #428]	; (80011c8 <StartDefaultTask+0x538>)
 800101c:	485f      	ldr	r0, [pc, #380]	; (800119c <StartDefaultTask+0x50c>)
 800101e:	f008 ff8b 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 8001022:	495f      	ldr	r1, [pc, #380]	; (80011a0 <StartDefaultTask+0x510>)
 8001024:	485d      	ldr	r0, [pc, #372]	; (800119c <StartDefaultTask+0x50c>)
 8001026:	f000 f981 	bl	800132c <printMsg>
	  				osThreadResume(sendDataHandle);
 800102a:	4b68      	ldr	r3, [pc, #416]	; (80011cc <StartDefaultTask+0x53c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f005 fc5e 	bl	80068f0 <osThreadResume>
	  				osDelay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f005 fc8e 	bl	8006958 <osDelay>


	  				if(temp > 100){
 800103c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001040:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80011d0 <StartDefaultTask+0x540>
 8001044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	dd03      	ble.n	8001056 <StartDefaultTask+0x3c6>
//	  					test failed
	  					eNextState = FAIL_STATE;
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <StartDefaultTask+0x534>)
 8001050:	220c      	movs	r2, #12
 8001052:	701a      	strb	r2, [r3, #0]
		  				osDelay(1000);
	  				}else{
	  					eNextState = LOAD_TEST;
	  				}

	  				break;
 8001054:	e09c      	b.n	8001190 <StartDefaultTask+0x500>
	  				}else if(timer >= 8){
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b07      	cmp	r3, #7
 800105a:	dd1c      	ble.n	8001096 <StartDefaultTask+0x406>
		  				sprintf(msg,"Time is up: success\r\n");
 800105c:	495d      	ldr	r1, [pc, #372]	; (80011d4 <StartDefaultTask+0x544>)
 800105e:	484f      	ldr	r0, [pc, #316]	; (800119c <StartDefaultTask+0x50c>)
 8001060:	f008 ff6a 	bl	8009f38 <siprintf>
		  				printMsg(msg, &huart3);
 8001064:	494e      	ldr	r1, [pc, #312]	; (80011a0 <StartDefaultTask+0x510>)
 8001066:	484d      	ldr	r0, [pc, #308]	; (800119c <StartDefaultTask+0x50c>)
 8001068:	f000 f960 	bl	800132c <printMsg>
		  				currentTest++;
 800106c:	4b5a      	ldr	r3, [pc, #360]	; (80011d8 <StartDefaultTask+0x548>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3304      	adds	r3, #4
 8001072:	4a59      	ldr	r2, [pc, #356]	; (80011d8 <StartDefaultTask+0x548>)
 8001074:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8001076:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <StartDefaultTask+0x548>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <StartDefaultTask+0x534>)
 8001080:	701a      	strb	r2, [r3, #0]
		  				osThreadSuspend(sendDataHandle);
 8001082:	4b52      	ldr	r3, [pc, #328]	; (80011cc <StartDefaultTask+0x53c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f005 fbfe 	bl	8006888 <osThreadSuspend>
		  				osDelay(1000);
 800108c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001090:	f005 fc62 	bl	8006958 <osDelay>
	  				break;
 8001094:	e07c      	b.n	8001190 <StartDefaultTask+0x500>
	  					eNextState = LOAD_TEST;
 8001096:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <StartDefaultTask+0x534>)
 8001098:	2206      	movs	r2, #6
 800109a:	701a      	strb	r2, [r3, #0]
	  				break;
 800109c:	e078      	b.n	8001190 <StartDefaultTask+0x500>
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor

	  				sprintf(msg,"OPERATION_TEST_INIT\r\n");
 800109e:	494f      	ldr	r1, [pc, #316]	; (80011dc <StartDefaultTask+0x54c>)
 80010a0:	483e      	ldr	r0, [pc, #248]	; (800119c <StartDefaultTask+0x50c>)
 80010a2:	f008 ff49 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 80010a6:	493e      	ldr	r1, [pc, #248]	; (80011a0 <StartDefaultTask+0x510>)
 80010a8:	483c      	ldr	r0, [pc, #240]	; (800119c <StartDefaultTask+0x50c>)
 80010aa:	f000 f93f 	bl	800132c <printMsg>
	  				osDelay(1000);
 80010ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b2:	f005 fc51 	bl	8006958 <osDelay>
	  				eNextState = LOAD_TEST;
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <StartDefaultTask+0x534>)
 80010b8:	2206      	movs	r2, #6
 80010ba:	701a      	strb	r2, [r3, #0]
	  				break;
 80010bc:	e068      	b.n	8001190 <StartDefaultTask+0x500>
//					monitor status
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state

	  				sprintf(msg,"OPERATION_TEST\r\n");
 80010be:	4948      	ldr	r1, [pc, #288]	; (80011e0 <StartDefaultTask+0x550>)
 80010c0:	4836      	ldr	r0, [pc, #216]	; (800119c <StartDefaultTask+0x50c>)
 80010c2:	f008 ff39 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 80010c6:	4936      	ldr	r1, [pc, #216]	; (80011a0 <StartDefaultTask+0x510>)
 80010c8:	4834      	ldr	r0, [pc, #208]	; (800119c <StartDefaultTask+0x50c>)
 80010ca:	f000 f92f 	bl	800132c <printMsg>
	  				osThreadResume(sendDataHandle);
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <StartDefaultTask+0x53c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fc0c 	bl	80068f0 <osThreadResume>
	  				osDelay(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f005 fc3c 	bl	8006958 <osDelay>
	  				osThreadSuspend(sendDataHandle);
 80010e0:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <StartDefaultTask+0x53c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 fbcf 	bl	8006888 <osThreadSuspend>


	  				currentTest++;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <StartDefaultTask+0x548>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3304      	adds	r3, #4
 80010f0:	4a39      	ldr	r2, [pc, #228]	; (80011d8 <StartDefaultTask+0x548>)
 80010f2:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <StartDefaultTask+0x548>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <StartDefaultTask+0x534>)
 80010fe:	701a      	strb	r2, [r3, #0]

	  				break;
 8001100:	e046      	b.n	8001190 <StartDefaultTask+0x500>
//					Below is proposed design setup for test 18 – 22 where both top inlets of the pump are connected
//					through metal tubing where when one pump goes through a series of test, the opposite solenoid will
//					remain closed.
//					Once Steps 18 –22 are completed, when can move forward with step 23.

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST_INIT\r\n");
 8001102:	4938      	ldr	r1, [pc, #224]	; (80011e4 <StartDefaultTask+0x554>)
 8001104:	4825      	ldr	r0, [pc, #148]	; (800119c <StartDefaultTask+0x50c>)
 8001106:	f008 ff17 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 800110a:	4925      	ldr	r1, [pc, #148]	; (80011a0 <StartDefaultTask+0x510>)
 800110c:	4823      	ldr	r0, [pc, #140]	; (800119c <StartDefaultTask+0x50c>)
 800110e:	f000 f90d 	bl	800132c <printMsg>
					osDelay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001116:	f005 fc1f 	bl	8006958 <osDelay>

	  				eNextState = ULTIMATE_MEASURE_TEST;
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <StartDefaultTask+0x534>)
 800111c:	220a      	movs	r2, #10
 800111e:	701a      	strb	r2, [r3, #0]

	  				break;
 8001120:	e036      	b.n	8001190 <StartDefaultTask+0x500>
	  			case ULTIMATE_MEASURE_TEST:

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST\r\n");
 8001122:	4931      	ldr	r1, [pc, #196]	; (80011e8 <StartDefaultTask+0x558>)
 8001124:	481d      	ldr	r0, [pc, #116]	; (800119c <StartDefaultTask+0x50c>)
 8001126:	f008 ff07 	bl	8009f38 <siprintf>
	  				printMsg(msg, &huart3);
 800112a:	491d      	ldr	r1, [pc, #116]	; (80011a0 <StartDefaultTask+0x510>)
 800112c:	481b      	ldr	r0, [pc, #108]	; (800119c <StartDefaultTask+0x50c>)
 800112e:	f000 f8fd 	bl	800132c <printMsg>
	  				osThreadResume(sendDataHandle);
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <StartDefaultTask+0x53c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f005 fbda 	bl	80068f0 <osThreadResume>
	  				osDelay(1000);
 800113c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001140:	f005 fc0a 	bl	8006958 <osDelay>
	  				osThreadSuspend(sendDataHandle);
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <StartDefaultTask+0x53c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f005 fb9d 	bl	8006888 <osThreadSuspend>

	  				currentTest++;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <StartDefaultTask+0x548>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3304      	adds	r3, #4
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <StartDefaultTask+0x548>)
 8001156:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <StartDefaultTask+0x548>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <StartDefaultTask+0x534>)
 8001162:	701a      	strb	r2, [r3, #0]
	  				break;
 8001164:	e014      	b.n	8001190 <StartDefaultTask+0x500>
//	  				sprintf(msg,"IDLE %0.3f\r\n", volts);
//	  				printMsg(msg, &huart3);
//	  				//currentTest++;
//	  				//eNextState = *currentTest;
//	  				flowRateMethod(0);
	  				osDelay(1000);
 8001166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116a:	f005 fbf5 	bl	8006958 <osDelay>
	  				eNextState = IDLE;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <StartDefaultTask+0x534>)
 8001170:	220b      	movs	r2, #11
 8001172:	701a      	strb	r2, [r3, #0]
	  				break;
 8001174:	e00c      	b.n	8001190 <StartDefaultTask+0x500>
	  			case STOP:
	  				eNextState = STOP;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <StartDefaultTask+0x534>)
 8001178:	220d      	movs	r2, #13
 800117a:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 800117c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001180:	f000 fcb2 	bl	8001ae8 <HAL_Delay>
	  				break;
 8001184:	e004      	b.n	8001190 <StartDefaultTask+0x500>
	  			default:
	  				eNextState = STOP;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <StartDefaultTask+0x534>)
 8001188:	220d      	movs	r2, #13
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e000      	b.n	8001190 <StartDefaultTask+0x500>
	  				break;
 800118e:	bf00      	nop
	  }

	  osDelay(1);
 8001190:	2001      	movs	r0, #1
 8001192:	f005 fbe1 	bl	8006958 <osDelay>
	  switch(eNextState) {
 8001196:	e57f      	b.n	8000c98 <StartDefaultTask+0x8>
 8001198:	0800c2f0 	.word	0x0800c2f0
 800119c:	20000848 	.word	0x20000848
 80011a0:	2000027c 	.word	0x2000027c
 80011a4:	0800c304 	.word	0x0800c304
 80011a8:	20000840 	.word	0x20000840
 80011ac:	20000268 	.word	0x20000268
 80011b0:	2000001c 	.word	0x2000001c
 80011b4:	20000020 	.word	0x20000020
 80011b8:	20000024 	.word	0x20000024
 80011bc:	20000028 	.word	0x20000028
 80011c0:	20000220 	.word	0x20000220
 80011c4:	20000004 	.word	0x20000004
 80011c8:	0800c348 	.word	0x0800c348
 80011cc:	20000810 	.word	0x20000810
 80011d0:	42c80000 	.word	0x42c80000
 80011d4:	0800c2d8 	.word	0x0800c2d8
 80011d8:	20000000 	.word	0x20000000
 80011dc:	0800c360 	.word	0x0800c360
 80011e0:	0800c378 	.word	0x0800c378
 80011e4:	0800c38c 	.word	0x0800c38c
 80011e8:	0800c3ac 	.word	0x0800c3ac

080011ec <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg,"Sending Data\r\n");
 80011f4:	4905      	ldr	r1, [pc, #20]	; (800120c <StartTask02+0x20>)
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <StartTask02+0x24>)
 80011f8:	f008 fe9e 	bl	8009f38 <siprintf>
	printMsg(msg, &huart3);
 80011fc:	4905      	ldr	r1, [pc, #20]	; (8001214 <StartTask02+0x28>)
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <StartTask02+0x24>)
 8001200:	f000 f894 	bl	800132c <printMsg>
    osDelay(250);
 8001204:	20fa      	movs	r0, #250	; 0xfa
 8001206:	f005 fba7 	bl	8006958 <osDelay>
	sprintf(msg,"Sending Data\r\n");
 800120a:	e7f3      	b.n	80011f4 <StartTask02+0x8>
 800120c:	0800c3c4 	.word	0x0800c3c4
 8001210:	20000848 	.word	0x20000848
 8001214:	2000027c 	.word	0x2000027c

08001218 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122a:	f000 fc3d 	bl	8001aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40001000 	.word	0x40001000

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f001 f99b 	bl	8002594 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 800125e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001262:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001266:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001298 <dacSet+0x50>
 800126a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800126e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80012a0 <dacSet+0x58>
 8001272:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001276:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800127a:	ee17 2a90 	vmov	r2, s15
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <dacSet+0x60>)
 8001280:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <dacSet+0x60>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f001 fa2e 	bl	80026ec <HAL_DAC_SetValue>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	66666666 	.word	0x66666666
 800129c:	400a6666 	.word	0x400a6666
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40affe00 	.word	0x40affe00
 80012a8:	200008b4 	.word	0x200008b4
 80012ac:	00000000 	.word	0x00000000

080012b0 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fc7d 	bl	8001bb8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 80012be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fd7a 	bl	8001dbc <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fe02 	bl	8001ed2 <HAL_ADC_GetValue>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <adcGet+0x70>)
 80012d4:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <adcGet+0x70>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001324 <adcGet+0x74>
 80012e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ee:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001318 <adcGet+0x68>
 80012f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <adcGet+0x78>)
 80012fc:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 fd27 	bl	8001d54 <HAL_ADC_Stop>
	return adcVolts;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <adcGet+0x78>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
}
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	66666666 	.word	0x66666666
 800131c:	400a6666 	.word	0x400a6666
 8001320:	200008b8 	.word	0x200008b8
 8001324:	457ff000 	.word	0x457ff000
 8001328:	200008bc 	.word	0x200008bc

0800132c <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char* str, UART_HandleTypeDef *huart2){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7fe ffd2 	bl	80002e0 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f003 fab4 	bl	80048b4 <HAL_UART_Transmit>
	return;
 800134c:	bf00      	nop
}
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <solenoidOpen>:
    // Now you can use buffer as a string
    //HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOpen(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 1);	// 3.3 V
	return;
 8001360:	bf00      	nop
}
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <solenoidClose>:
void solenoidClose(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 0);	// gnd
	return;
 8001378:	bf00      	nop
}
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <stepperOpen>:
// Public Functions		------------------------------------------------//

void stepperClose(){
}

void stepperOpen(){
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0001 	mvn.w	r0, #1
 80013d2:	f001 f893 	bl	80024fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_ADC_MspInit+0xa4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d13b      	bne.n	800147e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a20      	ldr	r2, [pc, #128]	; (800148c <HAL_ADC_MspInit+0xa8>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1a      	ldr	r2, [pc, #104]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_ADC_MspInit+0xa8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_ADC_MspInit+0xa8>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800144e:	2360      	movs	r3, #96	; 0x60
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <HAL_ADC_MspInit+0xac>)
 8001462:	f001 fa5d 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001466:	2302      	movs	r3, #2
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146a:	2303      	movs	r3, #3
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <HAL_ADC_MspInit+0xb0>)
 800147a:	f001 fa51 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40012000 	.word	0x40012000
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400

08001498 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_DAC_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12b      	bne.n	8001512 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_DAC_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_DAC_MspInit+0x88>)
 80014c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_DAC_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_DAC_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_DAC_MspInit+0x88>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_DAC_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ea:	2310      	movs	r3, #16
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <HAL_DAC_MspInit+0x8c>)
 80014fe:	f001 fa0f 	bl	8002920 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	210f      	movs	r1, #15
 8001506:	2036      	movs	r0, #54	; 0x36
 8001508:	f000 fff8 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800150c:	2036      	movs	r0, #54	; 0x36
 800150e:	f001 f811 	bl	8002534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40007400 	.word	0x40007400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ae      	sub	sp, #184	; 0xb8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2290      	movs	r2, #144	; 0x90
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f008 fd58 	bl	8009ffe <memset>
  if(huart->Instance==USART3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_UART_MspInit+0xc4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d144      	bne.n	80015e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800155e:	2300      	movs	r3, #0
 8001560:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fa4e 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001572:	f7ff fe63 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_UART_MspInit+0xc8>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_UART_MspInit+0xc8>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0xc8>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0xc8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0xc8>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0xc8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c0:	2307      	movs	r3, #7
 80015c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 80015ce:	f001 f9a7 	bl	8002920 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2105      	movs	r1, #5
 80015d6:	2027      	movs	r0, #39	; 0x27
 80015d8:	f000 ff90 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015dc:	2027      	movs	r0, #39	; 0x27
 80015de:	f000 ffa9 	bl	8002534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	37b8      	adds	r7, #184	; 0xb8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004800 	.word	0x40004800
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0ae      	sub	sp, #184	; 0xb8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2290      	movs	r2, #144	; 0x90
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f008 fcf0 	bl	8009ffe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001626:	d159      	bne.n	80016dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800162c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f9e5 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001644:	f7ff fdfa 	bl	800123c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001660:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800167a:	230a      	movs	r3, #10
 800167c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001684:	4619      	mov	r1, r3
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <HAL_PCD_MspInit+0xf0>)
 8001688:	f001 f94a 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800168c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <HAL_PCD_MspInit+0xf0>)
 80016a8:	f001 f93a 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b6:	6353      	str	r3, [r2, #52]	; 0x34
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ce:	6453      	str	r3, [r2, #68]	; 0x44
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	37b8      	adds	r7, #184	; 0xb8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08e      	sub	sp, #56	; 0x38
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_InitTick+0xe0>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a32      	ldr	r2, [pc, #200]	; (80017cc <HAL_InitTick+0xe0>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_InitTick+0xe0>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001714:	f107 0210 	add.w	r2, r7, #16
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f940 	bl	80039a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800172e:	f002 f911 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8001732:	6378      	str	r0, [r7, #52]	; 0x34
 8001734:	e004      	b.n	8001740 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001736:	f002 f90d 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 800173a:	4603      	mov	r3, r0
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001742:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <HAL_InitTick+0xe4>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	3b01      	subs	r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_InitTick+0xe8>)
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <HAL_InitTick+0xec>)
 8001752:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_InitTick+0xe8>)
 8001756:	f240 32e7 	movw	r2, #999	; 0x3e7
 800175a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_InitTick+0xe8>)
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001760:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_InitTick+0xe8>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_InitTick+0xe8>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_InitTick+0xe8>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001774:	4817      	ldr	r0, [pc, #92]	; (80017d4 <HAL_InitTick+0xe8>)
 8001776:	f002 fd6f 	bl	8004258 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001784:	2b00      	cmp	r3, #0
 8001786:	d11b      	bne.n	80017c0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001788:	4812      	ldr	r0, [pc, #72]	; (80017d4 <HAL_InitTick+0xe8>)
 800178a:	f002 fdc7 	bl	800431c <HAL_TIM_Base_Start_IT>
 800178e:	4603      	mov	r3, r0
 8001790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001794:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001798:	2b00      	cmp	r3, #0
 800179a:	d111      	bne.n	80017c0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800179c:	2036      	movs	r0, #54	; 0x36
 800179e:	f000 fec9 	bl	8002534 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d808      	bhi.n	80017ba <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	2036      	movs	r0, #54	; 0x36
 80017ae:	f000 fea5 	bl	80024fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_InitTick+0xf0>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e002      	b.n	80017c0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3738      	adds	r7, #56	; 0x38
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	200008c0 	.word	0x200008c0
 80017d8:	40001000 	.word	0x40001000
 80017dc:	20000030 	.word	0x20000030

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <USART3_IRQHandler+0x10>)
 8001812:	f003 f975 	bl	8004b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000027c 	.word	0x2000027c

08001820 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <TIM6_DAC_IRQHandler+0x20>)
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800182e:	4804      	ldr	r0, [pc, #16]	; (8001840 <TIM6_DAC_IRQHandler+0x20>)
 8001830:	f000 ff02 	bl	8002638 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <TIM6_DAC_IRQHandler+0x24>)
 8001836:	f002 fde9 	bl	800440c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000268 	.word	0x20000268
 8001844:	200008c0 	.word	0x200008c0

08001848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return 1;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_kill>:

int _kill(int pid, int sig)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001862:	f008 fc75 	bl	800a150 <__errno>
 8001866:	4603      	mov	r3, r0
 8001868:	2216      	movs	r2, #22
 800186a:	601a      	str	r2, [r3, #0]
  return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_exit>:

void _exit (int status)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ffe7 	bl	8001858 <_kill>
  while (1) {}    /* Make sure we hang here */
 800188a:	e7fe      	b.n	800188a <_exit+0x12>

0800188c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e00a      	b.n	80018b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189e:	f3af 8000 	nop.w
 80018a2:	4601      	mov	r1, r0
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60ba      	str	r2, [r7, #8]
 80018aa:	b2ca      	uxtb	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf0      	blt.n	800189e <_read+0x12>
  }

  return len;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e009      	b.n	80018ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf1      	blt.n	80018d8 <_write+0x12>
  }
  return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_close>:

int _close(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001926:	605a      	str	r2, [r3, #4]
  return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_isatty>:

int _isatty(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <_sbrk+0x5c>)
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <_sbrk+0x60>)
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <_sbrk+0x64>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001998:	f008 fbda 	bl	800a150 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	e009      	b.n	80019bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <_sbrk+0x64>)
 80019b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20080000 	.word	0x20080000
 80019c8:	00000400 	.word	0x00000400
 80019cc:	2000090c 	.word	0x2000090c
 80019d0:	20005440 	.word	0x20005440

080019d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001a16:	2301      	movs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fa63 	bl	8001eec <HAL_ADC_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8001a2c:	f7ff fc06 	bl	800123c <Error_Handler>
	}
	return;
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
}
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <Reset_Handler>:
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
 8001a46:	2300      	movs	r3, #0
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:
 8001a4a:	58d4      	ldr	r4, [r2, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:
 8001a50:	18c4      	adds	r4, r0, r3
 8001a52:	428c      	cmp	r4, r1
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:
 8001a62:	42a2      	cmp	r2, r4
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>
 8001a66:	f7ff ffb5 	bl	80019d4 <SystemInit>
 8001a6a:	f008 fb77 	bl	800a15c <__libc_init_array>
 8001a6e:	f7fe fe1d 	bl	80006ac <main>
 8001a72:	4770      	bx	lr
 8001a74:	20080000 	.word	0x20080000
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000204 	.word	0x20000204
 8001a80:	0800c7cc 	.word	0x0800c7cc
 8001a84:	20000204 	.word	0x20000204
 8001a88:	20005440 	.word	0x20005440

08001a8c <ADC_IRQHandler>:
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>

08001a8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a92:	2003      	movs	r0, #3
 8001a94:	f000 fd27 	bl	80024e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a98:	200f      	movs	r0, #15
 8001a9a:	f7ff fe27 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9e:	f7ff fc79 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000034 	.word	0x20000034
 8001acc:	20000910 	.word	0x20000910

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000910 	.word	0x20000910

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000034 	.word	0x20000034

08001b30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e031      	b.n	8001baa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fc48 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d116      	bne.n	8001b9c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_ADC_Init+0x84>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	f043 0202 	orr.w	r2, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fb0a 	bl	8002198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
 8001b9a:	e001      	b.n	8001ba0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	ffffeefd 	.word	0xffffeefd

08001bb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Start+0x1a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e0ad      	b.n	8001d2e <HAL_ADC_Start+0x176>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d018      	beq.n	8001c1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_ADC_Start+0x184>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	; (8001d40 <HAL_ADC_Start+0x188>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9a      	lsrs	r2, r3, #18
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c0c:	e002      	b.n	8001c14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d175      	bne.n	8001d14 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2c:	4b45      	ldr	r3, [pc, #276]	; (8001d44 <HAL_ADC_Start+0x18c>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c62:	d106      	bne.n	8001c72 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f023 0206 	bic.w	r2, r3, #6
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001c70:	e002      	b.n	8001c78 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <HAL_ADC_Start+0x190>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d143      	bne.n	8001d2c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	e03a      	b.n	8001d2c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a24      	ldr	r2, [pc, #144]	; (8001d4c <HAL_ADC_Start+0x194>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d10e      	bne.n	8001cde <HAL_ADC_Start+0x126>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cdc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_ADC_Start+0x190>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d120      	bne.n	8001d2c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <HAL_ADC_Start+0x198>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d11b      	bne.n	8001d2c <HAL_ADC_Start+0x174>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d114      	bne.n	8001d2c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	e00b      	b.n	8001d2c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f043 0210 	orr.w	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	2000002c 	.word	0x2000002c
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	fffff8fe 	.word	0xfffff8fe
 8001d48:	40012300 	.word	0x40012300
 8001d4c:	40012000 	.word	0x40012000
 8001d50:	40012200 	.word	0x40012200

08001d54 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Stop+0x16>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e01f      	b.n	8001daa <HAL_ADC_Stop+0x56>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_ADC_Stop+0x64>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	ffffeefe 	.word	0xffffeefe

08001dbc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd8:	d113      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de8:	d10b      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f043 0220 	orr.w	r2, r3, #32
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e063      	b.n	8001eca <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e02:	f7ff fe65 	bl	8001ad0 <HAL_GetTick>
 8001e06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e08:	e021      	b.n	8001e4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d01d      	beq.n	8001e4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_ADC_PollForConversion+0x6c>
 8001e18:	f7ff fe5a 	bl	8001ad0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d212      	bcs.n	8001e4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d00b      	beq.n	8001e4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f043 0204 	orr.w	r2, r3, #4
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e03d      	b.n	8001eca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d1d6      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0212 	mvn.w	r2, #18
 8001e64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d123      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d11f      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1c>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e136      	b.n	8002176 <HAL_ADC_ConfigChannel+0x28a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d93a      	bls.n	8001f8e <HAL_ADC_ConfigChannel+0xa2>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f20:	d035      	beq.n	8001f8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68d9      	ldr	r1, [r3, #12]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	2207      	movs	r2, #7
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a8d      	ldr	r2, [pc, #564]	; (8002184 <HAL_ADC_ConfigChannel+0x298>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10a      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68d9      	ldr	r1, [r3, #12]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	061a      	lsls	r2, r3, #24
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f66:	e035      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4403      	add	r3, r0
 8001f80:	3b1e      	subs	r3, #30
 8001f82:	409a      	lsls	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f8c:	e022      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6919      	ldr	r1, [r3, #16]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	400a      	ands	r2, r1
 8001fb0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4403      	add	r3, r0
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b06      	cmp	r3, #6
 8001fda:	d824      	bhi.n	8002026 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b05      	subs	r3, #5
 8001fee:	221f      	movs	r2, #31
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b05      	subs	r3, #5
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
 8002024:	e04c      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d824      	bhi.n	8002078 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b23      	subs	r3, #35	; 0x23
 8002040:	221f      	movs	r2, #31
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	400a      	ands	r2, r1
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b23      	subs	r3, #35	; 0x23
 800206a:	fa00 f203 	lsl.w	r2, r0, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
 8002076:	e023      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b41      	subs	r3, #65	; 0x41
 800208a:	221f      	movs	r2, #31
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43da      	mvns	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	400a      	ands	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b41      	subs	r3, #65	; 0x41
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a30      	ldr	r2, [pc, #192]	; (8002188 <HAL_ADC_ConfigChannel+0x29c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10a      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1f4>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020d2:	d105      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a2c      	ldr	r2, [pc, #176]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 80020da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a28      	ldr	r2, [pc, #160]	; (8002188 <HAL_ADC_ConfigChannel+0x29c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10f      	bne.n	800210a <HAL_ADC_ConfigChannel+0x21e>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b12      	cmp	r3, #18
 80020f0:	d10b      	bne.n	800210a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 80020f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020fc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 8002104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002108:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <HAL_ADC_ConfigChannel+0x29c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d12b      	bne.n	800216c <HAL_ADC_ConfigChannel+0x280>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_ADC_ConfigChannel+0x298>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d003      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b11      	cmp	r3, #17
 8002124:	d122      	bne.n	800216c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 800212c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002130:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <HAL_ADC_ConfigChannel+0x2a0>)
 8002138:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800213c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_ADC_ConfigChannel+0x298>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d111      	bne.n	800216c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_ADC_ConfigChannel+0x2a4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_ADC_ConfigChannel+0x2a8>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9a      	lsrs	r2, r3, #18
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800215e:	e002      	b.n	8002166 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3b01      	subs	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	10000012 	.word	0x10000012
 8002188:	40012000 	.word	0x40012000
 800218c:	40012300 	.word	0x40012300
 8002190:	2000002c 	.word	0x2000002c
 8002194:	431bde83 	.word	0x431bde83

08002198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80021a0:	4b78      	ldr	r3, [pc, #480]	; (8002384 <ADC_Init+0x1ec>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a77      	ldr	r2, [pc, #476]	; (8002384 <ADC_Init+0x1ec>)
 80021a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80021ac:	4b75      	ldr	r3, [pc, #468]	; (8002384 <ADC_Init+0x1ec>)
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4973      	ldr	r1, [pc, #460]	; (8002384 <ADC_Init+0x1ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	021a      	lsls	r2, r3, #8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	4a58      	ldr	r2, [pc, #352]	; (8002388 <ADC_Init+0x1f0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800225c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	e00f      	b.n	8002292 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002290:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0202 	bic.w	r2, r2, #2
 80022a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6899      	ldr	r1, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	005a      	lsls	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	3b01      	subs	r3, #1
 80022ec:	035a      	lsls	r2, r3, #13
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	e007      	b.n	8002308 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002306:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	3b01      	subs	r3, #1
 8002324:	051a      	lsls	r2, r3, #20
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800233c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800234a:	025a      	lsls	r2, r3, #9
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	029a      	lsls	r2, r3, #10
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40012300 	.word	0x40012300
 8002388:	0f000001 	.word	0x0f000001

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <__NVIC_SetPriorityGrouping+0x40>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x40>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	05fa0000 	.word	0x05fa0000

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff4c 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250e:	f7ff ff61 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7ff ffb1 	bl	8002480 <NVIC_EncodePriority>
 800251e:	4602      	mov	r2, r0
 8002520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff80 	bl	800242c <__NVIC_SetPriority>
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff54 	bl	80023f0 <__NVIC_EnableIRQ>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e014      	b.n	800258c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	791b      	ldrb	r3, [r3, #4]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe ff90 	bl	8001498 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	795b      	ldrb	r3, [r3, #5]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_DAC_Start+0x16>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e040      	b.n	800262c <HAL_DAC_Start+0x98>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2201      	movs	r2, #1
 80025c4:	409a      	lsls	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80025de:	2b3c      	cmp	r3, #60	; 0x3c
 80025e0:	d11d      	bne.n	800261e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	e014      	b.n	800261e <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	213c      	movs	r1, #60	; 0x3c
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	429a      	cmp	r2, r3
 800260c:	d107      	bne.n	800261e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0202 	orr.w	r2, r2, #2
 800261c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264e:	d120      	bne.n	8002692 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265e:	d118      	bne.n	8002692 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2204      	movs	r2, #4
 8002664:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800268a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f852 	bl	8002736 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800269c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a0:	d120      	bne.n	80026e4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b0:	d118      	bne.n	80026e4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2204      	movs	r2, #4
 80026b6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80026dc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f882 	bl	80027e8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	3308      	adds	r3, #8
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e004      	b.n	8002720 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3314      	adds	r3, #20
 800271e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	461a      	mov	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800274a:	b480      	push	{r7}
 800274c:	b087      	sub	sp, #28
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	795b      	ldrb	r3, [r3, #5]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_DAC_ConfigChannel+0x18>
 800275e:	2302      	movs	r3, #2
 8002760:	e03c      	b.n	80027dc <HAL_DAC_ConfigChannel+0x92>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2202      	movs	r2, #2
 800276c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4013      	ands	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	22c0      	movs	r2, #192	; 0xc0
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800280a:	f7ff f961 	bl	8001ad0 <HAL_GetTick>
 800280e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d008      	beq.n	800282e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e052      	b.n	80028d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0216 	bic.w	r2, r2, #22
 800283c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <HAL_DMA_Abort+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0208 	bic.w	r2, r2, #8
 800286c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287e:	e013      	b.n	80028a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002880:	f7ff f926 	bl	8001ad0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b05      	cmp	r3, #5
 800288c:	d90c      	bls.n	80028a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2203      	movs	r2, #3
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e015      	b.n	80028d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e4      	bne.n	8002880 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	223f      	movs	r2, #63	; 0x3f
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d004      	beq.n	80028fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00c      	b.n	8002914 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2205      	movs	r2, #5
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e175      	b.n	8002c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002940:	2201      	movs	r2, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	429a      	cmp	r2, r3
 800295a:	f040 8164 	bne.w	8002c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d005      	beq.n	8002976 <HAL_GPIO_Init+0x56>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d130      	bne.n	80029d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 0201 	and.w	r2, r3, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d017      	beq.n	8002a14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d123      	bne.n	8002a68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	69b9      	ldr	r1, [r7, #24]
 8002a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80be 	beq.w	8002c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ac2:	4a61      	ldr	r2, [pc, #388]	; (8002c48 <HAL_GPIO_Init+0x328>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_GPIO_Init+0x32c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d037      	beq.n	8002b5e <HAL_GPIO_Init+0x23e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a57      	ldr	r2, [pc, #348]	; (8002c50 <HAL_GPIO_Init+0x330>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_GPIO_Init+0x23a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02b      	beq.n	8002b56 <HAL_GPIO_Init+0x236>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a55      	ldr	r2, [pc, #340]	; (8002c58 <HAL_GPIO_Init+0x338>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d025      	beq.n	8002b52 <HAL_GPIO_Init+0x232>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <HAL_GPIO_Init+0x33c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01f      	beq.n	8002b4e <HAL_GPIO_Init+0x22e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a53      	ldr	r2, [pc, #332]	; (8002c60 <HAL_GPIO_Init+0x340>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d019      	beq.n	8002b4a <HAL_GPIO_Init+0x22a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_GPIO_Init+0x344>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x226>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_GPIO_Init+0x348>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x222>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a50      	ldr	r2, [pc, #320]	; (8002c6c <HAL_GPIO_Init+0x34c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x21e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4f      	ldr	r2, [pc, #316]	; (8002c70 <HAL_GPIO_Init+0x350>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x21a>
 8002b36:	2309      	movs	r3, #9
 8002b38:	e012      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	e010      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	e00e      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e00c      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00a      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x240>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_GPIO_Init+0x328>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a34      	ldr	r2, [pc, #208]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd2:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <HAL_GPIO_Init+0x354>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f ae86 	bls.w	8002940 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40021400 	.word	0x40021400
 8002c64:	40021800 	.word	0x40021800
 8002c68:	40021c00 	.word	0x40021c00
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40022400 	.word	0x40022400
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c94:	e003      	b.n	8002c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cac:	b08f      	sub	sp, #60	; 0x3c
 8002cae:	af0a      	add	r7, sp, #40	; 0x28
 8002cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e116      	b.n	8002eea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fc8e 	bl	80015f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fa10 	bl	8006120 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	687e      	ldr	r6, [r7, #4]
 8002d08:	466d      	mov	r5, sp
 8002d0a:	f106 0410 	add.w	r4, r6, #16
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1e:	1d33      	adds	r3, r6, #4
 8002d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f003 f9a4 	bl	8006070 <USB_CoreInit>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0d7      	b.n	8002eea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 f9fe 	bl	8006142 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e04a      	b.n	8002de2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	333d      	adds	r3, #61	; 0x3d
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	333c      	adds	r3, #60	; 0x3c
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	b298      	uxth	r0, r3
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3344      	adds	r3, #68	; 0x44
 8002d88:	4602      	mov	r2, r0
 8002d8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3340      	adds	r3, #64	; 0x40
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3348      	adds	r3, #72	; 0x48
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	; 0x4c
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3354      	adds	r3, #84	; 0x54
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3af      	bcc.n	8002d4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e044      	b.n	8002e7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002df2:	7bfa      	ldrb	r2, [r7, #15]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3b5      	bcc.n	8002df2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	687e      	ldr	r6, [r7, #4]
 8002e8e:	466d      	mov	r5, sp
 8002e90:	f106 0410 	add.w	r4, r6, #16
 8002e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea4:	1d33      	adds	r3, r6, #4
 8002ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	f003 f997 	bl	80061dc <USB_DevInit>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e014      	b.n	8002eea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f80b 	bl	8002ef4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 fb55 	bl	8006592 <USB_DevDisconnect>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ef4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	10000003 	.word	0x10000003

08002f3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f8a:	f7fe fda1 	bl	8001ad0 <HAL_GetTick>
 8002f8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f90:	e009      	b.n	8002fa6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f92:	f7fe fd9d 	bl	8001ad0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa0:	d901      	bls.n	8002fa6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e022      	b.n	8002fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc0:	f7fe fd86 	bl	8001ad0 <HAL_GetTick>
 8002fc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc6:	e009      	b.n	8002fdc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fc8:	f7fe fd82 	bl	8001ad0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd6:	d901      	bls.n	8002fdc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e007      	b.n	8002fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d1ee      	bne.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e29b      	b.n	800354a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003020:	4b96      	ldr	r3, [pc, #600]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302c:	4b93      	ldr	r3, [pc, #588]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d112      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
 8003038:	4b90      	ldr	r3, [pc, #576]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b8d      	ldr	r3, [pc, #564]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06c      	beq.n	800312c <HAL_RCC_OscConfig+0x130>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e275      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x7a>
 8003068:	4b84      	ldr	r3, [pc, #528]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a83      	ldr	r2, [pc, #524]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x9c>
 800307e:	4b7f      	ldr	r3, [pc, #508]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7e      	ldr	r2, [pc, #504]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b7c      	ldr	r3, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7b      	ldr	r2, [pc, #492]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xc0>
 80030a2:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a75      	ldr	r2, [pc, #468]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a72      	ldr	r2, [pc, #456]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 80030bc:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6e      	ldr	r2, [pc, #440]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b6c      	ldr	r3, [pc, #432]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6b      	ldr	r2, [pc, #428]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fcf8 	bl	8001ad0 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe fcf4 	bl	8001ad0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e229      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe8>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe fce4 	bl	8001ad0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe fce0 	bl	8001ad0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e215      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b57      	ldr	r3, [pc, #348]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x110>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d069      	beq.n	800320e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x190>
 8003152:	4b4a      	ldr	r3, [pc, #296]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x17a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1e9      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	493d      	ldr	r1, [pc, #244]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e040      	b.n	800320e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d023      	beq.n	80031dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a38      	ldr	r2, [pc, #224]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fc96 	bl	8001ad0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe fc92 	bl	8001ad0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1c7      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b30      	ldr	r3, [pc, #192]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4929      	ldr	r1, [pc, #164]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
 80031da:	e018      	b.n	800320e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fc72 	bl	8001ad0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe fc6e 	bl	8001ad0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1a3      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d038      	beq.n	800328c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fe fc4f 	bl	8001ad0 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003236:	f7fe fc4b 	bl	8001ad0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e180      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x23a>
 8003254:	e01a      	b.n	800328c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fc35 	bl	8001ad0 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326a:	f7fe fc31 	bl	8001ad0 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d903      	bls.n	8003280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e166      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
 800327c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	4b92      	ldr	r3, [pc, #584]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a4 	beq.w	80033e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b8c      	ldr	r3, [pc, #560]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b89      	ldr	r3, [pc, #548]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a88      	ldr	r2, [pc, #544]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b86      	ldr	r3, [pc, #536]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c2:	4b83      	ldr	r3, [pc, #524]	; (80034d0 <HAL_RCC_OscConfig+0x4d4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ce:	4b80      	ldr	r3, [pc, #512]	; (80034d0 <HAL_RCC_OscConfig+0x4d4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7f      	ldr	r2, [pc, #508]	; (80034d0 <HAL_RCC_OscConfig+0x4d4>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe fbf9 	bl	8001ad0 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe fbf5 	bl	8001ad0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e12a      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f4:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x4d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x31a>
 8003308:	4b70      	ldr	r3, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a6f      	ldr	r2, [pc, #444]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e02d      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x33c>
 800331e:	4b6b      	ldr	r3, [pc, #428]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a6a      	ldr	r2, [pc, #424]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a67      	ldr	r2, [pc, #412]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x35e>
 8003340:	4b62      	ldr	r3, [pc, #392]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a61      	ldr	r2, [pc, #388]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b5f      	ldr	r3, [pc, #380]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a5e      	ldr	r2, [pc, #376]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 800335a:	4b5c      	ldr	r3, [pc, #368]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a5b      	ldr	r2, [pc, #364]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b59      	ldr	r3, [pc, #356]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a58      	ldr	r2, [pc, #352]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe fba9 	bl	8001ad0 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe fba5 	bl	8001ad0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0d8      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x386>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fe fb93 	bl	8001ad0 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe fb8f 	bl	8001ad0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0c2      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80ae 	beq.w	8003548 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d06d      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d14b      	bne.n	8003498 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a31      	ldr	r2, [pc, #196]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fb60 	bl	8001ad0 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe fb5c 	bl	8001ad0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e091      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	4b29      	ldr	r3, [pc, #164]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	071b      	lsls	r3, r3, #28
 800345e:	491b      	ldr	r1, [pc, #108]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fb2e 	bl	8001ad0 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fb2a 	bl	8001ad0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e05f      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x47c>
 8003496:	e057      	b.n	8003548 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 800349e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fb14 	bl	8001ad0 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fb10 	bl	8001ad0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e045      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x4b0>
 80034ca:	e03d      	b.n	8003548 <HAL_RCC_OscConfig+0x54c>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_RCC_OscConfig+0x558>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d030      	beq.n	8003544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d129      	bne.n	8003544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d122      	bne.n	8003544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800350a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800350c:	4293      	cmp	r3, r2
 800350e:	d119      	bne.n	8003544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3b01      	subs	r3, #1
 800351e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d10f      	bne.n	8003544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0d0      	b.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d910      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	4965      	ldr	r1, [pc, #404]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b8      	b.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b8:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d0:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a52      	ldr	r2, [pc, #328]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	494d      	ldr	r1, [pc, #308]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d040      	beq.n	800367c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d115      	bne.n	800363a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e07f      	b.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e073      	b.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06b      	b.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4936      	ldr	r1, [pc, #216]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800364c:	f7fe fa40 	bl	8001ad0 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fe fa3c 	bl	8001ad0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e053      	b.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d210      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	4922      	ldr	r1, [pc, #136]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e032      	b.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4916      	ldr	r1, [pc, #88]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	490e      	ldr	r1, [pc, #56]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ea:	f000 f821 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	490a      	ldr	r1, [pc, #40]	; (8003724 <HAL_RCC_ClockConfig+0x1cc>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x1d0>)
 8003704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_ClockConfig+0x1d4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd ffee 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023c00 	.word	0x40023c00
 8003720:	40023800 	.word	0x40023800
 8003724:	0800c434 	.word	0x0800c434
 8003728:	2000002c 	.word	0x2000002c
 800372c:	20000030 	.word	0x20000030

08003730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003734:	b094      	sub	sp, #80	; 0x50
 8003736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	647b      	str	r3, [r7, #68]	; 0x44
 800373c:	2300      	movs	r3, #0
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003740:	2300      	movs	r3, #0
 8003742:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003748:	4b79      	ldr	r3, [pc, #484]	; (8003930 <HAL_RCC_GetSysClockFreq+0x200>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b08      	cmp	r3, #8
 8003752:	d00d      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x40>
 8003754:	2b08      	cmp	r3, #8
 8003756:	f200 80e1 	bhi.w	800391c <HAL_RCC_GetSysClockFreq+0x1ec>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x34>
 800375e:	2b04      	cmp	r3, #4
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x3a>
 8003762:	e0db      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b73      	ldr	r3, [pc, #460]	; (8003934 <HAL_RCC_GetSysClockFreq+0x204>)
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003768:	e0db      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800376a:	4b73      	ldr	r3, [pc, #460]	; (8003938 <HAL_RCC_GetSysClockFreq+0x208>)
 800376c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800376e:	e0d8      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003770:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800377a:	4b6d      	ldr	r3, [pc, #436]	; (8003930 <HAL_RCC_GetSysClockFreq+0x200>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d063      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003786:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_GetSysClockFreq+0x200>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	099b      	lsrs	r3, r3, #6
 800378c:	2200      	movs	r2, #0
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003790:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
 800379a:	2300      	movs	r3, #0
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
 800379e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	f04f 0000 	mov.w	r0, #0
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	0159      	lsls	r1, r3, #5
 80037b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b4:	0150      	lsls	r0, r2, #5
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4621      	mov	r1, r4
 80037bc:	1a51      	subs	r1, r2, r1
 80037be:	6139      	str	r1, [r7, #16]
 80037c0:	4629      	mov	r1, r5
 80037c2:	eb63 0301 	sbc.w	r3, r3, r1
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d4:	4659      	mov	r1, fp
 80037d6:	018b      	lsls	r3, r1, #6
 80037d8:	4651      	mov	r1, sl
 80037da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037de:	4651      	mov	r1, sl
 80037e0:	018a      	lsls	r2, r1, #6
 80037e2:	4651      	mov	r1, sl
 80037e4:	ebb2 0801 	subs.w	r8, r2, r1
 80037e8:	4659      	mov	r1, fp
 80037ea:	eb63 0901 	sbc.w	r9, r3, r1
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003802:	4690      	mov	r8, r2
 8003804:	4699      	mov	r9, r3
 8003806:	4623      	mov	r3, r4
 8003808:	eb18 0303 	adds.w	r3, r8, r3
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	462b      	mov	r3, r5
 8003810:	eb49 0303 	adc.w	r3, r9, r3
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003822:	4629      	mov	r1, r5
 8003824:	024b      	lsls	r3, r1, #9
 8003826:	4621      	mov	r1, r4
 8003828:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800382c:	4621      	mov	r1, r4
 800382e:	024a      	lsls	r2, r1, #9
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003836:	2200      	movs	r2, #0
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
 800383a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800383c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003840:	f7fc fd56 	bl	80002f0 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800384c:	e058      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b38      	ldr	r3, [pc, #224]	; (8003930 <HAL_RCC_GetSysClockFreq+0x200>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	2200      	movs	r2, #0
 8003856:	4618      	mov	r0, r3
 8003858:	4611      	mov	r1, r2
 800385a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	2300      	movs	r3, #0
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003868:	4642      	mov	r2, r8
 800386a:	464b      	mov	r3, r9
 800386c:	f04f 0000 	mov.w	r0, #0
 8003870:	f04f 0100 	mov.w	r1, #0
 8003874:	0159      	lsls	r1, r3, #5
 8003876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800387a:	0150      	lsls	r0, r2, #5
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4641      	mov	r1, r8
 8003882:	ebb2 0a01 	subs.w	sl, r2, r1
 8003886:	4649      	mov	r1, r9
 8003888:	eb63 0b01 	sbc.w	fp, r3, r1
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003898:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800389c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038a0:	ebb2 040a 	subs.w	r4, r2, sl
 80038a4:	eb63 050b 	sbc.w	r5, r3, fp
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	00eb      	lsls	r3, r5, #3
 80038b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b6:	00e2      	lsls	r2, r4, #3
 80038b8:	4614      	mov	r4, r2
 80038ba:	461d      	mov	r5, r3
 80038bc:	4643      	mov	r3, r8
 80038be:	18e3      	adds	r3, r4, r3
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	464b      	mov	r3, r9
 80038c4:	eb45 0303 	adc.w	r3, r5, r3
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038d6:	4629      	mov	r1, r5
 80038d8:	028b      	lsls	r3, r1, #10
 80038da:	4621      	mov	r1, r4
 80038dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e0:	4621      	mov	r1, r4
 80038e2:	028a      	lsls	r2, r1, #10
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ea:	2200      	movs	r2, #0
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	61fa      	str	r2, [r7, #28]
 80038f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f4:	f7fc fcfc 	bl	80002f0 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_GetSysClockFreq+0x200>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	3301      	adds	r3, #1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetSysClockFreq+0x204>)
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003924:	4618      	mov	r0, r3
 8003926:	3750      	adds	r7, #80	; 0x50
 8003928:	46bd      	mov	sp, r7
 800392a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	00f42400 	.word	0x00f42400
 8003938:	007a1200 	.word	0x007a1200

0800393c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_GetHCLKFreq+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	2000002c 	.word	0x2000002c

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff0 	bl	800393c <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800
 8003978:	0800c444 	.word	0x0800c444

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff ffdc 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0b5b      	lsrs	r3, r3, #13
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	0800c444 	.word	0x0800c444

080039a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	220f      	movs	r2, #15
 80039b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_RCC_GetClockConfig+0x5c>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0203 	and.w	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_RCC_GetClockConfig+0x5c>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_RCC_GetClockConfig+0x5c>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_GetClockConfig+0x5c>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	08db      	lsrs	r3, r3, #3
 80039de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_RCC_GetClockConfig+0x60>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	601a      	str	r2, [r3, #0]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40023c00 	.word	0x40023c00

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d012      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a30:	4b69      	ldr	r3, [pc, #420]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a68      	ldr	r2, [pc, #416]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a3a:	6093      	str	r3, [r2, #8]
 8003a3c:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	4964      	ldr	r1, [pc, #400]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d017      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a62:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	4959      	ldr	r1, [pc, #356]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a80:	d101      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	494a      	ldr	r1, [pc, #296]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 808b 	beq.w	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	4a39      	ldr	r2, [pc, #228]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	; 0x40
 8003af8:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b04:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fd ffde 	bl	8001ad0 <HAL_GetTick>
 8003b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fd ffda 	bl	8001ad0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e38f      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d035      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d02e      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b54:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d114      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd ffa2 	bl	8001ad0 <HAL_GetTick>
 8003b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fd ff9e 	bl	8001ad0 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e351      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0ee      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bce:	400b      	ands	r3, r1
 8003bd0:	4901      	ldr	r1, [pc, #4]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	0ffffcff 	.word	0x0ffffcff
 8003be4:	4bac      	ldr	r3, [pc, #688]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4aab      	ldr	r2, [pc, #684]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	4ba9      	ldr	r3, [pc, #676]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	49a6      	ldr	r1, [pc, #664]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c0e:	4ba2      	ldr	r3, [pc, #648]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	4aa0      	ldr	r2, [pc, #640]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c1e:	4b9e      	ldr	r3, [pc, #632]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	499b      	ldr	r1, [pc, #620]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3c:	4b96      	ldr	r3, [pc, #600]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4a:	4993      	ldr	r1, [pc, #588]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5e:	4b8e      	ldr	r3, [pc, #568]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6c:	498a      	ldr	r1, [pc, #552]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c80:	4b85      	ldr	r3, [pc, #532]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8e:	4982      	ldr	r1, [pc, #520]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4979      	ldr	r1, [pc, #484]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc4:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f023 0203 	bic.w	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	4971      	ldr	r1, [pc, #452]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ce6:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f023 020c 	bic.w	r2, r3, #12
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	4968      	ldr	r1, [pc, #416]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d08:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	4960      	ldr	r1, [pc, #384]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d2a:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	4957      	ldr	r1, [pc, #348]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d4c:	4b52      	ldr	r3, [pc, #328]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	494f      	ldr	r1, [pc, #316]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	4946      	ldr	r1, [pc, #280]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d90:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	493e      	ldr	r1, [pc, #248]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003db2:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	4935      	ldr	r1, [pc, #212]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de2:	492d      	ldr	r1, [pc, #180]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d011      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e04:	4924      	ldr	r1, [pc, #144]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e14:	d101      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e36:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	4914      	ldr	r1, [pc, #80]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e68:	490b      	ldr	r1, [pc, #44]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00f      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	4902      	ldr	r1, [pc, #8]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e94:	e002      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ea8:	4b8a      	ldr	r3, [pc, #552]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	4986      	ldr	r1, [pc, #536]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ecc:	4b81      	ldr	r3, [pc, #516]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003edc:	497d      	ldr	r1, [pc, #500]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d006      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80d6 	beq.w	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef8:	4b76      	ldr	r3, [pc, #472]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a75      	ldr	r2, [pc, #468]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fd fde4 	bl	8001ad0 <HAL_GetTick>
 8003f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f0c:	f7fd fde0 	bl	8001ad0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e195      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f1e:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d021      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f4c:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f52:	0e1b      	lsrs	r3, r3, #24
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	019a      	lsls	r2, r3, #6
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	071b      	lsls	r3, r3, #28
 8003f72:	4958      	ldr	r1, [pc, #352]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa4:	d129      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fa6:	4b4b      	ldr	r3, [pc, #300]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fb4:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fba:	0f1b      	lsrs	r3, r3, #28
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	019a      	lsls	r2, r3, #6
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	071b      	lsls	r3, r3, #28
 8003fda:	493e      	ldr	r1, [pc, #248]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fe2:	4b3c      	ldr	r3, [pc, #240]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe8:	f023 021f 	bic.w	r2, r3, #31
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	4938      	ldr	r1, [pc, #224]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01d      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004006:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	0e1b      	lsrs	r3, r3, #24
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004014:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401a:	0f1b      	lsrs	r3, r3, #28
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	019a      	lsls	r2, r3, #6
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	061b      	lsls	r3, r3, #24
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	071b      	lsls	r3, r3, #28
 800403a:	4926      	ldr	r1, [pc, #152]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d011      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	019a      	lsls	r2, r3, #6
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	491a      	ldr	r1, [pc, #104]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a17      	ldr	r2, [pc, #92]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800407c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407e:	f7fd fd27 	bl	8001ad0 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004086:	f7fd fd23 	bl	8001ad0 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b64      	cmp	r3, #100	; 0x64
 8004092:	d901      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e0d8      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	f040 80ce 	bne.w	8004248 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fd fd0a 	bl	8001ad0 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040be:	e00b      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c0:	f7fd fd06 	bl	8001ad0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d904      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e0bb      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d8:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e4:	d0ec      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02e      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d12a      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800411c:	4b4d      	ldr	r3, [pc, #308]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	0f1b      	lsrs	r3, r3, #28
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	019a      	lsls	r2, r3, #6
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	431a      	orrs	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	4944      	ldr	r1, [pc, #272]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800414a:	4b42      	ldr	r3, [pc, #264]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004150:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	3b01      	subs	r3, #1
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	493d      	ldr	r1, [pc, #244]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004178:	d11d      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004188:	4b32      	ldr	r3, [pc, #200]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	0f1b      	lsrs	r3, r3, #28
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	019a      	lsls	r2, r3, #6
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	431a      	orrs	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	061b      	lsls	r3, r3, #24
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	071b      	lsls	r3, r3, #28
 80041ae:	4929      	ldr	r1, [pc, #164]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d028      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	0e1b      	lsrs	r3, r3, #24
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041d0:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	019a      	lsls	r2, r3, #6
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	431a      	orrs	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	071b      	lsls	r3, r3, #28
 80041f6:	4917      	ldr	r1, [pc, #92]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4911      	ldr	r1, [pc, #68]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fd fc56 	bl	8001ad0 <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004228:	f7fd fc52 	bl	8001ad0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e007      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004246:	d1ef      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800

08004258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e049      	b.n	80042fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f841 	bl	8004306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 fa00 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d001      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e054      	b.n	80043de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_TIM_Base_Start_IT+0xd0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435e:	d01d      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1e      	ldr	r2, [pc, #120]	; (80043fc <HAL_TIM_Base_Start_IT+0xe0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <HAL_TIM_Base_Start_IT+0xe4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <HAL_TIM_Base_Start_IT+0xe8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d115      	bne.n	80043c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_TIM_Base_Start_IT+0xec>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d015      	beq.n	80043da <HAL_TIM_Base_Start_IT+0xbe>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b4:	d011      	beq.n	80043da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	e008      	b.n	80043da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e000      	b.n	80043dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40010400 	.word	0x40010400
 8004400:	40014000 	.word	0x40014000
 8004404:	40001800 	.word	0x40001800
 8004408:	00010007 	.word	0x00010007

0800440c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d122      	bne.n	8004468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d11b      	bne.n	8004468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0202 	mvn.w	r2, #2
 8004438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f905 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8f7 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f908 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b04      	cmp	r3, #4
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b04      	cmp	r3, #4
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0204 	mvn.w	r2, #4
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8db 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8cd 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8de 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0208 	mvn.w	r2, #8
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8b1 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8a3 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8b4 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b10      	cmp	r3, #16
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b10      	cmp	r3, #16
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0210 	mvn.w	r2, #16
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2208      	movs	r2, #8
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f887 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f879 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f88a 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d10e      	bne.n	8004590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d107      	bne.n	8004590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0201 	mvn.w	r2, #1
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc fe44 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b80      	cmp	r3, #128	; 0x80
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f91a 	bl	80047f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ca:	d10e      	bne.n	80045ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f90d 	bl	8004804 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d10e      	bne.n	8004616 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d107      	bne.n	8004616 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800460e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f838 	bl	8004686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d10e      	bne.n	8004642 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d107      	bne.n	8004642 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f06f 0220 	mvn.w	r2, #32
 800463a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8cd 	bl	80047dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a40      	ldr	r2, [pc, #256]	; (80047b0 <TIM_Base_SetConfig+0x114>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d00f      	beq.n	80046dc <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a3d      	ldr	r2, [pc, #244]	; (80047b4 <TIM_Base_SetConfig+0x118>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a3c      	ldr	r2, [pc, #240]	; (80047b8 <TIM_Base_SetConfig+0x11c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0x40>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a3b      	ldr	r2, [pc, #236]	; (80047bc <TIM_Base_SetConfig+0x120>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3a      	ldr	r2, [pc, #232]	; (80047c0 <TIM_Base_SetConfig+0x124>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d108      	bne.n	80046ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2f      	ldr	r2, [pc, #188]	; (80047b0 <TIM_Base_SetConfig+0x114>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d02b      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fc:	d027      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <TIM_Base_SetConfig+0x118>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d023      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a2b      	ldr	r2, [pc, #172]	; (80047b8 <TIM_Base_SetConfig+0x11c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01f      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <TIM_Base_SetConfig+0x120>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01b      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a29      	ldr	r2, [pc, #164]	; (80047c0 <TIM_Base_SetConfig+0x124>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d017      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a28      	ldr	r2, [pc, #160]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <TIM_Base_SetConfig+0x12c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00f      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a26      	ldr	r2, [pc, #152]	; (80047cc <TIM_Base_SetConfig+0x130>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00b      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <TIM_Base_SetConfig+0x134>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <TIM_Base_SetConfig+0x13c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d108      	bne.n	8004760 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <TIM_Base_SetConfig+0x114>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0xf8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <TIM_Base_SetConfig+0x124>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d103      	bne.n	800479c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	615a      	str	r2, [r3, #20]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800
 80047bc:	40000c00 	.word	0x40000c00
 80047c0:	40010400 	.word	0x40010400
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800
 80047d0:	40001800 	.word	0x40001800
 80047d4:	40001c00 	.word	0x40001c00
 80047d8:	40002000 	.word	0x40002000

080047dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e040      	b.n	80048ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fe74 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2224      	movs	r2, #36	; 0x24
 8004844:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fc64 	bl	8005124 <UART_SetConfig>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e022      	b.n	80048ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 febc 	bl	80055ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 ff43 	bl	8005730 <UART_CheckIdleState>
 80048aa:	4603      	mov	r3, r0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d171      	bne.n	80049b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Transmit+0x24>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e06a      	b.n	80049b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2221      	movs	r2, #33	; 0x21
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ea:	f7fd f8f1 	bl	8001ad0 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004908:	d108      	bne.n	800491c <HAL_UART_Transmit+0x68>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	e003      	b.n	8004924 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004924:	e02c      	b.n	8004980 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2200      	movs	r2, #0
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 ff4a 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e038      	b.n	80049b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	3302      	adds	r3, #2
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e007      	b.n	800496e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	3301      	adds	r3, #1
 800496c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1cc      	bne.n	8004926 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	2140      	movs	r1, #64	; 0x40
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 ff17 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e005      	b.n	80049b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049bc:	b480      	push	{r7}
 80049be:	b08b      	sub	sp, #44	; 0x2c
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d147      	bne.n	8004a62 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_UART_Transmit_IT+0x22>
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e040      	b.n	8004a64 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2221      	movs	r2, #33	; 0x21
 8004a0a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a14:	d107      	bne.n	8004a26 <HAL_UART_Transmit_IT+0x6a>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <HAL_UART_Transmit_IT+0xb4>)
 8004a22:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a24:	e002      	b.n	8004a2c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <HAL_UART_Transmit_IT+0xb8>)
 8004a2a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	69f9      	ldr	r1, [r7, #28]
 8004a50:	6a3a      	ldr	r2, [r7, #32]
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e6      	bne.n	8004a2c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
  }
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	372c      	adds	r7, #44	; 0x2c
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	08005c8f 	.word	0x08005c8f
 8004a74:	08005bd9 	.word	0x08005bd9

08004a78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d132      	bne.n	8004af6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_UART_Receive_IT+0x24>
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e02b      	b.n	8004af8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d018      	beq.n	8004ae6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	69f9      	ldr	r1, [r7, #28]
 8004ad8:	6a3a      	ldr	r2, [r7, #32]
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e6      	bne.n	8004ab4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 ff33 	bl	8005958 <UART_Start_Receive_IT>
 8004af2:	4603      	mov	r3, r0
 8004af4:	e000      	b.n	8004af8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3728      	adds	r7, #40	; 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b0ba      	sub	sp, #232	; 0xe8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b2e:	4013      	ands	r3, r2
 8004b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d115      	bne.n	8004b68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00f      	beq.n	8004b68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 82ac 	beq.w	80050b6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
      }
      return;
 8004b66:	e2a6      	b.n	80050b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8117 	beq.w	8004da0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b82:	4b85      	ldr	r3, [pc, #532]	; (8004d98 <HAL_UART_IRQHandler+0x298>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 810a 	beq.w	8004da0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d011      	beq.n	8004bbc <HAL_UART_IRQHandler+0xbc>
 8004b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb2:	f043 0201 	orr.w	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d011      	beq.n	8004bec <HAL_UART_IRQHandler+0xec>
 8004bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be2:	f043 0204 	orr.w	r2, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d011      	beq.n	8004c1c <HAL_UART_IRQHandler+0x11c>
 8004bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c12:	f043 0202 	orr.w	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d017      	beq.n	8004c58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2208      	movs	r2, #8
 8004c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4e:	f043 0208 	orr.w	r2, r3, #8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_UART_IRQHandler+0x18a>
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c80:	f043 0220 	orr.w	r2, r3, #32
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8212 	beq.w	80050ba <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d005      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d04f      	beq.n	8004d82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fefe 	bl	8005ae4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d141      	bne.n	8004d7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1d9      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d013      	beq.n	8004d72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4e:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <HAL_UART_IRQHandler+0x29c>)
 8004d50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd fdc0 	bl	80028dc <HAL_DMA_Abort_IT>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d017      	beq.n	8004d92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	e00f      	b.n	8004d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f9b6 	bl	80050e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	e00b      	b.n	8004d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9b2 	bl	80050e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	e007      	b.n	8004d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f9ae 	bl	80050e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004d90:	e193      	b.n	80050ba <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d92:	bf00      	nop
    return;
 8004d94:	e191      	b.n	80050ba <HAL_UART_IRQHandler+0x5ba>
 8004d96:	bf00      	nop
 8004d98:	04000120 	.word	0x04000120
 8004d9c:	08005bad 	.word	0x08005bad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 814c 	bne.w	8005042 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8145 	beq.w	8005042 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 813e 	beq.w	8005042 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2210      	movs	r2, #16
 8004dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	f040 80b6 	bne.w	8004f4a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8165 	beq.w	80050be <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	f080 815d 	bcs.w	80050be <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e18:	f000 8086 	beq.w	8004f28 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1da      	bne.n	8004e1c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3308      	adds	r3, #8
 8004e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e1      	bne.n	8004e66 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ec6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ec8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ecc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e3      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e4      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fd fc6a 	bl	80027fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8d8 	bl	80050f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f48:	e0b9      	b.n	80050be <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80ab 	beq.w	80050c2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a6 	beq.w	80050c2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f98:	647b      	str	r3, [r7, #68]	; 0x44
 8004f9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e4      	bne.n	8004f76 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	623b      	str	r3, [r7, #32]
   return(result);
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fd0:	633a      	str	r2, [r7, #48]	; 0x30
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e3      	bne.n	8004fac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	60fb      	str	r3, [r7, #12]
   return(result);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f023 0310 	bic.w	r3, r3, #16
 800500c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	69b9      	ldr	r1, [r7, #24]
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	617b      	str	r3, [r7, #20]
   return(result);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e4      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f85c 	bl	80050f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005040:	e03f      	b.n	80050c2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00e      	beq.n	800506c <HAL_UART_IRQHandler+0x56c>
 800504e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f853 	bl	8005110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800506a:	e02d      	b.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00e      	beq.n	8005096 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01c      	beq.n	80050c6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
    }
    return;
 8005094:	e017      	b.n	80050c6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d012      	beq.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
 80050a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fe4d 	bl	8005d4e <UART_EndTransmit_IT>
    return;
 80050b4:	e008      	b.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80050b6:	bf00      	nop
 80050b8:	e006      	b.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80050ba:	bf00      	nop
 80050bc:	e004      	b.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80050c6:	bf00      	nop
  }

}
 80050c8:	37e8      	adds	r7, #232	; 0xe8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop

080050d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4ba6      	ldr	r3, [pc, #664]	; (80053e8 <UART_SetConfig+0x2c4>)
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	6979      	ldr	r1, [r7, #20]
 8005158:	430b      	orrs	r3, r1
 800515a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	430a      	orrs	r2, r1
 8005194:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a94      	ldr	r2, [pc, #592]	; (80053ec <UART_SetConfig+0x2c8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d120      	bne.n	80051e2 <UART_SetConfig+0xbe>
 80051a0:	4b93      	ldr	r3, [pc, #588]	; (80053f0 <UART_SetConfig+0x2cc>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d816      	bhi.n	80051dc <UART_SetConfig+0xb8>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x90>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051cb 	.word	0x080051cb
 80051c0:	080051d7 	.word	0x080051d7
 80051c4:	2301      	movs	r3, #1
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e150      	b.n	800546c <UART_SetConfig+0x348>
 80051ca:	2302      	movs	r3, #2
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e14d      	b.n	800546c <UART_SetConfig+0x348>
 80051d0:	2304      	movs	r3, #4
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e14a      	b.n	800546c <UART_SetConfig+0x348>
 80051d6:	2308      	movs	r3, #8
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e147      	b.n	800546c <UART_SetConfig+0x348>
 80051dc:	2310      	movs	r3, #16
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e144      	b.n	800546c <UART_SetConfig+0x348>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a83      	ldr	r2, [pc, #524]	; (80053f4 <UART_SetConfig+0x2d0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d132      	bne.n	8005252 <UART_SetConfig+0x12e>
 80051ec:	4b80      	ldr	r3, [pc, #512]	; (80053f0 <UART_SetConfig+0x2cc>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d828      	bhi.n	800524c <UART_SetConfig+0x128>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <UART_SetConfig+0xdc>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005235 	.word	0x08005235
 8005204:	0800524d 	.word	0x0800524d
 8005208:	0800524d 	.word	0x0800524d
 800520c:	0800524d 	.word	0x0800524d
 8005210:	08005241 	.word	0x08005241
 8005214:	0800524d 	.word	0x0800524d
 8005218:	0800524d 	.word	0x0800524d
 800521c:	0800524d 	.word	0x0800524d
 8005220:	0800523b 	.word	0x0800523b
 8005224:	0800524d 	.word	0x0800524d
 8005228:	0800524d 	.word	0x0800524d
 800522c:	0800524d 	.word	0x0800524d
 8005230:	08005247 	.word	0x08005247
 8005234:	2300      	movs	r3, #0
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e118      	b.n	800546c <UART_SetConfig+0x348>
 800523a:	2302      	movs	r3, #2
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e115      	b.n	800546c <UART_SetConfig+0x348>
 8005240:	2304      	movs	r3, #4
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e112      	b.n	800546c <UART_SetConfig+0x348>
 8005246:	2308      	movs	r3, #8
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e10f      	b.n	800546c <UART_SetConfig+0x348>
 800524c:	2310      	movs	r3, #16
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e10c      	b.n	800546c <UART_SetConfig+0x348>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a68      	ldr	r2, [pc, #416]	; (80053f8 <UART_SetConfig+0x2d4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d120      	bne.n	800529e <UART_SetConfig+0x17a>
 800525c:	4b64      	ldr	r3, [pc, #400]	; (80053f0 <UART_SetConfig+0x2cc>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005266:	2b30      	cmp	r3, #48	; 0x30
 8005268:	d013      	beq.n	8005292 <UART_SetConfig+0x16e>
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d814      	bhi.n	8005298 <UART_SetConfig+0x174>
 800526e:	2b20      	cmp	r3, #32
 8005270:	d009      	beq.n	8005286 <UART_SetConfig+0x162>
 8005272:	2b20      	cmp	r3, #32
 8005274:	d810      	bhi.n	8005298 <UART_SetConfig+0x174>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <UART_SetConfig+0x15c>
 800527a:	2b10      	cmp	r3, #16
 800527c:	d006      	beq.n	800528c <UART_SetConfig+0x168>
 800527e:	e00b      	b.n	8005298 <UART_SetConfig+0x174>
 8005280:	2300      	movs	r3, #0
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e0f2      	b.n	800546c <UART_SetConfig+0x348>
 8005286:	2302      	movs	r3, #2
 8005288:	77fb      	strb	r3, [r7, #31]
 800528a:	e0ef      	b.n	800546c <UART_SetConfig+0x348>
 800528c:	2304      	movs	r3, #4
 800528e:	77fb      	strb	r3, [r7, #31]
 8005290:	e0ec      	b.n	800546c <UART_SetConfig+0x348>
 8005292:	2308      	movs	r3, #8
 8005294:	77fb      	strb	r3, [r7, #31]
 8005296:	e0e9      	b.n	800546c <UART_SetConfig+0x348>
 8005298:	2310      	movs	r3, #16
 800529a:	77fb      	strb	r3, [r7, #31]
 800529c:	e0e6      	b.n	800546c <UART_SetConfig+0x348>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a56      	ldr	r2, [pc, #344]	; (80053fc <UART_SetConfig+0x2d8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d120      	bne.n	80052ea <UART_SetConfig+0x1c6>
 80052a8:	4b51      	ldr	r3, [pc, #324]	; (80053f0 <UART_SetConfig+0x2cc>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052b2:	2bc0      	cmp	r3, #192	; 0xc0
 80052b4:	d013      	beq.n	80052de <UART_SetConfig+0x1ba>
 80052b6:	2bc0      	cmp	r3, #192	; 0xc0
 80052b8:	d814      	bhi.n	80052e4 <UART_SetConfig+0x1c0>
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d009      	beq.n	80052d2 <UART_SetConfig+0x1ae>
 80052be:	2b80      	cmp	r3, #128	; 0x80
 80052c0:	d810      	bhi.n	80052e4 <UART_SetConfig+0x1c0>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <UART_SetConfig+0x1a8>
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d006      	beq.n	80052d8 <UART_SetConfig+0x1b4>
 80052ca:	e00b      	b.n	80052e4 <UART_SetConfig+0x1c0>
 80052cc:	2300      	movs	r3, #0
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e0cc      	b.n	800546c <UART_SetConfig+0x348>
 80052d2:	2302      	movs	r3, #2
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e0c9      	b.n	800546c <UART_SetConfig+0x348>
 80052d8:	2304      	movs	r3, #4
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e0c6      	b.n	800546c <UART_SetConfig+0x348>
 80052de:	2308      	movs	r3, #8
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e0c3      	b.n	800546c <UART_SetConfig+0x348>
 80052e4:	2310      	movs	r3, #16
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e0c0      	b.n	800546c <UART_SetConfig+0x348>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a44      	ldr	r2, [pc, #272]	; (8005400 <UART_SetConfig+0x2dc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d125      	bne.n	8005340 <UART_SetConfig+0x21c>
 80052f4:	4b3e      	ldr	r3, [pc, #248]	; (80053f0 <UART_SetConfig+0x2cc>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005302:	d017      	beq.n	8005334 <UART_SetConfig+0x210>
 8005304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005308:	d817      	bhi.n	800533a <UART_SetConfig+0x216>
 800530a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530e:	d00b      	beq.n	8005328 <UART_SetConfig+0x204>
 8005310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005314:	d811      	bhi.n	800533a <UART_SetConfig+0x216>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <UART_SetConfig+0x1fe>
 800531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531e:	d006      	beq.n	800532e <UART_SetConfig+0x20a>
 8005320:	e00b      	b.n	800533a <UART_SetConfig+0x216>
 8005322:	2300      	movs	r3, #0
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e0a1      	b.n	800546c <UART_SetConfig+0x348>
 8005328:	2302      	movs	r3, #2
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e09e      	b.n	800546c <UART_SetConfig+0x348>
 800532e:	2304      	movs	r3, #4
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e09b      	b.n	800546c <UART_SetConfig+0x348>
 8005334:	2308      	movs	r3, #8
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e098      	b.n	800546c <UART_SetConfig+0x348>
 800533a:	2310      	movs	r3, #16
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e095      	b.n	800546c <UART_SetConfig+0x348>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <UART_SetConfig+0x2e0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d125      	bne.n	8005396 <UART_SetConfig+0x272>
 800534a:	4b29      	ldr	r3, [pc, #164]	; (80053f0 <UART_SetConfig+0x2cc>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005358:	d017      	beq.n	800538a <UART_SetConfig+0x266>
 800535a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800535e:	d817      	bhi.n	8005390 <UART_SetConfig+0x26c>
 8005360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005364:	d00b      	beq.n	800537e <UART_SetConfig+0x25a>
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536a:	d811      	bhi.n	8005390 <UART_SetConfig+0x26c>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <UART_SetConfig+0x254>
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005374:	d006      	beq.n	8005384 <UART_SetConfig+0x260>
 8005376:	e00b      	b.n	8005390 <UART_SetConfig+0x26c>
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e076      	b.n	800546c <UART_SetConfig+0x348>
 800537e:	2302      	movs	r3, #2
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e073      	b.n	800546c <UART_SetConfig+0x348>
 8005384:	2304      	movs	r3, #4
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e070      	b.n	800546c <UART_SetConfig+0x348>
 800538a:	2308      	movs	r3, #8
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e06d      	b.n	800546c <UART_SetConfig+0x348>
 8005390:	2310      	movs	r3, #16
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e06a      	b.n	800546c <UART_SetConfig+0x348>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <UART_SetConfig+0x2e4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d138      	bne.n	8005412 <UART_SetConfig+0x2ee>
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <UART_SetConfig+0x2cc>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053ae:	d017      	beq.n	80053e0 <UART_SetConfig+0x2bc>
 80053b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053b4:	d82a      	bhi.n	800540c <UART_SetConfig+0x2e8>
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ba:	d00b      	beq.n	80053d4 <UART_SetConfig+0x2b0>
 80053bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c0:	d824      	bhi.n	800540c <UART_SetConfig+0x2e8>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <UART_SetConfig+0x2aa>
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d006      	beq.n	80053da <UART_SetConfig+0x2b6>
 80053cc:	e01e      	b.n	800540c <UART_SetConfig+0x2e8>
 80053ce:	2300      	movs	r3, #0
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e04b      	b.n	800546c <UART_SetConfig+0x348>
 80053d4:	2302      	movs	r3, #2
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e048      	b.n	800546c <UART_SetConfig+0x348>
 80053da:	2304      	movs	r3, #4
 80053dc:	77fb      	strb	r3, [r7, #31]
 80053de:	e045      	b.n	800546c <UART_SetConfig+0x348>
 80053e0:	2308      	movs	r3, #8
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	e042      	b.n	800546c <UART_SetConfig+0x348>
 80053e6:	bf00      	nop
 80053e8:	efff69f3 	.word	0xefff69f3
 80053ec:	40011000 	.word	0x40011000
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40004400 	.word	0x40004400
 80053f8:	40004800 	.word	0x40004800
 80053fc:	40004c00 	.word	0x40004c00
 8005400:	40005000 	.word	0x40005000
 8005404:	40011400 	.word	0x40011400
 8005408:	40007800 	.word	0x40007800
 800540c:	2310      	movs	r3, #16
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e02c      	b.n	800546c <UART_SetConfig+0x348>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a72      	ldr	r2, [pc, #456]	; (80055e0 <UART_SetConfig+0x4bc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d125      	bne.n	8005468 <UART_SetConfig+0x344>
 800541c:	4b71      	ldr	r3, [pc, #452]	; (80055e4 <UART_SetConfig+0x4c0>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005426:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800542a:	d017      	beq.n	800545c <UART_SetConfig+0x338>
 800542c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005430:	d817      	bhi.n	8005462 <UART_SetConfig+0x33e>
 8005432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005436:	d00b      	beq.n	8005450 <UART_SetConfig+0x32c>
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d811      	bhi.n	8005462 <UART_SetConfig+0x33e>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <UART_SetConfig+0x326>
 8005442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005446:	d006      	beq.n	8005456 <UART_SetConfig+0x332>
 8005448:	e00b      	b.n	8005462 <UART_SetConfig+0x33e>
 800544a:	2300      	movs	r3, #0
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e00d      	b.n	800546c <UART_SetConfig+0x348>
 8005450:	2302      	movs	r3, #2
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e00a      	b.n	800546c <UART_SetConfig+0x348>
 8005456:	2304      	movs	r3, #4
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e007      	b.n	800546c <UART_SetConfig+0x348>
 800545c:	2308      	movs	r3, #8
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e004      	b.n	800546c <UART_SetConfig+0x348>
 8005462:	2310      	movs	r3, #16
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e001      	b.n	800546c <UART_SetConfig+0x348>
 8005468:	2310      	movs	r3, #16
 800546a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005474:	d15b      	bne.n	800552e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005476:	7ffb      	ldrb	r3, [r7, #31]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d828      	bhi.n	80054ce <UART_SetConfig+0x3aa>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0x360>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054b9 	.word	0x080054b9
 8005490:	080054cf 	.word	0x080054cf
 8005494:	080054bf 	.word	0x080054bf
 8005498:	080054cf 	.word	0x080054cf
 800549c:	080054cf 	.word	0x080054cf
 80054a0:	080054cf 	.word	0x080054cf
 80054a4:	080054c7 	.word	0x080054c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a8:	f7fe fa54 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 80054ac:	61b8      	str	r0, [r7, #24]
        break;
 80054ae:	e013      	b.n	80054d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b0:	f7fe fa64 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 80054b4:	61b8      	str	r0, [r7, #24]
        break;
 80054b6:	e00f      	b.n	80054d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b8:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <UART_SetConfig+0x4c4>)
 80054ba:	61bb      	str	r3, [r7, #24]
        break;
 80054bc:	e00c      	b.n	80054d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054be:	f7fe f937 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80054c2:	61b8      	str	r0, [r7, #24]
        break;
 80054c4:	e008      	b.n	80054d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ca:	61bb      	str	r3, [r7, #24]
        break;
 80054cc:	e004      	b.n	80054d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	77bb      	strb	r3, [r7, #30]
        break;
 80054d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d074      	beq.n	80055c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	005a      	lsls	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b0f      	cmp	r3, #15
 80054f8:	d916      	bls.n	8005528 <UART_SetConfig+0x404>
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005500:	d212      	bcs.n	8005528 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f023 030f 	bic.w	r3, r3, #15
 800550a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	b29b      	uxth	r3, r3
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	b29a      	uxth	r2, r3
 8005518:	89fb      	ldrh	r3, [r7, #14]
 800551a:	4313      	orrs	r3, r2
 800551c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	89fa      	ldrh	r2, [r7, #14]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	e04f      	b.n	80055c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	77bb      	strb	r3, [r7, #30]
 800552c:	e04c      	b.n	80055c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800552e:	7ffb      	ldrb	r3, [r7, #31]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d828      	bhi.n	8005586 <UART_SetConfig+0x462>
 8005534:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0x418>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005561 	.word	0x08005561
 8005540:	08005569 	.word	0x08005569
 8005544:	08005571 	.word	0x08005571
 8005548:	08005587 	.word	0x08005587
 800554c:	08005577 	.word	0x08005577
 8005550:	08005587 	.word	0x08005587
 8005554:	08005587 	.word	0x08005587
 8005558:	08005587 	.word	0x08005587
 800555c:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fe f9f8 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8005564:	61b8      	str	r0, [r7, #24]
        break;
 8005566:	e013      	b.n	8005590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005568:	f7fe fa08 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 800556c:	61b8      	str	r0, [r7, #24]
        break;
 800556e:	e00f      	b.n	8005590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <UART_SetConfig+0x4c4>)
 8005572:	61bb      	str	r3, [r7, #24]
        break;
 8005574:	e00c      	b.n	8005590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7fe f8db 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 800557a:	61b8      	str	r0, [r7, #24]
        break;
 800557c:	e008      	b.n	8005590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	61bb      	str	r3, [r7, #24]
        break;
 8005584:	e004      	b.n	8005590 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	77bb      	strb	r3, [r7, #30]
        break;
 800558e:	bf00      	nop
    }

    if (pclk != 0U)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d018      	beq.n	80055c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	085a      	lsrs	r2, r3, #1
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	441a      	add	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b0f      	cmp	r3, #15
 80055ae:	d909      	bls.n	80055c4 <UART_SetConfig+0x4a0>
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b6:	d205      	bcs.n	80055c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e001      	b.n	80055c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40007c00 	.word	0x40007c00
 80055e4:	40023800 	.word	0x40023800
 80055e8:	00f42400 	.word	0x00f42400

080055ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01a      	beq.n	8005702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ea:	d10a      	bne.n	8005702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af02      	add	r7, sp, #8
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005740:	f7fc f9c6 	bl	8001ad0 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b08      	cmp	r3, #8
 8005752:	d10e      	bne.n	8005772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f831 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e027      	b.n	80057c2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d10e      	bne.n	800579e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f81b 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e011      	b.n	80057c2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b09c      	sub	sp, #112	; 0x70
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	e0a7      	b.n	800592c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	f000 80a3 	beq.w	800592c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e6:	f7fc f973 	bl	8001ad0 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <UART_WaitOnFlagUntilTimeout+0x32>
 80057f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d13f      	bne.n	800587c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800580a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005810:	667b      	str	r3, [r7, #100]	; 0x64
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e6      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	663b      	str	r3, [r7, #96]	; 0x60
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800584e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800585c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e068      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d050      	beq.n	800592c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005898:	d148      	bne.n	800592c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
 80058c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e6      	bne.n	80058a4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	613b      	str	r3, [r7, #16]
   return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058f6:	623a      	str	r2, [r7, #32]
 80058f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	69f9      	ldr	r1, [r7, #28]
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	61bb      	str	r3, [r7, #24]
   return(result);
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e010      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69da      	ldr	r2, [r3, #28]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4013      	ands	r3, r2
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	429a      	cmp	r2, r3
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	429a      	cmp	r2, r3
 8005948:	f43f af48 	beq.w	80057dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3770      	adds	r7, #112	; 0x70
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005958:	b480      	push	{r7}
 800595a:	b097      	sub	sp, #92	; 0x5c
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d10e      	bne.n	80059aa <UART_Start_Receive_IT+0x52>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <UART_Start_Receive_IT+0x48>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f240 12ff 	movw	r2, #511	; 0x1ff
 800599a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800599e:	e02d      	b.n	80059fc <UART_Start_Receive_IT+0xa4>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	22ff      	movs	r2, #255	; 0xff
 80059a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059a8:	e028      	b.n	80059fc <UART_Start_Receive_IT+0xa4>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10d      	bne.n	80059ce <UART_Start_Receive_IT+0x76>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <UART_Start_Receive_IT+0x6c>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059c2:	e01b      	b.n	80059fc <UART_Start_Receive_IT+0xa4>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	227f      	movs	r2, #127	; 0x7f
 80059c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059cc:	e016      	b.n	80059fc <UART_Start_Receive_IT+0xa4>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d6:	d10d      	bne.n	80059f4 <UART_Start_Receive_IT+0x9c>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <UART_Start_Receive_IT+0x92>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	227f      	movs	r2, #127	; 0x7f
 80059e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059e8:	e008      	b.n	80059fc <UART_Start_Receive_IT+0xa4>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	223f      	movs	r2, #63	; 0x3f
 80059ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059f2:	e003      	b.n	80059fc <UART_Start_Receive_IT+0xa4>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2222      	movs	r2, #34	; 0x22
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	657b      	str	r3, [r7, #84]	; 0x54
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d107      	bne.n	8005a5a <UART_Start_Receive_IT+0x102>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a21      	ldr	r2, [pc, #132]	; (8005adc <UART_Start_Receive_IT+0x184>)
 8005a56:	669a      	str	r2, [r3, #104]	; 0x68
 8005a58:	e002      	b.n	8005a60 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <UART_Start_Receive_IT+0x188>)
 8005a5e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d019      	beq.n	8005a9c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
 8005a88:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e6      	bne.n	8005a68 <UART_Start_Receive_IT+0x110>
 8005a9a:	e018      	b.n	8005ace <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f043 0320 	orr.w	r3, r3, #32
 8005ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aba:	623b      	str	r3, [r7, #32]
 8005abc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	69f9      	ldr	r1, [r7, #28]
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	375c      	adds	r7, #92	; 0x5c
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	08005f09 	.word	0x08005f09
 8005ae0:	08005da3 	.word	0x08005da3

08005ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b095      	sub	sp, #84	; 0x54
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e6      	bne.n	8005aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d118      	bne.n	8005b8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 0310 	bic.w	r3, r3, #16
 8005b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	613b      	str	r3, [r7, #16]
   return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e6      	bne.n	8005b5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ba0:	bf00      	nop
 8005ba2:	3754      	adds	r7, #84	; 0x54
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff fa8a 	bl	80050e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b08f      	sub	sp, #60	; 0x3c
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be4:	2b21      	cmp	r3, #33	; 0x21
 8005be6:	d14c      	bne.n	8005c82 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d132      	bne.n	8005c5a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e6      	bne.n	8005bf4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005c58:	e013      	b.n	8005c82 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c82:	bf00      	nop
 8005c84:	373c      	adds	r7, #60	; 0x3c
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b091      	sub	sp, #68	; 0x44
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9a:	2b21      	cmp	r3, #33	; 0x21
 8005c9c:	d151      	bne.n	8005d42 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d132      	bne.n	8005d10 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e6      	bne.n	8005caa <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	69b9      	ldr	r1, [r7, #24]
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	617b      	str	r3, [r7, #20]
   return(result);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e6      	bne.n	8005cdc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005d0e:	e018      	b.n	8005d42 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d42:	bf00      	nop
 8005d44:	3744      	adds	r7, #68	; 0x44
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b088      	sub	sp, #32
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	613b      	str	r3, [r7, #16]
   return(result);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff f99b 	bl	80050d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9a:	bf00      	nop
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b096      	sub	sp, #88	; 0x58
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005db0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dba:	2b22      	cmp	r3, #34	; 0x22
 8005dbc:	f040 8098 	bne.w	8005ef0 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005dce:	b2d9      	uxtb	r1, r3
 8005dd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	400a      	ands	r2, r1
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d17b      	bne.n	8005f00 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44
 8005e28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	623b      	str	r3, [r7, #32]
   return(result);
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e5      	bne.n	8005e3a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d12e      	bne.n	8005ee8 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f023 0310 	bic.w	r3, r3, #16
 8005ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	69b9      	ldr	r1, [r7, #24]
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	617b      	str	r3, [r7, #20]
   return(result);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e6      	bne.n	8005e90 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d103      	bne.n	8005ed8 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff f909 	bl	80050f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ee6:	e00b      	b.n	8005f00 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7fa feb5 	bl	8000c58 <HAL_UART_RxCpltCallback>
}
 8005eee:	e007      	b.n	8005f00 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0208 	orr.w	r2, r2, #8
 8005efe:	619a      	str	r2, [r3, #24]
}
 8005f00:	bf00      	nop
 8005f02:	3758      	adds	r7, #88	; 0x58
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b096      	sub	sp, #88	; 0x58
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f20:	2b22      	cmp	r3, #34	; 0x22
 8005f22:	f040 8098 	bne.w	8006056 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f34:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f36:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005f3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f3e:	4013      	ands	r3, r2
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	1c9a      	adds	r2, r3, #2
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d17b      	bne.n	8006066 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e6      	bne.n	8005f6e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f023 0301 	bic.w	r3, r3, #1
 8005fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e5      	bne.n	8005fa0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d12e      	bne.n	800604e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	60bb      	str	r3, [r7, #8]
   return(result);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f023 0310 	bic.w	r3, r3, #16
 800600a:	647b      	str	r3, [r7, #68]	; 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6979      	ldr	r1, [r7, #20]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	613b      	str	r3, [r7, #16]
   return(result);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b10      	cmp	r3, #16
 8006034:	d103      	bne.n	800603e <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2210      	movs	r2, #16
 800603c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff f856 	bl	80050f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800604c:	e00b      	b.n	8006066 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fa fe02 	bl	8000c58 <HAL_UART_RxCpltCallback>
}
 8006054:	e007      	b.n	8006066 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0208 	orr.w	r2, r2, #8
 8006064:	619a      	str	r2, [r3, #24]
}
 8006066:	bf00      	nop
 8006068:	3758      	adds	r7, #88	; 0x58
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006070:	b084      	sub	sp, #16
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	f107 001c 	add.w	r0, r7, #28
 800607e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	2b01      	cmp	r3, #1
 8006086:	d120      	bne.n	80060ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	4b20      	ldr	r3, [pc, #128]	; (800611c <USB_CoreInit+0xac>)
 800609a:	4013      	ands	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fa96 	bl	80065f0 <USB_CoreReset>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
 80060c8:	e010      	b.n	80060ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa8a 	bl	80065f0 <USB_CoreReset>
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10b      	bne.n	800610a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f043 0206 	orr.w	r2, r3, #6
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f043 0220 	orr.w	r2, r3, #32
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006116:	b004      	add	sp, #16
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	ffbdffbf 	.word	0xffbdffbf

08006120 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f023 0201 	bic.w	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d115      	bne.n	8006190 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006170:	2001      	movs	r0, #1
 8006172:	f7fb fcb9 	bl	8001ae8 <HAL_Delay>
      ms++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3301      	adds	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa29 	bl	80065d4 <USB_GetMode>
 8006182:	4603      	mov	r3, r0
 8006184:	2b01      	cmp	r3, #1
 8006186:	d01e      	beq.n	80061c6 <USB_SetCurrentMode+0x84>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b31      	cmp	r3, #49	; 0x31
 800618c:	d9f0      	bls.n	8006170 <USB_SetCurrentMode+0x2e>
 800618e:	e01a      	b.n	80061c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d115      	bne.n	80061c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061a2:	2001      	movs	r0, #1
 80061a4:	f7fb fca0 	bl	8001ae8 <HAL_Delay>
      ms++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa10 	bl	80065d4 <USB_GetMode>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <USB_SetCurrentMode+0x84>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b31      	cmp	r3, #49	; 0x31
 80061be:	d9f0      	bls.n	80061a2 <USB_SetCurrentMode+0x60>
 80061c0:	e001      	b.n	80061c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e005      	b.n	80061d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b32      	cmp	r3, #50	; 0x32
 80061ca:	d101      	bne.n	80061d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061dc:	b084      	sub	sp, #16
 80061de:	b580      	push	{r7, lr}
 80061e0:	b086      	sub	sp, #24
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	e009      	b.n	8006210 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3340      	adds	r3, #64	; 0x40
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	2200      	movs	r2, #0
 8006208:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b0e      	cmp	r3, #14
 8006214:	d9f2      	bls.n	80061fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d11c      	bne.n	8006256 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800622a:	f043 0302 	orr.w	r3, r3, #2
 800622e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e005      	b.n	8006262 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006268:	461a      	mov	r2, r3
 800626a:	2300      	movs	r3, #0
 800626c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	4619      	mov	r1, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627c:	461a      	mov	r2, r3
 800627e:	680b      	ldr	r3, [r1, #0]
 8006280:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10c      	bne.n	80062a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f965 	bl	8006560 <USB_SetDevSpeed>
 8006296:	e008      	b.n	80062aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006298:	2101      	movs	r1, #1
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f960 	bl	8006560 <USB_SetDevSpeed>
 80062a0:	e003      	b.n	80062aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062a2:	2103      	movs	r1, #3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f95b 	bl	8006560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062aa:	2110      	movs	r1, #16
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8f3 	bl	8006498 <USB_FlushTxFifo>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f91f 	bl	8006500 <USB_FlushRxFifo>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	461a      	mov	r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	461a      	mov	r2, r3
 80062e0:	2300      	movs	r3, #0
 80062e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	e043      	b.n	800637e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800630c:	d118      	bne.n	8006340 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	461a      	mov	r2, r3
 8006322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e013      	b.n	8006352 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006336:	461a      	mov	r2, r3
 8006338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e008      	b.n	8006352 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	2300      	movs	r3, #0
 8006362:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	461a      	mov	r2, r3
 8006372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	3301      	adds	r3, #1
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	429a      	cmp	r2, r3
 8006384:	d3b7      	bcc.n	80062f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	e043      	b.n	8006414 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a2:	d118      	bne.n	80063d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e013      	b.n	80063e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	461a      	mov	r2, r3
 80063ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	e008      	b.n	80063e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	461a      	mov	r2, r3
 80063e4:	2300      	movs	r3, #0
 80063e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	461a      	mov	r2, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006406:	461a      	mov	r2, r3
 8006408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800640c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3301      	adds	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	d3b7      	bcc.n	800638c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800642a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800643c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f043 0210 	orr.w	r2, r3, #16
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <USB_DevInit+0x2b4>)
 8006456:	4313      	orrs	r3, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f043 0208 	orr.w	r2, r3, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d105      	bne.n	8006480 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <USB_DevInit+0x2b8>)
 800647a:	4313      	orrs	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006480:	7dfb      	ldrb	r3, [r7, #23]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr
 8006490:	803c3800 	.word	0x803c3800
 8006494:	40000004 	.word	0x40000004

08006498 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a13      	ldr	r2, [pc, #76]	; (80064fc <USB_FlushTxFifo+0x64>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d901      	bls.n	80064b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e01b      	b.n	80064f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	daf2      	bge.n	80064a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	019b      	lsls	r3, r3, #6
 80064c8:	f043 0220 	orr.w	r2, r3, #32
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a08      	ldr	r2, [pc, #32]	; (80064fc <USB_FlushTxFifo+0x64>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e006      	b.n	80064f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d0f0      	beq.n	80064d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	00030d40 	.word	0x00030d40

08006500 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <USB_FlushRxFifo+0x5c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e018      	b.n	8006550 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	daf2      	bge.n	800650c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2210      	movs	r2, #16
 800652e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <USB_FlushRxFifo+0x5c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e006      	b.n	8006550 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b10      	cmp	r3, #16
 800654c:	d0f0      	beq.n	8006530 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	00030d40 	.word	0x00030d40

08006560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065ac:	f023 0303 	bic.w	r3, r3, #3
 80065b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c0:	f043 0302 	orr.w	r3, r3, #2
 80065c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0301 	and.w	r3, r3, #1
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4a13      	ldr	r2, [pc, #76]	; (8006654 <USB_CoreReset+0x64>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e01b      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	daf2      	bge.n	80065fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a09      	ldr	r2, [pc, #36]	; (8006654 <USB_CoreReset+0x64>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e006      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d0f0      	beq.n	8006626 <USB_CoreReset+0x36>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	00030d40 	.word	0x00030d40

08006658 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800665c:	bf00      	nop
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800666e:	f3ef 8305 	mrs	r3, IPSR
 8006672:	60bb      	str	r3, [r7, #8]
  return(result);
 8006674:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10f      	bne.n	800669a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667a:	f3ef 8310 	mrs	r3, PRIMASK
 800667e:	607b      	str	r3, [r7, #4]
  return(result);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d105      	bne.n	8006692 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006686:	f3ef 8311 	mrs	r3, BASEPRI
 800668a:	603b      	str	r3, [r7, #0]
  return(result);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <osKernelInitialize+0x3a>
 8006692:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <osKernelInitialize+0x64>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d103      	bne.n	80066a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800669a:	f06f 0305 	mvn.w	r3, #5
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e00c      	b.n	80066bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <osKernelInitialize+0x64>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <osKernelInitialize+0x64>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	e002      	b.n	80066bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000914 	.word	0x20000914

080066d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d6:	f3ef 8305 	mrs	r3, IPSR
 80066da:	60bb      	str	r3, [r7, #8]
  return(result);
 80066dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10f      	bne.n	8006702 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e2:	f3ef 8310 	mrs	r3, PRIMASK
 80066e6:	607b      	str	r3, [r7, #4]
  return(result);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d105      	bne.n	80066fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066ee:	f3ef 8311 	mrs	r3, BASEPRI
 80066f2:	603b      	str	r3, [r7, #0]
  return(result);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <osKernelStart+0x3a>
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <osKernelStart+0x68>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d103      	bne.n	800670a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006702:	f06f 0305 	mvn.w	r3, #5
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e010      	b.n	800672c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800670a:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <osKernelStart+0x68>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d109      	bne.n	8006726 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006712:	f7ff ffa1 	bl	8006658 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <osKernelStart+0x68>)
 8006718:	2202      	movs	r2, #2
 800671a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800671c:	f001 fa3e 	bl	8007b9c <vTaskStartScheduler>
      stat = osOK;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e002      	b.n	800672c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800672c:	68fb      	ldr	r3, [r7, #12]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000914 	.word	0x20000914

0800673c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b090      	sub	sp, #64	; 0x40
 8006740:	af04      	add	r7, sp, #16
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006748:	2300      	movs	r3, #0
 800674a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674c:	f3ef 8305 	mrs	r3, IPSR
 8006750:	61fb      	str	r3, [r7, #28]
  return(result);
 8006752:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 808f 	bne.w	8006878 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675a:	f3ef 8310 	mrs	r3, PRIMASK
 800675e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006766:	f3ef 8311 	mrs	r3, BASEPRI
 800676a:	617b      	str	r3, [r7, #20]
  return(result);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <osThreadNew+0x3e>
 8006772:	4b44      	ldr	r3, [pc, #272]	; (8006884 <osThreadNew+0x148>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d07e      	beq.n	8006878 <osThreadNew+0x13c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d07b      	beq.n	8006878 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006784:	2318      	movs	r3, #24
 8006786:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d045      	beq.n	8006824 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <osThreadNew+0x6a>
        name = attr->name;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d008      	beq.n	80067cc <osThreadNew+0x90>
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	2b38      	cmp	r3, #56	; 0x38
 80067be:	d805      	bhi.n	80067cc <osThreadNew+0x90>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <osThreadNew+0x94>
        return (NULL);
 80067cc:	2300      	movs	r3, #0
 80067ce:	e054      	b.n	800687a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	089b      	lsrs	r3, r3, #2
 80067de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00e      	beq.n	8006806 <osThreadNew+0xca>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	2ba7      	cmp	r3, #167	; 0xa7
 80067ee:	d90a      	bls.n	8006806 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <osThreadNew+0xca>
        mem = 1;
 8006800:	2301      	movs	r3, #1
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	e010      	b.n	8006828 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10c      	bne.n	8006828 <osThreadNew+0xec>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d108      	bne.n	8006828 <osThreadNew+0xec>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <osThreadNew+0xec>
          mem = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	e001      	b.n	8006828 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d110      	bne.n	8006850 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006836:	9202      	str	r2, [sp, #8]
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fea7 	bl	8007598 <xTaskCreateStatic>
 800684a:	4603      	mov	r3, r0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	e013      	b.n	8006878 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d110      	bne.n	8006878 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	b29a      	uxth	r2, r3
 800685a:	f107 0310 	add.w	r3, r7, #16
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fef8 	bl	800765e <xTaskCreate>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d001      	beq.n	8006878 <osThreadNew+0x13c>
          hTask = NULL;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006878:	693b      	ldr	r3, [r7, #16]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3730      	adds	r7, #48	; 0x30
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000914 	.word	0x20000914

08006888 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006894:	f3ef 8305 	mrs	r3, IPSR
 8006898:	617b      	str	r3, [r7, #20]
  return(result);
 800689a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10f      	bne.n	80068c0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a0:	f3ef 8310 	mrs	r3, PRIMASK
 80068a4:	613b      	str	r3, [r7, #16]
  return(result);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068ac:	f3ef 8311 	mrs	r3, BASEPRI
 80068b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <osThreadSuspend+0x40>
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <osThreadSuspend+0x64>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d103      	bne.n	80068c8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80068c0:	f06f 0305 	mvn.w	r3, #5
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e00b      	b.n	80068e0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80068ce:	f06f 0303 	mvn.w	r3, #3
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e004      	b.n	80068e0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80068da:	69b8      	ldr	r0, [r7, #24]
 80068dc:	f001 f852 	bl	8007984 <vTaskSuspend>
  }

  return (stat);
 80068e0:	69fb      	ldr	r3, [r7, #28]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000914 	.word	0x20000914

080068f0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fc:	f3ef 8305 	mrs	r3, IPSR
 8006900:	617b      	str	r3, [r7, #20]
  return(result);
 8006902:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10f      	bne.n	8006928 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006908:	f3ef 8310 	mrs	r3, PRIMASK
 800690c:	613b      	str	r3, [r7, #16]
  return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006914:	f3ef 8311 	mrs	r3, BASEPRI
 8006918:	60fb      	str	r3, [r7, #12]
  return(result);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <osThreadResume+0x40>
 8006920:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <osThreadResume+0x64>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d103      	bne.n	8006930 <osThreadResume+0x40>
    stat = osErrorISR;
 8006928:	f06f 0305 	mvn.w	r3, #5
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	e00b      	b.n	8006948 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8006936:	f06f 0303 	mvn.w	r3, #3
 800693a:	61fb      	str	r3, [r7, #28]
 800693c:	e004      	b.n	8006948 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f001 f8ca 	bl	8007adc <vTaskResume>
  }

  return (stat);
 8006948:	69fb      	ldr	r3, [r7, #28]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000914 	.word	0x20000914

08006958 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006960:	f3ef 8305 	mrs	r3, IPSR
 8006964:	613b      	str	r3, [r7, #16]
  return(result);
 8006966:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10f      	bne.n	800698c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696c:	f3ef 8310 	mrs	r3, PRIMASK
 8006970:	60fb      	str	r3, [r7, #12]
  return(result);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006978:	f3ef 8311 	mrs	r3, BASEPRI
 800697c:	60bb      	str	r3, [r7, #8]
  return(result);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <osDelay+0x3c>
 8006984:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <osDelay+0x58>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d103      	bne.n	8006994 <osDelay+0x3c>
    stat = osErrorISR;
 800698c:	f06f 0305 	mvn.w	r3, #5
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e007      	b.n	80069a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 ffba 	bl	8007918 <vTaskDelay>
    }
  }

  return (stat);
 80069a4:	697b      	ldr	r3, [r7, #20]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000914 	.word	0x20000914

080069b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a07      	ldr	r2, [pc, #28]	; (80069e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80069c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4a06      	ldr	r2, [pc, #24]	; (80069e4 <vApplicationGetIdleTaskMemory+0x30>)
 80069ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2280      	movs	r2, #128	; 0x80
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000918 	.word	0x20000918
 80069e4:	200009c0 	.word	0x200009c0

080069e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a07      	ldr	r2, [pc, #28]	; (8006a14 <vApplicationGetTimerTaskMemory+0x2c>)
 80069f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4a06      	ldr	r2, [pc, #24]	; (8006a18 <vApplicationGetTimerTaskMemory+0x30>)
 80069fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a06:	601a      	str	r2, [r3, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	20000bc0 	.word	0x20000bc0
 8006a18:	20000c68 	.word	0x20000c68

08006a1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f103 0208 	add.w	r2, r3, #8
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f04f 32ff 	mov.w	r2, #4294967295
 8006a34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f103 0208 	add.w	r2, r3, #8
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f103 0208 	add.w	r2, r3, #8
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d103      	bne.n	8006ade <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e00c      	b.n	8006af8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e002      	b.n	8006aec <vListInsert+0x2e>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d2f6      	bcs.n	8006ae6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6892      	ldr	r2, [r2, #8]
 8006b46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6852      	ldr	r2, [r2, #4]
 8006b50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d103      	bne.n	8006b64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	1e5a      	subs	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	b672      	cpsid	i
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	b662      	cpsie	i
 8006bac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006bb2:	f002 f9b3 	bl	8008f1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bc2:	fb01 f303 	mul.w	r3, r1, r3
 8006bc6:	441a      	add	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	3b01      	subs	r3, #1
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	441a      	add	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	22ff      	movs	r2, #255	; 0xff
 8006bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	22ff      	movs	r2, #255	; 0xff
 8006bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d114      	bne.n	8006c32 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01a      	beq.n	8006c46 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3310      	adds	r3, #16
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fa69 	bl	80080ec <xTaskRemoveFromEventList>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d012      	beq.n	8006c46 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c20:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <xQueueGenericReset+0xd0>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	e009      	b.n	8006c46 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3310      	adds	r3, #16
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fef0 	bl	8006a1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3324      	adds	r3, #36	; 0x24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff feeb 	bl	8006a1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c46:	f002 f99d 	bl	8008f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c4a:	2301      	movs	r3, #1
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	e000ed04 	.word	0xe000ed04

08006c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08e      	sub	sp, #56	; 0x38
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10c      	bne.n	8006c86 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	b672      	cpsid	i
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	b662      	cpsie	i
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10c      	bne.n	8006ca6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	b672      	cpsid	i
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	b662      	cpsie	i
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <xQueueGenericCreateStatic+0x5a>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <xQueueGenericCreateStatic+0x5e>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <xQueueGenericCreateStatic+0x60>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10c      	bne.n	8006cd6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	b672      	cpsid	i
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	b662      	cpsie	i
 8006cd0:	623b      	str	r3, [r7, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <xQueueGenericCreateStatic+0x8a>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <xQueueGenericCreateStatic+0x8e>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <xQueueGenericCreateStatic+0x90>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10c      	bne.n	8006d06 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	b672      	cpsid	i
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	b662      	cpsie	i
 8006d00:	61fb      	str	r3, [r7, #28]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d06:	2350      	movs	r3, #80	; 0x50
 8006d08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b50      	cmp	r3, #80	; 0x50
 8006d0e:	d00c      	beq.n	8006d2a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	b672      	cpsid	i
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	b662      	cpsie	i
 8006d24:	61bb      	str	r3, [r7, #24]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4613      	mov	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f805 	bl	8006d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3730      	adds	r7, #48	; 0x30
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e002      	b.n	8006d7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	69b8      	ldr	r0, [r7, #24]
 8006d8e:	f7ff fef9 	bl	8006b84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08e      	sub	sp, #56	; 0x38
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006db2:	2300      	movs	r3, #0
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10c      	bne.n	8006dda <xQueueGenericSend+0x36>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	b672      	cpsid	i
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	b662      	cpsie	i
 8006dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d103      	bne.n	8006de8 <xQueueGenericSend+0x44>
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <xQueueGenericSend+0x48>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <xQueueGenericSend+0x4a>
 8006dec:	2300      	movs	r3, #0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <xQueueGenericSend+0x68>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	b672      	cpsid	i
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	b662      	cpsie	i
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d103      	bne.n	8006e1a <xQueueGenericSend+0x76>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <xQueueGenericSend+0x7a>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueGenericSend+0x7c>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10c      	bne.n	8006e3e <xQueueGenericSend+0x9a>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	b672      	cpsid	i
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	b662      	cpsie	i
 8006e38:	623b      	str	r3, [r7, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e3e:	f001 fb1f 	bl	8008480 <xTaskGetSchedulerState>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <xQueueGenericSend+0xaa>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <xQueueGenericSend+0xae>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueGenericSend+0xb0>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10c      	bne.n	8006e72 <xQueueGenericSend+0xce>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	b672      	cpsid	i
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	b662      	cpsie	i
 8006e6c:	61fb      	str	r3, [r7, #28]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e72:	f002 f853 	bl	8008f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <xQueueGenericSend+0xe4>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d129      	bne.n	8006edc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e8e:	f000 fa15 	bl	80072bc <prvCopyDataToQueue>
 8006e92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d010      	beq.n	8006ebe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	3324      	adds	r3, #36	; 0x24
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 f923 	bl	80080ec <xTaskRemoveFromEventList>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d013      	beq.n	8006ed4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006eac:	4b3f      	ldr	r3, [pc, #252]	; (8006fac <xQueueGenericSend+0x208>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	e00a      	b.n	8006ed4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b39      	ldr	r3, [pc, #228]	; (8006fac <xQueueGenericSend+0x208>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ed4:	f002 f856 	bl	8008f84 <vPortExitCritical>
				return pdPASS;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e063      	b.n	8006fa4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ee2:	f002 f84f 	bl	8008f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e05c      	b.n	8006fa4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ef0:	f107 0314 	add.w	r3, r7, #20
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 f95f 	bl	80081b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006efe:	f002 f841 	bl	8008f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f02:	f000 febf 	bl	8007c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f06:	f002 f809 	bl	8008f1c <vPortEnterCritical>
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f10:	b25b      	sxtb	r3, r3
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d103      	bne.n	8006f20 <xQueueGenericSend+0x17c>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d103      	bne.n	8006f36 <xQueueGenericSend+0x192>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f36:	f002 f825 	bl	8008f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f3a:	1d3a      	adds	r2, r7, #4
 8006f3c:	f107 0314 	add.w	r3, r7, #20
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 f94e 	bl	80081e4 <xTaskCheckForTimeOut>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d124      	bne.n	8006f98 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f50:	f000 faac 	bl	80074ac <prvIsQueueFull>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d018      	beq.n	8006f8c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	3310      	adds	r3, #16
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 f86e 	bl	8008044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f6a:	f000 fa37 	bl	80073dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f6e:	f000 fe97 	bl	8007ca0 <xTaskResumeAll>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f af7c 	bne.w	8006e72 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <xQueueGenericSend+0x208>)
 8006f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	e772      	b.n	8006e72 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f8e:	f000 fa25 	bl	80073dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f92:	f000 fe85 	bl	8007ca0 <xTaskResumeAll>
 8006f96:	e76c      	b.n	8006e72 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f9a:	f000 fa1f 	bl	80073dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f9e:	f000 fe7f 	bl	8007ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3738      	adds	r7, #56	; 0x38
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08e      	sub	sp, #56	; 0x38
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10c      	bne.n	8006fe2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	b672      	cpsid	i
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	b662      	cpsie	i
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <xQueueGenericSendFromISR+0x40>
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <xQueueGenericSendFromISR+0x44>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <xQueueGenericSendFromISR+0x46>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10c      	bne.n	8007014 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	b672      	cpsid	i
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	b662      	cpsie	i
 800700e:	623b      	str	r3, [r7, #32]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d103      	bne.n	8007022 <xQueueGenericSendFromISR+0x72>
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <xQueueGenericSendFromISR+0x76>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericSendFromISR+0x78>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10c      	bne.n	8007046 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	b672      	cpsid	i
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	b662      	cpsie	i
 8007040:	61fb      	str	r3, [r7, #28]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007046:	f002 f851 	bl	80090ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800704a:	f3ef 8211 	mrs	r2, BASEPRI
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	b672      	cpsid	i
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	b662      	cpsie	i
 8007062:	61ba      	str	r2, [r7, #24]
 8007064:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007066:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <xQueueGenericSendFromISR+0xcc>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d12c      	bne.n	80070d6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800708c:	f000 f916 	bl	80072bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007090:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d112      	bne.n	80070c0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	3324      	adds	r3, #36	; 0x24
 80070a6:	4618      	mov	r0, r3
 80070a8:	f001 f820 	bl	80080ec <xTaskRemoveFromEventList>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e007      	b.n	80070d0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070c4:	3301      	adds	r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	b25a      	sxtb	r2, r3
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070d0:	2301      	movs	r3, #1
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80070d4:	e001      	b.n	80070da <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3738      	adds	r7, #56	; 0x38
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08c      	sub	sp, #48	; 0x30
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10c      	bne.n	8007124 <xQueueReceive+0x34>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	b672      	cpsid	i
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	b662      	cpsie	i
 800711e:	623b      	str	r3, [r7, #32]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d103      	bne.n	8007132 <xQueueReceive+0x42>
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <xQueueReceive+0x46>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueReceive+0x48>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10c      	bne.n	8007156 <xQueueReceive+0x66>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	b672      	cpsid	i
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	b662      	cpsie	i
 8007150:	61fb      	str	r3, [r7, #28]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007156:	f001 f993 	bl	8008480 <xTaskGetSchedulerState>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <xQueueReceive+0x76>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <xQueueReceive+0x7a>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <xQueueReceive+0x7c>
 800716a:	2300      	movs	r3, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10c      	bne.n	800718a <xQueueReceive+0x9a>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	b672      	cpsid	i
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	b662      	cpsie	i
 8007184:	61bb      	str	r3, [r7, #24]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800718a:	f001 fec7 	bl	8008f1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01f      	beq.n	80071da <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719e:	f000 f8f7 	bl	8007390 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	1e5a      	subs	r2, r3, #1
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00f      	beq.n	80071d2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	3310      	adds	r3, #16
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 ff98 	bl	80080ec <xTaskRemoveFromEventList>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071c2:	4b3d      	ldr	r3, [pc, #244]	; (80072b8 <xQueueReceive+0x1c8>)
 80071c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071d2:	f001 fed7 	bl	8008f84 <vPortExitCritical>
				return pdPASS;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e069      	b.n	80072ae <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071e0:	f001 fed0 	bl	8008f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e062      	b.n	80072ae <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ee:	f107 0310 	add.w	r3, r7, #16
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 ffe0 	bl	80081b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071fc:	f001 fec2 	bl	8008f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007200:	f000 fd40 	bl	8007c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007204:	f001 fe8a 	bl	8008f1c <vPortEnterCritical>
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800720e:	b25b      	sxtb	r3, r3
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d103      	bne.n	800721e <xQueueReceive+0x12e>
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007224:	b25b      	sxtb	r3, r3
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d103      	bne.n	8007234 <xQueueReceive+0x144>
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007234:	f001 fea6 	bl	8008f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007238:	1d3a      	adds	r2, r7, #4
 800723a:	f107 0310 	add.w	r3, r7, #16
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f000 ffcf 	bl	80081e4 <xTaskCheckForTimeOut>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d123      	bne.n	8007294 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800724c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724e:	f000 f917 	bl	8007480 <prvIsQueueEmpty>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d017      	beq.n	8007288 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	3324      	adds	r3, #36	; 0x24
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4611      	mov	r1, r2
 8007260:	4618      	mov	r0, r3
 8007262:	f000 feef 	bl	8008044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007268:	f000 f8b8 	bl	80073dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800726c:	f000 fd18 	bl	8007ca0 <xTaskResumeAll>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d189      	bne.n	800718a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <xQueueReceive+0x1c8>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	e780      	b.n	800718a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800728a:	f000 f8a7 	bl	80073dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800728e:	f000 fd07 	bl	8007ca0 <xTaskResumeAll>
 8007292:	e77a      	b.n	800718a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007296:	f000 f8a1 	bl	80073dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800729a:	f000 fd01 	bl	8007ca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800729e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a0:	f000 f8ee 	bl	8007480 <prvIsQueueEmpty>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f43f af6f 	beq.w	800718a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3730      	adds	r7, #48	; 0x30
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10d      	bne.n	80072f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d14d      	bne.n	800737e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 f8e8 	bl	80084bc <xTaskPriorityDisinherit>
 80072ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	609a      	str	r2, [r3, #8]
 80072f4:	e043      	b.n	800737e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d119      	bne.n	8007330 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6858      	ldr	r0, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	461a      	mov	r2, r3
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	f002 ff4f 	bl	800a1aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	441a      	add	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	429a      	cmp	r2, r3
 8007324:	d32b      	bcc.n	800737e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
 800732e:	e026      	b.n	800737e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	68d8      	ldr	r0, [r3, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	461a      	mov	r2, r3
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	f002 ff35 	bl	800a1aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	425b      	negs	r3, r3
 800734a:	441a      	add	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d207      	bcs.n	800736c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	425b      	negs	r3, r3
 8007366:	441a      	add	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d105      	bne.n	800737e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3b01      	subs	r3, #1
 800737c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007386:	697b      	ldr	r3, [r7, #20]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d018      	beq.n	80073d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	441a      	add	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d303      	bcc.n	80073c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68d9      	ldr	r1, [r3, #12]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	461a      	mov	r2, r3
 80073ce:	6838      	ldr	r0, [r7, #0]
 80073d0:	f002 feeb 	bl	800a1aa <memcpy>
	}
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073e4:	f001 fd9a 	bl	8008f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073f0:	e011      	b.n	8007416 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d012      	beq.n	8007420 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3324      	adds	r3, #36	; 0x24
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fe74 	bl	80080ec <xTaskRemoveFromEventList>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800740a:	f000 ff51 	bl	80082b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	3b01      	subs	r3, #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	dce9      	bgt.n	80073f2 <prvUnlockQueue+0x16>
 800741e:	e000      	b.n	8007422 <prvUnlockQueue+0x46>
					break;
 8007420:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800742a:	f001 fdab 	bl	8008f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800742e:	f001 fd75 	bl	8008f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007438:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800743a:	e011      	b.n	8007460 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d012      	beq.n	800746a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3310      	adds	r3, #16
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fe4f 	bl	80080ec <xTaskRemoveFromEventList>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007454:	f000 ff2c 	bl	80082b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	3b01      	subs	r3, #1
 800745c:	b2db      	uxtb	r3, r3
 800745e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	dce9      	bgt.n	800743c <prvUnlockQueue+0x60>
 8007468:	e000      	b.n	800746c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800746a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	22ff      	movs	r2, #255	; 0xff
 8007470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007474:	f001 fd86 	bl	8008f84 <vPortExitCritical>
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007488:	f001 fd48 	bl	8008f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e001      	b.n	800749e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800749e:	f001 fd71 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074b4:	f001 fd32 	bl	8008f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d102      	bne.n	80074ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074c4:	2301      	movs	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e001      	b.n	80074ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ce:	f001 fd59 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 80074d2:	68fb      	ldr	r3, [r7, #12]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e014      	b.n	8007516 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074ec:	4a0f      	ldr	r2, [pc, #60]	; (800752c <vQueueAddToRegistry+0x50>)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074f8:	490c      	ldr	r1, [pc, #48]	; (800752c <vQueueAddToRegistry+0x50>)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007502:	4a0a      	ldr	r2, [pc, #40]	; (800752c <vQueueAddToRegistry+0x50>)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	4413      	add	r3, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800750e:	e006      	b.n	800751e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b07      	cmp	r3, #7
 800751a:	d9e7      	bls.n	80074ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	20001068 	.word	0x20001068

08007530 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007540:	f001 fcec 	bl	8008f1c <vPortEnterCritical>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800754a:	b25b      	sxtb	r3, r3
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d103      	bne.n	800755a <vQueueWaitForMessageRestricted+0x2a>
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007560:	b25b      	sxtb	r3, r3
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	d103      	bne.n	8007570 <vQueueWaitForMessageRestricted+0x40>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007570:	f001 fd08 	bl	8008f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3324      	adds	r3, #36	; 0x24
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fd83 	bl	8008090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800758a:	6978      	ldr	r0, [r7, #20]
 800758c:	f7ff ff26 	bl	80073dc <prvUnlockQueue>
	}
 8007590:	bf00      	nop
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	; 0x38
 800759c:	af04      	add	r7, sp, #16
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10c      	bne.n	80075c6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	b672      	cpsid	i
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	b662      	cpsie	i
 80075c0:	623b      	str	r3, [r7, #32]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10c      	bne.n	80075e6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	b672      	cpsid	i
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	b662      	cpsie	i
 80075e0:	61fb      	str	r3, [r7, #28]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075e6:	23a8      	movs	r3, #168	; 0xa8
 80075e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2ba8      	cmp	r3, #168	; 0xa8
 80075ee:	d00c      	beq.n	800760a <xTaskCreateStatic+0x72>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	b672      	cpsid	i
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	b662      	cpsie	i
 8007604:	61bb      	str	r3, [r7, #24]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800760a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01e      	beq.n	8007650 <xTaskCreateStatic+0xb8>
 8007612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01b      	beq.n	8007650 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007620:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	2202      	movs	r2, #2
 8007626:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800762a:	2300      	movs	r3, #0
 800762c:	9303      	str	r3, [sp, #12]
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	9302      	str	r3, [sp, #8]
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	9301      	str	r3, [sp, #4]
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f850 	bl	80076e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800764a:	f000 f8f5 	bl	8007838 <prvAddNewTaskToReadyList>
 800764e:	e001      	b.n	8007654 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007654:	697b      	ldr	r3, [r7, #20]
	}
 8007656:	4618      	mov	r0, r3
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800765e:	b580      	push	{r7, lr}
 8007660:	b08c      	sub	sp, #48	; 0x30
 8007662:	af04      	add	r7, sp, #16
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4618      	mov	r0, r3
 8007674:	f001 fd7e 	bl	8009174 <pvPortMalloc>
 8007678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00e      	beq.n	800769e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007680:	20a8      	movs	r0, #168	; 0xa8
 8007682:	f001 fd77 	bl	8009174 <pvPortMalloc>
 8007686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
 8007694:	e005      	b.n	80076a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007696:	6978      	ldr	r0, [r7, #20]
 8007698:	f001 fe36 	bl	8009308 <vPortFree>
 800769c:	e001      	b.n	80076a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d017      	beq.n	80076d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076b0:	88fa      	ldrh	r2, [r7, #6]
 80076b2:	2300      	movs	r3, #0
 80076b4:	9303      	str	r3, [sp, #12]
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	9302      	str	r3, [sp, #8]
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f80e 	bl	80076e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076cc:	69f8      	ldr	r0, [r7, #28]
 80076ce:	f000 f8b3 	bl	8007838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076d2:	2301      	movs	r3, #1
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	e002      	b.n	80076de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076d8:	f04f 33ff 	mov.w	r3, #4294967295
 80076dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076de:	69bb      	ldr	r3, [r7, #24]
	}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	461a      	mov	r2, r3
 8007700:	21a5      	movs	r1, #165	; 0xa5
 8007702:	f002 fc7c 	bl	8009ffe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007710:	440b      	add	r3, r1
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	f023 0307 	bic.w	r3, r3, #7
 800771e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	b672      	cpsid	i
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	b662      	cpsie	i
 800773e:	617b      	str	r3, [r7, #20]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01f      	beq.n	800778a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800774a:	2300      	movs	r3, #0
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	e012      	b.n	8007776 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	7819      	ldrb	r1, [r3, #0]
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	3334      	adds	r3, #52	; 0x34
 8007760:	460a      	mov	r2, r1
 8007762:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d006      	beq.n	800777e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	2b0f      	cmp	r3, #15
 800777a:	d9e9      	bls.n	8007750 <prvInitialiseNewTask+0x68>
 800777c:	e000      	b.n	8007780 <prvInitialiseNewTask+0x98>
			{
				break;
 800777e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007788:	e003      	b.n	8007792 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	2b37      	cmp	r3, #55	; 0x37
 8007796:	d901      	bls.n	800779c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007798:	2337      	movs	r3, #55	; 0x37
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	2200      	movs	r2, #0
 80077ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	3304      	adds	r3, #4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff f952 	bl	8006a5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	3318      	adds	r3, #24
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff f94d 	bl	8006a5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	3354      	adds	r3, #84	; 0x54
 80077ec:	224c      	movs	r2, #76	; 0x4c
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f002 fc04 	bl	8009ffe <memset>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	4a0c      	ldr	r2, [pc, #48]	; (800782c <prvInitialiseNewTask+0x144>)
 80077fa:	659a      	str	r2, [r3, #88]	; 0x58
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	4a0c      	ldr	r2, [pc, #48]	; (8007830 <prvInitialiseNewTask+0x148>)
 8007800:	65da      	str	r2, [r3, #92]	; 0x5c
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	4a0b      	ldr	r2, [pc, #44]	; (8007834 <prvInitialiseNewTask+0x14c>)
 8007806:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	69b8      	ldr	r0, [r7, #24]
 800780e:	f001 fa77 	bl	8008d00 <pxPortInitialiseStack>
 8007812:	4602      	mov	r2, r0
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007822:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007824:	bf00      	nop
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200052f4 	.word	0x200052f4
 8007830:	2000535c 	.word	0x2000535c
 8007834:	200053c4 	.word	0x200053c4

08007838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007840:	f001 fb6c 	bl	8008f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007844:	4b2d      	ldr	r3, [pc, #180]	; (80078fc <prvAddNewTaskToReadyList+0xc4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3301      	adds	r3, #1
 800784a:	4a2c      	ldr	r2, [pc, #176]	; (80078fc <prvAddNewTaskToReadyList+0xc4>)
 800784c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800784e:	4b2c      	ldr	r3, [pc, #176]	; (8007900 <prvAddNewTaskToReadyList+0xc8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007856:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <prvAddNewTaskToReadyList+0xc8>)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800785c:	4b27      	ldr	r3, [pc, #156]	; (80078fc <prvAddNewTaskToReadyList+0xc4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d110      	bne.n	8007886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007864:	f000 fd48 	bl	80082f8 <prvInitialiseTaskLists>
 8007868:	e00d      	b.n	8007886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800786a:	4b26      	ldr	r3, [pc, #152]	; (8007904 <prvAddNewTaskToReadyList+0xcc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007872:	4b23      	ldr	r3, [pc, #140]	; (8007900 <prvAddNewTaskToReadyList+0xc8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	429a      	cmp	r2, r3
 800787e:	d802      	bhi.n	8007886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007880:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <prvAddNewTaskToReadyList+0xc8>)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007886:	4b20      	ldr	r3, [pc, #128]	; (8007908 <prvAddNewTaskToReadyList+0xd0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <prvAddNewTaskToReadyList+0xd0>)
 800788e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007890:	4b1d      	ldr	r3, [pc, #116]	; (8007908 <prvAddNewTaskToReadyList+0xd0>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <prvAddNewTaskToReadyList+0xd4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d903      	bls.n	80078ac <prvAddNewTaskToReadyList+0x74>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	4a18      	ldr	r2, [pc, #96]	; (800790c <prvAddNewTaskToReadyList+0xd4>)
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <prvAddNewTaskToReadyList+0xd8>)
 80078ba:	441a      	add	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3304      	adds	r3, #4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f7ff f8d7 	bl	8006a76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078c8:	f001 fb5c 	bl	8008f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078cc:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <prvAddNewTaskToReadyList+0xcc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00e      	beq.n	80078f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <prvAddNewTaskToReadyList+0xc8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	429a      	cmp	r2, r3
 80078e0:	d207      	bcs.n	80078f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078e2:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <prvAddNewTaskToReadyList+0xdc>)
 80078e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	2000157c 	.word	0x2000157c
 8007900:	200010a8 	.word	0x200010a8
 8007904:	20001588 	.word	0x20001588
 8007908:	20001598 	.word	0x20001598
 800790c:	20001584 	.word	0x20001584
 8007910:	200010ac 	.word	0x200010ac
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d019      	beq.n	800795e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800792a:	4b14      	ldr	r3, [pc, #80]	; (800797c <vTaskDelay+0x64>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00c      	beq.n	800794c <vTaskDelay+0x34>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	b672      	cpsid	i
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	b662      	cpsie	i
 8007946:	60bb      	str	r3, [r7, #8]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800794c:	f000 f99a 	bl	8007c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007950:	2100      	movs	r1, #0
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fe24 	bl	80085a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007958:	f000 f9a2 	bl	8007ca0 <xTaskResumeAll>
 800795c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d107      	bne.n	8007974 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <vTaskDelay+0x68>)
 8007966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	200015a4 	.word	0x200015a4
 8007980:	e000ed04 	.word	0xe000ed04

08007984 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800798c:	f001 fac6 	bl	8008f1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d102      	bne.n	800799c <vTaskSuspend+0x18>
 8007996:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <vTaskSuspend+0xd8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	e000      	b.n	800799e <vTaskSuspend+0x1a>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff f8c3 	bl	8006b30 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3318      	adds	r3, #24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff f8ba 	bl	8006b30 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3304      	adds	r3, #4
 80079c0:	4619      	mov	r1, r3
 80079c2:	4827      	ldr	r0, [pc, #156]	; (8007a60 <vTaskSuspend+0xdc>)
 80079c4:	f7ff f857 	bl	8006a76 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d103      	bne.n	80079dc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80079dc:	f001 fad2 	bl	8008f84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80079e0:	4b20      	ldr	r3, [pc, #128]	; (8007a64 <vTaskSuspend+0xe0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80079e8:	f001 fa98 	bl	8008f1c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80079ec:	f000 fd28 	bl	8008440 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80079f0:	f001 fac8 	bl	8008f84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80079f4:	4b19      	ldr	r3, [pc, #100]	; (8007a5c <vTaskSuspend+0xd8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d129      	bne.n	8007a52 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 80079fe:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <vTaskSuspend+0xe0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d019      	beq.n	8007a3a <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <vTaskSuspend+0xe4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <vTaskSuspend+0xa4>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	b672      	cpsid	i
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	b662      	cpsie	i
 8007a22:	60bb      	str	r3, [r7, #8]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8007a28:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <vTaskSuspend+0xe8>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a38:	e00b      	b.n	8007a52 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <vTaskSuspend+0xdc>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <vTaskSuspend+0xec>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d103      	bne.n	8007a4e <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <vTaskSuspend+0xd8>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
	}
 8007a4c:	e001      	b.n	8007a52 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8007a4e:	f000 fa93 	bl	8007f78 <vTaskSwitchContext>
	}
 8007a52:	bf00      	nop
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200010a8 	.word	0x200010a8
 8007a60:	20001568 	.word	0x20001568
 8007a64:	20001588 	.word	0x20001588
 8007a68:	200015a4 	.word	0x200015a4
 8007a6c:	e000ed04 	.word	0xe000ed04
 8007a70:	2000157c 	.word	0x2000157c

08007a74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10c      	bne.n	8007aa4 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	b672      	cpsid	i
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	b662      	cpsie	i
 8007a9e:	60fb      	str	r3, [r7, #12]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	4a0a      	ldr	r2, [pc, #40]	; (8007ad4 <prvTaskIsTaskSuspended+0x60>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d10a      	bne.n	8007ac4 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <prvTaskIsTaskSuspended+0x64>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d005      	beq.n	8007ac4 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ac4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20001568 	.word	0x20001568
 8007ad8:	2000153c 	.word	0x2000153c

08007adc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10c      	bne.n	8007b08 <vTaskResume+0x2c>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	b672      	cpsid	i
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	b662      	cpsie	i
 8007b02:	60bb      	str	r3, [r7, #8]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007b08:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <vTaskResume+0xb0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d038      	beq.n	8007b84 <vTaskResume+0xa8>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d035      	beq.n	8007b84 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8007b18:	f001 fa00 	bl	8008f1c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff ffa9 	bl	8007a74 <prvTaskIsTaskSuspended>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d02b      	beq.n	8007b80 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe ffff 	bl	8006b30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b36:	4b16      	ldr	r3, [pc, #88]	; (8007b90 <vTaskResume+0xb4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d903      	bls.n	8007b46 <vTaskResume+0x6a>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <vTaskResume+0xb4>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a10      	ldr	r2, [pc, #64]	; (8007b94 <vTaskResume+0xb8>)
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7fe ff8a 	bl	8006a76 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <vTaskResume+0xb0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d307      	bcc.n	8007b80 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007b70:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <vTaskResume+0xbc>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007b80:	f001 fa00 	bl	8008f84 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	200010a8 	.word	0x200010a8
 8007b90:	20001584 	.word	0x20001584
 8007b94:	200010ac 	.word	0x200010ac
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08a      	sub	sp, #40	; 0x28
 8007ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007baa:	463a      	mov	r2, r7
 8007bac:	1d39      	adds	r1, r7, #4
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe fefe 	bl	80069b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	9202      	str	r2, [sp, #8]
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	460a      	mov	r2, r1
 8007bca:	4926      	ldr	r1, [pc, #152]	; (8007c64 <vTaskStartScheduler+0xc8>)
 8007bcc:	4826      	ldr	r0, [pc, #152]	; (8007c68 <vTaskStartScheduler+0xcc>)
 8007bce:	f7ff fce3 	bl	8007598 <xTaskCreateStatic>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4a25      	ldr	r2, [pc, #148]	; (8007c6c <vTaskStartScheduler+0xd0>)
 8007bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bd8:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <vTaskStartScheduler+0xd0>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007be0:	2301      	movs	r3, #1
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e001      	b.n	8007bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d102      	bne.n	8007bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bf0:	f000 fd2a 	bl	8008648 <xTimerCreateTimerTask>
 8007bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d11d      	bne.n	8007c38 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	b672      	cpsid	i
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	b662      	cpsie	i
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c14:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <vTaskStartScheduler+0xd4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3354      	adds	r3, #84	; 0x54
 8007c1a:	4a16      	ldr	r2, [pc, #88]	; (8007c74 <vTaskStartScheduler+0xd8>)
 8007c1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c1e:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <vTaskStartScheduler+0xdc>)
 8007c20:	f04f 32ff 	mov.w	r2, #4294967295
 8007c24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c26:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <vTaskStartScheduler+0xe0>)
 8007c28:	2201      	movs	r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c2c:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <vTaskStartScheduler+0xe4>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c32:	f001 f8f5 	bl	8008e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c36:	e010      	b.n	8007c5a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3e:	d10c      	bne.n	8007c5a <vTaskStartScheduler+0xbe>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	b672      	cpsid	i
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	b662      	cpsie	i
 8007c54:	60fb      	str	r3, [r7, #12]
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <vTaskStartScheduler+0xbc>
}
 8007c5a:	bf00      	nop
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	0800c3d4 	.word	0x0800c3d4
 8007c68:	080082c9 	.word	0x080082c9
 8007c6c:	200015a0 	.word	0x200015a0
 8007c70:	200010a8 	.word	0x200010a8
 8007c74:	20000094 	.word	0x20000094
 8007c78:	2000159c 	.word	0x2000159c
 8007c7c:	20001588 	.word	0x20001588
 8007c80:	20001580 	.word	0x20001580

08007c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c88:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <vTaskSuspendAll+0x18>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	4a03      	ldr	r2, [pc, #12]	; (8007c9c <vTaskSuspendAll+0x18>)
 8007c90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c92:	bf00      	nop
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	200015a4 	.word	0x200015a4

08007ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cae:	4b43      	ldr	r3, [pc, #268]	; (8007dbc <xTaskResumeAll+0x11c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10c      	bne.n	8007cd0 <xTaskResumeAll+0x30>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	b672      	cpsid	i
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	b662      	cpsie	i
 8007cca:	603b      	str	r3, [r7, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	e7fe      	b.n	8007cce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cd0:	f001 f924 	bl	8008f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cd4:	4b39      	ldr	r3, [pc, #228]	; (8007dbc <xTaskResumeAll+0x11c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	4a38      	ldr	r2, [pc, #224]	; (8007dbc <xTaskResumeAll+0x11c>)
 8007cdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cde:	4b37      	ldr	r3, [pc, #220]	; (8007dbc <xTaskResumeAll+0x11c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d162      	bne.n	8007dac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ce6:	4b36      	ldr	r3, [pc, #216]	; (8007dc0 <xTaskResumeAll+0x120>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d05e      	beq.n	8007dac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cee:	e02f      	b.n	8007d50 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf0:	4b34      	ldr	r3, [pc, #208]	; (8007dc4 <xTaskResumeAll+0x124>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3318      	adds	r3, #24
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fe ff17 	bl	8006b30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe ff12 	bl	8006b30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4b2d      	ldr	r3, [pc, #180]	; (8007dc8 <xTaskResumeAll+0x128>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d903      	bls.n	8007d20 <xTaskResumeAll+0x80>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a2a      	ldr	r2, [pc, #168]	; (8007dc8 <xTaskResumeAll+0x128>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4a27      	ldr	r2, [pc, #156]	; (8007dcc <xTaskResumeAll+0x12c>)
 8007d2e:	441a      	add	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe fe9d 	bl	8006a76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4b23      	ldr	r3, [pc, #140]	; (8007dd0 <xTaskResumeAll+0x130>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d302      	bcc.n	8007d50 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007d4a:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <xTaskResumeAll+0x134>)
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d50:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <xTaskResumeAll+0x124>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1cb      	bne.n	8007cf0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d5e:	f000 fb6f 	bl	8008440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d62:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <xTaskResumeAll+0x138>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d010      	beq.n	8007d90 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d6e:	f000 f847 	bl	8007e00 <xTaskIncrementTick>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007d78:	4b16      	ldr	r3, [pc, #88]	; (8007dd4 <xTaskResumeAll+0x134>)
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f1      	bne.n	8007d6e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007d8a:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <xTaskResumeAll+0x138>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d90:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <xTaskResumeAll+0x134>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <xTaskResumeAll+0x13c>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dac:	f001 f8ea 	bl	8008f84 <vPortExitCritical>

	return xAlreadyYielded;
 8007db0:	68bb      	ldr	r3, [r7, #8]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	200015a4 	.word	0x200015a4
 8007dc0:	2000157c 	.word	0x2000157c
 8007dc4:	2000153c 	.word	0x2000153c
 8007dc8:	20001584 	.word	0x20001584
 8007dcc:	200010ac 	.word	0x200010ac
 8007dd0:	200010a8 	.word	0x200010a8
 8007dd4:	20001590 	.word	0x20001590
 8007dd8:	2000158c 	.word	0x2000158c
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <xTaskGetTickCount+0x1c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007dec:	687b      	ldr	r3, [r7, #4]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20001580 	.word	0x20001580

08007e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e0a:	4b50      	ldr	r3, [pc, #320]	; (8007f4c <xTaskIncrementTick+0x14c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f040 808b 	bne.w	8007f2a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e14:	4b4e      	ldr	r3, [pc, #312]	; (8007f50 <xTaskIncrementTick+0x150>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e1c:	4a4c      	ldr	r2, [pc, #304]	; (8007f50 <xTaskIncrementTick+0x150>)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d122      	bne.n	8007e6e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e28:	4b4a      	ldr	r3, [pc, #296]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00c      	beq.n	8007e4c <xTaskIncrementTick+0x4c>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	b672      	cpsid	i
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	b662      	cpsie	i
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskIncrementTick+0x4a>
 8007e4c:	4b41      	ldr	r3, [pc, #260]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	4b41      	ldr	r3, [pc, #260]	; (8007f58 <xTaskIncrementTick+0x158>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a3f      	ldr	r2, [pc, #252]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	; (8007f58 <xTaskIncrementTick+0x158>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	4b3e      	ldr	r3, [pc, #248]	; (8007f5c <xTaskIncrementTick+0x15c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a3d      	ldr	r2, [pc, #244]	; (8007f5c <xTaskIncrementTick+0x15c>)
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	f000 fae9 	bl	8008440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e6e:	4b3c      	ldr	r3, [pc, #240]	; (8007f60 <xTaskIncrementTick+0x160>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d349      	bcc.n	8007f0c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e78:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	4b37      	ldr	r3, [pc, #220]	; (8007f60 <xTaskIncrementTick+0x160>)
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	601a      	str	r2, [r3, #0]
					break;
 8007e8a:	e03f      	b.n	8007f0c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b31      	ldr	r3, [pc, #196]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d203      	bcs.n	8007eac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ea4:	4a2e      	ldr	r2, [pc, #184]	; (8007f60 <xTaskIncrementTick+0x160>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eaa:	e02f      	b.n	8007f0c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fe3d 	bl	8006b30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fe34 	bl	8006b30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ecc:	4b25      	ldr	r3, [pc, #148]	; (8007f64 <xTaskIncrementTick+0x164>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d903      	bls.n	8007edc <xTaskIncrementTick+0xdc>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <xTaskIncrementTick+0x164>)
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <xTaskIncrementTick+0x168>)
 8007eea:	441a      	add	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f7fe fdbf 	bl	8006a76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <xTaskIncrementTick+0x16c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d3b8      	bcc.n	8007e78 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f0a:	e7b5      	b.n	8007e78 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <xTaskIncrementTick+0x16c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f12:	4915      	ldr	r1, [pc, #84]	; (8007f68 <xTaskIncrementTick+0x168>)
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d907      	bls.n	8007f34 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e004      	b.n	8007f34 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <xTaskIncrementTick+0x170>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <xTaskIncrementTick+0x170>)
 8007f32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <xTaskIncrementTick+0x174>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f40:	697b      	ldr	r3, [r7, #20]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200015a4 	.word	0x200015a4
 8007f50:	20001580 	.word	0x20001580
 8007f54:	20001534 	.word	0x20001534
 8007f58:	20001538 	.word	0x20001538
 8007f5c:	20001594 	.word	0x20001594
 8007f60:	2000159c 	.word	0x2000159c
 8007f64:	20001584 	.word	0x20001584
 8007f68:	200010ac 	.word	0x200010ac
 8007f6c:	200010a8 	.word	0x200010a8
 8007f70:	2000158c 	.word	0x2000158c
 8007f74:	20001590 	.word	0x20001590

08007f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f7e:	4b2b      	ldr	r3, [pc, #172]	; (800802c <vTaskSwitchContext+0xb4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f86:	4b2a      	ldr	r3, [pc, #168]	; (8008030 <vTaskSwitchContext+0xb8>)
 8007f88:	2201      	movs	r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f8c:	e048      	b.n	8008020 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007f8e:	4b28      	ldr	r3, [pc, #160]	; (8008030 <vTaskSwitchContext+0xb8>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f94:	4b27      	ldr	r3, [pc, #156]	; (8008034 <vTaskSwitchContext+0xbc>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	e012      	b.n	8007fc2 <vTaskSwitchContext+0x4a>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10c      	bne.n	8007fbc <vTaskSwitchContext+0x44>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	b672      	cpsid	i
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	b662      	cpsie	i
 8007fb6:	607b      	str	r3, [r7, #4]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <vTaskSwitchContext+0x42>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	491d      	ldr	r1, [pc, #116]	; (8008038 <vTaskSwitchContext+0xc0>)
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0e2      	beq.n	8007f9c <vTaskSwitchContext+0x24>
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4a15      	ldr	r2, [pc, #84]	; (8008038 <vTaskSwitchContext+0xc0>)
 8007fe2:	4413      	add	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	605a      	str	r2, [r3, #4]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d104      	bne.n	8008006 <vTaskSwitchContext+0x8e>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4a0b      	ldr	r2, [pc, #44]	; (800803c <vTaskSwitchContext+0xc4>)
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <vTaskSwitchContext+0xbc>)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008016:	4b09      	ldr	r3, [pc, #36]	; (800803c <vTaskSwitchContext+0xc4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3354      	adds	r3, #84	; 0x54
 800801c:	4a08      	ldr	r2, [pc, #32]	; (8008040 <vTaskSwitchContext+0xc8>)
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	200015a4 	.word	0x200015a4
 8008030:	20001590 	.word	0x20001590
 8008034:	20001584 	.word	0x20001584
 8008038:	200010ac 	.word	0x200010ac
 800803c:	200010a8 	.word	0x200010a8
 8008040:	20000094 	.word	0x20000094

08008044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10c      	bne.n	800806e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	b672      	cpsid	i
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	b662      	cpsie	i
 8008068:	60fb      	str	r3, [r7, #12]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800806e:	4b07      	ldr	r3, [pc, #28]	; (800808c <vTaskPlaceOnEventList+0x48>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3318      	adds	r3, #24
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fe fd21 	bl	8006abe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800807c:	2101      	movs	r1, #1
 800807e:	6838      	ldr	r0, [r7, #0]
 8008080:	f000 fa8e 	bl	80085a0 <prvAddCurrentTaskToDelayedList>
}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	200010a8 	.word	0x200010a8

08008090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10c      	bne.n	80080bc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	b672      	cpsid	i
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	b662      	cpsie	i
 80080b6:	617b      	str	r3, [r7, #20]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <vTaskPlaceOnEventListRestricted+0x58>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3318      	adds	r3, #24
 80080c2:	4619      	mov	r1, r3
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7fe fcd6 	bl	8006a76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295
 80080d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f000 fa61 	bl	80085a0 <prvAddCurrentTaskToDelayedList>
	}
 80080de:	bf00      	nop
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200010a8 	.word	0x200010a8

080080ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10c      	bne.n	800811c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	b672      	cpsid	i
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	b662      	cpsie	i
 8008116:	60fb      	str	r3, [r7, #12]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	3318      	adds	r3, #24
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe fd05 	bl	8006b30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008126:	4b1e      	ldr	r3, [pc, #120]	; (80081a0 <xTaskRemoveFromEventList+0xb4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d11d      	bne.n	800816a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	3304      	adds	r3, #4
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe fcfc 	bl	8006b30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <xTaskRemoveFromEventList+0xb8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d903      	bls.n	800814c <xTaskRemoveFromEventList+0x60>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	4a16      	ldr	r2, [pc, #88]	; (80081a4 <xTaskRemoveFromEventList+0xb8>)
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <xTaskRemoveFromEventList+0xbc>)
 800815a:	441a      	add	r2, r3
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	3304      	adds	r3, #4
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f7fe fc87 	bl	8006a76 <vListInsertEnd>
 8008168:	e005      	b.n	8008176 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3318      	adds	r3, #24
 800816e:	4619      	mov	r1, r3
 8008170:	480e      	ldr	r0, [pc, #56]	; (80081ac <xTaskRemoveFromEventList+0xc0>)
 8008172:	f7fe fc80 	bl	8006a76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <xTaskRemoveFromEventList+0xc4>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	429a      	cmp	r2, r3
 8008182:	d905      	bls.n	8008190 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <xTaskRemoveFromEventList+0xc8>)
 800818a:	2201      	movs	r2, #1
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e001      	b.n	8008194 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008194:	697b      	ldr	r3, [r7, #20]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	200015a4 	.word	0x200015a4
 80081a4:	20001584 	.word	0x20001584
 80081a8:	200010ac 	.word	0x200010ac
 80081ac:	2000153c 	.word	0x2000153c
 80081b0:	200010a8 	.word	0x200010a8
 80081b4:	20001590 	.word	0x20001590

080081b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <vTaskInternalSetTimeOutState+0x24>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <vTaskInternalSetTimeOutState+0x28>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20001594 	.word	0x20001594
 80081e0:	20001580 	.word	0x20001580

080081e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10c      	bne.n	800820e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	613b      	str	r3, [r7, #16]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10c      	bne.n	800822e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	b672      	cpsid	i
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	b662      	cpsie	i
 8008228:	60fb      	str	r3, [r7, #12]
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800822e:	f000 fe75 	bl	8008f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008232:	4b1d      	ldr	r3, [pc, #116]	; (80082a8 <xTaskCheckForTimeOut+0xc4>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d102      	bne.n	8008252 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800824c:	2300      	movs	r3, #0
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e023      	b.n	800829a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b15      	ldr	r3, [pc, #84]	; (80082ac <xTaskCheckForTimeOut+0xc8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d007      	beq.n	800826e <xTaskCheckForTimeOut+0x8a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	d302      	bcc.n	800826e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008268:	2301      	movs	r3, #1
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	e015      	b.n	800829a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	429a      	cmp	r2, r3
 8008276:	d20b      	bcs.n	8008290 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff ff97 	bl	80081b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	e004      	b.n	800829a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008296:	2301      	movs	r3, #1
 8008298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800829a:	f000 fe73 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 800829e:	69fb      	ldr	r3, [r7, #28]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20001580 	.word	0x20001580
 80082ac:	20001594 	.word	0x20001594

080082b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <vTaskMissedYield+0x14>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
}
 80082ba:	bf00      	nop
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	20001590 	.word	0x20001590

080082c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082d0:	f000 f852 	bl	8008378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <prvIdleTask+0x28>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d9f9      	bls.n	80082d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <prvIdleTask+0x2c>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082ec:	e7f0      	b.n	80082d0 <prvIdleTask+0x8>
 80082ee:	bf00      	nop
 80082f0:	200010ac 	.word	0x200010ac
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	e00c      	b.n	800831e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <prvInitialiseTaskLists+0x60>)
 8008310:	4413      	add	r3, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fb82 	bl	8006a1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3301      	adds	r3, #1
 800831c:	607b      	str	r3, [r7, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b37      	cmp	r3, #55	; 0x37
 8008322:	d9ef      	bls.n	8008304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008324:	480d      	ldr	r0, [pc, #52]	; (800835c <prvInitialiseTaskLists+0x64>)
 8008326:	f7fe fb79 	bl	8006a1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800832a:	480d      	ldr	r0, [pc, #52]	; (8008360 <prvInitialiseTaskLists+0x68>)
 800832c:	f7fe fb76 	bl	8006a1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008330:	480c      	ldr	r0, [pc, #48]	; (8008364 <prvInitialiseTaskLists+0x6c>)
 8008332:	f7fe fb73 	bl	8006a1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008336:	480c      	ldr	r0, [pc, #48]	; (8008368 <prvInitialiseTaskLists+0x70>)
 8008338:	f7fe fb70 	bl	8006a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800833c:	480b      	ldr	r0, [pc, #44]	; (800836c <prvInitialiseTaskLists+0x74>)
 800833e:	f7fe fb6d 	bl	8006a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008342:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <prvInitialiseTaskLists+0x78>)
 8008344:	4a05      	ldr	r2, [pc, #20]	; (800835c <prvInitialiseTaskLists+0x64>)
 8008346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <prvInitialiseTaskLists+0x7c>)
 800834a:	4a05      	ldr	r2, [pc, #20]	; (8008360 <prvInitialiseTaskLists+0x68>)
 800834c:	601a      	str	r2, [r3, #0]
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200010ac 	.word	0x200010ac
 800835c:	2000150c 	.word	0x2000150c
 8008360:	20001520 	.word	0x20001520
 8008364:	2000153c 	.word	0x2000153c
 8008368:	20001550 	.word	0x20001550
 800836c:	20001568 	.word	0x20001568
 8008370:	20001534 	.word	0x20001534
 8008374:	20001538 	.word	0x20001538

08008378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800837e:	e019      	b.n	80083b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008380:	f000 fdcc 	bl	8008f1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008384:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <prvCheckTasksWaitingTermination+0x50>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3304      	adds	r3, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fbcd 	bl	8006b30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <prvCheckTasksWaitingTermination+0x54>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3b01      	subs	r3, #1
 800839c:	4a0b      	ldr	r2, [pc, #44]	; (80083cc <prvCheckTasksWaitingTermination+0x54>)
 800839e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083a0:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083aa:	f000 fdeb 	bl	8008f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f810 	bl	80083d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e1      	bne.n	8008380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20001550 	.word	0x20001550
 80083cc:	2000157c 	.word	0x2000157c
 80083d0:	20001564 	.word	0x20001564

080083d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3354      	adds	r3, #84	; 0x54
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fe29 	bl	800a038 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 ff87 	bl	8009308 <vPortFree>
				vPortFree( pxTCB );
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 ff84 	bl	8009308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008400:	e01a      	b.n	8008438 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008408:	2b01      	cmp	r3, #1
 800840a:	d103      	bne.n	8008414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 ff7b 	bl	8009308 <vPortFree>
	}
 8008412:	e011      	b.n	8008438 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800841a:	2b02      	cmp	r3, #2
 800841c:	d00c      	beq.n	8008438 <prvDeleteTCB+0x64>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	b672      	cpsid	i
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	b662      	cpsie	i
 8008432:	60fb      	str	r3, [r7, #12]
}
 8008434:	bf00      	nop
 8008436:	e7fe      	b.n	8008436 <prvDeleteTCB+0x62>
	}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <prvResetNextTaskUnblockTime+0x38>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <prvResetNextTaskUnblockTime+0x3c>)
 8008452:	f04f 32ff 	mov.w	r2, #4294967295
 8008456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008458:	e008      	b.n	800846c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845a:	4b07      	ldr	r3, [pc, #28]	; (8008478 <prvResetNextTaskUnblockTime+0x38>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a04      	ldr	r2, [pc, #16]	; (800847c <prvResetNextTaskUnblockTime+0x3c>)
 800846a:	6013      	str	r3, [r2, #0]
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	20001534 	.word	0x20001534
 800847c:	2000159c 	.word	0x2000159c

08008480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008486:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <xTaskGetSchedulerState+0x34>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800848e:	2301      	movs	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	e008      	b.n	80084a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008494:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <xTaskGetSchedulerState+0x38>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800849c:	2302      	movs	r3, #2
 800849e:	607b      	str	r3, [r7, #4]
 80084a0:	e001      	b.n	80084a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084a2:	2300      	movs	r3, #0
 80084a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084a6:	687b      	ldr	r3, [r7, #4]
	}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	20001588 	.word	0x20001588
 80084b8:	200015a4 	.word	0x200015a4

080084bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d05a      	beq.n	8008588 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084d2:	4b30      	ldr	r3, [pc, #192]	; (8008594 <xTaskPriorityDisinherit+0xd8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d00c      	beq.n	80084f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	b672      	cpsid	i
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	b662      	cpsie	i
 80084f0:	60fb      	str	r3, [r7, #12]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10c      	bne.n	8008518 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	b672      	cpsid	i
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	b662      	cpsie	i
 8008512:	60bb      	str	r3, [r7, #8]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851c:	1e5a      	subs	r2, r3, #1
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852a:	429a      	cmp	r2, r3
 800852c:	d02c      	beq.n	8008588 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008532:	2b00      	cmp	r3, #0
 8008534:	d128      	bne.n	8008588 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	3304      	adds	r3, #4
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe faf8 	bl	8006b30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4b0f      	ldr	r3, [pc, #60]	; (8008598 <xTaskPriorityDisinherit+0xdc>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d903      	bls.n	8008568 <xTaskPriorityDisinherit+0xac>
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <xTaskPriorityDisinherit+0xdc>)
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a09      	ldr	r2, [pc, #36]	; (800859c <xTaskPriorityDisinherit+0xe0>)
 8008576:	441a      	add	r2, r3
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe fa79 	bl	8006a76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008588:	697b      	ldr	r3, [r7, #20]
	}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	200010a8 	.word	0x200010a8
 8008598:	20001584 	.word	0x20001584
 800859c:	200010ac 	.word	0x200010ac

080085a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085aa:	4b21      	ldr	r3, [pc, #132]	; (8008630 <prvAddCurrentTaskToDelayedList+0x90>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085b0:	4b20      	ldr	r3, [pc, #128]	; (8008634 <prvAddCurrentTaskToDelayedList+0x94>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3304      	adds	r3, #4
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe faba 	bl	8006b30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d10a      	bne.n	80085da <prvAddCurrentTaskToDelayedList+0x3a>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ca:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <prvAddCurrentTaskToDelayedList+0x94>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4819      	ldr	r0, [pc, #100]	; (8008638 <prvAddCurrentTaskToDelayedList+0x98>)
 80085d4:	f7fe fa4f 	bl	8006a76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085d8:	e026      	b.n	8008628 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4413      	add	r3, r2
 80085e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085e2:	4b14      	ldr	r3, [pc, #80]	; (8008634 <prvAddCurrentTaskToDelayedList+0x94>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d209      	bcs.n	8008606 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085f2:	4b12      	ldr	r3, [pc, #72]	; (800863c <prvAddCurrentTaskToDelayedList+0x9c>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	4b0f      	ldr	r3, [pc, #60]	; (8008634 <prvAddCurrentTaskToDelayedList+0x94>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3304      	adds	r3, #4
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f7fe fa5d 	bl	8006abe <vListInsert>
}
 8008604:	e010      	b.n	8008628 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008606:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <prvAddCurrentTaskToDelayedList+0x94>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f7fe fa53 	bl	8006abe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <prvAddCurrentTaskToDelayedList+0xa4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	429a      	cmp	r2, r3
 8008620:	d202      	bcs.n	8008628 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008622:	4a08      	ldr	r2, [pc, #32]	; (8008644 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	6013      	str	r3, [r2, #0]
}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20001580 	.word	0x20001580
 8008634:	200010a8 	.word	0x200010a8
 8008638:	20001568 	.word	0x20001568
 800863c:	20001538 	.word	0x20001538
 8008640:	20001534 	.word	0x20001534
 8008644:	2000159c 	.word	0x2000159c

08008648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	; 0x28
 800864c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008652:	f000 fb15 	bl	8008c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008656:	4b1d      	ldr	r3, [pc, #116]	; (80086cc <xTimerCreateTimerTask+0x84>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d021      	beq.n	80086a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008666:	1d3a      	adds	r2, r7, #4
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	f107 030c 	add.w	r3, r7, #12
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe f9b9 	bl	80069e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	9202      	str	r2, [sp, #8]
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	2302      	movs	r3, #2
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	2300      	movs	r3, #0
 8008686:	460a      	mov	r2, r1
 8008688:	4911      	ldr	r1, [pc, #68]	; (80086d0 <xTimerCreateTimerTask+0x88>)
 800868a:	4812      	ldr	r0, [pc, #72]	; (80086d4 <xTimerCreateTimerTask+0x8c>)
 800868c:	f7fe ff84 	bl	8007598 <xTaskCreateStatic>
 8008690:	4603      	mov	r3, r0
 8008692:	4a11      	ldr	r2, [pc, #68]	; (80086d8 <xTimerCreateTimerTask+0x90>)
 8008694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008696:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <xTimerCreateTimerTask+0x90>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800869e:	2301      	movs	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10c      	bne.n	80086c2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	b672      	cpsid	i
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	b662      	cpsie	i
 80086bc:	613b      	str	r3, [r7, #16]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80086c2:	697b      	ldr	r3, [r7, #20]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	200015d8 	.word	0x200015d8
 80086d0:	0800c3dc 	.word	0x0800c3dc
 80086d4:	08008819 	.word	0x08008819
 80086d8:	200015dc 	.word	0x200015dc

080086dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	; 0x28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <xTimerGenericCommand+0x32>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	b672      	cpsid	i
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	b662      	cpsie	i
 8008708:	623b      	str	r3, [r7, #32]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800870e:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <xTimerGenericCommand+0x9c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d02a      	beq.n	800876c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2b05      	cmp	r3, #5
 8008726:	dc18      	bgt.n	800875a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008728:	f7ff feaa 	bl	8008480 <xTaskGetSchedulerState>
 800872c:	4603      	mov	r3, r0
 800872e:	2b02      	cmp	r3, #2
 8008730:	d109      	bne.n	8008746 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008732:	4b11      	ldr	r3, [pc, #68]	; (8008778 <xTimerGenericCommand+0x9c>)
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f107 0110 	add.w	r1, r7, #16
 800873a:	2300      	movs	r3, #0
 800873c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873e:	f7fe fb31 	bl	8006da4 <xQueueGenericSend>
 8008742:	6278      	str	r0, [r7, #36]	; 0x24
 8008744:	e012      	b.n	800876c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <xTimerGenericCommand+0x9c>)
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	f107 0110 	add.w	r1, r7, #16
 800874e:	2300      	movs	r3, #0
 8008750:	2200      	movs	r2, #0
 8008752:	f7fe fb27 	bl	8006da4 <xQueueGenericSend>
 8008756:	6278      	str	r0, [r7, #36]	; 0x24
 8008758:	e008      	b.n	800876c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <xTimerGenericCommand+0x9c>)
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	f107 0110 	add.w	r1, r7, #16
 8008762:	2300      	movs	r3, #0
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	f7fe fc23 	bl	8006fb0 <xQueueGenericSendFromISR>
 800876a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800876e:	4618      	mov	r0, r3
 8008770:	3728      	adds	r7, #40	; 0x28
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	200015d8 	.word	0x200015d8

0800877c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008786:	4b23      	ldr	r3, [pc, #140]	; (8008814 <prvProcessExpiredTimer+0x98>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe f9cb 	bl	8006b30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d024      	beq.n	80087f2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	18d1      	adds	r1, r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	6978      	ldr	r0, [r7, #20]
 80087b6:	f000 f8d3 	bl	8008960 <prvInsertTimerInActiveList>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d021      	beq.n	8008804 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087c0:	2300      	movs	r3, #0
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	2100      	movs	r1, #0
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f7ff ff86 	bl	80086dc <xTimerGenericCommand>
 80087d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d115      	bne.n	8008804 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	b672      	cpsid	i
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	b662      	cpsie	i
 80087ec:	60fb      	str	r3, [r7, #12]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f8:	f023 0301 	bic.w	r3, r3, #1
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	6978      	ldr	r0, [r7, #20]
 800880a:	4798      	blx	r3
}
 800880c:	bf00      	nop
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	200015d0 	.word	0x200015d0

08008818 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008820:	f107 0308 	add.w	r3, r7, #8
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f857 	bl	80088d8 <prvGetNextExpireTime>
 800882a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4619      	mov	r1, r3
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f803 	bl	800883c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008836:	f000 f8d5 	bl	80089e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800883a:	e7f1      	b.n	8008820 <prvTimerTask+0x8>

0800883c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008846:	f7ff fa1d 	bl	8007c84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800884a:	f107 0308 	add.w	r3, r7, #8
 800884e:	4618      	mov	r0, r3
 8008850:	f000 f866 	bl	8008920 <prvSampleTimeNow>
 8008854:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d130      	bne.n	80088be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <prvProcessTimerOrBlockTask+0x3c>
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	429a      	cmp	r2, r3
 8008868:	d806      	bhi.n	8008878 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800886a:	f7ff fa19 	bl	8007ca0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff ff83 	bl	800877c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008876:	e024      	b.n	80088c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800887e:	4b13      	ldr	r3, [pc, #76]	; (80088cc <prvProcessTimerOrBlockTask+0x90>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <prvProcessTimerOrBlockTask+0x50>
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <prvProcessTimerOrBlockTask+0x52>
 800888c:	2300      	movs	r3, #0
 800888e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <prvProcessTimerOrBlockTask+0x94>)
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	4619      	mov	r1, r3
 800889e:	f7fe fe47 	bl	8007530 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088a2:	f7ff f9fd 	bl	8007ca0 <xTaskResumeAll>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <prvProcessTimerOrBlockTask+0x98>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
}
 80088bc:	e001      	b.n	80088c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088be:	f7ff f9ef 	bl	8007ca0 <xTaskResumeAll>
}
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200015d4 	.word	0x200015d4
 80088d0:	200015d8 	.word	0x200015d8
 80088d4:	e000ed04 	.word	0xe000ed04

080088d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088e0:	4b0e      	ldr	r3, [pc, #56]	; (800891c <prvGetNextExpireTime+0x44>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <prvGetNextExpireTime+0x16>
 80088ea:	2201      	movs	r2, #1
 80088ec:	e000      	b.n	80088f0 <prvGetNextExpireTime+0x18>
 80088ee:	2200      	movs	r2, #0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088fc:	4b07      	ldr	r3, [pc, #28]	; (800891c <prvGetNextExpireTime+0x44>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e001      	b.n	800890c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800890c:	68fb      	ldr	r3, [r7, #12]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	200015d0 	.word	0x200015d0

08008920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008928:	f7ff fa5a 	bl	8007de0 <xTaskGetTickCount>
 800892c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800892e:	4b0b      	ldr	r3, [pc, #44]	; (800895c <prvSampleTimeNow+0x3c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	429a      	cmp	r2, r3
 8008936:	d205      	bcs.n	8008944 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008938:	f000 f93c 	bl	8008bb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	e002      	b.n	800894a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800894a:	4a04      	ldr	r2, [pc, #16]	; (800895c <prvSampleTimeNow+0x3c>)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008950:	68fb      	ldr	r3, [r7, #12]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200015e0 	.word	0x200015e0

08008960 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800896e:	2300      	movs	r3, #0
 8008970:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d812      	bhi.n	80089ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	d302      	bcc.n	800899a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008994:	2301      	movs	r3, #1
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	e01b      	b.n	80089d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800899a:	4b10      	ldr	r3, [pc, #64]	; (80089dc <prvInsertTimerInActiveList+0x7c>)
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7fe f88a 	bl	8006abe <vListInsert>
 80089aa:	e012      	b.n	80089d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d206      	bcs.n	80089c2 <prvInsertTimerInActiveList+0x62>
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d302      	bcc.n	80089c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	e007      	b.n	80089d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089c2:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <prvInsertTimerInActiveList+0x80>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4619      	mov	r1, r3
 80089cc:	4610      	mov	r0, r2
 80089ce:	f7fe f876 	bl	8006abe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089d2:	697b      	ldr	r3, [r7, #20]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	200015d4 	.word	0x200015d4
 80089e0:	200015d0 	.word	0x200015d0

080089e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08e      	sub	sp, #56	; 0x38
 80089e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089ea:	e0d0      	b.n	8008b8e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	da1a      	bge.n	8008a28 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089f2:	1d3b      	adds	r3, r7, #4
 80089f4:	3304      	adds	r3, #4
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10c      	bne.n	8008a18 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	b672      	cpsid	i
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	b662      	cpsie	i
 8008a12:	61fb      	str	r3, [r7, #28]
}
 8008a14:	bf00      	nop
 8008a16:	e7fe      	b.n	8008a16 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a1e:	6850      	ldr	r0, [r2, #4]
 8008a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a22:	6892      	ldr	r2, [r2, #8]
 8008a24:	4611      	mov	r1, r2
 8008a26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f2c0 80af 	blt.w	8008b8e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	3304      	adds	r3, #4
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe f875 	bl	8006b30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a46:	463b      	mov	r3, r7
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff ff69 	bl	8008920 <prvSampleTimeNow>
 8008a4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b09      	cmp	r3, #9
 8008a54:	f200 809a 	bhi.w	8008b8c <prvProcessReceivedCommands+0x1a8>
 8008a58:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <prvProcessReceivedCommands+0x7c>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008a89 	.word	0x08008a89
 8008a64:	08008a89 	.word	0x08008a89
 8008a68:	08008a89 	.word	0x08008a89
 8008a6c:	08008b01 	.word	0x08008b01
 8008a70:	08008b15 	.word	0x08008b15
 8008a74:	08008b63 	.word	0x08008b63
 8008a78:	08008a89 	.word	0x08008a89
 8008a7c:	08008a89 	.word	0x08008a89
 8008a80:	08008b01 	.word	0x08008b01
 8008a84:	08008b15 	.word	0x08008b15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	18d1      	adds	r1, r2, r3
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aa8:	f7ff ff5a 	bl	8008960 <prvInsertTimerInActiveList>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d06d      	beq.n	8008b8e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d062      	beq.n	8008b8e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	441a      	add	r2, r3
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ada:	f7ff fdff 	bl	80086dc <xTimerGenericCommand>
 8008ade:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d153      	bne.n	8008b8e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	b672      	cpsid	i
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	b662      	cpsie	i
 8008afa:	61bb      	str	r3, [r7, #24]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b06:	f023 0301 	bic.w	r3, r3, #1
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008b12:	e03c      	b.n	8008b8e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b1a:	f043 0301 	orr.w	r3, r3, #1
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10c      	bne.n	8008b4e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	b672      	cpsid	i
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	b662      	cpsie	i
 8008b48:	617b      	str	r3, [r7, #20]
}
 8008b4a:	bf00      	nop
 8008b4c:	e7fe      	b.n	8008b4c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	18d1      	adds	r1, r2, r3
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b5c:	f7ff ff00 	bl	8008960 <prvInsertTimerInActiveList>
					break;
 8008b60:	e015      	b.n	8008b8e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d103      	bne.n	8008b78 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b72:	f000 fbc9 	bl	8009308 <vPortFree>
 8008b76:	e00a      	b.n	8008b8e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b7e:	f023 0301 	bic.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b8a:	e000      	b.n	8008b8e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008b8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b8e:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <prvProcessReceivedCommands+0x1cc>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	1d39      	adds	r1, r7, #4
 8008b94:	2200      	movs	r2, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe faaa 	bl	80070f0 <xQueueReceive>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f47f af24 	bne.w	80089ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	3730      	adds	r7, #48	; 0x30
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	200015d8 	.word	0x200015d8

08008bb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bba:	e04a      	b.n	8008c52 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bbc:	4b2e      	ldr	r3, [pc, #184]	; (8008c78 <prvSwitchTimerLists+0xc4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc6:	4b2c      	ldr	r3, [pc, #176]	; (8008c78 <prvSwitchTimerLists+0xc4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fd ffab 	bl	8006b30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d030      	beq.n	8008c52 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d90e      	bls.n	8008c20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c0e:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <prvSwitchTimerLists+0xc4>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4619      	mov	r1, r3
 8008c18:	4610      	mov	r0, r2
 8008c1a:	f7fd ff50 	bl	8006abe <vListInsert>
 8008c1e:	e018      	b.n	8008c52 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c20:	2300      	movs	r3, #0
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	2100      	movs	r1, #0
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7ff fd56 	bl	80086dc <xTimerGenericCommand>
 8008c30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10c      	bne.n	8008c52 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	b672      	cpsid	i
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	b662      	cpsie	i
 8008c4c:	603b      	str	r3, [r7, #0]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c52:	4b09      	ldr	r3, [pc, #36]	; (8008c78 <prvSwitchTimerLists+0xc4>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1af      	bne.n	8008bbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c5c:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <prvSwitchTimerLists+0xc4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <prvSwitchTimerLists+0xc8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <prvSwitchTimerLists+0xc4>)
 8008c68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c6a:	4a04      	ldr	r2, [pc, #16]	; (8008c7c <prvSwitchTimerLists+0xc8>)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	6013      	str	r3, [r2, #0]
}
 8008c70:	bf00      	nop
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	200015d0 	.word	0x200015d0
 8008c7c:	200015d4 	.word	0x200015d4

08008c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c86:	f000 f949 	bl	8008f1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c8a:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d120      	bne.n	8008cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c92:	4814      	ldr	r0, [pc, #80]	; (8008ce4 <prvCheckForValidListAndQueue+0x64>)
 8008c94:	f7fd fec2 	bl	8006a1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c98:	4813      	ldr	r0, [pc, #76]	; (8008ce8 <prvCheckForValidListAndQueue+0x68>)
 8008c9a:	f7fd febf 	bl	8006a1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c9e:	4b13      	ldr	r3, [pc, #76]	; (8008cec <prvCheckForValidListAndQueue+0x6c>)
 8008ca0:	4a10      	ldr	r2, [pc, #64]	; (8008ce4 <prvCheckForValidListAndQueue+0x64>)
 8008ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ca4:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <prvCheckForValidListAndQueue+0x70>)
 8008ca6:	4a10      	ldr	r2, [pc, #64]	; (8008ce8 <prvCheckForValidListAndQueue+0x68>)
 8008ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008caa:	2300      	movs	r3, #0
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	4b11      	ldr	r3, [pc, #68]	; (8008cf4 <prvCheckForValidListAndQueue+0x74>)
 8008cb0:	4a11      	ldr	r2, [pc, #68]	; (8008cf8 <prvCheckForValidListAndQueue+0x78>)
 8008cb2:	2110      	movs	r1, #16
 8008cb4:	200a      	movs	r0, #10
 8008cb6:	f7fd ffcf 	bl	8006c58 <xQueueGenericCreateStatic>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008cbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	490b      	ldr	r1, [pc, #44]	; (8008cfc <prvCheckForValidListAndQueue+0x7c>)
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fc04 	bl	80074dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cd4:	f000 f956 	bl	8008f84 <vPortExitCritical>
}
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	200015d8 	.word	0x200015d8
 8008ce4:	200015a8 	.word	0x200015a8
 8008ce8:	200015bc 	.word	0x200015bc
 8008cec:	200015d0 	.word	0x200015d0
 8008cf0:	200015d4 	.word	0x200015d4
 8008cf4:	20001684 	.word	0x20001684
 8008cf8:	200015e4 	.word	0x200015e4
 8008cfc:	0800c3e4 	.word	0x0800c3e4

08008d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3b04      	subs	r3, #4
 8008d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3b04      	subs	r3, #4
 8008d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f023 0201 	bic.w	r2, r3, #1
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d30:	4a0c      	ldr	r2, [pc, #48]	; (8008d64 <pxPortInitialiseStack+0x64>)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3b14      	subs	r3, #20
 8008d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3b04      	subs	r3, #4
 8008d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f06f 0202 	mvn.w	r2, #2
 8008d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3b20      	subs	r3, #32
 8008d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d56:	68fb      	ldr	r3, [r7, #12]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	08008d69 	.word	0x08008d69

08008d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d72:	4b14      	ldr	r3, [pc, #80]	; (8008dc4 <prvTaskExitError+0x5c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d00c      	beq.n	8008d96 <prvTaskExitError+0x2e>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	60fb      	str	r3, [r7, #12]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <prvTaskExitError+0x2c>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	b672      	cpsid	i
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	b662      	cpsie	i
 8008daa:	60bb      	str	r3, [r7, #8]
}
 8008dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dae:	bf00      	nop
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0fc      	beq.n	8008db0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008db6:	bf00      	nop
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	20000038 	.word	0x20000038
	...

08008dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <pxCurrentTCBConst2>)
 8008dd2:	6819      	ldr	r1, [r3, #0]
 8008dd4:	6808      	ldr	r0, [r1, #0]
 8008dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	f380 8809 	msr	PSP, r0
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	4770      	bx	lr
 8008dec:	f3af 8000 	nop.w

08008df0 <pxCurrentTCBConst2>:
 8008df0:	200010a8 	.word	0x200010a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop

08008df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008df8:	4808      	ldr	r0, [pc, #32]	; (8008e1c <prvPortStartFirstTask+0x24>)
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f380 8808 	msr	MSP, r0
 8008e02:	f04f 0000 	mov.w	r0, #0
 8008e06:	f380 8814 	msr	CONTROL, r0
 8008e0a:	b662      	cpsie	i
 8008e0c:	b661      	cpsie	f
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	df00      	svc	0
 8008e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e1a:	bf00      	nop
 8008e1c:	e000ed08 	.word	0xe000ed08

08008e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e26:	4b37      	ldr	r3, [pc, #220]	; (8008f04 <xPortStartScheduler+0xe4>)
 8008e28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	22ff      	movs	r2, #255	; 0xff
 8008e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4b2f      	ldr	r3, [pc, #188]	; (8008f08 <xPortStartScheduler+0xe8>)
 8008e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e4e:	4b2f      	ldr	r3, [pc, #188]	; (8008f0c <xPortStartScheduler+0xec>)
 8008e50:	2207      	movs	r2, #7
 8008e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e54:	e009      	b.n	8008e6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e56:	4b2d      	ldr	r3, [pc, #180]	; (8008f0c <xPortStartScheduler+0xec>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	4a2b      	ldr	r2, [pc, #172]	; (8008f0c <xPortStartScheduler+0xec>)
 8008e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e72:	2b80      	cmp	r3, #128	; 0x80
 8008e74:	d0ef      	beq.n	8008e56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e76:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <xPortStartScheduler+0xec>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1c3 0307 	rsb	r3, r3, #7
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d00c      	beq.n	8008e9c <xPortStartScheduler+0x7c>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	b672      	cpsid	i
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	b662      	cpsie	i
 8008e96:	60bb      	str	r3, [r7, #8]
}
 8008e98:	bf00      	nop
 8008e9a:	e7fe      	b.n	8008e9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e9c:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <xPortStartScheduler+0xec>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	4a1a      	ldr	r2, [pc, #104]	; (8008f0c <xPortStartScheduler+0xec>)
 8008ea4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ea6:	4b19      	ldr	r3, [pc, #100]	; (8008f0c <xPortStartScheduler+0xec>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eae:	4a17      	ldr	r2, [pc, #92]	; (8008f0c <xPortStartScheduler+0xec>)
 8008eb0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008eba:	4b15      	ldr	r3, [pc, #84]	; (8008f10 <xPortStartScheduler+0xf0>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <xPortStartScheduler+0xf0>)
 8008ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ec4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ec6:	4b12      	ldr	r3, [pc, #72]	; (8008f10 <xPortStartScheduler+0xf0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a11      	ldr	r2, [pc, #68]	; (8008f10 <xPortStartScheduler+0xf0>)
 8008ecc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ed0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ed2:	f000 f8dd 	bl	8009090 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <xPortStartScheduler+0xf4>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008edc:	f000 f8fc 	bl	80090d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ee0:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <xPortStartScheduler+0xf8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a0c      	ldr	r2, [pc, #48]	; (8008f18 <xPortStartScheduler+0xf8>)
 8008ee6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008eea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eec:	f7ff ff84 	bl	8008df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ef0:	f7ff f842 	bl	8007f78 <vTaskSwitchContext>
	prvTaskExitError();
 8008ef4:	f7ff ff38 	bl	8008d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	e000e400 	.word	0xe000e400
 8008f08:	200016d4 	.word	0x200016d4
 8008f0c:	200016d8 	.word	0x200016d8
 8008f10:	e000ed20 	.word	0xe000ed20
 8008f14:	20000038 	.word	0x20000038
 8008f18:	e000ef34 	.word	0xe000ef34

08008f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	b672      	cpsid	i
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	b662      	cpsie	i
 8008f36:	607b      	str	r3, [r7, #4]
}
 8008f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f3a:	4b10      	ldr	r3, [pc, #64]	; (8008f7c <vPortEnterCritical+0x60>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	4a0e      	ldr	r2, [pc, #56]	; (8008f7c <vPortEnterCritical+0x60>)
 8008f42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f44:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <vPortEnterCritical+0x60>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d111      	bne.n	8008f70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <vPortEnterCritical+0x64>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00c      	beq.n	8008f70 <vPortEnterCritical+0x54>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	603b      	str	r3, [r7, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vPortEnterCritical+0x52>
	}
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20000038 	.word	0x20000038
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <vPortExitCritical+0x54>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10c      	bne.n	8008fac <vPortExitCritical+0x28>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	b672      	cpsid	i
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	b662      	cpsie	i
 8008fa6:	607b      	str	r3, [r7, #4]
}
 8008fa8:	bf00      	nop
 8008faa:	e7fe      	b.n	8008faa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008fac:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <vPortExitCritical+0x54>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	4a09      	ldr	r2, [pc, #36]	; (8008fd8 <vPortExitCritical+0x54>)
 8008fb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fb6:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <vPortExitCritical+0x54>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d105      	bne.n	8008fca <vPortExitCritical+0x46>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f383 8811 	msr	BASEPRI, r3
}
 8008fc8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20000038 	.word	0x20000038
 8008fdc:	00000000 	.word	0x00000000

08008fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fe0:	f3ef 8009 	mrs	r0, PSP
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	4b15      	ldr	r3, [pc, #84]	; (8009040 <pxCurrentTCBConst>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	f01e 0f10 	tst.w	lr, #16
 8008ff0:	bf08      	it	eq
 8008ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffa:	6010      	str	r0, [r2, #0]
 8008ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009004:	b672      	cpsid	i
 8009006:	f380 8811 	msr	BASEPRI, r0
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	b662      	cpsie	i
 8009014:	f7fe ffb0 	bl	8007f78 <vTaskSwitchContext>
 8009018:	f04f 0000 	mov.w	r0, #0
 800901c:	f380 8811 	msr	BASEPRI, r0
 8009020:	bc09      	pop	{r0, r3}
 8009022:	6819      	ldr	r1, [r3, #0]
 8009024:	6808      	ldr	r0, [r1, #0]
 8009026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902a:	f01e 0f10 	tst.w	lr, #16
 800902e:	bf08      	it	eq
 8009030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009034:	f380 8809 	msr	PSP, r0
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop

08009040 <pxCurrentTCBConst>:
 8009040:	200010a8 	.word	0x200010a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	b672      	cpsid	i
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	b662      	cpsie	i
 8009062:	607b      	str	r3, [r7, #4]
}
 8009064:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009066:	f7fe fecb 	bl	8007e00 <xTaskIncrementTick>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009070:	4b06      	ldr	r3, [pc, #24]	; (800908c <SysTick_Handler+0x44>)
 8009072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	f383 8811 	msr	BASEPRI, r3
}
 8009082:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	e000ed04 	.word	0xe000ed04

08009090 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009094:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <vPortSetupTimerInterrupt+0x34>)
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800909a:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <vPortSetupTimerInterrupt+0x38>)
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090a0:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <vPortSetupTimerInterrupt+0x3c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a0a      	ldr	r2, [pc, #40]	; (80090d0 <vPortSetupTimerInterrupt+0x40>)
 80090a6:	fba2 2303 	umull	r2, r3, r2, r3
 80090aa:	099b      	lsrs	r3, r3, #6
 80090ac:	4a09      	ldr	r2, [pc, #36]	; (80090d4 <vPortSetupTimerInterrupt+0x44>)
 80090ae:	3b01      	subs	r3, #1
 80090b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090b2:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <vPortSetupTimerInterrupt+0x34>)
 80090b4:	2207      	movs	r2, #7
 80090b6:	601a      	str	r2, [r3, #0]
}
 80090b8:	bf00      	nop
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	e000e010 	.word	0xe000e010
 80090c8:	e000e018 	.word	0xe000e018
 80090cc:	2000002c 	.word	0x2000002c
 80090d0:	10624dd3 	.word	0x10624dd3
 80090d4:	e000e014 	.word	0xe000e014

080090d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090e8 <vPortEnableVFP+0x10>
 80090dc:	6801      	ldr	r1, [r0, #0]
 80090de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090e2:	6001      	str	r1, [r0, #0]
 80090e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090e6:	bf00      	nop
 80090e8:	e000ed88 	.word	0xe000ed88

080090ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090f2:	f3ef 8305 	mrs	r3, IPSR
 80090f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	d916      	bls.n	800912c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090fe:	4a19      	ldr	r2, [pc, #100]	; (8009164 <vPortValidateInterruptPriority+0x78>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009108:	4b17      	ldr	r3, [pc, #92]	; (8009168 <vPortValidateInterruptPriority+0x7c>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	7afa      	ldrb	r2, [r7, #11]
 800910e:	429a      	cmp	r2, r3
 8009110:	d20c      	bcs.n	800912c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	b672      	cpsid	i
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	b662      	cpsie	i
 8009126:	607b      	str	r3, [r7, #4]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800912c:	4b0f      	ldr	r3, [pc, #60]	; (800916c <vPortValidateInterruptPriority+0x80>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009134:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <vPortValidateInterruptPriority+0x84>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d90c      	bls.n	8009156 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	b672      	cpsid	i
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	b662      	cpsie	i
 8009150:	603b      	str	r3, [r7, #0]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <vPortValidateInterruptPriority+0x68>
	}
 8009156:	bf00      	nop
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	e000e3f0 	.word	0xe000e3f0
 8009168:	200016d4 	.word	0x200016d4
 800916c:	e000ed0c 	.word	0xe000ed0c
 8009170:	200016d8 	.word	0x200016d8

08009174 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08a      	sub	sp, #40	; 0x28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800917c:	2300      	movs	r3, #0
 800917e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009180:	f7fe fd80 	bl	8007c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009184:	4b5b      	ldr	r3, [pc, #364]	; (80092f4 <pvPortMalloc+0x180>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800918c:	f000 f91a 	bl	80093c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009190:	4b59      	ldr	r3, [pc, #356]	; (80092f8 <pvPortMalloc+0x184>)
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4013      	ands	r3, r2
 8009198:	2b00      	cmp	r3, #0
 800919a:	f040 8092 	bne.w	80092c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01f      	beq.n	80091e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80091a4:	2208      	movs	r2, #8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4413      	add	r3, r2
 80091aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d016      	beq.n	80091e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f023 0307 	bic.w	r3, r3, #7
 80091bc:	3308      	adds	r3, #8
 80091be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00c      	beq.n	80091e4 <pvPortMalloc+0x70>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	b672      	cpsid	i
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	b662      	cpsie	i
 80091de:	617b      	str	r3, [r7, #20]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d06b      	beq.n	80092c2 <pvPortMalloc+0x14e>
 80091ea:	4b44      	ldr	r3, [pc, #272]	; (80092fc <pvPortMalloc+0x188>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d866      	bhi.n	80092c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091f4:	4b42      	ldr	r3, [pc, #264]	; (8009300 <pvPortMalloc+0x18c>)
 80091f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091f8:	4b41      	ldr	r3, [pc, #260]	; (8009300 <pvPortMalloc+0x18c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091fe:	e004      	b.n	800920a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	429a      	cmp	r2, r3
 8009212:	d903      	bls.n	800921c <pvPortMalloc+0xa8>
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1f1      	bne.n	8009200 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800921c:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <pvPortMalloc+0x180>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009222:	429a      	cmp	r2, r3
 8009224:	d04d      	beq.n	80092c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2208      	movs	r2, #8
 800922c:	4413      	add	r3, r2
 800922e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	1ad2      	subs	r2, r2, r3
 8009240:	2308      	movs	r3, #8
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	429a      	cmp	r2, r3
 8009246:	d921      	bls.n	800928c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00c      	beq.n	8009274 <pvPortMalloc+0x100>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	b672      	cpsid	i
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	b662      	cpsie	i
 800926e:	613b      	str	r3, [r7, #16]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	1ad2      	subs	r2, r2, r3
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009286:	69b8      	ldr	r0, [r7, #24]
 8009288:	f000 f8fe 	bl	8009488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800928c:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <pvPortMalloc+0x188>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	4a19      	ldr	r2, [pc, #100]	; (80092fc <pvPortMalloc+0x188>)
 8009298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800929a:	4b18      	ldr	r3, [pc, #96]	; (80092fc <pvPortMalloc+0x188>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b19      	ldr	r3, [pc, #100]	; (8009304 <pvPortMalloc+0x190>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d203      	bcs.n	80092ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <pvPortMalloc+0x188>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a16      	ldr	r2, [pc, #88]	; (8009304 <pvPortMalloc+0x190>)
 80092ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <pvPortMalloc+0x184>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	431a      	orrs	r2, r3
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092c2:	f7fe fced 	bl	8007ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00c      	beq.n	80092ea <pvPortMalloc+0x176>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	b672      	cpsid	i
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	b662      	cpsie	i
 80092e4:	60fb      	str	r3, [r7, #12]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <pvPortMalloc+0x174>
	return pvReturn;
 80092ea:	69fb      	ldr	r3, [r7, #28]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3728      	adds	r7, #40	; 0x28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	200052e4 	.word	0x200052e4
 80092f8:	200052f0 	.word	0x200052f0
 80092fc:	200052e8 	.word	0x200052e8
 8009300:	200052dc 	.word	0x200052dc
 8009304:	200052ec 	.word	0x200052ec

08009308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d04c      	beq.n	80093b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800931a:	2308      	movs	r3, #8
 800931c:	425b      	negs	r3, r3
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	4b23      	ldr	r3, [pc, #140]	; (80093bc <vPortFree+0xb4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4013      	ands	r3, r2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10c      	bne.n	8009350 <vPortFree+0x48>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	b672      	cpsid	i
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	b662      	cpsie	i
 800934a:	60fb      	str	r3, [r7, #12]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00c      	beq.n	8009372 <vPortFree+0x6a>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	b672      	cpsid	i
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	b662      	cpsie	i
 800936c:	60bb      	str	r3, [r7, #8]
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	4b11      	ldr	r3, [pc, #68]	; (80093bc <vPortFree+0xb4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4013      	ands	r3, r2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d019      	beq.n	80093b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d115      	bne.n	80093b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <vPortFree+0xb4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	43db      	mvns	r3, r3
 8009392:	401a      	ands	r2, r3
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009398:	f7fe fc74 	bl	8007c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <vPortFree+0xb8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4413      	add	r3, r2
 80093a6:	4a06      	ldr	r2, [pc, #24]	; (80093c0 <vPortFree+0xb8>)
 80093a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093aa:	6938      	ldr	r0, [r7, #16]
 80093ac:	f000 f86c 	bl	8009488 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093b0:	f7fe fc76 	bl	8007ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093b4:	bf00      	nop
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	200052f0 	.word	0x200052f0
 80093c0:	200052e8 	.word	0x200052e8

080093c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093d0:	4b27      	ldr	r3, [pc, #156]	; (8009470 <prvHeapInit+0xac>)
 80093d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00c      	beq.n	80093f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3307      	adds	r3, #7
 80093e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0307 	bic.w	r3, r3, #7
 80093ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	4a1f      	ldr	r2, [pc, #124]	; (8009470 <prvHeapInit+0xac>)
 80093f4:	4413      	add	r3, r2
 80093f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093fc:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <prvHeapInit+0xb0>)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009402:	4b1c      	ldr	r3, [pc, #112]	; (8009474 <prvHeapInit+0xb0>)
 8009404:	2200      	movs	r2, #0
 8009406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009410:	2208      	movs	r2, #8
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0307 	bic.w	r3, r3, #7
 800941e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a15      	ldr	r2, [pc, #84]	; (8009478 <prvHeapInit+0xb4>)
 8009424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <prvHeapInit+0xb4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2200      	movs	r2, #0
 800942c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800942e:	4b12      	ldr	r3, [pc, #72]	; (8009478 <prvHeapInit+0xb4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009444:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <prvHeapInit+0xb4>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	4a0a      	ldr	r2, [pc, #40]	; (800947c <prvHeapInit+0xb8>)
 8009452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	4a09      	ldr	r2, [pc, #36]	; (8009480 <prvHeapInit+0xbc>)
 800945a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800945c:	4b09      	ldr	r3, [pc, #36]	; (8009484 <prvHeapInit+0xc0>)
 800945e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009462:	601a      	str	r2, [r3, #0]
}
 8009464:	bf00      	nop
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	200016dc 	.word	0x200016dc
 8009474:	200052dc 	.word	0x200052dc
 8009478:	200052e4 	.word	0x200052e4
 800947c:	200052ec 	.word	0x200052ec
 8009480:	200052e8 	.word	0x200052e8
 8009484:	200052f0 	.word	0x200052f0

08009488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009490:	4b28      	ldr	r3, [pc, #160]	; (8009534 <prvInsertBlockIntoFreeList+0xac>)
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	e002      	b.n	800949c <prvInsertBlockIntoFreeList+0x14>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d8f7      	bhi.n	8009496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4413      	add	r3, r2
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d108      	bne.n	80094ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	441a      	add	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	441a      	add	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d118      	bne.n	8009510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b15      	ldr	r3, [pc, #84]	; (8009538 <prvInsertBlockIntoFreeList+0xb0>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d00d      	beq.n	8009506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	441a      	add	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	e008      	b.n	8009518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009506:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <prvInsertBlockIntoFreeList+0xb0>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	e003      	b.n	8009518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d002      	beq.n	8009526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	200052dc 	.word	0x200052dc
 8009538:	200052e4 	.word	0x200052e4

0800953c <__cvt>:
 800953c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953e:	ed2d 8b02 	vpush	{d8}
 8009542:	eeb0 8b40 	vmov.f64	d8, d0
 8009546:	b085      	sub	sp, #20
 8009548:	4617      	mov	r7, r2
 800954a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800954c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800954e:	ee18 2a90 	vmov	r2, s17
 8009552:	f025 0520 	bic.w	r5, r5, #32
 8009556:	2a00      	cmp	r2, #0
 8009558:	bfb6      	itet	lt
 800955a:	222d      	movlt	r2, #45	; 0x2d
 800955c:	2200      	movge	r2, #0
 800955e:	eeb1 8b40 	vneglt.f64	d8, d0
 8009562:	2d46      	cmp	r5, #70	; 0x46
 8009564:	460c      	mov	r4, r1
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	d004      	beq.n	8009574 <__cvt+0x38>
 800956a:	2d45      	cmp	r5, #69	; 0x45
 800956c:	d100      	bne.n	8009570 <__cvt+0x34>
 800956e:	3401      	adds	r4, #1
 8009570:	2102      	movs	r1, #2
 8009572:	e000      	b.n	8009576 <__cvt+0x3a>
 8009574:	2103      	movs	r1, #3
 8009576:	ab03      	add	r3, sp, #12
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	ab02      	add	r3, sp, #8
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	4622      	mov	r2, r4
 8009580:	4633      	mov	r3, r6
 8009582:	eeb0 0b48 	vmov.f64	d0, d8
 8009586:	f000 fea7 	bl	800a2d8 <_dtoa_r>
 800958a:	2d47      	cmp	r5, #71	; 0x47
 800958c:	d101      	bne.n	8009592 <__cvt+0x56>
 800958e:	07fb      	lsls	r3, r7, #31
 8009590:	d51a      	bpl.n	80095c8 <__cvt+0x8c>
 8009592:	2d46      	cmp	r5, #70	; 0x46
 8009594:	eb00 0204 	add.w	r2, r0, r4
 8009598:	d10c      	bne.n	80095b4 <__cvt+0x78>
 800959a:	7803      	ldrb	r3, [r0, #0]
 800959c:	2b30      	cmp	r3, #48	; 0x30
 800959e:	d107      	bne.n	80095b0 <__cvt+0x74>
 80095a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a8:	bf1c      	itt	ne
 80095aa:	f1c4 0401 	rsbne	r4, r4, #1
 80095ae:	6034      	strne	r4, [r6, #0]
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	441a      	add	r2, r3
 80095b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095bc:	bf08      	it	eq
 80095be:	9203      	streq	r2, [sp, #12]
 80095c0:	2130      	movs	r1, #48	; 0x30
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d307      	bcc.n	80095d8 <__cvt+0x9c>
 80095c8:	9b03      	ldr	r3, [sp, #12]
 80095ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095cc:	1a1b      	subs	r3, r3, r0
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	b005      	add	sp, #20
 80095d2:	ecbd 8b02 	vpop	{d8}
 80095d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d8:	1c5c      	adds	r4, r3, #1
 80095da:	9403      	str	r4, [sp, #12]
 80095dc:	7019      	strb	r1, [r3, #0]
 80095de:	e7f0      	b.n	80095c2 <__cvt+0x86>

080095e0 <__exponent>:
 80095e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095e2:	4603      	mov	r3, r0
 80095e4:	2900      	cmp	r1, #0
 80095e6:	bfb8      	it	lt
 80095e8:	4249      	neglt	r1, r1
 80095ea:	f803 2b02 	strb.w	r2, [r3], #2
 80095ee:	bfb4      	ite	lt
 80095f0:	222d      	movlt	r2, #45	; 0x2d
 80095f2:	222b      	movge	r2, #43	; 0x2b
 80095f4:	2909      	cmp	r1, #9
 80095f6:	7042      	strb	r2, [r0, #1]
 80095f8:	dd2a      	ble.n	8009650 <__exponent+0x70>
 80095fa:	f10d 0207 	add.w	r2, sp, #7
 80095fe:	4617      	mov	r7, r2
 8009600:	260a      	movs	r6, #10
 8009602:	4694      	mov	ip, r2
 8009604:	fb91 f5f6 	sdiv	r5, r1, r6
 8009608:	fb06 1415 	mls	r4, r6, r5, r1
 800960c:	3430      	adds	r4, #48	; 0x30
 800960e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009612:	460c      	mov	r4, r1
 8009614:	2c63      	cmp	r4, #99	; 0x63
 8009616:	f102 32ff 	add.w	r2, r2, #4294967295
 800961a:	4629      	mov	r1, r5
 800961c:	dcf1      	bgt.n	8009602 <__exponent+0x22>
 800961e:	3130      	adds	r1, #48	; 0x30
 8009620:	f1ac 0402 	sub.w	r4, ip, #2
 8009624:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009628:	1c41      	adds	r1, r0, #1
 800962a:	4622      	mov	r2, r4
 800962c:	42ba      	cmp	r2, r7
 800962e:	d30a      	bcc.n	8009646 <__exponent+0x66>
 8009630:	f10d 0209 	add.w	r2, sp, #9
 8009634:	eba2 020c 	sub.w	r2, r2, ip
 8009638:	42bc      	cmp	r4, r7
 800963a:	bf88      	it	hi
 800963c:	2200      	movhi	r2, #0
 800963e:	4413      	add	r3, r2
 8009640:	1a18      	subs	r0, r3, r0
 8009642:	b003      	add	sp, #12
 8009644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009646:	f812 5b01 	ldrb.w	r5, [r2], #1
 800964a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800964e:	e7ed      	b.n	800962c <__exponent+0x4c>
 8009650:	2330      	movs	r3, #48	; 0x30
 8009652:	3130      	adds	r1, #48	; 0x30
 8009654:	7083      	strb	r3, [r0, #2]
 8009656:	70c1      	strb	r1, [r0, #3]
 8009658:	1d03      	adds	r3, r0, #4
 800965a:	e7f1      	b.n	8009640 <__exponent+0x60>
 800965c:	0000      	movs	r0, r0
	...

08009660 <_printf_float>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	b08b      	sub	sp, #44	; 0x2c
 8009666:	460c      	mov	r4, r1
 8009668:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800966c:	4616      	mov	r6, r2
 800966e:	461f      	mov	r7, r3
 8009670:	4605      	mov	r5, r0
 8009672:	f000 fccd 	bl	800a010 <_localeconv_r>
 8009676:	f8d0 b000 	ldr.w	fp, [r0]
 800967a:	4658      	mov	r0, fp
 800967c:	f7f6 fe30 	bl	80002e0 <strlen>
 8009680:	2300      	movs	r3, #0
 8009682:	9308      	str	r3, [sp, #32]
 8009684:	f8d8 3000 	ldr.w	r3, [r8]
 8009688:	f894 9018 	ldrb.w	r9, [r4, #24]
 800968c:	6822      	ldr	r2, [r4, #0]
 800968e:	3307      	adds	r3, #7
 8009690:	f023 0307 	bic.w	r3, r3, #7
 8009694:	f103 0108 	add.w	r1, r3, #8
 8009698:	f8c8 1000 	str.w	r1, [r8]
 800969c:	ed93 0b00 	vldr	d0, [r3]
 80096a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009900 <_printf_float+0x2a0>
 80096a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80096a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80096ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80096b4:	4682      	mov	sl, r0
 80096b6:	dd24      	ble.n	8009702 <_printf_float+0xa2>
 80096b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	d502      	bpl.n	80096c8 <_printf_float+0x68>
 80096c2:	232d      	movs	r3, #45	; 0x2d
 80096c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c8:	498f      	ldr	r1, [pc, #572]	; (8009908 <_printf_float+0x2a8>)
 80096ca:	4b90      	ldr	r3, [pc, #576]	; (800990c <_printf_float+0x2ac>)
 80096cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096d0:	bf94      	ite	ls
 80096d2:	4688      	movls	r8, r1
 80096d4:	4698      	movhi	r8, r3
 80096d6:	2303      	movs	r3, #3
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	f022 0204 	bic.w	r2, r2, #4
 80096de:	2300      	movs	r3, #0
 80096e0:	6022      	str	r2, [r4, #0]
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	9700      	str	r7, [sp, #0]
 80096e6:	4633      	mov	r3, r6
 80096e8:	aa09      	add	r2, sp, #36	; 0x24
 80096ea:	4621      	mov	r1, r4
 80096ec:	4628      	mov	r0, r5
 80096ee:	f000 f9d1 	bl	8009a94 <_printf_common>
 80096f2:	3001      	adds	r0, #1
 80096f4:	f040 808a 	bne.w	800980c <_printf_float+0x1ac>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	b00b      	add	sp, #44	; 0x2c
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	eeb4 0b40 	vcmp.f64	d0, d0
 8009706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970a:	d709      	bvc.n	8009720 <_printf_float+0xc0>
 800970c:	ee10 3a90 	vmov	r3, s1
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbc      	itt	lt
 8009714:	232d      	movlt	r3, #45	; 0x2d
 8009716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800971a:	497d      	ldr	r1, [pc, #500]	; (8009910 <_printf_float+0x2b0>)
 800971c:	4b7d      	ldr	r3, [pc, #500]	; (8009914 <_printf_float+0x2b4>)
 800971e:	e7d5      	b.n	80096cc <_printf_float+0x6c>
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009726:	9104      	str	r1, [sp, #16]
 8009728:	1c59      	adds	r1, r3, #1
 800972a:	d13c      	bne.n	80097a6 <_printf_float+0x146>
 800972c:	2306      	movs	r3, #6
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	2300      	movs	r3, #0
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	ab08      	add	r3, sp, #32
 8009736:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800973a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800973e:	ab07      	add	r3, sp, #28
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	6022      	str	r2, [r4, #0]
 8009746:	f10d 031b 	add.w	r3, sp, #27
 800974a:	4628      	mov	r0, r5
 800974c:	f7ff fef6 	bl	800953c <__cvt>
 8009750:	9b04      	ldr	r3, [sp, #16]
 8009752:	9907      	ldr	r1, [sp, #28]
 8009754:	2b47      	cmp	r3, #71	; 0x47
 8009756:	4680      	mov	r8, r0
 8009758:	d108      	bne.n	800976c <_printf_float+0x10c>
 800975a:	1cc8      	adds	r0, r1, #3
 800975c:	db02      	blt.n	8009764 <_printf_float+0x104>
 800975e:	6863      	ldr	r3, [r4, #4]
 8009760:	4299      	cmp	r1, r3
 8009762:	dd41      	ble.n	80097e8 <_printf_float+0x188>
 8009764:	f1a9 0902 	sub.w	r9, r9, #2
 8009768:	fa5f f989 	uxtb.w	r9, r9
 800976c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009770:	d820      	bhi.n	80097b4 <_printf_float+0x154>
 8009772:	3901      	subs	r1, #1
 8009774:	464a      	mov	r2, r9
 8009776:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800977a:	9107      	str	r1, [sp, #28]
 800977c:	f7ff ff30 	bl	80095e0 <__exponent>
 8009780:	9a08      	ldr	r2, [sp, #32]
 8009782:	9004      	str	r0, [sp, #16]
 8009784:	1813      	adds	r3, r2, r0
 8009786:	2a01      	cmp	r2, #1
 8009788:	6123      	str	r3, [r4, #16]
 800978a:	dc02      	bgt.n	8009792 <_printf_float+0x132>
 800978c:	6822      	ldr	r2, [r4, #0]
 800978e:	07d2      	lsls	r2, r2, #31
 8009790:	d501      	bpl.n	8009796 <_printf_float+0x136>
 8009792:	3301      	adds	r3, #1
 8009794:	6123      	str	r3, [r4, #16]
 8009796:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0a2      	beq.n	80096e4 <_printf_float+0x84>
 800979e:	232d      	movs	r3, #45	; 0x2d
 80097a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097a4:	e79e      	b.n	80096e4 <_printf_float+0x84>
 80097a6:	9904      	ldr	r1, [sp, #16]
 80097a8:	2947      	cmp	r1, #71	; 0x47
 80097aa:	d1c1      	bne.n	8009730 <_printf_float+0xd0>
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1bf      	bne.n	8009730 <_printf_float+0xd0>
 80097b0:	2301      	movs	r3, #1
 80097b2:	e7bc      	b.n	800972e <_printf_float+0xce>
 80097b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097b8:	d118      	bne.n	80097ec <_printf_float+0x18c>
 80097ba:	2900      	cmp	r1, #0
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	dd0b      	ble.n	80097d8 <_printf_float+0x178>
 80097c0:	6121      	str	r1, [r4, #16]
 80097c2:	b913      	cbnz	r3, 80097ca <_printf_float+0x16a>
 80097c4:	6822      	ldr	r2, [r4, #0]
 80097c6:	07d0      	lsls	r0, r2, #31
 80097c8:	d502      	bpl.n	80097d0 <_printf_float+0x170>
 80097ca:	3301      	adds	r3, #1
 80097cc:	440b      	add	r3, r1
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	2300      	movs	r3, #0
 80097d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	e7de      	b.n	8009796 <_printf_float+0x136>
 80097d8:	b913      	cbnz	r3, 80097e0 <_printf_float+0x180>
 80097da:	6822      	ldr	r2, [r4, #0]
 80097dc:	07d2      	lsls	r2, r2, #31
 80097de:	d501      	bpl.n	80097e4 <_printf_float+0x184>
 80097e0:	3302      	adds	r3, #2
 80097e2:	e7f4      	b.n	80097ce <_printf_float+0x16e>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e7f2      	b.n	80097ce <_printf_float+0x16e>
 80097e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097ec:	9b08      	ldr	r3, [sp, #32]
 80097ee:	4299      	cmp	r1, r3
 80097f0:	db05      	blt.n	80097fe <_printf_float+0x19e>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	6121      	str	r1, [r4, #16]
 80097f6:	07d8      	lsls	r0, r3, #31
 80097f8:	d5ea      	bpl.n	80097d0 <_printf_float+0x170>
 80097fa:	1c4b      	adds	r3, r1, #1
 80097fc:	e7e7      	b.n	80097ce <_printf_float+0x16e>
 80097fe:	2900      	cmp	r1, #0
 8009800:	bfd4      	ite	le
 8009802:	f1c1 0202 	rsble	r2, r1, #2
 8009806:	2201      	movgt	r2, #1
 8009808:	4413      	add	r3, r2
 800980a:	e7e0      	b.n	80097ce <_printf_float+0x16e>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	055a      	lsls	r2, r3, #21
 8009810:	d407      	bmi.n	8009822 <_printf_float+0x1c2>
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	4642      	mov	r2, r8
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	47b8      	blx	r7
 800981c:	3001      	adds	r0, #1
 800981e:	d12a      	bne.n	8009876 <_printf_float+0x216>
 8009820:	e76a      	b.n	80096f8 <_printf_float+0x98>
 8009822:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009826:	f240 80e0 	bls.w	80099ea <_printf_float+0x38a>
 800982a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800982e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009836:	d133      	bne.n	80098a0 <_printf_float+0x240>
 8009838:	4a37      	ldr	r2, [pc, #220]	; (8009918 <_printf_float+0x2b8>)
 800983a:	2301      	movs	r3, #1
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	47b8      	blx	r7
 8009842:	3001      	adds	r0, #1
 8009844:	f43f af58 	beq.w	80096f8 <_printf_float+0x98>
 8009848:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800984c:	429a      	cmp	r2, r3
 800984e:	db02      	blt.n	8009856 <_printf_float+0x1f6>
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	07d8      	lsls	r0, r3, #31
 8009854:	d50f      	bpl.n	8009876 <_printf_float+0x216>
 8009856:	4653      	mov	r3, sl
 8009858:	465a      	mov	r2, fp
 800985a:	4631      	mov	r1, r6
 800985c:	4628      	mov	r0, r5
 800985e:	47b8      	blx	r7
 8009860:	3001      	adds	r0, #1
 8009862:	f43f af49 	beq.w	80096f8 <_printf_float+0x98>
 8009866:	f04f 0800 	mov.w	r8, #0
 800986a:	f104 091a 	add.w	r9, r4, #26
 800986e:	9b08      	ldr	r3, [sp, #32]
 8009870:	3b01      	subs	r3, #1
 8009872:	4543      	cmp	r3, r8
 8009874:	dc09      	bgt.n	800988a <_printf_float+0x22a>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	079b      	lsls	r3, r3, #30
 800987a:	f100 8106 	bmi.w	8009a8a <_printf_float+0x42a>
 800987e:	68e0      	ldr	r0, [r4, #12]
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	4298      	cmp	r0, r3
 8009884:	bfb8      	it	lt
 8009886:	4618      	movlt	r0, r3
 8009888:	e738      	b.n	80096fc <_printf_float+0x9c>
 800988a:	2301      	movs	r3, #1
 800988c:	464a      	mov	r2, r9
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f af2f 	beq.w	80096f8 <_printf_float+0x98>
 800989a:	f108 0801 	add.w	r8, r8, #1
 800989e:	e7e6      	b.n	800986e <_printf_float+0x20e>
 80098a0:	9b07      	ldr	r3, [sp, #28]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dc3a      	bgt.n	800991c <_printf_float+0x2bc>
 80098a6:	4a1c      	ldr	r2, [pc, #112]	; (8009918 <_printf_float+0x2b8>)
 80098a8:	2301      	movs	r3, #1
 80098aa:	4631      	mov	r1, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b8      	blx	r7
 80098b0:	3001      	adds	r0, #1
 80098b2:	f43f af21 	beq.w	80096f8 <_printf_float+0x98>
 80098b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	d102      	bne.n	80098c4 <_printf_float+0x264>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	07d9      	lsls	r1, r3, #31
 80098c2:	d5d8      	bpl.n	8009876 <_printf_float+0x216>
 80098c4:	4653      	mov	r3, sl
 80098c6:	465a      	mov	r2, fp
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b8      	blx	r7
 80098ce:	3001      	adds	r0, #1
 80098d0:	f43f af12 	beq.w	80096f8 <_printf_float+0x98>
 80098d4:	f04f 0900 	mov.w	r9, #0
 80098d8:	f104 0a1a 	add.w	sl, r4, #26
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	425b      	negs	r3, r3
 80098e0:	454b      	cmp	r3, r9
 80098e2:	dc01      	bgt.n	80098e8 <_printf_float+0x288>
 80098e4:	9b08      	ldr	r3, [sp, #32]
 80098e6:	e795      	b.n	8009814 <_printf_float+0x1b4>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4652      	mov	r2, sl
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	f43f af00 	beq.w	80096f8 <_printf_float+0x98>
 80098f8:	f109 0901 	add.w	r9, r9, #1
 80098fc:	e7ee      	b.n	80098dc <_printf_float+0x27c>
 80098fe:	bf00      	nop
 8009900:	ffffffff 	.word	0xffffffff
 8009904:	7fefffff 	.word	0x7fefffff
 8009908:	0800c44c 	.word	0x0800c44c
 800990c:	0800c450 	.word	0x0800c450
 8009910:	0800c454 	.word	0x0800c454
 8009914:	0800c458 	.word	0x0800c458
 8009918:	0800c45c 	.word	0x0800c45c
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009920:	429a      	cmp	r2, r3
 8009922:	bfa8      	it	ge
 8009924:	461a      	movge	r2, r3
 8009926:	2a00      	cmp	r2, #0
 8009928:	4691      	mov	r9, r2
 800992a:	dc38      	bgt.n	800999e <_printf_float+0x33e>
 800992c:	2300      	movs	r3, #0
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009934:	f104 021a 	add.w	r2, r4, #26
 8009938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800993a:	9905      	ldr	r1, [sp, #20]
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	eba3 0309 	sub.w	r3, r3, r9
 8009942:	428b      	cmp	r3, r1
 8009944:	dc33      	bgt.n	80099ae <_printf_float+0x34e>
 8009946:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800994a:	429a      	cmp	r2, r3
 800994c:	db3c      	blt.n	80099c8 <_printf_float+0x368>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	07da      	lsls	r2, r3, #31
 8009952:	d439      	bmi.n	80099c8 <_printf_float+0x368>
 8009954:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009958:	eba2 0903 	sub.w	r9, r2, r3
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	4591      	cmp	r9, r2
 8009962:	bfa8      	it	ge
 8009964:	4691      	movge	r9, r2
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	dc35      	bgt.n	80099d8 <_printf_float+0x378>
 800996c:	f04f 0800 	mov.w	r8, #0
 8009970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009974:	f104 0a1a 	add.w	sl, r4, #26
 8009978:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	eba3 0309 	sub.w	r3, r3, r9
 8009982:	4543      	cmp	r3, r8
 8009984:	f77f af77 	ble.w	8009876 <_printf_float+0x216>
 8009988:	2301      	movs	r3, #1
 800998a:	4652      	mov	r2, sl
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f aeb0 	beq.w	80096f8 <_printf_float+0x98>
 8009998:	f108 0801 	add.w	r8, r8, #1
 800999c:	e7ec      	b.n	8009978 <_printf_float+0x318>
 800999e:	4613      	mov	r3, r2
 80099a0:	4631      	mov	r1, r6
 80099a2:	4642      	mov	r2, r8
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	d1bf      	bne.n	800992c <_printf_float+0x2cc>
 80099ac:	e6a4      	b.n	80096f8 <_printf_float+0x98>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4631      	mov	r1, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	9204      	str	r2, [sp, #16]
 80099b6:	47b8      	blx	r7
 80099b8:	3001      	adds	r0, #1
 80099ba:	f43f ae9d 	beq.w	80096f8 <_printf_float+0x98>
 80099be:	9b05      	ldr	r3, [sp, #20]
 80099c0:	9a04      	ldr	r2, [sp, #16]
 80099c2:	3301      	adds	r3, #1
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	e7b7      	b.n	8009938 <_printf_float+0x2d8>
 80099c8:	4653      	mov	r3, sl
 80099ca:	465a      	mov	r2, fp
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1be      	bne.n	8009954 <_printf_float+0x2f4>
 80099d6:	e68f      	b.n	80096f8 <_printf_float+0x98>
 80099d8:	9a04      	ldr	r2, [sp, #16]
 80099da:	464b      	mov	r3, r9
 80099dc:	4442      	add	r2, r8
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1c1      	bne.n	800996c <_printf_float+0x30c>
 80099e8:	e686      	b.n	80096f8 <_printf_float+0x98>
 80099ea:	9a08      	ldr	r2, [sp, #32]
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	dc01      	bgt.n	80099f4 <_printf_float+0x394>
 80099f0:	07db      	lsls	r3, r3, #31
 80099f2:	d537      	bpl.n	8009a64 <_printf_float+0x404>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4642      	mov	r2, r8
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae7a 	beq.w	80096f8 <_printf_float+0x98>
 8009a04:	4653      	mov	r3, sl
 8009a06:	465a      	mov	r2, fp
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	f43f ae72 	beq.w	80096f8 <_printf_float+0x98>
 8009a14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009a18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a20:	9b08      	ldr	r3, [sp, #32]
 8009a22:	d01a      	beq.n	8009a5a <_printf_float+0x3fa>
 8009a24:	3b01      	subs	r3, #1
 8009a26:	f108 0201 	add.w	r2, r8, #1
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d10e      	bne.n	8009a52 <_printf_float+0x3f2>
 8009a34:	e660      	b.n	80096f8 <_printf_float+0x98>
 8009a36:	2301      	movs	r3, #1
 8009a38:	464a      	mov	r2, r9
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f ae59 	beq.w	80096f8 <_printf_float+0x98>
 8009a46:	f108 0801 	add.w	r8, r8, #1
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	4543      	cmp	r3, r8
 8009a50:	dcf1      	bgt.n	8009a36 <_printf_float+0x3d6>
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a58:	e6dd      	b.n	8009816 <_printf_float+0x1b6>
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	f104 091a 	add.w	r9, r4, #26
 8009a62:	e7f2      	b.n	8009a4a <_printf_float+0x3ea>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4642      	mov	r2, r8
 8009a68:	e7df      	b.n	8009a2a <_printf_float+0x3ca>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	464a      	mov	r2, r9
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f ae3f 	beq.w	80096f8 <_printf_float+0x98>
 8009a7a:	f108 0801 	add.w	r8, r8, #1
 8009a7e:	68e3      	ldr	r3, [r4, #12]
 8009a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a82:	1a5b      	subs	r3, r3, r1
 8009a84:	4543      	cmp	r3, r8
 8009a86:	dcf0      	bgt.n	8009a6a <_printf_float+0x40a>
 8009a88:	e6f9      	b.n	800987e <_printf_float+0x21e>
 8009a8a:	f04f 0800 	mov.w	r8, #0
 8009a8e:	f104 0919 	add.w	r9, r4, #25
 8009a92:	e7f4      	b.n	8009a7e <_printf_float+0x41e>

08009a94 <_printf_common>:
 8009a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a98:	4616      	mov	r6, r2
 8009a9a:	4699      	mov	r9, r3
 8009a9c:	688a      	ldr	r2, [r1, #8]
 8009a9e:	690b      	ldr	r3, [r1, #16]
 8009aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	bfb8      	it	lt
 8009aa8:	4613      	movlt	r3, r2
 8009aaa:	6033      	str	r3, [r6, #0]
 8009aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	b10a      	cbz	r2, 8009aba <_printf_common+0x26>
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	0699      	lsls	r1, r3, #26
 8009abe:	bf42      	ittt	mi
 8009ac0:	6833      	ldrmi	r3, [r6, #0]
 8009ac2:	3302      	addmi	r3, #2
 8009ac4:	6033      	strmi	r3, [r6, #0]
 8009ac6:	6825      	ldr	r5, [r4, #0]
 8009ac8:	f015 0506 	ands.w	r5, r5, #6
 8009acc:	d106      	bne.n	8009adc <_printf_common+0x48>
 8009ace:	f104 0a19 	add.w	sl, r4, #25
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	6832      	ldr	r2, [r6, #0]
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	42ab      	cmp	r3, r5
 8009ada:	dc26      	bgt.n	8009b2a <_printf_common+0x96>
 8009adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ae0:	1e13      	subs	r3, r2, #0
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	bf18      	it	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	0692      	lsls	r2, r2, #26
 8009aea:	d42b      	bmi.n	8009b44 <_printf_common+0xb0>
 8009aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af0:	4649      	mov	r1, r9
 8009af2:	4638      	mov	r0, r7
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d01e      	beq.n	8009b38 <_printf_common+0xa4>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	6922      	ldr	r2, [r4, #16]
 8009afe:	f003 0306 	and.w	r3, r3, #6
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	bf02      	ittt	eq
 8009b06:	68e5      	ldreq	r5, [r4, #12]
 8009b08:	6833      	ldreq	r3, [r6, #0]
 8009b0a:	1aed      	subeq	r5, r5, r3
 8009b0c:	68a3      	ldr	r3, [r4, #8]
 8009b0e:	bf0c      	ite	eq
 8009b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b14:	2500      	movne	r5, #0
 8009b16:	4293      	cmp	r3, r2
 8009b18:	bfc4      	itt	gt
 8009b1a:	1a9b      	subgt	r3, r3, r2
 8009b1c:	18ed      	addgt	r5, r5, r3
 8009b1e:	2600      	movs	r6, #0
 8009b20:	341a      	adds	r4, #26
 8009b22:	42b5      	cmp	r5, r6
 8009b24:	d11a      	bne.n	8009b5c <_printf_common+0xc8>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e008      	b.n	8009b3c <_printf_common+0xa8>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4652      	mov	r2, sl
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4638      	mov	r0, r7
 8009b32:	47c0      	blx	r8
 8009b34:	3001      	adds	r0, #1
 8009b36:	d103      	bne.n	8009b40 <_printf_common+0xac>
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b40:	3501      	adds	r5, #1
 8009b42:	e7c6      	b.n	8009ad2 <_printf_common+0x3e>
 8009b44:	18e1      	adds	r1, r4, r3
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	2030      	movs	r0, #48	; 0x30
 8009b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b4e:	4422      	add	r2, r4
 8009b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b58:	3302      	adds	r3, #2
 8009b5a:	e7c7      	b.n	8009aec <_printf_common+0x58>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4649      	mov	r1, r9
 8009b62:	4638      	mov	r0, r7
 8009b64:	47c0      	blx	r8
 8009b66:	3001      	adds	r0, #1
 8009b68:	d0e6      	beq.n	8009b38 <_printf_common+0xa4>
 8009b6a:	3601      	adds	r6, #1
 8009b6c:	e7d9      	b.n	8009b22 <_printf_common+0x8e>
	...

08009b70 <_printf_i>:
 8009b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	7e0f      	ldrb	r7, [r1, #24]
 8009b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b78:	2f78      	cmp	r7, #120	; 0x78
 8009b7a:	4691      	mov	r9, r2
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	469a      	mov	sl, r3
 8009b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b86:	d807      	bhi.n	8009b98 <_printf_i+0x28>
 8009b88:	2f62      	cmp	r7, #98	; 0x62
 8009b8a:	d80a      	bhi.n	8009ba2 <_printf_i+0x32>
 8009b8c:	2f00      	cmp	r7, #0
 8009b8e:	f000 80d4 	beq.w	8009d3a <_printf_i+0x1ca>
 8009b92:	2f58      	cmp	r7, #88	; 0x58
 8009b94:	f000 80c0 	beq.w	8009d18 <_printf_i+0x1a8>
 8009b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ba0:	e03a      	b.n	8009c18 <_printf_i+0xa8>
 8009ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ba6:	2b15      	cmp	r3, #21
 8009ba8:	d8f6      	bhi.n	8009b98 <_printf_i+0x28>
 8009baa:	a101      	add	r1, pc, #4	; (adr r1, 8009bb0 <_printf_i+0x40>)
 8009bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bb0:	08009c09 	.word	0x08009c09
 8009bb4:	08009c1d 	.word	0x08009c1d
 8009bb8:	08009b99 	.word	0x08009b99
 8009bbc:	08009b99 	.word	0x08009b99
 8009bc0:	08009b99 	.word	0x08009b99
 8009bc4:	08009b99 	.word	0x08009b99
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009b99 	.word	0x08009b99
 8009bd0:	08009b99 	.word	0x08009b99
 8009bd4:	08009b99 	.word	0x08009b99
 8009bd8:	08009b99 	.word	0x08009b99
 8009bdc:	08009d21 	.word	0x08009d21
 8009be0:	08009c49 	.word	0x08009c49
 8009be4:	08009cdb 	.word	0x08009cdb
 8009be8:	08009b99 	.word	0x08009b99
 8009bec:	08009b99 	.word	0x08009b99
 8009bf0:	08009d43 	.word	0x08009d43
 8009bf4:	08009b99 	.word	0x08009b99
 8009bf8:	08009c49 	.word	0x08009c49
 8009bfc:	08009b99 	.word	0x08009b99
 8009c00:	08009b99 	.word	0x08009b99
 8009c04:	08009ce3 	.word	0x08009ce3
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	602a      	str	r2, [r5, #0]
 8009c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e09f      	b.n	8009d5c <_printf_i+0x1ec>
 8009c1c:	6820      	ldr	r0, [r4, #0]
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	0607      	lsls	r7, r0, #24
 8009c22:	f103 0104 	add.w	r1, r3, #4
 8009c26:	6029      	str	r1, [r5, #0]
 8009c28:	d501      	bpl.n	8009c2e <_printf_i+0xbe>
 8009c2a:	681e      	ldr	r6, [r3, #0]
 8009c2c:	e003      	b.n	8009c36 <_printf_i+0xc6>
 8009c2e:	0646      	lsls	r6, r0, #25
 8009c30:	d5fb      	bpl.n	8009c2a <_printf_i+0xba>
 8009c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c36:	2e00      	cmp	r6, #0
 8009c38:	da03      	bge.n	8009c42 <_printf_i+0xd2>
 8009c3a:	232d      	movs	r3, #45	; 0x2d
 8009c3c:	4276      	negs	r6, r6
 8009c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c42:	485a      	ldr	r0, [pc, #360]	; (8009dac <_printf_i+0x23c>)
 8009c44:	230a      	movs	r3, #10
 8009c46:	e012      	b.n	8009c6e <_printf_i+0xfe>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	6820      	ldr	r0, [r4, #0]
 8009c4c:	1d19      	adds	r1, r3, #4
 8009c4e:	6029      	str	r1, [r5, #0]
 8009c50:	0605      	lsls	r5, r0, #24
 8009c52:	d501      	bpl.n	8009c58 <_printf_i+0xe8>
 8009c54:	681e      	ldr	r6, [r3, #0]
 8009c56:	e002      	b.n	8009c5e <_printf_i+0xee>
 8009c58:	0641      	lsls	r1, r0, #25
 8009c5a:	d5fb      	bpl.n	8009c54 <_printf_i+0xe4>
 8009c5c:	881e      	ldrh	r6, [r3, #0]
 8009c5e:	4853      	ldr	r0, [pc, #332]	; (8009dac <_printf_i+0x23c>)
 8009c60:	2f6f      	cmp	r7, #111	; 0x6f
 8009c62:	bf0c      	ite	eq
 8009c64:	2308      	moveq	r3, #8
 8009c66:	230a      	movne	r3, #10
 8009c68:	2100      	movs	r1, #0
 8009c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c6e:	6865      	ldr	r5, [r4, #4]
 8009c70:	60a5      	str	r5, [r4, #8]
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	bfa2      	ittt	ge
 8009c76:	6821      	ldrge	r1, [r4, #0]
 8009c78:	f021 0104 	bicge.w	r1, r1, #4
 8009c7c:	6021      	strge	r1, [r4, #0]
 8009c7e:	b90e      	cbnz	r6, 8009c84 <_printf_i+0x114>
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	d04b      	beq.n	8009d1c <_printf_i+0x1ac>
 8009c84:	4615      	mov	r5, r2
 8009c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8009c8e:	5dc7      	ldrb	r7, [r0, r7]
 8009c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c94:	4637      	mov	r7, r6
 8009c96:	42bb      	cmp	r3, r7
 8009c98:	460e      	mov	r6, r1
 8009c9a:	d9f4      	bls.n	8009c86 <_printf_i+0x116>
 8009c9c:	2b08      	cmp	r3, #8
 8009c9e:	d10b      	bne.n	8009cb8 <_printf_i+0x148>
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	07de      	lsls	r6, r3, #31
 8009ca4:	d508      	bpl.n	8009cb8 <_printf_i+0x148>
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	6861      	ldr	r1, [r4, #4]
 8009caa:	4299      	cmp	r1, r3
 8009cac:	bfde      	ittt	le
 8009cae:	2330      	movle	r3, #48	; 0x30
 8009cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cb8:	1b52      	subs	r2, r2, r5
 8009cba:	6122      	str	r2, [r4, #16]
 8009cbc:	f8cd a000 	str.w	sl, [sp]
 8009cc0:	464b      	mov	r3, r9
 8009cc2:	aa03      	add	r2, sp, #12
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	f7ff fee4 	bl	8009a94 <_printf_common>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d14a      	bne.n	8009d66 <_printf_i+0x1f6>
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	b004      	add	sp, #16
 8009cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	f043 0320 	orr.w	r3, r3, #32
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	4833      	ldr	r0, [pc, #204]	; (8009db0 <_printf_i+0x240>)
 8009ce4:	2778      	movs	r7, #120	; 0x78
 8009ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	6829      	ldr	r1, [r5, #0]
 8009cee:	061f      	lsls	r7, r3, #24
 8009cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cf4:	d402      	bmi.n	8009cfc <_printf_i+0x18c>
 8009cf6:	065f      	lsls	r7, r3, #25
 8009cf8:	bf48      	it	mi
 8009cfa:	b2b6      	uxthmi	r6, r6
 8009cfc:	07df      	lsls	r7, r3, #31
 8009cfe:	bf48      	it	mi
 8009d00:	f043 0320 	orrmi.w	r3, r3, #32
 8009d04:	6029      	str	r1, [r5, #0]
 8009d06:	bf48      	it	mi
 8009d08:	6023      	strmi	r3, [r4, #0]
 8009d0a:	b91e      	cbnz	r6, 8009d14 <_printf_i+0x1a4>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	f023 0320 	bic.w	r3, r3, #32
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	2310      	movs	r3, #16
 8009d16:	e7a7      	b.n	8009c68 <_printf_i+0xf8>
 8009d18:	4824      	ldr	r0, [pc, #144]	; (8009dac <_printf_i+0x23c>)
 8009d1a:	e7e4      	b.n	8009ce6 <_printf_i+0x176>
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	e7bd      	b.n	8009c9c <_printf_i+0x12c>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	6826      	ldr	r6, [r4, #0]
 8009d24:	6961      	ldr	r1, [r4, #20]
 8009d26:	1d18      	adds	r0, r3, #4
 8009d28:	6028      	str	r0, [r5, #0]
 8009d2a:	0635      	lsls	r5, r6, #24
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	d501      	bpl.n	8009d34 <_printf_i+0x1c4>
 8009d30:	6019      	str	r1, [r3, #0]
 8009d32:	e002      	b.n	8009d3a <_printf_i+0x1ca>
 8009d34:	0670      	lsls	r0, r6, #25
 8009d36:	d5fb      	bpl.n	8009d30 <_printf_i+0x1c0>
 8009d38:	8019      	strh	r1, [r3, #0]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	4615      	mov	r5, r2
 8009d40:	e7bc      	b.n	8009cbc <_printf_i+0x14c>
 8009d42:	682b      	ldr	r3, [r5, #0]
 8009d44:	1d1a      	adds	r2, r3, #4
 8009d46:	602a      	str	r2, [r5, #0]
 8009d48:	681d      	ldr	r5, [r3, #0]
 8009d4a:	6862      	ldr	r2, [r4, #4]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7f6 fa76 	bl	8000240 <memchr>
 8009d54:	b108      	cbz	r0, 8009d5a <_printf_i+0x1ea>
 8009d56:	1b40      	subs	r0, r0, r5
 8009d58:	6060      	str	r0, [r4, #4]
 8009d5a:	6863      	ldr	r3, [r4, #4]
 8009d5c:	6123      	str	r3, [r4, #16]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d64:	e7aa      	b.n	8009cbc <_printf_i+0x14c>
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	47d0      	blx	sl
 8009d70:	3001      	adds	r0, #1
 8009d72:	d0ad      	beq.n	8009cd0 <_printf_i+0x160>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	079b      	lsls	r3, r3, #30
 8009d78:	d413      	bmi.n	8009da2 <_printf_i+0x232>
 8009d7a:	68e0      	ldr	r0, [r4, #12]
 8009d7c:	9b03      	ldr	r3, [sp, #12]
 8009d7e:	4298      	cmp	r0, r3
 8009d80:	bfb8      	it	lt
 8009d82:	4618      	movlt	r0, r3
 8009d84:	e7a6      	b.n	8009cd4 <_printf_i+0x164>
 8009d86:	2301      	movs	r3, #1
 8009d88:	4632      	mov	r2, r6
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	47d0      	blx	sl
 8009d90:	3001      	adds	r0, #1
 8009d92:	d09d      	beq.n	8009cd0 <_printf_i+0x160>
 8009d94:	3501      	adds	r5, #1
 8009d96:	68e3      	ldr	r3, [r4, #12]
 8009d98:	9903      	ldr	r1, [sp, #12]
 8009d9a:	1a5b      	subs	r3, r3, r1
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	dcf2      	bgt.n	8009d86 <_printf_i+0x216>
 8009da0:	e7eb      	b.n	8009d7a <_printf_i+0x20a>
 8009da2:	2500      	movs	r5, #0
 8009da4:	f104 0619 	add.w	r6, r4, #25
 8009da8:	e7f5      	b.n	8009d96 <_printf_i+0x226>
 8009daa:	bf00      	nop
 8009dac:	0800c45e 	.word	0x0800c45e
 8009db0:	0800c46f 	.word	0x0800c46f

08009db4 <std>:
 8009db4:	2300      	movs	r3, #0
 8009db6:	b510      	push	{r4, lr}
 8009db8:	4604      	mov	r4, r0
 8009dba:	e9c0 3300 	strd	r3, r3, [r0]
 8009dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dc2:	6083      	str	r3, [r0, #8]
 8009dc4:	8181      	strh	r1, [r0, #12]
 8009dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8009dc8:	81c2      	strh	r2, [r0, #14]
 8009dca:	6183      	str	r3, [r0, #24]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	2208      	movs	r2, #8
 8009dd0:	305c      	adds	r0, #92	; 0x5c
 8009dd2:	f000 f914 	bl	8009ffe <memset>
 8009dd6:	4b0d      	ldr	r3, [pc, #52]	; (8009e0c <std+0x58>)
 8009dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8009dda:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <std+0x5c>)
 8009ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <std+0x60>)
 8009de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009de2:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <std+0x64>)
 8009de4:	6323      	str	r3, [r4, #48]	; 0x30
 8009de6:	4b0d      	ldr	r3, [pc, #52]	; (8009e1c <std+0x68>)
 8009de8:	6224      	str	r4, [r4, #32]
 8009dea:	429c      	cmp	r4, r3
 8009dec:	d006      	beq.n	8009dfc <std+0x48>
 8009dee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009df2:	4294      	cmp	r4, r2
 8009df4:	d002      	beq.n	8009dfc <std+0x48>
 8009df6:	33d0      	adds	r3, #208	; 0xd0
 8009df8:	429c      	cmp	r4, r3
 8009dfa:	d105      	bne.n	8009e08 <std+0x54>
 8009dfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e04:	f000 b9ce 	b.w	800a1a4 <__retarget_lock_init_recursive>
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	bf00      	nop
 8009e0c:	08009f79 	.word	0x08009f79
 8009e10:	08009f9b 	.word	0x08009f9b
 8009e14:	08009fd3 	.word	0x08009fd3
 8009e18:	08009ff7 	.word	0x08009ff7
 8009e1c:	200052f4 	.word	0x200052f4

08009e20 <stdio_exit_handler>:
 8009e20:	4a02      	ldr	r2, [pc, #8]	; (8009e2c <stdio_exit_handler+0xc>)
 8009e22:	4903      	ldr	r1, [pc, #12]	; (8009e30 <stdio_exit_handler+0x10>)
 8009e24:	4803      	ldr	r0, [pc, #12]	; (8009e34 <stdio_exit_handler+0x14>)
 8009e26:	f000 b869 	b.w	8009efc <_fwalk_sglue>
 8009e2a:	bf00      	nop
 8009e2c:	2000003c 	.word	0x2000003c
 8009e30:	0800ba65 	.word	0x0800ba65
 8009e34:	20000048 	.word	0x20000048

08009e38 <cleanup_stdio>:
 8009e38:	6841      	ldr	r1, [r0, #4]
 8009e3a:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <cleanup_stdio+0x34>)
 8009e3c:	4299      	cmp	r1, r3
 8009e3e:	b510      	push	{r4, lr}
 8009e40:	4604      	mov	r4, r0
 8009e42:	d001      	beq.n	8009e48 <cleanup_stdio+0x10>
 8009e44:	f001 fe0e 	bl	800ba64 <_fflush_r>
 8009e48:	68a1      	ldr	r1, [r4, #8]
 8009e4a:	4b09      	ldr	r3, [pc, #36]	; (8009e70 <cleanup_stdio+0x38>)
 8009e4c:	4299      	cmp	r1, r3
 8009e4e:	d002      	beq.n	8009e56 <cleanup_stdio+0x1e>
 8009e50:	4620      	mov	r0, r4
 8009e52:	f001 fe07 	bl	800ba64 <_fflush_r>
 8009e56:	68e1      	ldr	r1, [r4, #12]
 8009e58:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <cleanup_stdio+0x3c>)
 8009e5a:	4299      	cmp	r1, r3
 8009e5c:	d004      	beq.n	8009e68 <cleanup_stdio+0x30>
 8009e5e:	4620      	mov	r0, r4
 8009e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e64:	f001 bdfe 	b.w	800ba64 <_fflush_r>
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	bf00      	nop
 8009e6c:	200052f4 	.word	0x200052f4
 8009e70:	2000535c 	.word	0x2000535c
 8009e74:	200053c4 	.word	0x200053c4

08009e78 <global_stdio_init.part.0>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ea8 <global_stdio_init.part.0+0x30>)
 8009e7c:	4c0b      	ldr	r4, [pc, #44]	; (8009eac <global_stdio_init.part.0+0x34>)
 8009e7e:	4a0c      	ldr	r2, [pc, #48]	; (8009eb0 <global_stdio_init.part.0+0x38>)
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	4620      	mov	r0, r4
 8009e84:	2200      	movs	r2, #0
 8009e86:	2104      	movs	r1, #4
 8009e88:	f7ff ff94 	bl	8009db4 <std>
 8009e8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e90:	2201      	movs	r2, #1
 8009e92:	2109      	movs	r1, #9
 8009e94:	f7ff ff8e 	bl	8009db4 <std>
 8009e98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea2:	2112      	movs	r1, #18
 8009ea4:	f7ff bf86 	b.w	8009db4 <std>
 8009ea8:	2000542c 	.word	0x2000542c
 8009eac:	200052f4 	.word	0x200052f4
 8009eb0:	08009e21 	.word	0x08009e21

08009eb4 <__sfp_lock_acquire>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__sfp_lock_acquire+0x8>)
 8009eb6:	f000 b976 	b.w	800a1a6 <__retarget_lock_acquire_recursive>
 8009eba:	bf00      	nop
 8009ebc:	20005435 	.word	0x20005435

08009ec0 <__sfp_lock_release>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	; (8009ec8 <__sfp_lock_release+0x8>)
 8009ec2:	f000 b971 	b.w	800a1a8 <__retarget_lock_release_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	20005435 	.word	0x20005435

08009ecc <__sinit>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	4604      	mov	r4, r0
 8009ed0:	f7ff fff0 	bl	8009eb4 <__sfp_lock_acquire>
 8009ed4:	6a23      	ldr	r3, [r4, #32]
 8009ed6:	b11b      	cbz	r3, 8009ee0 <__sinit+0x14>
 8009ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009edc:	f7ff bff0 	b.w	8009ec0 <__sfp_lock_release>
 8009ee0:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <__sinit+0x28>)
 8009ee2:	6223      	str	r3, [r4, #32]
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <__sinit+0x2c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f5      	bne.n	8009ed8 <__sinit+0xc>
 8009eec:	f7ff ffc4 	bl	8009e78 <global_stdio_init.part.0>
 8009ef0:	e7f2      	b.n	8009ed8 <__sinit+0xc>
 8009ef2:	bf00      	nop
 8009ef4:	08009e39 	.word	0x08009e39
 8009ef8:	2000542c 	.word	0x2000542c

08009efc <_fwalk_sglue>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	4607      	mov	r7, r0
 8009f02:	4688      	mov	r8, r1
 8009f04:	4614      	mov	r4, r2
 8009f06:	2600      	movs	r6, #0
 8009f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8009f10:	d505      	bpl.n	8009f1e <_fwalk_sglue+0x22>
 8009f12:	6824      	ldr	r4, [r4, #0]
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	d1f7      	bne.n	8009f08 <_fwalk_sglue+0xc>
 8009f18:	4630      	mov	r0, r6
 8009f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d907      	bls.n	8009f34 <_fwalk_sglue+0x38>
 8009f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	d003      	beq.n	8009f34 <_fwalk_sglue+0x38>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4638      	mov	r0, r7
 8009f30:	47c0      	blx	r8
 8009f32:	4306      	orrs	r6, r0
 8009f34:	3568      	adds	r5, #104	; 0x68
 8009f36:	e7e9      	b.n	8009f0c <_fwalk_sglue+0x10>

08009f38 <siprintf>:
 8009f38:	b40e      	push	{r1, r2, r3}
 8009f3a:	b500      	push	{lr}
 8009f3c:	b09c      	sub	sp, #112	; 0x70
 8009f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f40:	9002      	str	r0, [sp, #8]
 8009f42:	9006      	str	r0, [sp, #24]
 8009f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f48:	4809      	ldr	r0, [pc, #36]	; (8009f70 <siprintf+0x38>)
 8009f4a:	9107      	str	r1, [sp, #28]
 8009f4c:	9104      	str	r1, [sp, #16]
 8009f4e:	4909      	ldr	r1, [pc, #36]	; (8009f74 <siprintf+0x3c>)
 8009f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f54:	9105      	str	r1, [sp, #20]
 8009f56:	6800      	ldr	r0, [r0, #0]
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	a902      	add	r1, sp, #8
 8009f5c:	f001 fbfe 	bl	800b75c <_svfiprintf_r>
 8009f60:	9b02      	ldr	r3, [sp, #8]
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	b01c      	add	sp, #112	; 0x70
 8009f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f6c:	b003      	add	sp, #12
 8009f6e:	4770      	bx	lr
 8009f70:	20000094 	.word	0x20000094
 8009f74:	ffff0208 	.word	0xffff0208

08009f78 <__sread>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f80:	f000 f8c2 	bl	800a108 <_read_r>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	bfab      	itete	ge
 8009f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f8c:	181b      	addge	r3, r3, r0
 8009f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f92:	bfac      	ite	ge
 8009f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f96:	81a3      	strhlt	r3, [r4, #12]
 8009f98:	bd10      	pop	{r4, pc}

08009f9a <__swrite>:
 8009f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f9e:	461f      	mov	r7, r3
 8009fa0:	898b      	ldrh	r3, [r1, #12]
 8009fa2:	05db      	lsls	r3, r3, #23
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	4616      	mov	r6, r2
 8009faa:	d505      	bpl.n	8009fb8 <__swrite+0x1e>
 8009fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f000 f896 	bl	800a0e4 <_lseek_r>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	4628      	mov	r0, r5
 8009fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fce:	f000 b8ad 	b.w	800a12c <_write_r>

08009fd2 <__sseek>:
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fda:	f000 f883 	bl	800a0e4 <_lseek_r>
 8009fde:	1c43      	adds	r3, r0, #1
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	bf15      	itete	ne
 8009fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fee:	81a3      	strheq	r3, [r4, #12]
 8009ff0:	bf18      	it	ne
 8009ff2:	81a3      	strhne	r3, [r4, #12]
 8009ff4:	bd10      	pop	{r4, pc}

08009ff6 <__sclose>:
 8009ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffa:	f000 b80d 	b.w	800a018 <_close_r>

08009ffe <memset>:
 8009ffe:	4402      	add	r2, r0
 800a000:	4603      	mov	r3, r0
 800a002:	4293      	cmp	r3, r2
 800a004:	d100      	bne.n	800a008 <memset+0xa>
 800a006:	4770      	bx	lr
 800a008:	f803 1b01 	strb.w	r1, [r3], #1
 800a00c:	e7f9      	b.n	800a002 <memset+0x4>
	...

0800a010 <_localeconv_r>:
 800a010:	4800      	ldr	r0, [pc, #0]	; (800a014 <_localeconv_r+0x4>)
 800a012:	4770      	bx	lr
 800a014:	20000188 	.word	0x20000188

0800a018 <_close_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d06      	ldr	r5, [pc, #24]	; (800a034 <_close_r+0x1c>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7f7 fc6b 	bl	80018fe <_close>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_close_r+0x1a>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_close_r+0x1a>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	20005430 	.word	0x20005430

0800a038 <_reclaim_reent>:
 800a038:	4b29      	ldr	r3, [pc, #164]	; (800a0e0 <_reclaim_reent+0xa8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4283      	cmp	r3, r0
 800a03e:	b570      	push	{r4, r5, r6, lr}
 800a040:	4604      	mov	r4, r0
 800a042:	d04b      	beq.n	800a0dc <_reclaim_reent+0xa4>
 800a044:	69c3      	ldr	r3, [r0, #28]
 800a046:	b143      	cbz	r3, 800a05a <_reclaim_reent+0x22>
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d144      	bne.n	800a0d8 <_reclaim_reent+0xa0>
 800a04e:	69e3      	ldr	r3, [r4, #28]
 800a050:	6819      	ldr	r1, [r3, #0]
 800a052:	b111      	cbz	r1, 800a05a <_reclaim_reent+0x22>
 800a054:	4620      	mov	r0, r4
 800a056:	f000 feab 	bl	800adb0 <_free_r>
 800a05a:	6961      	ldr	r1, [r4, #20]
 800a05c:	b111      	cbz	r1, 800a064 <_reclaim_reent+0x2c>
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 fea6 	bl	800adb0 <_free_r>
 800a064:	69e1      	ldr	r1, [r4, #28]
 800a066:	b111      	cbz	r1, 800a06e <_reclaim_reent+0x36>
 800a068:	4620      	mov	r0, r4
 800a06a:	f000 fea1 	bl	800adb0 <_free_r>
 800a06e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a070:	b111      	cbz	r1, 800a078 <_reclaim_reent+0x40>
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fe9c 	bl	800adb0 <_free_r>
 800a078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07a:	b111      	cbz	r1, 800a082 <_reclaim_reent+0x4a>
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 fe97 	bl	800adb0 <_free_r>
 800a082:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a084:	b111      	cbz	r1, 800a08c <_reclaim_reent+0x54>
 800a086:	4620      	mov	r0, r4
 800a088:	f000 fe92 	bl	800adb0 <_free_r>
 800a08c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a08e:	b111      	cbz	r1, 800a096 <_reclaim_reent+0x5e>
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fe8d 	bl	800adb0 <_free_r>
 800a096:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a098:	b111      	cbz	r1, 800a0a0 <_reclaim_reent+0x68>
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 fe88 	bl	800adb0 <_free_r>
 800a0a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a0a2:	b111      	cbz	r1, 800a0aa <_reclaim_reent+0x72>
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 fe83 	bl	800adb0 <_free_r>
 800a0aa:	6a23      	ldr	r3, [r4, #32]
 800a0ac:	b1b3      	cbz	r3, 800a0dc <_reclaim_reent+0xa4>
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0b4:	4718      	bx	r3
 800a0b6:	5949      	ldr	r1, [r1, r5]
 800a0b8:	b941      	cbnz	r1, 800a0cc <_reclaim_reent+0x94>
 800a0ba:	3504      	adds	r5, #4
 800a0bc:	69e3      	ldr	r3, [r4, #28]
 800a0be:	2d80      	cmp	r5, #128	; 0x80
 800a0c0:	68d9      	ldr	r1, [r3, #12]
 800a0c2:	d1f8      	bne.n	800a0b6 <_reclaim_reent+0x7e>
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f000 fe73 	bl	800adb0 <_free_r>
 800a0ca:	e7c0      	b.n	800a04e <_reclaim_reent+0x16>
 800a0cc:	680e      	ldr	r6, [r1, #0]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fe6e 	bl	800adb0 <_free_r>
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	e7ef      	b.n	800a0b8 <_reclaim_reent+0x80>
 800a0d8:	2500      	movs	r5, #0
 800a0da:	e7ef      	b.n	800a0bc <_reclaim_reent+0x84>
 800a0dc:	bd70      	pop	{r4, r5, r6, pc}
 800a0de:	bf00      	nop
 800a0e0:	20000094 	.word	0x20000094

0800a0e4 <_lseek_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	; (800a104 <_lseek_r+0x20>)
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	602a      	str	r2, [r5, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f7f7 fc2a 	bl	800194c <_lseek>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_lseek_r+0x1e>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_lseek_r+0x1e>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20005430 	.word	0x20005430

0800a108 <_read_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d07      	ldr	r5, [pc, #28]	; (800a128 <_read_r+0x20>)
 800a10c:	4604      	mov	r4, r0
 800a10e:	4608      	mov	r0, r1
 800a110:	4611      	mov	r1, r2
 800a112:	2200      	movs	r2, #0
 800a114:	602a      	str	r2, [r5, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	f7f7 fbb8 	bl	800188c <_read>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_read_r+0x1e>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b103      	cbz	r3, 800a126 <_read_r+0x1e>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	20005430 	.word	0x20005430

0800a12c <_write_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4d07      	ldr	r5, [pc, #28]	; (800a14c <_write_r+0x20>)
 800a130:	4604      	mov	r4, r0
 800a132:	4608      	mov	r0, r1
 800a134:	4611      	mov	r1, r2
 800a136:	2200      	movs	r2, #0
 800a138:	602a      	str	r2, [r5, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	f7f7 fbc3 	bl	80018c6 <_write>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_write_r+0x1e>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_write_r+0x1e>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20005430 	.word	0x20005430

0800a150 <__errno>:
 800a150:	4b01      	ldr	r3, [pc, #4]	; (800a158 <__errno+0x8>)
 800a152:	6818      	ldr	r0, [r3, #0]
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20000094 	.word	0x20000094

0800a15c <__libc_init_array>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	4d0d      	ldr	r5, [pc, #52]	; (800a194 <__libc_init_array+0x38>)
 800a160:	4c0d      	ldr	r4, [pc, #52]	; (800a198 <__libc_init_array+0x3c>)
 800a162:	1b64      	subs	r4, r4, r5
 800a164:	10a4      	asrs	r4, r4, #2
 800a166:	2600      	movs	r6, #0
 800a168:	42a6      	cmp	r6, r4
 800a16a:	d109      	bne.n	800a180 <__libc_init_array+0x24>
 800a16c:	4d0b      	ldr	r5, [pc, #44]	; (800a19c <__libc_init_array+0x40>)
 800a16e:	4c0c      	ldr	r4, [pc, #48]	; (800a1a0 <__libc_init_array+0x44>)
 800a170:	f002 f80e 	bl	800c190 <_init>
 800a174:	1b64      	subs	r4, r4, r5
 800a176:	10a4      	asrs	r4, r4, #2
 800a178:	2600      	movs	r6, #0
 800a17a:	42a6      	cmp	r6, r4
 800a17c:	d105      	bne.n	800a18a <__libc_init_array+0x2e>
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	f855 3b04 	ldr.w	r3, [r5], #4
 800a184:	4798      	blx	r3
 800a186:	3601      	adds	r6, #1
 800a188:	e7ee      	b.n	800a168 <__libc_init_array+0xc>
 800a18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18e:	4798      	blx	r3
 800a190:	3601      	adds	r6, #1
 800a192:	e7f2      	b.n	800a17a <__libc_init_array+0x1e>
 800a194:	0800c7c4 	.word	0x0800c7c4
 800a198:	0800c7c4 	.word	0x0800c7c4
 800a19c:	0800c7c4 	.word	0x0800c7c4
 800a1a0:	0800c7c8 	.word	0x0800c7c8

0800a1a4 <__retarget_lock_init_recursive>:
 800a1a4:	4770      	bx	lr

0800a1a6 <__retarget_lock_acquire_recursive>:
 800a1a6:	4770      	bx	lr

0800a1a8 <__retarget_lock_release_recursive>:
 800a1a8:	4770      	bx	lr

0800a1aa <memcpy>:
 800a1aa:	440a      	add	r2, r1
 800a1ac:	4291      	cmp	r1, r2
 800a1ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1b2:	d100      	bne.n	800a1b6 <memcpy+0xc>
 800a1b4:	4770      	bx	lr
 800a1b6:	b510      	push	{r4, lr}
 800a1b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1c0:	4291      	cmp	r1, r2
 800a1c2:	d1f9      	bne.n	800a1b8 <memcpy+0xe>
 800a1c4:	bd10      	pop	{r4, pc}

0800a1c6 <quorem>:
 800a1c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	6903      	ldr	r3, [r0, #16]
 800a1cc:	690c      	ldr	r4, [r1, #16]
 800a1ce:	42a3      	cmp	r3, r4
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	db7e      	blt.n	800a2d2 <quorem+0x10c>
 800a1d4:	3c01      	subs	r4, #1
 800a1d6:	f101 0814 	add.w	r8, r1, #20
 800a1da:	f100 0514 	add.w	r5, r0, #20
 800a1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1fc:	d331      	bcc.n	800a262 <quorem+0x9c>
 800a1fe:	f04f 0e00 	mov.w	lr, #0
 800a202:	4640      	mov	r0, r8
 800a204:	46ac      	mov	ip, r5
 800a206:	46f2      	mov	sl, lr
 800a208:	f850 2b04 	ldr.w	r2, [r0], #4
 800a20c:	b293      	uxth	r3, r2
 800a20e:	fb06 e303 	mla	r3, r6, r3, lr
 800a212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a216:	0c1a      	lsrs	r2, r3, #16
 800a218:	b29b      	uxth	r3, r3
 800a21a:	ebaa 0303 	sub.w	r3, sl, r3
 800a21e:	f8dc a000 	ldr.w	sl, [ip]
 800a222:	fa13 f38a 	uxtah	r3, r3, sl
 800a226:	fb06 220e 	mla	r2, r6, lr, r2
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a232:	b292      	uxth	r2, r2
 800a234:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a23c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a240:	4581      	cmp	r9, r0
 800a242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a246:	f84c 3b04 	str.w	r3, [ip], #4
 800a24a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a24e:	d2db      	bcs.n	800a208 <quorem+0x42>
 800a250:	f855 300b 	ldr.w	r3, [r5, fp]
 800a254:	b92b      	cbnz	r3, 800a262 <quorem+0x9c>
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	3b04      	subs	r3, #4
 800a25a:	429d      	cmp	r5, r3
 800a25c:	461a      	mov	r2, r3
 800a25e:	d32c      	bcc.n	800a2ba <quorem+0xf4>
 800a260:	613c      	str	r4, [r7, #16]
 800a262:	4638      	mov	r0, r7
 800a264:	f001 f920 	bl	800b4a8 <__mcmp>
 800a268:	2800      	cmp	r0, #0
 800a26a:	db22      	blt.n	800a2b2 <quorem+0xec>
 800a26c:	3601      	adds	r6, #1
 800a26e:	4629      	mov	r1, r5
 800a270:	2000      	movs	r0, #0
 800a272:	f858 2b04 	ldr.w	r2, [r8], #4
 800a276:	f8d1 c000 	ldr.w	ip, [r1]
 800a27a:	b293      	uxth	r3, r2
 800a27c:	1ac3      	subs	r3, r0, r3
 800a27e:	0c12      	lsrs	r2, r2, #16
 800a280:	fa13 f38c 	uxtah	r3, r3, ip
 800a284:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a292:	45c1      	cmp	r9, r8
 800a294:	f841 3b04 	str.w	r3, [r1], #4
 800a298:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a29c:	d2e9      	bcs.n	800a272 <quorem+0xac>
 800a29e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2a6:	b922      	cbnz	r2, 800a2b2 <quorem+0xec>
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	429d      	cmp	r5, r3
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	d30a      	bcc.n	800a2c6 <quorem+0x100>
 800a2b0:	613c      	str	r4, [r7, #16]
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	b003      	add	sp, #12
 800a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ba:	6812      	ldr	r2, [r2, #0]
 800a2bc:	3b04      	subs	r3, #4
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	d1ce      	bne.n	800a260 <quorem+0x9a>
 800a2c2:	3c01      	subs	r4, #1
 800a2c4:	e7c9      	b.n	800a25a <quorem+0x94>
 800a2c6:	6812      	ldr	r2, [r2, #0]
 800a2c8:	3b04      	subs	r3, #4
 800a2ca:	2a00      	cmp	r2, #0
 800a2cc:	d1f0      	bne.n	800a2b0 <quorem+0xea>
 800a2ce:	3c01      	subs	r4, #1
 800a2d0:	e7eb      	b.n	800a2aa <quorem+0xe4>
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e7ee      	b.n	800a2b4 <quorem+0xee>
	...

0800a2d8 <_dtoa_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	ed2d 8b02 	vpush	{d8}
 800a2e0:	69c5      	ldr	r5, [r0, #28]
 800a2e2:	b091      	sub	sp, #68	; 0x44
 800a2e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2e8:	ec59 8b10 	vmov	r8, r9, d0
 800a2ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a2ee:	9106      	str	r1, [sp, #24]
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	9208      	str	r2, [sp, #32]
 800a2f4:	930c      	str	r3, [sp, #48]	; 0x30
 800a2f6:	b975      	cbnz	r5, 800a316 <_dtoa_r+0x3e>
 800a2f8:	2010      	movs	r0, #16
 800a2fa:	f000 fda5 	bl	800ae48 <malloc>
 800a2fe:	4602      	mov	r2, r0
 800a300:	61f0      	str	r0, [r6, #28]
 800a302:	b920      	cbnz	r0, 800a30e <_dtoa_r+0x36>
 800a304:	4ba6      	ldr	r3, [pc, #664]	; (800a5a0 <_dtoa_r+0x2c8>)
 800a306:	21ef      	movs	r1, #239	; 0xef
 800a308:	48a6      	ldr	r0, [pc, #664]	; (800a5a4 <_dtoa_r+0x2cc>)
 800a30a:	f001 fbfd 	bl	800bb08 <__assert_func>
 800a30e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a312:	6005      	str	r5, [r0, #0]
 800a314:	60c5      	str	r5, [r0, #12]
 800a316:	69f3      	ldr	r3, [r6, #28]
 800a318:	6819      	ldr	r1, [r3, #0]
 800a31a:	b151      	cbz	r1, 800a332 <_dtoa_r+0x5a>
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	604a      	str	r2, [r1, #4]
 800a320:	2301      	movs	r3, #1
 800a322:	4093      	lsls	r3, r2
 800a324:	608b      	str	r3, [r1, #8]
 800a326:	4630      	mov	r0, r6
 800a328:	f000 fe82 	bl	800b030 <_Bfree>
 800a32c:	69f3      	ldr	r3, [r6, #28]
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	f1b9 0300 	subs.w	r3, r9, #0
 800a336:	bfbb      	ittet	lt
 800a338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a33c:	9303      	strlt	r3, [sp, #12]
 800a33e:	2300      	movge	r3, #0
 800a340:	2201      	movlt	r2, #1
 800a342:	bfac      	ite	ge
 800a344:	6023      	strge	r3, [r4, #0]
 800a346:	6022      	strlt	r2, [r4, #0]
 800a348:	4b97      	ldr	r3, [pc, #604]	; (800a5a8 <_dtoa_r+0x2d0>)
 800a34a:	9c03      	ldr	r4, [sp, #12]
 800a34c:	43a3      	bics	r3, r4
 800a34e:	d11c      	bne.n	800a38a <_dtoa_r+0xb2>
 800a350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a352:	f242 730f 	movw	r3, #9999	; 0x270f
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a35c:	ea53 0308 	orrs.w	r3, r3, r8
 800a360:	f000 84fb 	beq.w	800ad5a <_dtoa_r+0xa82>
 800a364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a366:	b963      	cbnz	r3, 800a382 <_dtoa_r+0xaa>
 800a368:	4b90      	ldr	r3, [pc, #576]	; (800a5ac <_dtoa_r+0x2d4>)
 800a36a:	e020      	b.n	800a3ae <_dtoa_r+0xd6>
 800a36c:	4b90      	ldr	r3, [pc, #576]	; (800a5b0 <_dtoa_r+0x2d8>)
 800a36e:	9301      	str	r3, [sp, #4]
 800a370:	3308      	adds	r3, #8
 800a372:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	9801      	ldr	r0, [sp, #4]
 800a378:	b011      	add	sp, #68	; 0x44
 800a37a:	ecbd 8b02 	vpop	{d8}
 800a37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a382:	4b8a      	ldr	r3, [pc, #552]	; (800a5ac <_dtoa_r+0x2d4>)
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	3303      	adds	r3, #3
 800a388:	e7f3      	b.n	800a372 <_dtoa_r+0x9a>
 800a38a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a38e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a396:	d10c      	bne.n	800a3b2 <_dtoa_r+0xda>
 800a398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39a:	2301      	movs	r3, #1
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 84d7 	beq.w	800ad54 <_dtoa_r+0xa7c>
 800a3a6:	4b83      	ldr	r3, [pc, #524]	; (800a5b4 <_dtoa_r+0x2dc>)
 800a3a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a3aa:	6013      	str	r3, [r2, #0]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	e7e1      	b.n	800a376 <_dtoa_r+0x9e>
 800a3b2:	aa0e      	add	r2, sp, #56	; 0x38
 800a3b4:	a90f      	add	r1, sp, #60	; 0x3c
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	eeb0 0b48 	vmov.f64	d0, d8
 800a3bc:	f001 f91a 	bl	800b5f4 <__d2b>
 800a3c0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a3c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d046      	beq.n	800a45a <_dtoa_r+0x182>
 800a3cc:	eeb0 7b48 	vmov.f64	d7, d8
 800a3d0:	ee18 1a90 	vmov	r1, s17
 800a3d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a3d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a3dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a3e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	ee07 1a90 	vmov	s15, r1
 800a3ea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a3ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a588 <_dtoa_r+0x2b0>
 800a3f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a3f6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a590 <_dtoa_r+0x2b8>
 800a3fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a3fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a598 <_dtoa_r+0x2c0>
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a40a:	eeb0 7b46 	vmov.f64	d7, d6
 800a40e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a412:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a416:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41e:	ee16 ba90 	vmov	fp, s13
 800a422:	9009      	str	r0, [sp, #36]	; 0x24
 800a424:	d508      	bpl.n	800a438 <_dtoa_r+0x160>
 800a426:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a42a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a432:	bf18      	it	ne
 800a434:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a438:	f1bb 0f16 	cmp.w	fp, #22
 800a43c:	d82b      	bhi.n	800a496 <_dtoa_r+0x1be>
 800a43e:	495e      	ldr	r1, [pc, #376]	; (800a5b8 <_dtoa_r+0x2e0>)
 800a440:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a444:	ed91 7b00 	vldr	d7, [r1]
 800a448:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a450:	d501      	bpl.n	800a456 <_dtoa_r+0x17e>
 800a452:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a456:	2100      	movs	r1, #0
 800a458:	e01e      	b.n	800a498 <_dtoa_r+0x1c0>
 800a45a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a45c:	4413      	add	r3, r2
 800a45e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a462:	2920      	cmp	r1, #32
 800a464:	bfc1      	itttt	gt
 800a466:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a46a:	408c      	lslgt	r4, r1
 800a46c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a470:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a474:	bfd6      	itet	le
 800a476:	f1c1 0120 	rsble	r1, r1, #32
 800a47a:	4321      	orrgt	r1, r4
 800a47c:	fa08 f101 	lslle.w	r1, r8, r1
 800a480:	ee07 1a90 	vmov	s15, r1
 800a484:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a488:	3b01      	subs	r3, #1
 800a48a:	ee17 1a90 	vmov	r1, s15
 800a48e:	2001      	movs	r0, #1
 800a490:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a494:	e7a7      	b.n	800a3e6 <_dtoa_r+0x10e>
 800a496:	2101      	movs	r1, #1
 800a498:	1ad2      	subs	r2, r2, r3
 800a49a:	1e53      	subs	r3, r2, #1
 800a49c:	9305      	str	r3, [sp, #20]
 800a49e:	bf45      	ittet	mi
 800a4a0:	f1c2 0301 	rsbmi	r3, r2, #1
 800a4a4:	9304      	strmi	r3, [sp, #16]
 800a4a6:	2300      	movpl	r3, #0
 800a4a8:	2300      	movmi	r3, #0
 800a4aa:	bf4c      	ite	mi
 800a4ac:	9305      	strmi	r3, [sp, #20]
 800a4ae:	9304      	strpl	r3, [sp, #16]
 800a4b0:	f1bb 0f00 	cmp.w	fp, #0
 800a4b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4b6:	db18      	blt.n	800a4ea <_dtoa_r+0x212>
 800a4b8:	9b05      	ldr	r3, [sp, #20]
 800a4ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a4be:	445b      	add	r3, fp
 800a4c0:	9305      	str	r3, [sp, #20]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9a06      	ldr	r2, [sp, #24]
 800a4c6:	2a09      	cmp	r2, #9
 800a4c8:	d848      	bhi.n	800a55c <_dtoa_r+0x284>
 800a4ca:	2a05      	cmp	r2, #5
 800a4cc:	bfc4      	itt	gt
 800a4ce:	3a04      	subgt	r2, #4
 800a4d0:	9206      	strgt	r2, [sp, #24]
 800a4d2:	9a06      	ldr	r2, [sp, #24]
 800a4d4:	f1a2 0202 	sub.w	r2, r2, #2
 800a4d8:	bfcc      	ite	gt
 800a4da:	2400      	movgt	r4, #0
 800a4dc:	2401      	movle	r4, #1
 800a4de:	2a03      	cmp	r2, #3
 800a4e0:	d847      	bhi.n	800a572 <_dtoa_r+0x29a>
 800a4e2:	e8df f002 	tbb	[pc, r2]
 800a4e6:	2d0b      	.short	0x2d0b
 800a4e8:	392b      	.short	0x392b
 800a4ea:	9b04      	ldr	r3, [sp, #16]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	eba3 030b 	sub.w	r3, r3, fp
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	920a      	str	r2, [sp, #40]	; 0x28
 800a4f6:	f1cb 0300 	rsb	r3, fp, #0
 800a4fa:	e7e3      	b.n	800a4c4 <_dtoa_r+0x1ec>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	9207      	str	r2, [sp, #28]
 800a500:	9a08      	ldr	r2, [sp, #32]
 800a502:	2a00      	cmp	r2, #0
 800a504:	dc38      	bgt.n	800a578 <_dtoa_r+0x2a0>
 800a506:	f04f 0a01 	mov.w	sl, #1
 800a50a:	46d1      	mov	r9, sl
 800a50c:	4652      	mov	r2, sl
 800a50e:	f8cd a020 	str.w	sl, [sp, #32]
 800a512:	69f7      	ldr	r7, [r6, #28]
 800a514:	2100      	movs	r1, #0
 800a516:	2004      	movs	r0, #4
 800a518:	f100 0c14 	add.w	ip, r0, #20
 800a51c:	4594      	cmp	ip, r2
 800a51e:	d930      	bls.n	800a582 <_dtoa_r+0x2aa>
 800a520:	6079      	str	r1, [r7, #4]
 800a522:	4630      	mov	r0, r6
 800a524:	930d      	str	r3, [sp, #52]	; 0x34
 800a526:	f000 fd43 	bl	800afb0 <_Balloc>
 800a52a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a52c:	9001      	str	r0, [sp, #4]
 800a52e:	4602      	mov	r2, r0
 800a530:	2800      	cmp	r0, #0
 800a532:	d145      	bne.n	800a5c0 <_dtoa_r+0x2e8>
 800a534:	4b21      	ldr	r3, [pc, #132]	; (800a5bc <_dtoa_r+0x2e4>)
 800a536:	f240 11af 	movw	r1, #431	; 0x1af
 800a53a:	e6e5      	b.n	800a308 <_dtoa_r+0x30>
 800a53c:	2201      	movs	r2, #1
 800a53e:	e7de      	b.n	800a4fe <_dtoa_r+0x226>
 800a540:	2200      	movs	r2, #0
 800a542:	9207      	str	r2, [sp, #28]
 800a544:	9a08      	ldr	r2, [sp, #32]
 800a546:	eb0b 0a02 	add.w	sl, fp, r2
 800a54a:	f10a 0901 	add.w	r9, sl, #1
 800a54e:	464a      	mov	r2, r9
 800a550:	2a01      	cmp	r2, #1
 800a552:	bfb8      	it	lt
 800a554:	2201      	movlt	r2, #1
 800a556:	e7dc      	b.n	800a512 <_dtoa_r+0x23a>
 800a558:	2201      	movs	r2, #1
 800a55a:	e7f2      	b.n	800a542 <_dtoa_r+0x26a>
 800a55c:	2401      	movs	r4, #1
 800a55e:	2200      	movs	r2, #0
 800a560:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a564:	f04f 3aff 	mov.w	sl, #4294967295
 800a568:	2100      	movs	r1, #0
 800a56a:	46d1      	mov	r9, sl
 800a56c:	2212      	movs	r2, #18
 800a56e:	9108      	str	r1, [sp, #32]
 800a570:	e7cf      	b.n	800a512 <_dtoa_r+0x23a>
 800a572:	2201      	movs	r2, #1
 800a574:	9207      	str	r2, [sp, #28]
 800a576:	e7f5      	b.n	800a564 <_dtoa_r+0x28c>
 800a578:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a57c:	46d1      	mov	r9, sl
 800a57e:	4652      	mov	r2, sl
 800a580:	e7c7      	b.n	800a512 <_dtoa_r+0x23a>
 800a582:	3101      	adds	r1, #1
 800a584:	0040      	lsls	r0, r0, #1
 800a586:	e7c7      	b.n	800a518 <_dtoa_r+0x240>
 800a588:	636f4361 	.word	0x636f4361
 800a58c:	3fd287a7 	.word	0x3fd287a7
 800a590:	8b60c8b3 	.word	0x8b60c8b3
 800a594:	3fc68a28 	.word	0x3fc68a28
 800a598:	509f79fb 	.word	0x509f79fb
 800a59c:	3fd34413 	.word	0x3fd34413
 800a5a0:	0800c48d 	.word	0x0800c48d
 800a5a4:	0800c4a4 	.word	0x0800c4a4
 800a5a8:	7ff00000 	.word	0x7ff00000
 800a5ac:	0800c489 	.word	0x0800c489
 800a5b0:	0800c480 	.word	0x0800c480
 800a5b4:	0800c45d 	.word	0x0800c45d
 800a5b8:	0800c590 	.word	0x0800c590
 800a5bc:	0800c4fc 	.word	0x0800c4fc
 800a5c0:	69f2      	ldr	r2, [r6, #28]
 800a5c2:	9901      	ldr	r1, [sp, #4]
 800a5c4:	6011      	str	r1, [r2, #0]
 800a5c6:	f1b9 0f0e 	cmp.w	r9, #14
 800a5ca:	d86c      	bhi.n	800a6a6 <_dtoa_r+0x3ce>
 800a5cc:	2c00      	cmp	r4, #0
 800a5ce:	d06a      	beq.n	800a6a6 <_dtoa_r+0x3ce>
 800a5d0:	f1bb 0f00 	cmp.w	fp, #0
 800a5d4:	f340 80a0 	ble.w	800a718 <_dtoa_r+0x440>
 800a5d8:	4ac1      	ldr	r2, [pc, #772]	; (800a8e0 <_dtoa_r+0x608>)
 800a5da:	f00b 010f 	and.w	r1, fp, #15
 800a5de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a5e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a5e6:	ed92 7b00 	vldr	d7, [r2]
 800a5ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a5ee:	f000 8087 	beq.w	800a700 <_dtoa_r+0x428>
 800a5f2:	49bc      	ldr	r1, [pc, #752]	; (800a8e4 <_dtoa_r+0x60c>)
 800a5f4:	ed91 6b08 	vldr	d6, [r1, #32]
 800a5f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a5fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a600:	f002 020f 	and.w	r2, r2, #15
 800a604:	2103      	movs	r1, #3
 800a606:	48b7      	ldr	r0, [pc, #732]	; (800a8e4 <_dtoa_r+0x60c>)
 800a608:	2a00      	cmp	r2, #0
 800a60a:	d17b      	bne.n	800a704 <_dtoa_r+0x42c>
 800a60c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a610:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a614:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a61a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a61e:	2a00      	cmp	r2, #0
 800a620:	f000 80a0 	beq.w	800a764 <_dtoa_r+0x48c>
 800a624:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a628:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a630:	f140 8098 	bpl.w	800a764 <_dtoa_r+0x48c>
 800a634:	f1b9 0f00 	cmp.w	r9, #0
 800a638:	f000 8094 	beq.w	800a764 <_dtoa_r+0x48c>
 800a63c:	f1ba 0f00 	cmp.w	sl, #0
 800a640:	dd2f      	ble.n	800a6a2 <_dtoa_r+0x3ca>
 800a642:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a646:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a64a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a64e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a652:	3101      	adds	r1, #1
 800a654:	4654      	mov	r4, sl
 800a656:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a65a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a65e:	ee07 1a90 	vmov	s15, r1
 800a662:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a666:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a66a:	ee15 7a90 	vmov	r7, s11
 800a66e:	ec51 0b15 	vmov	r0, r1, d5
 800a672:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a676:	2c00      	cmp	r4, #0
 800a678:	d177      	bne.n	800a76a <_dtoa_r+0x492>
 800a67a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a67e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a682:	ec41 0b17 	vmov	d7, r0, r1
 800a686:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68e:	f300 826a 	bgt.w	800ab66 <_dtoa_r+0x88e>
 800a692:	eeb1 7b47 	vneg.f64	d7, d7
 800a696:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69e:	f100 8260 	bmi.w	800ab62 <_dtoa_r+0x88a>
 800a6a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a6a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	f2c0 811d 	blt.w	800a8e8 <_dtoa_r+0x610>
 800a6ae:	f1bb 0f0e 	cmp.w	fp, #14
 800a6b2:	f300 8119 	bgt.w	800a8e8 <_dtoa_r+0x610>
 800a6b6:	4b8a      	ldr	r3, [pc, #552]	; (800a8e0 <_dtoa_r+0x608>)
 800a6b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6bc:	ed93 6b00 	vldr	d6, [r3]
 800a6c0:	9b08      	ldr	r3, [sp, #32]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f280 80b7 	bge.w	800a836 <_dtoa_r+0x55e>
 800a6c8:	f1b9 0f00 	cmp.w	r9, #0
 800a6cc:	f300 80b3 	bgt.w	800a836 <_dtoa_r+0x55e>
 800a6d0:	f040 8246 	bne.w	800ab60 <_dtoa_r+0x888>
 800a6d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a6d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a6dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e8:	464c      	mov	r4, r9
 800a6ea:	464f      	mov	r7, r9
 800a6ec:	f280 821c 	bge.w	800ab28 <_dtoa_r+0x850>
 800a6f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6f4:	2331      	movs	r3, #49	; 0x31
 800a6f6:	f808 3b01 	strb.w	r3, [r8], #1
 800a6fa:	f10b 0b01 	add.w	fp, fp, #1
 800a6fe:	e218      	b.n	800ab32 <_dtoa_r+0x85a>
 800a700:	2102      	movs	r1, #2
 800a702:	e780      	b.n	800a606 <_dtoa_r+0x32e>
 800a704:	07d4      	lsls	r4, r2, #31
 800a706:	d504      	bpl.n	800a712 <_dtoa_r+0x43a>
 800a708:	ed90 6b00 	vldr	d6, [r0]
 800a70c:	3101      	adds	r1, #1
 800a70e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a712:	1052      	asrs	r2, r2, #1
 800a714:	3008      	adds	r0, #8
 800a716:	e777      	b.n	800a608 <_dtoa_r+0x330>
 800a718:	d022      	beq.n	800a760 <_dtoa_r+0x488>
 800a71a:	f1cb 0200 	rsb	r2, fp, #0
 800a71e:	4970      	ldr	r1, [pc, #448]	; (800a8e0 <_dtoa_r+0x608>)
 800a720:	f002 000f 	and.w	r0, r2, #15
 800a724:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a728:	ed91 7b00 	vldr	d7, [r1]
 800a72c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a730:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a734:	486b      	ldr	r0, [pc, #428]	; (800a8e4 <_dtoa_r+0x60c>)
 800a736:	1112      	asrs	r2, r2, #4
 800a738:	2400      	movs	r4, #0
 800a73a:	2102      	movs	r1, #2
 800a73c:	b92a      	cbnz	r2, 800a74a <_dtoa_r+0x472>
 800a73e:	2c00      	cmp	r4, #0
 800a740:	f43f af6a 	beq.w	800a618 <_dtoa_r+0x340>
 800a744:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a748:	e766      	b.n	800a618 <_dtoa_r+0x340>
 800a74a:	07d7      	lsls	r7, r2, #31
 800a74c:	d505      	bpl.n	800a75a <_dtoa_r+0x482>
 800a74e:	ed90 6b00 	vldr	d6, [r0]
 800a752:	3101      	adds	r1, #1
 800a754:	2401      	movs	r4, #1
 800a756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a75a:	1052      	asrs	r2, r2, #1
 800a75c:	3008      	adds	r0, #8
 800a75e:	e7ed      	b.n	800a73c <_dtoa_r+0x464>
 800a760:	2102      	movs	r1, #2
 800a762:	e759      	b.n	800a618 <_dtoa_r+0x340>
 800a764:	465a      	mov	r2, fp
 800a766:	464c      	mov	r4, r9
 800a768:	e775      	b.n	800a656 <_dtoa_r+0x37e>
 800a76a:	ec41 0b17 	vmov	d7, r0, r1
 800a76e:	495c      	ldr	r1, [pc, #368]	; (800a8e0 <_dtoa_r+0x608>)
 800a770:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a774:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a778:	9901      	ldr	r1, [sp, #4]
 800a77a:	440c      	add	r4, r1
 800a77c:	9907      	ldr	r1, [sp, #28]
 800a77e:	b351      	cbz	r1, 800a7d6 <_dtoa_r+0x4fe>
 800a780:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a784:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a788:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a78c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a790:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a794:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a798:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a79c:	ee14 1a90 	vmov	r1, s9
 800a7a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7a4:	3130      	adds	r1, #48	; 0x30
 800a7a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b2:	f808 1b01 	strb.w	r1, [r8], #1
 800a7b6:	d439      	bmi.n	800a82c <_dtoa_r+0x554>
 800a7b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a7bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c4:	d472      	bmi.n	800a8ac <_dtoa_r+0x5d4>
 800a7c6:	45a0      	cmp	r8, r4
 800a7c8:	f43f af6b 	beq.w	800a6a2 <_dtoa_r+0x3ca>
 800a7cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a7d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a7d4:	e7e0      	b.n	800a798 <_dtoa_r+0x4c0>
 800a7d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a7da:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a7de:	4620      	mov	r0, r4
 800a7e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a7e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a7e8:	ee14 1a90 	vmov	r1, s9
 800a7ec:	3130      	adds	r1, #48	; 0x30
 800a7ee:	f808 1b01 	strb.w	r1, [r8], #1
 800a7f2:	45a0      	cmp	r8, r4
 800a7f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7fc:	d118      	bne.n	800a830 <_dtoa_r+0x558>
 800a7fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a802:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a806:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80e:	dc4d      	bgt.n	800a8ac <_dtoa_r+0x5d4>
 800a810:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a814:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81c:	f57f af41 	bpl.w	800a6a2 <_dtoa_r+0x3ca>
 800a820:	4680      	mov	r8, r0
 800a822:	3801      	subs	r0, #1
 800a824:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a828:	2b30      	cmp	r3, #48	; 0x30
 800a82a:	d0f9      	beq.n	800a820 <_dtoa_r+0x548>
 800a82c:	4693      	mov	fp, r2
 800a82e:	e02a      	b.n	800a886 <_dtoa_r+0x5ae>
 800a830:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a834:	e7d6      	b.n	800a7e4 <_dtoa_r+0x50c>
 800a836:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a83a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a83e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a842:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a846:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a84a:	ee15 3a10 	vmov	r3, s10
 800a84e:	3330      	adds	r3, #48	; 0x30
 800a850:	f808 3b01 	strb.w	r3, [r8], #1
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	eba8 0303 	sub.w	r3, r8, r3
 800a85a:	4599      	cmp	r9, r3
 800a85c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a860:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a864:	d133      	bne.n	800a8ce <_dtoa_r+0x5f6>
 800a866:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a86a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a872:	dc1a      	bgt.n	800a8aa <_dtoa_r+0x5d2>
 800a874:	eeb4 7b46 	vcmp.f64	d7, d6
 800a878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87c:	d103      	bne.n	800a886 <_dtoa_r+0x5ae>
 800a87e:	ee15 3a10 	vmov	r3, s10
 800a882:	07d9      	lsls	r1, r3, #31
 800a884:	d411      	bmi.n	800a8aa <_dtoa_r+0x5d2>
 800a886:	4629      	mov	r1, r5
 800a888:	4630      	mov	r0, r6
 800a88a:	f000 fbd1 	bl	800b030 <_Bfree>
 800a88e:	2300      	movs	r3, #0
 800a890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a892:	f888 3000 	strb.w	r3, [r8]
 800a896:	f10b 0301 	add.w	r3, fp, #1
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f43f ad69 	beq.w	800a376 <_dtoa_r+0x9e>
 800a8a4:	f8c3 8000 	str.w	r8, [r3]
 800a8a8:	e565      	b.n	800a376 <_dtoa_r+0x9e>
 800a8aa:	465a      	mov	r2, fp
 800a8ac:	4643      	mov	r3, r8
 800a8ae:	4698      	mov	r8, r3
 800a8b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a8b4:	2939      	cmp	r1, #57	; 0x39
 800a8b6:	d106      	bne.n	800a8c6 <_dtoa_r+0x5ee>
 800a8b8:	9901      	ldr	r1, [sp, #4]
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	d1f7      	bne.n	800a8ae <_dtoa_r+0x5d6>
 800a8be:	9801      	ldr	r0, [sp, #4]
 800a8c0:	2130      	movs	r1, #48	; 0x30
 800a8c2:	3201      	adds	r2, #1
 800a8c4:	7001      	strb	r1, [r0, #0]
 800a8c6:	7819      	ldrb	r1, [r3, #0]
 800a8c8:	3101      	adds	r1, #1
 800a8ca:	7019      	strb	r1, [r3, #0]
 800a8cc:	e7ae      	b.n	800a82c <_dtoa_r+0x554>
 800a8ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a8d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8da:	d1b2      	bne.n	800a842 <_dtoa_r+0x56a>
 800a8dc:	e7d3      	b.n	800a886 <_dtoa_r+0x5ae>
 800a8de:	bf00      	nop
 800a8e0:	0800c590 	.word	0x0800c590
 800a8e4:	0800c568 	.word	0x0800c568
 800a8e8:	9907      	ldr	r1, [sp, #28]
 800a8ea:	2900      	cmp	r1, #0
 800a8ec:	f000 80d0 	beq.w	800aa90 <_dtoa_r+0x7b8>
 800a8f0:	9906      	ldr	r1, [sp, #24]
 800a8f2:	2901      	cmp	r1, #1
 800a8f4:	f300 80b4 	bgt.w	800aa60 <_dtoa_r+0x788>
 800a8f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8fa:	2900      	cmp	r1, #0
 800a8fc:	f000 80ac 	beq.w	800aa58 <_dtoa_r+0x780>
 800a900:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a904:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a908:	461c      	mov	r4, r3
 800a90a:	9309      	str	r3, [sp, #36]	; 0x24
 800a90c:	9b04      	ldr	r3, [sp, #16]
 800a90e:	4413      	add	r3, r2
 800a910:	9304      	str	r3, [sp, #16]
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	2101      	movs	r1, #1
 800a916:	4413      	add	r3, r2
 800a918:	4630      	mov	r0, r6
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	f000 fc3e 	bl	800b19c <__i2b>
 800a920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a922:	4607      	mov	r7, r0
 800a924:	f1b8 0f00 	cmp.w	r8, #0
 800a928:	d00d      	beq.n	800a946 <_dtoa_r+0x66e>
 800a92a:	9a05      	ldr	r2, [sp, #20]
 800a92c:	2a00      	cmp	r2, #0
 800a92e:	dd0a      	ble.n	800a946 <_dtoa_r+0x66e>
 800a930:	4542      	cmp	r2, r8
 800a932:	9904      	ldr	r1, [sp, #16]
 800a934:	bfa8      	it	ge
 800a936:	4642      	movge	r2, r8
 800a938:	1a89      	subs	r1, r1, r2
 800a93a:	9104      	str	r1, [sp, #16]
 800a93c:	9905      	ldr	r1, [sp, #20]
 800a93e:	eba8 0802 	sub.w	r8, r8, r2
 800a942:	1a8a      	subs	r2, r1, r2
 800a944:	9205      	str	r2, [sp, #20]
 800a946:	b303      	cbz	r3, 800a98a <_dtoa_r+0x6b2>
 800a948:	9a07      	ldr	r2, [sp, #28]
 800a94a:	2a00      	cmp	r2, #0
 800a94c:	f000 80a5 	beq.w	800aa9a <_dtoa_r+0x7c2>
 800a950:	2c00      	cmp	r4, #0
 800a952:	dd13      	ble.n	800a97c <_dtoa_r+0x6a4>
 800a954:	4639      	mov	r1, r7
 800a956:	4622      	mov	r2, r4
 800a958:	4630      	mov	r0, r6
 800a95a:	930d      	str	r3, [sp, #52]	; 0x34
 800a95c:	f000 fcde 	bl	800b31c <__pow5mult>
 800a960:	462a      	mov	r2, r5
 800a962:	4601      	mov	r1, r0
 800a964:	4607      	mov	r7, r0
 800a966:	4630      	mov	r0, r6
 800a968:	f000 fc2e 	bl	800b1c8 <__multiply>
 800a96c:	4629      	mov	r1, r5
 800a96e:	9009      	str	r0, [sp, #36]	; 0x24
 800a970:	4630      	mov	r0, r6
 800a972:	f000 fb5d 	bl	800b030 <_Bfree>
 800a976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a97a:	4615      	mov	r5, r2
 800a97c:	1b1a      	subs	r2, r3, r4
 800a97e:	d004      	beq.n	800a98a <_dtoa_r+0x6b2>
 800a980:	4629      	mov	r1, r5
 800a982:	4630      	mov	r0, r6
 800a984:	f000 fcca 	bl	800b31c <__pow5mult>
 800a988:	4605      	mov	r5, r0
 800a98a:	2101      	movs	r1, #1
 800a98c:	4630      	mov	r0, r6
 800a98e:	f000 fc05 	bl	800b19c <__i2b>
 800a992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a994:	2b00      	cmp	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	f340 8081 	ble.w	800aa9e <_dtoa_r+0x7c6>
 800a99c:	461a      	mov	r2, r3
 800a99e:	4601      	mov	r1, r0
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f000 fcbb 	bl	800b31c <__pow5mult>
 800a9a6:	9b06      	ldr	r3, [sp, #24]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	dd7a      	ble.n	800aaa4 <_dtoa_r+0x7cc>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b2:	6922      	ldr	r2, [r4, #16]
 800a9b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9b8:	6910      	ldr	r0, [r2, #16]
 800a9ba:	f000 fba1 	bl	800b100 <__hi0bits>
 800a9be:	f1c0 0020 	rsb	r0, r0, #32
 800a9c2:	9b05      	ldr	r3, [sp, #20]
 800a9c4:	4418      	add	r0, r3
 800a9c6:	f010 001f 	ands.w	r0, r0, #31
 800a9ca:	f000 8093 	beq.w	800aaf4 <_dtoa_r+0x81c>
 800a9ce:	f1c0 0220 	rsb	r2, r0, #32
 800a9d2:	2a04      	cmp	r2, #4
 800a9d4:	f340 8085 	ble.w	800aae2 <_dtoa_r+0x80a>
 800a9d8:	9b04      	ldr	r3, [sp, #16]
 800a9da:	f1c0 001c 	rsb	r0, r0, #28
 800a9de:	4403      	add	r3, r0
 800a9e0:	9304      	str	r3, [sp, #16]
 800a9e2:	9b05      	ldr	r3, [sp, #20]
 800a9e4:	4480      	add	r8, r0
 800a9e6:	4403      	add	r3, r0
 800a9e8:	9305      	str	r3, [sp, #20]
 800a9ea:	9b04      	ldr	r3, [sp, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	dd05      	ble.n	800a9fc <_dtoa_r+0x724>
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f000 fceb 	bl	800b3d0 <__lshift>
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	9b05      	ldr	r3, [sp, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dd05      	ble.n	800aa0e <_dtoa_r+0x736>
 800aa02:	4621      	mov	r1, r4
 800aa04:	461a      	mov	r2, r3
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 fce2 	bl	800b3d0 <__lshift>
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d071      	beq.n	800aaf8 <_dtoa_r+0x820>
 800aa14:	4621      	mov	r1, r4
 800aa16:	4628      	mov	r0, r5
 800aa18:	f000 fd46 	bl	800b4a8 <__mcmp>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	da6b      	bge.n	800aaf8 <_dtoa_r+0x820>
 800aa20:	2300      	movs	r3, #0
 800aa22:	4629      	mov	r1, r5
 800aa24:	220a      	movs	r2, #10
 800aa26:	4630      	mov	r0, r6
 800aa28:	f000 fb24 	bl	800b074 <__multadd>
 800aa2c:	9b07      	ldr	r3, [sp, #28]
 800aa2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa32:	4605      	mov	r5, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 8197 	beq.w	800ad68 <_dtoa_r+0xa90>
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	220a      	movs	r2, #10
 800aa40:	4630      	mov	r0, r6
 800aa42:	f000 fb17 	bl	800b074 <__multadd>
 800aa46:	f1ba 0f00 	cmp.w	sl, #0
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	f300 8093 	bgt.w	800ab76 <_dtoa_r+0x89e>
 800aa50:	9b06      	ldr	r3, [sp, #24]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	dc57      	bgt.n	800ab06 <_dtoa_r+0x82e>
 800aa56:	e08e      	b.n	800ab76 <_dtoa_r+0x89e>
 800aa58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa5e:	e751      	b.n	800a904 <_dtoa_r+0x62c>
 800aa60:	f109 34ff 	add.w	r4, r9, #4294967295
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	bfbf      	itttt	lt
 800aa68:	1ae2      	sublt	r2, r4, r3
 800aa6a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa6c:	189b      	addlt	r3, r3, r2
 800aa6e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aa70:	bfae      	itee	ge
 800aa72:	1b1c      	subge	r4, r3, r4
 800aa74:	4623      	movlt	r3, r4
 800aa76:	2400      	movlt	r4, #0
 800aa78:	f1b9 0f00 	cmp.w	r9, #0
 800aa7c:	bfb5      	itete	lt
 800aa7e:	9a04      	ldrlt	r2, [sp, #16]
 800aa80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800aa84:	eba2 0809 	sublt.w	r8, r2, r9
 800aa88:	464a      	movge	r2, r9
 800aa8a:	bfb8      	it	lt
 800aa8c:	2200      	movlt	r2, #0
 800aa8e:	e73c      	b.n	800a90a <_dtoa_r+0x632>
 800aa90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa94:	9f07      	ldr	r7, [sp, #28]
 800aa96:	461c      	mov	r4, r3
 800aa98:	e744      	b.n	800a924 <_dtoa_r+0x64c>
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	e770      	b.n	800a980 <_dtoa_r+0x6a8>
 800aa9e:	9b06      	ldr	r3, [sp, #24]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	dc18      	bgt.n	800aad6 <_dtoa_r+0x7fe>
 800aaa4:	9b02      	ldr	r3, [sp, #8]
 800aaa6:	b9b3      	cbnz	r3, 800aad6 <_dtoa_r+0x7fe>
 800aaa8:	9b03      	ldr	r3, [sp, #12]
 800aaaa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800aaae:	b9a2      	cbnz	r2, 800aada <_dtoa_r+0x802>
 800aab0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aab4:	0d12      	lsrs	r2, r2, #20
 800aab6:	0512      	lsls	r2, r2, #20
 800aab8:	b18a      	cbz	r2, 800aade <_dtoa_r+0x806>
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	3301      	adds	r3, #1
 800aabe:	9304      	str	r3, [sp, #16]
 800aac0:	9b05      	ldr	r3, [sp, #20]
 800aac2:	3301      	adds	r3, #1
 800aac4:	9305      	str	r3, [sp, #20]
 800aac6:	2301      	movs	r3, #1
 800aac8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f47f af70 	bne.w	800a9b2 <_dtoa_r+0x6da>
 800aad2:	2001      	movs	r0, #1
 800aad4:	e775      	b.n	800a9c2 <_dtoa_r+0x6ea>
 800aad6:	2300      	movs	r3, #0
 800aad8:	e7f6      	b.n	800aac8 <_dtoa_r+0x7f0>
 800aada:	9b02      	ldr	r3, [sp, #8]
 800aadc:	e7f4      	b.n	800aac8 <_dtoa_r+0x7f0>
 800aade:	9209      	str	r2, [sp, #36]	; 0x24
 800aae0:	e7f3      	b.n	800aaca <_dtoa_r+0x7f2>
 800aae2:	d082      	beq.n	800a9ea <_dtoa_r+0x712>
 800aae4:	9b04      	ldr	r3, [sp, #16]
 800aae6:	321c      	adds	r2, #28
 800aae8:	4413      	add	r3, r2
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	9b05      	ldr	r3, [sp, #20]
 800aaee:	4490      	add	r8, r2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	e779      	b.n	800a9e8 <_dtoa_r+0x710>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	e7f5      	b.n	800aae4 <_dtoa_r+0x80c>
 800aaf8:	f1b9 0f00 	cmp.w	r9, #0
 800aafc:	dc36      	bgt.n	800ab6c <_dtoa_r+0x894>
 800aafe:	9b06      	ldr	r3, [sp, #24]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	dd33      	ble.n	800ab6c <_dtoa_r+0x894>
 800ab04:	46ca      	mov	sl, r9
 800ab06:	f1ba 0f00 	cmp.w	sl, #0
 800ab0a:	d10d      	bne.n	800ab28 <_dtoa_r+0x850>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4653      	mov	r3, sl
 800ab10:	2205      	movs	r2, #5
 800ab12:	4630      	mov	r0, r6
 800ab14:	f000 faae 	bl	800b074 <__multadd>
 800ab18:	4601      	mov	r1, r0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 fcc3 	bl	800b4a8 <__mcmp>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	f73f ade4 	bgt.w	800a6f0 <_dtoa_r+0x418>
 800ab28:	9b08      	ldr	r3, [sp, #32]
 800ab2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab2e:	ea6f 0b03 	mvn.w	fp, r3
 800ab32:	f04f 0900 	mov.w	r9, #0
 800ab36:	4621      	mov	r1, r4
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f000 fa79 	bl	800b030 <_Bfree>
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	f43f aea1 	beq.w	800a886 <_dtoa_r+0x5ae>
 800ab44:	f1b9 0f00 	cmp.w	r9, #0
 800ab48:	d005      	beq.n	800ab56 <_dtoa_r+0x87e>
 800ab4a:	45b9      	cmp	r9, r7
 800ab4c:	d003      	beq.n	800ab56 <_dtoa_r+0x87e>
 800ab4e:	4649      	mov	r1, r9
 800ab50:	4630      	mov	r0, r6
 800ab52:	f000 fa6d 	bl	800b030 <_Bfree>
 800ab56:	4639      	mov	r1, r7
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 fa69 	bl	800b030 <_Bfree>
 800ab5e:	e692      	b.n	800a886 <_dtoa_r+0x5ae>
 800ab60:	2400      	movs	r4, #0
 800ab62:	4627      	mov	r7, r4
 800ab64:	e7e0      	b.n	800ab28 <_dtoa_r+0x850>
 800ab66:	4693      	mov	fp, r2
 800ab68:	4627      	mov	r7, r4
 800ab6a:	e5c1      	b.n	800a6f0 <_dtoa_r+0x418>
 800ab6c:	9b07      	ldr	r3, [sp, #28]
 800ab6e:	46ca      	mov	sl, r9
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 8100 	beq.w	800ad76 <_dtoa_r+0xa9e>
 800ab76:	f1b8 0f00 	cmp.w	r8, #0
 800ab7a:	dd05      	ble.n	800ab88 <_dtoa_r+0x8b0>
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	4642      	mov	r2, r8
 800ab80:	4630      	mov	r0, r6
 800ab82:	f000 fc25 	bl	800b3d0 <__lshift>
 800ab86:	4607      	mov	r7, r0
 800ab88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d05d      	beq.n	800ac4a <_dtoa_r+0x972>
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 fa0d 	bl	800afb0 <_Balloc>
 800ab96:	4680      	mov	r8, r0
 800ab98:	b928      	cbnz	r0, 800aba6 <_dtoa_r+0x8ce>
 800ab9a:	4b82      	ldr	r3, [pc, #520]	; (800ada4 <_dtoa_r+0xacc>)
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aba2:	f7ff bbb1 	b.w	800a308 <_dtoa_r+0x30>
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	3202      	adds	r2, #2
 800abaa:	0092      	lsls	r2, r2, #2
 800abac:	f107 010c 	add.w	r1, r7, #12
 800abb0:	300c      	adds	r0, #12
 800abb2:	f7ff fafa 	bl	800a1aa <memcpy>
 800abb6:	2201      	movs	r2, #1
 800abb8:	4641      	mov	r1, r8
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 fc08 	bl	800b3d0 <__lshift>
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	3301      	adds	r3, #1
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	4453      	add	r3, sl
 800abca:	9308      	str	r3, [sp, #32]
 800abcc:	9b02      	ldr	r3, [sp, #8]
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	46b9      	mov	r9, r7
 800abd4:	9307      	str	r3, [sp, #28]
 800abd6:	4607      	mov	r7, r0
 800abd8:	9b04      	ldr	r3, [sp, #16]
 800abda:	4621      	mov	r1, r4
 800abdc:	3b01      	subs	r3, #1
 800abde:	4628      	mov	r0, r5
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	f7ff faf0 	bl	800a1c6 <quorem>
 800abe6:	4603      	mov	r3, r0
 800abe8:	3330      	adds	r3, #48	; 0x30
 800abea:	9005      	str	r0, [sp, #20]
 800abec:	4649      	mov	r1, r9
 800abee:	4628      	mov	r0, r5
 800abf0:	9309      	str	r3, [sp, #36]	; 0x24
 800abf2:	f000 fc59 	bl	800b4a8 <__mcmp>
 800abf6:	463a      	mov	r2, r7
 800abf8:	4682      	mov	sl, r0
 800abfa:	4621      	mov	r1, r4
 800abfc:	4630      	mov	r0, r6
 800abfe:	f000 fc6f 	bl	800b4e0 <__mdiff>
 800ac02:	68c2      	ldr	r2, [r0, #12]
 800ac04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac06:	4680      	mov	r8, r0
 800ac08:	bb0a      	cbnz	r2, 800ac4e <_dtoa_r+0x976>
 800ac0a:	4601      	mov	r1, r0
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f000 fc4b 	bl	800b4a8 <__mcmp>
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	4602      	mov	r2, r0
 800ac16:	4641      	mov	r1, r8
 800ac18:	4630      	mov	r0, r6
 800ac1a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ac1e:	f000 fa07 	bl	800b030 <_Bfree>
 800ac22:	9b06      	ldr	r3, [sp, #24]
 800ac24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac26:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ac2a:	ea43 0102 	orr.w	r1, r3, r2
 800ac2e:	9b07      	ldr	r3, [sp, #28]
 800ac30:	4319      	orrs	r1, r3
 800ac32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac34:	d10d      	bne.n	800ac52 <_dtoa_r+0x97a>
 800ac36:	2b39      	cmp	r3, #57	; 0x39
 800ac38:	d029      	beq.n	800ac8e <_dtoa_r+0x9b6>
 800ac3a:	f1ba 0f00 	cmp.w	sl, #0
 800ac3e:	dd01      	ble.n	800ac44 <_dtoa_r+0x96c>
 800ac40:	9b05      	ldr	r3, [sp, #20]
 800ac42:	3331      	adds	r3, #49	; 0x31
 800ac44:	9a02      	ldr	r2, [sp, #8]
 800ac46:	7013      	strb	r3, [r2, #0]
 800ac48:	e775      	b.n	800ab36 <_dtoa_r+0x85e>
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	e7b8      	b.n	800abc0 <_dtoa_r+0x8e8>
 800ac4e:	2201      	movs	r2, #1
 800ac50:	e7e1      	b.n	800ac16 <_dtoa_r+0x93e>
 800ac52:	f1ba 0f00 	cmp.w	sl, #0
 800ac56:	db06      	blt.n	800ac66 <_dtoa_r+0x98e>
 800ac58:	9906      	ldr	r1, [sp, #24]
 800ac5a:	ea41 0a0a 	orr.w	sl, r1, sl
 800ac5e:	9907      	ldr	r1, [sp, #28]
 800ac60:	ea5a 0a01 	orrs.w	sl, sl, r1
 800ac64:	d120      	bne.n	800aca8 <_dtoa_r+0x9d0>
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	ddec      	ble.n	800ac44 <_dtoa_r+0x96c>
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	4630      	mov	r0, r6
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	f000 fbad 	bl	800b3d0 <__lshift>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4605      	mov	r5, r0
 800ac7a:	f000 fc15 	bl	800b4a8 <__mcmp>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	9b04      	ldr	r3, [sp, #16]
 800ac82:	dc02      	bgt.n	800ac8a <_dtoa_r+0x9b2>
 800ac84:	d1de      	bne.n	800ac44 <_dtoa_r+0x96c>
 800ac86:	07da      	lsls	r2, r3, #31
 800ac88:	d5dc      	bpl.n	800ac44 <_dtoa_r+0x96c>
 800ac8a:	2b39      	cmp	r3, #57	; 0x39
 800ac8c:	d1d8      	bne.n	800ac40 <_dtoa_r+0x968>
 800ac8e:	9a02      	ldr	r2, [sp, #8]
 800ac90:	2339      	movs	r3, #57	; 0x39
 800ac92:	7013      	strb	r3, [r2, #0]
 800ac94:	4643      	mov	r3, r8
 800ac96:	4698      	mov	r8, r3
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ac9e:	2a39      	cmp	r2, #57	; 0x39
 800aca0:	d051      	beq.n	800ad46 <_dtoa_r+0xa6e>
 800aca2:	3201      	adds	r2, #1
 800aca4:	701a      	strb	r2, [r3, #0]
 800aca6:	e746      	b.n	800ab36 <_dtoa_r+0x85e>
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	dd03      	ble.n	800acb4 <_dtoa_r+0x9dc>
 800acac:	2b39      	cmp	r3, #57	; 0x39
 800acae:	d0ee      	beq.n	800ac8e <_dtoa_r+0x9b6>
 800acb0:	3301      	adds	r3, #1
 800acb2:	e7c7      	b.n	800ac44 <_dtoa_r+0x96c>
 800acb4:	9a04      	ldr	r2, [sp, #16]
 800acb6:	9908      	ldr	r1, [sp, #32]
 800acb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800acbc:	428a      	cmp	r2, r1
 800acbe:	d02b      	beq.n	800ad18 <_dtoa_r+0xa40>
 800acc0:	4629      	mov	r1, r5
 800acc2:	2300      	movs	r3, #0
 800acc4:	220a      	movs	r2, #10
 800acc6:	4630      	mov	r0, r6
 800acc8:	f000 f9d4 	bl	800b074 <__multadd>
 800accc:	45b9      	cmp	r9, r7
 800acce:	4605      	mov	r5, r0
 800acd0:	f04f 0300 	mov.w	r3, #0
 800acd4:	f04f 020a 	mov.w	r2, #10
 800acd8:	4649      	mov	r1, r9
 800acda:	4630      	mov	r0, r6
 800acdc:	d107      	bne.n	800acee <_dtoa_r+0xa16>
 800acde:	f000 f9c9 	bl	800b074 <__multadd>
 800ace2:	4681      	mov	r9, r0
 800ace4:	4607      	mov	r7, r0
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	3301      	adds	r3, #1
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	e774      	b.n	800abd8 <_dtoa_r+0x900>
 800acee:	f000 f9c1 	bl	800b074 <__multadd>
 800acf2:	4639      	mov	r1, r7
 800acf4:	4681      	mov	r9, r0
 800acf6:	2300      	movs	r3, #0
 800acf8:	220a      	movs	r2, #10
 800acfa:	4630      	mov	r0, r6
 800acfc:	f000 f9ba 	bl	800b074 <__multadd>
 800ad00:	4607      	mov	r7, r0
 800ad02:	e7f0      	b.n	800ace6 <_dtoa_r+0xa0e>
 800ad04:	f1ba 0f00 	cmp.w	sl, #0
 800ad08:	9a01      	ldr	r2, [sp, #4]
 800ad0a:	bfcc      	ite	gt
 800ad0c:	46d0      	movgt	r8, sl
 800ad0e:	f04f 0801 	movle.w	r8, #1
 800ad12:	4490      	add	r8, r2
 800ad14:	f04f 0900 	mov.w	r9, #0
 800ad18:	4629      	mov	r1, r5
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	9302      	str	r3, [sp, #8]
 800ad20:	f000 fb56 	bl	800b3d0 <__lshift>
 800ad24:	4621      	mov	r1, r4
 800ad26:	4605      	mov	r5, r0
 800ad28:	f000 fbbe 	bl	800b4a8 <__mcmp>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	dcb1      	bgt.n	800ac94 <_dtoa_r+0x9bc>
 800ad30:	d102      	bne.n	800ad38 <_dtoa_r+0xa60>
 800ad32:	9b02      	ldr	r3, [sp, #8]
 800ad34:	07db      	lsls	r3, r3, #31
 800ad36:	d4ad      	bmi.n	800ac94 <_dtoa_r+0x9bc>
 800ad38:	4643      	mov	r3, r8
 800ad3a:	4698      	mov	r8, r3
 800ad3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad40:	2a30      	cmp	r2, #48	; 0x30
 800ad42:	d0fa      	beq.n	800ad3a <_dtoa_r+0xa62>
 800ad44:	e6f7      	b.n	800ab36 <_dtoa_r+0x85e>
 800ad46:	9a01      	ldr	r2, [sp, #4]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d1a4      	bne.n	800ac96 <_dtoa_r+0x9be>
 800ad4c:	f10b 0b01 	add.w	fp, fp, #1
 800ad50:	2331      	movs	r3, #49	; 0x31
 800ad52:	e778      	b.n	800ac46 <_dtoa_r+0x96e>
 800ad54:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <_dtoa_r+0xad0>)
 800ad56:	f7ff bb2a 	b.w	800a3ae <_dtoa_r+0xd6>
 800ad5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f47f ab05 	bne.w	800a36c <_dtoa_r+0x94>
 800ad62:	4b12      	ldr	r3, [pc, #72]	; (800adac <_dtoa_r+0xad4>)
 800ad64:	f7ff bb23 	b.w	800a3ae <_dtoa_r+0xd6>
 800ad68:	f1ba 0f00 	cmp.w	sl, #0
 800ad6c:	dc03      	bgt.n	800ad76 <_dtoa_r+0xa9e>
 800ad6e:	9b06      	ldr	r3, [sp, #24]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	f73f aec8 	bgt.w	800ab06 <_dtoa_r+0x82e>
 800ad76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f7ff fa22 	bl	800a1c6 <quorem>
 800ad82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad86:	f808 3b01 	strb.w	r3, [r8], #1
 800ad8a:	9a01      	ldr	r2, [sp, #4]
 800ad8c:	eba8 0202 	sub.w	r2, r8, r2
 800ad90:	4592      	cmp	sl, r2
 800ad92:	ddb7      	ble.n	800ad04 <_dtoa_r+0xa2c>
 800ad94:	4629      	mov	r1, r5
 800ad96:	2300      	movs	r3, #0
 800ad98:	220a      	movs	r2, #10
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f000 f96a 	bl	800b074 <__multadd>
 800ada0:	4605      	mov	r5, r0
 800ada2:	e7ea      	b.n	800ad7a <_dtoa_r+0xaa2>
 800ada4:	0800c4fc 	.word	0x0800c4fc
 800ada8:	0800c45c 	.word	0x0800c45c
 800adac:	0800c480 	.word	0x0800c480

0800adb0 <_free_r>:
 800adb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adb2:	2900      	cmp	r1, #0
 800adb4:	d044      	beq.n	800ae40 <_free_r+0x90>
 800adb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adba:	9001      	str	r0, [sp, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f1a1 0404 	sub.w	r4, r1, #4
 800adc2:	bfb8      	it	lt
 800adc4:	18e4      	addlt	r4, r4, r3
 800adc6:	f000 f8e7 	bl	800af98 <__malloc_lock>
 800adca:	4a1e      	ldr	r2, [pc, #120]	; (800ae44 <_free_r+0x94>)
 800adcc:	9801      	ldr	r0, [sp, #4]
 800adce:	6813      	ldr	r3, [r2, #0]
 800add0:	b933      	cbnz	r3, 800ade0 <_free_r+0x30>
 800add2:	6063      	str	r3, [r4, #4]
 800add4:	6014      	str	r4, [r2, #0]
 800add6:	b003      	add	sp, #12
 800add8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800addc:	f000 b8e2 	b.w	800afa4 <__malloc_unlock>
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d908      	bls.n	800adf6 <_free_r+0x46>
 800ade4:	6825      	ldr	r5, [r4, #0]
 800ade6:	1961      	adds	r1, r4, r5
 800ade8:	428b      	cmp	r3, r1
 800adea:	bf01      	itttt	eq
 800adec:	6819      	ldreq	r1, [r3, #0]
 800adee:	685b      	ldreq	r3, [r3, #4]
 800adf0:	1949      	addeq	r1, r1, r5
 800adf2:	6021      	streq	r1, [r4, #0]
 800adf4:	e7ed      	b.n	800add2 <_free_r+0x22>
 800adf6:	461a      	mov	r2, r3
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	b10b      	cbz	r3, 800ae00 <_free_r+0x50>
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	d9fa      	bls.n	800adf6 <_free_r+0x46>
 800ae00:	6811      	ldr	r1, [r2, #0]
 800ae02:	1855      	adds	r5, r2, r1
 800ae04:	42a5      	cmp	r5, r4
 800ae06:	d10b      	bne.n	800ae20 <_free_r+0x70>
 800ae08:	6824      	ldr	r4, [r4, #0]
 800ae0a:	4421      	add	r1, r4
 800ae0c:	1854      	adds	r4, r2, r1
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	6011      	str	r1, [r2, #0]
 800ae12:	d1e0      	bne.n	800add6 <_free_r+0x26>
 800ae14:	681c      	ldr	r4, [r3, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	6053      	str	r3, [r2, #4]
 800ae1a:	440c      	add	r4, r1
 800ae1c:	6014      	str	r4, [r2, #0]
 800ae1e:	e7da      	b.n	800add6 <_free_r+0x26>
 800ae20:	d902      	bls.n	800ae28 <_free_r+0x78>
 800ae22:	230c      	movs	r3, #12
 800ae24:	6003      	str	r3, [r0, #0]
 800ae26:	e7d6      	b.n	800add6 <_free_r+0x26>
 800ae28:	6825      	ldr	r5, [r4, #0]
 800ae2a:	1961      	adds	r1, r4, r5
 800ae2c:	428b      	cmp	r3, r1
 800ae2e:	bf04      	itt	eq
 800ae30:	6819      	ldreq	r1, [r3, #0]
 800ae32:	685b      	ldreq	r3, [r3, #4]
 800ae34:	6063      	str	r3, [r4, #4]
 800ae36:	bf04      	itt	eq
 800ae38:	1949      	addeq	r1, r1, r5
 800ae3a:	6021      	streq	r1, [r4, #0]
 800ae3c:	6054      	str	r4, [r2, #4]
 800ae3e:	e7ca      	b.n	800add6 <_free_r+0x26>
 800ae40:	b003      	add	sp, #12
 800ae42:	bd30      	pop	{r4, r5, pc}
 800ae44:	20005438 	.word	0x20005438

0800ae48 <malloc>:
 800ae48:	4b02      	ldr	r3, [pc, #8]	; (800ae54 <malloc+0xc>)
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	6818      	ldr	r0, [r3, #0]
 800ae4e:	f000 b823 	b.w	800ae98 <_malloc_r>
 800ae52:	bf00      	nop
 800ae54:	20000094 	.word	0x20000094

0800ae58 <sbrk_aligned>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	4e0e      	ldr	r6, [pc, #56]	; (800ae94 <sbrk_aligned+0x3c>)
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	6831      	ldr	r1, [r6, #0]
 800ae60:	4605      	mov	r5, r0
 800ae62:	b911      	cbnz	r1, 800ae6a <sbrk_aligned+0x12>
 800ae64:	f000 fe40 	bl	800bae8 <_sbrk_r>
 800ae68:	6030      	str	r0, [r6, #0]
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f000 fe3b 	bl	800bae8 <_sbrk_r>
 800ae72:	1c43      	adds	r3, r0, #1
 800ae74:	d00a      	beq.n	800ae8c <sbrk_aligned+0x34>
 800ae76:	1cc4      	adds	r4, r0, #3
 800ae78:	f024 0403 	bic.w	r4, r4, #3
 800ae7c:	42a0      	cmp	r0, r4
 800ae7e:	d007      	beq.n	800ae90 <sbrk_aligned+0x38>
 800ae80:	1a21      	subs	r1, r4, r0
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 fe30 	bl	800bae8 <_sbrk_r>
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d101      	bne.n	800ae90 <sbrk_aligned+0x38>
 800ae8c:	f04f 34ff 	mov.w	r4, #4294967295
 800ae90:	4620      	mov	r0, r4
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	2000543c 	.word	0x2000543c

0800ae98 <_malloc_r>:
 800ae98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae9c:	1ccd      	adds	r5, r1, #3
 800ae9e:	f025 0503 	bic.w	r5, r5, #3
 800aea2:	3508      	adds	r5, #8
 800aea4:	2d0c      	cmp	r5, #12
 800aea6:	bf38      	it	cc
 800aea8:	250c      	movcc	r5, #12
 800aeaa:	2d00      	cmp	r5, #0
 800aeac:	4607      	mov	r7, r0
 800aeae:	db01      	blt.n	800aeb4 <_malloc_r+0x1c>
 800aeb0:	42a9      	cmp	r1, r5
 800aeb2:	d905      	bls.n	800aec0 <_malloc_r+0x28>
 800aeb4:	230c      	movs	r3, #12
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	2600      	movs	r6, #0
 800aeba:	4630      	mov	r0, r6
 800aebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af94 <_malloc_r+0xfc>
 800aec4:	f000 f868 	bl	800af98 <__malloc_lock>
 800aec8:	f8d8 3000 	ldr.w	r3, [r8]
 800aecc:	461c      	mov	r4, r3
 800aece:	bb5c      	cbnz	r4, 800af28 <_malloc_r+0x90>
 800aed0:	4629      	mov	r1, r5
 800aed2:	4638      	mov	r0, r7
 800aed4:	f7ff ffc0 	bl	800ae58 <sbrk_aligned>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	4604      	mov	r4, r0
 800aedc:	d155      	bne.n	800af8a <_malloc_r+0xf2>
 800aede:	f8d8 4000 	ldr.w	r4, [r8]
 800aee2:	4626      	mov	r6, r4
 800aee4:	2e00      	cmp	r6, #0
 800aee6:	d145      	bne.n	800af74 <_malloc_r+0xdc>
 800aee8:	2c00      	cmp	r4, #0
 800aeea:	d048      	beq.n	800af7e <_malloc_r+0xe6>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	4631      	mov	r1, r6
 800aef0:	4638      	mov	r0, r7
 800aef2:	eb04 0903 	add.w	r9, r4, r3
 800aef6:	f000 fdf7 	bl	800bae8 <_sbrk_r>
 800aefa:	4581      	cmp	r9, r0
 800aefc:	d13f      	bne.n	800af7e <_malloc_r+0xe6>
 800aefe:	6821      	ldr	r1, [r4, #0]
 800af00:	1a6d      	subs	r5, r5, r1
 800af02:	4629      	mov	r1, r5
 800af04:	4638      	mov	r0, r7
 800af06:	f7ff ffa7 	bl	800ae58 <sbrk_aligned>
 800af0a:	3001      	adds	r0, #1
 800af0c:	d037      	beq.n	800af7e <_malloc_r+0xe6>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	442b      	add	r3, r5
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	f8d8 3000 	ldr.w	r3, [r8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d038      	beq.n	800af8e <_malloc_r+0xf6>
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	42a2      	cmp	r2, r4
 800af20:	d12b      	bne.n	800af7a <_malloc_r+0xe2>
 800af22:	2200      	movs	r2, #0
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	e00f      	b.n	800af48 <_malloc_r+0xb0>
 800af28:	6822      	ldr	r2, [r4, #0]
 800af2a:	1b52      	subs	r2, r2, r5
 800af2c:	d41f      	bmi.n	800af6e <_malloc_r+0xd6>
 800af2e:	2a0b      	cmp	r2, #11
 800af30:	d917      	bls.n	800af62 <_malloc_r+0xca>
 800af32:	1961      	adds	r1, r4, r5
 800af34:	42a3      	cmp	r3, r4
 800af36:	6025      	str	r5, [r4, #0]
 800af38:	bf18      	it	ne
 800af3a:	6059      	strne	r1, [r3, #4]
 800af3c:	6863      	ldr	r3, [r4, #4]
 800af3e:	bf08      	it	eq
 800af40:	f8c8 1000 	streq.w	r1, [r8]
 800af44:	5162      	str	r2, [r4, r5]
 800af46:	604b      	str	r3, [r1, #4]
 800af48:	4638      	mov	r0, r7
 800af4a:	f104 060b 	add.w	r6, r4, #11
 800af4e:	f000 f829 	bl	800afa4 <__malloc_unlock>
 800af52:	f026 0607 	bic.w	r6, r6, #7
 800af56:	1d23      	adds	r3, r4, #4
 800af58:	1af2      	subs	r2, r6, r3
 800af5a:	d0ae      	beq.n	800aeba <_malloc_r+0x22>
 800af5c:	1b9b      	subs	r3, r3, r6
 800af5e:	50a3      	str	r3, [r4, r2]
 800af60:	e7ab      	b.n	800aeba <_malloc_r+0x22>
 800af62:	42a3      	cmp	r3, r4
 800af64:	6862      	ldr	r2, [r4, #4]
 800af66:	d1dd      	bne.n	800af24 <_malloc_r+0x8c>
 800af68:	f8c8 2000 	str.w	r2, [r8]
 800af6c:	e7ec      	b.n	800af48 <_malloc_r+0xb0>
 800af6e:	4623      	mov	r3, r4
 800af70:	6864      	ldr	r4, [r4, #4]
 800af72:	e7ac      	b.n	800aece <_malloc_r+0x36>
 800af74:	4634      	mov	r4, r6
 800af76:	6876      	ldr	r6, [r6, #4]
 800af78:	e7b4      	b.n	800aee4 <_malloc_r+0x4c>
 800af7a:	4613      	mov	r3, r2
 800af7c:	e7cc      	b.n	800af18 <_malloc_r+0x80>
 800af7e:	230c      	movs	r3, #12
 800af80:	603b      	str	r3, [r7, #0]
 800af82:	4638      	mov	r0, r7
 800af84:	f000 f80e 	bl	800afa4 <__malloc_unlock>
 800af88:	e797      	b.n	800aeba <_malloc_r+0x22>
 800af8a:	6025      	str	r5, [r4, #0]
 800af8c:	e7dc      	b.n	800af48 <_malloc_r+0xb0>
 800af8e:	605b      	str	r3, [r3, #4]
 800af90:	deff      	udf	#255	; 0xff
 800af92:	bf00      	nop
 800af94:	20005438 	.word	0x20005438

0800af98 <__malloc_lock>:
 800af98:	4801      	ldr	r0, [pc, #4]	; (800afa0 <__malloc_lock+0x8>)
 800af9a:	f7ff b904 	b.w	800a1a6 <__retarget_lock_acquire_recursive>
 800af9e:	bf00      	nop
 800afa0:	20005434 	.word	0x20005434

0800afa4 <__malloc_unlock>:
 800afa4:	4801      	ldr	r0, [pc, #4]	; (800afac <__malloc_unlock+0x8>)
 800afa6:	f7ff b8ff 	b.w	800a1a8 <__retarget_lock_release_recursive>
 800afaa:	bf00      	nop
 800afac:	20005434 	.word	0x20005434

0800afb0 <_Balloc>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	69c6      	ldr	r6, [r0, #28]
 800afb4:	4604      	mov	r4, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	b976      	cbnz	r6, 800afd8 <_Balloc+0x28>
 800afba:	2010      	movs	r0, #16
 800afbc:	f7ff ff44 	bl	800ae48 <malloc>
 800afc0:	4602      	mov	r2, r0
 800afc2:	61e0      	str	r0, [r4, #28]
 800afc4:	b920      	cbnz	r0, 800afd0 <_Balloc+0x20>
 800afc6:	4b18      	ldr	r3, [pc, #96]	; (800b028 <_Balloc+0x78>)
 800afc8:	4818      	ldr	r0, [pc, #96]	; (800b02c <_Balloc+0x7c>)
 800afca:	216b      	movs	r1, #107	; 0x6b
 800afcc:	f000 fd9c 	bl	800bb08 <__assert_func>
 800afd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afd4:	6006      	str	r6, [r0, #0]
 800afd6:	60c6      	str	r6, [r0, #12]
 800afd8:	69e6      	ldr	r6, [r4, #28]
 800afda:	68f3      	ldr	r3, [r6, #12]
 800afdc:	b183      	cbz	r3, 800b000 <_Balloc+0x50>
 800afde:	69e3      	ldr	r3, [r4, #28]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afe6:	b9b8      	cbnz	r0, 800b018 <_Balloc+0x68>
 800afe8:	2101      	movs	r1, #1
 800afea:	fa01 f605 	lsl.w	r6, r1, r5
 800afee:	1d72      	adds	r2, r6, #5
 800aff0:	0092      	lsls	r2, r2, #2
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 fda6 	bl	800bb44 <_calloc_r>
 800aff8:	b160      	cbz	r0, 800b014 <_Balloc+0x64>
 800affa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800affe:	e00e      	b.n	800b01e <_Balloc+0x6e>
 800b000:	2221      	movs	r2, #33	; 0x21
 800b002:	2104      	movs	r1, #4
 800b004:	4620      	mov	r0, r4
 800b006:	f000 fd9d 	bl	800bb44 <_calloc_r>
 800b00a:	69e3      	ldr	r3, [r4, #28]
 800b00c:	60f0      	str	r0, [r6, #12]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1e4      	bne.n	800afde <_Balloc+0x2e>
 800b014:	2000      	movs	r0, #0
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	6802      	ldr	r2, [r0, #0]
 800b01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b01e:	2300      	movs	r3, #0
 800b020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b024:	e7f7      	b.n	800b016 <_Balloc+0x66>
 800b026:	bf00      	nop
 800b028:	0800c48d 	.word	0x0800c48d
 800b02c:	0800c50d 	.word	0x0800c50d

0800b030 <_Bfree>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	69c6      	ldr	r6, [r0, #28]
 800b034:	4605      	mov	r5, r0
 800b036:	460c      	mov	r4, r1
 800b038:	b976      	cbnz	r6, 800b058 <_Bfree+0x28>
 800b03a:	2010      	movs	r0, #16
 800b03c:	f7ff ff04 	bl	800ae48 <malloc>
 800b040:	4602      	mov	r2, r0
 800b042:	61e8      	str	r0, [r5, #28]
 800b044:	b920      	cbnz	r0, 800b050 <_Bfree+0x20>
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <_Bfree+0x3c>)
 800b048:	4809      	ldr	r0, [pc, #36]	; (800b070 <_Bfree+0x40>)
 800b04a:	218f      	movs	r1, #143	; 0x8f
 800b04c:	f000 fd5c 	bl	800bb08 <__assert_func>
 800b050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b054:	6006      	str	r6, [r0, #0]
 800b056:	60c6      	str	r6, [r0, #12]
 800b058:	b13c      	cbz	r4, 800b06a <_Bfree+0x3a>
 800b05a:	69eb      	ldr	r3, [r5, #28]
 800b05c:	6862      	ldr	r2, [r4, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b064:	6021      	str	r1, [r4, #0]
 800b066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	0800c48d 	.word	0x0800c48d
 800b070:	0800c50d 	.word	0x0800c50d

0800b074 <__multadd>:
 800b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	690d      	ldr	r5, [r1, #16]
 800b07a:	4607      	mov	r7, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	461e      	mov	r6, r3
 800b080:	f101 0c14 	add.w	ip, r1, #20
 800b084:	2000      	movs	r0, #0
 800b086:	f8dc 3000 	ldr.w	r3, [ip]
 800b08a:	b299      	uxth	r1, r3
 800b08c:	fb02 6101 	mla	r1, r2, r1, r6
 800b090:	0c1e      	lsrs	r6, r3, #16
 800b092:	0c0b      	lsrs	r3, r1, #16
 800b094:	fb02 3306 	mla	r3, r2, r6, r3
 800b098:	b289      	uxth	r1, r1
 800b09a:	3001      	adds	r0, #1
 800b09c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0a0:	4285      	cmp	r5, r0
 800b0a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b0a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0aa:	dcec      	bgt.n	800b086 <__multadd+0x12>
 800b0ac:	b30e      	cbz	r6, 800b0f2 <__multadd+0x7e>
 800b0ae:	68a3      	ldr	r3, [r4, #8]
 800b0b0:	42ab      	cmp	r3, r5
 800b0b2:	dc19      	bgt.n	800b0e8 <__multadd+0x74>
 800b0b4:	6861      	ldr	r1, [r4, #4]
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	3101      	adds	r1, #1
 800b0ba:	f7ff ff79 	bl	800afb0 <_Balloc>
 800b0be:	4680      	mov	r8, r0
 800b0c0:	b928      	cbnz	r0, 800b0ce <__multadd+0x5a>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <__multadd+0x84>)
 800b0c6:	480d      	ldr	r0, [pc, #52]	; (800b0fc <__multadd+0x88>)
 800b0c8:	21ba      	movs	r1, #186	; 0xba
 800b0ca:	f000 fd1d 	bl	800bb08 <__assert_func>
 800b0ce:	6922      	ldr	r2, [r4, #16]
 800b0d0:	3202      	adds	r2, #2
 800b0d2:	f104 010c 	add.w	r1, r4, #12
 800b0d6:	0092      	lsls	r2, r2, #2
 800b0d8:	300c      	adds	r0, #12
 800b0da:	f7ff f866 	bl	800a1aa <memcpy>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7ff ffa5 	bl	800b030 <_Bfree>
 800b0e6:	4644      	mov	r4, r8
 800b0e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	615e      	str	r6, [r3, #20]
 800b0f0:	6125      	str	r5, [r4, #16]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f8:	0800c4fc 	.word	0x0800c4fc
 800b0fc:	0800c50d 	.word	0x0800c50d

0800b100 <__hi0bits>:
 800b100:	0c03      	lsrs	r3, r0, #16
 800b102:	041b      	lsls	r3, r3, #16
 800b104:	b9d3      	cbnz	r3, 800b13c <__hi0bits+0x3c>
 800b106:	0400      	lsls	r0, r0, #16
 800b108:	2310      	movs	r3, #16
 800b10a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b10e:	bf04      	itt	eq
 800b110:	0200      	lsleq	r0, r0, #8
 800b112:	3308      	addeq	r3, #8
 800b114:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b118:	bf04      	itt	eq
 800b11a:	0100      	lsleq	r0, r0, #4
 800b11c:	3304      	addeq	r3, #4
 800b11e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b122:	bf04      	itt	eq
 800b124:	0080      	lsleq	r0, r0, #2
 800b126:	3302      	addeq	r3, #2
 800b128:	2800      	cmp	r0, #0
 800b12a:	db05      	blt.n	800b138 <__hi0bits+0x38>
 800b12c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b130:	f103 0301 	add.w	r3, r3, #1
 800b134:	bf08      	it	eq
 800b136:	2320      	moveq	r3, #32
 800b138:	4618      	mov	r0, r3
 800b13a:	4770      	bx	lr
 800b13c:	2300      	movs	r3, #0
 800b13e:	e7e4      	b.n	800b10a <__hi0bits+0xa>

0800b140 <__lo0bits>:
 800b140:	6803      	ldr	r3, [r0, #0]
 800b142:	f013 0207 	ands.w	r2, r3, #7
 800b146:	d00c      	beq.n	800b162 <__lo0bits+0x22>
 800b148:	07d9      	lsls	r1, r3, #31
 800b14a:	d422      	bmi.n	800b192 <__lo0bits+0x52>
 800b14c:	079a      	lsls	r2, r3, #30
 800b14e:	bf49      	itett	mi
 800b150:	085b      	lsrmi	r3, r3, #1
 800b152:	089b      	lsrpl	r3, r3, #2
 800b154:	6003      	strmi	r3, [r0, #0]
 800b156:	2201      	movmi	r2, #1
 800b158:	bf5c      	itt	pl
 800b15a:	6003      	strpl	r3, [r0, #0]
 800b15c:	2202      	movpl	r2, #2
 800b15e:	4610      	mov	r0, r2
 800b160:	4770      	bx	lr
 800b162:	b299      	uxth	r1, r3
 800b164:	b909      	cbnz	r1, 800b16a <__lo0bits+0x2a>
 800b166:	0c1b      	lsrs	r3, r3, #16
 800b168:	2210      	movs	r2, #16
 800b16a:	b2d9      	uxtb	r1, r3
 800b16c:	b909      	cbnz	r1, 800b172 <__lo0bits+0x32>
 800b16e:	3208      	adds	r2, #8
 800b170:	0a1b      	lsrs	r3, r3, #8
 800b172:	0719      	lsls	r1, r3, #28
 800b174:	bf04      	itt	eq
 800b176:	091b      	lsreq	r3, r3, #4
 800b178:	3204      	addeq	r2, #4
 800b17a:	0799      	lsls	r1, r3, #30
 800b17c:	bf04      	itt	eq
 800b17e:	089b      	lsreq	r3, r3, #2
 800b180:	3202      	addeq	r2, #2
 800b182:	07d9      	lsls	r1, r3, #31
 800b184:	d403      	bmi.n	800b18e <__lo0bits+0x4e>
 800b186:	085b      	lsrs	r3, r3, #1
 800b188:	f102 0201 	add.w	r2, r2, #1
 800b18c:	d003      	beq.n	800b196 <__lo0bits+0x56>
 800b18e:	6003      	str	r3, [r0, #0]
 800b190:	e7e5      	b.n	800b15e <__lo0bits+0x1e>
 800b192:	2200      	movs	r2, #0
 800b194:	e7e3      	b.n	800b15e <__lo0bits+0x1e>
 800b196:	2220      	movs	r2, #32
 800b198:	e7e1      	b.n	800b15e <__lo0bits+0x1e>
	...

0800b19c <__i2b>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	460c      	mov	r4, r1
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	f7ff ff05 	bl	800afb0 <_Balloc>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	b928      	cbnz	r0, 800b1b6 <__i2b+0x1a>
 800b1aa:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <__i2b+0x24>)
 800b1ac:	4805      	ldr	r0, [pc, #20]	; (800b1c4 <__i2b+0x28>)
 800b1ae:	f240 1145 	movw	r1, #325	; 0x145
 800b1b2:	f000 fca9 	bl	800bb08 <__assert_func>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	6144      	str	r4, [r0, #20]
 800b1ba:	6103      	str	r3, [r0, #16]
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	0800c4fc 	.word	0x0800c4fc
 800b1c4:	0800c50d 	.word	0x0800c50d

0800b1c8 <__multiply>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	4691      	mov	r9, r2
 800b1ce:	690a      	ldr	r2, [r1, #16]
 800b1d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	bfb8      	it	lt
 800b1d8:	460b      	movlt	r3, r1
 800b1da:	460c      	mov	r4, r1
 800b1dc:	bfbc      	itt	lt
 800b1de:	464c      	movlt	r4, r9
 800b1e0:	4699      	movlt	r9, r3
 800b1e2:	6927      	ldr	r7, [r4, #16]
 800b1e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1e8:	68a3      	ldr	r3, [r4, #8]
 800b1ea:	6861      	ldr	r1, [r4, #4]
 800b1ec:	eb07 060a 	add.w	r6, r7, sl
 800b1f0:	42b3      	cmp	r3, r6
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	bfb8      	it	lt
 800b1f6:	3101      	addlt	r1, #1
 800b1f8:	f7ff feda 	bl	800afb0 <_Balloc>
 800b1fc:	b930      	cbnz	r0, 800b20c <__multiply+0x44>
 800b1fe:	4602      	mov	r2, r0
 800b200:	4b44      	ldr	r3, [pc, #272]	; (800b314 <__multiply+0x14c>)
 800b202:	4845      	ldr	r0, [pc, #276]	; (800b318 <__multiply+0x150>)
 800b204:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b208:	f000 fc7e 	bl	800bb08 <__assert_func>
 800b20c:	f100 0514 	add.w	r5, r0, #20
 800b210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b214:	462b      	mov	r3, r5
 800b216:	2200      	movs	r2, #0
 800b218:	4543      	cmp	r3, r8
 800b21a:	d321      	bcc.n	800b260 <__multiply+0x98>
 800b21c:	f104 0314 	add.w	r3, r4, #20
 800b220:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b224:	f109 0314 	add.w	r3, r9, #20
 800b228:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b22c:	9202      	str	r2, [sp, #8]
 800b22e:	1b3a      	subs	r2, r7, r4
 800b230:	3a15      	subs	r2, #21
 800b232:	f022 0203 	bic.w	r2, r2, #3
 800b236:	3204      	adds	r2, #4
 800b238:	f104 0115 	add.w	r1, r4, #21
 800b23c:	428f      	cmp	r7, r1
 800b23e:	bf38      	it	cc
 800b240:	2204      	movcc	r2, #4
 800b242:	9201      	str	r2, [sp, #4]
 800b244:	9a02      	ldr	r2, [sp, #8]
 800b246:	9303      	str	r3, [sp, #12]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d80c      	bhi.n	800b266 <__multiply+0x9e>
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	dd03      	ble.n	800b258 <__multiply+0x90>
 800b250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b254:	2b00      	cmp	r3, #0
 800b256:	d05b      	beq.n	800b310 <__multiply+0x148>
 800b258:	6106      	str	r6, [r0, #16]
 800b25a:	b005      	add	sp, #20
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	f843 2b04 	str.w	r2, [r3], #4
 800b264:	e7d8      	b.n	800b218 <__multiply+0x50>
 800b266:	f8b3 a000 	ldrh.w	sl, [r3]
 800b26a:	f1ba 0f00 	cmp.w	sl, #0
 800b26e:	d024      	beq.n	800b2ba <__multiply+0xf2>
 800b270:	f104 0e14 	add.w	lr, r4, #20
 800b274:	46a9      	mov	r9, r5
 800b276:	f04f 0c00 	mov.w	ip, #0
 800b27a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b27e:	f8d9 1000 	ldr.w	r1, [r9]
 800b282:	fa1f fb82 	uxth.w	fp, r2
 800b286:	b289      	uxth	r1, r1
 800b288:	fb0a 110b 	mla	r1, sl, fp, r1
 800b28c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b290:	f8d9 2000 	ldr.w	r2, [r9]
 800b294:	4461      	add	r1, ip
 800b296:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b29a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b29e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2a2:	b289      	uxth	r1, r1
 800b2a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2a8:	4577      	cmp	r7, lr
 800b2aa:	f849 1b04 	str.w	r1, [r9], #4
 800b2ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2b2:	d8e2      	bhi.n	800b27a <__multiply+0xb2>
 800b2b4:	9a01      	ldr	r2, [sp, #4]
 800b2b6:	f845 c002 	str.w	ip, [r5, r2]
 800b2ba:	9a03      	ldr	r2, [sp, #12]
 800b2bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	f1b9 0f00 	cmp.w	r9, #0
 800b2c6:	d021      	beq.n	800b30c <__multiply+0x144>
 800b2c8:	6829      	ldr	r1, [r5, #0]
 800b2ca:	f104 0c14 	add.w	ip, r4, #20
 800b2ce:	46ae      	mov	lr, r5
 800b2d0:	f04f 0a00 	mov.w	sl, #0
 800b2d4:	f8bc b000 	ldrh.w	fp, [ip]
 800b2d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2dc:	fb09 220b 	mla	r2, r9, fp, r2
 800b2e0:	4452      	add	r2, sl
 800b2e2:	b289      	uxth	r1, r1
 800b2e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2e8:	f84e 1b04 	str.w	r1, [lr], #4
 800b2ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2f4:	f8be 1000 	ldrh.w	r1, [lr]
 800b2f8:	fb09 110a 	mla	r1, r9, sl, r1
 800b2fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b300:	4567      	cmp	r7, ip
 800b302:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b306:	d8e5      	bhi.n	800b2d4 <__multiply+0x10c>
 800b308:	9a01      	ldr	r2, [sp, #4]
 800b30a:	50a9      	str	r1, [r5, r2]
 800b30c:	3504      	adds	r5, #4
 800b30e:	e799      	b.n	800b244 <__multiply+0x7c>
 800b310:	3e01      	subs	r6, #1
 800b312:	e79b      	b.n	800b24c <__multiply+0x84>
 800b314:	0800c4fc 	.word	0x0800c4fc
 800b318:	0800c50d 	.word	0x0800c50d

0800b31c <__pow5mult>:
 800b31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b320:	4615      	mov	r5, r2
 800b322:	f012 0203 	ands.w	r2, r2, #3
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	d007      	beq.n	800b33c <__pow5mult+0x20>
 800b32c:	4c25      	ldr	r4, [pc, #148]	; (800b3c4 <__pow5mult+0xa8>)
 800b32e:	3a01      	subs	r2, #1
 800b330:	2300      	movs	r3, #0
 800b332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b336:	f7ff fe9d 	bl	800b074 <__multadd>
 800b33a:	4607      	mov	r7, r0
 800b33c:	10ad      	asrs	r5, r5, #2
 800b33e:	d03d      	beq.n	800b3bc <__pow5mult+0xa0>
 800b340:	69f4      	ldr	r4, [r6, #28]
 800b342:	b97c      	cbnz	r4, 800b364 <__pow5mult+0x48>
 800b344:	2010      	movs	r0, #16
 800b346:	f7ff fd7f 	bl	800ae48 <malloc>
 800b34a:	4602      	mov	r2, r0
 800b34c:	61f0      	str	r0, [r6, #28]
 800b34e:	b928      	cbnz	r0, 800b35c <__pow5mult+0x40>
 800b350:	4b1d      	ldr	r3, [pc, #116]	; (800b3c8 <__pow5mult+0xac>)
 800b352:	481e      	ldr	r0, [pc, #120]	; (800b3cc <__pow5mult+0xb0>)
 800b354:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b358:	f000 fbd6 	bl	800bb08 <__assert_func>
 800b35c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b360:	6004      	str	r4, [r0, #0]
 800b362:	60c4      	str	r4, [r0, #12]
 800b364:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b36c:	b94c      	cbnz	r4, 800b382 <__pow5mult+0x66>
 800b36e:	f240 2171 	movw	r1, #625	; 0x271
 800b372:	4630      	mov	r0, r6
 800b374:	f7ff ff12 	bl	800b19c <__i2b>
 800b378:	2300      	movs	r3, #0
 800b37a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b37e:	4604      	mov	r4, r0
 800b380:	6003      	str	r3, [r0, #0]
 800b382:	f04f 0900 	mov.w	r9, #0
 800b386:	07eb      	lsls	r3, r5, #31
 800b388:	d50a      	bpl.n	800b3a0 <__pow5mult+0x84>
 800b38a:	4639      	mov	r1, r7
 800b38c:	4622      	mov	r2, r4
 800b38e:	4630      	mov	r0, r6
 800b390:	f7ff ff1a 	bl	800b1c8 <__multiply>
 800b394:	4639      	mov	r1, r7
 800b396:	4680      	mov	r8, r0
 800b398:	4630      	mov	r0, r6
 800b39a:	f7ff fe49 	bl	800b030 <_Bfree>
 800b39e:	4647      	mov	r7, r8
 800b3a0:	106d      	asrs	r5, r5, #1
 800b3a2:	d00b      	beq.n	800b3bc <__pow5mult+0xa0>
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	b938      	cbnz	r0, 800b3b8 <__pow5mult+0x9c>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f7ff ff0b 	bl	800b1c8 <__multiply>
 800b3b2:	6020      	str	r0, [r4, #0]
 800b3b4:	f8c0 9000 	str.w	r9, [r0]
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	e7e4      	b.n	800b386 <__pow5mult+0x6a>
 800b3bc:	4638      	mov	r0, r7
 800b3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800c658 	.word	0x0800c658
 800b3c8:	0800c48d 	.word	0x0800c48d
 800b3cc:	0800c50d 	.word	0x0800c50d

0800b3d0 <__lshift>:
 800b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	6849      	ldr	r1, [r1, #4]
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3de:	68a3      	ldr	r3, [r4, #8]
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	4691      	mov	r9, r2
 800b3e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3e8:	f108 0601 	add.w	r6, r8, #1
 800b3ec:	42b3      	cmp	r3, r6
 800b3ee:	db0b      	blt.n	800b408 <__lshift+0x38>
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff fddd 	bl	800afb0 <_Balloc>
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	b948      	cbnz	r0, 800b40e <__lshift+0x3e>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	4b28      	ldr	r3, [pc, #160]	; (800b4a0 <__lshift+0xd0>)
 800b3fe:	4829      	ldr	r0, [pc, #164]	; (800b4a4 <__lshift+0xd4>)
 800b400:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b404:	f000 fb80 	bl	800bb08 <__assert_func>
 800b408:	3101      	adds	r1, #1
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	e7ee      	b.n	800b3ec <__lshift+0x1c>
 800b40e:	2300      	movs	r3, #0
 800b410:	f100 0114 	add.w	r1, r0, #20
 800b414:	f100 0210 	add.w	r2, r0, #16
 800b418:	4618      	mov	r0, r3
 800b41a:	4553      	cmp	r3, sl
 800b41c:	db33      	blt.n	800b486 <__lshift+0xb6>
 800b41e:	6920      	ldr	r0, [r4, #16]
 800b420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b424:	f104 0314 	add.w	r3, r4, #20
 800b428:	f019 091f 	ands.w	r9, r9, #31
 800b42c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b434:	d02b      	beq.n	800b48e <__lshift+0xbe>
 800b436:	f1c9 0e20 	rsb	lr, r9, #32
 800b43a:	468a      	mov	sl, r1
 800b43c:	2200      	movs	r2, #0
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	fa00 f009 	lsl.w	r0, r0, r9
 800b444:	4310      	orrs	r0, r2
 800b446:	f84a 0b04 	str.w	r0, [sl], #4
 800b44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44e:	459c      	cmp	ip, r3
 800b450:	fa22 f20e 	lsr.w	r2, r2, lr
 800b454:	d8f3      	bhi.n	800b43e <__lshift+0x6e>
 800b456:	ebac 0304 	sub.w	r3, ip, r4
 800b45a:	3b15      	subs	r3, #21
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	3304      	adds	r3, #4
 800b462:	f104 0015 	add.w	r0, r4, #21
 800b466:	4584      	cmp	ip, r0
 800b468:	bf38      	it	cc
 800b46a:	2304      	movcc	r3, #4
 800b46c:	50ca      	str	r2, [r1, r3]
 800b46e:	b10a      	cbz	r2, 800b474 <__lshift+0xa4>
 800b470:	f108 0602 	add.w	r6, r8, #2
 800b474:	3e01      	subs	r6, #1
 800b476:	4638      	mov	r0, r7
 800b478:	612e      	str	r6, [r5, #16]
 800b47a:	4621      	mov	r1, r4
 800b47c:	f7ff fdd8 	bl	800b030 <_Bfree>
 800b480:	4628      	mov	r0, r5
 800b482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b486:	f842 0f04 	str.w	r0, [r2, #4]!
 800b48a:	3301      	adds	r3, #1
 800b48c:	e7c5      	b.n	800b41a <__lshift+0x4a>
 800b48e:	3904      	subs	r1, #4
 800b490:	f853 2b04 	ldr.w	r2, [r3], #4
 800b494:	f841 2f04 	str.w	r2, [r1, #4]!
 800b498:	459c      	cmp	ip, r3
 800b49a:	d8f9      	bhi.n	800b490 <__lshift+0xc0>
 800b49c:	e7ea      	b.n	800b474 <__lshift+0xa4>
 800b49e:	bf00      	nop
 800b4a0:	0800c4fc 	.word	0x0800c4fc
 800b4a4:	0800c50d 	.word	0x0800c50d

0800b4a8 <__mcmp>:
 800b4a8:	b530      	push	{r4, r5, lr}
 800b4aa:	6902      	ldr	r2, [r0, #16]
 800b4ac:	690c      	ldr	r4, [r1, #16]
 800b4ae:	1b12      	subs	r2, r2, r4
 800b4b0:	d10e      	bne.n	800b4d0 <__mcmp+0x28>
 800b4b2:	f100 0314 	add.w	r3, r0, #20
 800b4b6:	3114      	adds	r1, #20
 800b4b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4c8:	42a5      	cmp	r5, r4
 800b4ca:	d003      	beq.n	800b4d4 <__mcmp+0x2c>
 800b4cc:	d305      	bcc.n	800b4da <__mcmp+0x32>
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	bd30      	pop	{r4, r5, pc}
 800b4d4:	4283      	cmp	r3, r0
 800b4d6:	d3f3      	bcc.n	800b4c0 <__mcmp+0x18>
 800b4d8:	e7fa      	b.n	800b4d0 <__mcmp+0x28>
 800b4da:	f04f 32ff 	mov.w	r2, #4294967295
 800b4de:	e7f7      	b.n	800b4d0 <__mcmp+0x28>

0800b4e0 <__mdiff>:
 800b4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	4690      	mov	r8, r2
 800b4ee:	f7ff ffdb 	bl	800b4a8 <__mcmp>
 800b4f2:	1e05      	subs	r5, r0, #0
 800b4f4:	d110      	bne.n	800b518 <__mdiff+0x38>
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7ff fd59 	bl	800afb0 <_Balloc>
 800b4fe:	b930      	cbnz	r0, 800b50e <__mdiff+0x2e>
 800b500:	4b3a      	ldr	r3, [pc, #232]	; (800b5ec <__mdiff+0x10c>)
 800b502:	4602      	mov	r2, r0
 800b504:	f240 2137 	movw	r1, #567	; 0x237
 800b508:	4839      	ldr	r0, [pc, #228]	; (800b5f0 <__mdiff+0x110>)
 800b50a:	f000 fafd 	bl	800bb08 <__assert_func>
 800b50e:	2301      	movs	r3, #1
 800b510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	bfa4      	itt	ge
 800b51a:	4643      	movge	r3, r8
 800b51c:	46a0      	movge	r8, r4
 800b51e:	4630      	mov	r0, r6
 800b520:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b524:	bfa6      	itte	ge
 800b526:	461c      	movge	r4, r3
 800b528:	2500      	movge	r5, #0
 800b52a:	2501      	movlt	r5, #1
 800b52c:	f7ff fd40 	bl	800afb0 <_Balloc>
 800b530:	b920      	cbnz	r0, 800b53c <__mdiff+0x5c>
 800b532:	4b2e      	ldr	r3, [pc, #184]	; (800b5ec <__mdiff+0x10c>)
 800b534:	4602      	mov	r2, r0
 800b536:	f240 2145 	movw	r1, #581	; 0x245
 800b53a:	e7e5      	b.n	800b508 <__mdiff+0x28>
 800b53c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b540:	6926      	ldr	r6, [r4, #16]
 800b542:	60c5      	str	r5, [r0, #12]
 800b544:	f104 0914 	add.w	r9, r4, #20
 800b548:	f108 0514 	add.w	r5, r8, #20
 800b54c:	f100 0e14 	add.w	lr, r0, #20
 800b550:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b558:	f108 0210 	add.w	r2, r8, #16
 800b55c:	46f2      	mov	sl, lr
 800b55e:	2100      	movs	r1, #0
 800b560:	f859 3b04 	ldr.w	r3, [r9], #4
 800b564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b568:	fa11 f88b 	uxtah	r8, r1, fp
 800b56c:	b299      	uxth	r1, r3
 800b56e:	0c1b      	lsrs	r3, r3, #16
 800b570:	eba8 0801 	sub.w	r8, r8, r1
 800b574:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b578:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b57c:	fa1f f888 	uxth.w	r8, r8
 800b580:	1419      	asrs	r1, r3, #16
 800b582:	454e      	cmp	r6, r9
 800b584:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b588:	f84a 3b04 	str.w	r3, [sl], #4
 800b58c:	d8e8      	bhi.n	800b560 <__mdiff+0x80>
 800b58e:	1b33      	subs	r3, r6, r4
 800b590:	3b15      	subs	r3, #21
 800b592:	f023 0303 	bic.w	r3, r3, #3
 800b596:	3304      	adds	r3, #4
 800b598:	3415      	adds	r4, #21
 800b59a:	42a6      	cmp	r6, r4
 800b59c:	bf38      	it	cc
 800b59e:	2304      	movcc	r3, #4
 800b5a0:	441d      	add	r5, r3
 800b5a2:	4473      	add	r3, lr
 800b5a4:	469e      	mov	lr, r3
 800b5a6:	462e      	mov	r6, r5
 800b5a8:	4566      	cmp	r6, ip
 800b5aa:	d30e      	bcc.n	800b5ca <__mdiff+0xea>
 800b5ac:	f10c 0203 	add.w	r2, ip, #3
 800b5b0:	1b52      	subs	r2, r2, r5
 800b5b2:	f022 0203 	bic.w	r2, r2, #3
 800b5b6:	3d03      	subs	r5, #3
 800b5b8:	45ac      	cmp	ip, r5
 800b5ba:	bf38      	it	cc
 800b5bc:	2200      	movcc	r2, #0
 800b5be:	4413      	add	r3, r2
 800b5c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b5c4:	b17a      	cbz	r2, 800b5e6 <__mdiff+0x106>
 800b5c6:	6107      	str	r7, [r0, #16]
 800b5c8:	e7a4      	b.n	800b514 <__mdiff+0x34>
 800b5ca:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5ce:	fa11 f288 	uxtah	r2, r1, r8
 800b5d2:	1414      	asrs	r4, r2, #16
 800b5d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5d8:	b292      	uxth	r2, r2
 800b5da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5de:	f84e 2b04 	str.w	r2, [lr], #4
 800b5e2:	1421      	asrs	r1, r4, #16
 800b5e4:	e7e0      	b.n	800b5a8 <__mdiff+0xc8>
 800b5e6:	3f01      	subs	r7, #1
 800b5e8:	e7ea      	b.n	800b5c0 <__mdiff+0xe0>
 800b5ea:	bf00      	nop
 800b5ec:	0800c4fc 	.word	0x0800c4fc
 800b5f0:	0800c50d 	.word	0x0800c50d

0800b5f4 <__d2b>:
 800b5f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	ec59 8b10 	vmov	r8, r9, d0
 800b600:	4616      	mov	r6, r2
 800b602:	f7ff fcd5 	bl	800afb0 <_Balloc>
 800b606:	4604      	mov	r4, r0
 800b608:	b930      	cbnz	r0, 800b618 <__d2b+0x24>
 800b60a:	4602      	mov	r2, r0
 800b60c:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <__d2b+0xac>)
 800b60e:	4825      	ldr	r0, [pc, #148]	; (800b6a4 <__d2b+0xb0>)
 800b610:	f240 310f 	movw	r1, #783	; 0x30f
 800b614:	f000 fa78 	bl	800bb08 <__assert_func>
 800b618:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b61c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b620:	bb2d      	cbnz	r5, 800b66e <__d2b+0x7a>
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	f1b8 0300 	subs.w	r3, r8, #0
 800b628:	d026      	beq.n	800b678 <__d2b+0x84>
 800b62a:	4668      	mov	r0, sp
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	f7ff fd87 	bl	800b140 <__lo0bits>
 800b632:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b636:	b1e8      	cbz	r0, 800b674 <__d2b+0x80>
 800b638:	f1c0 0320 	rsb	r3, r0, #32
 800b63c:	fa02 f303 	lsl.w	r3, r2, r3
 800b640:	430b      	orrs	r3, r1
 800b642:	40c2      	lsrs	r2, r0
 800b644:	6163      	str	r3, [r4, #20]
 800b646:	9201      	str	r2, [sp, #4]
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	61a3      	str	r3, [r4, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	bf14      	ite	ne
 800b650:	2202      	movne	r2, #2
 800b652:	2201      	moveq	r2, #1
 800b654:	6122      	str	r2, [r4, #16]
 800b656:	b1bd      	cbz	r5, 800b688 <__d2b+0x94>
 800b658:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b65c:	4405      	add	r5, r0
 800b65e:	603d      	str	r5, [r7, #0]
 800b660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b664:	6030      	str	r0, [r6, #0]
 800b666:	4620      	mov	r0, r4
 800b668:	b003      	add	sp, #12
 800b66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b66e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b672:	e7d6      	b.n	800b622 <__d2b+0x2e>
 800b674:	6161      	str	r1, [r4, #20]
 800b676:	e7e7      	b.n	800b648 <__d2b+0x54>
 800b678:	a801      	add	r0, sp, #4
 800b67a:	f7ff fd61 	bl	800b140 <__lo0bits>
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	6163      	str	r3, [r4, #20]
 800b682:	3020      	adds	r0, #32
 800b684:	2201      	movs	r2, #1
 800b686:	e7e5      	b.n	800b654 <__d2b+0x60>
 800b688:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b68c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b690:	6038      	str	r0, [r7, #0]
 800b692:	6918      	ldr	r0, [r3, #16]
 800b694:	f7ff fd34 	bl	800b100 <__hi0bits>
 800b698:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b69c:	e7e2      	b.n	800b664 <__d2b+0x70>
 800b69e:	bf00      	nop
 800b6a0:	0800c4fc 	.word	0x0800c4fc
 800b6a4:	0800c50d 	.word	0x0800c50d

0800b6a8 <__ssputs_r>:
 800b6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ac:	688e      	ldr	r6, [r1, #8]
 800b6ae:	461f      	mov	r7, r3
 800b6b0:	42be      	cmp	r6, r7
 800b6b2:	680b      	ldr	r3, [r1, #0]
 800b6b4:	4682      	mov	sl, r0
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	4690      	mov	r8, r2
 800b6ba:	d82c      	bhi.n	800b716 <__ssputs_r+0x6e>
 800b6bc:	898a      	ldrh	r2, [r1, #12]
 800b6be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6c2:	d026      	beq.n	800b712 <__ssputs_r+0x6a>
 800b6c4:	6965      	ldr	r5, [r4, #20]
 800b6c6:	6909      	ldr	r1, [r1, #16]
 800b6c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6cc:	eba3 0901 	sub.w	r9, r3, r1
 800b6d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6d4:	1c7b      	adds	r3, r7, #1
 800b6d6:	444b      	add	r3, r9
 800b6d8:	106d      	asrs	r5, r5, #1
 800b6da:	429d      	cmp	r5, r3
 800b6dc:	bf38      	it	cc
 800b6de:	461d      	movcc	r5, r3
 800b6e0:	0553      	lsls	r3, r2, #21
 800b6e2:	d527      	bpl.n	800b734 <__ssputs_r+0x8c>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	f7ff fbd7 	bl	800ae98 <_malloc_r>
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	b360      	cbz	r0, 800b748 <__ssputs_r+0xa0>
 800b6ee:	6921      	ldr	r1, [r4, #16]
 800b6f0:	464a      	mov	r2, r9
 800b6f2:	f7fe fd5a 	bl	800a1aa <memcpy>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	6126      	str	r6, [r4, #16]
 800b704:	6165      	str	r5, [r4, #20]
 800b706:	444e      	add	r6, r9
 800b708:	eba5 0509 	sub.w	r5, r5, r9
 800b70c:	6026      	str	r6, [r4, #0]
 800b70e:	60a5      	str	r5, [r4, #8]
 800b710:	463e      	mov	r6, r7
 800b712:	42be      	cmp	r6, r7
 800b714:	d900      	bls.n	800b718 <__ssputs_r+0x70>
 800b716:	463e      	mov	r6, r7
 800b718:	6820      	ldr	r0, [r4, #0]
 800b71a:	4632      	mov	r2, r6
 800b71c:	4641      	mov	r1, r8
 800b71e:	f000 f9c9 	bl	800bab4 <memmove>
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	1b9b      	subs	r3, r3, r6
 800b726:	60a3      	str	r3, [r4, #8]
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	4433      	add	r3, r6
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	2000      	movs	r0, #0
 800b730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b734:	462a      	mov	r2, r5
 800b736:	f000 fa2d 	bl	800bb94 <_realloc_r>
 800b73a:	4606      	mov	r6, r0
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d1e0      	bne.n	800b702 <__ssputs_r+0x5a>
 800b740:	6921      	ldr	r1, [r4, #16]
 800b742:	4650      	mov	r0, sl
 800b744:	f7ff fb34 	bl	800adb0 <_free_r>
 800b748:	230c      	movs	r3, #12
 800b74a:	f8ca 3000 	str.w	r3, [sl]
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	e7e9      	b.n	800b730 <__ssputs_r+0x88>

0800b75c <_svfiprintf_r>:
 800b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b760:	4698      	mov	r8, r3
 800b762:	898b      	ldrh	r3, [r1, #12]
 800b764:	061b      	lsls	r3, r3, #24
 800b766:	b09d      	sub	sp, #116	; 0x74
 800b768:	4607      	mov	r7, r0
 800b76a:	460d      	mov	r5, r1
 800b76c:	4614      	mov	r4, r2
 800b76e:	d50e      	bpl.n	800b78e <_svfiprintf_r+0x32>
 800b770:	690b      	ldr	r3, [r1, #16]
 800b772:	b963      	cbnz	r3, 800b78e <_svfiprintf_r+0x32>
 800b774:	2140      	movs	r1, #64	; 0x40
 800b776:	f7ff fb8f 	bl	800ae98 <_malloc_r>
 800b77a:	6028      	str	r0, [r5, #0]
 800b77c:	6128      	str	r0, [r5, #16]
 800b77e:	b920      	cbnz	r0, 800b78a <_svfiprintf_r+0x2e>
 800b780:	230c      	movs	r3, #12
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	f04f 30ff 	mov.w	r0, #4294967295
 800b788:	e0d0      	b.n	800b92c <_svfiprintf_r+0x1d0>
 800b78a:	2340      	movs	r3, #64	; 0x40
 800b78c:	616b      	str	r3, [r5, #20]
 800b78e:	2300      	movs	r3, #0
 800b790:	9309      	str	r3, [sp, #36]	; 0x24
 800b792:	2320      	movs	r3, #32
 800b794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b798:	f8cd 800c 	str.w	r8, [sp, #12]
 800b79c:	2330      	movs	r3, #48	; 0x30
 800b79e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b944 <_svfiprintf_r+0x1e8>
 800b7a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7a6:	f04f 0901 	mov.w	r9, #1
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	469a      	mov	sl, r3
 800b7ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b2:	b10a      	cbz	r2, 800b7b8 <_svfiprintf_r+0x5c>
 800b7b4:	2a25      	cmp	r2, #37	; 0x25
 800b7b6:	d1f9      	bne.n	800b7ac <_svfiprintf_r+0x50>
 800b7b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7bc:	d00b      	beq.n	800b7d6 <_svfiprintf_r+0x7a>
 800b7be:	465b      	mov	r3, fp
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff ff6f 	bl	800b6a8 <__ssputs_r>
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	f000 80a9 	beq.w	800b922 <_svfiprintf_r+0x1c6>
 800b7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7d2:	445a      	add	r2, fp
 800b7d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 80a1 	beq.w	800b922 <_svfiprintf_r+0x1c6>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ea:	f10a 0a01 	add.w	sl, sl, #1
 800b7ee:	9304      	str	r3, [sp, #16]
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7f6:	931a      	str	r3, [sp, #104]	; 0x68
 800b7f8:	4654      	mov	r4, sl
 800b7fa:	2205      	movs	r2, #5
 800b7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b800:	4850      	ldr	r0, [pc, #320]	; (800b944 <_svfiprintf_r+0x1e8>)
 800b802:	f7f4 fd1d 	bl	8000240 <memchr>
 800b806:	9a04      	ldr	r2, [sp, #16]
 800b808:	b9d8      	cbnz	r0, 800b842 <_svfiprintf_r+0xe6>
 800b80a:	06d0      	lsls	r0, r2, #27
 800b80c:	bf44      	itt	mi
 800b80e:	2320      	movmi	r3, #32
 800b810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b814:	0711      	lsls	r1, r2, #28
 800b816:	bf44      	itt	mi
 800b818:	232b      	movmi	r3, #43	; 0x2b
 800b81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b81e:	f89a 3000 	ldrb.w	r3, [sl]
 800b822:	2b2a      	cmp	r3, #42	; 0x2a
 800b824:	d015      	beq.n	800b852 <_svfiprintf_r+0xf6>
 800b826:	9a07      	ldr	r2, [sp, #28]
 800b828:	4654      	mov	r4, sl
 800b82a:	2000      	movs	r0, #0
 800b82c:	f04f 0c0a 	mov.w	ip, #10
 800b830:	4621      	mov	r1, r4
 800b832:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b836:	3b30      	subs	r3, #48	; 0x30
 800b838:	2b09      	cmp	r3, #9
 800b83a:	d94d      	bls.n	800b8d8 <_svfiprintf_r+0x17c>
 800b83c:	b1b0      	cbz	r0, 800b86c <_svfiprintf_r+0x110>
 800b83e:	9207      	str	r2, [sp, #28]
 800b840:	e014      	b.n	800b86c <_svfiprintf_r+0x110>
 800b842:	eba0 0308 	sub.w	r3, r0, r8
 800b846:	fa09 f303 	lsl.w	r3, r9, r3
 800b84a:	4313      	orrs	r3, r2
 800b84c:	9304      	str	r3, [sp, #16]
 800b84e:	46a2      	mov	sl, r4
 800b850:	e7d2      	b.n	800b7f8 <_svfiprintf_r+0x9c>
 800b852:	9b03      	ldr	r3, [sp, #12]
 800b854:	1d19      	adds	r1, r3, #4
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	9103      	str	r1, [sp, #12]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bfbb      	ittet	lt
 800b85e:	425b      	neglt	r3, r3
 800b860:	f042 0202 	orrlt.w	r2, r2, #2
 800b864:	9307      	strge	r3, [sp, #28]
 800b866:	9307      	strlt	r3, [sp, #28]
 800b868:	bfb8      	it	lt
 800b86a:	9204      	strlt	r2, [sp, #16]
 800b86c:	7823      	ldrb	r3, [r4, #0]
 800b86e:	2b2e      	cmp	r3, #46	; 0x2e
 800b870:	d10c      	bne.n	800b88c <_svfiprintf_r+0x130>
 800b872:	7863      	ldrb	r3, [r4, #1]
 800b874:	2b2a      	cmp	r3, #42	; 0x2a
 800b876:	d134      	bne.n	800b8e2 <_svfiprintf_r+0x186>
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	1d1a      	adds	r2, r3, #4
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	9203      	str	r2, [sp, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	bfb8      	it	lt
 800b884:	f04f 33ff 	movlt.w	r3, #4294967295
 800b888:	3402      	adds	r4, #2
 800b88a:	9305      	str	r3, [sp, #20]
 800b88c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b954 <_svfiprintf_r+0x1f8>
 800b890:	7821      	ldrb	r1, [r4, #0]
 800b892:	2203      	movs	r2, #3
 800b894:	4650      	mov	r0, sl
 800b896:	f7f4 fcd3 	bl	8000240 <memchr>
 800b89a:	b138      	cbz	r0, 800b8ac <_svfiprintf_r+0x150>
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	eba0 000a 	sub.w	r0, r0, sl
 800b8a2:	2240      	movs	r2, #64	; 0x40
 800b8a4:	4082      	lsls	r2, r0
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	3401      	adds	r4, #1
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b0:	4825      	ldr	r0, [pc, #148]	; (800b948 <_svfiprintf_r+0x1ec>)
 800b8b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8b6:	2206      	movs	r2, #6
 800b8b8:	f7f4 fcc2 	bl	8000240 <memchr>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d038      	beq.n	800b932 <_svfiprintf_r+0x1d6>
 800b8c0:	4b22      	ldr	r3, [pc, #136]	; (800b94c <_svfiprintf_r+0x1f0>)
 800b8c2:	bb1b      	cbnz	r3, 800b90c <_svfiprintf_r+0x1b0>
 800b8c4:	9b03      	ldr	r3, [sp, #12]
 800b8c6:	3307      	adds	r3, #7
 800b8c8:	f023 0307 	bic.w	r3, r3, #7
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	9303      	str	r3, [sp, #12]
 800b8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d2:	4433      	add	r3, r6
 800b8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d6:	e768      	b.n	800b7aa <_svfiprintf_r+0x4e>
 800b8d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8dc:	460c      	mov	r4, r1
 800b8de:	2001      	movs	r0, #1
 800b8e0:	e7a6      	b.n	800b830 <_svfiprintf_r+0xd4>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	3401      	adds	r4, #1
 800b8e6:	9305      	str	r3, [sp, #20]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	f04f 0c0a 	mov.w	ip, #10
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f4:	3a30      	subs	r2, #48	; 0x30
 800b8f6:	2a09      	cmp	r2, #9
 800b8f8:	d903      	bls.n	800b902 <_svfiprintf_r+0x1a6>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0c6      	beq.n	800b88c <_svfiprintf_r+0x130>
 800b8fe:	9105      	str	r1, [sp, #20]
 800b900:	e7c4      	b.n	800b88c <_svfiprintf_r+0x130>
 800b902:	fb0c 2101 	mla	r1, ip, r1, r2
 800b906:	4604      	mov	r4, r0
 800b908:	2301      	movs	r3, #1
 800b90a:	e7f0      	b.n	800b8ee <_svfiprintf_r+0x192>
 800b90c:	ab03      	add	r3, sp, #12
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	462a      	mov	r2, r5
 800b912:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <_svfiprintf_r+0x1f4>)
 800b914:	a904      	add	r1, sp, #16
 800b916:	4638      	mov	r0, r7
 800b918:	f7fd fea2 	bl	8009660 <_printf_float>
 800b91c:	1c42      	adds	r2, r0, #1
 800b91e:	4606      	mov	r6, r0
 800b920:	d1d6      	bne.n	800b8d0 <_svfiprintf_r+0x174>
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	065b      	lsls	r3, r3, #25
 800b926:	f53f af2d 	bmi.w	800b784 <_svfiprintf_r+0x28>
 800b92a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b92c:	b01d      	add	sp, #116	; 0x74
 800b92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b932:	ab03      	add	r3, sp, #12
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	462a      	mov	r2, r5
 800b938:	4b05      	ldr	r3, [pc, #20]	; (800b950 <_svfiprintf_r+0x1f4>)
 800b93a:	a904      	add	r1, sp, #16
 800b93c:	4638      	mov	r0, r7
 800b93e:	f7fe f917 	bl	8009b70 <_printf_i>
 800b942:	e7eb      	b.n	800b91c <_svfiprintf_r+0x1c0>
 800b944:	0800c664 	.word	0x0800c664
 800b948:	0800c66e 	.word	0x0800c66e
 800b94c:	08009661 	.word	0x08009661
 800b950:	0800b6a9 	.word	0x0800b6a9
 800b954:	0800c66a 	.word	0x0800c66a

0800b958 <__sflush_r>:
 800b958:	898a      	ldrh	r2, [r1, #12]
 800b95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95e:	4605      	mov	r5, r0
 800b960:	0710      	lsls	r0, r2, #28
 800b962:	460c      	mov	r4, r1
 800b964:	d458      	bmi.n	800ba18 <__sflush_r+0xc0>
 800b966:	684b      	ldr	r3, [r1, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	dc05      	bgt.n	800b978 <__sflush_r+0x20>
 800b96c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dc02      	bgt.n	800b978 <__sflush_r+0x20>
 800b972:	2000      	movs	r0, #0
 800b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b97a:	2e00      	cmp	r6, #0
 800b97c:	d0f9      	beq.n	800b972 <__sflush_r+0x1a>
 800b97e:	2300      	movs	r3, #0
 800b980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b984:	682f      	ldr	r7, [r5, #0]
 800b986:	6a21      	ldr	r1, [r4, #32]
 800b988:	602b      	str	r3, [r5, #0]
 800b98a:	d032      	beq.n	800b9f2 <__sflush_r+0x9a>
 800b98c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	075a      	lsls	r2, r3, #29
 800b992:	d505      	bpl.n	800b9a0 <__sflush_r+0x48>
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	1ac0      	subs	r0, r0, r3
 800b998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b99a:	b10b      	cbz	r3, 800b9a0 <__sflush_r+0x48>
 800b99c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b99e:	1ac0      	subs	r0, r0, r3
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9a6:	6a21      	ldr	r1, [r4, #32]
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	47b0      	blx	r6
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	d106      	bne.n	800b9c0 <__sflush_r+0x68>
 800b9b2:	6829      	ldr	r1, [r5, #0]
 800b9b4:	291d      	cmp	r1, #29
 800b9b6:	d82b      	bhi.n	800ba10 <__sflush_r+0xb8>
 800b9b8:	4a29      	ldr	r2, [pc, #164]	; (800ba60 <__sflush_r+0x108>)
 800b9ba:	410a      	asrs	r2, r1
 800b9bc:	07d6      	lsls	r6, r2, #31
 800b9be:	d427      	bmi.n	800ba10 <__sflush_r+0xb8>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	6062      	str	r2, [r4, #4]
 800b9c4:	04d9      	lsls	r1, r3, #19
 800b9c6:	6922      	ldr	r2, [r4, #16]
 800b9c8:	6022      	str	r2, [r4, #0]
 800b9ca:	d504      	bpl.n	800b9d6 <__sflush_r+0x7e>
 800b9cc:	1c42      	adds	r2, r0, #1
 800b9ce:	d101      	bne.n	800b9d4 <__sflush_r+0x7c>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	b903      	cbnz	r3, 800b9d6 <__sflush_r+0x7e>
 800b9d4:	6560      	str	r0, [r4, #84]	; 0x54
 800b9d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9d8:	602f      	str	r7, [r5, #0]
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	d0c9      	beq.n	800b972 <__sflush_r+0x1a>
 800b9de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9e2:	4299      	cmp	r1, r3
 800b9e4:	d002      	beq.n	800b9ec <__sflush_r+0x94>
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f7ff f9e2 	bl	800adb0 <_free_r>
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	6360      	str	r0, [r4, #52]	; 0x34
 800b9f0:	e7c0      	b.n	800b974 <__sflush_r+0x1c>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	47b0      	blx	r6
 800b9f8:	1c41      	adds	r1, r0, #1
 800b9fa:	d1c8      	bne.n	800b98e <__sflush_r+0x36>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0c5      	beq.n	800b98e <__sflush_r+0x36>
 800ba02:	2b1d      	cmp	r3, #29
 800ba04:	d001      	beq.n	800ba0a <__sflush_r+0xb2>
 800ba06:	2b16      	cmp	r3, #22
 800ba08:	d101      	bne.n	800ba0e <__sflush_r+0xb6>
 800ba0a:	602f      	str	r7, [r5, #0]
 800ba0c:	e7b1      	b.n	800b972 <__sflush_r+0x1a>
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba14:	81a3      	strh	r3, [r4, #12]
 800ba16:	e7ad      	b.n	800b974 <__sflush_r+0x1c>
 800ba18:	690f      	ldr	r7, [r1, #16]
 800ba1a:	2f00      	cmp	r7, #0
 800ba1c:	d0a9      	beq.n	800b972 <__sflush_r+0x1a>
 800ba1e:	0793      	lsls	r3, r2, #30
 800ba20:	680e      	ldr	r6, [r1, #0]
 800ba22:	bf08      	it	eq
 800ba24:	694b      	ldreq	r3, [r1, #20]
 800ba26:	600f      	str	r7, [r1, #0]
 800ba28:	bf18      	it	ne
 800ba2a:	2300      	movne	r3, #0
 800ba2c:	eba6 0807 	sub.w	r8, r6, r7
 800ba30:	608b      	str	r3, [r1, #8]
 800ba32:	f1b8 0f00 	cmp.w	r8, #0
 800ba36:	dd9c      	ble.n	800b972 <__sflush_r+0x1a>
 800ba38:	6a21      	ldr	r1, [r4, #32]
 800ba3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba3c:	4643      	mov	r3, r8
 800ba3e:	463a      	mov	r2, r7
 800ba40:	4628      	mov	r0, r5
 800ba42:	47b0      	blx	r6
 800ba44:	2800      	cmp	r0, #0
 800ba46:	dc06      	bgt.n	800ba56 <__sflush_r+0xfe>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295
 800ba54:	e78e      	b.n	800b974 <__sflush_r+0x1c>
 800ba56:	4407      	add	r7, r0
 800ba58:	eba8 0800 	sub.w	r8, r8, r0
 800ba5c:	e7e9      	b.n	800ba32 <__sflush_r+0xda>
 800ba5e:	bf00      	nop
 800ba60:	dfbffffe 	.word	0xdfbffffe

0800ba64 <_fflush_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	690b      	ldr	r3, [r1, #16]
 800ba68:	4605      	mov	r5, r0
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	b913      	cbnz	r3, 800ba74 <_fflush_r+0x10>
 800ba6e:	2500      	movs	r5, #0
 800ba70:	4628      	mov	r0, r5
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	b118      	cbz	r0, 800ba7e <_fflush_r+0x1a>
 800ba76:	6a03      	ldr	r3, [r0, #32]
 800ba78:	b90b      	cbnz	r3, 800ba7e <_fflush_r+0x1a>
 800ba7a:	f7fe fa27 	bl	8009ecc <__sinit>
 800ba7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0f3      	beq.n	800ba6e <_fflush_r+0xa>
 800ba86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba88:	07d0      	lsls	r0, r2, #31
 800ba8a:	d404      	bmi.n	800ba96 <_fflush_r+0x32>
 800ba8c:	0599      	lsls	r1, r3, #22
 800ba8e:	d402      	bmi.n	800ba96 <_fflush_r+0x32>
 800ba90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba92:	f7fe fb88 	bl	800a1a6 <__retarget_lock_acquire_recursive>
 800ba96:	4628      	mov	r0, r5
 800ba98:	4621      	mov	r1, r4
 800ba9a:	f7ff ff5d 	bl	800b958 <__sflush_r>
 800ba9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baa0:	07da      	lsls	r2, r3, #31
 800baa2:	4605      	mov	r5, r0
 800baa4:	d4e4      	bmi.n	800ba70 <_fflush_r+0xc>
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	059b      	lsls	r3, r3, #22
 800baaa:	d4e1      	bmi.n	800ba70 <_fflush_r+0xc>
 800baac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baae:	f7fe fb7b 	bl	800a1a8 <__retarget_lock_release_recursive>
 800bab2:	e7dd      	b.n	800ba70 <_fflush_r+0xc>

0800bab4 <memmove>:
 800bab4:	4288      	cmp	r0, r1
 800bab6:	b510      	push	{r4, lr}
 800bab8:	eb01 0402 	add.w	r4, r1, r2
 800babc:	d902      	bls.n	800bac4 <memmove+0x10>
 800babe:	4284      	cmp	r4, r0
 800bac0:	4623      	mov	r3, r4
 800bac2:	d807      	bhi.n	800bad4 <memmove+0x20>
 800bac4:	1e43      	subs	r3, r0, #1
 800bac6:	42a1      	cmp	r1, r4
 800bac8:	d008      	beq.n	800badc <memmove+0x28>
 800baca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bace:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bad2:	e7f8      	b.n	800bac6 <memmove+0x12>
 800bad4:	4402      	add	r2, r0
 800bad6:	4601      	mov	r1, r0
 800bad8:	428a      	cmp	r2, r1
 800bada:	d100      	bne.n	800bade <memmove+0x2a>
 800badc:	bd10      	pop	{r4, pc}
 800bade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bae6:	e7f7      	b.n	800bad8 <memmove+0x24>

0800bae8 <_sbrk_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d06      	ldr	r5, [pc, #24]	; (800bb04 <_sbrk_r+0x1c>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	602b      	str	r3, [r5, #0]
 800baf4:	f7f5 ff38 	bl	8001968 <_sbrk>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_sbrk_r+0x1a>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_sbrk_r+0x1a>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	20005430 	.word	0x20005430

0800bb08 <__assert_func>:
 800bb08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb0a:	4614      	mov	r4, r2
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <__assert_func+0x2c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4605      	mov	r5, r0
 800bb14:	68d8      	ldr	r0, [r3, #12]
 800bb16:	b14c      	cbz	r4, 800bb2c <__assert_func+0x24>
 800bb18:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <__assert_func+0x30>)
 800bb1a:	9100      	str	r1, [sp, #0]
 800bb1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb20:	4906      	ldr	r1, [pc, #24]	; (800bb3c <__assert_func+0x34>)
 800bb22:	462b      	mov	r3, r5
 800bb24:	f000 f872 	bl	800bc0c <fiprintf>
 800bb28:	f000 f882 	bl	800bc30 <abort>
 800bb2c:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <__assert_func+0x38>)
 800bb2e:	461c      	mov	r4, r3
 800bb30:	e7f3      	b.n	800bb1a <__assert_func+0x12>
 800bb32:	bf00      	nop
 800bb34:	20000094 	.word	0x20000094
 800bb38:	0800c67f 	.word	0x0800c67f
 800bb3c:	0800c68c 	.word	0x0800c68c
 800bb40:	0800c6ba 	.word	0x0800c6ba

0800bb44 <_calloc_r>:
 800bb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb46:	fba1 2402 	umull	r2, r4, r1, r2
 800bb4a:	b94c      	cbnz	r4, 800bb60 <_calloc_r+0x1c>
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	9201      	str	r2, [sp, #4]
 800bb50:	f7ff f9a2 	bl	800ae98 <_malloc_r>
 800bb54:	9a01      	ldr	r2, [sp, #4]
 800bb56:	4605      	mov	r5, r0
 800bb58:	b930      	cbnz	r0, 800bb68 <_calloc_r+0x24>
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	b003      	add	sp, #12
 800bb5e:	bd30      	pop	{r4, r5, pc}
 800bb60:	220c      	movs	r2, #12
 800bb62:	6002      	str	r2, [r0, #0]
 800bb64:	2500      	movs	r5, #0
 800bb66:	e7f8      	b.n	800bb5a <_calloc_r+0x16>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	f7fe fa48 	bl	8009ffe <memset>
 800bb6e:	e7f4      	b.n	800bb5a <_calloc_r+0x16>

0800bb70 <__ascii_mbtowc>:
 800bb70:	b082      	sub	sp, #8
 800bb72:	b901      	cbnz	r1, 800bb76 <__ascii_mbtowc+0x6>
 800bb74:	a901      	add	r1, sp, #4
 800bb76:	b142      	cbz	r2, 800bb8a <__ascii_mbtowc+0x1a>
 800bb78:	b14b      	cbz	r3, 800bb8e <__ascii_mbtowc+0x1e>
 800bb7a:	7813      	ldrb	r3, [r2, #0]
 800bb7c:	600b      	str	r3, [r1, #0]
 800bb7e:	7812      	ldrb	r2, [r2, #0]
 800bb80:	1e10      	subs	r0, r2, #0
 800bb82:	bf18      	it	ne
 800bb84:	2001      	movne	r0, #1
 800bb86:	b002      	add	sp, #8
 800bb88:	4770      	bx	lr
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	e7fb      	b.n	800bb86 <__ascii_mbtowc+0x16>
 800bb8e:	f06f 0001 	mvn.w	r0, #1
 800bb92:	e7f8      	b.n	800bb86 <__ascii_mbtowc+0x16>

0800bb94 <_realloc_r>:
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	4680      	mov	r8, r0
 800bb9a:	4614      	mov	r4, r2
 800bb9c:	460e      	mov	r6, r1
 800bb9e:	b921      	cbnz	r1, 800bbaa <_realloc_r+0x16>
 800bba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	4611      	mov	r1, r2
 800bba6:	f7ff b977 	b.w	800ae98 <_malloc_r>
 800bbaa:	b92a      	cbnz	r2, 800bbb8 <_realloc_r+0x24>
 800bbac:	f7ff f900 	bl	800adb0 <_free_r>
 800bbb0:	4625      	mov	r5, r4
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb8:	f000 f841 	bl	800bc3e <_malloc_usable_size_r>
 800bbbc:	4284      	cmp	r4, r0
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	d802      	bhi.n	800bbc8 <_realloc_r+0x34>
 800bbc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbc6:	d812      	bhi.n	800bbee <_realloc_r+0x5a>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4640      	mov	r0, r8
 800bbcc:	f7ff f964 	bl	800ae98 <_malloc_r>
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0ed      	beq.n	800bbb2 <_realloc_r+0x1e>
 800bbd6:	42bc      	cmp	r4, r7
 800bbd8:	4622      	mov	r2, r4
 800bbda:	4631      	mov	r1, r6
 800bbdc:	bf28      	it	cs
 800bbde:	463a      	movcs	r2, r7
 800bbe0:	f7fe fae3 	bl	800a1aa <memcpy>
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f7ff f8e2 	bl	800adb0 <_free_r>
 800bbec:	e7e1      	b.n	800bbb2 <_realloc_r+0x1e>
 800bbee:	4635      	mov	r5, r6
 800bbf0:	e7df      	b.n	800bbb2 <_realloc_r+0x1e>

0800bbf2 <__ascii_wctomb>:
 800bbf2:	b149      	cbz	r1, 800bc08 <__ascii_wctomb+0x16>
 800bbf4:	2aff      	cmp	r2, #255	; 0xff
 800bbf6:	bf85      	ittet	hi
 800bbf8:	238a      	movhi	r3, #138	; 0x8a
 800bbfa:	6003      	strhi	r3, [r0, #0]
 800bbfc:	700a      	strbls	r2, [r1, #0]
 800bbfe:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc02:	bf98      	it	ls
 800bc04:	2001      	movls	r0, #1
 800bc06:	4770      	bx	lr
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4770      	bx	lr

0800bc0c <fiprintf>:
 800bc0c:	b40e      	push	{r1, r2, r3}
 800bc0e:	b503      	push	{r0, r1, lr}
 800bc10:	4601      	mov	r1, r0
 800bc12:	ab03      	add	r3, sp, #12
 800bc14:	4805      	ldr	r0, [pc, #20]	; (800bc2c <fiprintf+0x20>)
 800bc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	f000 f83f 	bl	800bca0 <_vfiprintf_r>
 800bc22:	b002      	add	sp, #8
 800bc24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc28:	b003      	add	sp, #12
 800bc2a:	4770      	bx	lr
 800bc2c:	20000094 	.word	0x20000094

0800bc30 <abort>:
 800bc30:	b508      	push	{r3, lr}
 800bc32:	2006      	movs	r0, #6
 800bc34:	f000 fa0c 	bl	800c050 <raise>
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f7f5 fe1d 	bl	8001878 <_exit>

0800bc3e <_malloc_usable_size_r>:
 800bc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc42:	1f18      	subs	r0, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bfbc      	itt	lt
 800bc48:	580b      	ldrlt	r3, [r1, r0]
 800bc4a:	18c0      	addlt	r0, r0, r3
 800bc4c:	4770      	bx	lr

0800bc4e <__sfputc_r>:
 800bc4e:	6893      	ldr	r3, [r2, #8]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	b410      	push	{r4}
 800bc56:	6093      	str	r3, [r2, #8]
 800bc58:	da08      	bge.n	800bc6c <__sfputc_r+0x1e>
 800bc5a:	6994      	ldr	r4, [r2, #24]
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	db01      	blt.n	800bc64 <__sfputc_r+0x16>
 800bc60:	290a      	cmp	r1, #10
 800bc62:	d103      	bne.n	800bc6c <__sfputc_r+0x1e>
 800bc64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc68:	f000 b934 	b.w	800bed4 <__swbuf_r>
 800bc6c:	6813      	ldr	r3, [r2, #0]
 800bc6e:	1c58      	adds	r0, r3, #1
 800bc70:	6010      	str	r0, [r2, #0]
 800bc72:	7019      	strb	r1, [r3, #0]
 800bc74:	4608      	mov	r0, r1
 800bc76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <__sfputs_r>:
 800bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7e:	4606      	mov	r6, r0
 800bc80:	460f      	mov	r7, r1
 800bc82:	4614      	mov	r4, r2
 800bc84:	18d5      	adds	r5, r2, r3
 800bc86:	42ac      	cmp	r4, r5
 800bc88:	d101      	bne.n	800bc8e <__sfputs_r+0x12>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	e007      	b.n	800bc9e <__sfputs_r+0x22>
 800bc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc92:	463a      	mov	r2, r7
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff ffda 	bl	800bc4e <__sfputc_r>
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	d1f3      	bne.n	800bc86 <__sfputs_r+0xa>
 800bc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bca0 <_vfiprintf_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	460d      	mov	r5, r1
 800bca6:	b09d      	sub	sp, #116	; 0x74
 800bca8:	4614      	mov	r4, r2
 800bcaa:	4698      	mov	r8, r3
 800bcac:	4606      	mov	r6, r0
 800bcae:	b118      	cbz	r0, 800bcb8 <_vfiprintf_r+0x18>
 800bcb0:	6a03      	ldr	r3, [r0, #32]
 800bcb2:	b90b      	cbnz	r3, 800bcb8 <_vfiprintf_r+0x18>
 800bcb4:	f7fe f90a 	bl	8009ecc <__sinit>
 800bcb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcba:	07d9      	lsls	r1, r3, #31
 800bcbc:	d405      	bmi.n	800bcca <_vfiprintf_r+0x2a>
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	059a      	lsls	r2, r3, #22
 800bcc2:	d402      	bmi.n	800bcca <_vfiprintf_r+0x2a>
 800bcc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcc6:	f7fe fa6e 	bl	800a1a6 <__retarget_lock_acquire_recursive>
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	071b      	lsls	r3, r3, #28
 800bcce:	d501      	bpl.n	800bcd4 <_vfiprintf_r+0x34>
 800bcd0:	692b      	ldr	r3, [r5, #16]
 800bcd2:	b99b      	cbnz	r3, 800bcfc <_vfiprintf_r+0x5c>
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f000 f93a 	bl	800bf50 <__swsetup_r>
 800bcdc:	b170      	cbz	r0, 800bcfc <_vfiprintf_r+0x5c>
 800bcde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bce0:	07dc      	lsls	r4, r3, #31
 800bce2:	d504      	bpl.n	800bcee <_vfiprintf_r+0x4e>
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	b01d      	add	sp, #116	; 0x74
 800bcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	0598      	lsls	r0, r3, #22
 800bcf2:	d4f7      	bmi.n	800bce4 <_vfiprintf_r+0x44>
 800bcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf6:	f7fe fa57 	bl	800a1a8 <__retarget_lock_release_recursive>
 800bcfa:	e7f3      	b.n	800bce4 <_vfiprintf_r+0x44>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bd00:	2320      	movs	r3, #32
 800bd02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd0a:	2330      	movs	r3, #48	; 0x30
 800bd0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bec0 <_vfiprintf_r+0x220>
 800bd10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd14:	f04f 0901 	mov.w	r9, #1
 800bd18:	4623      	mov	r3, r4
 800bd1a:	469a      	mov	sl, r3
 800bd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd20:	b10a      	cbz	r2, 800bd26 <_vfiprintf_r+0x86>
 800bd22:	2a25      	cmp	r2, #37	; 0x25
 800bd24:	d1f9      	bne.n	800bd1a <_vfiprintf_r+0x7a>
 800bd26:	ebba 0b04 	subs.w	fp, sl, r4
 800bd2a:	d00b      	beq.n	800bd44 <_vfiprintf_r+0xa4>
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	4622      	mov	r2, r4
 800bd30:	4629      	mov	r1, r5
 800bd32:	4630      	mov	r0, r6
 800bd34:	f7ff ffa2 	bl	800bc7c <__sfputs_r>
 800bd38:	3001      	adds	r0, #1
 800bd3a:	f000 80a9 	beq.w	800be90 <_vfiprintf_r+0x1f0>
 800bd3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd40:	445a      	add	r2, fp
 800bd42:	9209      	str	r2, [sp, #36]	; 0x24
 800bd44:	f89a 3000 	ldrb.w	r3, [sl]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 80a1 	beq.w	800be90 <_vfiprintf_r+0x1f0>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f04f 32ff 	mov.w	r2, #4294967295
 800bd54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd58:	f10a 0a01 	add.w	sl, sl, #1
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	9307      	str	r3, [sp, #28]
 800bd60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd64:	931a      	str	r3, [sp, #104]	; 0x68
 800bd66:	4654      	mov	r4, sl
 800bd68:	2205      	movs	r2, #5
 800bd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6e:	4854      	ldr	r0, [pc, #336]	; (800bec0 <_vfiprintf_r+0x220>)
 800bd70:	f7f4 fa66 	bl	8000240 <memchr>
 800bd74:	9a04      	ldr	r2, [sp, #16]
 800bd76:	b9d8      	cbnz	r0, 800bdb0 <_vfiprintf_r+0x110>
 800bd78:	06d1      	lsls	r1, r2, #27
 800bd7a:	bf44      	itt	mi
 800bd7c:	2320      	movmi	r3, #32
 800bd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd82:	0713      	lsls	r3, r2, #28
 800bd84:	bf44      	itt	mi
 800bd86:	232b      	movmi	r3, #43	; 0x2b
 800bd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd90:	2b2a      	cmp	r3, #42	; 0x2a
 800bd92:	d015      	beq.n	800bdc0 <_vfiprintf_r+0x120>
 800bd94:	9a07      	ldr	r2, [sp, #28]
 800bd96:	4654      	mov	r4, sl
 800bd98:	2000      	movs	r0, #0
 800bd9a:	f04f 0c0a 	mov.w	ip, #10
 800bd9e:	4621      	mov	r1, r4
 800bda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda4:	3b30      	subs	r3, #48	; 0x30
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	d94d      	bls.n	800be46 <_vfiprintf_r+0x1a6>
 800bdaa:	b1b0      	cbz	r0, 800bdda <_vfiprintf_r+0x13a>
 800bdac:	9207      	str	r2, [sp, #28]
 800bdae:	e014      	b.n	800bdda <_vfiprintf_r+0x13a>
 800bdb0:	eba0 0308 	sub.w	r3, r0, r8
 800bdb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	46a2      	mov	sl, r4
 800bdbe:	e7d2      	b.n	800bd66 <_vfiprintf_r+0xc6>
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	1d19      	adds	r1, r3, #4
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	9103      	str	r1, [sp, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	bfbb      	ittet	lt
 800bdcc:	425b      	neglt	r3, r3
 800bdce:	f042 0202 	orrlt.w	r2, r2, #2
 800bdd2:	9307      	strge	r3, [sp, #28]
 800bdd4:	9307      	strlt	r3, [sp, #28]
 800bdd6:	bfb8      	it	lt
 800bdd8:	9204      	strlt	r2, [sp, #16]
 800bdda:	7823      	ldrb	r3, [r4, #0]
 800bddc:	2b2e      	cmp	r3, #46	; 0x2e
 800bdde:	d10c      	bne.n	800bdfa <_vfiprintf_r+0x15a>
 800bde0:	7863      	ldrb	r3, [r4, #1]
 800bde2:	2b2a      	cmp	r3, #42	; 0x2a
 800bde4:	d134      	bne.n	800be50 <_vfiprintf_r+0x1b0>
 800bde6:	9b03      	ldr	r3, [sp, #12]
 800bde8:	1d1a      	adds	r2, r3, #4
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	9203      	str	r2, [sp, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	bfb8      	it	lt
 800bdf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdf6:	3402      	adds	r4, #2
 800bdf8:	9305      	str	r3, [sp, #20]
 800bdfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bed0 <_vfiprintf_r+0x230>
 800bdfe:	7821      	ldrb	r1, [r4, #0]
 800be00:	2203      	movs	r2, #3
 800be02:	4650      	mov	r0, sl
 800be04:	f7f4 fa1c 	bl	8000240 <memchr>
 800be08:	b138      	cbz	r0, 800be1a <_vfiprintf_r+0x17a>
 800be0a:	9b04      	ldr	r3, [sp, #16]
 800be0c:	eba0 000a 	sub.w	r0, r0, sl
 800be10:	2240      	movs	r2, #64	; 0x40
 800be12:	4082      	lsls	r2, r0
 800be14:	4313      	orrs	r3, r2
 800be16:	3401      	adds	r4, #1
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1e:	4829      	ldr	r0, [pc, #164]	; (800bec4 <_vfiprintf_r+0x224>)
 800be20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be24:	2206      	movs	r2, #6
 800be26:	f7f4 fa0b 	bl	8000240 <memchr>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d03f      	beq.n	800beae <_vfiprintf_r+0x20e>
 800be2e:	4b26      	ldr	r3, [pc, #152]	; (800bec8 <_vfiprintf_r+0x228>)
 800be30:	bb1b      	cbnz	r3, 800be7a <_vfiprintf_r+0x1da>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	3307      	adds	r3, #7
 800be36:	f023 0307 	bic.w	r3, r3, #7
 800be3a:	3308      	adds	r3, #8
 800be3c:	9303      	str	r3, [sp, #12]
 800be3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be40:	443b      	add	r3, r7
 800be42:	9309      	str	r3, [sp, #36]	; 0x24
 800be44:	e768      	b.n	800bd18 <_vfiprintf_r+0x78>
 800be46:	fb0c 3202 	mla	r2, ip, r2, r3
 800be4a:	460c      	mov	r4, r1
 800be4c:	2001      	movs	r0, #1
 800be4e:	e7a6      	b.n	800bd9e <_vfiprintf_r+0xfe>
 800be50:	2300      	movs	r3, #0
 800be52:	3401      	adds	r4, #1
 800be54:	9305      	str	r3, [sp, #20]
 800be56:	4619      	mov	r1, r3
 800be58:	f04f 0c0a 	mov.w	ip, #10
 800be5c:	4620      	mov	r0, r4
 800be5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be62:	3a30      	subs	r2, #48	; 0x30
 800be64:	2a09      	cmp	r2, #9
 800be66:	d903      	bls.n	800be70 <_vfiprintf_r+0x1d0>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0c6      	beq.n	800bdfa <_vfiprintf_r+0x15a>
 800be6c:	9105      	str	r1, [sp, #20]
 800be6e:	e7c4      	b.n	800bdfa <_vfiprintf_r+0x15a>
 800be70:	fb0c 2101 	mla	r1, ip, r1, r2
 800be74:	4604      	mov	r4, r0
 800be76:	2301      	movs	r3, #1
 800be78:	e7f0      	b.n	800be5c <_vfiprintf_r+0x1bc>
 800be7a:	ab03      	add	r3, sp, #12
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	462a      	mov	r2, r5
 800be80:	4b12      	ldr	r3, [pc, #72]	; (800becc <_vfiprintf_r+0x22c>)
 800be82:	a904      	add	r1, sp, #16
 800be84:	4630      	mov	r0, r6
 800be86:	f7fd fbeb 	bl	8009660 <_printf_float>
 800be8a:	4607      	mov	r7, r0
 800be8c:	1c78      	adds	r0, r7, #1
 800be8e:	d1d6      	bne.n	800be3e <_vfiprintf_r+0x19e>
 800be90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be92:	07d9      	lsls	r1, r3, #31
 800be94:	d405      	bmi.n	800bea2 <_vfiprintf_r+0x202>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	059a      	lsls	r2, r3, #22
 800be9a:	d402      	bmi.n	800bea2 <_vfiprintf_r+0x202>
 800be9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be9e:	f7fe f983 	bl	800a1a8 <__retarget_lock_release_recursive>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	065b      	lsls	r3, r3, #25
 800bea6:	f53f af1d 	bmi.w	800bce4 <_vfiprintf_r+0x44>
 800beaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beac:	e71c      	b.n	800bce8 <_vfiprintf_r+0x48>
 800beae:	ab03      	add	r3, sp, #12
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	462a      	mov	r2, r5
 800beb4:	4b05      	ldr	r3, [pc, #20]	; (800becc <_vfiprintf_r+0x22c>)
 800beb6:	a904      	add	r1, sp, #16
 800beb8:	4630      	mov	r0, r6
 800beba:	f7fd fe59 	bl	8009b70 <_printf_i>
 800bebe:	e7e4      	b.n	800be8a <_vfiprintf_r+0x1ea>
 800bec0:	0800c664 	.word	0x0800c664
 800bec4:	0800c66e 	.word	0x0800c66e
 800bec8:	08009661 	.word	0x08009661
 800becc:	0800bc7d 	.word	0x0800bc7d
 800bed0:	0800c66a 	.word	0x0800c66a

0800bed4 <__swbuf_r>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	460e      	mov	r6, r1
 800bed8:	4614      	mov	r4, r2
 800beda:	4605      	mov	r5, r0
 800bedc:	b118      	cbz	r0, 800bee6 <__swbuf_r+0x12>
 800bede:	6a03      	ldr	r3, [r0, #32]
 800bee0:	b90b      	cbnz	r3, 800bee6 <__swbuf_r+0x12>
 800bee2:	f7fd fff3 	bl	8009ecc <__sinit>
 800bee6:	69a3      	ldr	r3, [r4, #24]
 800bee8:	60a3      	str	r3, [r4, #8]
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	071a      	lsls	r2, r3, #28
 800beee:	d525      	bpl.n	800bf3c <__swbuf_r+0x68>
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	b31b      	cbz	r3, 800bf3c <__swbuf_r+0x68>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	6922      	ldr	r2, [r4, #16]
 800bef8:	1a98      	subs	r0, r3, r2
 800befa:	6963      	ldr	r3, [r4, #20]
 800befc:	b2f6      	uxtb	r6, r6
 800befe:	4283      	cmp	r3, r0
 800bf00:	4637      	mov	r7, r6
 800bf02:	dc04      	bgt.n	800bf0e <__swbuf_r+0x3a>
 800bf04:	4621      	mov	r1, r4
 800bf06:	4628      	mov	r0, r5
 800bf08:	f7ff fdac 	bl	800ba64 <_fflush_r>
 800bf0c:	b9e0      	cbnz	r0, 800bf48 <__swbuf_r+0x74>
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	3b01      	subs	r3, #1
 800bf12:	60a3      	str	r3, [r4, #8]
 800bf14:	6823      	ldr	r3, [r4, #0]
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	6022      	str	r2, [r4, #0]
 800bf1a:	701e      	strb	r6, [r3, #0]
 800bf1c:	6962      	ldr	r2, [r4, #20]
 800bf1e:	1c43      	adds	r3, r0, #1
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d004      	beq.n	800bf2e <__swbuf_r+0x5a>
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	07db      	lsls	r3, r3, #31
 800bf28:	d506      	bpl.n	800bf38 <__swbuf_r+0x64>
 800bf2a:	2e0a      	cmp	r6, #10
 800bf2c:	d104      	bne.n	800bf38 <__swbuf_r+0x64>
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4628      	mov	r0, r5
 800bf32:	f7ff fd97 	bl	800ba64 <_fflush_r>
 800bf36:	b938      	cbnz	r0, 800bf48 <__swbuf_r+0x74>
 800bf38:	4638      	mov	r0, r7
 800bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4628      	mov	r0, r5
 800bf40:	f000 f806 	bl	800bf50 <__swsetup_r>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d0d5      	beq.n	800bef4 <__swbuf_r+0x20>
 800bf48:	f04f 37ff 	mov.w	r7, #4294967295
 800bf4c:	e7f4      	b.n	800bf38 <__swbuf_r+0x64>
	...

0800bf50 <__swsetup_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4b2a      	ldr	r3, [pc, #168]	; (800bffc <__swsetup_r+0xac>)
 800bf54:	4605      	mov	r5, r0
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	460c      	mov	r4, r1
 800bf5a:	b118      	cbz	r0, 800bf64 <__swsetup_r+0x14>
 800bf5c:	6a03      	ldr	r3, [r0, #32]
 800bf5e:	b90b      	cbnz	r3, 800bf64 <__swsetup_r+0x14>
 800bf60:	f7fd ffb4 	bl	8009ecc <__sinit>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf6a:	0718      	lsls	r0, r3, #28
 800bf6c:	d422      	bmi.n	800bfb4 <__swsetup_r+0x64>
 800bf6e:	06d9      	lsls	r1, r3, #27
 800bf70:	d407      	bmi.n	800bf82 <__swsetup_r+0x32>
 800bf72:	2309      	movs	r3, #9
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	e034      	b.n	800bfec <__swsetup_r+0x9c>
 800bf82:	0758      	lsls	r0, r3, #29
 800bf84:	d512      	bpl.n	800bfac <__swsetup_r+0x5c>
 800bf86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf88:	b141      	cbz	r1, 800bf9c <__swsetup_r+0x4c>
 800bf8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf8e:	4299      	cmp	r1, r3
 800bf90:	d002      	beq.n	800bf98 <__swsetup_r+0x48>
 800bf92:	4628      	mov	r0, r5
 800bf94:	f7fe ff0c 	bl	800adb0 <_free_r>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	6363      	str	r3, [r4, #52]	; 0x34
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	6063      	str	r3, [r4, #4]
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f043 0308 	orr.w	r3, r3, #8
 800bfb2:	81a3      	strh	r3, [r4, #12]
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	b94b      	cbnz	r3, 800bfcc <__swsetup_r+0x7c>
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfc2:	d003      	beq.n	800bfcc <__swsetup_r+0x7c>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f000 f884 	bl	800c0d4 <__smakebuf_r>
 800bfcc:	89a0      	ldrh	r0, [r4, #12]
 800bfce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfd2:	f010 0301 	ands.w	r3, r0, #1
 800bfd6:	d00a      	beq.n	800bfee <__swsetup_r+0x9e>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60a3      	str	r3, [r4, #8]
 800bfdc:	6963      	ldr	r3, [r4, #20]
 800bfde:	425b      	negs	r3, r3
 800bfe0:	61a3      	str	r3, [r4, #24]
 800bfe2:	6923      	ldr	r3, [r4, #16]
 800bfe4:	b943      	cbnz	r3, 800bff8 <__swsetup_r+0xa8>
 800bfe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfea:	d1c4      	bne.n	800bf76 <__swsetup_r+0x26>
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
 800bfee:	0781      	lsls	r1, r0, #30
 800bff0:	bf58      	it	pl
 800bff2:	6963      	ldrpl	r3, [r4, #20]
 800bff4:	60a3      	str	r3, [r4, #8]
 800bff6:	e7f4      	b.n	800bfe2 <__swsetup_r+0x92>
 800bff8:	2000      	movs	r0, #0
 800bffa:	e7f7      	b.n	800bfec <__swsetup_r+0x9c>
 800bffc:	20000094 	.word	0x20000094

0800c000 <_raise_r>:
 800c000:	291f      	cmp	r1, #31
 800c002:	b538      	push	{r3, r4, r5, lr}
 800c004:	4604      	mov	r4, r0
 800c006:	460d      	mov	r5, r1
 800c008:	d904      	bls.n	800c014 <_raise_r+0x14>
 800c00a:	2316      	movs	r3, #22
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	f04f 30ff 	mov.w	r0, #4294967295
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c016:	b112      	cbz	r2, 800c01e <_raise_r+0x1e>
 800c018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c01c:	b94b      	cbnz	r3, 800c032 <_raise_r+0x32>
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 f830 	bl	800c084 <_getpid_r>
 800c024:	462a      	mov	r2, r5
 800c026:	4601      	mov	r1, r0
 800c028:	4620      	mov	r0, r4
 800c02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c02e:	f000 b817 	b.w	800c060 <_kill_r>
 800c032:	2b01      	cmp	r3, #1
 800c034:	d00a      	beq.n	800c04c <_raise_r+0x4c>
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	d103      	bne.n	800c042 <_raise_r+0x42>
 800c03a:	2316      	movs	r3, #22
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	2001      	movs	r0, #1
 800c040:	e7e7      	b.n	800c012 <_raise_r+0x12>
 800c042:	2400      	movs	r4, #0
 800c044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c048:	4628      	mov	r0, r5
 800c04a:	4798      	blx	r3
 800c04c:	2000      	movs	r0, #0
 800c04e:	e7e0      	b.n	800c012 <_raise_r+0x12>

0800c050 <raise>:
 800c050:	4b02      	ldr	r3, [pc, #8]	; (800c05c <raise+0xc>)
 800c052:	4601      	mov	r1, r0
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	f7ff bfd3 	b.w	800c000 <_raise_r>
 800c05a:	bf00      	nop
 800c05c:	20000094 	.word	0x20000094

0800c060 <_kill_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d07      	ldr	r5, [pc, #28]	; (800c080 <_kill_r+0x20>)
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	4611      	mov	r1, r2
 800c06c:	602b      	str	r3, [r5, #0]
 800c06e:	f7f5 fbf3 	bl	8001858 <_kill>
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	d102      	bne.n	800c07c <_kill_r+0x1c>
 800c076:	682b      	ldr	r3, [r5, #0]
 800c078:	b103      	cbz	r3, 800c07c <_kill_r+0x1c>
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	bd38      	pop	{r3, r4, r5, pc}
 800c07e:	bf00      	nop
 800c080:	20005430 	.word	0x20005430

0800c084 <_getpid_r>:
 800c084:	f7f5 bbe0 	b.w	8001848 <_getpid>

0800c088 <__swhatbuf_r>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	460c      	mov	r4, r1
 800c08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c090:	2900      	cmp	r1, #0
 800c092:	b096      	sub	sp, #88	; 0x58
 800c094:	4615      	mov	r5, r2
 800c096:	461e      	mov	r6, r3
 800c098:	da0d      	bge.n	800c0b6 <__swhatbuf_r+0x2e>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0a0:	f04f 0100 	mov.w	r1, #0
 800c0a4:	bf0c      	ite	eq
 800c0a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0aa:	2340      	movne	r3, #64	; 0x40
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	6031      	str	r1, [r6, #0]
 800c0b0:	602b      	str	r3, [r5, #0]
 800c0b2:	b016      	add	sp, #88	; 0x58
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
 800c0b6:	466a      	mov	r2, sp
 800c0b8:	f000 f848 	bl	800c14c <_fstat_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	dbec      	blt.n	800c09a <__swhatbuf_r+0x12>
 800c0c0:	9901      	ldr	r1, [sp, #4]
 800c0c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0ca:	4259      	negs	r1, r3
 800c0cc:	4159      	adcs	r1, r3
 800c0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d2:	e7eb      	b.n	800c0ac <__swhatbuf_r+0x24>

0800c0d4 <__smakebuf_r>:
 800c0d4:	898b      	ldrh	r3, [r1, #12]
 800c0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0d8:	079d      	lsls	r5, r3, #30
 800c0da:	4606      	mov	r6, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	d507      	bpl.n	800c0f0 <__smakebuf_r+0x1c>
 800c0e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	6163      	str	r3, [r4, #20]
 800c0ec:	b002      	add	sp, #8
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	ab01      	add	r3, sp, #4
 800c0f2:	466a      	mov	r2, sp
 800c0f4:	f7ff ffc8 	bl	800c088 <__swhatbuf_r>
 800c0f8:	9900      	ldr	r1, [sp, #0]
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fe fecb 	bl	800ae98 <_malloc_r>
 800c102:	b948      	cbnz	r0, 800c118 <__smakebuf_r+0x44>
 800c104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c108:	059a      	lsls	r2, r3, #22
 800c10a:	d4ef      	bmi.n	800c0ec <__smakebuf_r+0x18>
 800c10c:	f023 0303 	bic.w	r3, r3, #3
 800c110:	f043 0302 	orr.w	r3, r3, #2
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	e7e3      	b.n	800c0e0 <__smakebuf_r+0xc>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	6020      	str	r0, [r4, #0]
 800c11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	9b00      	ldr	r3, [sp, #0]
 800c124:	6163      	str	r3, [r4, #20]
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	6120      	str	r0, [r4, #16]
 800c12a:	b15b      	cbz	r3, 800c144 <__smakebuf_r+0x70>
 800c12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c130:	4630      	mov	r0, r6
 800c132:	f000 f81d 	bl	800c170 <_isatty_r>
 800c136:	b128      	cbz	r0, 800c144 <__smakebuf_r+0x70>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	f023 0303 	bic.w	r3, r3, #3
 800c13e:	f043 0301 	orr.w	r3, r3, #1
 800c142:	81a3      	strh	r3, [r4, #12]
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	431d      	orrs	r5, r3
 800c148:	81a5      	strh	r5, [r4, #12]
 800c14a:	e7cf      	b.n	800c0ec <__smakebuf_r+0x18>

0800c14c <_fstat_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d07      	ldr	r5, [pc, #28]	; (800c16c <_fstat_r+0x20>)
 800c150:	2300      	movs	r3, #0
 800c152:	4604      	mov	r4, r0
 800c154:	4608      	mov	r0, r1
 800c156:	4611      	mov	r1, r2
 800c158:	602b      	str	r3, [r5, #0]
 800c15a:	f7f5 fbdc 	bl	8001916 <_fstat>
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	d102      	bne.n	800c168 <_fstat_r+0x1c>
 800c162:	682b      	ldr	r3, [r5, #0]
 800c164:	b103      	cbz	r3, 800c168 <_fstat_r+0x1c>
 800c166:	6023      	str	r3, [r4, #0]
 800c168:	bd38      	pop	{r3, r4, r5, pc}
 800c16a:	bf00      	nop
 800c16c:	20005430 	.word	0x20005430

0800c170 <_isatty_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d06      	ldr	r5, [pc, #24]	; (800c18c <_isatty_r+0x1c>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	602b      	str	r3, [r5, #0]
 800c17c:	f7f5 fbdb 	bl	8001936 <_isatty>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d102      	bne.n	800c18a <_isatty_r+0x1a>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	b103      	cbz	r3, 800c18a <_isatty_r+0x1a>
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	20005430 	.word	0x20005430

0800c190 <_init>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	bf00      	nop
 800c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c196:	bc08      	pop	{r3}
 800c198:	469e      	mov	lr, r3
 800c19a:	4770      	bx	lr

0800c19c <_fini>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	bf00      	nop
 800c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a2:	bc08      	pop	{r3}
 800c1a4:	469e      	mov	lr, r3
 800c1a6:	4770      	bx	lr
