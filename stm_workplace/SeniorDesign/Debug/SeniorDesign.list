
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c68  08007d10  08007d10  00017d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009978  08009978  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009980  08009980  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08009b5c  000201d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009bfc  00020274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000840  20000314  08009c9c  00020314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b54  08009c9c  00020b54  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020342  2**0
                  CONTENTS, READONLY
 15 .debug_info   00013108  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002896  00000000  00000000  0003348d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000ed8  00000000  00000000  00035d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b63  00000000  00000000  00036c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a292  00000000  00000000  00037763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00012566  00000000  00000000  000619f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101bb0  00000000  00000000  00073f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004f50  00000000  00000000  00175b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000092  00000000  00000000  0017aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08007cf8 	.word	0x08007cf8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08007cf8 	.word	0x08007cf8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	0000      	movs	r0, r0
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0a6      	sub	sp, #152	; 0x98
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80005f6:	f000 fde6 	bl	80011c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8ab 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fa19 	bl	8000a34 <MX_GPIO_Init>
  MX_ETH_Init();
 8000602:	f000 f96b 	bl	80008dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f9b7 	bl	8000978 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060a:	f000 f9e5 	bl	80009d8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800060e:	f000 f913 	bl	8000838 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int analog_value = 0.0;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c


	  float voltageTest = 0.0;
 8000618:	f04f 0300 	mov.w	r3, #0
 800061c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  HAL_ADC_Start(&hadc1);
 8000620:	4845      	ldr	r0, [pc, #276]	; (8000738 <main+0x148>)
 8000622:	f000 fe95 	bl	8001350 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8000626:	2114      	movs	r1, #20
 8000628:	4843      	ldr	r0, [pc, #268]	; (8000738 <main+0x148>)
 800062a:	f000 ff5f 	bl	80014ec <HAL_ADC_PollForConversion>
	  adcBitVal = HAL_ADC_GetValue(&hadc1);
 800062e:	4842      	ldr	r0, [pc, #264]	; (8000738 <main+0x148>)
 8000630:	f000 ffe7 	bl	8001602 <HAL_ADC_GetValue>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b40      	ldr	r3, [pc, #256]	; (800073c <main+0x14c>)
 800063a:	801a      	strh	r2, [r3, #0]
	  adcVolts = ((float)adcBitVal/4095) * 3.3;
 800063c:	4b3f      	ldr	r3, [pc, #252]	; (800073c <main+0x14c>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	ee07 3a90 	vmov	s15, r3
 8000644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000648:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000740 <main+0x150>
 800064c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000654:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000718 <main+0x128>
 8000658:	ee27 7b06 	vmul.f64	d7, d7, d6
 800065c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <main+0x154>)
 8000662:	edc3 7a00 	vstr	s15, [r3]
		//return adcVolts;

	  //double voltage = (stmMaxVoltage / maxADCValue) * adcBitVal;  // Convert the ADC reading back to the actual voltage
	  adcVolts = adcVolts * 3.9722;
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <main+0x154>)
 8000668:	edd3 7a00 	vldr	s15, [r3]
 800066c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000670:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000720 <main+0x130>
 8000674:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000678:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800067c:	4b31      	ldr	r3, [pc, #196]	; (8000744 <main+0x154>)
 800067e:	edc3 7a00 	vstr	s15, [r3]

	  double referencePressure = 1.0 * pow(10, -9.581295);
 8000682:	a329      	add	r3, pc, #164	; (adr r3, 8000728 <main+0x138>)
 8000684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000688:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  double referenceVoltage = 0.774;
 800068c:	a328      	add	r3, pc, #160	; (adr r3, 8000730 <main+0x140>)
 800068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000692:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	  double scalingFactor = 0.75;
 8000696:	f04f 0200 	mov.w	r2, #0
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <main+0x158>)
 800069c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	  double pressure = referencePressure * pow(10, ((adcVolts - referenceVoltage) / scalingFactor));
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <main+0x154>)
 80006a2:	edd3 7a00 	vldr	s15, [r3]
 80006a6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80006aa:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80006ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80006b2:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80006b6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80006ba:	eeb0 1b45 	vmov.f64	d1, d5
 80006be:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80006c2:	f007 f859 	bl	8007778 <pow>
 80006c6:	eeb0 6b40 	vmov.f64	d6, d0
 80006ca:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80006ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006d2:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68


	  HAL_Delay(100);
 80006d6:	2064      	movs	r0, #100	; 0x64
 80006d8:	f000 fdd2 	bl	8001280 <HAL_Delay>

	  char buffer[100];

	  sprintf(buffer, "ADC Value %.2f Pressure %.2f mbar\r\n", adcVolts, pressure);
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <main+0x154>)
 80006de:	edd3 7a00 	vldr	s15, [r3]
 80006e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e6:	1d38      	adds	r0, r7, #4
 80006e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80006ec:	e9cd 2300 	strd	r2, r3, [sp]
 80006f0:	ec53 2b17 	vmov	r2, r3, d7
 80006f4:	4915      	ldr	r1, [pc, #84]	; (800074c <main+0x15c>)
 80006f6:	f004 ff33 	bl	8005560 <siprintf>

      HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fdef 	bl	80002e0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	1d39      	adds	r1, r7, #4
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	4810      	ldr	r0, [pc, #64]	; (8000750 <main+0x160>)
 800070e:	f003 fa99 	bl	8003c44 <HAL_UART_Transmit>
  {
 8000712:	e77e      	b.n	8000612 <main+0x22>
 8000714:	f3af 8000 	nop.w
 8000718:	66666666 	.word	0x66666666
 800071c:	400a6666 	.word	0x400a6666
 8000720:	cb295e9e 	.word	0xcb295e9e
 8000724:	400fc710 	.word	0x400fc710
 8000728:	74ce4186 	.word	0x74ce4186
 800072c:	3df20570 	.word	0x3df20570
 8000730:	a5e353f8 	.word	0xa5e353f8
 8000734:	3fe8c49b 	.word	0x3fe8c49b
 8000738:	20000368 	.word	0x20000368
 800073c:	200009f0 	.word	0x200009f0
 8000740:	457ff000 	.word	0x457ff000
 8000744:	200009f4 	.word	0x200009f4
 8000748:	3fe80000 	.word	0x3fe80000
 800074c:	08007d10 	.word	0x08007d10
 8000750:	20000460 	.word	0x20000460

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2234      	movs	r2, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 ff5f 	bl	8005626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000778:	f002 f8ba 	bl	80028f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <SystemClock_Config+0xdc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <SystemClock_Config+0xdc>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xdc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <SystemClock_Config+0xe0>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xe0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 f8e7 	bl	80029b0 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007e8:	f000 f9c6 	bl	8000b78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ec:	f002 f890 	bl	8002910 <HAL_PWREx_EnableOverDrive>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007f6:	f000 f9bf 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2103      	movs	r1, #3
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fb78 	bl	8002f0c <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000822:	f000 f9a9 	bl	8000b78 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_ADC1_Init+0x98>)
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <MX_ADC1_Init+0x9c>)
 800084e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_ADC1_Init+0x98>)
 8000852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000856:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_ADC1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_ADC1_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_ADC1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_ADC1_Init+0x98>)
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <MX_ADC1_Init+0xa0>)
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_ADC1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_ADC1_Init+0x98>)
 8000886:	2201      	movs	r2, #1
 8000888:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_ADC1_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_ADC1_Init+0x98>)
 8000894:	2201      	movs	r2, #1
 8000896:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_ADC1_Init+0x98>)
 800089a:	f000 fd15 	bl	80012c8 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 f968 	bl	8000b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008a8:	2305      	movs	r3, #5
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_ADC1_Init+0x98>)
 80008ba:	f000 feaf 	bl	800161c <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008c4:	f000 f958 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000368 	.word	0x20000368
 80008d4:	40012000 	.word	0x40012000
 80008d8:	0f000001 	.word	0x0f000001

080008dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_ETH_Init+0x84>)
 80008e2:	4a20      	ldr	r2, [pc, #128]	; (8000964 <MX_ETH_Init+0x88>)
 80008e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_ETH_Init+0x8c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_ETH_Init+0x8c>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ETH_Init+0x8c>)
 80008f4:	22e1      	movs	r2, #225	; 0xe1
 80008f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_ETH_Init+0x8c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ETH_Init+0x8c>)
 8000900:	2200      	movs	r2, #0
 8000902:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_ETH_Init+0x8c>)
 8000906:	2200      	movs	r2, #0
 8000908:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_ETH_Init+0x84>)
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <MX_ETH_Init+0x8c>)
 800090e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_ETH_Init+0x84>)
 8000912:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000916:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_ETH_Init+0x84>)
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <MX_ETH_Init+0x90>)
 800091c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_ETH_Init+0x84>)
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_ETH_Init+0x94>)
 8000922:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_ETH_Init+0x84>)
 8000926:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800092a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_ETH_Init+0x84>)
 800092e:	f001 f9ab 	bl	8001c88 <HAL_ETH_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 f91e 	bl	8000b78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800093c:	2238      	movs	r2, #56	; 0x38
 800093e:	2100      	movs	r1, #0
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_ETH_Init+0x98>)
 8000942:	f004 fe70 	bl	8005626 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_ETH_Init+0x98>)
 8000948:	2221      	movs	r2, #33	; 0x21
 800094a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_ETH_Init+0x98>)
 800094e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000952:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_ETH_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200003b0 	.word	0x200003b0
 8000964:	40028000 	.word	0x40028000
 8000968:	200009f8 	.word	0x200009f8
 800096c:	20000274 	.word	0x20000274
 8000970:	200001d4 	.word	0x200001d4
 8000974:	20000330 	.word	0x20000330

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_USART3_UART_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000984:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009bc:	f003 f8f4 	bl	8003ba8 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f8d7 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000460 	.word	0x20000460
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2206      	movs	r2, #6
 80009e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	f001 fe1f 	bl	800265e <HAL_PCD_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8a7 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200004e8 	.word	0x200004e8

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a40      	ldr	r2, [pc, #256]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a2e      	ldr	r2, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae0:	4822      	ldr	r0, [pc, #136]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000ae2:	f001 fda3 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4821      	ldr	r0, [pc, #132]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000aec:	f001 fd9e 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481b      	ldr	r0, [pc, #108]	; (8000b74 <MX_GPIO_Init+0x140>)
 8000b08:	f001 fbe4 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000b26:	f001 fbd5 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000b42:	f001 fbc7 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000b5a:	f001 fbbb 	bl	80022d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	; 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020800 	.word	0x40020800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x44>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <HAL_ADC_MspInit+0x74>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d123      	bne.n	8000c36 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_ADC_MspInit+0x7c>)
 8000c32:	f001 fb4f 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40012000 	.word	0x40012000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a4e      	ldr	r2, [pc, #312]	; (8000da4 <HAL_ETH_MspInit+0x158>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	f040 8096 	bne.w	8000d9c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c70:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a4c      	ldr	r2, [pc, #304]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a3a      	ldr	r2, [pc, #232]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a34      	ldr	r2, [pc, #208]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d18:	2332      	movs	r3, #50	; 0x32
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481e      	ldr	r0, [pc, #120]	; (8000dac <HAL_ETH_MspInit+0x160>)
 8000d34:	f001 face 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d38:	2386      	movs	r3, #134	; 0x86
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <HAL_ETH_MspInit+0x164>)
 8000d54:	f001 fabe 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <HAL_ETH_MspInit+0x168>)
 8000d76:	f001 faad 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <HAL_ETH_MspInit+0x16c>)
 8000d98:	f001 fa9c 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40028000 	.word	0x40028000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40021800 	.word	0x40021800

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ae      	sub	sp, #184	; 0xb8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2290      	movs	r2, #144	; 0x90
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fc22 	bl	8005626 <memset>
  if(huart->Instance==USART3)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <HAL_UART_MspInit+0xb4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d13c      	bne.n	8000e66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 faac 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e06:	f7ff feb7 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e54:	2307      	movs	r3, #7
 8000e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_UART_MspInit+0xbc>)
 8000e62:	f001 fa37 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	37b8      	adds	r7, #184	; 0xb8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004800 	.word	0x40004800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020c00 	.word	0x40020c00

08000e7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ae      	sub	sp, #184	; 0xb8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2290      	movs	r2, #144	; 0x90
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fbc2 	bl	8005626 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eaa:	d159      	bne.n	8000f60 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000eb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fa4b 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ec8:	f7ff fe56 	bl	8000b78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ee4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000efe:	230a      	movs	r3, #10
 8000f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4818      	ldr	r0, [pc, #96]	; (8000f6c <HAL_PCD_MspInit+0xf0>)
 8000f0c:	f001 f9e2 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <HAL_PCD_MspInit+0xf0>)
 8000f2c:	f001 f9d2 	bl	80022d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3a:	6353      	str	r3, [r2, #52]	; 0x34
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6453      	str	r3, [r2, #68]	; 0x44
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_PCD_MspInit+0xec>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	37b8      	adds	r7, #184	; 0xb8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f940 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return 1;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_kill>:

int _kill(int pid, int sig)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fde:	f004 fb75 	bl	80056cc <__errno>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2216      	movs	r2, #22
 8000fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_exit>:

void _exit (int status)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffe7 	bl	8000fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001006:	e7fe      	b.n	8001006 <_exit+0x12>

08001008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e00a      	b.n	8001030 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800101a:	f3af 8000 	nop.w
 800101e:	4601      	mov	r1, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf0      	blt.n	800101a <_read+0x12>
  }

  return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x12>
  }
  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_isatty>:

int _isatty(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f004 fada 	bl	80056cc <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20080000 	.word	0x20080000
 8001144:	00000400 	.word	0x00000400
 8001148:	20000a00 	.word	0x20000a00
 800114c:	20000b58 	.word	0x20000b58

08001150 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f004 fa99 	bl	80056d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff fa23 	bl	80005f0 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011b8:	08009988 	.word	0x08009988
  ldr r2, =_sbss
 80011bc:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80011c0:	20000b54 	.word	0x20000b54

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>

080011c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 fd28 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 f805 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d6:	f7ff fcd5 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fd35 	bl	8001c6e <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 fd0b 	bl	8001c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008
 8001264:	20000a04 	.word	0x20000a04

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000a04 	.word	0x20000a04

08001280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff ffee 	bl	8001268 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d005      	beq.n	80012a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_Delay+0x44>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a6:	bf00      	nop
 80012a8:	f7ff ffde 	bl	8001268 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d8f7      	bhi.n	80012a8 <HAL_Delay+0x28>
  {
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008

080012c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e031      	b.n	8001342 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fc70 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	d116      	bne.n	8001334 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_ADC_Init+0x84>)
 800130c:	4013      	ands	r3, r2
 800130e:	f043 0202 	orr.w	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fad6 	bl	80018c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f023 0303 	bic.w	r3, r3, #3
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
 8001332:	e001      	b.n	8001338 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	ffffeefd 	.word	0xffffeefd

08001350 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_ADC_Start+0x1a>
 8001366:	2302      	movs	r3, #2
 8001368:	e0ad      	b.n	80014c6 <HAL_ADC_Start+0x176>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b01      	cmp	r3, #1
 800137e:	d018      	beq.n	80013b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001390:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_ADC_Start+0x184>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a50      	ldr	r2, [pc, #320]	; (80014d8 <HAL_ADC_Start+0x188>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9a      	lsrs	r2, r3, #18
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80013a4:	e002      	b.n	80013ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f9      	bne.n	80013a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d175      	bne.n	80014ac <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <HAL_ADC_Start+0x18c>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013fa:	d106      	bne.n	800140a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f023 0206 	bic.w	r2, r3, #6
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	645a      	str	r2, [r3, #68]	; 0x44
 8001408:	e002      	b.n	8001410 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001420:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <HAL_ADC_Start+0x190>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d143      	bne.n	80014c4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	e03a      	b.n	80014c4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <HAL_ADC_Start+0x194>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d10e      	bne.n	8001476 <HAL_ADC_Start+0x126>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001474:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_ADC_Start+0x190>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d120      	bne.n	80014c4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_ADC_Start+0x198>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d11b      	bne.n	80014c4 <HAL_ADC_Start+0x174>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d114      	bne.n	80014c4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	e00b      	b.n	80014c4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f043 0210 	orr.w	r2, r3, #16
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	fffff8fe 	.word	0xfffff8fe
 80014e0:	40012300 	.word	0x40012300
 80014e4:	40012000 	.word	0x40012000
 80014e8:	40012200 	.word	0x40012200

080014ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001508:	d113      	bne.n	8001532 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001518:	d10b      	bne.n	8001532 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f043 0220 	orr.w	r2, r3, #32
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e063      	b.n	80015fa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001532:	f7ff fe99 	bl	8001268 <HAL_GetTick>
 8001536:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001538:	e021      	b.n	800157e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d01d      	beq.n	800157e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_ADC_PollForConversion+0x6c>
 8001548:	f7ff fe8e 	bl	8001268 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d212      	bcs.n	800157e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d00b      	beq.n	800157e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f043 0204 	orr.w	r2, r3, #4
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e03d      	b.n	80015fa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b02      	cmp	r3, #2
 800158a:	d1d6      	bne.n	800153a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0212 	mvn.w	r2, #18
 8001594:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d123      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d11f      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d111      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x1c>
 8001634:	2302      	movs	r3, #2
 8001636:	e136      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x28a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d93a      	bls.n	80016be <HAL_ADC_ConfigChannel+0xa2>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001650:	d035      	beq.n	80016be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68d9      	ldr	r1, [r3, #12]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b1e      	subs	r3, #30
 8001668:	2207      	movs	r2, #7
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a8d      	ldr	r2, [pc, #564]	; (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10a      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68d9      	ldr	r1, [r3, #12]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	061a      	lsls	r2, r3, #24
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001696:	e035      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4403      	add	r3, r0
 80016b0:	3b1e      	subs	r3, #30
 80016b2:	409a      	lsls	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016bc:	e022      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6919      	ldr	r1, [r3, #16]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	2207      	movs	r2, #7
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43da      	mvns	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	400a      	ands	r2, r1
 80016e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6919      	ldr	r1, [r3, #16]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4403      	add	r3, r0
 80016fa:	409a      	lsls	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d824      	bhi.n	8001756 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b05      	subs	r3, #5
 800171e:	221f      	movs	r2, #31
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b05      	subs	r3, #5
 8001748:	fa00 f203 	lsl.w	r2, r0, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
 8001754:	e04c      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d824      	bhi.n	80017a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b23      	subs	r3, #35	; 0x23
 8001770:	221f      	movs	r2, #31
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	400a      	ands	r2, r1
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b23      	subs	r3, #35	; 0x23
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
 80017a6:	e023      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b41      	subs	r3, #65	; 0x41
 80017ba:	221f      	movs	r2, #31
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43da      	mvns	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	400a      	ands	r2, r1
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b41      	subs	r3, #65	; 0x41
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10a      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1f4>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001802:	d105      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 800180a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800180e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10f      	bne.n	800183a <HAL_ADC_ConfigChannel+0x21e>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b12      	cmp	r3, #18
 8001820:	d10b      	bne.n	800183a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001828:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800182c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001838:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d12b      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d003      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x23a>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b11      	cmp	r3, #17
 8001854:	d122      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 800185c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001860:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800186c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d111      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_ADC_ConfigChannel+0x2a4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_ADC_ConfigChannel+0x2a8>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9a      	lsrs	r2, r3, #18
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800188e:	e002      	b.n	8001896 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3b01      	subs	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f9      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	10000012 	.word	0x10000012
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40012300 	.word	0x40012300
 80018c0:	20000000 	.word	0x20000000
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018d0:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <ADC_Init+0x1ec>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a77      	ldr	r2, [pc, #476]	; (8001ab4 <ADC_Init+0x1ec>)
 80018d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018dc:	4b75      	ldr	r3, [pc, #468]	; (8001ab4 <ADC_Init+0x1ec>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <ADC_Init+0x1ec>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	021a      	lsls	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800191c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <ADC_Init+0x1f0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d022      	beq.n	80019a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800196a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800198c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	e00f      	b.n	80019c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0202 	bic.w	r2, r2, #2
 80019d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	005a      	lsls	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01b      	beq.n	8001a28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	035a      	lsls	r2, r3, #13
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	e007      	b.n	8001a38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	051a      	lsls	r2, r3, #20
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a7a:	025a      	lsls	r2, r3, #9
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	029a      	lsls	r2, r3, #10
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40012300 	.word	0x40012300
 8001ab8:	0f000001 	.word	0x0f000001

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	05fa0000 	.word	0x05fa0000

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff47 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff5c 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff8e 	bl	8001b74 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffb0 	bl	8001bdc <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e06a      	b.n	8001d70 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d106      	bne.n	8001cb2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2223      	movs	r2, #35	; 0x23
 8001ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7fe ffcd 	bl	8000c4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_ETH_Init+0xf0>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <HAL_ETH_Init+0xf0>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_ETH_Init+0xf0>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_ETH_Init+0xf4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_ETH_Init+0xf4>)
 8001cd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_ETH_Init+0xf4>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4927      	ldr	r1, [pc, #156]	; (8001d7c <HAL_ETH_Init+0xf4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_ETH_Init+0xf4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d00:	f7ff fab2 	bl	8001268 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d06:	e011      	b.n	8001d2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d08:	f7ff faae 	bl	8001268 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d16:	d909      	bls.n	8001d2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	22e0      	movs	r2, #224	; 0xe0
 8001d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e021      	b.n	8001d70 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e4      	bne.n	8001d08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f958 	bl	8001ff4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f9ff 	bl	8002148 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa55 	bl	80021fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	461a      	mov	r2, r3
 8001d56:	2100      	movs	r1, #0
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f9bd 	bl	80020d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40013800 	.word	0x40013800

08001d80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4b51      	ldr	r3, [pc, #324]	; (8001edc <ETH_SetMACConfig+0x15c>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	7c1b      	ldrb	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <ETH_SetMACConfig+0x28>
 8001da2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001da6:	e000      	b.n	8001daa <ETH_SetMACConfig+0x2a>
 8001da8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7c5b      	ldrb	r3, [r3, #17]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <ETH_SetMACConfig+0x38>
 8001db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db6:	e000      	b.n	8001dba <ETH_SetMACConfig+0x3a>
 8001db8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001dc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	7fdb      	ldrb	r3, [r3, #31]
 8001dc6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001dc8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	7f92      	ldrb	r2, [r2, #30]
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d102      	bne.n	8001dde <ETH_SetMACConfig+0x5e>
 8001dd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ddc:	e000      	b.n	8001de0 <ETH_SetMACConfig+0x60>
 8001dde:	2200      	movs	r2, #0
                        macconf->Speed |
 8001de0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7f1b      	ldrb	r3, [r3, #28]
 8001de6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001de8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001df6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d102      	bne.n	8001e08 <ETH_SetMACConfig+0x88>
 8001e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e06:	e000      	b.n	8001e0a <ETH_SetMACConfig+0x8a>
 8001e08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	7bdb      	ldrb	r3, [r3, #15]
 8001e10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e22:	4313      	orrs	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff fa20 	bl	8001280 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	d101      	bne.n	8001e6e <ETH_SetMACConfig+0xee>
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	e000      	b.n	8001e70 <ETH_SetMACConfig+0xf0>
 8001e6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e7e:	2a01      	cmp	r2, #1
 8001e80:	d101      	bne.n	8001e86 <ETH_SetMACConfig+0x106>
 8001e82:	2208      	movs	r2, #8
 8001e84:	e000      	b.n	8001e88 <ETH_SetMACConfig+0x108>
 8001e86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e90:	2a01      	cmp	r2, #1
 8001e92:	d101      	bne.n	8001e98 <ETH_SetMACConfig+0x118>
 8001e94:	2204      	movs	r2, #4
 8001e96:	e000      	b.n	8001e9a <ETH_SetMACConfig+0x11a>
 8001e98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001ea2:	2a01      	cmp	r2, #1
 8001ea4:	d101      	bne.n	8001eaa <ETH_SetMACConfig+0x12a>
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	e000      	b.n	8001eac <ETH_SetMACConfig+0x12c>
 8001eaa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001eac:	4313      	orrs	r3, r2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f9db 	bl	8001280 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	ff20810f 	.word	0xff20810f

08001ee0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <ETH_SetDMAConfig+0x110>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7b1b      	ldrb	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <ETH_SetDMAConfig+0x2c>
 8001f06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f0a:	e000      	b.n	8001f0e <ETH_SetDMAConfig+0x2e>
 8001f0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	7b5b      	ldrb	r3, [r3, #13]
 8001f12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	7f52      	ldrb	r2, [r2, #29]
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d102      	bne.n	8001f24 <ETH_SetDMAConfig+0x44>
 8001f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f22:	e000      	b.n	8001f26 <ETH_SetDMAConfig+0x46>
 8001f24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7b9b      	ldrb	r3, [r3, #14]
 8001f2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	7f1b      	ldrb	r3, [r3, #28]
 8001f3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	7f9b      	ldrb	r3, [r3, #30]
 8001f42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f54:	4313      	orrs	r3, r2
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff f982 	bl	8001280 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	461a      	mov	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	791b      	ldrb	r3, [r3, #4]
 8001f8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fa0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fa8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001faa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fb2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fb8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7ff f953 	bl	8001280 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	f8de3f23 	.word	0xf8de3f23

08001ff4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0a6      	sub	sp, #152	; 0x98
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002008:	2300      	movs	r3, #0
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002030:	2300      	movs	r3, #0
 8002032:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800203a:	2300      	movs	r3, #0
 800203c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800205c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002060:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002068:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fe86 	bl	8001d80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002074:	2301      	movs	r3, #1
 8002076:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002078:	2301      	movs	r3, #1
 800207a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800207c:	2301      	movs	r3, #1
 800207e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff08 	bl	8001ee0 <ETH_SetDMAConfig>
}
 80020d0:	bf00      	nop
 80020d2:	3798      	adds	r7, #152	; 0x98
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3305      	adds	r3, #5
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	3204      	adds	r2, #4
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <ETH_MACAddressConfig+0x68>)
 80020fa:	4413      	add	r3, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3303      	adds	r3, #3
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	061a      	lsls	r2, r3, #24
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3302      	adds	r3, #2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3301      	adds	r3, #1
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	4313      	orrs	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <ETH_MACAddressConfig+0x6c>)
 800212a:	4413      	add	r3, r2
 800212c:	461a      	mov	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	6013      	str	r3, [r2, #0]
}
 8002132:	bf00      	nop
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40028040 	.word	0x40028040
 8002144:	40028044 	.word	0x40028044

08002148 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e03e      	b.n	80021d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	3206      	adds	r2, #6
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d80c      	bhi.n	80021b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	e004      	b.n	80021c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d9bd      	bls.n	8002156 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	611a      	str	r2, [r3, #16]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	e046      	b.n	8002296 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6919      	ldr	r1, [r3, #16]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002244:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800224c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	3212      	adds	r2, #18
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d80c      	bhi.n	8002286 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	e004      	b.n	8002290 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d9b5      	bls.n	8002208 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c6:	60da      	str	r2, [r3, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e175      	b.n	80025e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	f040 8164 	bne.w	80025da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d005      	beq.n	800232a <HAL_GPIO_Init+0x56>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d130      	bne.n	800238c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0201 	and.w	r2, r3, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b03      	cmp	r3, #3
 8002396:	d017      	beq.n	80023c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d123      	bne.n	800241c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0203 	and.w	r2, r3, #3
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80be 	beq.w	80025da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_GPIO_Init+0x324>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002476:	4a61      	ldr	r2, [pc, #388]	; (80025fc <HAL_GPIO_Init+0x328>)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_GPIO_Init+0x32c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d037      	beq.n	8002512 <HAL_GPIO_Init+0x23e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a57      	ldr	r2, [pc, #348]	; (8002604 <HAL_GPIO_Init+0x330>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d031      	beq.n	800250e <HAL_GPIO_Init+0x23a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a56      	ldr	r2, [pc, #344]	; (8002608 <HAL_GPIO_Init+0x334>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d02b      	beq.n	800250a <HAL_GPIO_Init+0x236>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a55      	ldr	r2, [pc, #340]	; (800260c <HAL_GPIO_Init+0x338>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d025      	beq.n	8002506 <HAL_GPIO_Init+0x232>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a54      	ldr	r2, [pc, #336]	; (8002610 <HAL_GPIO_Init+0x33c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01f      	beq.n	8002502 <HAL_GPIO_Init+0x22e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a53      	ldr	r2, [pc, #332]	; (8002614 <HAL_GPIO_Init+0x340>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x22a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_GPIO_Init+0x344>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x226>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a51      	ldr	r2, [pc, #324]	; (800261c <HAL_GPIO_Init+0x348>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x222>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a50      	ldr	r2, [pc, #320]	; (8002620 <HAL_GPIO_Init+0x34c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x21e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4f      	ldr	r2, [pc, #316]	; (8002624 <HAL_GPIO_Init+0x350>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x21a>
 80024ea:	2309      	movs	r3, #9
 80024ec:	e012      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024ee:	230a      	movs	r3, #10
 80024f0:	e010      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00e      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fa:	2306      	movs	r3, #6
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_GPIO_Init+0x328>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_GPIO_Init+0x354>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a34      	ldr	r2, [pc, #208]	; (8002628 <HAL_GPIO_Init+0x354>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <HAL_GPIO_Init+0x354>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a29      	ldr	r2, [pc, #164]	; (8002628 <HAL_GPIO_Init+0x354>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_GPIO_Init+0x354>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_GPIO_Init+0x354>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_GPIO_Init+0x354>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <HAL_GPIO_Init+0x354>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f ae86 	bls.w	80022f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40021800 	.word	0x40021800
 800261c:	40021c00 	.word	0x40021c00
 8002620:	40022000 	.word	0x40022000
 8002624:	40022400 	.word	0x40022400
 8002628:	40013c00 	.word	0x40013c00

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002648:	e003      	b.n	8002652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800265e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002660:	b08f      	sub	sp, #60	; 0x3c
 8002662:	af0a      	add	r7, sp, #40	; 0x28
 8002664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e116      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fbf6 	bl	8000e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 ffbe 	bl	8004630 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	687e      	ldr	r6, [r7, #4]
 80026bc:	466d      	mov	r5, sp
 80026be:	f106 0410 	add.w	r4, r6, #16
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d2:	1d33      	adds	r3, r6, #4
 80026d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f001 ff52 	bl	8004580 <USB_CoreInit>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0d7      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 ffac 	bl	8004652 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e04a      	b.n	8002796 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	333c      	adds	r3, #60	; 0x3c
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	b298      	uxth	r0, r3
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3344      	adds	r3, #68	; 0x44
 800273c:	4602      	mov	r2, r0
 800273e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3340      	adds	r3, #64	; 0x40
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3348      	adds	r3, #72	; 0x48
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	334c      	adds	r3, #76	; 0x4c
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3354      	adds	r3, #84	; 0x54
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3af      	bcc.n	8002700 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e044      	b.n	8002830 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	3301      	adds	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3b5      	bcc.n	80027a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	687e      	ldr	r6, [r7, #4]
 8002842:	466d      	mov	r5, sp
 8002844:	f106 0410 	add.w	r4, r6, #16
 8002848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002850:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002854:	e885 0003 	stmia.w	r5, {r0, r1}
 8002858:	1d33      	adds	r3, r6, #4
 800285a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f001 ff45 	bl	80046ec <USB_DevInit>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e014      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f80b 	bl	80028a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 f903 	bl	8004aa2 <USB_DevDisconnect>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_PCDEx_ActivateLPM+0x44>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	10000003 	.word	0x10000003

080028f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800293e:	f7fe fc93 	bl	8001268 <HAL_GetTick>
 8002942:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002944:	e009      	b.n	800295a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002946:	f7fe fc8f 	bl	8001268 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002954:	d901      	bls.n	800295a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e022      	b.n	80029a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002966:	d1ee      	bne.n	8002946 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800296e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002972:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002974:	f7fe fc78 	bl	8001268 <HAL_GetTick>
 8002978:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800297a:	e009      	b.n	8002990 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800297c:	f7fe fc74 	bl	8001268 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800298a:	d901      	bls.n	8002990 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e007      	b.n	80029a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800299c:	d1ee      	bne.n	800297c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e29b      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8087 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d4:	4b96      	ldr	r3, [pc, #600]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d00c      	beq.n	80029fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e0:	4b93      	ldr	r3, [pc, #588]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d112      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62>
 80029ec:	4b90      	ldr	r3, [pc, #576]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	4b8d      	ldr	r3, [pc, #564]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d06c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x130>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d168      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e275      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x7a>
 8002a1c:	4b84      	ldr	r3, [pc, #528]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a83      	ldr	r2, [pc, #524]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e02e      	b.n	8002a88 <HAL_RCC_OscConfig+0xd8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x9c>
 8002a32:	4b7f      	ldr	r3, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7e      	ldr	r2, [pc, #504]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b7c      	ldr	r3, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7b      	ldr	r2, [pc, #492]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e01d      	b.n	8002a88 <HAL_RCC_OscConfig+0xd8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0xc0>
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a75      	ldr	r2, [pc, #468]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0xd8>
 8002a70:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b6c      	ldr	r3, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6b      	ldr	r2, [pc, #428]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fbea 	bl	8001268 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fbe6 	bl	8001268 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e229      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe8>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fbd6 	bl	8001268 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fbd2 	bl	8001268 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e215      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x110>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d069      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aee:	4b50      	ldr	r3, [pc, #320]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d11c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x190>
 8002b06:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_RCC_OscConfig+0x17a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1e9      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	493d      	ldr	r1, [pc, #244]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	e040      	b.n	8002bc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d023      	beq.n	8002b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fb88 	bl	8001268 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fb84 	bl	8001268 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1c7      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4929      	ldr	r1, [pc, #164]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
 8002b8e:	e018      	b.n	8002bc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fb64 	bl	8001268 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fb60 	bl	8001268 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e1a3      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d038      	beq.n	8002c40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7fe fb41 	bl	8001268 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bea:	f7fe fb3d 	bl	8001268 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e180      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x23a>
 8002c08:	e01a      	b.n	8002c40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c16:	f7fe fb27 	bl	8001268 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fb23 	bl	8001268 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d903      	bls.n	8002c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e166      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
 8002c30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ee      	bne.n	8002c1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a4 	beq.w	8002d96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a88      	ldr	r2, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c82:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7f      	ldr	r2, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe faeb 	bl	8001268 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe fae7 	bl	8001268 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	; 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e12a      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca8:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x31a>
 8002cbc:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a6f      	ldr	r2, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e02d      	b.n	8002d26 <HAL_RCC_OscConfig+0x376>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x33c>
 8002cd2:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a67      	ldr	r2, [pc, #412]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	e01c      	b.n	8002d26 <HAL_RCC_OscConfig+0x376>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x35e>
 8002cf4:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a5e      	ldr	r2, [pc, #376]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	e00b      	b.n	8002d26 <HAL_RCC_OscConfig+0x376>
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a5b      	ldr	r2, [pc, #364]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1a:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d015      	beq.n	8002d5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fa9b 	bl	8001268 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fa97 	bl	8001268 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0d8      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ee      	beq.n	8002d36 <HAL_RCC_OscConfig+0x386>
 8002d58:	e014      	b.n	8002d84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fa85 	bl	8001268 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe fa81 	bl	8001268 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0c2      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a3c      	ldr	r2, [pc, #240]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80ae 	beq.w	8002efc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da0:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d06d      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d14b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fa52 	bl	8001268 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fa4e 	bl	8001268 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e091      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	071b      	lsls	r3, r3, #28
 8002e12:	491b      	ldr	r1, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fa20 	bl	8001268 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fa1c 	bl	8001268 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e05f      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x47c>
 8002e4a:	e057      	b.n	8002efc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fa06 	bl	8001268 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fa02 	bl	8001268 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e045      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x4b0>
 8002e7e:	e03d      	b.n	8002efc <HAL_RCC_OscConfig+0x54c>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_RCC_OscConfig+0x558>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d030      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d129      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d122      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ebe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d119      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0d0      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d910      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 020f 	bic.w	r2, r3, #15
 8002f3a:	4965      	ldr	r1, [pc, #404]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d040      	beq.n	8003030 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d115      	bne.n	8002fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e073      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e06b      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4936      	ldr	r1, [pc, #216]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fe f932 	bl	8001268 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe f92e 	bl	8001268 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e053      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d210      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 020f 	bic.w	r2, r3, #15
 8003046:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1cc>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1d0>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1d4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f88e 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08007d34 	.word	0x08007d34
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b094      	sub	sp, #80	; 0x50
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	2300      	movs	r3, #0
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fc:	4b79      	ldr	r3, [pc, #484]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d00d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 80e1 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x3a>
 8003116:	e0db      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b73      	ldr	r3, [pc, #460]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800311a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311c:	e0db      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003122:	e0d8      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
 8003144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
 8003152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4621      	mov	r1, r4
 8003170:	1a51      	subs	r1, r2, r1
 8003172:	6139      	str	r1, [r7, #16]
 8003174:	4629      	mov	r1, r5
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003188:	4659      	mov	r1, fp
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003192:	4651      	mov	r1, sl
 8003194:	018a      	lsls	r2, r1, #6
 8003196:	4651      	mov	r1, sl
 8003198:	ebb2 0801 	subs.w	r8, r2, r1
 800319c:	4659      	mov	r1, fp
 800319e:	eb63 0901 	sbc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	462b      	mov	r3, r5
 80031c4:	eb49 0303 	adc.w	r3, r9, r3
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d6:	4629      	mov	r1, r5
 80031d8:	024b      	lsls	r3, r1, #9
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e0:	4621      	mov	r1, r4
 80031e2:	024a      	lsls	r2, r1, #9
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f4:	f7fd f87c 	bl	80002f0 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003200:	e058      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	2200      	movs	r2, #0
 800320a:	4618      	mov	r0, r3
 800320c:	4611      	mov	r1, r2
 800320e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0159      	lsls	r1, r3, #5
 800322a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322e:	0150      	lsls	r0, r2, #5
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4641      	mov	r1, r8
 8003236:	ebb2 0a01 	subs.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800324c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003254:	ebb2 040a 	subs.w	r4, r2, sl
 8003258:	eb63 050b 	sbc.w	r5, r3, fp
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	464b      	mov	r3, r9
 8003278:	eb45 0303 	adc.w	r3, r5, r3
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	61fa      	str	r2, [r7, #28]
 80032a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a8:	f7fd f822 	bl	80002f0 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3750      	adds	r7, #80	; 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	; (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08007d44 	.word	0x08007d44

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffdc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0b5b      	lsrs	r3, r3, #13
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08007d44 	.word	0x08007d44

08003358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003380:	4b69      	ldr	r3, [pc, #420]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a68      	ldr	r2, [pc, #416]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	4b66      	ldr	r3, [pc, #408]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	4964      	ldr	r1, [pc, #400]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d017      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b2:	4b5d      	ldr	r3, [pc, #372]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	4959      	ldr	r1, [pc, #356]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d0:	d101      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d017      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ee:	4b4e      	ldr	r3, [pc, #312]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	494a      	ldr	r1, [pc, #296]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 808b 	beq.w	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a39      	ldr	r2, [pc, #228]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
 8003448:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a34      	ldr	r2, [pc, #208]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800345a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003460:	f7fd ff02 	bl	8001268 <HAL_GetTick>
 8003464:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fd fefe 	bl	8001268 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e38f      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800347a:	4b2c      	ldr	r3, [pc, #176]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d035      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d02e      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a4:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d114      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fec6 	bl	8001268 <HAL_GetTick>
 80034dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fd fec2 	bl	8001268 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e351      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ee      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350e:	d111      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800351e:	400b      	ands	r3, r1
 8003520:	4901      	ldr	r1, [pc, #4]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
 8003526:	e00b      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000
 8003530:	0ffffcff 	.word	0x0ffffcff
 8003534:	4bac      	ldr	r3, [pc, #688]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4aab      	ldr	r2, [pc, #684]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800353e:	6093      	str	r3, [r2, #8]
 8003540:	4ba9      	ldr	r3, [pc, #676]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	49a6      	ldr	r1, [pc, #664]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354e:	4313      	orrs	r3, r2
 8003550:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800355e:	4ba2      	ldr	r3, [pc, #648]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003564:	4aa0      	ldr	r2, [pc, #640]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800356e:	4b9e      	ldr	r3, [pc, #632]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003570:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	499b      	ldr	r1, [pc, #620]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358c:	4b96      	ldr	r3, [pc, #600]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359a:	4993      	ldr	r1, [pc, #588]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ae:	4b8e      	ldr	r3, [pc, #568]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035bc:	498a      	ldr	r1, [pc, #552]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d0:	4b85      	ldr	r3, [pc, #532]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035de:	4982      	ldr	r1, [pc, #520]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4979      	ldr	r1, [pc, #484]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003614:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	4971      	ldr	r1, [pc, #452]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003636:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f023 020c 	bic.w	r2, r3, #12
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003644:	4968      	ldr	r1, [pc, #416]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003658:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	4960      	ldr	r1, [pc, #384]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800367a:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	4957      	ldr	r1, [pc, #348]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	494f      	ldr	r1, [pc, #316]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	4946      	ldr	r1, [pc, #280]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036e0:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	493e      	ldr	r1, [pc, #248]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	4935      	ldr	r1, [pc, #212]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003724:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003732:	492d      	ldr	r1, [pc, #180]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003746:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003754:	4924      	ldr	r1, [pc, #144]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003764:	d101      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003794:	4914      	ldr	r1, [pc, #80]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b8:	490b      	ldr	r1, [pc, #44]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	4902      	ldr	r1, [pc, #8]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037e4:	e002      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037f8:	4b8a      	ldr	r3, [pc, #552]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	4986      	ldr	r1, [pc, #536]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800381c:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	497d      	ldr	r1, [pc, #500]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d006      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80d6 	beq.w	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003848:	4b76      	ldr	r3, [pc, #472]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a75      	ldr	r2, [pc, #468]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003854:	f7fd fd08 	bl	8001268 <HAL_GetTick>
 8003858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800385c:	f7fd fd04 	bl	8001268 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e195      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d021      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11d      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a2:	0e1b      	lsrs	r3, r3, #24
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	019a      	lsls	r2, r3, #6
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	071b      	lsls	r3, r3, #28
 80038c2:	4958      	ldr	r1, [pc, #352]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02e      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f4:	d129      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038f6:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003904:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390a:	0f1b      	lsrs	r3, r3, #28
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	019a      	lsls	r2, r3, #6
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	071b      	lsls	r3, r3, #28
 800392a:	493e      	ldr	r1, [pc, #248]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003932:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003938:	f023 021f 	bic.w	r2, r3, #31
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	3b01      	subs	r3, #1
 8003942:	4938      	ldr	r1, [pc, #224]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01d      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003956:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395c:	0e1b      	lsrs	r3, r3, #24
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003964:	4b2f      	ldr	r3, [pc, #188]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396a:	0f1b      	lsrs	r3, r3, #28
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	019a      	lsls	r2, r3, #6
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	071b      	lsls	r3, r3, #28
 800398a:	4926      	ldr	r1, [pc, #152]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d011      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	019a      	lsls	r2, r3, #6
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	491a      	ldr	r1, [pc, #104]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ce:	f7fd fc4b 	bl	8001268 <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d6:	f7fd fc47 	bl	8001268 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	; 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0d8      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f040 80ce 	bne.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fd fc2e 	bl	8001268 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a10:	f7fd fc2a 	bl	8001268 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d904      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e0bb      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a28:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a34:	d0ec      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02e      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a5e:	4b51      	ldr	r3, [pc, #324]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	0f1b      	lsrs	r3, r3, #28
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	019a      	lsls	r2, r3, #6
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	4944      	ldr	r1, [pc, #272]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a9a:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	493d      	ldr	r1, [pc, #244]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d022      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ac8:	d11d      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	0e1b      	lsrs	r3, r3, #24
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	0f1b      	lsrs	r3, r3, #28
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	431a      	orrs	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	071b      	lsls	r3, r3, #28
 8003afe:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d028      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	019a      	lsls	r2, r3, #6
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	071b      	lsls	r3, r3, #28
 8003b46:	4917      	ldr	r1, [pc, #92]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4911      	ldr	r1, [pc, #68]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b70:	f7fd fb7a 	bl	8001268 <HAL_GetTick>
 8003b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b78:	f7fd fb76 	bl	8001268 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e007      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b96:	d1ef      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e040      	b.n	8003c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd f8f6 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8b0 	bl	8003d4c <UART_SetConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e022      	b.n	8003c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fb08 	bl	8004214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb8f 	bl	8004358 <UART_CheckIdleState>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d171      	bne.n	8003d40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_UART_Transmit+0x24>
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e06a      	b.n	8003d42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2221      	movs	r2, #33	; 0x21
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd faf5 	bl	8001268 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c98:	d108      	bne.n	8003cac <HAL_UART_Transmit+0x68>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb4:	e02c      	b.n	8003d10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2180      	movs	r1, #128	; 0x80
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fb96 	bl	80043f2 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e038      	b.n	8003d42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3302      	adds	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	e007      	b.n	8003cfe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1cc      	bne.n	8003cb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fb63 	bl	80043f2 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e005      	b.n	8003d42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4ba6      	ldr	r3, [pc, #664]	; (8004010 <UART_SetConfig+0x2c4>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	6979      	ldr	r1, [r7, #20]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a94      	ldr	r2, [pc, #592]	; (8004014 <UART_SetConfig+0x2c8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d120      	bne.n	8003e0a <UART_SetConfig+0xbe>
 8003dc8:	4b93      	ldr	r3, [pc, #588]	; (8004018 <UART_SetConfig+0x2cc>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d816      	bhi.n	8003e04 <UART_SetConfig+0xb8>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <UART_SetConfig+0x90>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003df9 	.word	0x08003df9
 8003de4:	08003df3 	.word	0x08003df3
 8003de8:	08003dff 	.word	0x08003dff
 8003dec:	2301      	movs	r3, #1
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e150      	b.n	8004094 <UART_SetConfig+0x348>
 8003df2:	2302      	movs	r3, #2
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e14d      	b.n	8004094 <UART_SetConfig+0x348>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e14a      	b.n	8004094 <UART_SetConfig+0x348>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e147      	b.n	8004094 <UART_SetConfig+0x348>
 8003e04:	2310      	movs	r3, #16
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e144      	b.n	8004094 <UART_SetConfig+0x348>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a83      	ldr	r2, [pc, #524]	; (800401c <UART_SetConfig+0x2d0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d132      	bne.n	8003e7a <UART_SetConfig+0x12e>
 8003e14:	4b80      	ldr	r3, [pc, #512]	; (8004018 <UART_SetConfig+0x2cc>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b0c      	cmp	r3, #12
 8003e20:	d828      	bhi.n	8003e74 <UART_SetConfig+0x128>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0xdc>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003e75 	.word	0x08003e75
 8003e30:	08003e75 	.word	0x08003e75
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e69 	.word	0x08003e69
 8003e3c:	08003e75 	.word	0x08003e75
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e75 	.word	0x08003e75
 8003e48:	08003e63 	.word	0x08003e63
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e6f 	.word	0x08003e6f
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e118      	b.n	8004094 <UART_SetConfig+0x348>
 8003e62:	2302      	movs	r3, #2
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e115      	b.n	8004094 <UART_SetConfig+0x348>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e112      	b.n	8004094 <UART_SetConfig+0x348>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e10f      	b.n	8004094 <UART_SetConfig+0x348>
 8003e74:	2310      	movs	r3, #16
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e10c      	b.n	8004094 <UART_SetConfig+0x348>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a68      	ldr	r2, [pc, #416]	; (8004020 <UART_SetConfig+0x2d4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d120      	bne.n	8003ec6 <UART_SetConfig+0x17a>
 8003e84:	4b64      	ldr	r3, [pc, #400]	; (8004018 <UART_SetConfig+0x2cc>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e8e:	2b30      	cmp	r3, #48	; 0x30
 8003e90:	d013      	beq.n	8003eba <UART_SetConfig+0x16e>
 8003e92:	2b30      	cmp	r3, #48	; 0x30
 8003e94:	d814      	bhi.n	8003ec0 <UART_SetConfig+0x174>
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d009      	beq.n	8003eae <UART_SetConfig+0x162>
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d810      	bhi.n	8003ec0 <UART_SetConfig+0x174>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <UART_SetConfig+0x15c>
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d006      	beq.n	8003eb4 <UART_SetConfig+0x168>
 8003ea6:	e00b      	b.n	8003ec0 <UART_SetConfig+0x174>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e0f2      	b.n	8004094 <UART_SetConfig+0x348>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e0ef      	b.n	8004094 <UART_SetConfig+0x348>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e0ec      	b.n	8004094 <UART_SetConfig+0x348>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e0e9      	b.n	8004094 <UART_SetConfig+0x348>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e0e6      	b.n	8004094 <UART_SetConfig+0x348>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a56      	ldr	r2, [pc, #344]	; (8004024 <UART_SetConfig+0x2d8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d120      	bne.n	8003f12 <UART_SetConfig+0x1c6>
 8003ed0:	4b51      	ldr	r3, [pc, #324]	; (8004018 <UART_SetConfig+0x2cc>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eda:	2bc0      	cmp	r3, #192	; 0xc0
 8003edc:	d013      	beq.n	8003f06 <UART_SetConfig+0x1ba>
 8003ede:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee0:	d814      	bhi.n	8003f0c <UART_SetConfig+0x1c0>
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d009      	beq.n	8003efa <UART_SetConfig+0x1ae>
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d810      	bhi.n	8003f0c <UART_SetConfig+0x1c0>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <UART_SetConfig+0x1a8>
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d006      	beq.n	8003f00 <UART_SetConfig+0x1b4>
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x1c0>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e0cc      	b.n	8004094 <UART_SetConfig+0x348>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0c9      	b.n	8004094 <UART_SetConfig+0x348>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e0c6      	b.n	8004094 <UART_SetConfig+0x348>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e0c3      	b.n	8004094 <UART_SetConfig+0x348>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e0c0      	b.n	8004094 <UART_SetConfig+0x348>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a44      	ldr	r2, [pc, #272]	; (8004028 <UART_SetConfig+0x2dc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d125      	bne.n	8003f68 <UART_SetConfig+0x21c>
 8003f1c:	4b3e      	ldr	r3, [pc, #248]	; (8004018 <UART_SetConfig+0x2cc>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2a:	d017      	beq.n	8003f5c <UART_SetConfig+0x210>
 8003f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f30:	d817      	bhi.n	8003f62 <UART_SetConfig+0x216>
 8003f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f36:	d00b      	beq.n	8003f50 <UART_SetConfig+0x204>
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d811      	bhi.n	8003f62 <UART_SetConfig+0x216>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <UART_SetConfig+0x1fe>
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f46:	d006      	beq.n	8003f56 <UART_SetConfig+0x20a>
 8003f48:	e00b      	b.n	8003f62 <UART_SetConfig+0x216>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e0a1      	b.n	8004094 <UART_SetConfig+0x348>
 8003f50:	2302      	movs	r3, #2
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e09e      	b.n	8004094 <UART_SetConfig+0x348>
 8003f56:	2304      	movs	r3, #4
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e09b      	b.n	8004094 <UART_SetConfig+0x348>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e098      	b.n	8004094 <UART_SetConfig+0x348>
 8003f62:	2310      	movs	r3, #16
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e095      	b.n	8004094 <UART_SetConfig+0x348>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <UART_SetConfig+0x2e0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d125      	bne.n	8003fbe <UART_SetConfig+0x272>
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <UART_SetConfig+0x2cc>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f80:	d017      	beq.n	8003fb2 <UART_SetConfig+0x266>
 8003f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f86:	d817      	bhi.n	8003fb8 <UART_SetConfig+0x26c>
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8c:	d00b      	beq.n	8003fa6 <UART_SetConfig+0x25a>
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	d811      	bhi.n	8003fb8 <UART_SetConfig+0x26c>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <UART_SetConfig+0x254>
 8003f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9c:	d006      	beq.n	8003fac <UART_SetConfig+0x260>
 8003f9e:	e00b      	b.n	8003fb8 <UART_SetConfig+0x26c>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e076      	b.n	8004094 <UART_SetConfig+0x348>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e073      	b.n	8004094 <UART_SetConfig+0x348>
 8003fac:	2304      	movs	r3, #4
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e070      	b.n	8004094 <UART_SetConfig+0x348>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e06d      	b.n	8004094 <UART_SetConfig+0x348>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e06a      	b.n	8004094 <UART_SetConfig+0x348>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <UART_SetConfig+0x2e4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d138      	bne.n	800403a <UART_SetConfig+0x2ee>
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <UART_SetConfig+0x2cc>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd6:	d017      	beq.n	8004008 <UART_SetConfig+0x2bc>
 8003fd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fdc:	d82a      	bhi.n	8004034 <UART_SetConfig+0x2e8>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d00b      	beq.n	8003ffc <UART_SetConfig+0x2b0>
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d824      	bhi.n	8004034 <UART_SetConfig+0x2e8>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <UART_SetConfig+0x2aa>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d006      	beq.n	8004002 <UART_SetConfig+0x2b6>
 8003ff4:	e01e      	b.n	8004034 <UART_SetConfig+0x2e8>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e04b      	b.n	8004094 <UART_SetConfig+0x348>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e048      	b.n	8004094 <UART_SetConfig+0x348>
 8004002:	2304      	movs	r3, #4
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e045      	b.n	8004094 <UART_SetConfig+0x348>
 8004008:	2308      	movs	r3, #8
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e042      	b.n	8004094 <UART_SetConfig+0x348>
 800400e:	bf00      	nop
 8004010:	efff69f3 	.word	0xefff69f3
 8004014:	40011000 	.word	0x40011000
 8004018:	40023800 	.word	0x40023800
 800401c:	40004400 	.word	0x40004400
 8004020:	40004800 	.word	0x40004800
 8004024:	40004c00 	.word	0x40004c00
 8004028:	40005000 	.word	0x40005000
 800402c:	40011400 	.word	0x40011400
 8004030:	40007800 	.word	0x40007800
 8004034:	2310      	movs	r3, #16
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e02c      	b.n	8004094 <UART_SetConfig+0x348>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <UART_SetConfig+0x4bc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d125      	bne.n	8004090 <UART_SetConfig+0x344>
 8004044:	4b71      	ldr	r3, [pc, #452]	; (800420c <UART_SetConfig+0x4c0>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800404e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004052:	d017      	beq.n	8004084 <UART_SetConfig+0x338>
 8004054:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004058:	d817      	bhi.n	800408a <UART_SetConfig+0x33e>
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405e:	d00b      	beq.n	8004078 <UART_SetConfig+0x32c>
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004064:	d811      	bhi.n	800408a <UART_SetConfig+0x33e>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <UART_SetConfig+0x326>
 800406a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800406e:	d006      	beq.n	800407e <UART_SetConfig+0x332>
 8004070:	e00b      	b.n	800408a <UART_SetConfig+0x33e>
 8004072:	2300      	movs	r3, #0
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e00d      	b.n	8004094 <UART_SetConfig+0x348>
 8004078:	2302      	movs	r3, #2
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e00a      	b.n	8004094 <UART_SetConfig+0x348>
 800407e:	2304      	movs	r3, #4
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e007      	b.n	8004094 <UART_SetConfig+0x348>
 8004084:	2308      	movs	r3, #8
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e004      	b.n	8004094 <UART_SetConfig+0x348>
 800408a:	2310      	movs	r3, #16
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e001      	b.n	8004094 <UART_SetConfig+0x348>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409c:	d15b      	bne.n	8004156 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800409e:	7ffb      	ldrb	r3, [r7, #31]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d828      	bhi.n	80040f6 <UART_SetConfig+0x3aa>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0x360>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040e1 	.word	0x080040e1
 80040b8:	080040f7 	.word	0x080040f7
 80040bc:	080040e7 	.word	0x080040e7
 80040c0:	080040f7 	.word	0x080040f7
 80040c4:	080040f7 	.word	0x080040f7
 80040c8:	080040f7 	.word	0x080040f7
 80040cc:	080040ef 	.word	0x080040ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d0:	f7ff f91a 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80040d4:	61b8      	str	r0, [r7, #24]
        break;
 80040d6:	e013      	b.n	8004100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7ff f92a 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 80040dc:	61b8      	str	r0, [r7, #24]
        break;
 80040de:	e00f      	b.n	8004100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e0:	4b4b      	ldr	r3, [pc, #300]	; (8004210 <UART_SetConfig+0x4c4>)
 80040e2:	61bb      	str	r3, [r7, #24]
        break;
 80040e4:	e00c      	b.n	8004100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e6:	f7fe fffd 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80040ea:	61b8      	str	r0, [r7, #24]
        break;
 80040ec:	e008      	b.n	8004100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f2:	61bb      	str	r3, [r7, #24]
        break;
 80040f4:	e004      	b.n	8004100 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	77bb      	strb	r3, [r7, #30]
        break;
 80040fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d074      	beq.n	80041f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	005a      	lsls	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b0f      	cmp	r3, #15
 8004120:	d916      	bls.n	8004150 <UART_SetConfig+0x404>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d212      	bcs.n	8004150 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f023 030f 	bic.w	r3, r3, #15
 8004132:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	b29b      	uxth	r3, r3
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	b29a      	uxth	r2, r3
 8004140:	89fb      	ldrh	r3, [r7, #14]
 8004142:	4313      	orrs	r3, r2
 8004144:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	89fa      	ldrh	r2, [r7, #14]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	e04f      	b.n	80041f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	77bb      	strb	r3, [r7, #30]
 8004154:	e04c      	b.n	80041f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004156:	7ffb      	ldrb	r3, [r7, #31]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d828      	bhi.n	80041ae <UART_SetConfig+0x462>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <UART_SetConfig+0x418>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004189 	.word	0x08004189
 8004168:	08004191 	.word	0x08004191
 800416c:	08004199 	.word	0x08004199
 8004170:	080041af 	.word	0x080041af
 8004174:	0800419f 	.word	0x0800419f
 8004178:	080041af 	.word	0x080041af
 800417c:	080041af 	.word	0x080041af
 8004180:	080041af 	.word	0x080041af
 8004184:	080041a7 	.word	0x080041a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7ff f8be 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 800418c:	61b8      	str	r0, [r7, #24]
        break;
 800418e:	e013      	b.n	80041b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004190:	f7ff f8ce 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 8004194:	61b8      	str	r0, [r7, #24]
        break;
 8004196:	e00f      	b.n	80041b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <UART_SetConfig+0x4c4>)
 800419a:	61bb      	str	r3, [r7, #24]
        break;
 800419c:	e00c      	b.n	80041b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419e:	f7fe ffa1 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80041a2:	61b8      	str	r0, [r7, #24]
        break;
 80041a4:	e008      	b.n	80041b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041aa:	61bb      	str	r3, [r7, #24]
        break;
 80041ac:	e004      	b.n	80041b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	77bb      	strb	r3, [r7, #30]
        break;
 80041b6:	bf00      	nop
    }

    if (pclk != 0U)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d018      	beq.n	80041f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085a      	lsrs	r2, r3, #1
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	441a      	add	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	d909      	bls.n	80041ec <UART_SetConfig+0x4a0>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d205      	bcs.n	80041ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	e001      	b.n	80041f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40007c00 	.word	0x40007c00
 800420c:	40023800 	.word	0x40023800
 8004210:	00f42400 	.word	0x00f42400

08004214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01a      	beq.n	800432a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004312:	d10a      	bne.n	800432a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  }
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004368:	f7fc ff7e 	bl	8001268 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b08      	cmp	r3, #8
 800437a:	d10e      	bne.n	800439a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f831 	bl	80043f2 <UART_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e027      	b.n	80043ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d10e      	bne.n	80043c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f81b 	bl	80043f2 <UART_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e011      	b.n	80043ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b09c      	sub	sp, #112	; 0x70
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004402:	e0a7      	b.n	8004554 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	f000 80a3 	beq.w	8004554 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fc ff2b 	bl	8001268 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <UART_WaitOnFlagUntilTimeout+0x32>
 800441e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004420:	2b00      	cmp	r3, #0
 8004422:	d13f      	bne.n	80044a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004438:	667b      	str	r3, [r7, #100]	; 0x64
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004444:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3308      	adds	r3, #8
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	663b      	str	r3, [r7, #96]	; 0x60
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004476:	64ba      	str	r2, [r7, #72]	; 0x48
 8004478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800447c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e068      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d050      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c0:	d148      	bne.n	8004554 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
 80044ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e6      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3308      	adds	r3, #8
 8004504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	613b      	str	r3, [r7, #16]
   return(result);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	66bb      	str	r3, [r7, #104]	; 0x68
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800451e:	623a      	str	r2, [r7, #32]
 8004520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	69f9      	ldr	r1, [r7, #28]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	61bb      	str	r3, [r7, #24]
   return(result);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e5      	bne.n	80044fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e010      	b.n	8004576 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	429a      	cmp	r2, r3
 8004570:	f43f af48 	beq.w	8004404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3770      	adds	r7, #112	; 0x70
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004580:	b084      	sub	sp, #16
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	f107 001c 	add.w	r0, r7, #28
 800458e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b01      	cmp	r3, #1
 8004596:	d120      	bne.n	80045da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <USB_CoreInit+0xac>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d105      	bne.n	80045ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa96 	bl	8004b00 <USB_CoreReset>
 80045d4:	4603      	mov	r3, r0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e010      	b.n	80045fc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fa8a 	bl	8004b00 <USB_CoreReset>
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10b      	bne.n	800461a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f043 0206 	orr.w	r2, r3, #6
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f043 0220 	orr.w	r2, r3, #32
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004626:	b004      	add	sp, #16
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	ffbdffbf 	.word	0xffbdffbf

08004630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 0201 	bic.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d115      	bne.n	80046a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004680:	2001      	movs	r0, #1
 8004682:	f7fc fdfd 	bl	8001280 <HAL_Delay>
      ms++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fa29 	bl	8004ae4 <USB_GetMode>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d01e      	beq.n	80046d6 <USB_SetCurrentMode+0x84>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b31      	cmp	r3, #49	; 0x31
 800469c:	d9f0      	bls.n	8004680 <USB_SetCurrentMode+0x2e>
 800469e:	e01a      	b.n	80046d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d115      	bne.n	80046d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046b2:	2001      	movs	r0, #1
 80046b4:	f7fc fde4 	bl	8001280 <HAL_Delay>
      ms++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa10 	bl	8004ae4 <USB_GetMode>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <USB_SetCurrentMode+0x84>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b31      	cmp	r3, #49	; 0x31
 80046ce:	d9f0      	bls.n	80046b2 <USB_SetCurrentMode+0x60>
 80046d0:	e001      	b.n	80046d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e005      	b.n	80046e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b32      	cmp	r3, #50	; 0x32
 80046da:	d101      	bne.n	80046e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046ec:	b084      	sub	sp, #16
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b086      	sub	sp, #24
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e009      	b.n	8004720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3340      	adds	r3, #64	; 0x40
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	2200      	movs	r2, #0
 8004718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	3301      	adds	r3, #1
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b0e      	cmp	r3, #14
 8004724:	d9f2      	bls.n	800470c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11c      	bne.n	8004766 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e005      	b.n	8004772 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004778:	461a      	mov	r2, r3
 800477a:	2300      	movs	r3, #0
 800477c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004784:	4619      	mov	r1, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	461a      	mov	r2, r3
 800478e:	680b      	ldr	r3, [r1, #0]
 8004790:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10c      	bne.n	80047b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800479e:	2100      	movs	r1, #0
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f965 	bl	8004a70 <USB_SetDevSpeed>
 80047a6:	e008      	b.n	80047ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047a8:	2101      	movs	r1, #1
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f960 	bl	8004a70 <USB_SetDevSpeed>
 80047b0:	e003      	b.n	80047ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047b2:	2103      	movs	r1, #3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f95b 	bl	8004a70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047ba:	2110      	movs	r1, #16
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f8f3 	bl	80049a8 <USB_FlushTxFifo>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f91f 	bl	8004a10 <USB_FlushRxFifo>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	461a      	mov	r2, r3
 80047e4:	2300      	movs	r3, #0
 80047e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	461a      	mov	r2, r3
 80047f0:	2300      	movs	r3, #0
 80047f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	461a      	mov	r2, r3
 80047fc:	2300      	movs	r3, #0
 80047fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	e043      	b.n	800488e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481c:	d118      	bne.n	8004850 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	461a      	mov	r2, r3
 8004832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e013      	b.n	8004862 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	461a      	mov	r2, r3
 8004848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e008      	b.n	8004862 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	461a      	mov	r2, r3
 800485e:	2300      	movs	r3, #0
 8004860:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	461a      	mov	r2, r3
 8004870:	2300      	movs	r3, #0
 8004872:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	461a      	mov	r2, r3
 8004882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d3b7      	bcc.n	8004806 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e043      	b.n	8004924 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b2:	d118      	bne.n	80048e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	461a      	mov	r2, r3
 80048c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e013      	b.n	80048f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	461a      	mov	r2, r3
 80048de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	e008      	b.n	80048f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	461a      	mov	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	461a      	mov	r2, r3
 8004918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800491c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	3301      	adds	r3, #1
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d3b7      	bcc.n	800489c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800494c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f043 0210 	orr.w	r2, r3, #16
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <USB_DevInit+0x2b4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f043 0208 	orr.w	r2, r3, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d105      	bne.n	8004990 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <USB_DevInit+0x2b8>)
 800498a:	4313      	orrs	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800499c:	b004      	add	sp, #16
 800499e:	4770      	bx	lr
 80049a0:	803c3800 	.word	0x803c3800
 80049a4:	40000004 	.word	0x40000004

080049a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <USB_FlushTxFifo+0x64>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e01b      	b.n	8004a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	daf2      	bge.n	80049b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	019b      	lsls	r3, r3, #6
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <USB_FlushTxFifo+0x64>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e006      	b.n	8004a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d0f0      	beq.n	80049e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	00030d40 	.word	0x00030d40

08004a10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <USB_FlushRxFifo+0x5c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e018      	b.n	8004a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	daf2      	bge.n	8004a1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2210      	movs	r2, #16
 8004a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <USB_FlushRxFifo+0x5c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e006      	b.n	8004a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d0f0      	beq.n	8004a40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	00030d40 	.word	0x00030d40

08004a70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004abc:	f023 0303 	bic.w	r3, r3, #3
 8004ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0301 	and.w	r3, r3, #1
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <USB_CoreReset+0x64>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e01b      	b.n	8004b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	daf2      	bge.n	8004b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <USB_CoreReset+0x64>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e006      	b.n	8004b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d0f0      	beq.n	8004b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	00030d40 	.word	0x00030d40

08004b68 <__cvt>:
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	ed2d 8b02 	vpush	{d8}
 8004b6e:	eeb0 8b40 	vmov.f64	d8, d0
 8004b72:	b085      	sub	sp, #20
 8004b74:	4617      	mov	r7, r2
 8004b76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004b78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004b7a:	ee18 2a90 	vmov	r2, s17
 8004b7e:	f025 0520 	bic.w	r5, r5, #32
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	bfb6      	itet	lt
 8004b86:	222d      	movlt	r2, #45	; 0x2d
 8004b88:	2200      	movge	r2, #0
 8004b8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8004b8e:	2d46      	cmp	r5, #70	; 0x46
 8004b90:	460c      	mov	r4, r1
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	d004      	beq.n	8004ba0 <__cvt+0x38>
 8004b96:	2d45      	cmp	r5, #69	; 0x45
 8004b98:	d100      	bne.n	8004b9c <__cvt+0x34>
 8004b9a:	3401      	adds	r4, #1
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	e000      	b.n	8004ba2 <__cvt+0x3a>
 8004ba0:	2103      	movs	r1, #3
 8004ba2:	ab03      	add	r3, sp, #12
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	ab02      	add	r3, sp, #8
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	4622      	mov	r2, r4
 8004bac:	4633      	mov	r3, r6
 8004bae:	eeb0 0b48 	vmov.f64	d0, d8
 8004bb2:	f000 fe41 	bl	8005838 <_dtoa_r>
 8004bb6:	2d47      	cmp	r5, #71	; 0x47
 8004bb8:	d101      	bne.n	8004bbe <__cvt+0x56>
 8004bba:	07fb      	lsls	r3, r7, #31
 8004bbc:	d51a      	bpl.n	8004bf4 <__cvt+0x8c>
 8004bbe:	2d46      	cmp	r5, #70	; 0x46
 8004bc0:	eb00 0204 	add.w	r2, r0, r4
 8004bc4:	d10c      	bne.n	8004be0 <__cvt+0x78>
 8004bc6:	7803      	ldrb	r3, [r0, #0]
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d107      	bne.n	8004bdc <__cvt+0x74>
 8004bcc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	bf1c      	itt	ne
 8004bd6:	f1c4 0401 	rsbne	r4, r4, #1
 8004bda:	6034      	strne	r4, [r6, #0]
 8004bdc:	6833      	ldr	r3, [r6, #0]
 8004bde:	441a      	add	r2, r3
 8004be0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	bf08      	it	eq
 8004bea:	9203      	streq	r2, [sp, #12]
 8004bec:	2130      	movs	r1, #48	; 0x30
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d307      	bcc.n	8004c04 <__cvt+0x9c>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bf8:	1a1b      	subs	r3, r3, r0
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	b005      	add	sp, #20
 8004bfe:	ecbd 8b02 	vpop	{d8}
 8004c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c04:	1c5c      	adds	r4, r3, #1
 8004c06:	9403      	str	r4, [sp, #12]
 8004c08:	7019      	strb	r1, [r3, #0]
 8004c0a:	e7f0      	b.n	8004bee <__cvt+0x86>

08004c0c <__exponent>:
 8004c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2900      	cmp	r1, #0
 8004c12:	bfb8      	it	lt
 8004c14:	4249      	neglt	r1, r1
 8004c16:	f803 2b02 	strb.w	r2, [r3], #2
 8004c1a:	bfb4      	ite	lt
 8004c1c:	222d      	movlt	r2, #45	; 0x2d
 8004c1e:	222b      	movge	r2, #43	; 0x2b
 8004c20:	2909      	cmp	r1, #9
 8004c22:	7042      	strb	r2, [r0, #1]
 8004c24:	dd2a      	ble.n	8004c7c <__exponent+0x70>
 8004c26:	f10d 0207 	add.w	r2, sp, #7
 8004c2a:	4617      	mov	r7, r2
 8004c2c:	260a      	movs	r6, #10
 8004c2e:	4694      	mov	ip, r2
 8004c30:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c34:	fb06 1415 	mls	r4, r6, r5, r1
 8004c38:	3430      	adds	r4, #48	; 0x30
 8004c3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c3e:	460c      	mov	r4, r1
 8004c40:	2c63      	cmp	r4, #99	; 0x63
 8004c42:	f102 32ff 	add.w	r2, r2, #4294967295
 8004c46:	4629      	mov	r1, r5
 8004c48:	dcf1      	bgt.n	8004c2e <__exponent+0x22>
 8004c4a:	3130      	adds	r1, #48	; 0x30
 8004c4c:	f1ac 0402 	sub.w	r4, ip, #2
 8004c50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c54:	1c41      	adds	r1, r0, #1
 8004c56:	4622      	mov	r2, r4
 8004c58:	42ba      	cmp	r2, r7
 8004c5a:	d30a      	bcc.n	8004c72 <__exponent+0x66>
 8004c5c:	f10d 0209 	add.w	r2, sp, #9
 8004c60:	eba2 020c 	sub.w	r2, r2, ip
 8004c64:	42bc      	cmp	r4, r7
 8004c66:	bf88      	it	hi
 8004c68:	2200      	movhi	r2, #0
 8004c6a:	4413      	add	r3, r2
 8004c6c:	1a18      	subs	r0, r3, r0
 8004c6e:	b003      	add	sp, #12
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004c76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004c7a:	e7ed      	b.n	8004c58 <__exponent+0x4c>
 8004c7c:	2330      	movs	r3, #48	; 0x30
 8004c7e:	3130      	adds	r1, #48	; 0x30
 8004c80:	7083      	strb	r3, [r0, #2]
 8004c82:	70c1      	strb	r1, [r0, #3]
 8004c84:	1d03      	adds	r3, r0, #4
 8004c86:	e7f1      	b.n	8004c6c <__exponent+0x60>

08004c88 <_printf_float>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	b08b      	sub	sp, #44	; 0x2c
 8004c8e:	460c      	mov	r4, r1
 8004c90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004c94:	4616      	mov	r6, r2
 8004c96:	461f      	mov	r7, r3
 8004c98:	4605      	mov	r5, r0
 8004c9a:	f000 fccd 	bl	8005638 <_localeconv_r>
 8004c9e:	f8d0 b000 	ldr.w	fp, [r0]
 8004ca2:	4658      	mov	r0, fp
 8004ca4:	f7fb fb1c 	bl	80002e0 <strlen>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9308      	str	r3, [sp, #32]
 8004cac:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	3307      	adds	r3, #7
 8004cb8:	f023 0307 	bic.w	r3, r3, #7
 8004cbc:	f103 0108 	add.w	r1, r3, #8
 8004cc0:	f8c8 1000 	str.w	r1, [r8]
 8004cc4:	ed93 0b00 	vldr	d0, [r3]
 8004cc8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004f28 <_printf_float+0x2a0>
 8004ccc:	eeb0 7bc0 	vabs.f64	d7, d0
 8004cd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8004cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004cdc:	4682      	mov	sl, r0
 8004cde:	dd24      	ble.n	8004d2a <_printf_float+0xa2>
 8004ce0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce8:	d502      	bpl.n	8004cf0 <_printf_float+0x68>
 8004cea:	232d      	movs	r3, #45	; 0x2d
 8004cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf0:	498f      	ldr	r1, [pc, #572]	; (8004f30 <_printf_float+0x2a8>)
 8004cf2:	4b90      	ldr	r3, [pc, #576]	; (8004f34 <_printf_float+0x2ac>)
 8004cf4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004cf8:	bf94      	ite	ls
 8004cfa:	4688      	movls	r8, r1
 8004cfc:	4698      	movhi	r8, r3
 8004cfe:	2303      	movs	r3, #3
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	f022 0204 	bic.w	r2, r2, #4
 8004d06:	2300      	movs	r3, #0
 8004d08:	6022      	str	r2, [r4, #0]
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	9700      	str	r7, [sp, #0]
 8004d0e:	4633      	mov	r3, r6
 8004d10:	aa09      	add	r2, sp, #36	; 0x24
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f9d1 	bl	80050bc <_printf_common>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f040 808a 	bne.w	8004e34 <_printf_float+0x1ac>
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	b00b      	add	sp, #44	; 0x2c
 8004d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8004d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d32:	d709      	bvc.n	8004d48 <_printf_float+0xc0>
 8004d34:	ee10 3a90 	vmov	r3, s1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bfbc      	itt	lt
 8004d3c:	232d      	movlt	r3, #45	; 0x2d
 8004d3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d42:	497d      	ldr	r1, [pc, #500]	; (8004f38 <_printf_float+0x2b0>)
 8004d44:	4b7d      	ldr	r3, [pc, #500]	; (8004f3c <_printf_float+0x2b4>)
 8004d46:	e7d5      	b.n	8004cf4 <_printf_float+0x6c>
 8004d48:	6863      	ldr	r3, [r4, #4]
 8004d4a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d4e:	9104      	str	r1, [sp, #16]
 8004d50:	1c59      	adds	r1, r3, #1
 8004d52:	d13c      	bne.n	8004dce <_printf_float+0x146>
 8004d54:	2306      	movs	r3, #6
 8004d56:	6063      	str	r3, [r4, #4]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	ab08      	add	r3, sp, #32
 8004d5e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d66:	ab07      	add	r3, sp, #28
 8004d68:	6861      	ldr	r1, [r4, #4]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	f10d 031b 	add.w	r3, sp, #27
 8004d72:	4628      	mov	r0, r5
 8004d74:	f7ff fef8 	bl	8004b68 <__cvt>
 8004d78:	9b04      	ldr	r3, [sp, #16]
 8004d7a:	9907      	ldr	r1, [sp, #28]
 8004d7c:	2b47      	cmp	r3, #71	; 0x47
 8004d7e:	4680      	mov	r8, r0
 8004d80:	d108      	bne.n	8004d94 <_printf_float+0x10c>
 8004d82:	1cc8      	adds	r0, r1, #3
 8004d84:	db02      	blt.n	8004d8c <_printf_float+0x104>
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	4299      	cmp	r1, r3
 8004d8a:	dd41      	ble.n	8004e10 <_printf_float+0x188>
 8004d8c:	f1a9 0902 	sub.w	r9, r9, #2
 8004d90:	fa5f f989 	uxtb.w	r9, r9
 8004d94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d98:	d820      	bhi.n	8004ddc <_printf_float+0x154>
 8004d9a:	3901      	subs	r1, #1
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004da2:	9107      	str	r1, [sp, #28]
 8004da4:	f7ff ff32 	bl	8004c0c <__exponent>
 8004da8:	9a08      	ldr	r2, [sp, #32]
 8004daa:	9004      	str	r0, [sp, #16]
 8004dac:	1813      	adds	r3, r2, r0
 8004dae:	2a01      	cmp	r2, #1
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	dc02      	bgt.n	8004dba <_printf_float+0x132>
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	07d2      	lsls	r2, r2, #31
 8004db8:	d501      	bpl.n	8004dbe <_printf_float+0x136>
 8004dba:	3301      	adds	r3, #1
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0a2      	beq.n	8004d0c <_printf_float+0x84>
 8004dc6:	232d      	movs	r3, #45	; 0x2d
 8004dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dcc:	e79e      	b.n	8004d0c <_printf_float+0x84>
 8004dce:	9904      	ldr	r1, [sp, #16]
 8004dd0:	2947      	cmp	r1, #71	; 0x47
 8004dd2:	d1c1      	bne.n	8004d58 <_printf_float+0xd0>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1bf      	bne.n	8004d58 <_printf_float+0xd0>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e7bc      	b.n	8004d56 <_printf_float+0xce>
 8004ddc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004de0:	d118      	bne.n	8004e14 <_printf_float+0x18c>
 8004de2:	2900      	cmp	r1, #0
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	dd0b      	ble.n	8004e00 <_printf_float+0x178>
 8004de8:	6121      	str	r1, [r4, #16]
 8004dea:	b913      	cbnz	r3, 8004df2 <_printf_float+0x16a>
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	07d0      	lsls	r0, r2, #31
 8004df0:	d502      	bpl.n	8004df8 <_printf_float+0x170>
 8004df2:	3301      	adds	r3, #1
 8004df4:	440b      	add	r3, r1
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8004dfc:	9304      	str	r3, [sp, #16]
 8004dfe:	e7de      	b.n	8004dbe <_printf_float+0x136>
 8004e00:	b913      	cbnz	r3, 8004e08 <_printf_float+0x180>
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	07d2      	lsls	r2, r2, #31
 8004e06:	d501      	bpl.n	8004e0c <_printf_float+0x184>
 8004e08:	3302      	adds	r3, #2
 8004e0a:	e7f4      	b.n	8004df6 <_printf_float+0x16e>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e7f2      	b.n	8004df6 <_printf_float+0x16e>
 8004e10:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e14:	9b08      	ldr	r3, [sp, #32]
 8004e16:	4299      	cmp	r1, r3
 8004e18:	db05      	blt.n	8004e26 <_printf_float+0x19e>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	6121      	str	r1, [r4, #16]
 8004e1e:	07d8      	lsls	r0, r3, #31
 8004e20:	d5ea      	bpl.n	8004df8 <_printf_float+0x170>
 8004e22:	1c4b      	adds	r3, r1, #1
 8004e24:	e7e7      	b.n	8004df6 <_printf_float+0x16e>
 8004e26:	2900      	cmp	r1, #0
 8004e28:	bfd4      	ite	le
 8004e2a:	f1c1 0202 	rsble	r2, r1, #2
 8004e2e:	2201      	movgt	r2, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	e7e0      	b.n	8004df6 <_printf_float+0x16e>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	055a      	lsls	r2, r3, #21
 8004e38:	d407      	bmi.n	8004e4a <_printf_float+0x1c2>
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b8      	blx	r7
 8004e44:	3001      	adds	r0, #1
 8004e46:	d12a      	bne.n	8004e9e <_printf_float+0x216>
 8004e48:	e76a      	b.n	8004d20 <_printf_float+0x98>
 8004e4a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e4e:	f240 80e0 	bls.w	8005012 <_printf_float+0x38a>
 8004e52:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004e56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	d133      	bne.n	8004ec8 <_printf_float+0x240>
 8004e60:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <_printf_float+0x2b8>)
 8004e62:	2301      	movs	r3, #1
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f af58 	beq.w	8004d20 <_printf_float+0x98>
 8004e70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	db02      	blt.n	8004e7e <_printf_float+0x1f6>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	07d8      	lsls	r0, r3, #31
 8004e7c:	d50f      	bpl.n	8004e9e <_printf_float+0x216>
 8004e7e:	4653      	mov	r3, sl
 8004e80:	465a      	mov	r2, fp
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	f43f af49 	beq.w	8004d20 <_printf_float+0x98>
 8004e8e:	f04f 0800 	mov.w	r8, #0
 8004e92:	f104 091a 	add.w	r9, r4, #26
 8004e96:	9b08      	ldr	r3, [sp, #32]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	4543      	cmp	r3, r8
 8004e9c:	dc09      	bgt.n	8004eb2 <_printf_float+0x22a>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	079b      	lsls	r3, r3, #30
 8004ea2:	f100 8106 	bmi.w	80050b2 <_printf_float+0x42a>
 8004ea6:	68e0      	ldr	r0, [r4, #12]
 8004ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eaa:	4298      	cmp	r0, r3
 8004eac:	bfb8      	it	lt
 8004eae:	4618      	movlt	r0, r3
 8004eb0:	e738      	b.n	8004d24 <_printf_float+0x9c>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f af2f 	beq.w	8004d20 <_printf_float+0x98>
 8004ec2:	f108 0801 	add.w	r8, r8, #1
 8004ec6:	e7e6      	b.n	8004e96 <_printf_float+0x20e>
 8004ec8:	9b07      	ldr	r3, [sp, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	dc3a      	bgt.n	8004f44 <_printf_float+0x2bc>
 8004ece:	4a1c      	ldr	r2, [pc, #112]	; (8004f40 <_printf_float+0x2b8>)
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f af21 	beq.w	8004d20 <_printf_float+0x98>
 8004ede:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	d102      	bne.n	8004eec <_printf_float+0x264>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	07d9      	lsls	r1, r3, #31
 8004eea:	d5d8      	bpl.n	8004e9e <_printf_float+0x216>
 8004eec:	4653      	mov	r3, sl
 8004eee:	465a      	mov	r2, fp
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f af12 	beq.w	8004d20 <_printf_float+0x98>
 8004efc:	f04f 0900 	mov.w	r9, #0
 8004f00:	f104 0a1a 	add.w	sl, r4, #26
 8004f04:	9b07      	ldr	r3, [sp, #28]
 8004f06:	425b      	negs	r3, r3
 8004f08:	454b      	cmp	r3, r9
 8004f0a:	dc01      	bgt.n	8004f10 <_printf_float+0x288>
 8004f0c:	9b08      	ldr	r3, [sp, #32]
 8004f0e:	e795      	b.n	8004e3c <_printf_float+0x1b4>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4652      	mov	r2, sl
 8004f14:	4631      	mov	r1, r6
 8004f16:	4628      	mov	r0, r5
 8004f18:	47b8      	blx	r7
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f43f af00 	beq.w	8004d20 <_printf_float+0x98>
 8004f20:	f109 0901 	add.w	r9, r9, #1
 8004f24:	e7ee      	b.n	8004f04 <_printf_float+0x27c>
 8004f26:	bf00      	nop
 8004f28:	ffffffff 	.word	0xffffffff
 8004f2c:	7fefffff 	.word	0x7fefffff
 8004f30:	08007d4c 	.word	0x08007d4c
 8004f34:	08007d50 	.word	0x08007d50
 8004f38:	08007d54 	.word	0x08007d54
 8004f3c:	08007d58 	.word	0x08007d58
 8004f40:	08007d5c 	.word	0x08007d5c
 8004f44:	9a08      	ldr	r2, [sp, #32]
 8004f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	bfa8      	it	ge
 8004f4c:	461a      	movge	r2, r3
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	4691      	mov	r9, r2
 8004f52:	dc38      	bgt.n	8004fc6 <_printf_float+0x33e>
 8004f54:	2300      	movs	r3, #0
 8004f56:	9305      	str	r3, [sp, #20]
 8004f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f5c:	f104 021a 	add.w	r2, r4, #26
 8004f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f62:	9905      	ldr	r1, [sp, #20]
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	eba3 0309 	sub.w	r3, r3, r9
 8004f6a:	428b      	cmp	r3, r1
 8004f6c:	dc33      	bgt.n	8004fd6 <_printf_float+0x34e>
 8004f6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	db3c      	blt.n	8004ff0 <_printf_float+0x368>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	07da      	lsls	r2, r3, #31
 8004f7a:	d439      	bmi.n	8004ff0 <_printf_float+0x368>
 8004f7c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004f80:	eba2 0903 	sub.w	r9, r2, r3
 8004f84:	9b04      	ldr	r3, [sp, #16]
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	4591      	cmp	r9, r2
 8004f8a:	bfa8      	it	ge
 8004f8c:	4691      	movge	r9, r2
 8004f8e:	f1b9 0f00 	cmp.w	r9, #0
 8004f92:	dc35      	bgt.n	8005000 <_printf_float+0x378>
 8004f94:	f04f 0800 	mov.w	r8, #0
 8004f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f9c:	f104 0a1a 	add.w	sl, r4, #26
 8004fa0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	eba3 0309 	sub.w	r3, r3, r9
 8004faa:	4543      	cmp	r3, r8
 8004fac:	f77f af77 	ble.w	8004e9e <_printf_float+0x216>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	4652      	mov	r2, sl
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b8      	blx	r7
 8004fba:	3001      	adds	r0, #1
 8004fbc:	f43f aeb0 	beq.w	8004d20 <_printf_float+0x98>
 8004fc0:	f108 0801 	add.w	r8, r8, #1
 8004fc4:	e7ec      	b.n	8004fa0 <_printf_float+0x318>
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4642      	mov	r2, r8
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d1bf      	bne.n	8004f54 <_printf_float+0x2cc>
 8004fd4:	e6a4      	b.n	8004d20 <_printf_float+0x98>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4628      	mov	r0, r5
 8004fdc:	9204      	str	r2, [sp, #16]
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f43f ae9d 	beq.w	8004d20 <_printf_float+0x98>
 8004fe6:	9b05      	ldr	r3, [sp, #20]
 8004fe8:	9a04      	ldr	r2, [sp, #16]
 8004fea:	3301      	adds	r3, #1
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	e7b7      	b.n	8004f60 <_printf_float+0x2d8>
 8004ff0:	4653      	mov	r3, sl
 8004ff2:	465a      	mov	r2, fp
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	47b8      	blx	r7
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d1be      	bne.n	8004f7c <_printf_float+0x2f4>
 8004ffe:	e68f      	b.n	8004d20 <_printf_float+0x98>
 8005000:	9a04      	ldr	r2, [sp, #16]
 8005002:	464b      	mov	r3, r9
 8005004:	4442      	add	r2, r8
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	d1c1      	bne.n	8004f94 <_printf_float+0x30c>
 8005010:	e686      	b.n	8004d20 <_printf_float+0x98>
 8005012:	9a08      	ldr	r2, [sp, #32]
 8005014:	2a01      	cmp	r2, #1
 8005016:	dc01      	bgt.n	800501c <_printf_float+0x394>
 8005018:	07db      	lsls	r3, r3, #31
 800501a:	d537      	bpl.n	800508c <_printf_float+0x404>
 800501c:	2301      	movs	r3, #1
 800501e:	4642      	mov	r2, r8
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f43f ae7a 	beq.w	8004d20 <_printf_float+0x98>
 800502c:	4653      	mov	r3, sl
 800502e:	465a      	mov	r2, fp
 8005030:	4631      	mov	r1, r6
 8005032:	4628      	mov	r0, r5
 8005034:	47b8      	blx	r7
 8005036:	3001      	adds	r0, #1
 8005038:	f43f ae72 	beq.w	8004d20 <_printf_float+0x98>
 800503c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005040:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005048:	9b08      	ldr	r3, [sp, #32]
 800504a:	d01a      	beq.n	8005082 <_printf_float+0x3fa>
 800504c:	3b01      	subs	r3, #1
 800504e:	f108 0201 	add.w	r2, r8, #1
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	d10e      	bne.n	800507a <_printf_float+0x3f2>
 800505c:	e660      	b.n	8004d20 <_printf_float+0x98>
 800505e:	2301      	movs	r3, #1
 8005060:	464a      	mov	r2, r9
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	f43f ae59 	beq.w	8004d20 <_printf_float+0x98>
 800506e:	f108 0801 	add.w	r8, r8, #1
 8005072:	9b08      	ldr	r3, [sp, #32]
 8005074:	3b01      	subs	r3, #1
 8005076:	4543      	cmp	r3, r8
 8005078:	dcf1      	bgt.n	800505e <_printf_float+0x3d6>
 800507a:	9b04      	ldr	r3, [sp, #16]
 800507c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005080:	e6dd      	b.n	8004e3e <_printf_float+0x1b6>
 8005082:	f04f 0800 	mov.w	r8, #0
 8005086:	f104 091a 	add.w	r9, r4, #26
 800508a:	e7f2      	b.n	8005072 <_printf_float+0x3ea>
 800508c:	2301      	movs	r3, #1
 800508e:	4642      	mov	r2, r8
 8005090:	e7df      	b.n	8005052 <_printf_float+0x3ca>
 8005092:	2301      	movs	r3, #1
 8005094:	464a      	mov	r2, r9
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	f43f ae3f 	beq.w	8004d20 <_printf_float+0x98>
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050aa:	1a5b      	subs	r3, r3, r1
 80050ac:	4543      	cmp	r3, r8
 80050ae:	dcf0      	bgt.n	8005092 <_printf_float+0x40a>
 80050b0:	e6f9      	b.n	8004ea6 <_printf_float+0x21e>
 80050b2:	f04f 0800 	mov.w	r8, #0
 80050b6:	f104 0919 	add.w	r9, r4, #25
 80050ba:	e7f4      	b.n	80050a6 <_printf_float+0x41e>

080050bc <_printf_common>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	4616      	mov	r6, r2
 80050c2:	4699      	mov	r9, r3
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	690b      	ldr	r3, [r1, #16]
 80050c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bfb8      	it	lt
 80050d0:	4613      	movlt	r3, r2
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d8:	4607      	mov	r7, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b10a      	cbz	r2, 80050e2 <_printf_common+0x26>
 80050de:	3301      	adds	r3, #1
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	0699      	lsls	r1, r3, #26
 80050e6:	bf42      	ittt	mi
 80050e8:	6833      	ldrmi	r3, [r6, #0]
 80050ea:	3302      	addmi	r3, #2
 80050ec:	6033      	strmi	r3, [r6, #0]
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	f015 0506 	ands.w	r5, r5, #6
 80050f4:	d106      	bne.n	8005104 <_printf_common+0x48>
 80050f6:	f104 0a19 	add.w	sl, r4, #25
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	6832      	ldr	r2, [r6, #0]
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	42ab      	cmp	r3, r5
 8005102:	dc26      	bgt.n	8005152 <_printf_common+0x96>
 8005104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005108:	1e13      	subs	r3, r2, #0
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	bf18      	it	ne
 800510e:	2301      	movne	r3, #1
 8005110:	0692      	lsls	r2, r2, #26
 8005112:	d42b      	bmi.n	800516c <_printf_common+0xb0>
 8005114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005118:	4649      	mov	r1, r9
 800511a:	4638      	mov	r0, r7
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d01e      	beq.n	8005160 <_printf_common+0xa4>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	f003 0306 	and.w	r3, r3, #6
 800512a:	2b04      	cmp	r3, #4
 800512c:	bf02      	ittt	eq
 800512e:	68e5      	ldreq	r5, [r4, #12]
 8005130:	6833      	ldreq	r3, [r6, #0]
 8005132:	1aed      	subeq	r5, r5, r3
 8005134:	68a3      	ldr	r3, [r4, #8]
 8005136:	bf0c      	ite	eq
 8005138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800513c:	2500      	movne	r5, #0
 800513e:	4293      	cmp	r3, r2
 8005140:	bfc4      	itt	gt
 8005142:	1a9b      	subgt	r3, r3, r2
 8005144:	18ed      	addgt	r5, r5, r3
 8005146:	2600      	movs	r6, #0
 8005148:	341a      	adds	r4, #26
 800514a:	42b5      	cmp	r5, r6
 800514c:	d11a      	bne.n	8005184 <_printf_common+0xc8>
 800514e:	2000      	movs	r0, #0
 8005150:	e008      	b.n	8005164 <_printf_common+0xa8>
 8005152:	2301      	movs	r3, #1
 8005154:	4652      	mov	r2, sl
 8005156:	4649      	mov	r1, r9
 8005158:	4638      	mov	r0, r7
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d103      	bne.n	8005168 <_printf_common+0xac>
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005168:	3501      	adds	r5, #1
 800516a:	e7c6      	b.n	80050fa <_printf_common+0x3e>
 800516c:	18e1      	adds	r1, r4, r3
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	2030      	movs	r0, #48	; 0x30
 8005172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005176:	4422      	add	r2, r4
 8005178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800517c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005180:	3302      	adds	r3, #2
 8005182:	e7c7      	b.n	8005114 <_printf_common+0x58>
 8005184:	2301      	movs	r3, #1
 8005186:	4622      	mov	r2, r4
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d0e6      	beq.n	8005160 <_printf_common+0xa4>
 8005192:	3601      	adds	r6, #1
 8005194:	e7d9      	b.n	800514a <_printf_common+0x8e>
	...

08005198 <_printf_i>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	7e0f      	ldrb	r7, [r1, #24]
 800519e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051a0:	2f78      	cmp	r7, #120	; 0x78
 80051a2:	4691      	mov	r9, r2
 80051a4:	4680      	mov	r8, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	469a      	mov	sl, r3
 80051aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051ae:	d807      	bhi.n	80051c0 <_printf_i+0x28>
 80051b0:	2f62      	cmp	r7, #98	; 0x62
 80051b2:	d80a      	bhi.n	80051ca <_printf_i+0x32>
 80051b4:	2f00      	cmp	r7, #0
 80051b6:	f000 80d4 	beq.w	8005362 <_printf_i+0x1ca>
 80051ba:	2f58      	cmp	r7, #88	; 0x58
 80051bc:	f000 80c0 	beq.w	8005340 <_printf_i+0x1a8>
 80051c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c8:	e03a      	b.n	8005240 <_printf_i+0xa8>
 80051ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ce:	2b15      	cmp	r3, #21
 80051d0:	d8f6      	bhi.n	80051c0 <_printf_i+0x28>
 80051d2:	a101      	add	r1, pc, #4	; (adr r1, 80051d8 <_printf_i+0x40>)
 80051d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005245 	.word	0x08005245
 80051e0:	080051c1 	.word	0x080051c1
 80051e4:	080051c1 	.word	0x080051c1
 80051e8:	080051c1 	.word	0x080051c1
 80051ec:	080051c1 	.word	0x080051c1
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080051c1 	.word	0x080051c1
 80051f8:	080051c1 	.word	0x080051c1
 80051fc:	080051c1 	.word	0x080051c1
 8005200:	080051c1 	.word	0x080051c1
 8005204:	08005349 	.word	0x08005349
 8005208:	08005271 	.word	0x08005271
 800520c:	08005303 	.word	0x08005303
 8005210:	080051c1 	.word	0x080051c1
 8005214:	080051c1 	.word	0x080051c1
 8005218:	0800536b 	.word	0x0800536b
 800521c:	080051c1 	.word	0x080051c1
 8005220:	08005271 	.word	0x08005271
 8005224:	080051c1 	.word	0x080051c1
 8005228:	080051c1 	.word	0x080051c1
 800522c:	0800530b 	.word	0x0800530b
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	602a      	str	r2, [r5, #0]
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005240:	2301      	movs	r3, #1
 8005242:	e09f      	b.n	8005384 <_printf_i+0x1ec>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	0607      	lsls	r7, r0, #24
 800524a:	f103 0104 	add.w	r1, r3, #4
 800524e:	6029      	str	r1, [r5, #0]
 8005250:	d501      	bpl.n	8005256 <_printf_i+0xbe>
 8005252:	681e      	ldr	r6, [r3, #0]
 8005254:	e003      	b.n	800525e <_printf_i+0xc6>
 8005256:	0646      	lsls	r6, r0, #25
 8005258:	d5fb      	bpl.n	8005252 <_printf_i+0xba>
 800525a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800525e:	2e00      	cmp	r6, #0
 8005260:	da03      	bge.n	800526a <_printf_i+0xd2>
 8005262:	232d      	movs	r3, #45	; 0x2d
 8005264:	4276      	negs	r6, r6
 8005266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526a:	485a      	ldr	r0, [pc, #360]	; (80053d4 <_printf_i+0x23c>)
 800526c:	230a      	movs	r3, #10
 800526e:	e012      	b.n	8005296 <_printf_i+0xfe>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	1d19      	adds	r1, r3, #4
 8005276:	6029      	str	r1, [r5, #0]
 8005278:	0605      	lsls	r5, r0, #24
 800527a:	d501      	bpl.n	8005280 <_printf_i+0xe8>
 800527c:	681e      	ldr	r6, [r3, #0]
 800527e:	e002      	b.n	8005286 <_printf_i+0xee>
 8005280:	0641      	lsls	r1, r0, #25
 8005282:	d5fb      	bpl.n	800527c <_printf_i+0xe4>
 8005284:	881e      	ldrh	r6, [r3, #0]
 8005286:	4853      	ldr	r0, [pc, #332]	; (80053d4 <_printf_i+0x23c>)
 8005288:	2f6f      	cmp	r7, #111	; 0x6f
 800528a:	bf0c      	ite	eq
 800528c:	2308      	moveq	r3, #8
 800528e:	230a      	movne	r3, #10
 8005290:	2100      	movs	r1, #0
 8005292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005296:	6865      	ldr	r5, [r4, #4]
 8005298:	60a5      	str	r5, [r4, #8]
 800529a:	2d00      	cmp	r5, #0
 800529c:	bfa2      	ittt	ge
 800529e:	6821      	ldrge	r1, [r4, #0]
 80052a0:	f021 0104 	bicge.w	r1, r1, #4
 80052a4:	6021      	strge	r1, [r4, #0]
 80052a6:	b90e      	cbnz	r6, 80052ac <_printf_i+0x114>
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	d04b      	beq.n	8005344 <_printf_i+0x1ac>
 80052ac:	4615      	mov	r5, r2
 80052ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80052b2:	fb03 6711 	mls	r7, r3, r1, r6
 80052b6:	5dc7      	ldrb	r7, [r0, r7]
 80052b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052bc:	4637      	mov	r7, r6
 80052be:	42bb      	cmp	r3, r7
 80052c0:	460e      	mov	r6, r1
 80052c2:	d9f4      	bls.n	80052ae <_printf_i+0x116>
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10b      	bne.n	80052e0 <_printf_i+0x148>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	07de      	lsls	r6, r3, #31
 80052cc:	d508      	bpl.n	80052e0 <_printf_i+0x148>
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	6861      	ldr	r1, [r4, #4]
 80052d2:	4299      	cmp	r1, r3
 80052d4:	bfde      	ittt	le
 80052d6:	2330      	movle	r3, #48	; 0x30
 80052d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052e0:	1b52      	subs	r2, r2, r5
 80052e2:	6122      	str	r2, [r4, #16]
 80052e4:	f8cd a000 	str.w	sl, [sp]
 80052e8:	464b      	mov	r3, r9
 80052ea:	aa03      	add	r2, sp, #12
 80052ec:	4621      	mov	r1, r4
 80052ee:	4640      	mov	r0, r8
 80052f0:	f7ff fee4 	bl	80050bc <_printf_common>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d14a      	bne.n	800538e <_printf_i+0x1f6>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	b004      	add	sp, #16
 80052fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	f043 0320 	orr.w	r3, r3, #32
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	4833      	ldr	r0, [pc, #204]	; (80053d8 <_printf_i+0x240>)
 800530c:	2778      	movs	r7, #120	; 0x78
 800530e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	6829      	ldr	r1, [r5, #0]
 8005316:	061f      	lsls	r7, r3, #24
 8005318:	f851 6b04 	ldr.w	r6, [r1], #4
 800531c:	d402      	bmi.n	8005324 <_printf_i+0x18c>
 800531e:	065f      	lsls	r7, r3, #25
 8005320:	bf48      	it	mi
 8005322:	b2b6      	uxthmi	r6, r6
 8005324:	07df      	lsls	r7, r3, #31
 8005326:	bf48      	it	mi
 8005328:	f043 0320 	orrmi.w	r3, r3, #32
 800532c:	6029      	str	r1, [r5, #0]
 800532e:	bf48      	it	mi
 8005330:	6023      	strmi	r3, [r4, #0]
 8005332:	b91e      	cbnz	r6, 800533c <_printf_i+0x1a4>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	f023 0320 	bic.w	r3, r3, #32
 800533a:	6023      	str	r3, [r4, #0]
 800533c:	2310      	movs	r3, #16
 800533e:	e7a7      	b.n	8005290 <_printf_i+0xf8>
 8005340:	4824      	ldr	r0, [pc, #144]	; (80053d4 <_printf_i+0x23c>)
 8005342:	e7e4      	b.n	800530e <_printf_i+0x176>
 8005344:	4615      	mov	r5, r2
 8005346:	e7bd      	b.n	80052c4 <_printf_i+0x12c>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	6826      	ldr	r6, [r4, #0]
 800534c:	6961      	ldr	r1, [r4, #20]
 800534e:	1d18      	adds	r0, r3, #4
 8005350:	6028      	str	r0, [r5, #0]
 8005352:	0635      	lsls	r5, r6, #24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	d501      	bpl.n	800535c <_printf_i+0x1c4>
 8005358:	6019      	str	r1, [r3, #0]
 800535a:	e002      	b.n	8005362 <_printf_i+0x1ca>
 800535c:	0670      	lsls	r0, r6, #25
 800535e:	d5fb      	bpl.n	8005358 <_printf_i+0x1c0>
 8005360:	8019      	strh	r1, [r3, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	4615      	mov	r5, r2
 8005368:	e7bc      	b.n	80052e4 <_printf_i+0x14c>
 800536a:	682b      	ldr	r3, [r5, #0]
 800536c:	1d1a      	adds	r2, r3, #4
 800536e:	602a      	str	r2, [r5, #0]
 8005370:	681d      	ldr	r5, [r3, #0]
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	2100      	movs	r1, #0
 8005376:	4628      	mov	r0, r5
 8005378:	f7fa ff62 	bl	8000240 <memchr>
 800537c:	b108      	cbz	r0, 8005382 <_printf_i+0x1ea>
 800537e:	1b40      	subs	r0, r0, r5
 8005380:	6060      	str	r0, [r4, #4]
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	2300      	movs	r3, #0
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	e7aa      	b.n	80052e4 <_printf_i+0x14c>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	462a      	mov	r2, r5
 8005392:	4649      	mov	r1, r9
 8005394:	4640      	mov	r0, r8
 8005396:	47d0      	blx	sl
 8005398:	3001      	adds	r0, #1
 800539a:	d0ad      	beq.n	80052f8 <_printf_i+0x160>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	079b      	lsls	r3, r3, #30
 80053a0:	d413      	bmi.n	80053ca <_printf_i+0x232>
 80053a2:	68e0      	ldr	r0, [r4, #12]
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	4298      	cmp	r0, r3
 80053a8:	bfb8      	it	lt
 80053aa:	4618      	movlt	r0, r3
 80053ac:	e7a6      	b.n	80052fc <_printf_i+0x164>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4632      	mov	r2, r6
 80053b2:	4649      	mov	r1, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	47d0      	blx	sl
 80053b8:	3001      	adds	r0, #1
 80053ba:	d09d      	beq.n	80052f8 <_printf_i+0x160>
 80053bc:	3501      	adds	r5, #1
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	9903      	ldr	r1, [sp, #12]
 80053c2:	1a5b      	subs	r3, r3, r1
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dcf2      	bgt.n	80053ae <_printf_i+0x216>
 80053c8:	e7eb      	b.n	80053a2 <_printf_i+0x20a>
 80053ca:	2500      	movs	r5, #0
 80053cc:	f104 0619 	add.w	r6, r4, #25
 80053d0:	e7f5      	b.n	80053be <_printf_i+0x226>
 80053d2:	bf00      	nop
 80053d4:	08007d5e 	.word	0x08007d5e
 80053d8:	08007d6f 	.word	0x08007d6f

080053dc <std>:
 80053dc:	2300      	movs	r3, #0
 80053de:	b510      	push	{r4, lr}
 80053e0:	4604      	mov	r4, r0
 80053e2:	e9c0 3300 	strd	r3, r3, [r0]
 80053e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ea:	6083      	str	r3, [r0, #8]
 80053ec:	8181      	strh	r1, [r0, #12]
 80053ee:	6643      	str	r3, [r0, #100]	; 0x64
 80053f0:	81c2      	strh	r2, [r0, #14]
 80053f2:	6183      	str	r3, [r0, #24]
 80053f4:	4619      	mov	r1, r3
 80053f6:	2208      	movs	r2, #8
 80053f8:	305c      	adds	r0, #92	; 0x5c
 80053fa:	f000 f914 	bl	8005626 <memset>
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <std+0x58>)
 8005400:	6263      	str	r3, [r4, #36]	; 0x24
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <std+0x5c>)
 8005404:	62a3      	str	r3, [r4, #40]	; 0x28
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <std+0x60>)
 8005408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <std+0x64>)
 800540c:	6323      	str	r3, [r4, #48]	; 0x30
 800540e:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <std+0x68>)
 8005410:	6224      	str	r4, [r4, #32]
 8005412:	429c      	cmp	r4, r3
 8005414:	d006      	beq.n	8005424 <std+0x48>
 8005416:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800541a:	4294      	cmp	r4, r2
 800541c:	d002      	beq.n	8005424 <std+0x48>
 800541e:	33d0      	adds	r3, #208	; 0xd0
 8005420:	429c      	cmp	r4, r3
 8005422:	d105      	bne.n	8005430 <std+0x54>
 8005424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800542c:	f000 b978 	b.w	8005720 <__retarget_lock_init_recursive>
 8005430:	bd10      	pop	{r4, pc}
 8005432:	bf00      	nop
 8005434:	080055a1 	.word	0x080055a1
 8005438:	080055c3 	.word	0x080055c3
 800543c:	080055fb 	.word	0x080055fb
 8005440:	0800561f 	.word	0x0800561f
 8005444:	20000a08 	.word	0x20000a08

08005448 <stdio_exit_handler>:
 8005448:	4a02      	ldr	r2, [pc, #8]	; (8005454 <stdio_exit_handler+0xc>)
 800544a:	4903      	ldr	r1, [pc, #12]	; (8005458 <stdio_exit_handler+0x10>)
 800544c:	4803      	ldr	r0, [pc, #12]	; (800545c <stdio_exit_handler+0x14>)
 800544e:	f000 b869 	b.w	8005524 <_fwalk_sglue>
 8005452:	bf00      	nop
 8005454:	2000000c 	.word	0x2000000c
 8005458:	08006fc5 	.word	0x08006fc5
 800545c:	20000018 	.word	0x20000018

08005460 <cleanup_stdio>:
 8005460:	6841      	ldr	r1, [r0, #4]
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <cleanup_stdio+0x34>)
 8005464:	4299      	cmp	r1, r3
 8005466:	b510      	push	{r4, lr}
 8005468:	4604      	mov	r4, r0
 800546a:	d001      	beq.n	8005470 <cleanup_stdio+0x10>
 800546c:	f001 fdaa 	bl	8006fc4 <_fflush_r>
 8005470:	68a1      	ldr	r1, [r4, #8]
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <cleanup_stdio+0x38>)
 8005474:	4299      	cmp	r1, r3
 8005476:	d002      	beq.n	800547e <cleanup_stdio+0x1e>
 8005478:	4620      	mov	r0, r4
 800547a:	f001 fda3 	bl	8006fc4 <_fflush_r>
 800547e:	68e1      	ldr	r1, [r4, #12]
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <cleanup_stdio+0x3c>)
 8005482:	4299      	cmp	r1, r3
 8005484:	d004      	beq.n	8005490 <cleanup_stdio+0x30>
 8005486:	4620      	mov	r0, r4
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548c:	f001 bd9a 	b.w	8006fc4 <_fflush_r>
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	20000a08 	.word	0x20000a08
 8005498:	20000a70 	.word	0x20000a70
 800549c:	20000ad8 	.word	0x20000ad8

080054a0 <global_stdio_init.part.0>:
 80054a0:	b510      	push	{r4, lr}
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <global_stdio_init.part.0+0x30>)
 80054a4:	4c0b      	ldr	r4, [pc, #44]	; (80054d4 <global_stdio_init.part.0+0x34>)
 80054a6:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <global_stdio_init.part.0+0x38>)
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	4620      	mov	r0, r4
 80054ac:	2200      	movs	r2, #0
 80054ae:	2104      	movs	r1, #4
 80054b0:	f7ff ff94 	bl	80053dc <std>
 80054b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054b8:	2201      	movs	r2, #1
 80054ba:	2109      	movs	r1, #9
 80054bc:	f7ff ff8e 	bl	80053dc <std>
 80054c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80054c4:	2202      	movs	r2, #2
 80054c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ca:	2112      	movs	r1, #18
 80054cc:	f7ff bf86 	b.w	80053dc <std>
 80054d0:	20000b40 	.word	0x20000b40
 80054d4:	20000a08 	.word	0x20000a08
 80054d8:	08005449 	.word	0x08005449

080054dc <__sfp_lock_acquire>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__sfp_lock_acquire+0x8>)
 80054de:	f000 b920 	b.w	8005722 <__retarget_lock_acquire_recursive>
 80054e2:	bf00      	nop
 80054e4:	20000b49 	.word	0x20000b49

080054e8 <__sfp_lock_release>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__sfp_lock_release+0x8>)
 80054ea:	f000 b91b 	b.w	8005724 <__retarget_lock_release_recursive>
 80054ee:	bf00      	nop
 80054f0:	20000b49 	.word	0x20000b49

080054f4 <__sinit>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4604      	mov	r4, r0
 80054f8:	f7ff fff0 	bl	80054dc <__sfp_lock_acquire>
 80054fc:	6a23      	ldr	r3, [r4, #32]
 80054fe:	b11b      	cbz	r3, 8005508 <__sinit+0x14>
 8005500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005504:	f7ff bff0 	b.w	80054e8 <__sfp_lock_release>
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <__sinit+0x28>)
 800550a:	6223      	str	r3, [r4, #32]
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <__sinit+0x2c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f5      	bne.n	8005500 <__sinit+0xc>
 8005514:	f7ff ffc4 	bl	80054a0 <global_stdio_init.part.0>
 8005518:	e7f2      	b.n	8005500 <__sinit+0xc>
 800551a:	bf00      	nop
 800551c:	08005461 	.word	0x08005461
 8005520:	20000b40 	.word	0x20000b40

08005524 <_fwalk_sglue>:
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	4607      	mov	r7, r0
 800552a:	4688      	mov	r8, r1
 800552c:	4614      	mov	r4, r2
 800552e:	2600      	movs	r6, #0
 8005530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005534:	f1b9 0901 	subs.w	r9, r9, #1
 8005538:	d505      	bpl.n	8005546 <_fwalk_sglue+0x22>
 800553a:	6824      	ldr	r4, [r4, #0]
 800553c:	2c00      	cmp	r4, #0
 800553e:	d1f7      	bne.n	8005530 <_fwalk_sglue+0xc>
 8005540:	4630      	mov	r0, r6
 8005542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d907      	bls.n	800555c <_fwalk_sglue+0x38>
 800554c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005550:	3301      	adds	r3, #1
 8005552:	d003      	beq.n	800555c <_fwalk_sglue+0x38>
 8005554:	4629      	mov	r1, r5
 8005556:	4638      	mov	r0, r7
 8005558:	47c0      	blx	r8
 800555a:	4306      	orrs	r6, r0
 800555c:	3568      	adds	r5, #104	; 0x68
 800555e:	e7e9      	b.n	8005534 <_fwalk_sglue+0x10>

08005560 <siprintf>:
 8005560:	b40e      	push	{r1, r2, r3}
 8005562:	b500      	push	{lr}
 8005564:	b09c      	sub	sp, #112	; 0x70
 8005566:	ab1d      	add	r3, sp, #116	; 0x74
 8005568:	9002      	str	r0, [sp, #8]
 800556a:	9006      	str	r0, [sp, #24]
 800556c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005570:	4809      	ldr	r0, [pc, #36]	; (8005598 <siprintf+0x38>)
 8005572:	9107      	str	r1, [sp, #28]
 8005574:	9104      	str	r1, [sp, #16]
 8005576:	4909      	ldr	r1, [pc, #36]	; (800559c <siprintf+0x3c>)
 8005578:	f853 2b04 	ldr.w	r2, [r3], #4
 800557c:	9105      	str	r1, [sp, #20]
 800557e:	6800      	ldr	r0, [r0, #0]
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	a902      	add	r1, sp, #8
 8005584:	f001 fb9a 	bl	8006cbc <_svfiprintf_r>
 8005588:	9b02      	ldr	r3, [sp, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	b01c      	add	sp, #112	; 0x70
 8005590:	f85d eb04 	ldr.w	lr, [sp], #4
 8005594:	b003      	add	sp, #12
 8005596:	4770      	bx	lr
 8005598:	20000064 	.word	0x20000064
 800559c:	ffff0208 	.word	0xffff0208

080055a0 <__sread>:
 80055a0:	b510      	push	{r4, lr}
 80055a2:	460c      	mov	r4, r1
 80055a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a8:	f000 f86c 	bl	8005684 <_read_r>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	bfab      	itete	ge
 80055b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055b2:	89a3      	ldrhlt	r3, [r4, #12]
 80055b4:	181b      	addge	r3, r3, r0
 80055b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055ba:	bfac      	ite	ge
 80055bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80055be:	81a3      	strhlt	r3, [r4, #12]
 80055c0:	bd10      	pop	{r4, pc}

080055c2 <__swrite>:
 80055c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c6:	461f      	mov	r7, r3
 80055c8:	898b      	ldrh	r3, [r1, #12]
 80055ca:	05db      	lsls	r3, r3, #23
 80055cc:	4605      	mov	r5, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	4616      	mov	r6, r2
 80055d2:	d505      	bpl.n	80055e0 <__swrite+0x1e>
 80055d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d8:	2302      	movs	r3, #2
 80055da:	2200      	movs	r2, #0
 80055dc:	f000 f840 	bl	8005660 <_lseek_r>
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	4632      	mov	r2, r6
 80055ee:	463b      	mov	r3, r7
 80055f0:	4628      	mov	r0, r5
 80055f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	f000 b857 	b.w	80056a8 <_write_r>

080055fa <__sseek>:
 80055fa:	b510      	push	{r4, lr}
 80055fc:	460c      	mov	r4, r1
 80055fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005602:	f000 f82d 	bl	8005660 <_lseek_r>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	bf15      	itete	ne
 800560c:	6560      	strne	r0, [r4, #84]	; 0x54
 800560e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005616:	81a3      	strheq	r3, [r4, #12]
 8005618:	bf18      	it	ne
 800561a:	81a3      	strhne	r3, [r4, #12]
 800561c:	bd10      	pop	{r4, pc}

0800561e <__sclose>:
 800561e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005622:	f000 b80d 	b.w	8005640 <_close_r>

08005626 <memset>:
 8005626:	4402      	add	r2, r0
 8005628:	4603      	mov	r3, r0
 800562a:	4293      	cmp	r3, r2
 800562c:	d100      	bne.n	8005630 <memset+0xa>
 800562e:	4770      	bx	lr
 8005630:	f803 1b01 	strb.w	r1, [r3], #1
 8005634:	e7f9      	b.n	800562a <memset+0x4>
	...

08005638 <_localeconv_r>:
 8005638:	4800      	ldr	r0, [pc, #0]	; (800563c <_localeconv_r+0x4>)
 800563a:	4770      	bx	lr
 800563c:	20000158 	.word	0x20000158

08005640 <_close_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d06      	ldr	r5, [pc, #24]	; (800565c <_close_r+0x1c>)
 8005644:	2300      	movs	r3, #0
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	f7fb fd15 	bl	800107a <_close>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_close_r+0x1a>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_close_r+0x1a>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000b44 	.word	0x20000b44

08005660 <_lseek_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	; (8005680 <_lseek_r+0x20>)
 8005664:	4604      	mov	r4, r0
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	2200      	movs	r2, #0
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f7fb fd2a 	bl	80010c8 <_lseek>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_lseek_r+0x1e>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_lseek_r+0x1e>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20000b44 	.word	0x20000b44

08005684 <_read_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4d07      	ldr	r5, [pc, #28]	; (80056a4 <_read_r+0x20>)
 8005688:	4604      	mov	r4, r0
 800568a:	4608      	mov	r0, r1
 800568c:	4611      	mov	r1, r2
 800568e:	2200      	movs	r2, #0
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f7fb fcb8 	bl	8001008 <_read>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_read_r+0x1e>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_read_r+0x1e>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	20000b44 	.word	0x20000b44

080056a8 <_write_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4d07      	ldr	r5, [pc, #28]	; (80056c8 <_write_r+0x20>)
 80056ac:	4604      	mov	r4, r0
 80056ae:	4608      	mov	r0, r1
 80056b0:	4611      	mov	r1, r2
 80056b2:	2200      	movs	r2, #0
 80056b4:	602a      	str	r2, [r5, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f7fb fcc3 	bl	8001042 <_write>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_write_r+0x1e>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_write_r+0x1e>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	20000b44 	.word	0x20000b44

080056cc <__errno>:
 80056cc:	4b01      	ldr	r3, [pc, #4]	; (80056d4 <__errno+0x8>)
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000064 	.word	0x20000064

080056d8 <__libc_init_array>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4d0d      	ldr	r5, [pc, #52]	; (8005710 <__libc_init_array+0x38>)
 80056dc:	4c0d      	ldr	r4, [pc, #52]	; (8005714 <__libc_init_array+0x3c>)
 80056de:	1b64      	subs	r4, r4, r5
 80056e0:	10a4      	asrs	r4, r4, #2
 80056e2:	2600      	movs	r6, #0
 80056e4:	42a6      	cmp	r6, r4
 80056e6:	d109      	bne.n	80056fc <__libc_init_array+0x24>
 80056e8:	4d0b      	ldr	r5, [pc, #44]	; (8005718 <__libc_init_array+0x40>)
 80056ea:	4c0c      	ldr	r4, [pc, #48]	; (800571c <__libc_init_array+0x44>)
 80056ec:	f002 fb04 	bl	8007cf8 <_init>
 80056f0:	1b64      	subs	r4, r4, r5
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	2600      	movs	r6, #0
 80056f6:	42a6      	cmp	r6, r4
 80056f8:	d105      	bne.n	8005706 <__libc_init_array+0x2e>
 80056fa:	bd70      	pop	{r4, r5, r6, pc}
 80056fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005700:	4798      	blx	r3
 8005702:	3601      	adds	r6, #1
 8005704:	e7ee      	b.n	80056e4 <__libc_init_array+0xc>
 8005706:	f855 3b04 	ldr.w	r3, [r5], #4
 800570a:	4798      	blx	r3
 800570c:	3601      	adds	r6, #1
 800570e:	e7f2      	b.n	80056f6 <__libc_init_array+0x1e>
 8005710:	08009980 	.word	0x08009980
 8005714:	08009980 	.word	0x08009980
 8005718:	08009980 	.word	0x08009980
 800571c:	08009984 	.word	0x08009984

08005720 <__retarget_lock_init_recursive>:
 8005720:	4770      	bx	lr

08005722 <__retarget_lock_acquire_recursive>:
 8005722:	4770      	bx	lr

08005724 <__retarget_lock_release_recursive>:
 8005724:	4770      	bx	lr

08005726 <quorem>:
 8005726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	6903      	ldr	r3, [r0, #16]
 800572c:	690c      	ldr	r4, [r1, #16]
 800572e:	42a3      	cmp	r3, r4
 8005730:	4607      	mov	r7, r0
 8005732:	db7e      	blt.n	8005832 <quorem+0x10c>
 8005734:	3c01      	subs	r4, #1
 8005736:	f101 0814 	add.w	r8, r1, #20
 800573a:	f100 0514 	add.w	r5, r0, #20
 800573e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800574c:	3301      	adds	r3, #1
 800574e:	429a      	cmp	r2, r3
 8005750:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005754:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005758:	fbb2 f6f3 	udiv	r6, r2, r3
 800575c:	d331      	bcc.n	80057c2 <quorem+0x9c>
 800575e:	f04f 0e00 	mov.w	lr, #0
 8005762:	4640      	mov	r0, r8
 8005764:	46ac      	mov	ip, r5
 8005766:	46f2      	mov	sl, lr
 8005768:	f850 2b04 	ldr.w	r2, [r0], #4
 800576c:	b293      	uxth	r3, r2
 800576e:	fb06 e303 	mla	r3, r6, r3, lr
 8005772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005776:	0c1a      	lsrs	r2, r3, #16
 8005778:	b29b      	uxth	r3, r3
 800577a:	ebaa 0303 	sub.w	r3, sl, r3
 800577e:	f8dc a000 	ldr.w	sl, [ip]
 8005782:	fa13 f38a 	uxtah	r3, r3, sl
 8005786:	fb06 220e 	mla	r2, r6, lr, r2
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	9b00      	ldr	r3, [sp, #0]
 800578e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005792:	b292      	uxth	r2, r2
 8005794:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800579c:	f8bd 3000 	ldrh.w	r3, [sp]
 80057a0:	4581      	cmp	r9, r0
 80057a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057a6:	f84c 3b04 	str.w	r3, [ip], #4
 80057aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057ae:	d2db      	bcs.n	8005768 <quorem+0x42>
 80057b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80057b4:	b92b      	cbnz	r3, 80057c2 <quorem+0x9c>
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	3b04      	subs	r3, #4
 80057ba:	429d      	cmp	r5, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	d32c      	bcc.n	800581a <quorem+0xf4>
 80057c0:	613c      	str	r4, [r7, #16]
 80057c2:	4638      	mov	r0, r7
 80057c4:	f001 f920 	bl	8006a08 <__mcmp>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	db22      	blt.n	8005812 <quorem+0xec>
 80057cc:	3601      	adds	r6, #1
 80057ce:	4629      	mov	r1, r5
 80057d0:	2000      	movs	r0, #0
 80057d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80057d6:	f8d1 c000 	ldr.w	ip, [r1]
 80057da:	b293      	uxth	r3, r2
 80057dc:	1ac3      	subs	r3, r0, r3
 80057de:	0c12      	lsrs	r2, r2, #16
 80057e0:	fa13 f38c 	uxtah	r3, r3, ip
 80057e4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80057e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f2:	45c1      	cmp	r9, r8
 80057f4:	f841 3b04 	str.w	r3, [r1], #4
 80057f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057fc:	d2e9      	bcs.n	80057d2 <quorem+0xac>
 80057fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005806:	b922      	cbnz	r2, 8005812 <quorem+0xec>
 8005808:	3b04      	subs	r3, #4
 800580a:	429d      	cmp	r5, r3
 800580c:	461a      	mov	r2, r3
 800580e:	d30a      	bcc.n	8005826 <quorem+0x100>
 8005810:	613c      	str	r4, [r7, #16]
 8005812:	4630      	mov	r0, r6
 8005814:	b003      	add	sp, #12
 8005816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	3b04      	subs	r3, #4
 800581e:	2a00      	cmp	r2, #0
 8005820:	d1ce      	bne.n	80057c0 <quorem+0x9a>
 8005822:	3c01      	subs	r4, #1
 8005824:	e7c9      	b.n	80057ba <quorem+0x94>
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	3b04      	subs	r3, #4
 800582a:	2a00      	cmp	r2, #0
 800582c:	d1f0      	bne.n	8005810 <quorem+0xea>
 800582e:	3c01      	subs	r4, #1
 8005830:	e7eb      	b.n	800580a <quorem+0xe4>
 8005832:	2000      	movs	r0, #0
 8005834:	e7ee      	b.n	8005814 <quorem+0xee>
	...

08005838 <_dtoa_r>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	ed2d 8b02 	vpush	{d8}
 8005840:	69c5      	ldr	r5, [r0, #28]
 8005842:	b091      	sub	sp, #68	; 0x44
 8005844:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005848:	ec59 8b10 	vmov	r8, r9, d0
 800584c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800584e:	9106      	str	r1, [sp, #24]
 8005850:	4606      	mov	r6, r0
 8005852:	9208      	str	r2, [sp, #32]
 8005854:	930c      	str	r3, [sp, #48]	; 0x30
 8005856:	b975      	cbnz	r5, 8005876 <_dtoa_r+0x3e>
 8005858:	2010      	movs	r0, #16
 800585a:	f000 fda5 	bl	80063a8 <malloc>
 800585e:	4602      	mov	r2, r0
 8005860:	61f0      	str	r0, [r6, #28]
 8005862:	b920      	cbnz	r0, 800586e <_dtoa_r+0x36>
 8005864:	4ba6      	ldr	r3, [pc, #664]	; (8005b00 <_dtoa_r+0x2c8>)
 8005866:	21ef      	movs	r1, #239	; 0xef
 8005868:	48a6      	ldr	r0, [pc, #664]	; (8005b04 <_dtoa_r+0x2cc>)
 800586a:	f001 fc0b 	bl	8007084 <__assert_func>
 800586e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005872:	6005      	str	r5, [r0, #0]
 8005874:	60c5      	str	r5, [r0, #12]
 8005876:	69f3      	ldr	r3, [r6, #28]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	b151      	cbz	r1, 8005892 <_dtoa_r+0x5a>
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	604a      	str	r2, [r1, #4]
 8005880:	2301      	movs	r3, #1
 8005882:	4093      	lsls	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
 8005886:	4630      	mov	r0, r6
 8005888:	f000 fe82 	bl	8006590 <_Bfree>
 800588c:	69f3      	ldr	r3, [r6, #28]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f1b9 0300 	subs.w	r3, r9, #0
 8005896:	bfbb      	ittet	lt
 8005898:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800589c:	9303      	strlt	r3, [sp, #12]
 800589e:	2300      	movge	r3, #0
 80058a0:	2201      	movlt	r2, #1
 80058a2:	bfac      	ite	ge
 80058a4:	6023      	strge	r3, [r4, #0]
 80058a6:	6022      	strlt	r2, [r4, #0]
 80058a8:	4b97      	ldr	r3, [pc, #604]	; (8005b08 <_dtoa_r+0x2d0>)
 80058aa:	9c03      	ldr	r4, [sp, #12]
 80058ac:	43a3      	bics	r3, r4
 80058ae:	d11c      	bne.n	80058ea <_dtoa_r+0xb2>
 80058b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80058bc:	ea53 0308 	orrs.w	r3, r3, r8
 80058c0:	f000 84fb 	beq.w	80062ba <_dtoa_r+0xa82>
 80058c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058c6:	b963      	cbnz	r3, 80058e2 <_dtoa_r+0xaa>
 80058c8:	4b90      	ldr	r3, [pc, #576]	; (8005b0c <_dtoa_r+0x2d4>)
 80058ca:	e020      	b.n	800590e <_dtoa_r+0xd6>
 80058cc:	4b90      	ldr	r3, [pc, #576]	; (8005b10 <_dtoa_r+0x2d8>)
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	3308      	adds	r3, #8
 80058d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	9801      	ldr	r0, [sp, #4]
 80058d8:	b011      	add	sp, #68	; 0x44
 80058da:	ecbd 8b02 	vpop	{d8}
 80058de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e2:	4b8a      	ldr	r3, [pc, #552]	; (8005b0c <_dtoa_r+0x2d4>)
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	3303      	adds	r3, #3
 80058e8:	e7f3      	b.n	80058d2 <_dtoa_r+0x9a>
 80058ea:	ed9d 8b02 	vldr	d8, [sp, #8]
 80058ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80058f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f6:	d10c      	bne.n	8005912 <_dtoa_r+0xda>
 80058f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058fa:	2301      	movs	r3, #1
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 84d7 	beq.w	80062b4 <_dtoa_r+0xa7c>
 8005906:	4b83      	ldr	r3, [pc, #524]	; (8005b14 <_dtoa_r+0x2dc>)
 8005908:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	e7e1      	b.n	80058d6 <_dtoa_r+0x9e>
 8005912:	aa0e      	add	r2, sp, #56	; 0x38
 8005914:	a90f      	add	r1, sp, #60	; 0x3c
 8005916:	4630      	mov	r0, r6
 8005918:	eeb0 0b48 	vmov.f64	d0, d8
 800591c:	f001 f91a 	bl	8006b54 <__d2b>
 8005920:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005926:	4605      	mov	r5, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d046      	beq.n	80059ba <_dtoa_r+0x182>
 800592c:	eeb0 7b48 	vmov.f64	d7, d8
 8005930:	ee18 1a90 	vmov	r1, s17
 8005934:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005938:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800593c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005940:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005944:	2000      	movs	r0, #0
 8005946:	ee07 1a90 	vmov	s15, r1
 800594a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800594e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005ae8 <_dtoa_r+0x2b0>
 8005952:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005956:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005af0 <_dtoa_r+0x2b8>
 800595a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800595e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005af8 <_dtoa_r+0x2c0>
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800596a:	eeb0 7b46 	vmov.f64	d7, d6
 800596e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005972:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005976:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	ee16 ba90 	vmov	fp, s13
 8005982:	9009      	str	r0, [sp, #36]	; 0x24
 8005984:	d508      	bpl.n	8005998 <_dtoa_r+0x160>
 8005986:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800598a:	eeb4 6b47 	vcmp.f64	d6, d7
 800598e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005992:	bf18      	it	ne
 8005994:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005998:	f1bb 0f16 	cmp.w	fp, #22
 800599c:	d82b      	bhi.n	80059f6 <_dtoa_r+0x1be>
 800599e:	495e      	ldr	r1, [pc, #376]	; (8005b18 <_dtoa_r+0x2e0>)
 80059a0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80059a4:	ed91 7b00 	vldr	d7, [r1]
 80059a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80059ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b0:	d501      	bpl.n	80059b6 <_dtoa_r+0x17e>
 80059b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059b6:	2100      	movs	r1, #0
 80059b8:	e01e      	b.n	80059f8 <_dtoa_r+0x1c0>
 80059ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059bc:	4413      	add	r3, r2
 80059be:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80059c2:	2920      	cmp	r1, #32
 80059c4:	bfc1      	itttt	gt
 80059c6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80059ca:	408c      	lslgt	r4, r1
 80059cc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80059d0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80059d4:	bfd6      	itet	le
 80059d6:	f1c1 0120 	rsble	r1, r1, #32
 80059da:	4321      	orrgt	r1, r4
 80059dc:	fa08 f101 	lslle.w	r1, r8, r1
 80059e0:	ee07 1a90 	vmov	s15, r1
 80059e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80059e8:	3b01      	subs	r3, #1
 80059ea:	ee17 1a90 	vmov	r1, s15
 80059ee:	2001      	movs	r0, #1
 80059f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80059f4:	e7a7      	b.n	8005946 <_dtoa_r+0x10e>
 80059f6:	2101      	movs	r1, #1
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	1e53      	subs	r3, r2, #1
 80059fc:	9305      	str	r3, [sp, #20]
 80059fe:	bf45      	ittet	mi
 8005a00:	f1c2 0301 	rsbmi	r3, r2, #1
 8005a04:	9304      	strmi	r3, [sp, #16]
 8005a06:	2300      	movpl	r3, #0
 8005a08:	2300      	movmi	r3, #0
 8005a0a:	bf4c      	ite	mi
 8005a0c:	9305      	strmi	r3, [sp, #20]
 8005a0e:	9304      	strpl	r3, [sp, #16]
 8005a10:	f1bb 0f00 	cmp.w	fp, #0
 8005a14:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a16:	db18      	blt.n	8005a4a <_dtoa_r+0x212>
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005a1e:	445b      	add	r3, fp
 8005a20:	9305      	str	r3, [sp, #20]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9a06      	ldr	r2, [sp, #24]
 8005a26:	2a09      	cmp	r2, #9
 8005a28:	d848      	bhi.n	8005abc <_dtoa_r+0x284>
 8005a2a:	2a05      	cmp	r2, #5
 8005a2c:	bfc4      	itt	gt
 8005a2e:	3a04      	subgt	r2, #4
 8005a30:	9206      	strgt	r2, [sp, #24]
 8005a32:	9a06      	ldr	r2, [sp, #24]
 8005a34:	f1a2 0202 	sub.w	r2, r2, #2
 8005a38:	bfcc      	ite	gt
 8005a3a:	2400      	movgt	r4, #0
 8005a3c:	2401      	movle	r4, #1
 8005a3e:	2a03      	cmp	r2, #3
 8005a40:	d847      	bhi.n	8005ad2 <_dtoa_r+0x29a>
 8005a42:	e8df f002 	tbb	[pc, r2]
 8005a46:	2d0b      	.short	0x2d0b
 8005a48:	392b      	.short	0x392b
 8005a4a:	9b04      	ldr	r3, [sp, #16]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	eba3 030b 	sub.w	r3, r3, fp
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	920a      	str	r2, [sp, #40]	; 0x28
 8005a56:	f1cb 0300 	rsb	r3, fp, #0
 8005a5a:	e7e3      	b.n	8005a24 <_dtoa_r+0x1ec>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	9207      	str	r2, [sp, #28]
 8005a60:	9a08      	ldr	r2, [sp, #32]
 8005a62:	2a00      	cmp	r2, #0
 8005a64:	dc38      	bgt.n	8005ad8 <_dtoa_r+0x2a0>
 8005a66:	f04f 0a01 	mov.w	sl, #1
 8005a6a:	46d1      	mov	r9, sl
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	f8cd a020 	str.w	sl, [sp, #32]
 8005a72:	69f7      	ldr	r7, [r6, #28]
 8005a74:	2100      	movs	r1, #0
 8005a76:	2004      	movs	r0, #4
 8005a78:	f100 0c14 	add.w	ip, r0, #20
 8005a7c:	4594      	cmp	ip, r2
 8005a7e:	d930      	bls.n	8005ae2 <_dtoa_r+0x2aa>
 8005a80:	6079      	str	r1, [r7, #4]
 8005a82:	4630      	mov	r0, r6
 8005a84:	930d      	str	r3, [sp, #52]	; 0x34
 8005a86:	f000 fd43 	bl	8006510 <_Balloc>
 8005a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a8c:	9001      	str	r0, [sp, #4]
 8005a8e:	4602      	mov	r2, r0
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d145      	bne.n	8005b20 <_dtoa_r+0x2e8>
 8005a94:	4b21      	ldr	r3, [pc, #132]	; (8005b1c <_dtoa_r+0x2e4>)
 8005a96:	f240 11af 	movw	r1, #431	; 0x1af
 8005a9a:	e6e5      	b.n	8005868 <_dtoa_r+0x30>
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	e7de      	b.n	8005a5e <_dtoa_r+0x226>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	9207      	str	r2, [sp, #28]
 8005aa4:	9a08      	ldr	r2, [sp, #32]
 8005aa6:	eb0b 0a02 	add.w	sl, fp, r2
 8005aaa:	f10a 0901 	add.w	r9, sl, #1
 8005aae:	464a      	mov	r2, r9
 8005ab0:	2a01      	cmp	r2, #1
 8005ab2:	bfb8      	it	lt
 8005ab4:	2201      	movlt	r2, #1
 8005ab6:	e7dc      	b.n	8005a72 <_dtoa_r+0x23a>
 8005ab8:	2201      	movs	r2, #1
 8005aba:	e7f2      	b.n	8005aa2 <_dtoa_r+0x26a>
 8005abc:	2401      	movs	r4, #1
 8005abe:	2200      	movs	r2, #0
 8005ac0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005ac4:	f04f 3aff 	mov.w	sl, #4294967295
 8005ac8:	2100      	movs	r1, #0
 8005aca:	46d1      	mov	r9, sl
 8005acc:	2212      	movs	r2, #18
 8005ace:	9108      	str	r1, [sp, #32]
 8005ad0:	e7cf      	b.n	8005a72 <_dtoa_r+0x23a>
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	9207      	str	r2, [sp, #28]
 8005ad6:	e7f5      	b.n	8005ac4 <_dtoa_r+0x28c>
 8005ad8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005adc:	46d1      	mov	r9, sl
 8005ade:	4652      	mov	r2, sl
 8005ae0:	e7c7      	b.n	8005a72 <_dtoa_r+0x23a>
 8005ae2:	3101      	adds	r1, #1
 8005ae4:	0040      	lsls	r0, r0, #1
 8005ae6:	e7c7      	b.n	8005a78 <_dtoa_r+0x240>
 8005ae8:	636f4361 	.word	0x636f4361
 8005aec:	3fd287a7 	.word	0x3fd287a7
 8005af0:	8b60c8b3 	.word	0x8b60c8b3
 8005af4:	3fc68a28 	.word	0x3fc68a28
 8005af8:	509f79fb 	.word	0x509f79fb
 8005afc:	3fd34413 	.word	0x3fd34413
 8005b00:	08007d8d 	.word	0x08007d8d
 8005b04:	08007da4 	.word	0x08007da4
 8005b08:	7ff00000 	.word	0x7ff00000
 8005b0c:	08007d89 	.word	0x08007d89
 8005b10:	08007d80 	.word	0x08007d80
 8005b14:	08007d5d 	.word	0x08007d5d
 8005b18:	08007e90 	.word	0x08007e90
 8005b1c:	08007dfc 	.word	0x08007dfc
 8005b20:	69f2      	ldr	r2, [r6, #28]
 8005b22:	9901      	ldr	r1, [sp, #4]
 8005b24:	6011      	str	r1, [r2, #0]
 8005b26:	f1b9 0f0e 	cmp.w	r9, #14
 8005b2a:	d86c      	bhi.n	8005c06 <_dtoa_r+0x3ce>
 8005b2c:	2c00      	cmp	r4, #0
 8005b2e:	d06a      	beq.n	8005c06 <_dtoa_r+0x3ce>
 8005b30:	f1bb 0f00 	cmp.w	fp, #0
 8005b34:	f340 80a0 	ble.w	8005c78 <_dtoa_r+0x440>
 8005b38:	4ac1      	ldr	r2, [pc, #772]	; (8005e40 <_dtoa_r+0x608>)
 8005b3a:	f00b 010f 	and.w	r1, fp, #15
 8005b3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005b42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005b46:	ed92 7b00 	vldr	d7, [r2]
 8005b4a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005b4e:	f000 8087 	beq.w	8005c60 <_dtoa_r+0x428>
 8005b52:	49bc      	ldr	r1, [pc, #752]	; (8005e44 <_dtoa_r+0x60c>)
 8005b54:	ed91 6b08 	vldr	d6, [r1, #32]
 8005b58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005b5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005b60:	f002 020f 	and.w	r2, r2, #15
 8005b64:	2103      	movs	r1, #3
 8005b66:	48b7      	ldr	r0, [pc, #732]	; (8005e44 <_dtoa_r+0x60c>)
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	d17b      	bne.n	8005c64 <_dtoa_r+0x42c>
 8005b6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005b74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	f000 80a0 	beq.w	8005cc4 <_dtoa_r+0x48c>
 8005b84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005b88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	f140 8098 	bpl.w	8005cc4 <_dtoa_r+0x48c>
 8005b94:	f1b9 0f00 	cmp.w	r9, #0
 8005b98:	f000 8094 	beq.w	8005cc4 <_dtoa_r+0x48c>
 8005b9c:	f1ba 0f00 	cmp.w	sl, #0
 8005ba0:	dd2f      	ble.n	8005c02 <_dtoa_r+0x3ca>
 8005ba2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005baa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005bae:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005bb2:	3101      	adds	r1, #1
 8005bb4:	4654      	mov	r4, sl
 8005bb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005bba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005bbe:	ee07 1a90 	vmov	s15, r1
 8005bc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005bc6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005bca:	ee15 7a90 	vmov	r7, s11
 8005bce:	ec51 0b15 	vmov	r0, r1, d5
 8005bd2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d177      	bne.n	8005cca <_dtoa_r+0x492>
 8005bda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005bde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005be2:	ec41 0b17 	vmov	d7, r0, r1
 8005be6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bee:	f300 826a 	bgt.w	80060c6 <_dtoa_r+0x88e>
 8005bf2:	eeb1 7b47 	vneg.f64	d7, d7
 8005bf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfe:	f100 8260 	bmi.w	80060c2 <_dtoa_r+0x88a>
 8005c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	f2c0 811d 	blt.w	8005e48 <_dtoa_r+0x610>
 8005c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005c12:	f300 8119 	bgt.w	8005e48 <_dtoa_r+0x610>
 8005c16:	4b8a      	ldr	r3, [pc, #552]	; (8005e40 <_dtoa_r+0x608>)
 8005c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c1c:	ed93 6b00 	vldr	d6, [r3]
 8005c20:	9b08      	ldr	r3, [sp, #32]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f280 80b7 	bge.w	8005d96 <_dtoa_r+0x55e>
 8005c28:	f1b9 0f00 	cmp.w	r9, #0
 8005c2c:	f300 80b3 	bgt.w	8005d96 <_dtoa_r+0x55e>
 8005c30:	f040 8246 	bne.w	80060c0 <_dtoa_r+0x888>
 8005c34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005c38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c48:	464c      	mov	r4, r9
 8005c4a:	464f      	mov	r7, r9
 8005c4c:	f280 821c 	bge.w	8006088 <_dtoa_r+0x850>
 8005c50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c54:	2331      	movs	r3, #49	; 0x31
 8005c56:	f808 3b01 	strb.w	r3, [r8], #1
 8005c5a:	f10b 0b01 	add.w	fp, fp, #1
 8005c5e:	e218      	b.n	8006092 <_dtoa_r+0x85a>
 8005c60:	2102      	movs	r1, #2
 8005c62:	e780      	b.n	8005b66 <_dtoa_r+0x32e>
 8005c64:	07d4      	lsls	r4, r2, #31
 8005c66:	d504      	bpl.n	8005c72 <_dtoa_r+0x43a>
 8005c68:	ed90 6b00 	vldr	d6, [r0]
 8005c6c:	3101      	adds	r1, #1
 8005c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c72:	1052      	asrs	r2, r2, #1
 8005c74:	3008      	adds	r0, #8
 8005c76:	e777      	b.n	8005b68 <_dtoa_r+0x330>
 8005c78:	d022      	beq.n	8005cc0 <_dtoa_r+0x488>
 8005c7a:	f1cb 0200 	rsb	r2, fp, #0
 8005c7e:	4970      	ldr	r1, [pc, #448]	; (8005e40 <_dtoa_r+0x608>)
 8005c80:	f002 000f 	and.w	r0, r2, #15
 8005c84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005c88:	ed91 7b00 	vldr	d7, [r1]
 8005c8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c94:	486b      	ldr	r0, [pc, #428]	; (8005e44 <_dtoa_r+0x60c>)
 8005c96:	1112      	asrs	r2, r2, #4
 8005c98:	2400      	movs	r4, #0
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	b92a      	cbnz	r2, 8005caa <_dtoa_r+0x472>
 8005c9e:	2c00      	cmp	r4, #0
 8005ca0:	f43f af6a 	beq.w	8005b78 <_dtoa_r+0x340>
 8005ca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ca8:	e766      	b.n	8005b78 <_dtoa_r+0x340>
 8005caa:	07d7      	lsls	r7, r2, #31
 8005cac:	d505      	bpl.n	8005cba <_dtoa_r+0x482>
 8005cae:	ed90 6b00 	vldr	d6, [r0]
 8005cb2:	3101      	adds	r1, #1
 8005cb4:	2401      	movs	r4, #1
 8005cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cba:	1052      	asrs	r2, r2, #1
 8005cbc:	3008      	adds	r0, #8
 8005cbe:	e7ed      	b.n	8005c9c <_dtoa_r+0x464>
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	e759      	b.n	8005b78 <_dtoa_r+0x340>
 8005cc4:	465a      	mov	r2, fp
 8005cc6:	464c      	mov	r4, r9
 8005cc8:	e775      	b.n	8005bb6 <_dtoa_r+0x37e>
 8005cca:	ec41 0b17 	vmov	d7, r0, r1
 8005cce:	495c      	ldr	r1, [pc, #368]	; (8005e40 <_dtoa_r+0x608>)
 8005cd0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005cd4:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005cd8:	9901      	ldr	r1, [sp, #4]
 8005cda:	440c      	add	r4, r1
 8005cdc:	9907      	ldr	r1, [sp, #28]
 8005cde:	b351      	cbz	r1, 8005d36 <_dtoa_r+0x4fe>
 8005ce0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005ce4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005ce8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005cec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005cf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005cf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005cf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005cfc:	ee14 1a90 	vmov	r1, s9
 8005d00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d04:	3130      	adds	r1, #48	; 0x30
 8005d06:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d12:	f808 1b01 	strb.w	r1, [r8], #1
 8005d16:	d439      	bmi.n	8005d8c <_dtoa_r+0x554>
 8005d18:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005d1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d24:	d472      	bmi.n	8005e0c <_dtoa_r+0x5d4>
 8005d26:	45a0      	cmp	r8, r4
 8005d28:	f43f af6b 	beq.w	8005c02 <_dtoa_r+0x3ca>
 8005d2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005d30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005d34:	e7e0      	b.n	8005cf8 <_dtoa_r+0x4c0>
 8005d36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005d3e:	4620      	mov	r0, r4
 8005d40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005d44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005d48:	ee14 1a90 	vmov	r1, s9
 8005d4c:	3130      	adds	r1, #48	; 0x30
 8005d4e:	f808 1b01 	strb.w	r1, [r8], #1
 8005d52:	45a0      	cmp	r8, r4
 8005d54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d5c:	d118      	bne.n	8005d90 <_dtoa_r+0x558>
 8005d5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005d62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005d66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	dc4d      	bgt.n	8005e0c <_dtoa_r+0x5d4>
 8005d70:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005d74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	f57f af41 	bpl.w	8005c02 <_dtoa_r+0x3ca>
 8005d80:	4680      	mov	r8, r0
 8005d82:	3801      	subs	r0, #1
 8005d84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d0f9      	beq.n	8005d80 <_dtoa_r+0x548>
 8005d8c:	4693      	mov	fp, r2
 8005d8e:	e02a      	b.n	8005de6 <_dtoa_r+0x5ae>
 8005d90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005d94:	e7d6      	b.n	8005d44 <_dtoa_r+0x50c>
 8005d96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005da2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005da6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005daa:	ee15 3a10 	vmov	r3, s10
 8005dae:	3330      	adds	r3, #48	; 0x30
 8005db0:	f808 3b01 	strb.w	r3, [r8], #1
 8005db4:	9b01      	ldr	r3, [sp, #4]
 8005db6:	eba8 0303 	sub.w	r3, r8, r3
 8005dba:	4599      	cmp	r9, r3
 8005dbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005dc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005dc4:	d133      	bne.n	8005e2e <_dtoa_r+0x5f6>
 8005dc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005dca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd2:	dc1a      	bgt.n	8005e0a <_dtoa_r+0x5d2>
 8005dd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8005dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ddc:	d103      	bne.n	8005de6 <_dtoa_r+0x5ae>
 8005dde:	ee15 3a10 	vmov	r3, s10
 8005de2:	07d9      	lsls	r1, r3, #31
 8005de4:	d411      	bmi.n	8005e0a <_dtoa_r+0x5d2>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 fbd1 	bl	8006590 <_Bfree>
 8005dee:	2300      	movs	r3, #0
 8005df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005df2:	f888 3000 	strb.w	r3, [r8]
 8005df6:	f10b 0301 	add.w	r3, fp, #1
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f43f ad69 	beq.w	80058d6 <_dtoa_r+0x9e>
 8005e04:	f8c3 8000 	str.w	r8, [r3]
 8005e08:	e565      	b.n	80058d6 <_dtoa_r+0x9e>
 8005e0a:	465a      	mov	r2, fp
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	4698      	mov	r8, r3
 8005e10:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8005e14:	2939      	cmp	r1, #57	; 0x39
 8005e16:	d106      	bne.n	8005e26 <_dtoa_r+0x5ee>
 8005e18:	9901      	ldr	r1, [sp, #4]
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	d1f7      	bne.n	8005e0e <_dtoa_r+0x5d6>
 8005e1e:	9801      	ldr	r0, [sp, #4]
 8005e20:	2130      	movs	r1, #48	; 0x30
 8005e22:	3201      	adds	r2, #1
 8005e24:	7001      	strb	r1, [r0, #0]
 8005e26:	7819      	ldrb	r1, [r3, #0]
 8005e28:	3101      	adds	r1, #1
 8005e2a:	7019      	strb	r1, [r3, #0]
 8005e2c:	e7ae      	b.n	8005d8c <_dtoa_r+0x554>
 8005e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	d1b2      	bne.n	8005da2 <_dtoa_r+0x56a>
 8005e3c:	e7d3      	b.n	8005de6 <_dtoa_r+0x5ae>
 8005e3e:	bf00      	nop
 8005e40:	08007e90 	.word	0x08007e90
 8005e44:	08007e68 	.word	0x08007e68
 8005e48:	9907      	ldr	r1, [sp, #28]
 8005e4a:	2900      	cmp	r1, #0
 8005e4c:	f000 80d0 	beq.w	8005ff0 <_dtoa_r+0x7b8>
 8005e50:	9906      	ldr	r1, [sp, #24]
 8005e52:	2901      	cmp	r1, #1
 8005e54:	f300 80b4 	bgt.w	8005fc0 <_dtoa_r+0x788>
 8005e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e5a:	2900      	cmp	r1, #0
 8005e5c:	f000 80ac 	beq.w	8005fb8 <_dtoa_r+0x780>
 8005e60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005e68:	461c      	mov	r4, r3
 8005e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6c:	9b04      	ldr	r3, [sp, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	9304      	str	r3, [sp, #16]
 8005e72:	9b05      	ldr	r3, [sp, #20]
 8005e74:	2101      	movs	r1, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	4630      	mov	r0, r6
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	f000 fc3e 	bl	80066fc <__i2b>
 8005e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e82:	4607      	mov	r7, r0
 8005e84:	f1b8 0f00 	cmp.w	r8, #0
 8005e88:	d00d      	beq.n	8005ea6 <_dtoa_r+0x66e>
 8005e8a:	9a05      	ldr	r2, [sp, #20]
 8005e8c:	2a00      	cmp	r2, #0
 8005e8e:	dd0a      	ble.n	8005ea6 <_dtoa_r+0x66e>
 8005e90:	4542      	cmp	r2, r8
 8005e92:	9904      	ldr	r1, [sp, #16]
 8005e94:	bfa8      	it	ge
 8005e96:	4642      	movge	r2, r8
 8005e98:	1a89      	subs	r1, r1, r2
 8005e9a:	9104      	str	r1, [sp, #16]
 8005e9c:	9905      	ldr	r1, [sp, #20]
 8005e9e:	eba8 0802 	sub.w	r8, r8, r2
 8005ea2:	1a8a      	subs	r2, r1, r2
 8005ea4:	9205      	str	r2, [sp, #20]
 8005ea6:	b303      	cbz	r3, 8005eea <_dtoa_r+0x6b2>
 8005ea8:	9a07      	ldr	r2, [sp, #28]
 8005eaa:	2a00      	cmp	r2, #0
 8005eac:	f000 80a5 	beq.w	8005ffa <_dtoa_r+0x7c2>
 8005eb0:	2c00      	cmp	r4, #0
 8005eb2:	dd13      	ble.n	8005edc <_dtoa_r+0x6a4>
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	4630      	mov	r0, r6
 8005eba:	930d      	str	r3, [sp, #52]	; 0x34
 8005ebc:	f000 fcde 	bl	800687c <__pow5mult>
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f000 fc2e 	bl	8006728 <__multiply>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	9009      	str	r0, [sp, #36]	; 0x24
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 fb5d 	bl	8006590 <_Bfree>
 8005ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eda:	4615      	mov	r5, r2
 8005edc:	1b1a      	subs	r2, r3, r4
 8005ede:	d004      	beq.n	8005eea <_dtoa_r+0x6b2>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 fcca 	bl	800687c <__pow5mult>
 8005ee8:	4605      	mov	r5, r0
 8005eea:	2101      	movs	r1, #1
 8005eec:	4630      	mov	r0, r6
 8005eee:	f000 fc05 	bl	80066fc <__i2b>
 8005ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	f340 8081 	ble.w	8005ffe <_dtoa_r+0x7c6>
 8005efc:	461a      	mov	r2, r3
 8005efe:	4601      	mov	r1, r0
 8005f00:	4630      	mov	r0, r6
 8005f02:	f000 fcbb 	bl	800687c <__pow5mult>
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	dd7a      	ble.n	8006004 <_dtoa_r+0x7cc>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9309      	str	r3, [sp, #36]	; 0x24
 8005f12:	6922      	ldr	r2, [r4, #16]
 8005f14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005f18:	6910      	ldr	r0, [r2, #16]
 8005f1a:	f000 fba1 	bl	8006660 <__hi0bits>
 8005f1e:	f1c0 0020 	rsb	r0, r0, #32
 8005f22:	9b05      	ldr	r3, [sp, #20]
 8005f24:	4418      	add	r0, r3
 8005f26:	f010 001f 	ands.w	r0, r0, #31
 8005f2a:	f000 8093 	beq.w	8006054 <_dtoa_r+0x81c>
 8005f2e:	f1c0 0220 	rsb	r2, r0, #32
 8005f32:	2a04      	cmp	r2, #4
 8005f34:	f340 8085 	ble.w	8006042 <_dtoa_r+0x80a>
 8005f38:	9b04      	ldr	r3, [sp, #16]
 8005f3a:	f1c0 001c 	rsb	r0, r0, #28
 8005f3e:	4403      	add	r3, r0
 8005f40:	9304      	str	r3, [sp, #16]
 8005f42:	9b05      	ldr	r3, [sp, #20]
 8005f44:	4480      	add	r8, r0
 8005f46:	4403      	add	r3, r0
 8005f48:	9305      	str	r3, [sp, #20]
 8005f4a:	9b04      	ldr	r3, [sp, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd05      	ble.n	8005f5c <_dtoa_r+0x724>
 8005f50:	4629      	mov	r1, r5
 8005f52:	461a      	mov	r2, r3
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 fceb 	bl	8006930 <__lshift>
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	9b05      	ldr	r3, [sp, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dd05      	ble.n	8005f6e <_dtoa_r+0x736>
 8005f62:	4621      	mov	r1, r4
 8005f64:	461a      	mov	r2, r3
 8005f66:	4630      	mov	r0, r6
 8005f68:	f000 fce2 	bl	8006930 <__lshift>
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d071      	beq.n	8006058 <_dtoa_r+0x820>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 fd46 	bl	8006a08 <__mcmp>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	da6b      	bge.n	8006058 <_dtoa_r+0x820>
 8005f80:	2300      	movs	r3, #0
 8005f82:	4629      	mov	r1, r5
 8005f84:	220a      	movs	r2, #10
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 fb24 	bl	80065d4 <__multadd>
 8005f8c:	9b07      	ldr	r3, [sp, #28]
 8005f8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f92:	4605      	mov	r5, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8197 	beq.w	80062c8 <_dtoa_r+0xa90>
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	220a      	movs	r2, #10
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 fb17 	bl	80065d4 <__multadd>
 8005fa6:	f1ba 0f00 	cmp.w	sl, #0
 8005faa:	4607      	mov	r7, r0
 8005fac:	f300 8093 	bgt.w	80060d6 <_dtoa_r+0x89e>
 8005fb0:	9b06      	ldr	r3, [sp, #24]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	dc57      	bgt.n	8006066 <_dtoa_r+0x82e>
 8005fb6:	e08e      	b.n	80060d6 <_dtoa_r+0x89e>
 8005fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fbe:	e751      	b.n	8005e64 <_dtoa_r+0x62c>
 8005fc0:	f109 34ff 	add.w	r4, r9, #4294967295
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	bfbf      	itttt	lt
 8005fc8:	1ae2      	sublt	r2, r4, r3
 8005fca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fcc:	189b      	addlt	r3, r3, r2
 8005fce:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005fd0:	bfae      	itee	ge
 8005fd2:	1b1c      	subge	r4, r3, r4
 8005fd4:	4623      	movlt	r3, r4
 8005fd6:	2400      	movlt	r4, #0
 8005fd8:	f1b9 0f00 	cmp.w	r9, #0
 8005fdc:	bfb5      	itete	lt
 8005fde:	9a04      	ldrlt	r2, [sp, #16]
 8005fe0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005fe4:	eba2 0809 	sublt.w	r8, r2, r9
 8005fe8:	464a      	movge	r2, r9
 8005fea:	bfb8      	it	lt
 8005fec:	2200      	movlt	r2, #0
 8005fee:	e73c      	b.n	8005e6a <_dtoa_r+0x632>
 8005ff0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005ff4:	9f07      	ldr	r7, [sp, #28]
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	e744      	b.n	8005e84 <_dtoa_r+0x64c>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	e770      	b.n	8005ee0 <_dtoa_r+0x6a8>
 8005ffe:	9b06      	ldr	r3, [sp, #24]
 8006000:	2b01      	cmp	r3, #1
 8006002:	dc18      	bgt.n	8006036 <_dtoa_r+0x7fe>
 8006004:	9b02      	ldr	r3, [sp, #8]
 8006006:	b9b3      	cbnz	r3, 8006036 <_dtoa_r+0x7fe>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800600e:	b9a2      	cbnz	r2, 800603a <_dtoa_r+0x802>
 8006010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006014:	0d12      	lsrs	r2, r2, #20
 8006016:	0512      	lsls	r2, r2, #20
 8006018:	b18a      	cbz	r2, 800603e <_dtoa_r+0x806>
 800601a:	9b04      	ldr	r3, [sp, #16]
 800601c:	3301      	adds	r3, #1
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	9b05      	ldr	r3, [sp, #20]
 8006022:	3301      	adds	r3, #1
 8006024:	9305      	str	r3, [sp, #20]
 8006026:	2301      	movs	r3, #1
 8006028:	9309      	str	r3, [sp, #36]	; 0x24
 800602a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f af70 	bne.w	8005f12 <_dtoa_r+0x6da>
 8006032:	2001      	movs	r0, #1
 8006034:	e775      	b.n	8005f22 <_dtoa_r+0x6ea>
 8006036:	2300      	movs	r3, #0
 8006038:	e7f6      	b.n	8006028 <_dtoa_r+0x7f0>
 800603a:	9b02      	ldr	r3, [sp, #8]
 800603c:	e7f4      	b.n	8006028 <_dtoa_r+0x7f0>
 800603e:	9209      	str	r2, [sp, #36]	; 0x24
 8006040:	e7f3      	b.n	800602a <_dtoa_r+0x7f2>
 8006042:	d082      	beq.n	8005f4a <_dtoa_r+0x712>
 8006044:	9b04      	ldr	r3, [sp, #16]
 8006046:	321c      	adds	r2, #28
 8006048:	4413      	add	r3, r2
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	9b05      	ldr	r3, [sp, #20]
 800604e:	4490      	add	r8, r2
 8006050:	4413      	add	r3, r2
 8006052:	e779      	b.n	8005f48 <_dtoa_r+0x710>
 8006054:	4602      	mov	r2, r0
 8006056:	e7f5      	b.n	8006044 <_dtoa_r+0x80c>
 8006058:	f1b9 0f00 	cmp.w	r9, #0
 800605c:	dc36      	bgt.n	80060cc <_dtoa_r+0x894>
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	2b02      	cmp	r3, #2
 8006062:	dd33      	ble.n	80060cc <_dtoa_r+0x894>
 8006064:	46ca      	mov	sl, r9
 8006066:	f1ba 0f00 	cmp.w	sl, #0
 800606a:	d10d      	bne.n	8006088 <_dtoa_r+0x850>
 800606c:	4621      	mov	r1, r4
 800606e:	4653      	mov	r3, sl
 8006070:	2205      	movs	r2, #5
 8006072:	4630      	mov	r0, r6
 8006074:	f000 faae 	bl	80065d4 <__multadd>
 8006078:	4601      	mov	r1, r0
 800607a:	4604      	mov	r4, r0
 800607c:	4628      	mov	r0, r5
 800607e:	f000 fcc3 	bl	8006a08 <__mcmp>
 8006082:	2800      	cmp	r0, #0
 8006084:	f73f ade4 	bgt.w	8005c50 <_dtoa_r+0x418>
 8006088:	9b08      	ldr	r3, [sp, #32]
 800608a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800608e:	ea6f 0b03 	mvn.w	fp, r3
 8006092:	f04f 0900 	mov.w	r9, #0
 8006096:	4621      	mov	r1, r4
 8006098:	4630      	mov	r0, r6
 800609a:	f000 fa79 	bl	8006590 <_Bfree>
 800609e:	2f00      	cmp	r7, #0
 80060a0:	f43f aea1 	beq.w	8005de6 <_dtoa_r+0x5ae>
 80060a4:	f1b9 0f00 	cmp.w	r9, #0
 80060a8:	d005      	beq.n	80060b6 <_dtoa_r+0x87e>
 80060aa:	45b9      	cmp	r9, r7
 80060ac:	d003      	beq.n	80060b6 <_dtoa_r+0x87e>
 80060ae:	4649      	mov	r1, r9
 80060b0:	4630      	mov	r0, r6
 80060b2:	f000 fa6d 	bl	8006590 <_Bfree>
 80060b6:	4639      	mov	r1, r7
 80060b8:	4630      	mov	r0, r6
 80060ba:	f000 fa69 	bl	8006590 <_Bfree>
 80060be:	e692      	b.n	8005de6 <_dtoa_r+0x5ae>
 80060c0:	2400      	movs	r4, #0
 80060c2:	4627      	mov	r7, r4
 80060c4:	e7e0      	b.n	8006088 <_dtoa_r+0x850>
 80060c6:	4693      	mov	fp, r2
 80060c8:	4627      	mov	r7, r4
 80060ca:	e5c1      	b.n	8005c50 <_dtoa_r+0x418>
 80060cc:	9b07      	ldr	r3, [sp, #28]
 80060ce:	46ca      	mov	sl, r9
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8100 	beq.w	80062d6 <_dtoa_r+0xa9e>
 80060d6:	f1b8 0f00 	cmp.w	r8, #0
 80060da:	dd05      	ble.n	80060e8 <_dtoa_r+0x8b0>
 80060dc:	4639      	mov	r1, r7
 80060de:	4642      	mov	r2, r8
 80060e0:	4630      	mov	r0, r6
 80060e2:	f000 fc25 	bl	8006930 <__lshift>
 80060e6:	4607      	mov	r7, r0
 80060e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d05d      	beq.n	80061aa <_dtoa_r+0x972>
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 fa0d 	bl	8006510 <_Balloc>
 80060f6:	4680      	mov	r8, r0
 80060f8:	b928      	cbnz	r0, 8006106 <_dtoa_r+0x8ce>
 80060fa:	4b82      	ldr	r3, [pc, #520]	; (8006304 <_dtoa_r+0xacc>)
 80060fc:	4602      	mov	r2, r0
 80060fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006102:	f7ff bbb1 	b.w	8005868 <_dtoa_r+0x30>
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	3202      	adds	r2, #2
 800610a:	0092      	lsls	r2, r2, #2
 800610c:	f107 010c 	add.w	r1, r7, #12
 8006110:	300c      	adds	r0, #12
 8006112:	f000 ffa9 	bl	8007068 <memcpy>
 8006116:	2201      	movs	r2, #1
 8006118:	4641      	mov	r1, r8
 800611a:	4630      	mov	r0, r6
 800611c:	f000 fc08 	bl	8006930 <__lshift>
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	3301      	adds	r3, #1
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	4453      	add	r3, sl
 800612a:	9308      	str	r3, [sp, #32]
 800612c:	9b02      	ldr	r3, [sp, #8]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	46b9      	mov	r9, r7
 8006134:	9307      	str	r3, [sp, #28]
 8006136:	4607      	mov	r7, r0
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	4621      	mov	r1, r4
 800613c:	3b01      	subs	r3, #1
 800613e:	4628      	mov	r0, r5
 8006140:	9302      	str	r3, [sp, #8]
 8006142:	f7ff faf0 	bl	8005726 <quorem>
 8006146:	4603      	mov	r3, r0
 8006148:	3330      	adds	r3, #48	; 0x30
 800614a:	9005      	str	r0, [sp, #20]
 800614c:	4649      	mov	r1, r9
 800614e:	4628      	mov	r0, r5
 8006150:	9309      	str	r3, [sp, #36]	; 0x24
 8006152:	f000 fc59 	bl	8006a08 <__mcmp>
 8006156:	463a      	mov	r2, r7
 8006158:	4682      	mov	sl, r0
 800615a:	4621      	mov	r1, r4
 800615c:	4630      	mov	r0, r6
 800615e:	f000 fc6f 	bl	8006a40 <__mdiff>
 8006162:	68c2      	ldr	r2, [r0, #12]
 8006164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006166:	4680      	mov	r8, r0
 8006168:	bb0a      	cbnz	r2, 80061ae <_dtoa_r+0x976>
 800616a:	4601      	mov	r1, r0
 800616c:	4628      	mov	r0, r5
 800616e:	f000 fc4b 	bl	8006a08 <__mcmp>
 8006172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006174:	4602      	mov	r2, r0
 8006176:	4641      	mov	r1, r8
 8006178:	4630      	mov	r0, r6
 800617a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800617e:	f000 fa07 	bl	8006590 <_Bfree>
 8006182:	9b06      	ldr	r3, [sp, #24]
 8006184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006186:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800618a:	ea43 0102 	orr.w	r1, r3, r2
 800618e:	9b07      	ldr	r3, [sp, #28]
 8006190:	4319      	orrs	r1, r3
 8006192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006194:	d10d      	bne.n	80061b2 <_dtoa_r+0x97a>
 8006196:	2b39      	cmp	r3, #57	; 0x39
 8006198:	d029      	beq.n	80061ee <_dtoa_r+0x9b6>
 800619a:	f1ba 0f00 	cmp.w	sl, #0
 800619e:	dd01      	ble.n	80061a4 <_dtoa_r+0x96c>
 80061a0:	9b05      	ldr	r3, [sp, #20]
 80061a2:	3331      	adds	r3, #49	; 0x31
 80061a4:	9a02      	ldr	r2, [sp, #8]
 80061a6:	7013      	strb	r3, [r2, #0]
 80061a8:	e775      	b.n	8006096 <_dtoa_r+0x85e>
 80061aa:	4638      	mov	r0, r7
 80061ac:	e7b8      	b.n	8006120 <_dtoa_r+0x8e8>
 80061ae:	2201      	movs	r2, #1
 80061b0:	e7e1      	b.n	8006176 <_dtoa_r+0x93e>
 80061b2:	f1ba 0f00 	cmp.w	sl, #0
 80061b6:	db06      	blt.n	80061c6 <_dtoa_r+0x98e>
 80061b8:	9906      	ldr	r1, [sp, #24]
 80061ba:	ea41 0a0a 	orr.w	sl, r1, sl
 80061be:	9907      	ldr	r1, [sp, #28]
 80061c0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80061c4:	d120      	bne.n	8006208 <_dtoa_r+0x9d0>
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	ddec      	ble.n	80061a4 <_dtoa_r+0x96c>
 80061ca:	4629      	mov	r1, r5
 80061cc:	2201      	movs	r2, #1
 80061ce:	4630      	mov	r0, r6
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	f000 fbad 	bl	8006930 <__lshift>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4605      	mov	r5, r0
 80061da:	f000 fc15 	bl	8006a08 <__mcmp>
 80061de:	2800      	cmp	r0, #0
 80061e0:	9b04      	ldr	r3, [sp, #16]
 80061e2:	dc02      	bgt.n	80061ea <_dtoa_r+0x9b2>
 80061e4:	d1de      	bne.n	80061a4 <_dtoa_r+0x96c>
 80061e6:	07da      	lsls	r2, r3, #31
 80061e8:	d5dc      	bpl.n	80061a4 <_dtoa_r+0x96c>
 80061ea:	2b39      	cmp	r3, #57	; 0x39
 80061ec:	d1d8      	bne.n	80061a0 <_dtoa_r+0x968>
 80061ee:	9a02      	ldr	r2, [sp, #8]
 80061f0:	2339      	movs	r3, #57	; 0x39
 80061f2:	7013      	strb	r3, [r2, #0]
 80061f4:	4643      	mov	r3, r8
 80061f6:	4698      	mov	r8, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80061fe:	2a39      	cmp	r2, #57	; 0x39
 8006200:	d051      	beq.n	80062a6 <_dtoa_r+0xa6e>
 8006202:	3201      	adds	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e746      	b.n	8006096 <_dtoa_r+0x85e>
 8006208:	2a00      	cmp	r2, #0
 800620a:	dd03      	ble.n	8006214 <_dtoa_r+0x9dc>
 800620c:	2b39      	cmp	r3, #57	; 0x39
 800620e:	d0ee      	beq.n	80061ee <_dtoa_r+0x9b6>
 8006210:	3301      	adds	r3, #1
 8006212:	e7c7      	b.n	80061a4 <_dtoa_r+0x96c>
 8006214:	9a04      	ldr	r2, [sp, #16]
 8006216:	9908      	ldr	r1, [sp, #32]
 8006218:	f802 3c01 	strb.w	r3, [r2, #-1]
 800621c:	428a      	cmp	r2, r1
 800621e:	d02b      	beq.n	8006278 <_dtoa_r+0xa40>
 8006220:	4629      	mov	r1, r5
 8006222:	2300      	movs	r3, #0
 8006224:	220a      	movs	r2, #10
 8006226:	4630      	mov	r0, r6
 8006228:	f000 f9d4 	bl	80065d4 <__multadd>
 800622c:	45b9      	cmp	r9, r7
 800622e:	4605      	mov	r5, r0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	f04f 020a 	mov.w	r2, #10
 8006238:	4649      	mov	r1, r9
 800623a:	4630      	mov	r0, r6
 800623c:	d107      	bne.n	800624e <_dtoa_r+0xa16>
 800623e:	f000 f9c9 	bl	80065d4 <__multadd>
 8006242:	4681      	mov	r9, r0
 8006244:	4607      	mov	r7, r0
 8006246:	9b04      	ldr	r3, [sp, #16]
 8006248:	3301      	adds	r3, #1
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	e774      	b.n	8006138 <_dtoa_r+0x900>
 800624e:	f000 f9c1 	bl	80065d4 <__multadd>
 8006252:	4639      	mov	r1, r7
 8006254:	4681      	mov	r9, r0
 8006256:	2300      	movs	r3, #0
 8006258:	220a      	movs	r2, #10
 800625a:	4630      	mov	r0, r6
 800625c:	f000 f9ba 	bl	80065d4 <__multadd>
 8006260:	4607      	mov	r7, r0
 8006262:	e7f0      	b.n	8006246 <_dtoa_r+0xa0e>
 8006264:	f1ba 0f00 	cmp.w	sl, #0
 8006268:	9a01      	ldr	r2, [sp, #4]
 800626a:	bfcc      	ite	gt
 800626c:	46d0      	movgt	r8, sl
 800626e:	f04f 0801 	movle.w	r8, #1
 8006272:	4490      	add	r8, r2
 8006274:	f04f 0900 	mov.w	r9, #0
 8006278:	4629      	mov	r1, r5
 800627a:	2201      	movs	r2, #1
 800627c:	4630      	mov	r0, r6
 800627e:	9302      	str	r3, [sp, #8]
 8006280:	f000 fb56 	bl	8006930 <__lshift>
 8006284:	4621      	mov	r1, r4
 8006286:	4605      	mov	r5, r0
 8006288:	f000 fbbe 	bl	8006a08 <__mcmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	dcb1      	bgt.n	80061f4 <_dtoa_r+0x9bc>
 8006290:	d102      	bne.n	8006298 <_dtoa_r+0xa60>
 8006292:	9b02      	ldr	r3, [sp, #8]
 8006294:	07db      	lsls	r3, r3, #31
 8006296:	d4ad      	bmi.n	80061f4 <_dtoa_r+0x9bc>
 8006298:	4643      	mov	r3, r8
 800629a:	4698      	mov	r8, r3
 800629c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062a0:	2a30      	cmp	r2, #48	; 0x30
 80062a2:	d0fa      	beq.n	800629a <_dtoa_r+0xa62>
 80062a4:	e6f7      	b.n	8006096 <_dtoa_r+0x85e>
 80062a6:	9a01      	ldr	r2, [sp, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d1a4      	bne.n	80061f6 <_dtoa_r+0x9be>
 80062ac:	f10b 0b01 	add.w	fp, fp, #1
 80062b0:	2331      	movs	r3, #49	; 0x31
 80062b2:	e778      	b.n	80061a6 <_dtoa_r+0x96e>
 80062b4:	4b14      	ldr	r3, [pc, #80]	; (8006308 <_dtoa_r+0xad0>)
 80062b6:	f7ff bb2a 	b.w	800590e <_dtoa_r+0xd6>
 80062ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f ab05 	bne.w	80058cc <_dtoa_r+0x94>
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <_dtoa_r+0xad4>)
 80062c4:	f7ff bb23 	b.w	800590e <_dtoa_r+0xd6>
 80062c8:	f1ba 0f00 	cmp.w	sl, #0
 80062cc:	dc03      	bgt.n	80062d6 <_dtoa_r+0xa9e>
 80062ce:	9b06      	ldr	r3, [sp, #24]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	f73f aec8 	bgt.w	8006066 <_dtoa_r+0x82e>
 80062d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f7ff fa22 	bl	8005726 <quorem>
 80062e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80062e6:	f808 3b01 	strb.w	r3, [r8], #1
 80062ea:	9a01      	ldr	r2, [sp, #4]
 80062ec:	eba8 0202 	sub.w	r2, r8, r2
 80062f0:	4592      	cmp	sl, r2
 80062f2:	ddb7      	ble.n	8006264 <_dtoa_r+0xa2c>
 80062f4:	4629      	mov	r1, r5
 80062f6:	2300      	movs	r3, #0
 80062f8:	220a      	movs	r2, #10
 80062fa:	4630      	mov	r0, r6
 80062fc:	f000 f96a 	bl	80065d4 <__multadd>
 8006300:	4605      	mov	r5, r0
 8006302:	e7ea      	b.n	80062da <_dtoa_r+0xaa2>
 8006304:	08007dfc 	.word	0x08007dfc
 8006308:	08007d5c 	.word	0x08007d5c
 800630c:	08007d80 	.word	0x08007d80

08006310 <_free_r>:
 8006310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006312:	2900      	cmp	r1, #0
 8006314:	d044      	beq.n	80063a0 <_free_r+0x90>
 8006316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800631a:	9001      	str	r0, [sp, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f1a1 0404 	sub.w	r4, r1, #4
 8006322:	bfb8      	it	lt
 8006324:	18e4      	addlt	r4, r4, r3
 8006326:	f000 f8e7 	bl	80064f8 <__malloc_lock>
 800632a:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <_free_r+0x94>)
 800632c:	9801      	ldr	r0, [sp, #4]
 800632e:	6813      	ldr	r3, [r2, #0]
 8006330:	b933      	cbnz	r3, 8006340 <_free_r+0x30>
 8006332:	6063      	str	r3, [r4, #4]
 8006334:	6014      	str	r4, [r2, #0]
 8006336:	b003      	add	sp, #12
 8006338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800633c:	f000 b8e2 	b.w	8006504 <__malloc_unlock>
 8006340:	42a3      	cmp	r3, r4
 8006342:	d908      	bls.n	8006356 <_free_r+0x46>
 8006344:	6825      	ldr	r5, [r4, #0]
 8006346:	1961      	adds	r1, r4, r5
 8006348:	428b      	cmp	r3, r1
 800634a:	bf01      	itttt	eq
 800634c:	6819      	ldreq	r1, [r3, #0]
 800634e:	685b      	ldreq	r3, [r3, #4]
 8006350:	1949      	addeq	r1, r1, r5
 8006352:	6021      	streq	r1, [r4, #0]
 8006354:	e7ed      	b.n	8006332 <_free_r+0x22>
 8006356:	461a      	mov	r2, r3
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	b10b      	cbz	r3, 8006360 <_free_r+0x50>
 800635c:	42a3      	cmp	r3, r4
 800635e:	d9fa      	bls.n	8006356 <_free_r+0x46>
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	1855      	adds	r5, r2, r1
 8006364:	42a5      	cmp	r5, r4
 8006366:	d10b      	bne.n	8006380 <_free_r+0x70>
 8006368:	6824      	ldr	r4, [r4, #0]
 800636a:	4421      	add	r1, r4
 800636c:	1854      	adds	r4, r2, r1
 800636e:	42a3      	cmp	r3, r4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	d1e0      	bne.n	8006336 <_free_r+0x26>
 8006374:	681c      	ldr	r4, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	440c      	add	r4, r1
 800637c:	6014      	str	r4, [r2, #0]
 800637e:	e7da      	b.n	8006336 <_free_r+0x26>
 8006380:	d902      	bls.n	8006388 <_free_r+0x78>
 8006382:	230c      	movs	r3, #12
 8006384:	6003      	str	r3, [r0, #0]
 8006386:	e7d6      	b.n	8006336 <_free_r+0x26>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	1961      	adds	r1, r4, r5
 800638c:	428b      	cmp	r3, r1
 800638e:	bf04      	itt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	bf04      	itt	eq
 8006398:	1949      	addeq	r1, r1, r5
 800639a:	6021      	streq	r1, [r4, #0]
 800639c:	6054      	str	r4, [r2, #4]
 800639e:	e7ca      	b.n	8006336 <_free_r+0x26>
 80063a0:	b003      	add	sp, #12
 80063a2:	bd30      	pop	{r4, r5, pc}
 80063a4:	20000b4c 	.word	0x20000b4c

080063a8 <malloc>:
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <malloc+0xc>)
 80063aa:	4601      	mov	r1, r0
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f000 b823 	b.w	80063f8 <_malloc_r>
 80063b2:	bf00      	nop
 80063b4:	20000064 	.word	0x20000064

080063b8 <sbrk_aligned>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	4e0e      	ldr	r6, [pc, #56]	; (80063f4 <sbrk_aligned+0x3c>)
 80063bc:	460c      	mov	r4, r1
 80063be:	6831      	ldr	r1, [r6, #0]
 80063c0:	4605      	mov	r5, r0
 80063c2:	b911      	cbnz	r1, 80063ca <sbrk_aligned+0x12>
 80063c4:	f000 fe40 	bl	8007048 <_sbrk_r>
 80063c8:	6030      	str	r0, [r6, #0]
 80063ca:	4621      	mov	r1, r4
 80063cc:	4628      	mov	r0, r5
 80063ce:	f000 fe3b 	bl	8007048 <_sbrk_r>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d00a      	beq.n	80063ec <sbrk_aligned+0x34>
 80063d6:	1cc4      	adds	r4, r0, #3
 80063d8:	f024 0403 	bic.w	r4, r4, #3
 80063dc:	42a0      	cmp	r0, r4
 80063de:	d007      	beq.n	80063f0 <sbrk_aligned+0x38>
 80063e0:	1a21      	subs	r1, r4, r0
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fe30 	bl	8007048 <_sbrk_r>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d101      	bne.n	80063f0 <sbrk_aligned+0x38>
 80063ec:	f04f 34ff 	mov.w	r4, #4294967295
 80063f0:	4620      	mov	r0, r4
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	20000b50 	.word	0x20000b50

080063f8 <_malloc_r>:
 80063f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063fc:	1ccd      	adds	r5, r1, #3
 80063fe:	f025 0503 	bic.w	r5, r5, #3
 8006402:	3508      	adds	r5, #8
 8006404:	2d0c      	cmp	r5, #12
 8006406:	bf38      	it	cc
 8006408:	250c      	movcc	r5, #12
 800640a:	2d00      	cmp	r5, #0
 800640c:	4607      	mov	r7, r0
 800640e:	db01      	blt.n	8006414 <_malloc_r+0x1c>
 8006410:	42a9      	cmp	r1, r5
 8006412:	d905      	bls.n	8006420 <_malloc_r+0x28>
 8006414:	230c      	movs	r3, #12
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	2600      	movs	r6, #0
 800641a:	4630      	mov	r0, r6
 800641c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006420:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064f4 <_malloc_r+0xfc>
 8006424:	f000 f868 	bl	80064f8 <__malloc_lock>
 8006428:	f8d8 3000 	ldr.w	r3, [r8]
 800642c:	461c      	mov	r4, r3
 800642e:	bb5c      	cbnz	r4, 8006488 <_malloc_r+0x90>
 8006430:	4629      	mov	r1, r5
 8006432:	4638      	mov	r0, r7
 8006434:	f7ff ffc0 	bl	80063b8 <sbrk_aligned>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	4604      	mov	r4, r0
 800643c:	d155      	bne.n	80064ea <_malloc_r+0xf2>
 800643e:	f8d8 4000 	ldr.w	r4, [r8]
 8006442:	4626      	mov	r6, r4
 8006444:	2e00      	cmp	r6, #0
 8006446:	d145      	bne.n	80064d4 <_malloc_r+0xdc>
 8006448:	2c00      	cmp	r4, #0
 800644a:	d048      	beq.n	80064de <_malloc_r+0xe6>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	4631      	mov	r1, r6
 8006450:	4638      	mov	r0, r7
 8006452:	eb04 0903 	add.w	r9, r4, r3
 8006456:	f000 fdf7 	bl	8007048 <_sbrk_r>
 800645a:	4581      	cmp	r9, r0
 800645c:	d13f      	bne.n	80064de <_malloc_r+0xe6>
 800645e:	6821      	ldr	r1, [r4, #0]
 8006460:	1a6d      	subs	r5, r5, r1
 8006462:	4629      	mov	r1, r5
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ffa7 	bl	80063b8 <sbrk_aligned>
 800646a:	3001      	adds	r0, #1
 800646c:	d037      	beq.n	80064de <_malloc_r+0xe6>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	442b      	add	r3, r5
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	f8d8 3000 	ldr.w	r3, [r8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d038      	beq.n	80064ee <_malloc_r+0xf6>
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	42a2      	cmp	r2, r4
 8006480:	d12b      	bne.n	80064da <_malloc_r+0xe2>
 8006482:	2200      	movs	r2, #0
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e00f      	b.n	80064a8 <_malloc_r+0xb0>
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	1b52      	subs	r2, r2, r5
 800648c:	d41f      	bmi.n	80064ce <_malloc_r+0xd6>
 800648e:	2a0b      	cmp	r2, #11
 8006490:	d917      	bls.n	80064c2 <_malloc_r+0xca>
 8006492:	1961      	adds	r1, r4, r5
 8006494:	42a3      	cmp	r3, r4
 8006496:	6025      	str	r5, [r4, #0]
 8006498:	bf18      	it	ne
 800649a:	6059      	strne	r1, [r3, #4]
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	bf08      	it	eq
 80064a0:	f8c8 1000 	streq.w	r1, [r8]
 80064a4:	5162      	str	r2, [r4, r5]
 80064a6:	604b      	str	r3, [r1, #4]
 80064a8:	4638      	mov	r0, r7
 80064aa:	f104 060b 	add.w	r6, r4, #11
 80064ae:	f000 f829 	bl	8006504 <__malloc_unlock>
 80064b2:	f026 0607 	bic.w	r6, r6, #7
 80064b6:	1d23      	adds	r3, r4, #4
 80064b8:	1af2      	subs	r2, r6, r3
 80064ba:	d0ae      	beq.n	800641a <_malloc_r+0x22>
 80064bc:	1b9b      	subs	r3, r3, r6
 80064be:	50a3      	str	r3, [r4, r2]
 80064c0:	e7ab      	b.n	800641a <_malloc_r+0x22>
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	6862      	ldr	r2, [r4, #4]
 80064c6:	d1dd      	bne.n	8006484 <_malloc_r+0x8c>
 80064c8:	f8c8 2000 	str.w	r2, [r8]
 80064cc:	e7ec      	b.n	80064a8 <_malloc_r+0xb0>
 80064ce:	4623      	mov	r3, r4
 80064d0:	6864      	ldr	r4, [r4, #4]
 80064d2:	e7ac      	b.n	800642e <_malloc_r+0x36>
 80064d4:	4634      	mov	r4, r6
 80064d6:	6876      	ldr	r6, [r6, #4]
 80064d8:	e7b4      	b.n	8006444 <_malloc_r+0x4c>
 80064da:	4613      	mov	r3, r2
 80064dc:	e7cc      	b.n	8006478 <_malloc_r+0x80>
 80064de:	230c      	movs	r3, #12
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	4638      	mov	r0, r7
 80064e4:	f000 f80e 	bl	8006504 <__malloc_unlock>
 80064e8:	e797      	b.n	800641a <_malloc_r+0x22>
 80064ea:	6025      	str	r5, [r4, #0]
 80064ec:	e7dc      	b.n	80064a8 <_malloc_r+0xb0>
 80064ee:	605b      	str	r3, [r3, #4]
 80064f0:	deff      	udf	#255	; 0xff
 80064f2:	bf00      	nop
 80064f4:	20000b4c 	.word	0x20000b4c

080064f8 <__malloc_lock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__malloc_lock+0x8>)
 80064fa:	f7ff b912 	b.w	8005722 <__retarget_lock_acquire_recursive>
 80064fe:	bf00      	nop
 8006500:	20000b48 	.word	0x20000b48

08006504 <__malloc_unlock>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__malloc_unlock+0x8>)
 8006506:	f7ff b90d 	b.w	8005724 <__retarget_lock_release_recursive>
 800650a:	bf00      	nop
 800650c:	20000b48 	.word	0x20000b48

08006510 <_Balloc>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	69c6      	ldr	r6, [r0, #28]
 8006514:	4604      	mov	r4, r0
 8006516:	460d      	mov	r5, r1
 8006518:	b976      	cbnz	r6, 8006538 <_Balloc+0x28>
 800651a:	2010      	movs	r0, #16
 800651c:	f7ff ff44 	bl	80063a8 <malloc>
 8006520:	4602      	mov	r2, r0
 8006522:	61e0      	str	r0, [r4, #28]
 8006524:	b920      	cbnz	r0, 8006530 <_Balloc+0x20>
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <_Balloc+0x78>)
 8006528:	4818      	ldr	r0, [pc, #96]	; (800658c <_Balloc+0x7c>)
 800652a:	216b      	movs	r1, #107	; 0x6b
 800652c:	f000 fdaa 	bl	8007084 <__assert_func>
 8006530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006534:	6006      	str	r6, [r0, #0]
 8006536:	60c6      	str	r6, [r0, #12]
 8006538:	69e6      	ldr	r6, [r4, #28]
 800653a:	68f3      	ldr	r3, [r6, #12]
 800653c:	b183      	cbz	r3, 8006560 <_Balloc+0x50>
 800653e:	69e3      	ldr	r3, [r4, #28]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006546:	b9b8      	cbnz	r0, 8006578 <_Balloc+0x68>
 8006548:	2101      	movs	r1, #1
 800654a:	fa01 f605 	lsl.w	r6, r1, r5
 800654e:	1d72      	adds	r2, r6, #5
 8006550:	0092      	lsls	r2, r2, #2
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fdb4 	bl	80070c0 <_calloc_r>
 8006558:	b160      	cbz	r0, 8006574 <_Balloc+0x64>
 800655a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800655e:	e00e      	b.n	800657e <_Balloc+0x6e>
 8006560:	2221      	movs	r2, #33	; 0x21
 8006562:	2104      	movs	r1, #4
 8006564:	4620      	mov	r0, r4
 8006566:	f000 fdab 	bl	80070c0 <_calloc_r>
 800656a:	69e3      	ldr	r3, [r4, #28]
 800656c:	60f0      	str	r0, [r6, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e4      	bne.n	800653e <_Balloc+0x2e>
 8006574:	2000      	movs	r0, #0
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	6802      	ldr	r2, [r0, #0]
 800657a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800657e:	2300      	movs	r3, #0
 8006580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006584:	e7f7      	b.n	8006576 <_Balloc+0x66>
 8006586:	bf00      	nop
 8006588:	08007d8d 	.word	0x08007d8d
 800658c:	08007e0d 	.word	0x08007e0d

08006590 <_Bfree>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	69c6      	ldr	r6, [r0, #28]
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b976      	cbnz	r6, 80065b8 <_Bfree+0x28>
 800659a:	2010      	movs	r0, #16
 800659c:	f7ff ff04 	bl	80063a8 <malloc>
 80065a0:	4602      	mov	r2, r0
 80065a2:	61e8      	str	r0, [r5, #28]
 80065a4:	b920      	cbnz	r0, 80065b0 <_Bfree+0x20>
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <_Bfree+0x3c>)
 80065a8:	4809      	ldr	r0, [pc, #36]	; (80065d0 <_Bfree+0x40>)
 80065aa:	218f      	movs	r1, #143	; 0x8f
 80065ac:	f000 fd6a 	bl	8007084 <__assert_func>
 80065b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065b4:	6006      	str	r6, [r0, #0]
 80065b6:	60c6      	str	r6, [r0, #12]
 80065b8:	b13c      	cbz	r4, 80065ca <_Bfree+0x3a>
 80065ba:	69eb      	ldr	r3, [r5, #28]
 80065bc:	6862      	ldr	r2, [r4, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065c4:	6021      	str	r1, [r4, #0]
 80065c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	08007d8d 	.word	0x08007d8d
 80065d0:	08007e0d 	.word	0x08007e0d

080065d4 <__multadd>:
 80065d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	690d      	ldr	r5, [r1, #16]
 80065da:	4607      	mov	r7, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	461e      	mov	r6, r3
 80065e0:	f101 0c14 	add.w	ip, r1, #20
 80065e4:	2000      	movs	r0, #0
 80065e6:	f8dc 3000 	ldr.w	r3, [ip]
 80065ea:	b299      	uxth	r1, r3
 80065ec:	fb02 6101 	mla	r1, r2, r1, r6
 80065f0:	0c1e      	lsrs	r6, r3, #16
 80065f2:	0c0b      	lsrs	r3, r1, #16
 80065f4:	fb02 3306 	mla	r3, r2, r6, r3
 80065f8:	b289      	uxth	r1, r1
 80065fa:	3001      	adds	r0, #1
 80065fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006600:	4285      	cmp	r5, r0
 8006602:	f84c 1b04 	str.w	r1, [ip], #4
 8006606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800660a:	dcec      	bgt.n	80065e6 <__multadd+0x12>
 800660c:	b30e      	cbz	r6, 8006652 <__multadd+0x7e>
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	42ab      	cmp	r3, r5
 8006612:	dc19      	bgt.n	8006648 <__multadd+0x74>
 8006614:	6861      	ldr	r1, [r4, #4]
 8006616:	4638      	mov	r0, r7
 8006618:	3101      	adds	r1, #1
 800661a:	f7ff ff79 	bl	8006510 <_Balloc>
 800661e:	4680      	mov	r8, r0
 8006620:	b928      	cbnz	r0, 800662e <__multadd+0x5a>
 8006622:	4602      	mov	r2, r0
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <__multadd+0x84>)
 8006626:	480d      	ldr	r0, [pc, #52]	; (800665c <__multadd+0x88>)
 8006628:	21ba      	movs	r1, #186	; 0xba
 800662a:	f000 fd2b 	bl	8007084 <__assert_func>
 800662e:	6922      	ldr	r2, [r4, #16]
 8006630:	3202      	adds	r2, #2
 8006632:	f104 010c 	add.w	r1, r4, #12
 8006636:	0092      	lsls	r2, r2, #2
 8006638:	300c      	adds	r0, #12
 800663a:	f000 fd15 	bl	8007068 <memcpy>
 800663e:	4621      	mov	r1, r4
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff ffa5 	bl	8006590 <_Bfree>
 8006646:	4644      	mov	r4, r8
 8006648:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800664c:	3501      	adds	r5, #1
 800664e:	615e      	str	r6, [r3, #20]
 8006650:	6125      	str	r5, [r4, #16]
 8006652:	4620      	mov	r0, r4
 8006654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006658:	08007dfc 	.word	0x08007dfc
 800665c:	08007e0d 	.word	0x08007e0d

08006660 <__hi0bits>:
 8006660:	0c03      	lsrs	r3, r0, #16
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	b9d3      	cbnz	r3, 800669c <__hi0bits+0x3c>
 8006666:	0400      	lsls	r0, r0, #16
 8006668:	2310      	movs	r3, #16
 800666a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800666e:	bf04      	itt	eq
 8006670:	0200      	lsleq	r0, r0, #8
 8006672:	3308      	addeq	r3, #8
 8006674:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006678:	bf04      	itt	eq
 800667a:	0100      	lsleq	r0, r0, #4
 800667c:	3304      	addeq	r3, #4
 800667e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006682:	bf04      	itt	eq
 8006684:	0080      	lsleq	r0, r0, #2
 8006686:	3302      	addeq	r3, #2
 8006688:	2800      	cmp	r0, #0
 800668a:	db05      	blt.n	8006698 <__hi0bits+0x38>
 800668c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006690:	f103 0301 	add.w	r3, r3, #1
 8006694:	bf08      	it	eq
 8006696:	2320      	moveq	r3, #32
 8006698:	4618      	mov	r0, r3
 800669a:	4770      	bx	lr
 800669c:	2300      	movs	r3, #0
 800669e:	e7e4      	b.n	800666a <__hi0bits+0xa>

080066a0 <__lo0bits>:
 80066a0:	6803      	ldr	r3, [r0, #0]
 80066a2:	f013 0207 	ands.w	r2, r3, #7
 80066a6:	d00c      	beq.n	80066c2 <__lo0bits+0x22>
 80066a8:	07d9      	lsls	r1, r3, #31
 80066aa:	d422      	bmi.n	80066f2 <__lo0bits+0x52>
 80066ac:	079a      	lsls	r2, r3, #30
 80066ae:	bf49      	itett	mi
 80066b0:	085b      	lsrmi	r3, r3, #1
 80066b2:	089b      	lsrpl	r3, r3, #2
 80066b4:	6003      	strmi	r3, [r0, #0]
 80066b6:	2201      	movmi	r2, #1
 80066b8:	bf5c      	itt	pl
 80066ba:	6003      	strpl	r3, [r0, #0]
 80066bc:	2202      	movpl	r2, #2
 80066be:	4610      	mov	r0, r2
 80066c0:	4770      	bx	lr
 80066c2:	b299      	uxth	r1, r3
 80066c4:	b909      	cbnz	r1, 80066ca <__lo0bits+0x2a>
 80066c6:	0c1b      	lsrs	r3, r3, #16
 80066c8:	2210      	movs	r2, #16
 80066ca:	b2d9      	uxtb	r1, r3
 80066cc:	b909      	cbnz	r1, 80066d2 <__lo0bits+0x32>
 80066ce:	3208      	adds	r2, #8
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	0719      	lsls	r1, r3, #28
 80066d4:	bf04      	itt	eq
 80066d6:	091b      	lsreq	r3, r3, #4
 80066d8:	3204      	addeq	r2, #4
 80066da:	0799      	lsls	r1, r3, #30
 80066dc:	bf04      	itt	eq
 80066de:	089b      	lsreq	r3, r3, #2
 80066e0:	3202      	addeq	r2, #2
 80066e2:	07d9      	lsls	r1, r3, #31
 80066e4:	d403      	bmi.n	80066ee <__lo0bits+0x4e>
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	f102 0201 	add.w	r2, r2, #1
 80066ec:	d003      	beq.n	80066f6 <__lo0bits+0x56>
 80066ee:	6003      	str	r3, [r0, #0]
 80066f0:	e7e5      	b.n	80066be <__lo0bits+0x1e>
 80066f2:	2200      	movs	r2, #0
 80066f4:	e7e3      	b.n	80066be <__lo0bits+0x1e>
 80066f6:	2220      	movs	r2, #32
 80066f8:	e7e1      	b.n	80066be <__lo0bits+0x1e>
	...

080066fc <__i2b>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	460c      	mov	r4, r1
 8006700:	2101      	movs	r1, #1
 8006702:	f7ff ff05 	bl	8006510 <_Balloc>
 8006706:	4602      	mov	r2, r0
 8006708:	b928      	cbnz	r0, 8006716 <__i2b+0x1a>
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <__i2b+0x24>)
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <__i2b+0x28>)
 800670e:	f240 1145 	movw	r1, #325	; 0x145
 8006712:	f000 fcb7 	bl	8007084 <__assert_func>
 8006716:	2301      	movs	r3, #1
 8006718:	6144      	str	r4, [r0, #20]
 800671a:	6103      	str	r3, [r0, #16]
 800671c:	bd10      	pop	{r4, pc}
 800671e:	bf00      	nop
 8006720:	08007dfc 	.word	0x08007dfc
 8006724:	08007e0d 	.word	0x08007e0d

08006728 <__multiply>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	4691      	mov	r9, r2
 800672e:	690a      	ldr	r2, [r1, #16]
 8006730:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	bfb8      	it	lt
 8006738:	460b      	movlt	r3, r1
 800673a:	460c      	mov	r4, r1
 800673c:	bfbc      	itt	lt
 800673e:	464c      	movlt	r4, r9
 8006740:	4699      	movlt	r9, r3
 8006742:	6927      	ldr	r7, [r4, #16]
 8006744:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006748:	68a3      	ldr	r3, [r4, #8]
 800674a:	6861      	ldr	r1, [r4, #4]
 800674c:	eb07 060a 	add.w	r6, r7, sl
 8006750:	42b3      	cmp	r3, r6
 8006752:	b085      	sub	sp, #20
 8006754:	bfb8      	it	lt
 8006756:	3101      	addlt	r1, #1
 8006758:	f7ff feda 	bl	8006510 <_Balloc>
 800675c:	b930      	cbnz	r0, 800676c <__multiply+0x44>
 800675e:	4602      	mov	r2, r0
 8006760:	4b44      	ldr	r3, [pc, #272]	; (8006874 <__multiply+0x14c>)
 8006762:	4845      	ldr	r0, [pc, #276]	; (8006878 <__multiply+0x150>)
 8006764:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006768:	f000 fc8c 	bl	8007084 <__assert_func>
 800676c:	f100 0514 	add.w	r5, r0, #20
 8006770:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006774:	462b      	mov	r3, r5
 8006776:	2200      	movs	r2, #0
 8006778:	4543      	cmp	r3, r8
 800677a:	d321      	bcc.n	80067c0 <__multiply+0x98>
 800677c:	f104 0314 	add.w	r3, r4, #20
 8006780:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006784:	f109 0314 	add.w	r3, r9, #20
 8006788:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800678c:	9202      	str	r2, [sp, #8]
 800678e:	1b3a      	subs	r2, r7, r4
 8006790:	3a15      	subs	r2, #21
 8006792:	f022 0203 	bic.w	r2, r2, #3
 8006796:	3204      	adds	r2, #4
 8006798:	f104 0115 	add.w	r1, r4, #21
 800679c:	428f      	cmp	r7, r1
 800679e:	bf38      	it	cc
 80067a0:	2204      	movcc	r2, #4
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	9a02      	ldr	r2, [sp, #8]
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d80c      	bhi.n	80067c6 <__multiply+0x9e>
 80067ac:	2e00      	cmp	r6, #0
 80067ae:	dd03      	ble.n	80067b8 <__multiply+0x90>
 80067b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d05b      	beq.n	8006870 <__multiply+0x148>
 80067b8:	6106      	str	r6, [r0, #16]
 80067ba:	b005      	add	sp, #20
 80067bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c0:	f843 2b04 	str.w	r2, [r3], #4
 80067c4:	e7d8      	b.n	8006778 <__multiply+0x50>
 80067c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80067ca:	f1ba 0f00 	cmp.w	sl, #0
 80067ce:	d024      	beq.n	800681a <__multiply+0xf2>
 80067d0:	f104 0e14 	add.w	lr, r4, #20
 80067d4:	46a9      	mov	r9, r5
 80067d6:	f04f 0c00 	mov.w	ip, #0
 80067da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80067de:	f8d9 1000 	ldr.w	r1, [r9]
 80067e2:	fa1f fb82 	uxth.w	fp, r2
 80067e6:	b289      	uxth	r1, r1
 80067e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80067ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067f0:	f8d9 2000 	ldr.w	r2, [r9]
 80067f4:	4461      	add	r1, ip
 80067f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80067fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006802:	b289      	uxth	r1, r1
 8006804:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006808:	4577      	cmp	r7, lr
 800680a:	f849 1b04 	str.w	r1, [r9], #4
 800680e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006812:	d8e2      	bhi.n	80067da <__multiply+0xb2>
 8006814:	9a01      	ldr	r2, [sp, #4]
 8006816:	f845 c002 	str.w	ip, [r5, r2]
 800681a:	9a03      	ldr	r2, [sp, #12]
 800681c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006820:	3304      	adds	r3, #4
 8006822:	f1b9 0f00 	cmp.w	r9, #0
 8006826:	d021      	beq.n	800686c <__multiply+0x144>
 8006828:	6829      	ldr	r1, [r5, #0]
 800682a:	f104 0c14 	add.w	ip, r4, #20
 800682e:	46ae      	mov	lr, r5
 8006830:	f04f 0a00 	mov.w	sl, #0
 8006834:	f8bc b000 	ldrh.w	fp, [ip]
 8006838:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800683c:	fb09 220b 	mla	r2, r9, fp, r2
 8006840:	4452      	add	r2, sl
 8006842:	b289      	uxth	r1, r1
 8006844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006848:	f84e 1b04 	str.w	r1, [lr], #4
 800684c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006850:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006854:	f8be 1000 	ldrh.w	r1, [lr]
 8006858:	fb09 110a 	mla	r1, r9, sl, r1
 800685c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006860:	4567      	cmp	r7, ip
 8006862:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006866:	d8e5      	bhi.n	8006834 <__multiply+0x10c>
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	50a9      	str	r1, [r5, r2]
 800686c:	3504      	adds	r5, #4
 800686e:	e799      	b.n	80067a4 <__multiply+0x7c>
 8006870:	3e01      	subs	r6, #1
 8006872:	e79b      	b.n	80067ac <__multiply+0x84>
 8006874:	08007dfc 	.word	0x08007dfc
 8006878:	08007e0d 	.word	0x08007e0d

0800687c <__pow5mult>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4615      	mov	r5, r2
 8006882:	f012 0203 	ands.w	r2, r2, #3
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	d007      	beq.n	800689c <__pow5mult+0x20>
 800688c:	4c25      	ldr	r4, [pc, #148]	; (8006924 <__pow5mult+0xa8>)
 800688e:	3a01      	subs	r2, #1
 8006890:	2300      	movs	r3, #0
 8006892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006896:	f7ff fe9d 	bl	80065d4 <__multadd>
 800689a:	4607      	mov	r7, r0
 800689c:	10ad      	asrs	r5, r5, #2
 800689e:	d03d      	beq.n	800691c <__pow5mult+0xa0>
 80068a0:	69f4      	ldr	r4, [r6, #28]
 80068a2:	b97c      	cbnz	r4, 80068c4 <__pow5mult+0x48>
 80068a4:	2010      	movs	r0, #16
 80068a6:	f7ff fd7f 	bl	80063a8 <malloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	61f0      	str	r0, [r6, #28]
 80068ae:	b928      	cbnz	r0, 80068bc <__pow5mult+0x40>
 80068b0:	4b1d      	ldr	r3, [pc, #116]	; (8006928 <__pow5mult+0xac>)
 80068b2:	481e      	ldr	r0, [pc, #120]	; (800692c <__pow5mult+0xb0>)
 80068b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80068b8:	f000 fbe4 	bl	8007084 <__assert_func>
 80068bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068c0:	6004      	str	r4, [r0, #0]
 80068c2:	60c4      	str	r4, [r0, #12]
 80068c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80068c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068cc:	b94c      	cbnz	r4, 80068e2 <__pow5mult+0x66>
 80068ce:	f240 2171 	movw	r1, #625	; 0x271
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7ff ff12 	bl	80066fc <__i2b>
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c8 0008 	str.w	r0, [r8, #8]
 80068de:	4604      	mov	r4, r0
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	07eb      	lsls	r3, r5, #31
 80068e8:	d50a      	bpl.n	8006900 <__pow5mult+0x84>
 80068ea:	4639      	mov	r1, r7
 80068ec:	4622      	mov	r2, r4
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff ff1a 	bl	8006728 <__multiply>
 80068f4:	4639      	mov	r1, r7
 80068f6:	4680      	mov	r8, r0
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7ff fe49 	bl	8006590 <_Bfree>
 80068fe:	4647      	mov	r7, r8
 8006900:	106d      	asrs	r5, r5, #1
 8006902:	d00b      	beq.n	800691c <__pow5mult+0xa0>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	b938      	cbnz	r0, 8006918 <__pow5mult+0x9c>
 8006908:	4622      	mov	r2, r4
 800690a:	4621      	mov	r1, r4
 800690c:	4630      	mov	r0, r6
 800690e:	f7ff ff0b 	bl	8006728 <__multiply>
 8006912:	6020      	str	r0, [r4, #0]
 8006914:	f8c0 9000 	str.w	r9, [r0]
 8006918:	4604      	mov	r4, r0
 800691a:	e7e4      	b.n	80068e6 <__pow5mult+0x6a>
 800691c:	4638      	mov	r0, r7
 800691e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006922:	bf00      	nop
 8006924:	08007f58 	.word	0x08007f58
 8006928:	08007d8d 	.word	0x08007d8d
 800692c:	08007e0d 	.word	0x08007e0d

08006930 <__lshift>:
 8006930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	460c      	mov	r4, r1
 8006936:	6849      	ldr	r1, [r1, #4]
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	4607      	mov	r7, r0
 8006942:	4691      	mov	r9, r2
 8006944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006948:	f108 0601 	add.w	r6, r8, #1
 800694c:	42b3      	cmp	r3, r6
 800694e:	db0b      	blt.n	8006968 <__lshift+0x38>
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff fddd 	bl	8006510 <_Balloc>
 8006956:	4605      	mov	r5, r0
 8006958:	b948      	cbnz	r0, 800696e <__lshift+0x3e>
 800695a:	4602      	mov	r2, r0
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <__lshift+0xd0>)
 800695e:	4829      	ldr	r0, [pc, #164]	; (8006a04 <__lshift+0xd4>)
 8006960:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006964:	f000 fb8e 	bl	8007084 <__assert_func>
 8006968:	3101      	adds	r1, #1
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	e7ee      	b.n	800694c <__lshift+0x1c>
 800696e:	2300      	movs	r3, #0
 8006970:	f100 0114 	add.w	r1, r0, #20
 8006974:	f100 0210 	add.w	r2, r0, #16
 8006978:	4618      	mov	r0, r3
 800697a:	4553      	cmp	r3, sl
 800697c:	db33      	blt.n	80069e6 <__lshift+0xb6>
 800697e:	6920      	ldr	r0, [r4, #16]
 8006980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006984:	f104 0314 	add.w	r3, r4, #20
 8006988:	f019 091f 	ands.w	r9, r9, #31
 800698c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006994:	d02b      	beq.n	80069ee <__lshift+0xbe>
 8006996:	f1c9 0e20 	rsb	lr, r9, #32
 800699a:	468a      	mov	sl, r1
 800699c:	2200      	movs	r2, #0
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	fa00 f009 	lsl.w	r0, r0, r9
 80069a4:	4310      	orrs	r0, r2
 80069a6:	f84a 0b04 	str.w	r0, [sl], #4
 80069aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ae:	459c      	cmp	ip, r3
 80069b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80069b4:	d8f3      	bhi.n	800699e <__lshift+0x6e>
 80069b6:	ebac 0304 	sub.w	r3, ip, r4
 80069ba:	3b15      	subs	r3, #21
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	3304      	adds	r3, #4
 80069c2:	f104 0015 	add.w	r0, r4, #21
 80069c6:	4584      	cmp	ip, r0
 80069c8:	bf38      	it	cc
 80069ca:	2304      	movcc	r3, #4
 80069cc:	50ca      	str	r2, [r1, r3]
 80069ce:	b10a      	cbz	r2, 80069d4 <__lshift+0xa4>
 80069d0:	f108 0602 	add.w	r6, r8, #2
 80069d4:	3e01      	subs	r6, #1
 80069d6:	4638      	mov	r0, r7
 80069d8:	612e      	str	r6, [r5, #16]
 80069da:	4621      	mov	r1, r4
 80069dc:	f7ff fdd8 	bl	8006590 <_Bfree>
 80069e0:	4628      	mov	r0, r5
 80069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80069ea:	3301      	adds	r3, #1
 80069ec:	e7c5      	b.n	800697a <__lshift+0x4a>
 80069ee:	3904      	subs	r1, #4
 80069f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80069f8:	459c      	cmp	ip, r3
 80069fa:	d8f9      	bhi.n	80069f0 <__lshift+0xc0>
 80069fc:	e7ea      	b.n	80069d4 <__lshift+0xa4>
 80069fe:	bf00      	nop
 8006a00:	08007dfc 	.word	0x08007dfc
 8006a04:	08007e0d 	.word	0x08007e0d

08006a08 <__mcmp>:
 8006a08:	b530      	push	{r4, r5, lr}
 8006a0a:	6902      	ldr	r2, [r0, #16]
 8006a0c:	690c      	ldr	r4, [r1, #16]
 8006a0e:	1b12      	subs	r2, r2, r4
 8006a10:	d10e      	bne.n	8006a30 <__mcmp+0x28>
 8006a12:	f100 0314 	add.w	r3, r0, #20
 8006a16:	3114      	adds	r1, #20
 8006a18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a28:	42a5      	cmp	r5, r4
 8006a2a:	d003      	beq.n	8006a34 <__mcmp+0x2c>
 8006a2c:	d305      	bcc.n	8006a3a <__mcmp+0x32>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4610      	mov	r0, r2
 8006a32:	bd30      	pop	{r4, r5, pc}
 8006a34:	4283      	cmp	r3, r0
 8006a36:	d3f3      	bcc.n	8006a20 <__mcmp+0x18>
 8006a38:	e7fa      	b.n	8006a30 <__mcmp+0x28>
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3e:	e7f7      	b.n	8006a30 <__mcmp+0x28>

08006a40 <__mdiff>:
 8006a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	460c      	mov	r4, r1
 8006a46:	4606      	mov	r6, r0
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4690      	mov	r8, r2
 8006a4e:	f7ff ffdb 	bl	8006a08 <__mcmp>
 8006a52:	1e05      	subs	r5, r0, #0
 8006a54:	d110      	bne.n	8006a78 <__mdiff+0x38>
 8006a56:	4629      	mov	r1, r5
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff fd59 	bl	8006510 <_Balloc>
 8006a5e:	b930      	cbnz	r0, 8006a6e <__mdiff+0x2e>
 8006a60:	4b3a      	ldr	r3, [pc, #232]	; (8006b4c <__mdiff+0x10c>)
 8006a62:	4602      	mov	r2, r0
 8006a64:	f240 2137 	movw	r1, #567	; 0x237
 8006a68:	4839      	ldr	r0, [pc, #228]	; (8006b50 <__mdiff+0x110>)
 8006a6a:	f000 fb0b 	bl	8007084 <__assert_func>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	bfa4      	itt	ge
 8006a7a:	4643      	movge	r3, r8
 8006a7c:	46a0      	movge	r8, r4
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a84:	bfa6      	itte	ge
 8006a86:	461c      	movge	r4, r3
 8006a88:	2500      	movge	r5, #0
 8006a8a:	2501      	movlt	r5, #1
 8006a8c:	f7ff fd40 	bl	8006510 <_Balloc>
 8006a90:	b920      	cbnz	r0, 8006a9c <__mdiff+0x5c>
 8006a92:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <__mdiff+0x10c>)
 8006a94:	4602      	mov	r2, r0
 8006a96:	f240 2145 	movw	r1, #581	; 0x245
 8006a9a:	e7e5      	b.n	8006a68 <__mdiff+0x28>
 8006a9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006aa0:	6926      	ldr	r6, [r4, #16]
 8006aa2:	60c5      	str	r5, [r0, #12]
 8006aa4:	f104 0914 	add.w	r9, r4, #20
 8006aa8:	f108 0514 	add.w	r5, r8, #20
 8006aac:	f100 0e14 	add.w	lr, r0, #20
 8006ab0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ab4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ab8:	f108 0210 	add.w	r2, r8, #16
 8006abc:	46f2      	mov	sl, lr
 8006abe:	2100      	movs	r1, #0
 8006ac0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ac8:	fa11 f88b 	uxtah	r8, r1, fp
 8006acc:	b299      	uxth	r1, r3
 8006ace:	0c1b      	lsrs	r3, r3, #16
 8006ad0:	eba8 0801 	sub.w	r8, r8, r1
 8006ad4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ad8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006adc:	fa1f f888 	uxth.w	r8, r8
 8006ae0:	1419      	asrs	r1, r3, #16
 8006ae2:	454e      	cmp	r6, r9
 8006ae4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ae8:	f84a 3b04 	str.w	r3, [sl], #4
 8006aec:	d8e8      	bhi.n	8006ac0 <__mdiff+0x80>
 8006aee:	1b33      	subs	r3, r6, r4
 8006af0:	3b15      	subs	r3, #21
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	3304      	adds	r3, #4
 8006af8:	3415      	adds	r4, #21
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	bf38      	it	cc
 8006afe:	2304      	movcc	r3, #4
 8006b00:	441d      	add	r5, r3
 8006b02:	4473      	add	r3, lr
 8006b04:	469e      	mov	lr, r3
 8006b06:	462e      	mov	r6, r5
 8006b08:	4566      	cmp	r6, ip
 8006b0a:	d30e      	bcc.n	8006b2a <__mdiff+0xea>
 8006b0c:	f10c 0203 	add.w	r2, ip, #3
 8006b10:	1b52      	subs	r2, r2, r5
 8006b12:	f022 0203 	bic.w	r2, r2, #3
 8006b16:	3d03      	subs	r5, #3
 8006b18:	45ac      	cmp	ip, r5
 8006b1a:	bf38      	it	cc
 8006b1c:	2200      	movcc	r2, #0
 8006b1e:	4413      	add	r3, r2
 8006b20:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006b24:	b17a      	cbz	r2, 8006b46 <__mdiff+0x106>
 8006b26:	6107      	str	r7, [r0, #16]
 8006b28:	e7a4      	b.n	8006a74 <__mdiff+0x34>
 8006b2a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b2e:	fa11 f288 	uxtah	r2, r1, r8
 8006b32:	1414      	asrs	r4, r2, #16
 8006b34:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b3e:	f84e 2b04 	str.w	r2, [lr], #4
 8006b42:	1421      	asrs	r1, r4, #16
 8006b44:	e7e0      	b.n	8006b08 <__mdiff+0xc8>
 8006b46:	3f01      	subs	r7, #1
 8006b48:	e7ea      	b.n	8006b20 <__mdiff+0xe0>
 8006b4a:	bf00      	nop
 8006b4c:	08007dfc 	.word	0x08007dfc
 8006b50:	08007e0d 	.word	0x08007e0d

08006b54 <__d2b>:
 8006b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b58:	460f      	mov	r7, r1
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	ec59 8b10 	vmov	r8, r9, d0
 8006b60:	4616      	mov	r6, r2
 8006b62:	f7ff fcd5 	bl	8006510 <_Balloc>
 8006b66:	4604      	mov	r4, r0
 8006b68:	b930      	cbnz	r0, 8006b78 <__d2b+0x24>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4b24      	ldr	r3, [pc, #144]	; (8006c00 <__d2b+0xac>)
 8006b6e:	4825      	ldr	r0, [pc, #148]	; (8006c04 <__d2b+0xb0>)
 8006b70:	f240 310f 	movw	r1, #783	; 0x30f
 8006b74:	f000 fa86 	bl	8007084 <__assert_func>
 8006b78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b80:	bb2d      	cbnz	r5, 8006bce <__d2b+0x7a>
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	f1b8 0300 	subs.w	r3, r8, #0
 8006b88:	d026      	beq.n	8006bd8 <__d2b+0x84>
 8006b8a:	4668      	mov	r0, sp
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	f7ff fd87 	bl	80066a0 <__lo0bits>
 8006b92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b96:	b1e8      	cbz	r0, 8006bd4 <__d2b+0x80>
 8006b98:	f1c0 0320 	rsb	r3, r0, #32
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	40c2      	lsrs	r2, r0
 8006ba4:	6163      	str	r3, [r4, #20]
 8006ba6:	9201      	str	r2, [sp, #4]
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	61a3      	str	r3, [r4, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf14      	ite	ne
 8006bb0:	2202      	movne	r2, #2
 8006bb2:	2201      	moveq	r2, #1
 8006bb4:	6122      	str	r2, [r4, #16]
 8006bb6:	b1bd      	cbz	r5, 8006be8 <__d2b+0x94>
 8006bb8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bbc:	4405      	add	r5, r0
 8006bbe:	603d      	str	r5, [r7, #0]
 8006bc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bc4:	6030      	str	r0, [r6, #0]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	b003      	add	sp, #12
 8006bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd2:	e7d6      	b.n	8006b82 <__d2b+0x2e>
 8006bd4:	6161      	str	r1, [r4, #20]
 8006bd6:	e7e7      	b.n	8006ba8 <__d2b+0x54>
 8006bd8:	a801      	add	r0, sp, #4
 8006bda:	f7ff fd61 	bl	80066a0 <__lo0bits>
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	6163      	str	r3, [r4, #20]
 8006be2:	3020      	adds	r0, #32
 8006be4:	2201      	movs	r2, #1
 8006be6:	e7e5      	b.n	8006bb4 <__d2b+0x60>
 8006be8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bf0:	6038      	str	r0, [r7, #0]
 8006bf2:	6918      	ldr	r0, [r3, #16]
 8006bf4:	f7ff fd34 	bl	8006660 <__hi0bits>
 8006bf8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bfc:	e7e2      	b.n	8006bc4 <__d2b+0x70>
 8006bfe:	bf00      	nop
 8006c00:	08007dfc 	.word	0x08007dfc
 8006c04:	08007e0d 	.word	0x08007e0d

08006c08 <__ssputs_r>:
 8006c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	688e      	ldr	r6, [r1, #8]
 8006c0e:	461f      	mov	r7, r3
 8006c10:	42be      	cmp	r6, r7
 8006c12:	680b      	ldr	r3, [r1, #0]
 8006c14:	4682      	mov	sl, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	4690      	mov	r8, r2
 8006c1a:	d82c      	bhi.n	8006c76 <__ssputs_r+0x6e>
 8006c1c:	898a      	ldrh	r2, [r1, #12]
 8006c1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c22:	d026      	beq.n	8006c72 <__ssputs_r+0x6a>
 8006c24:	6965      	ldr	r5, [r4, #20]
 8006c26:	6909      	ldr	r1, [r1, #16]
 8006c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c2c:	eba3 0901 	sub.w	r9, r3, r1
 8006c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c34:	1c7b      	adds	r3, r7, #1
 8006c36:	444b      	add	r3, r9
 8006c38:	106d      	asrs	r5, r5, #1
 8006c3a:	429d      	cmp	r5, r3
 8006c3c:	bf38      	it	cc
 8006c3e:	461d      	movcc	r5, r3
 8006c40:	0553      	lsls	r3, r2, #21
 8006c42:	d527      	bpl.n	8006c94 <__ssputs_r+0x8c>
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7ff fbd7 	bl	80063f8 <_malloc_r>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	b360      	cbz	r0, 8006ca8 <__ssputs_r+0xa0>
 8006c4e:	6921      	ldr	r1, [r4, #16]
 8006c50:	464a      	mov	r2, r9
 8006c52:	f000 fa09 	bl	8007068 <memcpy>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	6126      	str	r6, [r4, #16]
 8006c64:	6165      	str	r5, [r4, #20]
 8006c66:	444e      	add	r6, r9
 8006c68:	eba5 0509 	sub.w	r5, r5, r9
 8006c6c:	6026      	str	r6, [r4, #0]
 8006c6e:	60a5      	str	r5, [r4, #8]
 8006c70:	463e      	mov	r6, r7
 8006c72:	42be      	cmp	r6, r7
 8006c74:	d900      	bls.n	8006c78 <__ssputs_r+0x70>
 8006c76:	463e      	mov	r6, r7
 8006c78:	6820      	ldr	r0, [r4, #0]
 8006c7a:	4632      	mov	r2, r6
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	f000 f9c9 	bl	8007014 <memmove>
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	1b9b      	subs	r3, r3, r6
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	4433      	add	r3, r6
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	462a      	mov	r2, r5
 8006c96:	f000 fa3b 	bl	8007110 <_realloc_r>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d1e0      	bne.n	8006c62 <__ssputs_r+0x5a>
 8006ca0:	6921      	ldr	r1, [r4, #16]
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	f7ff fb34 	bl	8006310 <_free_r>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	f8ca 3000 	str.w	r3, [sl]
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cba:	e7e9      	b.n	8006c90 <__ssputs_r+0x88>

08006cbc <_svfiprintf_r>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	898b      	ldrh	r3, [r1, #12]
 8006cc4:	061b      	lsls	r3, r3, #24
 8006cc6:	b09d      	sub	sp, #116	; 0x74
 8006cc8:	4607      	mov	r7, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	4614      	mov	r4, r2
 8006cce:	d50e      	bpl.n	8006cee <_svfiprintf_r+0x32>
 8006cd0:	690b      	ldr	r3, [r1, #16]
 8006cd2:	b963      	cbnz	r3, 8006cee <_svfiprintf_r+0x32>
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	f7ff fb8f 	bl	80063f8 <_malloc_r>
 8006cda:	6028      	str	r0, [r5, #0]
 8006cdc:	6128      	str	r0, [r5, #16]
 8006cde:	b920      	cbnz	r0, 8006cea <_svfiprintf_r+0x2e>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e0d0      	b.n	8006e8c <_svfiprintf_r+0x1d0>
 8006cea:	2340      	movs	r3, #64	; 0x40
 8006cec:	616b      	str	r3, [r5, #20]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfc:	2330      	movs	r3, #48	; 0x30
 8006cfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ea4 <_svfiprintf_r+0x1e8>
 8006d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d06:	f04f 0901 	mov.w	r9, #1
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	469a      	mov	sl, r3
 8006d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d12:	b10a      	cbz	r2, 8006d18 <_svfiprintf_r+0x5c>
 8006d14:	2a25      	cmp	r2, #37	; 0x25
 8006d16:	d1f9      	bne.n	8006d0c <_svfiprintf_r+0x50>
 8006d18:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1c:	d00b      	beq.n	8006d36 <_svfiprintf_r+0x7a>
 8006d1e:	465b      	mov	r3, fp
 8006d20:	4622      	mov	r2, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff ff6f 	bl	8006c08 <__ssputs_r>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f000 80a9 	beq.w	8006e82 <_svfiprintf_r+0x1c6>
 8006d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d32:	445a      	add	r2, fp
 8006d34:	9209      	str	r2, [sp, #36]	; 0x24
 8006d36:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80a1 	beq.w	8006e82 <_svfiprintf_r+0x1c6>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4a:	f10a 0a01 	add.w	sl, sl, #1
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	9307      	str	r3, [sp, #28]
 8006d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d56:	931a      	str	r3, [sp, #104]	; 0x68
 8006d58:	4654      	mov	r4, sl
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	4850      	ldr	r0, [pc, #320]	; (8006ea4 <_svfiprintf_r+0x1e8>)
 8006d62:	f7f9 fa6d 	bl	8000240 <memchr>
 8006d66:	9a04      	ldr	r2, [sp, #16]
 8006d68:	b9d8      	cbnz	r0, 8006da2 <_svfiprintf_r+0xe6>
 8006d6a:	06d0      	lsls	r0, r2, #27
 8006d6c:	bf44      	itt	mi
 8006d6e:	2320      	movmi	r3, #32
 8006d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d74:	0711      	lsls	r1, r2, #28
 8006d76:	bf44      	itt	mi
 8006d78:	232b      	movmi	r3, #43	; 0x2b
 8006d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d82:	2b2a      	cmp	r3, #42	; 0x2a
 8006d84:	d015      	beq.n	8006db2 <_svfiprintf_r+0xf6>
 8006d86:	9a07      	ldr	r2, [sp, #28]
 8006d88:	4654      	mov	r4, sl
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f04f 0c0a 	mov.w	ip, #10
 8006d90:	4621      	mov	r1, r4
 8006d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d96:	3b30      	subs	r3, #48	; 0x30
 8006d98:	2b09      	cmp	r3, #9
 8006d9a:	d94d      	bls.n	8006e38 <_svfiprintf_r+0x17c>
 8006d9c:	b1b0      	cbz	r0, 8006dcc <_svfiprintf_r+0x110>
 8006d9e:	9207      	str	r2, [sp, #28]
 8006da0:	e014      	b.n	8006dcc <_svfiprintf_r+0x110>
 8006da2:	eba0 0308 	sub.w	r3, r0, r8
 8006da6:	fa09 f303 	lsl.w	r3, r9, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	46a2      	mov	sl, r4
 8006db0:	e7d2      	b.n	8006d58 <_svfiprintf_r+0x9c>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	1d19      	adds	r1, r3, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	9103      	str	r1, [sp, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfbb      	ittet	lt
 8006dbe:	425b      	neglt	r3, r3
 8006dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc4:	9307      	strge	r3, [sp, #28]
 8006dc6:	9307      	strlt	r3, [sp, #28]
 8006dc8:	bfb8      	it	lt
 8006dca:	9204      	strlt	r2, [sp, #16]
 8006dcc:	7823      	ldrb	r3, [r4, #0]
 8006dce:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd0:	d10c      	bne.n	8006dec <_svfiprintf_r+0x130>
 8006dd2:	7863      	ldrb	r3, [r4, #1]
 8006dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd6:	d134      	bne.n	8006e42 <_svfiprintf_r+0x186>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	9203      	str	r2, [sp, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfb8      	it	lt
 8006de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006de8:	3402      	adds	r4, #2
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006eb4 <_svfiprintf_r+0x1f8>
 8006df0:	7821      	ldrb	r1, [r4, #0]
 8006df2:	2203      	movs	r2, #3
 8006df4:	4650      	mov	r0, sl
 8006df6:	f7f9 fa23 	bl	8000240 <memchr>
 8006dfa:	b138      	cbz	r0, 8006e0c <_svfiprintf_r+0x150>
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	eba0 000a 	sub.w	r0, r0, sl
 8006e02:	2240      	movs	r2, #64	; 0x40
 8006e04:	4082      	lsls	r2, r0
 8006e06:	4313      	orrs	r3, r2
 8006e08:	3401      	adds	r4, #1
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e10:	4825      	ldr	r0, [pc, #148]	; (8006ea8 <_svfiprintf_r+0x1ec>)
 8006e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e16:	2206      	movs	r2, #6
 8006e18:	f7f9 fa12 	bl	8000240 <memchr>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d038      	beq.n	8006e92 <_svfiprintf_r+0x1d6>
 8006e20:	4b22      	ldr	r3, [pc, #136]	; (8006eac <_svfiprintf_r+0x1f0>)
 8006e22:	bb1b      	cbnz	r3, 8006e6c <_svfiprintf_r+0x1b0>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	3307      	adds	r3, #7
 8006e28:	f023 0307 	bic.w	r3, r3, #7
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	9303      	str	r3, [sp, #12]
 8006e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e32:	4433      	add	r3, r6
 8006e34:	9309      	str	r3, [sp, #36]	; 0x24
 8006e36:	e768      	b.n	8006d0a <_svfiprintf_r+0x4e>
 8006e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	2001      	movs	r0, #1
 8006e40:	e7a6      	b.n	8006d90 <_svfiprintf_r+0xd4>
 8006e42:	2300      	movs	r3, #0
 8006e44:	3401      	adds	r4, #1
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	f04f 0c0a 	mov.w	ip, #10
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e54:	3a30      	subs	r2, #48	; 0x30
 8006e56:	2a09      	cmp	r2, #9
 8006e58:	d903      	bls.n	8006e62 <_svfiprintf_r+0x1a6>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0c6      	beq.n	8006dec <_svfiprintf_r+0x130>
 8006e5e:	9105      	str	r1, [sp, #20]
 8006e60:	e7c4      	b.n	8006dec <_svfiprintf_r+0x130>
 8006e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e66:	4604      	mov	r4, r0
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e7f0      	b.n	8006e4e <_svfiprintf_r+0x192>
 8006e6c:	ab03      	add	r3, sp, #12
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	462a      	mov	r2, r5
 8006e72:	4b0f      	ldr	r3, [pc, #60]	; (8006eb0 <_svfiprintf_r+0x1f4>)
 8006e74:	a904      	add	r1, sp, #16
 8006e76:	4638      	mov	r0, r7
 8006e78:	f7fd ff06 	bl	8004c88 <_printf_float>
 8006e7c:	1c42      	adds	r2, r0, #1
 8006e7e:	4606      	mov	r6, r0
 8006e80:	d1d6      	bne.n	8006e30 <_svfiprintf_r+0x174>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	065b      	lsls	r3, r3, #25
 8006e86:	f53f af2d 	bmi.w	8006ce4 <_svfiprintf_r+0x28>
 8006e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e8c:	b01d      	add	sp, #116	; 0x74
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	ab03      	add	r3, sp, #12
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	462a      	mov	r2, r5
 8006e98:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <_svfiprintf_r+0x1f4>)
 8006e9a:	a904      	add	r1, sp, #16
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f7fe f97b 	bl	8005198 <_printf_i>
 8006ea2:	e7eb      	b.n	8006e7c <_svfiprintf_r+0x1c0>
 8006ea4:	08007f64 	.word	0x08007f64
 8006ea8:	08007f6e 	.word	0x08007f6e
 8006eac:	08004c89 	.word	0x08004c89
 8006eb0:	08006c09 	.word	0x08006c09
 8006eb4:	08007f6a 	.word	0x08007f6a

08006eb8 <__sflush_r>:
 8006eb8:	898a      	ldrh	r2, [r1, #12]
 8006eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	0710      	lsls	r0, r2, #28
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	d458      	bmi.n	8006f78 <__sflush_r+0xc0>
 8006ec6:	684b      	ldr	r3, [r1, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dc05      	bgt.n	8006ed8 <__sflush_r+0x20>
 8006ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dc02      	bgt.n	8006ed8 <__sflush_r+0x20>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d0f9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ee4:	682f      	ldr	r7, [r5, #0]
 8006ee6:	6a21      	ldr	r1, [r4, #32]
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	d032      	beq.n	8006f52 <__sflush_r+0x9a>
 8006eec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	075a      	lsls	r2, r3, #29
 8006ef2:	d505      	bpl.n	8006f00 <__sflush_r+0x48>
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	1ac0      	subs	r0, r0, r3
 8006ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006efa:	b10b      	cbz	r3, 8006f00 <__sflush_r+0x48>
 8006efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006efe:	1ac0      	subs	r0, r0, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	4602      	mov	r2, r0
 8006f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f06:	6a21      	ldr	r1, [r4, #32]
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b0      	blx	r6
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	d106      	bne.n	8006f20 <__sflush_r+0x68>
 8006f12:	6829      	ldr	r1, [r5, #0]
 8006f14:	291d      	cmp	r1, #29
 8006f16:	d82b      	bhi.n	8006f70 <__sflush_r+0xb8>
 8006f18:	4a29      	ldr	r2, [pc, #164]	; (8006fc0 <__sflush_r+0x108>)
 8006f1a:	410a      	asrs	r2, r1
 8006f1c:	07d6      	lsls	r6, r2, #31
 8006f1e:	d427      	bmi.n	8006f70 <__sflush_r+0xb8>
 8006f20:	2200      	movs	r2, #0
 8006f22:	6062      	str	r2, [r4, #4]
 8006f24:	04d9      	lsls	r1, r3, #19
 8006f26:	6922      	ldr	r2, [r4, #16]
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	d504      	bpl.n	8006f36 <__sflush_r+0x7e>
 8006f2c:	1c42      	adds	r2, r0, #1
 8006f2e:	d101      	bne.n	8006f34 <__sflush_r+0x7c>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b903      	cbnz	r3, 8006f36 <__sflush_r+0x7e>
 8006f34:	6560      	str	r0, [r4, #84]	; 0x54
 8006f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f38:	602f      	str	r7, [r5, #0]
 8006f3a:	2900      	cmp	r1, #0
 8006f3c:	d0c9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f42:	4299      	cmp	r1, r3
 8006f44:	d002      	beq.n	8006f4c <__sflush_r+0x94>
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7ff f9e2 	bl	8006310 <_free_r>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	6360      	str	r0, [r4, #52]	; 0x34
 8006f50:	e7c0      	b.n	8006ed4 <__sflush_r+0x1c>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b0      	blx	r6
 8006f58:	1c41      	adds	r1, r0, #1
 8006f5a:	d1c8      	bne.n	8006eee <__sflush_r+0x36>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0c5      	beq.n	8006eee <__sflush_r+0x36>
 8006f62:	2b1d      	cmp	r3, #29
 8006f64:	d001      	beq.n	8006f6a <__sflush_r+0xb2>
 8006f66:	2b16      	cmp	r3, #22
 8006f68:	d101      	bne.n	8006f6e <__sflush_r+0xb6>
 8006f6a:	602f      	str	r7, [r5, #0]
 8006f6c:	e7b1      	b.n	8006ed2 <__sflush_r+0x1a>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	e7ad      	b.n	8006ed4 <__sflush_r+0x1c>
 8006f78:	690f      	ldr	r7, [r1, #16]
 8006f7a:	2f00      	cmp	r7, #0
 8006f7c:	d0a9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006f7e:	0793      	lsls	r3, r2, #30
 8006f80:	680e      	ldr	r6, [r1, #0]
 8006f82:	bf08      	it	eq
 8006f84:	694b      	ldreq	r3, [r1, #20]
 8006f86:	600f      	str	r7, [r1, #0]
 8006f88:	bf18      	it	ne
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	eba6 0807 	sub.w	r8, r6, r7
 8006f90:	608b      	str	r3, [r1, #8]
 8006f92:	f1b8 0f00 	cmp.w	r8, #0
 8006f96:	dd9c      	ble.n	8006ed2 <__sflush_r+0x1a>
 8006f98:	6a21      	ldr	r1, [r4, #32]
 8006f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	463a      	mov	r2, r7
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b0      	blx	r6
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	dc06      	bgt.n	8006fb6 <__sflush_r+0xfe>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e78e      	b.n	8006ed4 <__sflush_r+0x1c>
 8006fb6:	4407      	add	r7, r0
 8006fb8:	eba8 0800 	sub.w	r8, r8, r0
 8006fbc:	e7e9      	b.n	8006f92 <__sflush_r+0xda>
 8006fbe:	bf00      	nop
 8006fc0:	dfbffffe 	.word	0xdfbffffe

08006fc4 <_fflush_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	690b      	ldr	r3, [r1, #16]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b913      	cbnz	r3, 8006fd4 <_fflush_r+0x10>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	b118      	cbz	r0, 8006fde <_fflush_r+0x1a>
 8006fd6:	6a03      	ldr	r3, [r0, #32]
 8006fd8:	b90b      	cbnz	r3, 8006fde <_fflush_r+0x1a>
 8006fda:	f7fe fa8b 	bl	80054f4 <__sinit>
 8006fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f3      	beq.n	8006fce <_fflush_r+0xa>
 8006fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fe8:	07d0      	lsls	r0, r2, #31
 8006fea:	d404      	bmi.n	8006ff6 <_fflush_r+0x32>
 8006fec:	0599      	lsls	r1, r3, #22
 8006fee:	d402      	bmi.n	8006ff6 <_fflush_r+0x32>
 8006ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ff2:	f7fe fb96 	bl	8005722 <__retarget_lock_acquire_recursive>
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f7ff ff5d 	bl	8006eb8 <__sflush_r>
 8006ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007000:	07da      	lsls	r2, r3, #31
 8007002:	4605      	mov	r5, r0
 8007004:	d4e4      	bmi.n	8006fd0 <_fflush_r+0xc>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	059b      	lsls	r3, r3, #22
 800700a:	d4e1      	bmi.n	8006fd0 <_fflush_r+0xc>
 800700c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800700e:	f7fe fb89 	bl	8005724 <__retarget_lock_release_recursive>
 8007012:	e7dd      	b.n	8006fd0 <_fflush_r+0xc>

08007014 <memmove>:
 8007014:	4288      	cmp	r0, r1
 8007016:	b510      	push	{r4, lr}
 8007018:	eb01 0402 	add.w	r4, r1, r2
 800701c:	d902      	bls.n	8007024 <memmove+0x10>
 800701e:	4284      	cmp	r4, r0
 8007020:	4623      	mov	r3, r4
 8007022:	d807      	bhi.n	8007034 <memmove+0x20>
 8007024:	1e43      	subs	r3, r0, #1
 8007026:	42a1      	cmp	r1, r4
 8007028:	d008      	beq.n	800703c <memmove+0x28>
 800702a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800702e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007032:	e7f8      	b.n	8007026 <memmove+0x12>
 8007034:	4402      	add	r2, r0
 8007036:	4601      	mov	r1, r0
 8007038:	428a      	cmp	r2, r1
 800703a:	d100      	bne.n	800703e <memmove+0x2a>
 800703c:	bd10      	pop	{r4, pc}
 800703e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007046:	e7f7      	b.n	8007038 <memmove+0x24>

08007048 <_sbrk_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	; (8007064 <_sbrk_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fa f846 	bl	80010e4 <_sbrk>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_sbrk_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_sbrk_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000b44 	.word	0x20000b44

08007068 <memcpy>:
 8007068:	440a      	add	r2, r1
 800706a:	4291      	cmp	r1, r2
 800706c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007070:	d100      	bne.n	8007074 <memcpy+0xc>
 8007072:	4770      	bx	lr
 8007074:	b510      	push	{r4, lr}
 8007076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800707a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800707e:	4291      	cmp	r1, r2
 8007080:	d1f9      	bne.n	8007076 <memcpy+0xe>
 8007082:	bd10      	pop	{r4, pc}

08007084 <__assert_func>:
 8007084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007086:	4614      	mov	r4, r2
 8007088:	461a      	mov	r2, r3
 800708a:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <__assert_func+0x2c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4605      	mov	r5, r0
 8007090:	68d8      	ldr	r0, [r3, #12]
 8007092:	b14c      	cbz	r4, 80070a8 <__assert_func+0x24>
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <__assert_func+0x30>)
 8007096:	9100      	str	r1, [sp, #0]
 8007098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800709c:	4906      	ldr	r1, [pc, #24]	; (80070b8 <__assert_func+0x34>)
 800709e:	462b      	mov	r3, r5
 80070a0:	f000 f872 	bl	8007188 <fiprintf>
 80070a4:	f000 f882 	bl	80071ac <abort>
 80070a8:	4b04      	ldr	r3, [pc, #16]	; (80070bc <__assert_func+0x38>)
 80070aa:	461c      	mov	r4, r3
 80070ac:	e7f3      	b.n	8007096 <__assert_func+0x12>
 80070ae:	bf00      	nop
 80070b0:	20000064 	.word	0x20000064
 80070b4:	08007f7f 	.word	0x08007f7f
 80070b8:	08007f8c 	.word	0x08007f8c
 80070bc:	08007fba 	.word	0x08007fba

080070c0 <_calloc_r>:
 80070c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070c2:	fba1 2402 	umull	r2, r4, r1, r2
 80070c6:	b94c      	cbnz	r4, 80070dc <_calloc_r+0x1c>
 80070c8:	4611      	mov	r1, r2
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	f7ff f994 	bl	80063f8 <_malloc_r>
 80070d0:	9a01      	ldr	r2, [sp, #4]
 80070d2:	4605      	mov	r5, r0
 80070d4:	b930      	cbnz	r0, 80070e4 <_calloc_r+0x24>
 80070d6:	4628      	mov	r0, r5
 80070d8:	b003      	add	sp, #12
 80070da:	bd30      	pop	{r4, r5, pc}
 80070dc:	220c      	movs	r2, #12
 80070de:	6002      	str	r2, [r0, #0]
 80070e0:	2500      	movs	r5, #0
 80070e2:	e7f8      	b.n	80070d6 <_calloc_r+0x16>
 80070e4:	4621      	mov	r1, r4
 80070e6:	f7fe fa9e 	bl	8005626 <memset>
 80070ea:	e7f4      	b.n	80070d6 <_calloc_r+0x16>

080070ec <__ascii_mbtowc>:
 80070ec:	b082      	sub	sp, #8
 80070ee:	b901      	cbnz	r1, 80070f2 <__ascii_mbtowc+0x6>
 80070f0:	a901      	add	r1, sp, #4
 80070f2:	b142      	cbz	r2, 8007106 <__ascii_mbtowc+0x1a>
 80070f4:	b14b      	cbz	r3, 800710a <__ascii_mbtowc+0x1e>
 80070f6:	7813      	ldrb	r3, [r2, #0]
 80070f8:	600b      	str	r3, [r1, #0]
 80070fa:	7812      	ldrb	r2, [r2, #0]
 80070fc:	1e10      	subs	r0, r2, #0
 80070fe:	bf18      	it	ne
 8007100:	2001      	movne	r0, #1
 8007102:	b002      	add	sp, #8
 8007104:	4770      	bx	lr
 8007106:	4610      	mov	r0, r2
 8007108:	e7fb      	b.n	8007102 <__ascii_mbtowc+0x16>
 800710a:	f06f 0001 	mvn.w	r0, #1
 800710e:	e7f8      	b.n	8007102 <__ascii_mbtowc+0x16>

08007110 <_realloc_r>:
 8007110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007114:	4680      	mov	r8, r0
 8007116:	4614      	mov	r4, r2
 8007118:	460e      	mov	r6, r1
 800711a:	b921      	cbnz	r1, 8007126 <_realloc_r+0x16>
 800711c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007120:	4611      	mov	r1, r2
 8007122:	f7ff b969 	b.w	80063f8 <_malloc_r>
 8007126:	b92a      	cbnz	r2, 8007134 <_realloc_r+0x24>
 8007128:	f7ff f8f2 	bl	8006310 <_free_r>
 800712c:	4625      	mov	r5, r4
 800712e:	4628      	mov	r0, r5
 8007130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007134:	f000 f841 	bl	80071ba <_malloc_usable_size_r>
 8007138:	4284      	cmp	r4, r0
 800713a:	4607      	mov	r7, r0
 800713c:	d802      	bhi.n	8007144 <_realloc_r+0x34>
 800713e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007142:	d812      	bhi.n	800716a <_realloc_r+0x5a>
 8007144:	4621      	mov	r1, r4
 8007146:	4640      	mov	r0, r8
 8007148:	f7ff f956 	bl	80063f8 <_malloc_r>
 800714c:	4605      	mov	r5, r0
 800714e:	2800      	cmp	r0, #0
 8007150:	d0ed      	beq.n	800712e <_realloc_r+0x1e>
 8007152:	42bc      	cmp	r4, r7
 8007154:	4622      	mov	r2, r4
 8007156:	4631      	mov	r1, r6
 8007158:	bf28      	it	cs
 800715a:	463a      	movcs	r2, r7
 800715c:	f7ff ff84 	bl	8007068 <memcpy>
 8007160:	4631      	mov	r1, r6
 8007162:	4640      	mov	r0, r8
 8007164:	f7ff f8d4 	bl	8006310 <_free_r>
 8007168:	e7e1      	b.n	800712e <_realloc_r+0x1e>
 800716a:	4635      	mov	r5, r6
 800716c:	e7df      	b.n	800712e <_realloc_r+0x1e>

0800716e <__ascii_wctomb>:
 800716e:	b149      	cbz	r1, 8007184 <__ascii_wctomb+0x16>
 8007170:	2aff      	cmp	r2, #255	; 0xff
 8007172:	bf85      	ittet	hi
 8007174:	238a      	movhi	r3, #138	; 0x8a
 8007176:	6003      	strhi	r3, [r0, #0]
 8007178:	700a      	strbls	r2, [r1, #0]
 800717a:	f04f 30ff 	movhi.w	r0, #4294967295
 800717e:	bf98      	it	ls
 8007180:	2001      	movls	r0, #1
 8007182:	4770      	bx	lr
 8007184:	4608      	mov	r0, r1
 8007186:	4770      	bx	lr

08007188 <fiprintf>:
 8007188:	b40e      	push	{r1, r2, r3}
 800718a:	b503      	push	{r0, r1, lr}
 800718c:	4601      	mov	r1, r0
 800718e:	ab03      	add	r3, sp, #12
 8007190:	4805      	ldr	r0, [pc, #20]	; (80071a8 <fiprintf+0x20>)
 8007192:	f853 2b04 	ldr.w	r2, [r3], #4
 8007196:	6800      	ldr	r0, [r0, #0]
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	f000 f83f 	bl	800721c <_vfiprintf_r>
 800719e:	b002      	add	sp, #8
 80071a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a4:	b003      	add	sp, #12
 80071a6:	4770      	bx	lr
 80071a8:	20000064 	.word	0x20000064

080071ac <abort>:
 80071ac:	b508      	push	{r3, lr}
 80071ae:	2006      	movs	r0, #6
 80071b0:	f000 fa0c 	bl	80075cc <raise>
 80071b4:	2001      	movs	r0, #1
 80071b6:	f7f9 ff1d 	bl	8000ff4 <_exit>

080071ba <_malloc_usable_size_r>:
 80071ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071be:	1f18      	subs	r0, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbc      	itt	lt
 80071c4:	580b      	ldrlt	r3, [r1, r0]
 80071c6:	18c0      	addlt	r0, r0, r3
 80071c8:	4770      	bx	lr

080071ca <__sfputc_r>:
 80071ca:	6893      	ldr	r3, [r2, #8]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	b410      	push	{r4}
 80071d2:	6093      	str	r3, [r2, #8]
 80071d4:	da08      	bge.n	80071e8 <__sfputc_r+0x1e>
 80071d6:	6994      	ldr	r4, [r2, #24]
 80071d8:	42a3      	cmp	r3, r4
 80071da:	db01      	blt.n	80071e0 <__sfputc_r+0x16>
 80071dc:	290a      	cmp	r1, #10
 80071de:	d103      	bne.n	80071e8 <__sfputc_r+0x1e>
 80071e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e4:	f000 b934 	b.w	8007450 <__swbuf_r>
 80071e8:	6813      	ldr	r3, [r2, #0]
 80071ea:	1c58      	adds	r0, r3, #1
 80071ec:	6010      	str	r0, [r2, #0]
 80071ee:	7019      	strb	r1, [r3, #0]
 80071f0:	4608      	mov	r0, r1
 80071f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <__sfputs_r>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	4606      	mov	r6, r0
 80071fc:	460f      	mov	r7, r1
 80071fe:	4614      	mov	r4, r2
 8007200:	18d5      	adds	r5, r2, r3
 8007202:	42ac      	cmp	r4, r5
 8007204:	d101      	bne.n	800720a <__sfputs_r+0x12>
 8007206:	2000      	movs	r0, #0
 8007208:	e007      	b.n	800721a <__sfputs_r+0x22>
 800720a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800720e:	463a      	mov	r2, r7
 8007210:	4630      	mov	r0, r6
 8007212:	f7ff ffda 	bl	80071ca <__sfputc_r>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d1f3      	bne.n	8007202 <__sfputs_r+0xa>
 800721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800721c <_vfiprintf_r>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	460d      	mov	r5, r1
 8007222:	b09d      	sub	sp, #116	; 0x74
 8007224:	4614      	mov	r4, r2
 8007226:	4698      	mov	r8, r3
 8007228:	4606      	mov	r6, r0
 800722a:	b118      	cbz	r0, 8007234 <_vfiprintf_r+0x18>
 800722c:	6a03      	ldr	r3, [r0, #32]
 800722e:	b90b      	cbnz	r3, 8007234 <_vfiprintf_r+0x18>
 8007230:	f7fe f960 	bl	80054f4 <__sinit>
 8007234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007236:	07d9      	lsls	r1, r3, #31
 8007238:	d405      	bmi.n	8007246 <_vfiprintf_r+0x2a>
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	059a      	lsls	r2, r3, #22
 800723e:	d402      	bmi.n	8007246 <_vfiprintf_r+0x2a>
 8007240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007242:	f7fe fa6e 	bl	8005722 <__retarget_lock_acquire_recursive>
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	071b      	lsls	r3, r3, #28
 800724a:	d501      	bpl.n	8007250 <_vfiprintf_r+0x34>
 800724c:	692b      	ldr	r3, [r5, #16]
 800724e:	b99b      	cbnz	r3, 8007278 <_vfiprintf_r+0x5c>
 8007250:	4629      	mov	r1, r5
 8007252:	4630      	mov	r0, r6
 8007254:	f000 f93a 	bl	80074cc <__swsetup_r>
 8007258:	b170      	cbz	r0, 8007278 <_vfiprintf_r+0x5c>
 800725a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725c:	07dc      	lsls	r4, r3, #31
 800725e:	d504      	bpl.n	800726a <_vfiprintf_r+0x4e>
 8007260:	f04f 30ff 	mov.w	r0, #4294967295
 8007264:	b01d      	add	sp, #116	; 0x74
 8007266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	0598      	lsls	r0, r3, #22
 800726e:	d4f7      	bmi.n	8007260 <_vfiprintf_r+0x44>
 8007270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007272:	f7fe fa57 	bl	8005724 <__retarget_lock_release_recursive>
 8007276:	e7f3      	b.n	8007260 <_vfiprintf_r+0x44>
 8007278:	2300      	movs	r3, #0
 800727a:	9309      	str	r3, [sp, #36]	; 0x24
 800727c:	2320      	movs	r3, #32
 800727e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007282:	f8cd 800c 	str.w	r8, [sp, #12]
 8007286:	2330      	movs	r3, #48	; 0x30
 8007288:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800743c <_vfiprintf_r+0x220>
 800728c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007290:	f04f 0901 	mov.w	r9, #1
 8007294:	4623      	mov	r3, r4
 8007296:	469a      	mov	sl, r3
 8007298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800729c:	b10a      	cbz	r2, 80072a2 <_vfiprintf_r+0x86>
 800729e:	2a25      	cmp	r2, #37	; 0x25
 80072a0:	d1f9      	bne.n	8007296 <_vfiprintf_r+0x7a>
 80072a2:	ebba 0b04 	subs.w	fp, sl, r4
 80072a6:	d00b      	beq.n	80072c0 <_vfiprintf_r+0xa4>
 80072a8:	465b      	mov	r3, fp
 80072aa:	4622      	mov	r2, r4
 80072ac:	4629      	mov	r1, r5
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff ffa2 	bl	80071f8 <__sfputs_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	f000 80a9 	beq.w	800740c <_vfiprintf_r+0x1f0>
 80072ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072bc:	445a      	add	r2, fp
 80072be:	9209      	str	r2, [sp, #36]	; 0x24
 80072c0:	f89a 3000 	ldrb.w	r3, [sl]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 80a1 	beq.w	800740c <_vfiprintf_r+0x1f0>
 80072ca:	2300      	movs	r3, #0
 80072cc:	f04f 32ff 	mov.w	r2, #4294967295
 80072d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d4:	f10a 0a01 	add.w	sl, sl, #1
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9307      	str	r3, [sp, #28]
 80072dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072e0:	931a      	str	r3, [sp, #104]	; 0x68
 80072e2:	4654      	mov	r4, sl
 80072e4:	2205      	movs	r2, #5
 80072e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ea:	4854      	ldr	r0, [pc, #336]	; (800743c <_vfiprintf_r+0x220>)
 80072ec:	f7f8 ffa8 	bl	8000240 <memchr>
 80072f0:	9a04      	ldr	r2, [sp, #16]
 80072f2:	b9d8      	cbnz	r0, 800732c <_vfiprintf_r+0x110>
 80072f4:	06d1      	lsls	r1, r2, #27
 80072f6:	bf44      	itt	mi
 80072f8:	2320      	movmi	r3, #32
 80072fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072fe:	0713      	lsls	r3, r2, #28
 8007300:	bf44      	itt	mi
 8007302:	232b      	movmi	r3, #43	; 0x2b
 8007304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007308:	f89a 3000 	ldrb.w	r3, [sl]
 800730c:	2b2a      	cmp	r3, #42	; 0x2a
 800730e:	d015      	beq.n	800733c <_vfiprintf_r+0x120>
 8007310:	9a07      	ldr	r2, [sp, #28]
 8007312:	4654      	mov	r4, sl
 8007314:	2000      	movs	r0, #0
 8007316:	f04f 0c0a 	mov.w	ip, #10
 800731a:	4621      	mov	r1, r4
 800731c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007320:	3b30      	subs	r3, #48	; 0x30
 8007322:	2b09      	cmp	r3, #9
 8007324:	d94d      	bls.n	80073c2 <_vfiprintf_r+0x1a6>
 8007326:	b1b0      	cbz	r0, 8007356 <_vfiprintf_r+0x13a>
 8007328:	9207      	str	r2, [sp, #28]
 800732a:	e014      	b.n	8007356 <_vfiprintf_r+0x13a>
 800732c:	eba0 0308 	sub.w	r3, r0, r8
 8007330:	fa09 f303 	lsl.w	r3, r9, r3
 8007334:	4313      	orrs	r3, r2
 8007336:	9304      	str	r3, [sp, #16]
 8007338:	46a2      	mov	sl, r4
 800733a:	e7d2      	b.n	80072e2 <_vfiprintf_r+0xc6>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1d19      	adds	r1, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9103      	str	r1, [sp, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfbb      	ittet	lt
 8007348:	425b      	neglt	r3, r3
 800734a:	f042 0202 	orrlt.w	r2, r2, #2
 800734e:	9307      	strge	r3, [sp, #28]
 8007350:	9307      	strlt	r3, [sp, #28]
 8007352:	bfb8      	it	lt
 8007354:	9204      	strlt	r2, [sp, #16]
 8007356:	7823      	ldrb	r3, [r4, #0]
 8007358:	2b2e      	cmp	r3, #46	; 0x2e
 800735a:	d10c      	bne.n	8007376 <_vfiprintf_r+0x15a>
 800735c:	7863      	ldrb	r3, [r4, #1]
 800735e:	2b2a      	cmp	r3, #42	; 0x2a
 8007360:	d134      	bne.n	80073cc <_vfiprintf_r+0x1b0>
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	1d1a      	adds	r2, r3, #4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	9203      	str	r2, [sp, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfb8      	it	lt
 800736e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007372:	3402      	adds	r4, #2
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800744c <_vfiprintf_r+0x230>
 800737a:	7821      	ldrb	r1, [r4, #0]
 800737c:	2203      	movs	r2, #3
 800737e:	4650      	mov	r0, sl
 8007380:	f7f8 ff5e 	bl	8000240 <memchr>
 8007384:	b138      	cbz	r0, 8007396 <_vfiprintf_r+0x17a>
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	eba0 000a 	sub.w	r0, r0, sl
 800738c:	2240      	movs	r2, #64	; 0x40
 800738e:	4082      	lsls	r2, r0
 8007390:	4313      	orrs	r3, r2
 8007392:	3401      	adds	r4, #1
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739a:	4829      	ldr	r0, [pc, #164]	; (8007440 <_vfiprintf_r+0x224>)
 800739c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073a0:	2206      	movs	r2, #6
 80073a2:	f7f8 ff4d 	bl	8000240 <memchr>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d03f      	beq.n	800742a <_vfiprintf_r+0x20e>
 80073aa:	4b26      	ldr	r3, [pc, #152]	; (8007444 <_vfiprintf_r+0x228>)
 80073ac:	bb1b      	cbnz	r3, 80073f6 <_vfiprintf_r+0x1da>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	3307      	adds	r3, #7
 80073b2:	f023 0307 	bic.w	r3, r3, #7
 80073b6:	3308      	adds	r3, #8
 80073b8:	9303      	str	r3, [sp, #12]
 80073ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073bc:	443b      	add	r3, r7
 80073be:	9309      	str	r3, [sp, #36]	; 0x24
 80073c0:	e768      	b.n	8007294 <_vfiprintf_r+0x78>
 80073c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c6:	460c      	mov	r4, r1
 80073c8:	2001      	movs	r0, #1
 80073ca:	e7a6      	b.n	800731a <_vfiprintf_r+0xfe>
 80073cc:	2300      	movs	r3, #0
 80073ce:	3401      	adds	r4, #1
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	4619      	mov	r1, r3
 80073d4:	f04f 0c0a 	mov.w	ip, #10
 80073d8:	4620      	mov	r0, r4
 80073da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073de:	3a30      	subs	r2, #48	; 0x30
 80073e0:	2a09      	cmp	r2, #9
 80073e2:	d903      	bls.n	80073ec <_vfiprintf_r+0x1d0>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0c6      	beq.n	8007376 <_vfiprintf_r+0x15a>
 80073e8:	9105      	str	r1, [sp, #20]
 80073ea:	e7c4      	b.n	8007376 <_vfiprintf_r+0x15a>
 80073ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f0:	4604      	mov	r4, r0
 80073f2:	2301      	movs	r3, #1
 80073f4:	e7f0      	b.n	80073d8 <_vfiprintf_r+0x1bc>
 80073f6:	ab03      	add	r3, sp, #12
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	462a      	mov	r2, r5
 80073fc:	4b12      	ldr	r3, [pc, #72]	; (8007448 <_vfiprintf_r+0x22c>)
 80073fe:	a904      	add	r1, sp, #16
 8007400:	4630      	mov	r0, r6
 8007402:	f7fd fc41 	bl	8004c88 <_printf_float>
 8007406:	4607      	mov	r7, r0
 8007408:	1c78      	adds	r0, r7, #1
 800740a:	d1d6      	bne.n	80073ba <_vfiprintf_r+0x19e>
 800740c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800740e:	07d9      	lsls	r1, r3, #31
 8007410:	d405      	bmi.n	800741e <_vfiprintf_r+0x202>
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	059a      	lsls	r2, r3, #22
 8007416:	d402      	bmi.n	800741e <_vfiprintf_r+0x202>
 8007418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800741a:	f7fe f983 	bl	8005724 <__retarget_lock_release_recursive>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	065b      	lsls	r3, r3, #25
 8007422:	f53f af1d 	bmi.w	8007260 <_vfiprintf_r+0x44>
 8007426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007428:	e71c      	b.n	8007264 <_vfiprintf_r+0x48>
 800742a:	ab03      	add	r3, sp, #12
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	462a      	mov	r2, r5
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <_vfiprintf_r+0x22c>)
 8007432:	a904      	add	r1, sp, #16
 8007434:	4630      	mov	r0, r6
 8007436:	f7fd feaf 	bl	8005198 <_printf_i>
 800743a:	e7e4      	b.n	8007406 <_vfiprintf_r+0x1ea>
 800743c:	08007f64 	.word	0x08007f64
 8007440:	08007f6e 	.word	0x08007f6e
 8007444:	08004c89 	.word	0x08004c89
 8007448:	080071f9 	.word	0x080071f9
 800744c:	08007f6a 	.word	0x08007f6a

08007450 <__swbuf_r>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	460e      	mov	r6, r1
 8007454:	4614      	mov	r4, r2
 8007456:	4605      	mov	r5, r0
 8007458:	b118      	cbz	r0, 8007462 <__swbuf_r+0x12>
 800745a:	6a03      	ldr	r3, [r0, #32]
 800745c:	b90b      	cbnz	r3, 8007462 <__swbuf_r+0x12>
 800745e:	f7fe f849 	bl	80054f4 <__sinit>
 8007462:	69a3      	ldr	r3, [r4, #24]
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	071a      	lsls	r2, r3, #28
 800746a:	d525      	bpl.n	80074b8 <__swbuf_r+0x68>
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	b31b      	cbz	r3, 80074b8 <__swbuf_r+0x68>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	6922      	ldr	r2, [r4, #16]
 8007474:	1a98      	subs	r0, r3, r2
 8007476:	6963      	ldr	r3, [r4, #20]
 8007478:	b2f6      	uxtb	r6, r6
 800747a:	4283      	cmp	r3, r0
 800747c:	4637      	mov	r7, r6
 800747e:	dc04      	bgt.n	800748a <__swbuf_r+0x3a>
 8007480:	4621      	mov	r1, r4
 8007482:	4628      	mov	r0, r5
 8007484:	f7ff fd9e 	bl	8006fc4 <_fflush_r>
 8007488:	b9e0      	cbnz	r0, 80074c4 <__swbuf_r+0x74>
 800748a:	68a3      	ldr	r3, [r4, #8]
 800748c:	3b01      	subs	r3, #1
 800748e:	60a3      	str	r3, [r4, #8]
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	6022      	str	r2, [r4, #0]
 8007496:	701e      	strb	r6, [r3, #0]
 8007498:	6962      	ldr	r2, [r4, #20]
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	429a      	cmp	r2, r3
 800749e:	d004      	beq.n	80074aa <__swbuf_r+0x5a>
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	07db      	lsls	r3, r3, #31
 80074a4:	d506      	bpl.n	80074b4 <__swbuf_r+0x64>
 80074a6:	2e0a      	cmp	r6, #10
 80074a8:	d104      	bne.n	80074b4 <__swbuf_r+0x64>
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f7ff fd89 	bl	8006fc4 <_fflush_r>
 80074b2:	b938      	cbnz	r0, 80074c4 <__swbuf_r+0x74>
 80074b4:	4638      	mov	r0, r7
 80074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b8:	4621      	mov	r1, r4
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 f806 	bl	80074cc <__swsetup_r>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d0d5      	beq.n	8007470 <__swbuf_r+0x20>
 80074c4:	f04f 37ff 	mov.w	r7, #4294967295
 80074c8:	e7f4      	b.n	80074b4 <__swbuf_r+0x64>
	...

080074cc <__swsetup_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4b2a      	ldr	r3, [pc, #168]	; (8007578 <__swsetup_r+0xac>)
 80074d0:	4605      	mov	r5, r0
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	460c      	mov	r4, r1
 80074d6:	b118      	cbz	r0, 80074e0 <__swsetup_r+0x14>
 80074d8:	6a03      	ldr	r3, [r0, #32]
 80074da:	b90b      	cbnz	r3, 80074e0 <__swsetup_r+0x14>
 80074dc:	f7fe f80a 	bl	80054f4 <__sinit>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074e6:	0718      	lsls	r0, r3, #28
 80074e8:	d422      	bmi.n	8007530 <__swsetup_r+0x64>
 80074ea:	06d9      	lsls	r1, r3, #27
 80074ec:	d407      	bmi.n	80074fe <__swsetup_r+0x32>
 80074ee:	2309      	movs	r3, #9
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e034      	b.n	8007568 <__swsetup_r+0x9c>
 80074fe:	0758      	lsls	r0, r3, #29
 8007500:	d512      	bpl.n	8007528 <__swsetup_r+0x5c>
 8007502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007504:	b141      	cbz	r1, 8007518 <__swsetup_r+0x4c>
 8007506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800750a:	4299      	cmp	r1, r3
 800750c:	d002      	beq.n	8007514 <__swsetup_r+0x48>
 800750e:	4628      	mov	r0, r5
 8007510:	f7fe fefe 	bl	8006310 <_free_r>
 8007514:	2300      	movs	r3, #0
 8007516:	6363      	str	r3, [r4, #52]	; 0x34
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	2300      	movs	r3, #0
 8007522:	6063      	str	r3, [r4, #4]
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f043 0308 	orr.w	r3, r3, #8
 800752e:	81a3      	strh	r3, [r4, #12]
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	b94b      	cbnz	r3, 8007548 <__swsetup_r+0x7c>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800753a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753e:	d003      	beq.n	8007548 <__swsetup_r+0x7c>
 8007540:	4621      	mov	r1, r4
 8007542:	4628      	mov	r0, r5
 8007544:	f000 f884 	bl	8007650 <__smakebuf_r>
 8007548:	89a0      	ldrh	r0, [r4, #12]
 800754a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800754e:	f010 0301 	ands.w	r3, r0, #1
 8007552:	d00a      	beq.n	800756a <__swsetup_r+0x9e>
 8007554:	2300      	movs	r3, #0
 8007556:	60a3      	str	r3, [r4, #8]
 8007558:	6963      	ldr	r3, [r4, #20]
 800755a:	425b      	negs	r3, r3
 800755c:	61a3      	str	r3, [r4, #24]
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	b943      	cbnz	r3, 8007574 <__swsetup_r+0xa8>
 8007562:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007566:	d1c4      	bne.n	80074f2 <__swsetup_r+0x26>
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	0781      	lsls	r1, r0, #30
 800756c:	bf58      	it	pl
 800756e:	6963      	ldrpl	r3, [r4, #20]
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	e7f4      	b.n	800755e <__swsetup_r+0x92>
 8007574:	2000      	movs	r0, #0
 8007576:	e7f7      	b.n	8007568 <__swsetup_r+0x9c>
 8007578:	20000064 	.word	0x20000064

0800757c <_raise_r>:
 800757c:	291f      	cmp	r1, #31
 800757e:	b538      	push	{r3, r4, r5, lr}
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	d904      	bls.n	8007590 <_raise_r+0x14>
 8007586:	2316      	movs	r3, #22
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	f04f 30ff 	mov.w	r0, #4294967295
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007592:	b112      	cbz	r2, 800759a <_raise_r+0x1e>
 8007594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007598:	b94b      	cbnz	r3, 80075ae <_raise_r+0x32>
 800759a:	4620      	mov	r0, r4
 800759c:	f000 f830 	bl	8007600 <_getpid_r>
 80075a0:	462a      	mov	r2, r5
 80075a2:	4601      	mov	r1, r0
 80075a4:	4620      	mov	r0, r4
 80075a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075aa:	f000 b817 	b.w	80075dc <_kill_r>
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d00a      	beq.n	80075c8 <_raise_r+0x4c>
 80075b2:	1c59      	adds	r1, r3, #1
 80075b4:	d103      	bne.n	80075be <_raise_r+0x42>
 80075b6:	2316      	movs	r3, #22
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	2001      	movs	r0, #1
 80075bc:	e7e7      	b.n	800758e <_raise_r+0x12>
 80075be:	2400      	movs	r4, #0
 80075c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075c4:	4628      	mov	r0, r5
 80075c6:	4798      	blx	r3
 80075c8:	2000      	movs	r0, #0
 80075ca:	e7e0      	b.n	800758e <_raise_r+0x12>

080075cc <raise>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <raise+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f7ff bfd3 	b.w	800757c <_raise_r>
 80075d6:	bf00      	nop
 80075d8:	20000064 	.word	0x20000064

080075dc <_kill_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d07      	ldr	r5, [pc, #28]	; (80075fc <_kill_r+0x20>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4604      	mov	r4, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	f7f9 fcf3 	bl	8000fd4 <_kill>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	d102      	bne.n	80075f8 <_kill_r+0x1c>
 80075f2:	682b      	ldr	r3, [r5, #0]
 80075f4:	b103      	cbz	r3, 80075f8 <_kill_r+0x1c>
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	20000b44 	.word	0x20000b44

08007600 <_getpid_r>:
 8007600:	f7f9 bce0 	b.w	8000fc4 <_getpid>

08007604 <__swhatbuf_r>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	460c      	mov	r4, r1
 8007608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760c:	2900      	cmp	r1, #0
 800760e:	b096      	sub	sp, #88	; 0x58
 8007610:	4615      	mov	r5, r2
 8007612:	461e      	mov	r6, r3
 8007614:	da0d      	bge.n	8007632 <__swhatbuf_r+0x2e>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f013 0f80 	tst.w	r3, #128	; 0x80
 800761c:	f04f 0100 	mov.w	r1, #0
 8007620:	bf0c      	ite	eq
 8007622:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007626:	2340      	movne	r3, #64	; 0x40
 8007628:	2000      	movs	r0, #0
 800762a:	6031      	str	r1, [r6, #0]
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	b016      	add	sp, #88	; 0x58
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	466a      	mov	r2, sp
 8007634:	f000 f848 	bl	80076c8 <_fstat_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	dbec      	blt.n	8007616 <__swhatbuf_r+0x12>
 800763c:	9901      	ldr	r1, [sp, #4]
 800763e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007642:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007646:	4259      	negs	r1, r3
 8007648:	4159      	adcs	r1, r3
 800764a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800764e:	e7eb      	b.n	8007628 <__swhatbuf_r+0x24>

08007650 <__smakebuf_r>:
 8007650:	898b      	ldrh	r3, [r1, #12]
 8007652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007654:	079d      	lsls	r5, r3, #30
 8007656:	4606      	mov	r6, r0
 8007658:	460c      	mov	r4, r1
 800765a:	d507      	bpl.n	800766c <__smakebuf_r+0x1c>
 800765c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	2301      	movs	r3, #1
 8007666:	6163      	str	r3, [r4, #20]
 8007668:	b002      	add	sp, #8
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	ab01      	add	r3, sp, #4
 800766e:	466a      	mov	r2, sp
 8007670:	f7ff ffc8 	bl	8007604 <__swhatbuf_r>
 8007674:	9900      	ldr	r1, [sp, #0]
 8007676:	4605      	mov	r5, r0
 8007678:	4630      	mov	r0, r6
 800767a:	f7fe febd 	bl	80063f8 <_malloc_r>
 800767e:	b948      	cbnz	r0, 8007694 <__smakebuf_r+0x44>
 8007680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007684:	059a      	lsls	r2, r3, #22
 8007686:	d4ef      	bmi.n	8007668 <__smakebuf_r+0x18>
 8007688:	f023 0303 	bic.w	r3, r3, #3
 800768c:	f043 0302 	orr.w	r3, r3, #2
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	e7e3      	b.n	800765c <__smakebuf_r+0xc>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	6020      	str	r0, [r4, #0]
 8007698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	6163      	str	r3, [r4, #20]
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	6120      	str	r0, [r4, #16]
 80076a6:	b15b      	cbz	r3, 80076c0 <__smakebuf_r+0x70>
 80076a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ac:	4630      	mov	r0, r6
 80076ae:	f000 f81d 	bl	80076ec <_isatty_r>
 80076b2:	b128      	cbz	r0, 80076c0 <__smakebuf_r+0x70>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	431d      	orrs	r5, r3
 80076c4:	81a5      	strh	r5, [r4, #12]
 80076c6:	e7cf      	b.n	8007668 <__smakebuf_r+0x18>

080076c8 <_fstat_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d07      	ldr	r5, [pc, #28]	; (80076e8 <_fstat_r+0x20>)
 80076cc:	2300      	movs	r3, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	4611      	mov	r1, r2
 80076d4:	602b      	str	r3, [r5, #0]
 80076d6:	f7f9 fcdc 	bl	8001092 <_fstat>
 80076da:	1c43      	adds	r3, r0, #1
 80076dc:	d102      	bne.n	80076e4 <_fstat_r+0x1c>
 80076de:	682b      	ldr	r3, [r5, #0]
 80076e0:	b103      	cbz	r3, 80076e4 <_fstat_r+0x1c>
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	bd38      	pop	{r3, r4, r5, pc}
 80076e6:	bf00      	nop
 80076e8:	20000b44 	.word	0x20000b44

080076ec <_isatty_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4d06      	ldr	r5, [pc, #24]	; (8007708 <_isatty_r+0x1c>)
 80076f0:	2300      	movs	r3, #0
 80076f2:	4604      	mov	r4, r0
 80076f4:	4608      	mov	r0, r1
 80076f6:	602b      	str	r3, [r5, #0]
 80076f8:	f7f9 fcdb 	bl	80010b2 <_isatty>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_isatty_r+0x1a>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_isatty_r+0x1a>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	20000b44 	.word	0x20000b44

0800770c <checkint>:
 800770c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007710:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8007714:	429a      	cmp	r2, r3
 8007716:	b570      	push	{r4, r5, r6, lr}
 8007718:	dd2a      	ble.n	8007770 <checkint+0x64>
 800771a:	f240 4333 	movw	r3, #1075	; 0x433
 800771e:	429a      	cmp	r2, r3
 8007720:	dc24      	bgt.n	800776c <checkint+0x60>
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	f1a3 0620 	sub.w	r6, r3, #32
 8007728:	f04f 32ff 	mov.w	r2, #4294967295
 800772c:	fa02 f403 	lsl.w	r4, r2, r3
 8007730:	fa02 f606 	lsl.w	r6, r2, r6
 8007734:	f1c3 0520 	rsb	r5, r3, #32
 8007738:	fa22 f505 	lsr.w	r5, r2, r5
 800773c:	4334      	orrs	r4, r6
 800773e:	432c      	orrs	r4, r5
 8007740:	409a      	lsls	r2, r3
 8007742:	ea20 0202 	bic.w	r2, r0, r2
 8007746:	ea21 0404 	bic.w	r4, r1, r4
 800774a:	4322      	orrs	r2, r4
 800774c:	f1a3 0420 	sub.w	r4, r3, #32
 8007750:	f1c3 0220 	rsb	r2, r3, #32
 8007754:	d10c      	bne.n	8007770 <checkint+0x64>
 8007756:	40d8      	lsrs	r0, r3
 8007758:	fa01 f302 	lsl.w	r3, r1, r2
 800775c:	4318      	orrs	r0, r3
 800775e:	40e1      	lsrs	r1, r4
 8007760:	4308      	orrs	r0, r1
 8007762:	f000 0001 	and.w	r0, r0, #1
 8007766:	f1d0 0002 	rsbs	r0, r0, #2
 800776a:	bd70      	pop	{r4, r5, r6, pc}
 800776c:	2002      	movs	r0, #2
 800776e:	e7fc      	b.n	800776a <checkint+0x5e>
 8007770:	2000      	movs	r0, #0
 8007772:	e7fa      	b.n	800776a <checkint+0x5e>
 8007774:	0000      	movs	r0, r0
	...

08007778 <pow>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	ee10 4a90 	vmov	r4, s1
 8007780:	ed2d 8b0a 	vpush	{d8-d12}
 8007784:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8007788:	ee11 aa90 	vmov	sl, s3
 800778c:	f108 32ff 	add.w	r2, r8, #4294967295
 8007790:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8007794:	429a      	cmp	r2, r3
 8007796:	ee10 5a10 	vmov	r5, s0
 800779a:	ee11 0a10 	vmov	r0, s2
 800779e:	b087      	sub	sp, #28
 80077a0:	46c4      	mov	ip, r8
 80077a2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80077a6:	d806      	bhi.n	80077b6 <pow+0x3e>
 80077a8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80077ac:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80077b0:	2b7f      	cmp	r3, #127	; 0x7f
 80077b2:	f240 8156 	bls.w	8007a62 <pow+0x2ea>
 80077b6:	1802      	adds	r2, r0, r0
 80077b8:	eb4a 010a 	adc.w	r1, sl, sl
 80077bc:	f06f 0b01 	mvn.w	fp, #1
 80077c0:	1e57      	subs	r7, r2, #1
 80077c2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80077c6:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 80077ca:	45bb      	cmp	fp, r7
 80077cc:	eb7e 0303 	sbcs.w	r3, lr, r3
 80077d0:	d242      	bcs.n	8007858 <pow+0xe0>
 80077d2:	ea52 0301 	orrs.w	r3, r2, r1
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	d10c      	bne.n	80077f6 <pow+0x7e>
 80077dc:	196d      	adds	r5, r5, r5
 80077de:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80077e2:	4164      	adcs	r4, r4
 80077e4:	42ab      	cmp	r3, r5
 80077e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80077ea:	41a3      	sbcs	r3, r4
 80077ec:	f0c0 808f 	bcc.w	800790e <pow+0x196>
 80077f0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80077f4:	e02b      	b.n	800784e <pow+0xd6>
 80077f6:	4ed4      	ldr	r6, [pc, #848]	; (8007b48 <pow+0x3d0>)
 80077f8:	42b4      	cmp	r4, r6
 80077fa:	bf08      	it	eq
 80077fc:	429d      	cmpeq	r5, r3
 80077fe:	d109      	bne.n	8007814 <pow+0x9c>
 8007800:	1800      	adds	r0, r0, r0
 8007802:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8007806:	eb4a 0a0a 	adc.w	sl, sl, sl
 800780a:	4283      	cmp	r3, r0
 800780c:	4bcf      	ldr	r3, [pc, #828]	; (8007b4c <pow+0x3d4>)
 800780e:	eb73 030a 	sbcs.w	r3, r3, sl
 8007812:	e7eb      	b.n	80077ec <pow+0x74>
 8007814:	196d      	adds	r5, r5, r5
 8007816:	48ce      	ldr	r0, [pc, #824]	; (8007b50 <pow+0x3d8>)
 8007818:	4164      	adcs	r4, r4
 800781a:	42ab      	cmp	r3, r5
 800781c:	eb70 0604 	sbcs.w	r6, r0, r4
 8007820:	d375      	bcc.n	800790e <pow+0x196>
 8007822:	4281      	cmp	r1, r0
 8007824:	bf08      	it	eq
 8007826:	429a      	cmpeq	r2, r3
 8007828:	d171      	bne.n	800790e <pow+0x196>
 800782a:	4aca      	ldr	r2, [pc, #808]	; (8007b54 <pow+0x3dc>)
 800782c:	4294      	cmp	r4, r2
 800782e:	bf08      	it	eq
 8007830:	429d      	cmpeq	r5, r3
 8007832:	d0dd      	beq.n	80077f0 <pow+0x78>
 8007834:	4294      	cmp	r4, r2
 8007836:	ea6f 0a0a 	mvn.w	sl, sl
 800783a:	bf34      	ite	cc
 800783c:	2400      	movcc	r4, #0
 800783e:	2401      	movcs	r4, #1
 8007840:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8007844:	4554      	cmp	r4, sl
 8007846:	f040 81dc 	bne.w	8007c02 <pow+0x48a>
 800784a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800784e:	b007      	add	sp, #28
 8007850:	ecbd 8b0a 	vpop	{d8-d12}
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007858:	196f      	adds	r7, r5, r5
 800785a:	eb44 0904 	adc.w	r9, r4, r4
 800785e:	1e7a      	subs	r2, r7, #1
 8007860:	f169 0300 	sbc.w	r3, r9, #0
 8007864:	4593      	cmp	fp, r2
 8007866:	eb7e 0303 	sbcs.w	r3, lr, r3
 800786a:	d225      	bcs.n	80078b8 <pow+0x140>
 800786c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8007870:	2c00      	cmp	r4, #0
 8007872:	da13      	bge.n	800789c <pow+0x124>
 8007874:	4651      	mov	r1, sl
 8007876:	f7ff ff49 	bl	800770c <checkint>
 800787a:	2801      	cmp	r0, #1
 800787c:	d10e      	bne.n	800789c <pow+0x124>
 800787e:	eeb1 0b40 	vneg.f64	d0, d0
 8007882:	ea57 0909 	orrs.w	r9, r7, r9
 8007886:	d10b      	bne.n	80078a0 <pow+0x128>
 8007888:	f1ba 0f00 	cmp.w	sl, #0
 800788c:	dadf      	bge.n	800784e <pow+0xd6>
 800788e:	b007      	add	sp, #28
 8007890:	ecbd 8b0a 	vpop	{d8-d12}
 8007894:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	f000 b9ea 	b.w	8007c70 <__math_divzero>
 800789c:	2000      	movs	r0, #0
 800789e:	e7f0      	b.n	8007882 <pow+0x10a>
 80078a0:	f1ba 0f00 	cmp.w	sl, #0
 80078a4:	dad3      	bge.n	800784e <pow+0xd6>
 80078a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80078aa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80078ae:	ed8d 7b00 	vstr	d7, [sp]
 80078b2:	ed9d 0b00 	vldr	d0, [sp]
 80078b6:	e7ca      	b.n	800784e <pow+0xd6>
 80078b8:	2c00      	cmp	r4, #0
 80078ba:	da2b      	bge.n	8007914 <pow+0x19c>
 80078bc:	4651      	mov	r1, sl
 80078be:	f7ff ff25 	bl	800770c <checkint>
 80078c2:	b930      	cbnz	r0, 80078d2 <pow+0x15a>
 80078c4:	b007      	add	sp, #28
 80078c6:	ecbd 8b0a 	vpop	{d8-d12}
 80078ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ce:	f000 b9e7 	b.w	8007ca0 <__math_invalid>
 80078d2:	1e41      	subs	r1, r0, #1
 80078d4:	4248      	negs	r0, r1
 80078d6:	4148      	adcs	r0, r1
 80078d8:	0480      	lsls	r0, r0, #18
 80078da:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80078de:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80078e2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80078e6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80078ea:	2b7f      	cmp	r3, #127	; 0x7f
 80078ec:	d92d      	bls.n	800794a <pow+0x1d2>
 80078ee:	4b96      	ldr	r3, [pc, #600]	; (8007b48 <pow+0x3d0>)
 80078f0:	2000      	movs	r0, #0
 80078f2:	429c      	cmp	r4, r3
 80078f4:	bf08      	it	eq
 80078f6:	4285      	cmpeq	r5, r0
 80078f8:	f43f af7a 	beq.w	80077f0 <pow+0x78>
 80078fc:	f240 31bd 	movw	r1, #957	; 0x3bd
 8007900:	428a      	cmp	r2, r1
 8007902:	d80c      	bhi.n	800791e <pow+0x1a6>
 8007904:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007908:	42a8      	cmp	r0, r5
 800790a:	41a3      	sbcs	r3, r4
 800790c:	d204      	bcs.n	8007918 <pow+0x1a0>
 800790e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8007912:	e79c      	b.n	800784e <pow+0xd6>
 8007914:	2000      	movs	r0, #0
 8007916:	e7e4      	b.n	80078e2 <pow+0x16a>
 8007918:	ee30 0b41 	vsub.f64	d0, d0, d1
 800791c:	e797      	b.n	800784e <pow+0xd6>
 800791e:	2d01      	cmp	r5, #1
 8007920:	eb74 0303 	sbcs.w	r3, r4, r3
 8007924:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007928:	bf34      	ite	cc
 800792a:	2301      	movcc	r3, #1
 800792c:	2300      	movcs	r3, #0
 800792e:	4296      	cmp	r6, r2
 8007930:	bf8c      	ite	hi
 8007932:	2600      	movhi	r6, #0
 8007934:	2601      	movls	r6, #1
 8007936:	42b3      	cmp	r3, r6
 8007938:	f000 809b 	beq.w	8007a72 <pow+0x2fa>
 800793c:	b007      	add	sp, #28
 800793e:	ecbd 8b0a 	vpop	{d8-d12}
 8007942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007946:	f000 b98b 	b.w	8007c60 <__math_oflow>
 800794a:	f1bc 0f00 	cmp.w	ip, #0
 800794e:	d10b      	bne.n	8007968 <pow+0x1f0>
 8007950:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8007b38 <pow+0x3c0>
 8007954:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007958:	ec53 2b17 	vmov	r2, r3, d7
 800795c:	ee17 5a10 	vmov	r5, s14
 8007960:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007964:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8007968:	4b7b      	ldr	r3, [pc, #492]	; (8007b58 <pow+0x3e0>)
 800796a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800796e:	4423      	add	r3, r4
 8007970:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8007974:	1519      	asrs	r1, r3, #20
 8007976:	0d1b      	lsrs	r3, r3, #20
 8007978:	051b      	lsls	r3, r3, #20
 800797a:	1ae7      	subs	r7, r4, r3
 800797c:	4b77      	ldr	r3, [pc, #476]	; (8007b5c <pow+0x3e4>)
 800797e:	ee03 1a10 	vmov	s6, r1
 8007982:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8007986:	1e2e      	subs	r6, r5, #0
 8007988:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800798c:	ec47 6b15 	vmov	d5, r6, r7
 8007990:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8007994:	eea5 6b07 	vfma.f64	d6, d5, d7
 8007998:	ed93 7b00 	vldr	d7, [r3]
 800799c:	ed93 5b02 	vldr	d5, [r3, #8]
 80079a0:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80079a4:	eea3 2b07 	vfma.f64	d2, d3, d7
 80079a8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80079ac:	ee36 4b02 	vadd.f64	d4, d6, d2
 80079b0:	ee32 2b44 	vsub.f64	d2, d2, d4
 80079b4:	eea3 7b05 	vfma.f64	d7, d3, d5
 80079b8:	ed93 5b04 	vldr	d5, [r3, #16]
 80079bc:	ee32 2b06 	vadd.f64	d2, d2, d6
 80079c0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80079c4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80079c8:	ee26 0b05 	vmul.f64	d0, d6, d5
 80079cc:	ee34 8b00 	vadd.f64	d8, d4, d0
 80079d0:	eeb0 9b40 	vmov.f64	d9, d0
 80079d4:	ee34 4b48 	vsub.f64	d4, d4, d8
 80079d8:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80079dc:	ee34 ab00 	vadd.f64	d10, d4, d0
 80079e0:	ed93 5b06 	vldr	d5, [r3, #24]
 80079e4:	ee26 bb00 	vmul.f64	d11, d6, d0
 80079e8:	ee37 7b09 	vadd.f64	d7, d7, d9
 80079ec:	ed93 4b08 	vldr	d4, [r3, #32]
 80079f0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80079f4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80079f8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80079fc:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8007a00:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8007a04:	eea6 4b03 	vfma.f64	d4, d6, d3
 8007a08:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8007a0c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8007a10:	eea0 4b03 	vfma.f64	d4, d0, d3
 8007a14:	eea0 5b04 	vfma.f64	d5, d0, d4
 8007a18:	eeab 7b05 	vfma.f64	d7, d11, d5
 8007a1c:	ee38 4b07 	vadd.f64	d4, d8, d7
 8007a20:	ee21 6b04 	vmul.f64	d6, d1, d4
 8007a24:	ee16 3a90 	vmov	r3, s13
 8007a28:	eeb0 5b46 	vmov.f64	d5, d6
 8007a2c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8007a30:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8007a34:	18b2      	adds	r2, r6, r2
 8007a36:	2a3e      	cmp	r2, #62	; 0x3e
 8007a38:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8007a3c:	ee38 8b44 	vsub.f64	d8, d8, d4
 8007a40:	ee38 8b07 	vadd.f64	d8, d8, d7
 8007a44:	eea1 5b08 	vfma.f64	d5, d1, d8
 8007a48:	d91b      	bls.n	8007a82 <pow+0x30a>
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	da0b      	bge.n	8007a66 <pow+0x2ee>
 8007a4e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007a52:	ee36 0b00 	vadd.f64	d0, d6, d0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f aef9 	beq.w	800784e <pow+0xd6>
 8007a5c:	eeb1 0b40 	vneg.f64	d0, d0
 8007a60:	e6f5      	b.n	800784e <pow+0xd6>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e780      	b.n	8007968 <pow+0x1f0>
 8007a66:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8007a6a:	d909      	bls.n	8007a80 <pow+0x308>
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f6bf af65 	bge.w	800793c <pow+0x1c4>
 8007a72:	b007      	add	sp, #28
 8007a74:	ecbd 8b0a 	vpop	{d8-d12}
 8007a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	f000 b8e8 	b.w	8007c50 <__math_uflow>
 8007a80:	2600      	movs	r6, #0
 8007a82:	4937      	ldr	r1, [pc, #220]	; (8007b60 <pow+0x3e8>)
 8007a84:	ed91 4b02 	vldr	d4, [r1, #8]
 8007a88:	ed91 3b00 	vldr	d3, [r1]
 8007a8c:	eeb0 7b44 	vmov.f64	d7, d4
 8007a90:	eea6 7b03 	vfma.f64	d7, d6, d3
 8007a94:	ee17 5a10 	vmov	r5, s14
 8007a98:	ee37 7b44 	vsub.f64	d7, d7, d4
 8007a9c:	ed91 4b04 	vldr	d4, [r1, #16]
 8007aa0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8007aa4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8007aa8:	ed91 4b06 	vldr	d4, [r1, #24]
 8007aac:	18dc      	adds	r4, r3, r3
 8007aae:	f104 030f 	add.w	r3, r4, #15
 8007ab2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8007ab6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8007aba:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8007abe:	ee35 5b06 	vadd.f64	d5, d5, d6
 8007ac2:	ee25 6b05 	vmul.f64	d6, d5, d5
 8007ac6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8007aca:	ed91 4b08 	vldr	d4, [r1, #32]
 8007ace:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007ad2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8007ad6:	eea5 4b03 	vfma.f64	d4, d5, d3
 8007ada:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8007ade:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007ae2:	ee26 6b06 	vmul.f64	d6, d6, d6
 8007ae6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8007aea:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8007aee:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8007af2:	eea5 4b03 	vfma.f64	d4, d5, d3
 8007af6:	1940      	adds	r0, r0, r5
 8007af8:	2700      	movs	r7, #0
 8007afa:	eb17 020c 	adds.w	r2, r7, ip
 8007afe:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8007b02:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	d176      	bne.n	8007bf8 <pow+0x480>
 8007b0a:	42bd      	cmp	r5, r7
 8007b0c:	db2a      	blt.n	8007b64 <pow+0x3ec>
 8007b0e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8007b12:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8007b16:	4610      	mov	r0, r2
 8007b18:	ec41 0b10 	vmov	d0, r0, r1
 8007b1c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8007b20:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8007b40 <pow+0x3c8>
 8007b24:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007b28:	b007      	add	sp, #28
 8007b2a:	ecbd 8b0a 	vpop	{d8-d12}
 8007b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b32:	f000 b8cd 	b.w	8007cd0 <__math_check_oflow>
 8007b36:	bf00      	nop
 8007b38:	00000000 	.word	0x00000000
 8007b3c:	43300000 	.word	0x43300000
 8007b40:	00000000 	.word	0x00000000
 8007b44:	7f000000 	.word	0x7f000000
 8007b48:	3ff00000 	.word	0x3ff00000
 8007b4c:	fff00000 	.word	0xfff00000
 8007b50:	ffe00000 	.word	0xffe00000
 8007b54:	7fe00000 	.word	0x7fe00000
 8007b58:	c0196aab 	.word	0xc0196aab
 8007b5c:	080080c0 	.word	0x080080c0
 8007b60:	08009108 	.word	0x08009108
 8007b64:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007b68:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	ec41 0b15 	vmov	d5, r0, r1
 8007b72:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8007b76:	ee27 6b05 	vmul.f64	d6, d7, d5
 8007b7a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8007b7e:	eeb0 4bc7 	vabs.f64	d4, d7
 8007b82:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8007b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8007c08 <pow+0x490>
 8007b8e:	d52a      	bpl.n	8007be6 <pow+0x46e>
 8007b90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b94:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8007ba0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8007ba4:	bf58      	it	pl
 8007ba6:	eeb0 4b43 	vmovpl.f64	d4, d3
 8007baa:	ee37 3b04 	vadd.f64	d3, d7, d4
 8007bae:	ee34 6b43 	vsub.f64	d6, d4, d3
 8007bb2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007bb6:	ee36 6b05 	vadd.f64	d6, d6, d5
 8007bba:	ee36 6b03 	vadd.f64	d6, d6, d3
 8007bbe:	ee36 7b44 	vsub.f64	d7, d6, d4
 8007bc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bca:	d104      	bne.n	8007bd6 <pow+0x45e>
 8007bcc:	4632      	mov	r2, r6
 8007bce:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007bd2:	ec43 2b17 	vmov	d7, r2, r3
 8007bd6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bda:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bde:	ee26 6b00 	vmul.f64	d6, d6, d0
 8007be2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007be6:	ee27 0b00 	vmul.f64	d0, d7, d0
 8007bea:	b007      	add	sp, #28
 8007bec:	ecbd 8b0a 	vpop	{d8-d12}
 8007bf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	f000 b863 	b.w	8007cbe <__math_check_uflow>
 8007bf8:	ec43 2b10 	vmov	d0, r2, r3
 8007bfc:	eea7 0b00 	vfma.f64	d0, d7, d0
 8007c00:	e625      	b.n	800784e <pow+0xd6>
 8007c02:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8007c10 <pow+0x498>
 8007c06:	e622      	b.n	800784e <pow+0xd6>
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	00100000 	.word	0x00100000
	...

08007c18 <with_errno>:
 8007c18:	b513      	push	{r0, r1, r4, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	ed8d 0b00 	vstr	d0, [sp]
 8007c20:	f7fd fd54 	bl	80056cc <__errno>
 8007c24:	ed9d 0b00 	vldr	d0, [sp]
 8007c28:	6004      	str	r4, [r0, #0]
 8007c2a:	b002      	add	sp, #8
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <xflow>:
 8007c2e:	b082      	sub	sp, #8
 8007c30:	b158      	cbz	r0, 8007c4a <xflow+0x1c>
 8007c32:	eeb1 7b40 	vneg.f64	d7, d0
 8007c36:	ed8d 7b00 	vstr	d7, [sp]
 8007c3a:	ed9d 7b00 	vldr	d7, [sp]
 8007c3e:	2022      	movs	r0, #34	; 0x22
 8007c40:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007c44:	b002      	add	sp, #8
 8007c46:	f7ff bfe7 	b.w	8007c18 <with_errno>
 8007c4a:	eeb0 7b40 	vmov.f64	d7, d0
 8007c4e:	e7f2      	b.n	8007c36 <xflow+0x8>

08007c50 <__math_uflow>:
 8007c50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007c58 <__math_uflow+0x8>
 8007c54:	f7ff bfeb 	b.w	8007c2e <xflow>
 8007c58:	00000000 	.word	0x00000000
 8007c5c:	10000000 	.word	0x10000000

08007c60 <__math_oflow>:
 8007c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007c68 <__math_oflow+0x8>
 8007c64:	f7ff bfe3 	b.w	8007c2e <xflow>
 8007c68:	00000000 	.word	0x00000000
 8007c6c:	70000000 	.word	0x70000000

08007c70 <__math_divzero>:
 8007c70:	b082      	sub	sp, #8
 8007c72:	2800      	cmp	r0, #0
 8007c74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007c78:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8007c7c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8007c80:	ed8d 7b00 	vstr	d7, [sp]
 8007c84:	ed9d 0b00 	vldr	d0, [sp]
 8007c88:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8007c98 <__math_divzero+0x28>
 8007c8c:	2022      	movs	r0, #34	; 0x22
 8007c8e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8007c92:	b002      	add	sp, #8
 8007c94:	f7ff bfc0 	b.w	8007c18 <with_errno>
	...

08007ca0 <__math_invalid>:
 8007ca0:	eeb0 7b40 	vmov.f64	d7, d0
 8007ca4:	eeb4 7b47 	vcmp.f64	d7, d7
 8007ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cac:	ee30 6b40 	vsub.f64	d6, d0, d0
 8007cb0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8007cb4:	d602      	bvs.n	8007cbc <__math_invalid+0x1c>
 8007cb6:	2021      	movs	r0, #33	; 0x21
 8007cb8:	f7ff bfae 	b.w	8007c18 <with_errno>
 8007cbc:	4770      	bx	lr

08007cbe <__math_check_uflow>:
 8007cbe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc6:	d102      	bne.n	8007cce <__math_check_uflow+0x10>
 8007cc8:	2022      	movs	r0, #34	; 0x22
 8007cca:	f7ff bfa5 	b.w	8007c18 <with_errno>
 8007cce:	4770      	bx	lr

08007cd0 <__math_check_oflow>:
 8007cd0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8007cf0 <__math_check_oflow+0x20>
 8007cd4:	eeb0 7bc0 	vabs.f64	d7, d0
 8007cd8:	eeb4 7b46 	vcmp.f64	d7, d6
 8007cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce0:	dd02      	ble.n	8007ce8 <__math_check_oflow+0x18>
 8007ce2:	2022      	movs	r0, #34	; 0x22
 8007ce4:	f7ff bf98 	b.w	8007c18 <with_errno>
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	f3af 8000 	nop.w
 8007cf0:	ffffffff 	.word	0xffffffff
 8007cf4:	7fefffff 	.word	0x7fefffff

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
