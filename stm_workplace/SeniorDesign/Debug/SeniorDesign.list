
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc8  0800c3b0  0800c3b0  0001c3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e178  0800e178  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e178  0800e178  0001e178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e180  0800e180  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e180  0800e180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e184  0800e184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005280  200001e4  0800e36c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005464  0800e36c  00025464  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024812  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef8  00000000  00000000  00044a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca8  00000000  00000000  00049960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001625  00000000  00000000  0004b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ce97  00000000  00000000  0004cc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023ff4  00000000  00000000  00079ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111be4  00000000  00000000  0009dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089d0  00000000  00000000  001af69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b806c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c398 	.word	0x0800c398

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800c398 	.word	0x0800c398

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000600:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000630 <setFlowRate+0x44>
 8000604:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000608:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000634 <setFlowRate+0x48>
 800060c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000614:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000638 <setFlowRate+0x4c>
 8000618:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800061c:	eef0 7a66 	vmov.f32	s15, s13

}
 8000620:	eeb0 0a67 	vmov.f32	s0, s15
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	3ca3d70a 	.word	0x3ca3d70a
 8000634:	00000001 	.word	0x00000001
 8000638:	3fc147ae 	.word	0x3fc147ae

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	pumpTestsParameters[0].currentState = &pumpTestsParameters[0].stateList[0];
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <main+0x60>)
 8000642:	4a16      	ldr	r2, [pc, #88]	; (800069c <main+0x60>)
 8000644:	60da      	str	r2, [r3, #12]
	pumpTestsParameters[1].currentState = &pumpTestsParameters[1].stateList[0];
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <main+0x60>)
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <main+0x64>)
 800064a:	655a      	str	r2, [r3, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 faf9 	bl	8001c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f834 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f966 	bl	8000924 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000658:	f000 f906 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800065c:	f000 f934 	bl	80008c8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000660:	f000 f89e 	bl	80007a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8000664:	f000 f8d6 	bl	8000814 <MX_DAC_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000668:	f005 fe12 	bl	8006290 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <main+0x68>)
 800066e:	2100      	movs	r1, #0
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <main+0x6c>)
 8000672:	f005 fe77 	bl	8006364 <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <main+0x70>)
 800067a:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <main+0x74>)
 800067e:	2100      	movs	r1, #0
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x78>)
 8000682:	f005 fe6f 	bl	8006364 <osThreadNew>
 8000686:	4603      	mov	r3, r0
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <main+0x7c>)
 800068a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <main+0x7c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f005 ff0d 	bl	80064b0 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000696:	f005 fe2f 	bl	80062f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0x5e>
 800069c:	200007f4 	.word	0x200007f4
 80006a0:	2000083c 	.word	0x2000083c
 80006a4:	0800c4ec 	.word	0x0800c4ec
 80006a8:	08000b4d 	.word	0x08000b4d
 80006ac:	200007ec 	.word	0x200007ec
 80006b0:	0800c510 	.word	0x0800c510
 80006b4:	08001339 	.word	0x08001339
 80006b8:	200007f0 	.word	0x200007f0

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f009 faa7 	bl	8009c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e0:	f002 fd06 	bl	80030f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <SystemClock_Config+0xdc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <SystemClock_Config+0xdc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xdc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemClock_Config+0xe0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a25      	ldr	r2, [pc, #148]	; (800079c <SystemClock_Config+0xe0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xe0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000730:	2360      	movs	r3, #96	; 0x60
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fd33 	bl	80031b0 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000750:	f000 fe1a 	bl	8001388 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f002 fcdc 	bl	8003110 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075e:	f000 fe13 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2103      	movs	r1, #3
 800077e:	4618      	mov	r0, r3
 8000780:	f002 ffc4 	bl	800370c <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800078a:	f000 fdfd 	bl	8001388 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_ADC1_Init+0x68>)
 80007a6:	4a19      	ldr	r2, [pc, #100]	; (800080c <MX_ADC1_Init+0x6c>)
 80007a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_ADC1_Init+0x68>)
 80007ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_ADC1_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_ADC1_Init+0x68>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_ADC1_Init+0x68>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_ADC1_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_ADC1_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_ADC1_Init+0x68>)
 80007d4:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <MX_ADC1_Init+0x70>)
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_ADC1_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_ADC1_Init+0x68>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_ADC1_Init+0x68>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_ADC1_Init+0x68>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_ADC1_Init+0x68>)
 80007f4:	f001 fa76 	bl	8001ce4 <HAL_ADC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80007fe:	f000 fdc3 	bl	8001388 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000200 	.word	0x20000200
 800080c:	40012000 	.word	0x40012000
 8000810:	0f000001 	.word	0x0f000001

08000814 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_DAC_Init+0x4c>)
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <MX_DAC_Init+0x50>)
 8000826:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_DAC_Init+0x4c>)
 800082a:	f001 ff6b 	bl	8002704 <HAL_DAC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000834:	f000 fda8 	bl	8001388 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_DAC_Init+0x4c>)
 8000848:	f002 f859 	bl	80028fe <HAL_DAC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000852:	f000 fd99 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000248 	.word	0x20000248
 8000864:	40007400 	.word	0x40007400

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART3_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART3_UART_Init+0x58>)
 80008ac:	f004 f88e 	bl	80049cc <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 fd67 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000025c 	.word	0x2000025c
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2206      	movs	r2, #6
 80008d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2202      	movs	r2, #2
 80008de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2201      	movs	r2, #1
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	f002 faa7 	bl	8002e5e <HAL_PCD_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 fd37 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200002e4 	.word	0x200002e4

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b7e      	ldr	r3, [pc, #504]	; (8000b34 <MX_GPIO_Init+0x210>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a7d      	ldr	r2, [pc, #500]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b7b      	ldr	r3, [pc, #492]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000952:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a77      	ldr	r2, [pc, #476]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000958:	f043 0320 	orr.w	r3, r3, #32
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b75      	ldr	r3, [pc, #468]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0320 	and.w	r3, r3, #32
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	4b72      	ldr	r3, [pc, #456]	; (8000b34 <MX_GPIO_Init+0x210>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a71      	ldr	r2, [pc, #452]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b6f      	ldr	r3, [pc, #444]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b6c      	ldr	r3, [pc, #432]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a6b      	ldr	r2, [pc, #428]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b69      	ldr	r3, [pc, #420]	; (8000b34 <MX_GPIO_Init+0x210>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b66      	ldr	r3, [pc, #408]	; (8000b34 <MX_GPIO_Init+0x210>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a65      	ldr	r2, [pc, #404]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b63      	ldr	r3, [pc, #396]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a5f      	ldr	r2, [pc, #380]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ca:	4b5a      	ldr	r3, [pc, #360]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a59      	ldr	r2, [pc, #356]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b57      	ldr	r3, [pc, #348]	; (8000b34 <MX_GPIO_Init+0x210>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2107      	movs	r1, #7
 80009e6:	4854      	ldr	r0, [pc, #336]	; (8000b38 <MX_GPIO_Init+0x214>)
 80009e8:	f002 fa20 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f244 0181 	movw	r1, #16513	; 0x4081
 80009f2:	4852      	ldr	r0, [pc, #328]	; (8000b3c <MX_GPIO_Init+0x218>)
 80009f4:	f002 fa1a 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	4850      	ldr	r0, [pc, #320]	; (8000b40 <MX_GPIO_Init+0x21c>)
 80009fe:	f002 fa15 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	484a      	ldr	r0, [pc, #296]	; (8000b44 <MX_GPIO_Init+0x220>)
 8000a1a:	f002 f85b 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4840      	ldr	r0, [pc, #256]	; (8000b38 <MX_GPIO_Init+0x214>)
 8000a36:	f002 f84d 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a3a:	2332      	movs	r3, #50	; 0x32
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4a:	230b      	movs	r3, #11
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	483b      	ldr	r0, [pc, #236]	; (8000b44 <MX_GPIO_Init+0x220>)
 8000a56:	f002 f83d 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a5a:	2386      	movs	r3, #134	; 0x86
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6a:	230b      	movs	r3, #11
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4834      	ldr	r0, [pc, #208]	; (8000b48 <MX_GPIO_Init+0x224>)
 8000a76:	f002 f82d 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a7a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	482a      	ldr	r0, [pc, #168]	; (8000b3c <MX_GPIO_Init+0x218>)
 8000a94:	f002 f81e 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_GPIO_Init+0x218>)
 8000ab6:	f002 f80d 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aba:	2340      	movs	r3, #64	; 0x40
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481b      	ldr	r0, [pc, #108]	; (8000b40 <MX_GPIO_Init+0x21c>)
 8000ad2:	f001 ffff 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4815      	ldr	r0, [pc, #84]	; (8000b40 <MX_GPIO_Init+0x21c>)
 8000aea:	f001 fff3 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI3_Pin DI2_Pin DI1_Pin */
  GPIO_InitStruct.Pin = DI3_Pin|DI2_Pin|DI1_Pin;
 8000aee:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <MX_GPIO_Init+0x220>)
 8000b04:	f001 ffe6 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_GPIO_Init+0x21c>)
 8000b26:	f001 ffd5 	bl	8002ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	; 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020000 	.word	0x40020000

08000b4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(pumpTestsParameters[pump].eNextState) {
 8000b54:	4bb5      	ldr	r3, [pc, #724]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4ab5      	ldr	r2, [pc, #724]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	440b      	add	r3, r1
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	3310      	adds	r3, #16
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	f200 83bb 	bhi.w	80012e6 <StartDefaultTask+0x79a>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <StartDefaultTask+0x2c>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000bb9 	.word	0x08000bb9
 8000b7c:	08000c7b 	.word	0x08000c7b
 8000b80:	08000cb3 	.word	0x08000cb3
 8000b84:	08000d7f 	.word	0x08000d7f
 8000b88:	08000dc7 	.word	0x08000dc7
 8000b8c:	08000e71 	.word	0x08000e71
 8000b90:	08000eb9 	.word	0x08000eb9
 8000b94:	08000f97 	.word	0x08000f97
 8000b98:	08000fdf 	.word	0x08000fdf
 8000b9c:	080010bd 	.word	0x080010bd
 8000ba0:	080010ed 	.word	0x080010ed
 8000ba4:	08001191 	.word	0x08001191
 8000ba8:	080011d9 	.word	0x080011d9
 8000bac:	08001249 	.word	0x08001249
 8000bb0:	08001301 	.word	0x08001301
 8000bb4:	080012c5 	.word	0x080012c5
	  			case START:
					volts = setFlowRate(0);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fd17 	bl	80005ec <setFlowRate>
 8000bbe:	eef0 7a40 	vmov.f32	s15, s0
 8000bc2:	4b9c      	ldr	r3, [pc, #624]	; (8000e34 <StartDefaultTask+0x2e8>)
 8000bc4:	edc3 7a00 	vstr	s15, [r3]
					dacSet(&hdac, DAC_CHANNEL_1, volts);
 8000bc8:	4b9a      	ldr	r3, [pc, #616]	; (8000e34 <StartDefaultTask+0x2e8>)
 8000bca:	edd3 7a00 	vldr	s15, [r3]
 8000bce:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4898      	ldr	r0, [pc, #608]	; (8000e38 <StartDefaultTask+0x2ec>)
 8000bd6:	f000 fbdf 	bl	8001398 <dacSet>

					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4897      	ldr	r0, [pc, #604]	; (8000e3c <StartDefaultTask+0x2f0>)
 8000be0:	f002 f924 	bl	8002e2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2102      	movs	r1, #2
 8000be8:	4894      	ldr	r0, [pc, #592]	; (8000e3c <StartDefaultTask+0x2f0>)
 8000bea:	f002 f91f 	bl	8002e2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4892      	ldr	r0, [pc, #584]	; (8000e3c <StartDefaultTask+0x2f0>)
 8000bf4:	f002 f91a 	bl	8002e2c <HAL_GPIO_WritePin>

//	  				osDelay(1000);


					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000bf8:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	3310      	adds	r3, #16
 8000c08:	4a89      	ldr	r2, [pc, #548]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000c0a:	1899      	adds	r1, r3, r2
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2201      	movs	r2, #1
 8000c12:	488b      	ldr	r0, [pc, #556]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000c14:	f003 ff28 	bl	8004a68 <HAL_UART_Transmit>

					// Receives State List
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[pump].stateList, 10, HAL_MAX_DELAY);
 8000c18:	4b84      	ldr	r3, [pc, #528]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4613      	mov	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	4413      	add	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4a82      	ldr	r2, [pc, #520]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000c28:	1899      	adds	r1, r3, r2
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	220a      	movs	r2, #10
 8000c30:	4883      	ldr	r0, [pc, #524]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000c32:	f003 ff9c 	bl	8004b6e <HAL_UART_Receive>

	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000c36:	4b7d      	ldr	r3, [pc, #500]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	497c      	ldr	r1, [pc, #496]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	330c      	adds	r3, #12
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	1c48      	adds	r0, r1, #1
 8000c4e:	4c78      	ldr	r4, [pc, #480]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000c50:	4613      	mov	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	4423      	add	r3, r4
 8000c5a:	330c      	adds	r3, #12
 8000c5c:	6018      	str	r0, [r3, #0]
 8000c5e:	4b73      	ldr	r3, [pc, #460]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	7809      	ldrb	r1, [r1, #0]
 8000c66:	4a72      	ldr	r2, [pc, #456]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000c68:	4603      	mov	r3, r0
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4403      	add	r3, r0
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	3310      	adds	r3, #16
 8000c74:	460a      	mov	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]

	  				break;
 8000c78:	e343      	b.n	8001302 <StartDefaultTask+0x7b6>
//	  				solenoidClose();
//	  				vacuumGaugeADC(&hadc1);


					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000c7a:	4b6c      	ldr	r3, [pc, #432]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4613      	mov	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	3310      	adds	r3, #16
 8000c8a:	4a69      	ldr	r2, [pc, #420]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000c8c:	1899      	adds	r1, r3, r2
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	2201      	movs	r2, #1
 8000c94:	486a      	ldr	r0, [pc, #424]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000c96:	f003 fee7 	bl	8004a68 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].VATI[0], 8, HAL_MAX_DELAY);
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	4968      	ldr	r1, [pc, #416]	; (8000e44 <StartDefaultTask+0x2f8>)
 8000ca2:	4867      	ldr	r0, [pc, #412]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000ca4:	f003 ff63 	bl	8004b6e <HAL_UART_Receive>

					osDelay(1000);
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f005 fc68 	bl	8006580 <osDelay>
	  				//pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
	  				break;
 8000cb0:	e327      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			case VAC_ACHIEVMENT_TEST:
	  				volts = adcGet(&hadc1);
 8000cb2:	4865      	ldr	r0, [pc, #404]	; (8000e48 <StartDefaultTask+0x2fc>)
 8000cb4:	f000 fba4 	bl	8001400 <adcGet>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
 8000cbc:	4b5d      	ldr	r3, [pc, #372]	; (8000e34 <StartDefaultTask+0x2e8>)
 8000cbe:	edc3 7a00 	vstr	s15, [r3]
//	  				vacuumScale = readVacuum(volts);
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST Scanning\r\n");
 8000cc2:	4962      	ldr	r1, [pc, #392]	; (8000e4c <StartDefaultTask+0x300>)
 8000cc4:	4862      	ldr	r0, [pc, #392]	; (8000e50 <StartDefaultTask+0x304>)
 8000cc6:	f008 ff47 	bl	8009b58 <siprintf>
	  				printMsg(msg, &huart3);
 8000cca:	495d      	ldr	r1, [pc, #372]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000ccc:	4860      	ldr	r0, [pc, #384]	; (8000e50 <StartDefaultTask+0x304>)
 8000cce:	f000 fbd5 	bl	800147c <printMsg>
	  				osThreadResume(sendDataHandle);
 8000cd2:	4b60      	ldr	r3, [pc, #384]	; (8000e54 <StartDefaultTask+0x308>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f005 fc1e 	bl	8006518 <osThreadResume>
	  				osDelay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce0:	f005 fc4e 	bl	8006580 <osDelay>


	  				vacuumScale = 50.0;
 8000ce4:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <StartDefaultTask+0x30c>)
 8000ce6:	4a5d      	ldr	r2, [pc, #372]	; (8000e5c <StartDefaultTask+0x310>)
 8000ce8:	601a      	str	r2, [r3, #0]
	  				if(vacuumScale >= 50){
 8000cea:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <StartDefaultTask+0x30c>)
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000e60 <StartDefaultTask+0x314>
 8000cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfc:	db32      	blt.n	8000d64 <StartDefaultTask+0x218>
		  				sprintf(msg,"vacuum of 50 mTorr reached\r\n");
 8000cfe:	4959      	ldr	r1, [pc, #356]	; (8000e64 <StartDefaultTask+0x318>)
 8000d00:	4853      	ldr	r0, [pc, #332]	; (8000e50 <StartDefaultTask+0x304>)
 8000d02:	f008 ff29 	bl	8009b58 <siprintf>
		  				printMsg(msg, &huart3);
 8000d06:	494e      	ldr	r1, [pc, #312]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000d08:	4851      	ldr	r0, [pc, #324]	; (8000e50 <StartDefaultTask+0x304>)
 8000d0a:	f000 fbb7 	bl	800147c <printMsg>
		  				osThreadSuspend(sendDataHandle);
 8000d0e:	4b51      	ldr	r3, [pc, #324]	; (8000e54 <StartDefaultTask+0x308>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 fbcc 	bl	80064b0 <osThreadSuspend>
		  				osDelay(1000);
 8000d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1c:	f005 fc30 	bl	8006580 <osDelay>
		  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000d20:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4942      	ldr	r1, [pc, #264]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	440b      	add	r3, r1
 8000d32:	330c      	adds	r3, #12
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	1c48      	adds	r0, r1, #1
 8000d38:	4c3d      	ldr	r4, [pc, #244]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4423      	add	r3, r4
 8000d44:	330c      	adds	r3, #12
 8000d46:	6018      	str	r0, [r3, #0]
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	7809      	ldrb	r1, [r1, #0]
 8000d50:	4a37      	ldr	r2, [pc, #220]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000d52:	4603      	mov	r3, r0
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4403      	add	r3, r0
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3310      	adds	r3, #16
 8000d5e:	460a      	mov	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
	  				}

	  				//osDelay(100);

	  				break;
 8000d62:	e2ce      	b.n	8001302 <StartDefaultTask+0x7b6>
	  					pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
 8000d64:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
 8000d76:	3310      	adds	r3, #16
 8000d78:	2202      	movs	r2, #2
 8000d7a:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d7c:	e2c1      	b.n	8001302 <StartDefaultTask+0x7b6>
//	  				sprintf(msg,"SPECIAL_TEST_INIT\r\n");
//	  				printMsg(msg, &huart3);
//	  				osDelay(1000);

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4613      	mov	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	3310      	adds	r3, #16
 8000d8e:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000d90:	1899      	adds	r1, r3, r2
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	2201      	movs	r2, #1
 8000d98:	4829      	ldr	r0, [pc, #164]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000d9a:	f003 fe65 	bl	8004a68 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].STI[0], 13, HAL_MAX_DELAY);
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	220d      	movs	r2, #13
 8000da4:	4930      	ldr	r1, [pc, #192]	; (8000e68 <StartDefaultTask+0x31c>)
 8000da6:	4826      	ldr	r0, [pc, #152]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000da8:	f003 fee1 	bl	8004b6e <HAL_UART_Receive>

	  				pumpTestsParameters[pump].eNextState = SPECIAL_TEST;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000db4:	460b      	mov	r3, r1
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	440b      	add	r3, r1
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	3310      	adds	r3, #16
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	701a      	strb	r2, [r3, #0]

	  				break;
 8000dc4:	e29d      	b.n	8001302 <StartDefaultTask+0x7b6>

	  			case SPECIAL_TEST:
	  				sprintf(msg,"SPECIAL_TEST Scanning\r\n");
 8000dc6:	4929      	ldr	r1, [pc, #164]	; (8000e6c <StartDefaultTask+0x320>)
 8000dc8:	4821      	ldr	r0, [pc, #132]	; (8000e50 <StartDefaultTask+0x304>)
 8000dca:	f008 fec5 	bl	8009b58 <siprintf>
					printMsg(msg, &huart3);
 8000dce:	491c      	ldr	r1, [pc, #112]	; (8000e40 <StartDefaultTask+0x2f4>)
 8000dd0:	481f      	ldr	r0, [pc, #124]	; (8000e50 <StartDefaultTask+0x304>)
 8000dd2:	f000 fb53 	bl	800147c <printMsg>
					osThreadResume(sendDataHandle);
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <StartDefaultTask+0x308>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f005 fb9c 	bl	8006518 <osThreadResume>
					osDelay(1000);
 8000de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de4:	f005 fbcc 	bl	8006580 <osDelay>

	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4910      	ldr	r1, [pc, #64]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	440b      	add	r3, r1
 8000dfa:	330c      	adds	r3, #12
 8000dfc:	6819      	ldr	r1, [r3, #0]
 8000dfe:	1c48      	adds	r0, r1, #1
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4423      	add	r3, r4
 8000e0c:	330c      	adds	r3, #12
 8000e0e:	6018      	str	r0, [r3, #0]
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <StartDefaultTask+0x2e0>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	7809      	ldrb	r1, [r1, #0]
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <StartDefaultTask+0x2e4>)
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4403      	add	r3, r0
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4413      	add	r3, r2
 8000e24:	3310      	adds	r3, #16
 8000e26:	460a      	mov	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]

					break;
 8000e2a:	e26a      	b.n	8001302 <StartDefaultTask+0x7b6>
 8000e2c:	20000884 	.word	0x20000884
 8000e30:	200007f4 	.word	0x200007f4
 8000e34:	20000888 	.word	0x20000888
 8000e38:	20000248 	.word	0x20000248
 8000e3c:	40021400 	.word	0x40021400
 8000e40:	2000025c 	.word	0x2000025c
 8000e44:	20000805 	.word	0x20000805
 8000e48:	20000200 	.word	0x20000200
 8000e4c:	0800c3cc 	.word	0x0800c3cc
 8000e50:	20000890 	.word	0x20000890
 8000e54:	200007f0 	.word	0x200007f0
 8000e58:	2000088c 	.word	0x2000088c
 8000e5c:	42480000 	.word	0x42480000
 8000e60:	42480000 	.word	0x42480000
 8000e64:	0800c3ec 	.word	0x0800c3ec
 8000e68:	2000080d 	.word	0x2000080d
 8000e6c:	0800c40c 	.word	0x0800c40c
//	  				solenoidOpen();
//	  				solenoidClose();
//	  				vacuumGaugeADC(&hadc1);

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000e70:	4bba      	ldr	r3, [pc, #744]	; (800115c <StartDefaultTask+0x610>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4613      	mov	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	3310      	adds	r3, #16
 8000e80:	4ab7      	ldr	r2, [pc, #732]	; (8001160 <StartDefaultTask+0x614>)
 8000e82:	1899      	adds	r1, r3, r2
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	2201      	movs	r2, #1
 8000e8a:	48b6      	ldr	r0, [pc, #728]	; (8001164 <StartDefaultTask+0x618>)
 8000e8c:	f003 fdec 	bl	8004a68 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].WUI[0], 8, HAL_MAX_DELAY);
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	2208      	movs	r2, #8
 8000e96:	49b4      	ldr	r1, [pc, #720]	; (8001168 <StartDefaultTask+0x61c>)
 8000e98:	48b2      	ldr	r0, [pc, #712]	; (8001164 <StartDefaultTask+0x618>)
 8000e9a:	f003 fe68 	bl	8004b6e <HAL_UART_Receive>

	  				pumpTestsParameters[pump].eNextState = WARM_UP;
 8000e9e:	4baf      	ldr	r3, [pc, #700]	; (800115c <StartDefaultTask+0x610>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4aae      	ldr	r2, [pc, #696]	; (8001160 <StartDefaultTask+0x614>)
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	3310      	adds	r3, #16
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	701a      	strb	r2, [r3, #0]
	  				break;
 8000eb6:	e224      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			case WARM_UP:
	  				float temp = 0;
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
	  				int timer = 3;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"WARM_UP Scanning\r\n");
 8000ec2:	49aa      	ldr	r1, [pc, #680]	; (800116c <StartDefaultTask+0x620>)
 8000ec4:	48aa      	ldr	r0, [pc, #680]	; (8001170 <StartDefaultTask+0x624>)
 8000ec6:	f008 fe47 	bl	8009b58 <siprintf>
	  				printMsg(msg, &huart3);
 8000eca:	49a6      	ldr	r1, [pc, #664]	; (8001164 <StartDefaultTask+0x618>)
 8000ecc:	48a8      	ldr	r0, [pc, #672]	; (8001170 <StartDefaultTask+0x624>)
 8000ece:	f000 fad5 	bl	800147c <printMsg>
	  				osThreadResume(sendDataHandle);
 8000ed2:	4ba8      	ldr	r3, [pc, #672]	; (8001174 <StartDefaultTask+0x628>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 fb1e 	bl	8006518 <osThreadResume>
	  				osDelay(1000);
 8000edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee0:	f005 fb4e 	bl	8006580 <osDelay>


	  				if(temp > 100){
 8000ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ee8:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001178 <StartDefaultTask+0x62c>
 8000eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	dd0c      	ble.n	8000f10 <StartDefaultTask+0x3c4>
//	  					test failed
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8000ef6:	4b99      	ldr	r3, [pc, #612]	; (800115c <StartDefaultTask+0x610>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4a98      	ldr	r2, [pc, #608]	; (8001160 <StartDefaultTask+0x614>)
 8000efe:	460b      	mov	r3, r1
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4413      	add	r3, r2
 8000f08:	3310      	adds	r3, #16
 8000f0a:	220e      	movs	r2, #14
 8000f0c:	701a      	strb	r2, [r3, #0]
		  				osDelay(1000);
	  				}else{
	  					pumpTestsParameters[pump].eNextState = WARM_UP;
	  				}
	  				//osDelay(250);
	  				break;
 8000f0e:	e1f8      	b.n	8001302 <StartDefaultTask+0x7b6>
	  				}else if(timer >= 3){
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	dd32      	ble.n	8000f7c <StartDefaultTask+0x430>
		  				sprintf(msg,"Time is up: success\r\n");
 8000f16:	4999      	ldr	r1, [pc, #612]	; (800117c <StartDefaultTask+0x630>)
 8000f18:	4895      	ldr	r0, [pc, #596]	; (8001170 <StartDefaultTask+0x624>)
 8000f1a:	f008 fe1d 	bl	8009b58 <siprintf>
		  				printMsg(msg, &huart3);
 8000f1e:	4991      	ldr	r1, [pc, #580]	; (8001164 <StartDefaultTask+0x618>)
 8000f20:	4893      	ldr	r0, [pc, #588]	; (8001170 <StartDefaultTask+0x624>)
 8000f22:	f000 faab 	bl	800147c <printMsg>
		  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000f26:	4b8d      	ldr	r3, [pc, #564]	; (800115c <StartDefaultTask+0x610>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	498c      	ldr	r1, [pc, #560]	; (8001160 <StartDefaultTask+0x614>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	330c      	adds	r3, #12
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	1c48      	adds	r0, r1, #1
 8000f3e:	4c88      	ldr	r4, [pc, #544]	; (8001160 <StartDefaultTask+0x614>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4423      	add	r3, r4
 8000f4a:	330c      	adds	r3, #12
 8000f4c:	6018      	str	r0, [r3, #0]
 8000f4e:	4b83      	ldr	r3, [pc, #524]	; (800115c <StartDefaultTask+0x610>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	7809      	ldrb	r1, [r1, #0]
 8000f56:	4a82      	ldr	r2, [pc, #520]	; (8001160 <StartDefaultTask+0x614>)
 8000f58:	4603      	mov	r3, r0
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	4403      	add	r3, r0
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4413      	add	r3, r2
 8000f62:	3310      	adds	r3, #16
 8000f64:	460a      	mov	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
		  				osThreadSuspend(sendDataHandle);
 8000f68:	4b82      	ldr	r3, [pc, #520]	; (8001174 <StartDefaultTask+0x628>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f005 fa9f 	bl	80064b0 <osThreadSuspend>
		  				osDelay(1000);
 8000f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f76:	f005 fb03 	bl	8006580 <osDelay>
	  				break;
 8000f7a:	e1c2      	b.n	8001302 <StartDefaultTask+0x7b6>
	  					pumpTestsParameters[pump].eNextState = WARM_UP;
 8000f7c:	4b77      	ldr	r3, [pc, #476]	; (800115c <StartDefaultTask+0x610>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4a77      	ldr	r2, [pc, #476]	; (8001160 <StartDefaultTask+0x614>)
 8000f84:	460b      	mov	r3, r1
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3310      	adds	r3, #16
 8000f90:	2206      	movs	r2, #6
 8000f92:	701a      	strb	r2, [r3, #0]
	  				break;
 8000f94:	e1b5      	b.n	8001302 <StartDefaultTask+0x7b6>
//	  				solenoidOpen();
//	  				solenoidClose();
//	  				flowControllerADC(&hadc1);

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000f96:	4b71      	ldr	r3, [pc, #452]	; (800115c <StartDefaultTask+0x610>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	3310      	adds	r3, #16
 8000fa6:	4a6e      	ldr	r2, [pc, #440]	; (8001160 <StartDefaultTask+0x614>)
 8000fa8:	1899      	adds	r1, r3, r2
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	2201      	movs	r2, #1
 8000fb0:	486c      	ldr	r0, [pc, #432]	; (8001164 <StartDefaultTask+0x618>)
 8000fb2:	f003 fd59 	bl	8004a68 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].LTI[0], 8, HAL_MAX_DELAY);
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	2208      	movs	r2, #8
 8000fbc:	4970      	ldr	r1, [pc, #448]	; (8001180 <StartDefaultTask+0x634>)
 8000fbe:	4869      	ldr	r0, [pc, #420]	; (8001164 <StartDefaultTask+0x618>)
 8000fc0:	f003 fdd5 	bl	8004b6e <HAL_UART_Receive>

	  				pumpTestsParameters[pump].eNextState = LOAD_TEST;
 8000fc4:	4b65      	ldr	r3, [pc, #404]	; (800115c <StartDefaultTask+0x610>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4a65      	ldr	r2, [pc, #404]	; (8001160 <StartDefaultTask+0x614>)
 8000fcc:	460b      	mov	r3, r1
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3310      	adds	r3, #16
 8000fd8:	2208      	movs	r2, #8
 8000fda:	701a      	strb	r2, [r3, #0]

	  				break;
 8000fdc:	e191      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			case LOAD_TEST:
	  				temp = 0;
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
	  				timer = 8;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"LOAD_TEST Scanning\r\n");
 8000fe8:	4966      	ldr	r1, [pc, #408]	; (8001184 <StartDefaultTask+0x638>)
 8000fea:	4861      	ldr	r0, [pc, #388]	; (8001170 <StartDefaultTask+0x624>)
 8000fec:	f008 fdb4 	bl	8009b58 <siprintf>
	  				printMsg(msg, &huart3);
 8000ff0:	495c      	ldr	r1, [pc, #368]	; (8001164 <StartDefaultTask+0x618>)
 8000ff2:	485f      	ldr	r0, [pc, #380]	; (8001170 <StartDefaultTask+0x624>)
 8000ff4:	f000 fa42 	bl	800147c <printMsg>
	  				osThreadResume(sendDataHandle);
 8000ff8:	4b5e      	ldr	r3, [pc, #376]	; (8001174 <StartDefaultTask+0x628>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fa8b 	bl	8006518 <osThreadResume>
	  				osDelay(1000);
 8001002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001006:	f005 fabb 	bl	8006580 <osDelay>


	  				if(temp > 100){
 800100a:	edd7 7a03 	vldr	s15, [r7, #12]
 800100e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001178 <StartDefaultTask+0x62c>
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	dd0c      	ble.n	8001036 <StartDefaultTask+0x4ea>
//	  					test failed
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 800101c:	4b4f      	ldr	r3, [pc, #316]	; (800115c <StartDefaultTask+0x610>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <StartDefaultTask+0x614>)
 8001024:	460b      	mov	r3, r1
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	3310      	adds	r3, #16
 8001030:	220e      	movs	r2, #14
 8001032:	701a      	strb	r2, [r3, #0]
		  				osDelay(1000);
	  				}else{
	  					pumpTestsParameters[pump].eNextState = LOAD_TEST;
	  				}

	  				break;
 8001034:	e165      	b.n	8001302 <StartDefaultTask+0x7b6>
	  				}else if(timer >= 8){
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b07      	cmp	r3, #7
 800103a:	dd32      	ble.n	80010a2 <StartDefaultTask+0x556>
		  				sprintf(msg,"Time is up: success\r\n");
 800103c:	494f      	ldr	r1, [pc, #316]	; (800117c <StartDefaultTask+0x630>)
 800103e:	484c      	ldr	r0, [pc, #304]	; (8001170 <StartDefaultTask+0x624>)
 8001040:	f008 fd8a 	bl	8009b58 <siprintf>
		  				printMsg(msg, &huart3);
 8001044:	4947      	ldr	r1, [pc, #284]	; (8001164 <StartDefaultTask+0x618>)
 8001046:	484a      	ldr	r0, [pc, #296]	; (8001170 <StartDefaultTask+0x624>)
 8001048:	f000 fa18 	bl	800147c <printMsg>
		  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 800104c:	4b43      	ldr	r3, [pc, #268]	; (800115c <StartDefaultTask+0x610>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4943      	ldr	r1, [pc, #268]	; (8001160 <StartDefaultTask+0x614>)
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	330c      	adds	r3, #12
 8001060:	6819      	ldr	r1, [r3, #0]
 8001062:	1c48      	adds	r0, r1, #1
 8001064:	4c3e      	ldr	r4, [pc, #248]	; (8001160 <StartDefaultTask+0x614>)
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4423      	add	r3, r4
 8001070:	330c      	adds	r3, #12
 8001072:	6018      	str	r0, [r3, #0]
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <StartDefaultTask+0x610>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	7809      	ldrb	r1, [r1, #0]
 800107c:	4a38      	ldr	r2, [pc, #224]	; (8001160 <StartDefaultTask+0x614>)
 800107e:	4603      	mov	r3, r0
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4403      	add	r3, r0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	3310      	adds	r3, #16
 800108a:	460a      	mov	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
		  				osThreadSuspend(sendDataHandle);
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <StartDefaultTask+0x628>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f005 fa0c 	bl	80064b0 <osThreadSuspend>
		  				osDelay(1000);
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	f005 fa70 	bl	8006580 <osDelay>
	  				break;
 80010a0:	e12f      	b.n	8001302 <StartDefaultTask+0x7b6>
	  					pumpTestsParameters[pump].eNextState = LOAD_TEST;
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <StartDefaultTask+0x610>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <StartDefaultTask+0x614>)
 80010aa:	460b      	mov	r3, r1
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4413      	add	r3, r2
 80010b4:	3310      	adds	r3, #16
 80010b6:	2208      	movs	r2, #8
 80010b8:	701a      	strb	r2, [r3, #0]
	  				break;
 80010ba:	e122      	b.n	8001302 <StartDefaultTask+0x7b6>
//	  				printMsg(msg, &huart3);
//	  				osDelay(1000);
//	  				pumpTestsParameters[pump].eNextState = OPERATION_TEST;

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <StartDefaultTask+0x610>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	3310      	adds	r3, #16
 80010cc:	4a24      	ldr	r2, [pc, #144]	; (8001160 <StartDefaultTask+0x614>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	2201      	movs	r2, #1
 80010d6:	4823      	ldr	r0, [pc, #140]	; (8001164 <StartDefaultTask+0x618>)
 80010d8:	f003 fcc6 	bl	8004a68 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].OTI[0], 8, HAL_MAX_DELAY);
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4929      	ldr	r1, [pc, #164]	; (8001188 <StartDefaultTask+0x63c>)
 80010e4:	481f      	ldr	r0, [pc, #124]	; (8001164 <StartDefaultTask+0x618>)
 80010e6:	f003 fd42 	bl	8004b6e <HAL_UART_Receive>


	  				break;
 80010ea:	e10a      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			case OPERATION_TEST:

	  				sprintf(msg,"OPERATION_TEST\r\n");
 80010ec:	4927      	ldr	r1, [pc, #156]	; (800118c <StartDefaultTask+0x640>)
 80010ee:	4820      	ldr	r0, [pc, #128]	; (8001170 <StartDefaultTask+0x624>)
 80010f0:	f008 fd32 	bl	8009b58 <siprintf>
	  				printMsg(msg, &huart3);
 80010f4:	491b      	ldr	r1, [pc, #108]	; (8001164 <StartDefaultTask+0x618>)
 80010f6:	481e      	ldr	r0, [pc, #120]	; (8001170 <StartDefaultTask+0x624>)
 80010f8:	f000 f9c0 	bl	800147c <printMsg>
	  				osThreadResume(sendDataHandle);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <StartDefaultTask+0x628>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f005 fa09 	bl	8006518 <osThreadResume>
	  				osDelay(1000);
 8001106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110a:	f005 fa39 	bl	8006580 <osDelay>
	  				osThreadSuspend(sendDataHandle);
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <StartDefaultTask+0x628>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f005 f9cc 	bl	80064b0 <osThreadSuspend>


	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <StartDefaultTask+0x610>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4910      	ldr	r1, [pc, #64]	; (8001160 <StartDefaultTask+0x614>)
 8001120:	4613      	mov	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	330c      	adds	r3, #12
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	1c48      	adds	r0, r1, #1
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <StartDefaultTask+0x614>)
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4423      	add	r3, r4
 800113c:	330c      	adds	r3, #12
 800113e:	6018      	str	r0, [r3, #0]
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <StartDefaultTask+0x610>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	7809      	ldrb	r1, [r1, #0]
 8001148:	4a05      	ldr	r2, [pc, #20]	; (8001160 <StartDefaultTask+0x614>)
 800114a:	4603      	mov	r3, r0
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4403      	add	r3, r0
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	3310      	adds	r3, #16
 8001156:	460a      	mov	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]

	  				break;
 800115a:	e0d2      	b.n	8001302 <StartDefaultTask+0x7b6>
 800115c:	20000884 	.word	0x20000884
 8001160:	200007f4 	.word	0x200007f4
 8001164:	2000025c 	.word	0x2000025c
 8001168:	2000081a 	.word	0x2000081a
 800116c:	0800c424 	.word	0x0800c424
 8001170:	20000890 	.word	0x20000890
 8001174:	200007f0 	.word	0x200007f0
 8001178:	42c80000 	.word	0x42c80000
 800117c:	0800c438 	.word	0x0800c438
 8001180:	20000822 	.word	0x20000822
 8001184:	0800c450 	.word	0x0800c450
 8001188:	2000082a 	.word	0x2000082a
 800118c:	0800c468 	.word	0x0800c468
//	  				sprintf(msg,"ULTIMATE_MEASURE_TEST_INIT\r\n");
//	  				printMsg(msg, &huart3);
//					osDelay(1000);

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001190:	4b5e      	ldr	r3, [pc, #376]	; (800130c <StartDefaultTask+0x7c0>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	3310      	adds	r3, #16
 80011a0:	4a5b      	ldr	r2, [pc, #364]	; (8001310 <StartDefaultTask+0x7c4>)
 80011a2:	1899      	adds	r1, r3, r2
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	2201      	movs	r2, #1
 80011aa:	485a      	ldr	r0, [pc, #360]	; (8001314 <StartDefaultTask+0x7c8>)
 80011ac:	f003 fc5c 	bl	8004a68 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].UMTI[0], 9, HAL_MAX_DELAY);
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	2209      	movs	r2, #9
 80011b6:	4958      	ldr	r1, [pc, #352]	; (8001318 <StartDefaultTask+0x7cc>)
 80011b8:	4856      	ldr	r0, [pc, #344]	; (8001314 <StartDefaultTask+0x7c8>)
 80011ba:	f003 fcd8 	bl	8004b6e <HAL_UART_Receive>

					pumpTestsParameters[pump].eNextState = ULTIMATE_MEASURE_TEST;
 80011be:	4b53      	ldr	r3, [pc, #332]	; (800130c <StartDefaultTask+0x7c0>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <StartDefaultTask+0x7c4>)
 80011c6:	460b      	mov	r3, r1
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	3310      	adds	r3, #16
 80011d2:	220c      	movs	r2, #12
 80011d4:	701a      	strb	r2, [r3, #0]

	  				break;
 80011d6:	e094      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			case ULTIMATE_MEASURE_TEST:

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST\r\n");
 80011d8:	4950      	ldr	r1, [pc, #320]	; (800131c <StartDefaultTask+0x7d0>)
 80011da:	4851      	ldr	r0, [pc, #324]	; (8001320 <StartDefaultTask+0x7d4>)
 80011dc:	f008 fcbc 	bl	8009b58 <siprintf>
	  				printMsg(msg, &huart3);
 80011e0:	494c      	ldr	r1, [pc, #304]	; (8001314 <StartDefaultTask+0x7c8>)
 80011e2:	484f      	ldr	r0, [pc, #316]	; (8001320 <StartDefaultTask+0x7d4>)
 80011e4:	f000 f94a 	bl	800147c <printMsg>
	  				osThreadResume(sendDataHandle);
 80011e8:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <StartDefaultTask+0x7d8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 f993 	bl	8006518 <osThreadResume>
	  				osDelay(1000);
 80011f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f6:	f005 f9c3 	bl	8006580 <osDelay>
	  				osThreadSuspend(sendDataHandle);
 80011fa:	4b4a      	ldr	r3, [pc, #296]	; (8001324 <StartDefaultTask+0x7d8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 f956 	bl	80064b0 <osThreadSuspend>

	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <StartDefaultTask+0x7c0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4941      	ldr	r1, [pc, #260]	; (8001310 <StartDefaultTask+0x7c4>)
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	440b      	add	r3, r1
 8001216:	330c      	adds	r3, #12
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	1c48      	adds	r0, r1, #1
 800121c:	4c3c      	ldr	r4, [pc, #240]	; (8001310 <StartDefaultTask+0x7c4>)
 800121e:	4613      	mov	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4423      	add	r3, r4
 8001228:	330c      	adds	r3, #12
 800122a:	6018      	str	r0, [r3, #0]
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <StartDefaultTask+0x7c0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	7809      	ldrb	r1, [r1, #0]
 8001234:	4a36      	ldr	r2, [pc, #216]	; (8001310 <StartDefaultTask+0x7c4>)
 8001236:	4603      	mov	r3, r0
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4403      	add	r3, r0
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	3310      	adds	r3, #16
 8001242:	460a      	mov	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
	  				break;
 8001246:	e05c      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			case FAIL_STATE:
	  				break;
	  			case IDLE:
	  				vacuumGaugeADC(&hadc1);
 8001248:	4837      	ldr	r0, [pc, #220]	; (8001328 <StartDefaultTask+0x7dc>)
 800124a:	f000 fc5d 	bl	8001b08 <vacuumGaugeADC>
	  				volts = adcGet(&hadc1);
 800124e:	4836      	ldr	r0, [pc, #216]	; (8001328 <StartDefaultTask+0x7dc>)
 8001250:	f000 f8d6 	bl	8001400 <adcGet>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <StartDefaultTask+0x7e0>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <StartDefaultTask+0x7e0>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb0 0a67 	vmov.f32	s0, s15
 8001268:	f000 fc72 	bl	8001b50 <readVacuum>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <StartDefaultTask+0x7e4>)
 8001272:	edc3 7a00 	vstr	s15, [r3]
	  				sprintf(msg, "Vacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r", volts, vacuumScale);
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <StartDefaultTask+0x7e0>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <StartDefaultTask+0x7e4>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800128a:	ed8d 7b00 	vstr	d7, [sp]
 800128e:	ec53 2b16 	vmov	r2, r3, d6
 8001292:	4928      	ldr	r1, [pc, #160]	; (8001334 <StartDefaultTask+0x7e8>)
 8001294:	4822      	ldr	r0, [pc, #136]	; (8001320 <StartDefaultTask+0x7d4>)
 8001296:	f008 fc5f 	bl	8009b58 <siprintf>
	  				printMsg(msg, &huart3);
 800129a:	491e      	ldr	r1, [pc, #120]	; (8001314 <StartDefaultTask+0x7c8>)
 800129c:	4820      	ldr	r0, [pc, #128]	; (8001320 <StartDefaultTask+0x7d4>)
 800129e:	f000 f8ed 	bl	800147c <printMsg>
	  				osDelay(1000);
 80012a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a6:	f005 f96b 	bl	8006580 <osDelay>
	  				pumpTestsParameters[pump].eNextState = IDLE;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <StartDefaultTask+0x7c0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <StartDefaultTask+0x7c4>)
 80012b2:	460b      	mov	r3, r1
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	3310      	adds	r3, #16
 80012be:	220d      	movs	r2, #13
 80012c0:	701a      	strb	r2, [r3, #0]
	  				break;
 80012c2:	e01e      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			case STOP:
	  				pumpTestsParameters[pump].eNextState = STOP;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <StartDefaultTask+0x7c0>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <StartDefaultTask+0x7c4>)
 80012cc:	460b      	mov	r3, r1
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	3310      	adds	r3, #16
 80012d8:	220f      	movs	r2, #15
 80012da:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 80012dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80012e0:	f000 fcdc 	bl	8001c9c <HAL_Delay>
	  				break;
 80012e4:	e00d      	b.n	8001302 <StartDefaultTask+0x7b6>
	  			default:
	  				pumpTestsParameters[pump].eNextState = STOP;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <StartDefaultTask+0x7c0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <StartDefaultTask+0x7c4>)
 80012ee:	460b      	mov	r3, r1
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	3310      	adds	r3, #16
 80012fa:	220f      	movs	r2, #15
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e000      	b.n	8001302 <StartDefaultTask+0x7b6>
	  				break;
 8001300:	bf00      	nop
	  }

	  osDelay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f005 f93c 	bl	8006580 <osDelay>
	  switch(pumpTestsParameters[pump].eNextState) {
 8001308:	e424      	b.n	8000b54 <StartDefaultTask+0x8>
 800130a:	bf00      	nop
 800130c:	20000884 	.word	0x20000884
 8001310:	200007f4 	.word	0x200007f4
 8001314:	2000025c 	.word	0x2000025c
 8001318:	20000832 	.word	0x20000832
 800131c:	0800c47c 	.word	0x0800c47c
 8001320:	20000890 	.word	0x20000890
 8001324:	200007f0 	.word	0x200007f0
 8001328:	20000200 	.word	0x20000200
 800132c:	20000888 	.word	0x20000888
 8001330:	2000088c 	.word	0x2000088c
 8001334:	0800c494 	.word	0x0800c494

08001338 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg,"Sending Data\r\n");
 8001340:	4905      	ldr	r1, [pc, #20]	; (8001358 <StartTask02+0x20>)
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <StartTask02+0x24>)
 8001344:	f008 fc08 	bl	8009b58 <siprintf>
	printMsg(msg, &huart3);
 8001348:	4905      	ldr	r1, [pc, #20]	; (8001360 <StartTask02+0x28>)
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <StartTask02+0x24>)
 800134c:	f000 f896 	bl	800147c <printMsg>
    osDelay(250);
 8001350:	20fa      	movs	r0, #250	; 0xfa
 8001352:	f005 f915 	bl	8006580 <osDelay>
	sprintf(msg,"Sending Data\r\n");
 8001356:	e7f3      	b.n	8001340 <StartTask02+0x8>
 8001358:	0800c4c4 	.word	0x0800c4c4
 800135c:	20000890 	.word	0x20000890
 8001360:	2000025c 	.word	0x2000025c

08001364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001376:	f000 fc71 	bl	8001c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40001000 	.word	0x40001000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
 8001392:	0000      	movs	r0, r0
 8001394:	0000      	movs	r0, r0
	...

08001398 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f001 f9cd 	bl	8002748 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 80013ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013b6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80013e8 <dacSet+0x50>
 80013ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013be:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80013f0 <dacSet+0x58>
 80013c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013ca:	ee17 2a90 	vmov	r2, s15
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <dacSet+0x60>)
 80013d0:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <dacSet+0x60>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f001 fa60 	bl	80028a0 <HAL_DAC_SetValue>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	66666666 	.word	0x66666666
 80013ec:	400a6666 	.word	0x400a6666
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40affe00 	.word	0x40affe00
 80013f8:	200008d4 	.word	0x200008d4
 80013fc:	00000000 	.word	0x00000000

08001400 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fcaf 	bl	8001d6c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 800140e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fdac 	bl	8001f70 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fe34 	bl	8002086 <HAL_ADC_GetValue>
 800141e:	4603      	mov	r3, r0
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <adcGet+0x70>)
 8001424:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <adcGet+0x70>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001432:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001474 <adcGet+0x74>
 8001436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800143e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001468 <adcGet+0x68>
 8001442:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001446:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <adcGet+0x78>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fd59 	bl	8001f08 <HAL_ADC_Stop>
	return adcVolts;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <adcGet+0x78>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	66666666 	.word	0x66666666
 800146c:	400a6666 	.word	0x400a6666
 8001470:	200008d8 	.word	0x200008d8
 8001474:	457ff000 	.word	0x457ff000
 8001478:	200008dc 	.word	0x200008dc

0800147c <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char* str, UART_HandleTypeDef *huart2){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7fe ff2a 	bl	80002e0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f003 fae6 	bl	8004a68 <HAL_UART_Transmit>
	return;
 800149c:	bf00      	nop
}
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_MspInit+0x4c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	210f      	movs	r1, #15
 80014de:	f06f 0001 	mvn.w	r0, #1
 80014e2:	f001 f8e5 	bl	80026b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <HAL_ADC_MspInit+0xa4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d13b      	bne.n	800158e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_ADC_MspInit+0xa8>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_ADC_MspInit+0xa8>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_ADC_MspInit+0xa8>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_ADC_MspInit+0xa8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a1a      	ldr	r2, [pc, #104]	; (800159c <HAL_ADC_MspInit+0xa8>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_ADC_MspInit+0xa8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_ADC_MspInit+0xa8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_ADC_MspInit+0xa8>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_ADC_MspInit+0xa8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800155e:	2360      	movs	r3, #96	; 0x60
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <HAL_ADC_MspInit+0xac>)
 8001572:	f001 faaf 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_ADC_MspInit+0xb0>)
 800158a:	f001 faa3 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012000 	.word	0x40012000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_DAC_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12b      	bne.n	8001622 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_DAC_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_DAC_MspInit+0x88>)
 80015d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_DAC_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_DAC_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_DAC_MspInit+0x88>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_DAC_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015fa:	2310      	movs	r3, #16
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <HAL_DAC_MspInit+0x8c>)
 800160e:	f001 fa61 	bl	8002ad4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	210f      	movs	r1, #15
 8001616:	2036      	movs	r0, #54	; 0x36
 8001618:	f001 f84a 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800161c:	2036      	movs	r0, #54	; 0x36
 800161e:	f001 f863 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40007400 	.word	0x40007400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0ae      	sub	sp, #184	; 0xb8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2290      	movs	r2, #144	; 0x90
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f008 fae0 	bl	8009c1e <memset>
  if(huart->Instance==USART3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a26      	ldr	r2, [pc, #152]	; (80016fc <HAL_UART_MspInit+0xc4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d144      	bne.n	80016f2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800166e:	2300      	movs	r3, #0
 8001670:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4618      	mov	r0, r3
 8001678:	f002 faa0 	bl	8003bbc <HAL_RCCEx_PeriphCLKConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001682:	f7ff fe81 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_UART_MspInit+0xc8>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_UART_MspInit+0xc8>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_UART_MspInit+0xc8>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_UART_MspInit+0xc8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_UART_MspInit+0xc8>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_UART_MspInit+0xc8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d0:	2307      	movs	r3, #7
 80016d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016da:	4619      	mov	r1, r3
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <HAL_UART_MspInit+0xcc>)
 80016de:	f001 f9f9 	bl	8002ad4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2105      	movs	r1, #5
 80016e6:	2027      	movs	r0, #39	; 0x27
 80016e8:	f000 ffe2 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016ec:	2027      	movs	r0, #39	; 0x27
 80016ee:	f000 fffb 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	37b8      	adds	r7, #184	; 0xb8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40004800 	.word	0x40004800
 8001700:	40023800 	.word	0x40023800
 8001704:	40020c00 	.word	0x40020c00

08001708 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0ae      	sub	sp, #184	; 0xb8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2290      	movs	r2, #144	; 0x90
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f008 fa78 	bl	8009c1e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001736:	d159      	bne.n	80017ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001738:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800173c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fa37 	bl	8003bbc <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001754:	f7ff fe18 	bl	8001388 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6313      	str	r3, [r2, #48]	; 0x30
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001770:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800178a:	230a      	movs	r3, #10
 800178c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001794:	4619      	mov	r1, r3
 8001796:	4818      	ldr	r0, [pc, #96]	; (80017f8 <HAL_PCD_MspInit+0xf0>)
 8001798:	f001 f99c 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <HAL_PCD_MspInit+0xf0>)
 80017b8:	f001 f98c 	bl	8002ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 80017c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c6:	6353      	str	r3, [r2, #52]	; 0x34
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017de:	6453      	str	r3, [r2, #68]	; 0x44
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_PCD_MspInit+0xec>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	37b8      	adds	r7, #184	; 0xb8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_InitTick+0xe0>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_InitTick+0xe0>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_InitTick+0xe0>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001824:	f107 0210 	add.w	r2, r7, #16
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f002 f992 	bl	8003b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	2b00      	cmp	r3, #0
 800183c:	d103      	bne.n	8001846 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800183e:	f002 f963 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8001842:	6378      	str	r0, [r7, #52]	; 0x34
 8001844:	e004      	b.n	8001850 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001846:	f002 f95f 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 800184a:	4603      	mov	r3, r0
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001852:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <HAL_InitTick+0xe4>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	0c9b      	lsrs	r3, r3, #18
 800185a:	3b01      	subs	r3, #1
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_InitTick+0xe8>)
 8001860:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_InitTick+0xec>)
 8001862:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_InitTick+0xe8>)
 8001866:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_InitTick+0xe8>)
 800186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001870:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_InitTick+0xe8>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_InitTick+0xe8>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_InitTick+0xe8>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001884:	4817      	ldr	r0, [pc, #92]	; (80018e4 <HAL_InitTick+0xe8>)
 8001886:	f002 fdc1 	bl	800440c <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001894:	2b00      	cmp	r3, #0
 8001896:	d11b      	bne.n	80018d0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001898:	4812      	ldr	r0, [pc, #72]	; (80018e4 <HAL_InitTick+0xe8>)
 800189a:	f002 fe19 	bl	80044d0 <HAL_TIM_Base_Start_IT>
 800189e:	4603      	mov	r3, r0
 80018a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d111      	bne.n	80018d0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ac:	2036      	movs	r0, #54	; 0x36
 80018ae:	f000 ff1b 	bl	80026e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d808      	bhi.n	80018ca <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	2036      	movs	r0, #54	; 0x36
 80018be:	f000 fef7 	bl	80026b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_InitTick+0xf0>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e002      	b.n	80018d0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3738      	adds	r7, #56	; 0x38
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	200008e0 	.word	0x200008e0
 80018e8:	40001000 	.word	0x40001000
 80018ec:	20000010 	.word	0x20000010

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <USART3_IRQHandler+0x10>)
 8001922:	f003 f9e9 	bl	8004cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000025c 	.word	0x2000025c

08001930 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <TIM6_DAC_IRQHandler+0x20>)
 8001936:	791b      	ldrb	r3, [r3, #4]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <TIM6_DAC_IRQHandler+0x20>)
 8001940:	f000 ff54 	bl	80027ec <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <TIM6_DAC_IRQHandler+0x24>)
 8001946:	f002 fe3b 	bl	80045c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000248 	.word	0x20000248
 8001954:	200008e0 	.word	0x200008e0

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	f008 f9fd 	bl	8009d70 <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199a:	e7fe      	b.n	800199a <_exit+0x12>

0800199c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ae:	f3af 8000 	nop.w
 80019b2:	4601      	mov	r1, r0
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <_read+0x12>
  }

  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e009      	b.n	80019fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf1      	blt.n	80019e8 <_write+0x12>
  }
  return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_close>:

int _close(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a36:	605a      	str	r2, [r3, #4]
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_isatty>:

int _isatty(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f008 f962 	bl	8009d70 <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20080000 	.word	0x20080000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	2000092c 	.word	0x2000092c
 8001ae0:	20005468 	.word	0x20005468

08001ae4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8001b1e:	2306      	movs	r3, #6
 8001b20:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b26:	2301      	movs	r3, #1
 8001b28:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fab5 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8001b3c:	f7ff fc24 	bl	8001388 <Error_Handler>
	}
	return;
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
}
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	0000      	movs	r0, r0
 8001b4c:	0000      	movs	r0, r0
	...

08001b50 <readVacuum>:

float readVacuum(float voltage){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	ed2d 8b02 	vpush	{d8}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	ed87 0a01 	vstr	s0, [r7, #4]

	float exponent = (voltage * 3.13 - referenceVoltage)/scalingFactor;
 8001b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b66:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001bd8 <readVacuum+0x88>
 8001b6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <readVacuum+0x90>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b78:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <readVacuum+0x94>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b86:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b8e:	edc7 7a03 	vstr	s15, [r7, #12]
	pressure = referencePressure * pow(10, exponent);
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <readVacuum+0x98>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ba4:	eeb0 1b47 	vmov.f64	d1, d7
 8001ba8:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001bac:	f00a f934 	bl	800be18 <pow>
 8001bb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001bb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001bb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <readVacuum+0x9c>)
 8001bbe:	edc3 7a00 	vstr	s15, [r3]

	return pressure;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <readVacuum+0x9c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	ee07 3a90 	vmov	s15, r3
}
 8001bca:	eeb0 0a67 	vmov.f32	s0, s15
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	ecbd 8b02 	vpop	{d8}
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	70a3d70a 	.word	0x70a3d70a
 8001bdc:	40090a3d 	.word	0x40090a3d
 8001be0:	20000008 	.word	0x20000008
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	20000004 	.word	0x20000004
 8001bec:	20000930 	.word	0x20000930

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bf6:	490e      	ldr	r1, [pc, #56]	; (8001c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c0c:	4c0b      	ldr	r4, [pc, #44]	; (8001c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c1a:	f7ff ff63 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f008 f8ad 	bl	8009d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7fe fd0b 	bl	800063c <main>
  bx  lr    
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c34:	0800e188 	.word	0x0800e188
  ldr r2, =_sbss
 8001c38:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c3c:	20005464 	.word	0x20005464

08001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>

08001c42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f000 fd27 	bl	800269a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4c:	200f      	movs	r0, #15
 8001c4e:	f7ff fdd5 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c52:	f7ff fc27 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000014 	.word	0x20000014
 8001c80:	20000934 	.word	0x20000934

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000934 	.word	0x20000934

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000014 	.word	0x20000014

08001ce4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e031      	b.n	8001d5e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fbf6 	bl	80014f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_ADC_Init+0x84>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fb0a 	bl	800234c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4e:	e001      	b.n	8001d54 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	ffffeefd 	.word	0xffffeefd

08001d6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Start+0x1a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e0ad      	b.n	8001ee2 <HAL_ADC_Start+0x176>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d018      	beq.n	8001dce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_ADC_Start+0x184>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_ADC_Start+0x188>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9a      	lsrs	r2, r3, #18
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d175      	bne.n	8001ec8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de0:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <HAL_ADC_Start+0x18c>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e16:	d106      	bne.n	8001e26 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f023 0206 	bic.w	r2, r3, #6
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_ADC_Start+0x190>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d143      	bne.n	8001ee0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e03a      	b.n	8001ee0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <HAL_ADC_Start+0x194>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d10e      	bne.n	8001e92 <HAL_ADC_Start+0x126>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d107      	bne.n	8001e92 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e90:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_ADC_Start+0x190>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d120      	bne.n	8001ee0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_ADC_Start+0x198>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_ADC_Start+0x174>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d114      	bne.n	8001ee0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	fffff8fe 	.word	0xfffff8fe
 8001efc:	40012300 	.word	0x40012300
 8001f00:	40012000 	.word	0x40012000
 8001f04:	40012200 	.word	0x40012200

08001f08 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Stop+0x16>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e01f      	b.n	8001f5e <HAL_ADC_Stop+0x56>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_ADC_Stop+0x64>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	ffffeefe 	.word	0xffffeefe

08001f70 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8c:	d113      	bne.n	8001fb6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e063      	b.n	800207e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001fb6:	f7ff fe65 	bl	8001c84 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fbc:	e021      	b.n	8002002 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d01d      	beq.n	8002002 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_ADC_PollForConversion+0x6c>
 8001fcc:	f7ff fe5a 	bl	8001c84 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d212      	bcs.n	8002002 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d00b      	beq.n	8002002 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f043 0204 	orr.w	r2, r3, #4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e03d      	b.n	800207e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b02      	cmp	r3, #2
 800200e:	d1d6      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0212 	mvn.w	r2, #18
 8002018:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d123      	bne.n	800207c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	d11f      	bne.n	800207c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002054:	2b00      	cmp	r3, #0
 8002056:	d111      	bne.n	800207c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1c>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e136      	b.n	800232a <HAL_ADC_ConfigChannel+0x28a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d93a      	bls.n	8002142 <HAL_ADC_ConfigChannel+0xa2>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020d4:	d035      	beq.n	8002142 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68d9      	ldr	r1, [r3, #12]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	3b1e      	subs	r3, #30
 80020ec:	2207      	movs	r2, #7
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	400a      	ands	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a8d      	ldr	r2, [pc, #564]	; (8002338 <HAL_ADC_ConfigChannel+0x298>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10a      	bne.n	800211c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68d9      	ldr	r1, [r3, #12]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	061a      	lsls	r2, r3, #24
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211a:	e035      	b.n	8002188 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	4603      	mov	r3, r0
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4403      	add	r3, r0
 8002134:	3b1e      	subs	r3, #30
 8002136:	409a      	lsls	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002140:	e022      	b.n	8002188 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6919      	ldr	r1, [r3, #16]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	2207      	movs	r2, #7
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43da      	mvns	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	400a      	ands	r2, r1
 8002164:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6919      	ldr	r1, [r3, #16]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	4603      	mov	r3, r0
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4403      	add	r3, r0
 800217e:	409a      	lsls	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d824      	bhi.n	80021da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b05      	subs	r3, #5
 80021a2:	221f      	movs	r2, #31
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43da      	mvns	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	400a      	ands	r2, r1
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b05      	subs	r3, #5
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
 80021d8:	e04c      	b.n	8002274 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d824      	bhi.n	800222c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b23      	subs	r3, #35	; 0x23
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b23      	subs	r3, #35	; 0x23
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
 800222a:	e023      	b.n	8002274 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b41      	subs	r3, #65	; 0x41
 800223e:	221f      	movs	r2, #31
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43da      	mvns	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	400a      	ands	r2, r1
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b41      	subs	r3, #65	; 0x41
 8002268:	fa00 f203 	lsl.w	r2, r0, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a30      	ldr	r2, [pc, #192]	; (800233c <HAL_ADC_ConfigChannel+0x29c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10a      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1f4>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002286:	d105      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 800228e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002292:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_ADC_ConfigChannel+0x29c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d10f      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b12      	cmp	r3, #18
 80022a4:	d10b      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_ADC_ConfigChannel+0x29c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d12b      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x280>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_ADC_ConfigChannel+0x298>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <HAL_ADC_ConfigChannel+0x23a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b11      	cmp	r3, #17
 80022d8:	d122      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_ADC_ConfigChannel+0x2a0>)
 80022ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_ADC_ConfigChannel+0x298>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d111      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_ADC_ConfigChannel+0x2a4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_ADC_ConfigChannel+0x2a8>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9a      	lsrs	r2, r3, #18
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002312:	e002      	b.n	800231a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3b01      	subs	r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	10000012 	.word	0x10000012
 800233c:	40012000 	.word	0x40012000
 8002340:	40012300 	.word	0x40012300
 8002344:	20000000 	.word	0x20000000
 8002348:	431bde83 	.word	0x431bde83

0800234c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002354:	4b78      	ldr	r3, [pc, #480]	; (8002538 <ADC_Init+0x1ec>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a77      	ldr	r2, [pc, #476]	; (8002538 <ADC_Init+0x1ec>)
 800235a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800235e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002360:	4b75      	ldr	r3, [pc, #468]	; (8002538 <ADC_Init+0x1ec>)
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4973      	ldr	r1, [pc, #460]	; (8002538 <ADC_Init+0x1ec>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	021a      	lsls	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	4a58      	ldr	r2, [pc, #352]	; (800253c <ADC_Init+0x1f0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	e00f      	b.n	8002446 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002444:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0202 	bic.w	r2, r2, #2
 8002454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	005a      	lsls	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002482:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	3b01      	subs	r3, #1
 80024a0:	035a      	lsls	r2, r3, #13
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	e007      	b.n	80024bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	051a      	lsls	r2, r3, #20
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024fe:	025a      	lsls	r2, r3, #9
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	029a      	lsls	r2, r3, #10
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40012300 	.word	0x40012300
 800253c:	0f000001 	.word	0x0f000001

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <__NVIC_SetPriorityGrouping+0x40>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	4313      	orrs	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x40>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00
 8002584:	05fa0000 	.word	0x05fa0000

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	; (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff4c 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c2:	f7ff ff61 	bl	8002588 <__NVIC_GetPriorityGrouping>
 80026c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f7ff ffb1 	bl	8002634 <NVIC_EncodePriority>
 80026d2:	4602      	mov	r2, r0
 80026d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff80 	bl	80025e0 <__NVIC_SetPriority>
}
 80026e0:	bf00      	nop
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff54 	bl	80025a4 <__NVIC_EnableIRQ>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e014      	b.n	8002740 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe ff3e 	bl	80015a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	795b      	ldrb	r3, [r3, #5]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_DAC_Start+0x16>
 800275a:	2302      	movs	r3, #2
 800275c:	e040      	b.n	80027e0 <HAL_DAC_Start+0x98>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10f      	bne.n	80027a8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002792:	2b3c      	cmp	r3, #60	; 0x3c
 8002794:	d11d      	bne.n	80027d2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	e014      	b.n	80027d2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	213c      	movs	r1, #60	; 0x3c
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	429a      	cmp	r2, r3
 80027c0:	d107      	bne.n	80027d2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0202 	orr.w	r2, r2, #2
 80027d0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002802:	d120      	bne.n	8002846 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002812:	d118      	bne.n	8002846 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2204      	movs	r2, #4
 8002818:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800282e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800283e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f852 	bl	80028ea <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002854:	d120      	bne.n	8002898 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002864:	d118      	bne.n	8002898 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f043 0202 	orr.w	r2, r3, #2
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002880:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002890:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f882 	bl	800299c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	3308      	adds	r3, #8
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e004      	b.n	80028d4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3314      	adds	r3, #20
 80028d2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028fe:	b480      	push	{r7}
 8002900:	b087      	sub	sp, #28
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	795b      	ldrb	r3, [r3, #5]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_DAC_ConfigChannel+0x18>
 8002912:	2302      	movs	r3, #2
 8002914:	e03c      	b.n	8002990 <HAL_DAC_ConfigChannel+0x92>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2202      	movs	r2, #2
 8002920:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	22c0      	movs	r2, #192	; 0xc0
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43da      	mvns	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	400a      	ands	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029be:	f7ff f961 	bl	8001c84 <HAL_GetTick>
 80029c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d008      	beq.n	80029e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e052      	b.n	8002a88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0216 	bic.w	r2, r2, #22
 80029f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <HAL_DMA_Abort+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0208 	bic.w	r2, r2, #8
 8002a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a32:	e013      	b.n	8002a5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a34:	f7ff f926 	bl	8001c84 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d90c      	bls.n	8002a5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e015      	b.n	8002a88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e4      	bne.n	8002a34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	223f      	movs	r2, #63	; 0x3f
 8002a70:	409a      	lsls	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00c      	b.n	8002ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e175      	b.n	8002de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8164 	bne.w	8002dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x56>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80be 	beq.w	8002dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a65      	ldr	r2, [pc, #404]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c76:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <HAL_GPIO_Init+0x328>)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_GPIO_Init+0x32c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d037      	beq.n	8002d12 <HAL_GPIO_Init+0x23e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d031      	beq.n	8002d0e <HAL_GPIO_Init+0x23a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d02b      	beq.n	8002d0a <HAL_GPIO_Init+0x236>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a55      	ldr	r2, [pc, #340]	; (8002e0c <HAL_GPIO_Init+0x338>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d025      	beq.n	8002d06 <HAL_GPIO_Init+0x232>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a54      	ldr	r2, [pc, #336]	; (8002e10 <HAL_GPIO_Init+0x33c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01f      	beq.n	8002d02 <HAL_GPIO_Init+0x22e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a53      	ldr	r2, [pc, #332]	; (8002e14 <HAL_GPIO_Init+0x340>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d019      	beq.n	8002cfe <HAL_GPIO_Init+0x22a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_GPIO_Init+0x344>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_GPIO_Init+0x226>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a51      	ldr	r2, [pc, #324]	; (8002e1c <HAL_GPIO_Init+0x348>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_GPIO_Init+0x222>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a50      	ldr	r2, [pc, #320]	; (8002e20 <HAL_GPIO_Init+0x34c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <HAL_GPIO_Init+0x21e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4f      	ldr	r2, [pc, #316]	; (8002e24 <HAL_GPIO_Init+0x350>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_GPIO_Init+0x21a>
 8002cea:	2309      	movs	r3, #9
 8002cec:	e012      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cee:	230a      	movs	r3, #10
 8002cf0:	e010      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	e00e      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e00c      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cfa:	2306      	movs	r3, #6
 8002cfc:	e00a      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cfe:	2305      	movs	r3, #5
 8002d00:	e008      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e004      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d12:	2300      	movs	r3, #0
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	f002 0203 	and.w	r2, r2, #3
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	4093      	lsls	r3, r2
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d24:	4935      	ldr	r1, [pc, #212]	; (8002dfc <HAL_GPIO_Init+0x328>)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5c:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d80:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d86:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002daa:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_GPIO_Init+0x354>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	f67f ae86 	bls.w	8002af4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40021800 	.word	0x40021800
 8002e1c:	40021c00 	.word	0x40021c00
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40022400 	.word	0x40022400
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e60:	b08f      	sub	sp, #60	; 0x3c
 8002e62:	af0a      	add	r7, sp, #40	; 0x28
 8002e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e116      	b.n	800309e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fc3c 	bl	8001708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 ff4a 	bl	8005d48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	687e      	ldr	r6, [r7, #4]
 8002ebc:	466d      	mov	r5, sp
 8002ebe:	f106 0410 	add.w	r4, r6, #16
 8002ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed2:	1d33      	adds	r3, r6, #4
 8002ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f002 fede 	bl	8005c98 <USB_CoreInit>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0d7      	b.n	800309e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 ff38 	bl	8005d6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	e04a      	b.n	8002f96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	333d      	adds	r3, #61	; 0x3d
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	333c      	adds	r3, #60	; 0x3c
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	b298      	uxth	r0, r3
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3344      	adds	r3, #68	; 0x44
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3340      	adds	r3, #64	; 0x40
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	3348      	adds	r3, #72	; 0x48
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334c      	adds	r3, #76	; 0x4c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3354      	adds	r3, #84	; 0x54
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	3301      	adds	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d3af      	bcc.n	8002f00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	e044      	b.n	8003030 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3301      	adds	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d3b5      	bcc.n	8002fa6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	687e      	ldr	r6, [r7, #4]
 8003042:	466d      	mov	r5, sp
 8003044:	f106 0410 	add.w	r4, r6, #16
 8003048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800304c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003054:	e885 0003 	stmia.w	r5, {r0, r1}
 8003058:	1d33      	adds	r3, r6, #4
 800305a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800305c:	6838      	ldr	r0, [r7, #0]
 800305e:	f002 fed1 	bl	8005e04 <USB_DevInit>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e014      	b.n	800309e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b01      	cmp	r3, #1
 800308a:	d102      	bne.n	8003092 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f80b 	bl	80030a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 f88f 	bl	80061ba <USB_DevDisconnect>

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_PCDEx_ActivateLPM+0x44>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	10000003 	.word	0x10000003

080030f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000

08003110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800313e:	f7fe fda1 	bl	8001c84 <HAL_GetTick>
 8003142:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003144:	e009      	b.n	800315a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003146:	f7fe fd9d 	bl	8001c84 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003154:	d901      	bls.n	800315a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e022      	b.n	80031a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d1ee      	bne.n	8003146 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800316e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003174:	f7fe fd86 	bl	8001c84 <HAL_GetTick>
 8003178:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800317a:	e009      	b.n	8003190 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800317c:	f7fe fd82 	bl	8001c84 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318a:	d901      	bls.n	8003190 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e007      	b.n	80031a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800319c:	d1ee      	bne.n	800317c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000

080031b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e29b      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8087 	beq.w	80032e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d4:	4b96      	ldr	r3, [pc, #600]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d00c      	beq.n	80031fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e0:	4b93      	ldr	r3, [pc, #588]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d112      	bne.n	8003212 <HAL_RCC_OscConfig+0x62>
 80031ec:	4b90      	ldr	r3, [pc, #576]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f8:	d10b      	bne.n	8003212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fa:	4b8d      	ldr	r3, [pc, #564]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d06c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x130>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d168      	bne.n	80032e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e275      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x7a>
 800321c:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a83      	ldr	r2, [pc, #524]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	e02e      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x9c>
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7e      	ldr	r2, [pc, #504]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7b      	ldr	r2, [pc, #492]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e01d      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0xc0>
 8003256:	4b76      	ldr	r3, [pc, #472]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a75      	ldr	r2, [pc, #468]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a72      	ldr	r2, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 8003270:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b6c      	ldr	r3, [pc, #432]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6b      	ldr	r2, [pc, #428]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fcf8 	bl	8001c84 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fcf4 	bl	8001c84 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e229      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xe8>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fce4 	bl	8001c84 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fce0 	bl	8001c84 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e215      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	4b57      	ldr	r3, [pc, #348]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x110>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d069      	beq.n	80033c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ee:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b08      	cmp	r3, #8
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x190>
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x17a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1e9      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	493d      	ldr	r1, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e040      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d023      	beq.n	8003390 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fc96 	bl	8001c84 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe fc92 	bl	8001c84 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1c7      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4929      	ldr	r1, [pc, #164]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
 800338e:	e018      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a26      	ldr	r2, [pc, #152]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fc72 	bl	8001c84 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fe fc6e 	bl	8001c84 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1a3      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d038      	beq.n	8003440 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fe fc4f 	bl	8001c84 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe fc4b 	bl	8001c84 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e180      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x23a>
 8003408:	e01a      	b.n	8003440 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800340c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe fc35 	bl	8001c84 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fe fc31 	bl	8001c84 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d903      	bls.n	8003434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e166      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
 8003430:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b92      	ldr	r3, [pc, #584]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a4 	beq.w	8003596 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b8c      	ldr	r3, [pc, #560]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b89      	ldr	r3, [pc, #548]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a88      	ldr	r2, [pc, #544]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b86      	ldr	r3, [pc, #536]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003476:	4b83      	ldr	r3, [pc, #524]	; (8003684 <HAL_RCC_OscConfig+0x4d4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003482:	4b80      	ldr	r3, [pc, #512]	; (8003684 <HAL_RCC_OscConfig+0x4d4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7f      	ldr	r2, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x4d4>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fe fbf9 	bl	8001c84 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fe fbf5 	bl	8001c84 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e12a      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a8:	4b76      	ldr	r3, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x4d4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x31a>
 80034bc:	4b70      	ldr	r3, [pc, #448]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a6f      	ldr	r2, [pc, #444]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	e02d      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x33c>
 80034d2:	4b6b      	ldr	r3, [pc, #428]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a6a      	ldr	r2, [pc, #424]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	4b68      	ldr	r3, [pc, #416]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a67      	ldr	r2, [pc, #412]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	e01c      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_OscConfig+0x35e>
 80034f4:	4b62      	ldr	r3, [pc, #392]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	4a61      	ldr	r2, [pc, #388]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003500:	4b5f      	ldr	r3, [pc, #380]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	e00b      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 800350e:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe fba9 	bl	8001c84 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe fba5 	bl	8001c84 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0d8      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ee      	beq.n	8003536 <HAL_RCC_OscConfig+0x386>
 8003558:	e014      	b.n	8003584 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7fe fb93 	bl	8001c84 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe fb8f 	bl	8001c84 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0c2      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	4b41      	ldr	r3, [pc, #260]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80ae 	beq.w	80036fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d06d      	beq.n	8003688 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d14b      	bne.n	800364c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fb60 	bl	8001c84 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fb5c 	bl	8001c84 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e091      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	071b      	lsls	r3, r3, #28
 8003612:	491b      	ldr	r1, [pc, #108]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe fb2e 	bl	8001c84 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7fe fb2a 	bl	8001c84 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e05f      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x47c>
 800364a:	e057      	b.n	80036fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fb14 	bl	8001c84 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe fb10 	bl	8001c84 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e045      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x4b0>
 800367e:	e03d      	b.n	80036fc <HAL_RCC_OscConfig+0x54c>
 8003680:	40023800 	.word	0x40023800
 8003684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_RCC_OscConfig+0x558>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d030      	beq.n	80036f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d129      	bne.n	80036f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d122      	bne.n	80036f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d119      	bne.n	80036f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10f      	bne.n	80036f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0d0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 020f 	bic.w	r2, r3, #15
 800373a:	4965      	ldr	r1, [pc, #404]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d040      	beq.n	8003830 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e073      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06b      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4936      	ldr	r1, [pc, #216]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fe fa40 	bl	8001c84 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fe fa3c 	bl	8001c84 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e053      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d210      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 020f 	bic.w	r2, r3, #15
 8003846:	4922      	ldr	r1, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x1cc>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1d0>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1d4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd ff9c 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	0800c534 	.word	0x0800c534
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000010 	.word	0x20000010

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b094      	sub	sp, #80	; 0x50
 80038ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
 80038f0:	2300      	movs	r3, #0
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f4:	2300      	movs	r3, #0
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fc:	4b79      	ldr	r3, [pc, #484]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d00d      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 8003908:	2b08      	cmp	r3, #8
 800390a:	f200 80e1 	bhi.w	8003ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 8003912:	2b04      	cmp	r3, #4
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x3a>
 8003916:	e0db      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b73      	ldr	r3, [pc, #460]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800391a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800391c:	e0db      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800391e:	4b73      	ldr	r3, [pc, #460]	; (8003aec <HAL_RCC_GetSysClockFreq+0x208>)
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003922:	e0d8      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003924:	4b6f      	ldr	r3, [pc, #444]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800392e:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d063      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393a:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	2200      	movs	r2, #0
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
 8003944:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
 8003952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003956:	4622      	mov	r2, r4
 8003958:	462b      	mov	r3, r5
 800395a:	f04f 0000 	mov.w	r0, #0
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	0159      	lsls	r1, r3, #5
 8003964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003968:	0150      	lsls	r0, r2, #5
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4621      	mov	r1, r4
 8003970:	1a51      	subs	r1, r2, r1
 8003972:	6139      	str	r1, [r7, #16]
 8003974:	4629      	mov	r1, r5
 8003976:	eb63 0301 	sbc.w	r3, r3, r1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003988:	4659      	mov	r1, fp
 800398a:	018b      	lsls	r3, r1, #6
 800398c:	4651      	mov	r1, sl
 800398e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003992:	4651      	mov	r1, sl
 8003994:	018a      	lsls	r2, r1, #6
 8003996:	4651      	mov	r1, sl
 8003998:	ebb2 0801 	subs.w	r8, r2, r1
 800399c:	4659      	mov	r1, fp
 800399e:	eb63 0901 	sbc.w	r9, r3, r1
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b6:	4690      	mov	r8, r2
 80039b8:	4699      	mov	r9, r3
 80039ba:	4623      	mov	r3, r4
 80039bc:	eb18 0303 	adds.w	r3, r8, r3
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	462b      	mov	r3, r5
 80039c4:	eb49 0303 	adc.w	r3, r9, r3
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039d6:	4629      	mov	r1, r5
 80039d8:	024b      	lsls	r3, r1, #9
 80039da:	4621      	mov	r1, r4
 80039dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e0:	4621      	mov	r1, r4
 80039e2:	024a      	lsls	r2, r1, #9
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	2200      	movs	r2, #0
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f4:	f7fc fc7c 	bl	80002f0 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	e058      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a02:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a12:	623b      	str	r3, [r7, #32]
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	f04f 0000 	mov.w	r0, #0
 8003a24:	f04f 0100 	mov.w	r1, #0
 8003a28:	0159      	lsls	r1, r3, #5
 8003a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2e:	0150      	lsls	r0, r2, #5
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4641      	mov	r1, r8
 8003a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a54:	ebb2 040a 	subs.w	r4, r2, sl
 8003a58:	eb63 050b 	sbc.w	r5, r3, fp
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	00eb      	lsls	r3, r5, #3
 8003a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6a:	00e2      	lsls	r2, r4, #3
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	461d      	mov	r5, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	18e3      	adds	r3, r4, r3
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	464b      	mov	r3, r9
 8003a78:	eb45 0303 	adc.w	r3, r5, r3
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	028b      	lsls	r3, r1, #10
 8003a8e:	4621      	mov	r1, r4
 8003a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a94:	4621      	mov	r1, r4
 8003a96:	028a      	lsls	r2, r1, #10
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	61fa      	str	r2, [r7, #28]
 8003aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa8:	f7fc fc22 	bl	80002f0 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3750      	adds	r7, #80	; 0x50
 8003adc:	46bd      	mov	sp, r7
 8003ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	007a1200 	.word	0x007a1200

08003af0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000000 	.word	0x20000000

08003b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b0c:	f7ff fff0 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0a9b      	lsrs	r3, r3, #10
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	0800c544 	.word	0x0800c544

08003b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b34:	f7ff ffdc 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0b5b      	lsrs	r3, r3, #13
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	0800c544 	.word	0x0800c544

08003b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	220f      	movs	r2, #15
 8003b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0203 	and.w	r2, r3, #3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_RCC_GetClockConfig+0x60>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	601a      	str	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d012      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003be4:	4b69      	ldr	r3, [pc, #420]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a68      	ldr	r2, [pc, #416]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	4b66      	ldr	r3, [pc, #408]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	4964      	ldr	r1, [pc, #400]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d017      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	4959      	ldr	r1, [pc, #356]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c34:	d101      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d017      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c52:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	494a      	ldr	r1, [pc, #296]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d101      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 808b 	beq.w	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6413      	str	r3, [r2, #64]	; 0x40
 8003cac:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cb8:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc4:	f7fd ffde 	bl	8001c84 <HAL_GetTick>
 8003cc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ccc:	f7fd ffda 	bl	8001c84 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e38f      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d035      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d02e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d12:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1e:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d30:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d114      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd ffa2 	bl	8001c84 <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd ff9e 	bl	8001c84 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e351      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d72:	d111      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d82:	400b      	ands	r3, r1
 8003d84:	4901      	ldr	r1, [pc, #4]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40007000 	.word	0x40007000
 8003d94:	0ffffcff 	.word	0x0ffffcff
 8003d98:	4bac      	ldr	r3, [pc, #688]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4aab      	ldr	r2, [pc, #684]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003da2:	6093      	str	r3, [r2, #8]
 8003da4:	4ba9      	ldr	r3, [pc, #676]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db0:	49a6      	ldr	r1, [pc, #664]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dc2:	4ba2      	ldr	r3, [pc, #648]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc8:	4aa0      	ldr	r2, [pc, #640]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003dd2:	4b9e      	ldr	r3, [pc, #632]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	499b      	ldr	r1, [pc, #620]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df0:	4b96      	ldr	r3, [pc, #600]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfe:	4993      	ldr	r1, [pc, #588]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e12:	4b8e      	ldr	r3, [pc, #568]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e20:	498a      	ldr	r1, [pc, #552]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e34:	4b85      	ldr	r3, [pc, #532]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e42:	4982      	ldr	r1, [pc, #520]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4979      	ldr	r1, [pc, #484]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e78:	4b74      	ldr	r3, [pc, #464]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4971      	ldr	r1, [pc, #452]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e9a:	4b6c      	ldr	r3, [pc, #432]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f023 020c 	bic.w	r2, r3, #12
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea8:	4968      	ldr	r1, [pc, #416]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ebc:	4b63      	ldr	r3, [pc, #396]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	4960      	ldr	r1, [pc, #384]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ede:	4b5b      	ldr	r3, [pc, #364]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	4957      	ldr	r1, [pc, #348]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f00:	4b52      	ldr	r3, [pc, #328]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	494f      	ldr	r1, [pc, #316]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f22:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	4946      	ldr	r1, [pc, #280]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f44:	4b41      	ldr	r3, [pc, #260]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	493e      	ldr	r1, [pc, #248]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f66:	4b39      	ldr	r3, [pc, #228]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f74:	4935      	ldr	r1, [pc, #212]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f88:	4b30      	ldr	r3, [pc, #192]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f96:	492d      	ldr	r1, [pc, #180]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003faa:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb8:	4924      	ldr	r1, [pc, #144]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc8:	d101      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fea:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff8:	4914      	ldr	r1, [pc, #80]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800401c:	490b      	ldr	r1, [pc, #44]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00f      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004040:	4902      	ldr	r1, [pc, #8]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004048:	e002      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800405c:	4b8a      	ldr	r3, [pc, #552]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004062:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	4986      	ldr	r1, [pc, #536]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004080:	4b81      	ldr	r3, [pc, #516]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004086:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004090:	497d      	ldr	r1, [pc, #500]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d006      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80d6 	beq.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040ac:	4b76      	ldr	r3, [pc, #472]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a75      	ldr	r2, [pc, #468]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fd fde4 	bl	8001c84 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040c0:	f7fd fde0 	bl	8001c84 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e195      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d021      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d11d      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	071b      	lsls	r3, r3, #28
 8004126:	4958      	ldr	r1, [pc, #352]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800414c:	2b00      	cmp	r3, #0
 800414e:	d02e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004158:	d129      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800415a:	4b4b      	ldr	r3, [pc, #300]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004168:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416e:	0f1b      	lsrs	r3, r3, #28
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	019a      	lsls	r2, r3, #6
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	493e      	ldr	r1, [pc, #248]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004196:	4b3c      	ldr	r3, [pc, #240]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419c:	f023 021f 	bic.w	r2, r3, #31
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	3b01      	subs	r3, #1
 80041a6:	4938      	ldr	r1, [pc, #224]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01d      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041ba:	4b33      	ldr	r3, [pc, #204]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041c8:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ce:	0f1b      	lsrs	r3, r3, #28
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	019a      	lsls	r2, r3, #6
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	431a      	orrs	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	4926      	ldr	r1, [pc, #152]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d011      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	019a      	lsls	r2, r3, #6
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	061b      	lsls	r3, r3, #24
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	071b      	lsls	r3, r3, #28
 800421e:	491a      	ldr	r1, [pc, #104]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a17      	ldr	r2, [pc, #92]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004232:	f7fd fd27 	bl	8001c84 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004238:	e008      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800423a:	f7fd fd23 	bl	8001c84 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b64      	cmp	r3, #100	; 0x64
 8004246:	d901      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0d8      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800424c:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b01      	cmp	r3, #1
 800425c:	f040 80ce 	bne.w	80043fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a08      	ldr	r2, [pc, #32]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426c:	f7fd fd0a 	bl	8001c84 <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004272:	e00b      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004274:	f7fd fd06 	bl	8001c84 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d904      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0bb      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800428c:	4b5e      	ldr	r3, [pc, #376]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004298:	d0ec      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d02e      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d12a      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042c2:	4b51      	ldr	r3, [pc, #324]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042d0:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	0f1b      	lsrs	r3, r3, #28
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	019a      	lsls	r2, r3, #6
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	071b      	lsls	r3, r3, #28
 80042f6:	4944      	ldr	r1, [pc, #272]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042fe:	4b42      	ldr	r3, [pc, #264]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004304:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	493d      	ldr	r1, [pc, #244]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d022      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432c:	d11d      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800433c:	4b32      	ldr	r3, [pc, #200]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	0f1b      	lsrs	r3, r3, #28
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	019a      	lsls	r2, r3, #6
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	431a      	orrs	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	061b      	lsls	r3, r3, #24
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	071b      	lsls	r3, r3, #28
 8004362:	4929      	ldr	r1, [pc, #164]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d028      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	0e1b      	lsrs	r3, r3, #24
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004384:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	019a      	lsls	r2, r3, #6
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	431a      	orrs	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	4917      	ldr	r1, [pc, #92]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	4911      	ldr	r1, [pc, #68]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d4:	f7fd fc56 	bl	8001c84 <HAL_GetTick>
 80043d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043dc:	f7fd fc52 	bl	8001c84 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e007      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043fa:	d1ef      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800

0800440c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e049      	b.n	80044b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f841 	bl	80044ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f000 fa00 	bl	8004850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e054      	b.n	8004592 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a26      	ldr	r2, [pc, #152]	; (80045a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d022      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x80>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004512:	d01d      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x80>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d018      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x80>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x80>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <HAL_TIM_Base_Start_IT+0xdc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00e      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x80>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x80>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x80>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d115      	bne.n	800457c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <HAL_TIM_Base_Start_IT+0xec>)
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b06      	cmp	r3, #6
 8004560:	d015      	beq.n	800458e <HAL_TIM_Base_Start_IT+0xbe>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d011      	beq.n	800458e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	e008      	b.n	800458e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e000      	b.n	8004590 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40010400 	.word	0x40010400
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40001800 	.word	0x40001800
 80045bc:	00010007 	.word	0x00010007

080045c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0202 	mvn.w	r2, #2
 80045ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f905 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8f7 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f908 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b04      	cmp	r3, #4
 8004628:	d122      	bne.n	8004670 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0204 	mvn.w	r2, #4
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8db 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8cd 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8de 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b08      	cmp	r3, #8
 800467c:	d122      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b08      	cmp	r3, #8
 800468a:	d11b      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0208 	mvn.w	r2, #8
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f8b1 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8a3 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f8b4 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d122      	bne.n	8004718 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d11b      	bne.n	8004718 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0210 	mvn.w	r2, #16
 80046e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2208      	movs	r2, #8
 80046ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f887 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 8004704:	e005      	b.n	8004712 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f879 	bl	80047fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f88a 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10e      	bne.n	8004744 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d107      	bne.n	8004744 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0201 	mvn.w	r2, #1
 800473c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fe10 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b80      	cmp	r3, #128	; 0x80
 800475e:	d107      	bne.n	8004770 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f91a 	bl	80049a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d10e      	bne.n	800479e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d107      	bne.n	800479e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f90d 	bl	80049b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d10e      	bne.n	80047ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d107      	bne.n	80047ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f838 	bl	800483a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d10e      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d107      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f06f 0220 	mvn.w	r2, #32
 80047ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f8cd 	bl	8004990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a40      	ldr	r2, [pc, #256]	; (8004964 <TIM_Base_SetConfig+0x114>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486e:	d00f      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <TIM_Base_SetConfig+0x118>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3c      	ldr	r2, [pc, #240]	; (800496c <TIM_Base_SetConfig+0x11c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <TIM_Base_SetConfig+0x120>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a3a      	ldr	r2, [pc, #232]	; (8004974 <TIM_Base_SetConfig+0x124>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <TIM_Base_SetConfig+0x114>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02b      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d027      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2c      	ldr	r2, [pc, #176]	; (8004968 <TIM_Base_SetConfig+0x118>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d023      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <TIM_Base_SetConfig+0x11c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <TIM_Base_SetConfig+0x120>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01b      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a29      	ldr	r2, [pc, #164]	; (8004974 <TIM_Base_SetConfig+0x124>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d017      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a28      	ldr	r2, [pc, #160]	; (8004978 <TIM_Base_SetConfig+0x128>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <TIM_Base_SetConfig+0x12c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a26      	ldr	r2, [pc, #152]	; (8004980 <TIM_Base_SetConfig+0x130>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a25      	ldr	r2, [pc, #148]	; (8004984 <TIM_Base_SetConfig+0x134>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a24      	ldr	r2, [pc, #144]	; (8004988 <TIM_Base_SetConfig+0x138>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a23      	ldr	r2, [pc, #140]	; (800498c <TIM_Base_SetConfig+0x13c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d108      	bne.n	8004914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <TIM_Base_SetConfig+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0xf8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a0c      	ldr	r2, [pc, #48]	; (8004974 <TIM_Base_SetConfig+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d103      	bne.n	8004950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	615a      	str	r2, [r3, #20]
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40010400 	.word	0x40010400
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800
 8004984:	40001800 	.word	0x40001800
 8004988:	40001c00 	.word	0x40001c00
 800498c:	40002000 	.word	0x40002000

08004990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e040      	b.n	8004a60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fe22 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2224      	movs	r2, #36	; 0x24
 80049f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fc86 	bl	800531c <UART_SetConfig>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e022      	b.n	8004a60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fede 	bl	80057e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 ff65 	bl	8005928 <UART_CheckIdleState>
 8004a5e:	4603      	mov	r3, r0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d171      	bne.n	8004b64 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_UART_Transmit+0x24>
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e06a      	b.n	8004b66 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2221      	movs	r2, #33	; 0x21
 8004a9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a9e:	f7fd f8f1 	bl	8001c84 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	88fa      	ldrh	r2, [r7, #6]
 8004aa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	88fa      	ldrh	r2, [r7, #6]
 8004ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abc:	d108      	bne.n	8004ad0 <HAL_UART_Transmit+0x68>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	e003      	b.n	8004ad8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ad8:	e02c      	b.n	8004b34 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 ff6c 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e038      	b.n	8004b66 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	e007      	b.n	8004b22 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1cc      	bne.n	8004ada <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	2140      	movs	r1, #64	; 0x40
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 ff39 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e005      	b.n	8004b66 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b08a      	sub	sp, #40	; 0x28
 8004b72:	af02      	add	r7, sp, #8
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	f040 80b1 	bne.w	8004cec <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_UART_Receive+0x28>
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0a9      	b.n	8004cee <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2222      	movs	r2, #34	; 0x22
 8004ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bb0:	f7fd f868 	bl	8001c84 <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bce:	d10e      	bne.n	8004bee <HAL_UART_Receive+0x80>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <HAL_UART_Receive+0x76>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004be2:	e02d      	b.n	8004c40 <HAL_UART_Receive+0xd2>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	22ff      	movs	r2, #255	; 0xff
 8004be8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bec:	e028      	b.n	8004c40 <HAL_UART_Receive+0xd2>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10d      	bne.n	8004c12 <HAL_UART_Receive+0xa4>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <HAL_UART_Receive+0x9a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c06:	e01b      	b.n	8004c40 <HAL_UART_Receive+0xd2>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	227f      	movs	r2, #127	; 0x7f
 8004c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c10:	e016      	b.n	8004c40 <HAL_UART_Receive+0xd2>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c1a:	d10d      	bne.n	8004c38 <HAL_UART_Receive+0xca>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <HAL_UART_Receive+0xc0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	227f      	movs	r2, #127	; 0x7f
 8004c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c2c:	e008      	b.n	8004c40 <HAL_UART_Receive+0xd2>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	223f      	movs	r2, #63	; 0x3f
 8004c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c36:	e003      	b.n	8004c40 <HAL_UART_Receive+0xd2>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c46:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d108      	bne.n	8004c64 <HAL_UART_Receive+0xf6>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e003      	b.n	8004c6c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c6c:	e032      	b.n	8004cd4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2120      	movs	r1, #32
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fea2 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e032      	b.n	8004cee <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	8a7b      	ldrh	r3, [r7, #18]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e00c      	b.n	8004cc2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	8a7b      	ldrh	r3, [r7, #18]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1c6      	bne.n	8004c6e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b0ba      	sub	sp, #232	; 0xe8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d22:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d26:	4013      	ands	r3, r2
 8004d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d115      	bne.n	8004d60 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00f      	beq.n	8004d60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 82ac 	beq.w	80052ae <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
      }
      return;
 8004d5e:	e2a6      	b.n	80052ae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8117 	beq.w	8004f98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d7a:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <HAL_UART_IRQHandler+0x298>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 810a 	beq.w	8004f98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d011      	beq.n	8004db4 <HAL_UART_IRQHandler+0xbc>
 8004d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00b      	beq.n	8004db4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2201      	movs	r2, #1
 8004da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004daa:	f043 0201 	orr.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d011      	beq.n	8004de4 <HAL_UART_IRQHandler+0xec>
 8004dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00b      	beq.n	8004de4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d011      	beq.n	8004e14 <HAL_UART_IRQHandler+0x11c>
 8004df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2204      	movs	r2, #4
 8004e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0a:	f043 0202 	orr.w	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00b      	beq.n	8004e50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e46:	f043 0208 	orr.w	r2, r3, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d012      	beq.n	8004e82 <HAL_UART_IRQHandler+0x18a>
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00c      	beq.n	8004e82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8212 	beq.w	80052b2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d005      	beq.n	8004eda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04f      	beq.n	8004f7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fe37 	bl	8005b4e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	d141      	bne.n	8004f72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1d9      	bne.n	8004eee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d013      	beq.n	8004f6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <HAL_UART_IRQHandler+0x29c>)
 8004f48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fd fd9e 	bl	8002a90 <HAL_DMA_Abort_IT>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d017      	beq.n	8004f8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f64:	4610      	mov	r0, r2
 8004f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e00f      	b.n	8004f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9b6 	bl	80052dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e00b      	b.n	8004f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f9b2 	bl	80052dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e007      	b.n	8004f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f9ae 	bl	80052dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004f88:	e193      	b.n	80052b2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8a:	bf00      	nop
    return;
 8004f8c:	e191      	b.n	80052b2 <HAL_UART_IRQHandler+0x5ba>
 8004f8e:	bf00      	nop
 8004f90:	04000120 	.word	0x04000120
 8004f94:	08005c17 	.word	0x08005c17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	f040 814c 	bne.w	800523a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8145 	beq.w	800523a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 813e 	beq.w	800523a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	f040 80b6 	bne.w	8005142 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fe2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8165 	beq.w	80052b6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	f080 815d 	bcs.w	80052b6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005010:	f000 8086 	beq.w	8005120 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800502c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800503e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005042:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800504a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1da      	bne.n	8005014 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800506e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005082:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800508a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e1      	bne.n	800505e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e3      	bne.n	800509a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f0:	f023 0310 	bic.w	r3, r3, #16
 80050f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005102:	65bb      	str	r3, [r7, #88]	; 0x58
 8005104:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e4      	bne.n	80050e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fc48 	bl	80029b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005132:	b29b      	uxth	r3, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8d8 	bl	80052f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005140:	e0b9      	b.n	80052b6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800514e:	b29b      	uxth	r3, r3
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80ab 	beq.w	80052ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80a6 	beq.w	80052ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
 8005192:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800519e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e4      	bne.n	800516e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	623b      	str	r3, [r7, #32]
   return(result);
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3308      	adds	r3, #8
 80051c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051c8:	633a      	str	r2, [r7, #48]	; 0x30
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e3      	bne.n	80051a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f023 0310 	bic.w	r3, r3, #16
 8005204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	69b9      	ldr	r1, [r7, #24]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	617b      	str	r3, [r7, #20]
   return(result);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e4      	bne.n	80051f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800522c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f85c 	bl	80052f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005238:	e03f      	b.n	80052ba <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800523a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00e      	beq.n	8005264 <HAL_UART_IRQHandler+0x56c>
 8005246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800525a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f853 	bl	8005308 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005262:	e02d      	b.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00e      	beq.n	800528e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01c      	beq.n	80052be <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
    }
    return;
 800528c:	e017      	b.n	80052be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800528e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d012      	beq.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
 800529a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00c      	beq.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fccb 	bl	8005c42 <UART_EndTransmit_IT>
    return;
 80052ac:	e008      	b.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80052ae:	bf00      	nop
 80052b0:	e006      	b.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80052b2:	bf00      	nop
 80052b4:	e004      	b.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80052b6:	bf00      	nop
 80052b8:	e002      	b.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80052ba:	bf00      	nop
 80052bc:	e000      	b.n	80052c0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80052be:	bf00      	nop
  }

}
 80052c0:	37e8      	adds	r7, #232	; 0xe8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop

080052c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4ba6      	ldr	r3, [pc, #664]	; (80055e0 <UART_SetConfig+0x2c4>)
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	430b      	orrs	r3, r1
 8005352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a94      	ldr	r2, [pc, #592]	; (80055e4 <UART_SetConfig+0x2c8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d120      	bne.n	80053da <UART_SetConfig+0xbe>
 8005398:	4b93      	ldr	r3, [pc, #588]	; (80055e8 <UART_SetConfig+0x2cc>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d816      	bhi.n	80053d4 <UART_SetConfig+0xb8>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x90>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053c9 	.word	0x080053c9
 80053b4:	080053c3 	.word	0x080053c3
 80053b8:	080053cf 	.word	0x080053cf
 80053bc:	2301      	movs	r3, #1
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e150      	b.n	8005664 <UART_SetConfig+0x348>
 80053c2:	2302      	movs	r3, #2
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e14d      	b.n	8005664 <UART_SetConfig+0x348>
 80053c8:	2304      	movs	r3, #4
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e14a      	b.n	8005664 <UART_SetConfig+0x348>
 80053ce:	2308      	movs	r3, #8
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e147      	b.n	8005664 <UART_SetConfig+0x348>
 80053d4:	2310      	movs	r3, #16
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e144      	b.n	8005664 <UART_SetConfig+0x348>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a83      	ldr	r2, [pc, #524]	; (80055ec <UART_SetConfig+0x2d0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d132      	bne.n	800544a <UART_SetConfig+0x12e>
 80053e4:	4b80      	ldr	r3, [pc, #512]	; (80055e8 <UART_SetConfig+0x2cc>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d828      	bhi.n	8005444 <UART_SetConfig+0x128>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0xdc>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005445 	.word	0x08005445
 8005404:	08005445 	.word	0x08005445
 8005408:	08005439 	.word	0x08005439
 800540c:	08005445 	.word	0x08005445
 8005410:	08005445 	.word	0x08005445
 8005414:	08005445 	.word	0x08005445
 8005418:	08005433 	.word	0x08005433
 800541c:	08005445 	.word	0x08005445
 8005420:	08005445 	.word	0x08005445
 8005424:	08005445 	.word	0x08005445
 8005428:	0800543f 	.word	0x0800543f
 800542c:	2300      	movs	r3, #0
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e118      	b.n	8005664 <UART_SetConfig+0x348>
 8005432:	2302      	movs	r3, #2
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e115      	b.n	8005664 <UART_SetConfig+0x348>
 8005438:	2304      	movs	r3, #4
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e112      	b.n	8005664 <UART_SetConfig+0x348>
 800543e:	2308      	movs	r3, #8
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e10f      	b.n	8005664 <UART_SetConfig+0x348>
 8005444:	2310      	movs	r3, #16
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e10c      	b.n	8005664 <UART_SetConfig+0x348>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a68      	ldr	r2, [pc, #416]	; (80055f0 <UART_SetConfig+0x2d4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d120      	bne.n	8005496 <UART_SetConfig+0x17a>
 8005454:	4b64      	ldr	r3, [pc, #400]	; (80055e8 <UART_SetConfig+0x2cc>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800545e:	2b30      	cmp	r3, #48	; 0x30
 8005460:	d013      	beq.n	800548a <UART_SetConfig+0x16e>
 8005462:	2b30      	cmp	r3, #48	; 0x30
 8005464:	d814      	bhi.n	8005490 <UART_SetConfig+0x174>
 8005466:	2b20      	cmp	r3, #32
 8005468:	d009      	beq.n	800547e <UART_SetConfig+0x162>
 800546a:	2b20      	cmp	r3, #32
 800546c:	d810      	bhi.n	8005490 <UART_SetConfig+0x174>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <UART_SetConfig+0x15c>
 8005472:	2b10      	cmp	r3, #16
 8005474:	d006      	beq.n	8005484 <UART_SetConfig+0x168>
 8005476:	e00b      	b.n	8005490 <UART_SetConfig+0x174>
 8005478:	2300      	movs	r3, #0
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e0f2      	b.n	8005664 <UART_SetConfig+0x348>
 800547e:	2302      	movs	r3, #2
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e0ef      	b.n	8005664 <UART_SetConfig+0x348>
 8005484:	2304      	movs	r3, #4
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e0ec      	b.n	8005664 <UART_SetConfig+0x348>
 800548a:	2308      	movs	r3, #8
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e0e9      	b.n	8005664 <UART_SetConfig+0x348>
 8005490:	2310      	movs	r3, #16
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e0e6      	b.n	8005664 <UART_SetConfig+0x348>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a56      	ldr	r2, [pc, #344]	; (80055f4 <UART_SetConfig+0x2d8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d120      	bne.n	80054e2 <UART_SetConfig+0x1c6>
 80054a0:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <UART_SetConfig+0x2cc>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054aa:	2bc0      	cmp	r3, #192	; 0xc0
 80054ac:	d013      	beq.n	80054d6 <UART_SetConfig+0x1ba>
 80054ae:	2bc0      	cmp	r3, #192	; 0xc0
 80054b0:	d814      	bhi.n	80054dc <UART_SetConfig+0x1c0>
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d009      	beq.n	80054ca <UART_SetConfig+0x1ae>
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d810      	bhi.n	80054dc <UART_SetConfig+0x1c0>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <UART_SetConfig+0x1a8>
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d006      	beq.n	80054d0 <UART_SetConfig+0x1b4>
 80054c2:	e00b      	b.n	80054dc <UART_SetConfig+0x1c0>
 80054c4:	2300      	movs	r3, #0
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e0cc      	b.n	8005664 <UART_SetConfig+0x348>
 80054ca:	2302      	movs	r3, #2
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e0c9      	b.n	8005664 <UART_SetConfig+0x348>
 80054d0:	2304      	movs	r3, #4
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e0c6      	b.n	8005664 <UART_SetConfig+0x348>
 80054d6:	2308      	movs	r3, #8
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e0c3      	b.n	8005664 <UART_SetConfig+0x348>
 80054dc:	2310      	movs	r3, #16
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e0c0      	b.n	8005664 <UART_SetConfig+0x348>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a44      	ldr	r2, [pc, #272]	; (80055f8 <UART_SetConfig+0x2dc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d125      	bne.n	8005538 <UART_SetConfig+0x21c>
 80054ec:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <UART_SetConfig+0x2cc>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fa:	d017      	beq.n	800552c <UART_SetConfig+0x210>
 80054fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005500:	d817      	bhi.n	8005532 <UART_SetConfig+0x216>
 8005502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005506:	d00b      	beq.n	8005520 <UART_SetConfig+0x204>
 8005508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550c:	d811      	bhi.n	8005532 <UART_SetConfig+0x216>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <UART_SetConfig+0x1fe>
 8005512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005516:	d006      	beq.n	8005526 <UART_SetConfig+0x20a>
 8005518:	e00b      	b.n	8005532 <UART_SetConfig+0x216>
 800551a:	2300      	movs	r3, #0
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e0a1      	b.n	8005664 <UART_SetConfig+0x348>
 8005520:	2302      	movs	r3, #2
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e09e      	b.n	8005664 <UART_SetConfig+0x348>
 8005526:	2304      	movs	r3, #4
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e09b      	b.n	8005664 <UART_SetConfig+0x348>
 800552c:	2308      	movs	r3, #8
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e098      	b.n	8005664 <UART_SetConfig+0x348>
 8005532:	2310      	movs	r3, #16
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e095      	b.n	8005664 <UART_SetConfig+0x348>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2f      	ldr	r2, [pc, #188]	; (80055fc <UART_SetConfig+0x2e0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d125      	bne.n	800558e <UART_SetConfig+0x272>
 8005542:	4b29      	ldr	r3, [pc, #164]	; (80055e8 <UART_SetConfig+0x2cc>)
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800554c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005550:	d017      	beq.n	8005582 <UART_SetConfig+0x266>
 8005552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005556:	d817      	bhi.n	8005588 <UART_SetConfig+0x26c>
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	d00b      	beq.n	8005576 <UART_SetConfig+0x25a>
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005562:	d811      	bhi.n	8005588 <UART_SetConfig+0x26c>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <UART_SetConfig+0x254>
 8005568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556c:	d006      	beq.n	800557c <UART_SetConfig+0x260>
 800556e:	e00b      	b.n	8005588 <UART_SetConfig+0x26c>
 8005570:	2301      	movs	r3, #1
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e076      	b.n	8005664 <UART_SetConfig+0x348>
 8005576:	2302      	movs	r3, #2
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e073      	b.n	8005664 <UART_SetConfig+0x348>
 800557c:	2304      	movs	r3, #4
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e070      	b.n	8005664 <UART_SetConfig+0x348>
 8005582:	2308      	movs	r3, #8
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e06d      	b.n	8005664 <UART_SetConfig+0x348>
 8005588:	2310      	movs	r3, #16
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e06a      	b.n	8005664 <UART_SetConfig+0x348>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <UART_SetConfig+0x2e4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d138      	bne.n	800560a <UART_SetConfig+0x2ee>
 8005598:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <UART_SetConfig+0x2cc>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055a6:	d017      	beq.n	80055d8 <UART_SetConfig+0x2bc>
 80055a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ac:	d82a      	bhi.n	8005604 <UART_SetConfig+0x2e8>
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b2:	d00b      	beq.n	80055cc <UART_SetConfig+0x2b0>
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b8:	d824      	bhi.n	8005604 <UART_SetConfig+0x2e8>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <UART_SetConfig+0x2aa>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	d006      	beq.n	80055d2 <UART_SetConfig+0x2b6>
 80055c4:	e01e      	b.n	8005604 <UART_SetConfig+0x2e8>
 80055c6:	2300      	movs	r3, #0
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e04b      	b.n	8005664 <UART_SetConfig+0x348>
 80055cc:	2302      	movs	r3, #2
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e048      	b.n	8005664 <UART_SetConfig+0x348>
 80055d2:	2304      	movs	r3, #4
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e045      	b.n	8005664 <UART_SetConfig+0x348>
 80055d8:	2308      	movs	r3, #8
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e042      	b.n	8005664 <UART_SetConfig+0x348>
 80055de:	bf00      	nop
 80055e0:	efff69f3 	.word	0xefff69f3
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40004400 	.word	0x40004400
 80055f0:	40004800 	.word	0x40004800
 80055f4:	40004c00 	.word	0x40004c00
 80055f8:	40005000 	.word	0x40005000
 80055fc:	40011400 	.word	0x40011400
 8005600:	40007800 	.word	0x40007800
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e02c      	b.n	8005664 <UART_SetConfig+0x348>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a72      	ldr	r2, [pc, #456]	; (80057d8 <UART_SetConfig+0x4bc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d125      	bne.n	8005660 <UART_SetConfig+0x344>
 8005614:	4b71      	ldr	r3, [pc, #452]	; (80057dc <UART_SetConfig+0x4c0>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800561e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005622:	d017      	beq.n	8005654 <UART_SetConfig+0x338>
 8005624:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005628:	d817      	bhi.n	800565a <UART_SetConfig+0x33e>
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562e:	d00b      	beq.n	8005648 <UART_SetConfig+0x32c>
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005634:	d811      	bhi.n	800565a <UART_SetConfig+0x33e>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <UART_SetConfig+0x326>
 800563a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800563e:	d006      	beq.n	800564e <UART_SetConfig+0x332>
 8005640:	e00b      	b.n	800565a <UART_SetConfig+0x33e>
 8005642:	2300      	movs	r3, #0
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e00d      	b.n	8005664 <UART_SetConfig+0x348>
 8005648:	2302      	movs	r3, #2
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e00a      	b.n	8005664 <UART_SetConfig+0x348>
 800564e:	2304      	movs	r3, #4
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e007      	b.n	8005664 <UART_SetConfig+0x348>
 8005654:	2308      	movs	r3, #8
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e004      	b.n	8005664 <UART_SetConfig+0x348>
 800565a:	2310      	movs	r3, #16
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e001      	b.n	8005664 <UART_SetConfig+0x348>
 8005660:	2310      	movs	r3, #16
 8005662:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	d15b      	bne.n	8005726 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800566e:	7ffb      	ldrb	r3, [r7, #31]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d828      	bhi.n	80056c6 <UART_SetConfig+0x3aa>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x360>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fa32 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 80056a4:	61b8      	str	r0, [r7, #24]
        break;
 80056a6:	e013      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe fa42 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 80056ac:	61b8      	str	r0, [r7, #24]
        break;
 80056ae:	e00f      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <UART_SetConfig+0x4c4>)
 80056b2:	61bb      	str	r3, [r7, #24]
        break;
 80056b4:	e00c      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe f915 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80056ba:	61b8      	str	r0, [r7, #24]
        break;
 80056bc:	e008      	b.n	80056d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	61bb      	str	r3, [r7, #24]
        break;
 80056c4:	e004      	b.n	80056d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	77bb      	strb	r3, [r7, #30]
        break;
 80056ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d074      	beq.n	80057c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	005a      	lsls	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d916      	bls.n	8005720 <UART_SetConfig+0x404>
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d212      	bcs.n	8005720 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f023 030f 	bic.w	r3, r3, #15
 8005702:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	b29b      	uxth	r3, r3
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	b29a      	uxth	r2, r3
 8005710:	89fb      	ldrh	r3, [r7, #14]
 8005712:	4313      	orrs	r3, r2
 8005714:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	89fa      	ldrh	r2, [r7, #14]
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	e04f      	b.n	80057c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	77bb      	strb	r3, [r7, #30]
 8005724:	e04c      	b.n	80057c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d828      	bhi.n	800577e <UART_SetConfig+0x462>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0x418>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800577f 	.word	0x0800577f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	0800577f 	.word	0x0800577f
 8005754:	08005777 	.word	0x08005777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005758:	f7fe f9d6 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 800575c:	61b8      	str	r0, [r7, #24]
        break;
 800575e:	e013      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7fe f9e6 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e00f      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <UART_SetConfig+0x4c4>)
 800576a:	61bb      	str	r3, [r7, #24]
        break;
 800576c:	e00c      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7fe f8b9 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8005772:	61b8      	str	r0, [r7, #24]
        break;
 8005774:	e008      	b.n	8005788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577a:	61bb      	str	r3, [r7, #24]
        break;
 800577c:	e004      	b.n	8005788 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	77bb      	strb	r3, [r7, #30]
        break;
 8005786:	bf00      	nop
    }

    if (pclk != 0U)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085a      	lsrs	r2, r3, #1
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	441a      	add	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b0f      	cmp	r3, #15
 80057a6:	d909      	bls.n	80057bc <UART_SetConfig+0x4a0>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ae:	d205      	bcs.n	80057bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	e001      	b.n	80057c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40007c00 	.word	0x40007c00
 80057dc:	40023800 	.word	0x40023800
 80057e0:	00f42400 	.word	0x00f42400

080057e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01a      	beq.n	80058fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e2:	d10a      	bne.n	80058fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005938:	f7fc f9a4 	bl	8001c84 <HAL_GetTick>
 800593c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b08      	cmp	r3, #8
 800594a:	d10e      	bne.n	800596a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f831 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e027      	b.n	80059ba <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b04      	cmp	r3, #4
 8005976:	d10e      	bne.n	8005996 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f81b 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e011      	b.n	80059ba <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b09c      	sub	sp, #112	; 0x70
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	e0a7      	b.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	f000 80a3 	beq.w	8005b24 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc f951 	bl	8001c84 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d13f      	bne.n	8005a74 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a08:	667b      	str	r3, [r7, #100]	; 0x64
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a46:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e068      	b.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d050      	beq.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a90:	d148      	bne.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
 8005abc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aee:	623a      	str	r2, [r7, #32]
 8005af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	69f9      	ldr	r1, [r7, #28]
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e010      	b.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69da      	ldr	r2, [r3, #28]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	f43f af48 	beq.w	80059d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3770      	adds	r7, #112	; 0x70
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b095      	sub	sp, #84	; 0x54
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b74:	643b      	str	r3, [r7, #64]	; 0x40
 8005b76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d118      	bne.n	8005bf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f023 0310 	bic.w	r3, r3, #16
 8005bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6979      	ldr	r1, [r7, #20]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c0a:	bf00      	nop
 8005c0c:	3754      	adds	r7, #84	; 0x54
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff fb51 	bl	80052dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b088      	sub	sp, #32
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6979      	ldr	r1, [r7, #20]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	613b      	str	r3, [r7, #16]
   return(result);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fb1d 	bl	80052c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	f107 001c 	add.w	r0, r7, #28
 8005ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d120      	bne.n	8005cf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <USB_CoreInit+0xac>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa96 	bl	8006218 <USB_CoreReset>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e010      	b.n	8005d14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa8a 	bl	8006218 <USB_CoreReset>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10b      	bne.n	8005d32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f043 0206 	orr.w	r2, r3, #6
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d3e:	b004      	add	sp, #16
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	ffbdffbf 	.word	0xffbdffbf

08005d48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f023 0201 	bic.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	460b      	mov	r3, r1
 8005d74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d115      	bne.n	8005db8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d98:	2001      	movs	r0, #1
 8005d9a:	f7fb ff7f 	bl	8001c9c <HAL_Delay>
      ms++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fa29 	bl	80061fc <USB_GetMode>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d01e      	beq.n	8005dee <USB_SetCurrentMode+0x84>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b31      	cmp	r3, #49	; 0x31
 8005db4:	d9f0      	bls.n	8005d98 <USB_SetCurrentMode+0x2e>
 8005db6:	e01a      	b.n	8005dee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d115      	bne.n	8005dea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f7fb ff66 	bl	8001c9c <HAL_Delay>
      ms++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa10 	bl	80061fc <USB_GetMode>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <USB_SetCurrentMode+0x84>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b31      	cmp	r3, #49	; 0x31
 8005de6:	d9f0      	bls.n	8005dca <USB_SetCurrentMode+0x60>
 8005de8:	e001      	b.n	8005dee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e005      	b.n	8005dfa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b32      	cmp	r3, #50	; 0x32
 8005df2:	d101      	bne.n	8005df8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e04:	b084      	sub	sp, #16
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	e009      	b.n	8005e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3340      	adds	r3, #64	; 0x40
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3301      	adds	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b0e      	cmp	r3, #14
 8005e3c:	d9f2      	bls.n	8005e24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11c      	bne.n	8005e7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e52:	f043 0302 	orr.w	r3, r3, #2
 8005e56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e005      	b.n	8005e8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	680b      	ldr	r3, [r1, #0]
 8005ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10c      	bne.n	8005eca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f965 	bl	8006188 <USB_SetDevSpeed>
 8005ebe:	e008      	b.n	8005ed2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f960 	bl	8006188 <USB_SetDevSpeed>
 8005ec8:	e003      	b.n	8005ed2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005eca:	2103      	movs	r1, #3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f95b 	bl	8006188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f8f3 	bl	80060c0 <USB_FlushTxFifo>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f91f 	bl	8006128 <USB_FlushRxFifo>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	461a      	mov	r2, r3
 8005efc:	2300      	movs	r3, #0
 8005efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	461a      	mov	r2, r3
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	461a      	mov	r2, r3
 8005f14:	2300      	movs	r3, #0
 8005f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e043      	b.n	8005fa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f34:	d118      	bne.n	8005f68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	e013      	b.n	8005f7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e008      	b.n	8005f7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	461a      	mov	r2, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	461a      	mov	r2, r3
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d3b7      	bcc.n	8005f1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e043      	b.n	800603c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fca:	d118      	bne.n	8005ffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10a      	bne.n	8005fe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e013      	b.n	8006010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e008      	b.n	8006010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	461a      	mov	r2, r3
 800600c:	2300      	movs	r3, #0
 800600e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	461a      	mov	r2, r3
 800601e:	2300      	movs	r3, #0
 8006020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	461a      	mov	r2, r3
 8006030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	3301      	adds	r3, #1
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	429a      	cmp	r2, r3
 8006042:	d3b7      	bcc.n	8005fb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	2b00      	cmp	r3, #0
 800606a:	d105      	bne.n	8006078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f043 0210 	orr.w	r2, r3, #16
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <USB_DevInit+0x2b4>)
 800607e:	4313      	orrs	r3, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f043 0208 	orr.w	r2, r3, #8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <USB_DevInit+0x2b8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b4:	b004      	add	sp, #16
 80060b6:	4770      	bx	lr
 80060b8:	803c3800 	.word	0x803c3800
 80060bc:	40000004 	.word	0x40000004

080060c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a13      	ldr	r2, [pc, #76]	; (8006124 <USB_FlushTxFifo+0x64>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e01b      	b.n	8006118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	daf2      	bge.n	80060ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	019b      	lsls	r3, r3, #6
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <USB_FlushTxFifo+0x64>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e006      	b.n	8006118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b20      	cmp	r3, #32
 8006114:	d0f0      	beq.n	80060f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	00030d40 	.word	0x00030d40

08006128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a11      	ldr	r2, [pc, #68]	; (8006184 <USB_FlushRxFifo+0x5c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e018      	b.n	8006178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	daf2      	bge.n	8006134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2210      	movs	r2, #16
 8006156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <USB_FlushRxFifo+0x5c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e006      	b.n	8006178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	2b10      	cmp	r3, #16
 8006174:	d0f0      	beq.n	8006158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	00030d40 	.word	0x00030d40

08006188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	68f9      	ldr	r1, [r7, #12]
 80061a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a8:	4313      	orrs	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0301 	and.w	r3, r3, #1
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a13      	ldr	r2, [pc, #76]	; (800627c <USB_CoreReset+0x64>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e01b      	b.n	800626e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	daf2      	bge.n	8006224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f043 0201 	orr.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <USB_CoreReset+0x64>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e006      	b.n	800626e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d0f0      	beq.n	800624e <USB_CoreReset+0x36>

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	00030d40 	.word	0x00030d40

08006280 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006296:	f3ef 8305 	mrs	r3, IPSR
 800629a:	60bb      	str	r3, [r7, #8]
  return(result);
 800629c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10f      	bne.n	80062c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a2:	f3ef 8310 	mrs	r3, PRIMASK
 80062a6:	607b      	str	r3, [r7, #4]
  return(result);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d105      	bne.n	80062ba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062ae:	f3ef 8311 	mrs	r3, BASEPRI
 80062b2:	603b      	str	r3, [r7, #0]
  return(result);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d007      	beq.n	80062ca <osKernelInitialize+0x3a>
 80062ba:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <osKernelInitialize+0x64>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d103      	bne.n	80062ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80062c2:	f06f 0305 	mvn.w	r3, #5
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e00c      	b.n	80062e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <osKernelInitialize+0x64>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80062d2:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <osKernelInitialize+0x64>)
 80062d4:	2201      	movs	r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e002      	b.n	80062e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062e4:	68fb      	ldr	r3, [r7, #12]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000938 	.word	0x20000938

080062f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062fe:	f3ef 8305 	mrs	r3, IPSR
 8006302:	60bb      	str	r3, [r7, #8]
  return(result);
 8006304:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10f      	bne.n	800632a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630a:	f3ef 8310 	mrs	r3, PRIMASK
 800630e:	607b      	str	r3, [r7, #4]
  return(result);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d105      	bne.n	8006322 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006316:	f3ef 8311 	mrs	r3, BASEPRI
 800631a:	603b      	str	r3, [r7, #0]
  return(result);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <osKernelStart+0x3a>
 8006322:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <osKernelStart+0x68>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d103      	bne.n	8006332 <osKernelStart+0x3a>
    stat = osErrorISR;
 800632a:	f06f 0305 	mvn.w	r3, #5
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e010      	b.n	8006354 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <osKernelStart+0x68>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d109      	bne.n	800634e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800633a:	f7ff ffa1 	bl	8006280 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <osKernelStart+0x68>)
 8006340:	2202      	movs	r2, #2
 8006342:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006344:	f001 fa3e 	bl	80077c4 <vTaskStartScheduler>
      stat = osOK;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e002      	b.n	8006354 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006354:	68fb      	ldr	r3, [r7, #12]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000938 	.word	0x20000938

08006364 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b090      	sub	sp, #64	; 0x40
 8006368:	af04      	add	r7, sp, #16
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006374:	f3ef 8305 	mrs	r3, IPSR
 8006378:	61fb      	str	r3, [r7, #28]
  return(result);
 800637a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 808f 	bne.w	80064a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006382:	f3ef 8310 	mrs	r3, PRIMASK
 8006386:	61bb      	str	r3, [r7, #24]
  return(result);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d105      	bne.n	800639a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800638e:	f3ef 8311 	mrs	r3, BASEPRI
 8006392:	617b      	str	r3, [r7, #20]
  return(result);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <osThreadNew+0x3e>
 800639a:	4b44      	ldr	r3, [pc, #272]	; (80064ac <osThreadNew+0x148>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d07e      	beq.n	80064a0 <osThreadNew+0x13c>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d07b      	beq.n	80064a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80063ac:	2318      	movs	r3, #24
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80063b4:	f04f 33ff 	mov.w	r3, #4294967295
 80063b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d045      	beq.n	800644c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <osThreadNew+0x6a>
        name = attr->name;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <osThreadNew+0x90>
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	2b38      	cmp	r3, #56	; 0x38
 80063e6:	d805      	bhi.n	80063f4 <osThreadNew+0x90>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <osThreadNew+0x94>
        return (NULL);
 80063f4:	2300      	movs	r3, #0
 80063f6:	e054      	b.n	80064a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	089b      	lsrs	r3, r3, #2
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00e      	beq.n	800642e <osThreadNew+0xca>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2ba7      	cmp	r3, #167	; 0xa7
 8006416:	d90a      	bls.n	800642e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800641c:	2b00      	cmp	r3, #0
 800641e:	d006      	beq.n	800642e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <osThreadNew+0xca>
        mem = 1;
 8006428:	2301      	movs	r3, #1
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	e010      	b.n	8006450 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10c      	bne.n	8006450 <osThreadNew+0xec>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d108      	bne.n	8006450 <osThreadNew+0xec>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <osThreadNew+0xec>
          mem = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	e001      	b.n	8006450 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d110      	bne.n	8006478 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800645e:	9202      	str	r2, [sp, #8]
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fea7 	bl	80071c0 <xTaskCreateStatic>
 8006472:	4603      	mov	r3, r0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e013      	b.n	80064a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d110      	bne.n	80064a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	b29a      	uxth	r2, r3
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fef8 	bl	8007286 <xTaskCreate>
 8006496:	4603      	mov	r3, r0
 8006498:	2b01      	cmp	r3, #1
 800649a:	d001      	beq.n	80064a0 <osThreadNew+0x13c>
          hTask = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064a0:	693b      	ldr	r3, [r7, #16]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3730      	adds	r7, #48	; 0x30
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000938 	.word	0x20000938

080064b0 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064bc:	f3ef 8305 	mrs	r3, IPSR
 80064c0:	617b      	str	r3, [r7, #20]
  return(result);
 80064c2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c8:	f3ef 8310 	mrs	r3, PRIMASK
 80064cc:	613b      	str	r3, [r7, #16]
  return(result);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064d4:	f3ef 8311 	mrs	r3, BASEPRI
 80064d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <osThreadSuspend+0x40>
 80064e0:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <osThreadSuspend+0x64>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d103      	bne.n	80064f0 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80064e8:	f06f 0305 	mvn.w	r3, #5
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	e00b      	b.n	8006508 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80064f6:	f06f 0303 	mvn.w	r3, #3
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	e004      	b.n	8006508 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8006502:	69b8      	ldr	r0, [r7, #24]
 8006504:	f001 f852 	bl	80075ac <vTaskSuspend>
  }

  return (stat);
 8006508:	69fb      	ldr	r3, [r7, #28]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000938 	.word	0x20000938

08006518 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006524:	f3ef 8305 	mrs	r3, IPSR
 8006528:	617b      	str	r3, [r7, #20]
  return(result);
 800652a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10f      	bne.n	8006550 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006530:	f3ef 8310 	mrs	r3, PRIMASK
 8006534:	613b      	str	r3, [r7, #16]
  return(result);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653c:	f3ef 8311 	mrs	r3, BASEPRI
 8006540:	60fb      	str	r3, [r7, #12]
  return(result);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d007      	beq.n	8006558 <osThreadResume+0x40>
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <osThreadResume+0x64>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d103      	bne.n	8006558 <osThreadResume+0x40>
    stat = osErrorISR;
 8006550:	f06f 0305 	mvn.w	r3, #5
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e00b      	b.n	8006570 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <osThreadResume+0x4e>
    stat = osErrorParameter;
 800655e:	f06f 0303 	mvn.w	r3, #3
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	e004      	b.n	8006570 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800656a:	69b8      	ldr	r0, [r7, #24]
 800656c:	f001 f8ca 	bl	8007704 <vTaskResume>
  }

  return (stat);
 8006570:	69fb      	ldr	r3, [r7, #28]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000938 	.word	0x20000938

08006580 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006588:	f3ef 8305 	mrs	r3, IPSR
 800658c:	613b      	str	r3, [r7, #16]
  return(result);
 800658e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006594:	f3ef 8310 	mrs	r3, PRIMASK
 8006598:	60fb      	str	r3, [r7, #12]
  return(result);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d105      	bne.n	80065ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065a0:	f3ef 8311 	mrs	r3, BASEPRI
 80065a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <osDelay+0x3c>
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <osDelay+0x58>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d103      	bne.n	80065bc <osDelay+0x3c>
    stat = osErrorISR;
 80065b4:	f06f 0305 	mvn.w	r3, #5
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e007      	b.n	80065cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 ffba 	bl	8007540 <vTaskDelay>
    }
  }

  return (stat);
 80065cc:	697b      	ldr	r3, [r7, #20]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000938 	.word	0x20000938

080065dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4a07      	ldr	r2, [pc, #28]	; (8006608 <vApplicationGetIdleTaskMemory+0x2c>)
 80065ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4a06      	ldr	r2, [pc, #24]	; (800660c <vApplicationGetIdleTaskMemory+0x30>)
 80065f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2280      	movs	r2, #128	; 0x80
 80065f8:	601a      	str	r2, [r3, #0]
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	2000093c 	.word	0x2000093c
 800660c:	200009e4 	.word	0x200009e4

08006610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a07      	ldr	r2, [pc, #28]	; (800663c <vApplicationGetTimerTaskMemory+0x2c>)
 8006620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vApplicationGetTimerTaskMemory+0x30>)
 8006626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800662e:	601a      	str	r2, [r3, #0]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000be4 	.word	0x20000be4
 8006640:	20000c8c 	.word	0x20000c8c

08006644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f103 0208 	add.w	r2, r3, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f103 0208 	add.w	r2, r3, #8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f103 0208 	add.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d103      	bne.n	8006706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e00c      	b.n	8006720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3308      	adds	r3, #8
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e002      	b.n	8006714 <vListInsert+0x2e>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	d2f6      	bcs.n	800670e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6892      	ldr	r2, [r2, #8]
 800676e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6852      	ldr	r2, [r2, #4]
 8006778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d103      	bne.n	800678c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	1e5a      	subs	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	b672      	cpsid	i
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	b662      	cpsie	i
 80067d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80067da:	f002 f9af 	bl	8008b3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	441a      	add	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	3b01      	subs	r3, #1
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	22ff      	movs	r2, #255	; 0xff
 800681e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d114      	bne.n	800685a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3310      	adds	r3, #16
 800683c:	4618      	mov	r0, r3
 800683e:	f001 fa69 	bl	8007d14 <xTaskRemoveFromEventList>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d012      	beq.n	800686e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <xQueueGenericReset+0xd0>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	e009      	b.n	800686e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3310      	adds	r3, #16
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fef0 	bl	8006644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3324      	adds	r3, #36	; 0x24
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff feeb 	bl	8006644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f002 f999 	bl	8008ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006872:	2301      	movs	r3, #1
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08e      	sub	sp, #56	; 0x38
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10c      	bne.n	80068ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	b672      	cpsid	i
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	b662      	cpsie	i
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10c      	bne.n	80068ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	b672      	cpsid	i
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	b662      	cpsie	i
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <xQueueGenericCreateStatic+0x5a>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <xQueueGenericCreateStatic+0x5e>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <xQueueGenericCreateStatic+0x60>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10c      	bne.n	80068fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	b672      	cpsid	i
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	b662      	cpsie	i
 80068f8:	623b      	str	r3, [r7, #32]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <xQueueGenericCreateStatic+0x8a>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <xQueueGenericCreateStatic+0x8e>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <xQueueGenericCreateStatic+0x90>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	b672      	cpsid	i
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	b662      	cpsie	i
 8006928:	61fb      	str	r3, [r7, #28]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800692e:	2350      	movs	r3, #80	; 0x50
 8006930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b50      	cmp	r3, #80	; 0x50
 8006936:	d00c      	beq.n	8006952 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	b672      	cpsid	i
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	b662      	cpsie	i
 800694c:	61bb      	str	r3, [r7, #24]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006952:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00d      	beq.n	800697a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006966:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f805 	bl	8006984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800697c:	4618      	mov	r0, r3
 800697e:	3730      	adds	r7, #48	; 0x30
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e002      	b.n	80069a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069b2:	2101      	movs	r1, #1
 80069b4:	69b8      	ldr	r0, [r7, #24]
 80069b6:	f7ff fef9 	bl	80067ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08e      	sub	sp, #56	; 0x38
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069da:	2300      	movs	r3, #0
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10c      	bne.n	8006a02 <xQueueGenericSend+0x36>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	b672      	cpsid	i
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	b662      	cpsie	i
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d103      	bne.n	8006a10 <xQueueGenericSend+0x44>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <xQueueGenericSend+0x48>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <xQueueGenericSend+0x4a>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10c      	bne.n	8006a34 <xQueueGenericSend+0x68>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	b672      	cpsid	i
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	b662      	cpsie	i
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSend+0x76>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <xQueueGenericSend+0x7a>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <xQueueGenericSend+0x7c>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10c      	bne.n	8006a66 <xQueueGenericSend+0x9a>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	623b      	str	r3, [r7, #32]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a66:	f001 fb1f 	bl	80080a8 <xTaskGetSchedulerState>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <xQueueGenericSend+0xaa>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <xQueueGenericSend+0xae>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <xQueueGenericSend+0xb0>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10c      	bne.n	8006a9a <xQueueGenericSend+0xce>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	b672      	cpsid	i
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	b662      	cpsie	i
 8006a94:	61fb      	str	r3, [r7, #28]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a9a:	f002 f84f 	bl	8008b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <xQueueGenericSend+0xe4>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d129      	bne.n	8006b04 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab6:	f000 fa15 	bl	8006ee4 <prvCopyDataToQueue>
 8006aba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d010      	beq.n	8006ae6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	3324      	adds	r3, #36	; 0x24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 f923 	bl	8007d14 <xTaskRemoveFromEventList>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d013      	beq.n	8006afc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ad4:	4b3f      	ldr	r3, [pc, #252]	; (8006bd4 <xQueueGenericSend+0x208>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	e00a      	b.n	8006afc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006aec:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <xQueueGenericSend+0x208>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006afc:	f002 f852 	bl	8008ba4 <vPortExitCritical>
				return pdPASS;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e063      	b.n	8006bcc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b0a:	f002 f84b 	bl	8008ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e05c      	b.n	8006bcc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b18:	f107 0314 	add.w	r3, r7, #20
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f95f 	bl	8007de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b22:	2301      	movs	r3, #1
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b26:	f002 f83d 	bl	8008ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b2a:	f000 febf 	bl	80078ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b2e:	f002 f805 	bl	8008b3c <vPortEnterCritical>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d103      	bne.n	8006b48 <xQueueGenericSend+0x17c>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b4e:	b25b      	sxtb	r3, r3
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSend+0x192>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b5e:	f002 f821 	bl	8008ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b62:	1d3a      	adds	r2, r7, #4
 8006b64:	f107 0314 	add.w	r3, r7, #20
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 f94e 	bl	8007e0c <xTaskCheckForTimeOut>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d124      	bne.n	8006bc0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b78:	f000 faac 	bl	80070d4 <prvIsQueueFull>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	3310      	adds	r3, #16
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 f86e 	bl	8007c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b92:	f000 fa37 	bl	8007004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b96:	f000 fe97 	bl	80078c8 <xTaskResumeAll>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f47f af7c 	bne.w	8006a9a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <xQueueGenericSend+0x208>)
 8006ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	e772      	b.n	8006a9a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb6:	f000 fa25 	bl	8007004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bba:	f000 fe85 	bl	80078c8 <xTaskResumeAll>
 8006bbe:	e76c      	b.n	8006a9a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bc2:	f000 fa1f 	bl	8007004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bc6:	f000 fe7f 	bl	80078c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3738      	adds	r7, #56	; 0x38
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08e      	sub	sp, #56	; 0x38
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10c      	bne.n	8006c0a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	b672      	cpsid	i
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	b662      	cpsie	i
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d103      	bne.n	8006c18 <xQueueGenericSendFromISR+0x40>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <xQueueGenericSendFromISR+0x44>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <xQueueGenericSendFromISR+0x46>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10c      	bne.n	8006c3c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	b672      	cpsid	i
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	b662      	cpsie	i
 8006c36:	623b      	str	r3, [r7, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d103      	bne.n	8006c4a <xQueueGenericSendFromISR+0x72>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <xQueueGenericSendFromISR+0x76>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGenericSendFromISR+0x78>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10c      	bne.n	8006c6e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	b672      	cpsid	i
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	b662      	cpsie	i
 8006c68:	61fb      	str	r3, [r7, #28]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c6e:	f002 f84d 	bl	8008d0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c72:	f3ef 8211 	mrs	r2, BASEPRI
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	b672      	cpsid	i
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	b662      	cpsie	i
 8006c8a:	61ba      	str	r2, [r7, #24]
 8006c8c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <xQueueGenericSendFromISR+0xcc>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d12c      	bne.n	8006cfe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cb4:	f000 f916 	bl	8006ee4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cb8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d112      	bne.n	8006ce8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d016      	beq.n	8006cf8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	3324      	adds	r3, #36	; 0x24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f820 	bl	8007d14 <xTaskRemoveFromEventList>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e007      	b.n	8006cf8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cec:	3301      	adds	r3, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	b25a      	sxtb	r2, r3
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cfc:	e001      	b.n	8006d02 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3738      	adds	r7, #56	; 0x38
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08c      	sub	sp, #48	; 0x30
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10c      	bne.n	8006d4c <xQueueReceive+0x34>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	b672      	cpsid	i
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	b662      	cpsie	i
 8006d46:	623b      	str	r3, [r7, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <xQueueReceive+0x42>
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <xQueueReceive+0x46>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <xQueueReceive+0x48>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10c      	bne.n	8006d7e <xQueueReceive+0x66>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	b672      	cpsid	i
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	b662      	cpsie	i
 8006d78:	61fb      	str	r3, [r7, #28]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d7e:	f001 f993 	bl	80080a8 <xTaskGetSchedulerState>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <xQueueReceive+0x76>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <xQueueReceive+0x7a>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueReceive+0x7c>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10c      	bne.n	8006db2 <xQueueReceive+0x9a>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	b672      	cpsid	i
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	b662      	cpsie	i
 8006dac:	61bb      	str	r3, [r7, #24]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db2:	f001 fec3 	bl	8008b3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01f      	beq.n	8006e02 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc6:	f000 f8f7 	bl	8006fb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	1e5a      	subs	r2, r3, #1
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00f      	beq.n	8006dfa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	3310      	adds	r3, #16
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 ff98 	bl	8007d14 <xTaskRemoveFromEventList>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dea:	4b3d      	ldr	r3, [pc, #244]	; (8006ee0 <xQueueReceive+0x1c8>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dfa:	f001 fed3 	bl	8008ba4 <vPortExitCritical>
				return pdPASS;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e069      	b.n	8006ed6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d103      	bne.n	8006e10 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e08:	f001 fecc 	bl	8008ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e062      	b.n	8006ed6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e16:	f107 0310 	add.w	r3, r7, #16
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 ffe0 	bl	8007de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e24:	f001 febe 	bl	8008ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e28:	f000 fd40 	bl	80078ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e2c:	f001 fe86 	bl	8008b3c <vPortEnterCritical>
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e36:	b25b      	sxtb	r3, r3
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d103      	bne.n	8006e46 <xQueueReceive+0x12e>
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e52:	d103      	bne.n	8006e5c <xQueueReceive+0x144>
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e5c:	f001 fea2 	bl	8008ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e60:	1d3a      	adds	r2, r7, #4
 8006e62:	f107 0310 	add.w	r3, r7, #16
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 ffcf 	bl	8007e0c <xTaskCheckForTimeOut>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d123      	bne.n	8006ebc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e76:	f000 f917 	bl	80070a8 <prvIsQueueEmpty>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d017      	beq.n	8006eb0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	3324      	adds	r3, #36	; 0x24
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	4611      	mov	r1, r2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 feef 	bl	8007c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e90:	f000 f8b8 	bl	8007004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e94:	f000 fd18 	bl	80078c8 <xTaskResumeAll>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d189      	bne.n	8006db2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <xQueueReceive+0x1c8>)
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	e780      	b.n	8006db2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb2:	f000 f8a7 	bl	8007004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eb6:	f000 fd07 	bl	80078c8 <xTaskResumeAll>
 8006eba:	e77a      	b.n	8006db2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebe:	f000 f8a1 	bl	8007004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ec2:	f000 fd01 	bl	80078c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec8:	f000 f8ee 	bl	80070a8 <prvIsQueueEmpty>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f43f af6f 	beq.w	8006db2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ed4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3730      	adds	r7, #48	; 0x30
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10d      	bne.n	8006f1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d14d      	bne.n	8006fa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 f8e8 	bl	80080e4 <xTaskPriorityDisinherit>
 8006f14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	e043      	b.n	8006fa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d119      	bne.n	8006f58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6858      	ldr	r0, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	f002 ff4b 	bl	8009dca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d32b      	bcc.n	8006fa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	605a      	str	r2, [r3, #4]
 8006f56:	e026      	b.n	8006fa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68d8      	ldr	r0, [r3, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	461a      	mov	r2, r3
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	f002 ff31 	bl	8009dca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	425b      	negs	r3, r3
 8006f72:	441a      	add	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d207      	bcs.n	8006f94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d105      	bne.n	8006fa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fae:	697b      	ldr	r3, [r7, #20]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d018      	beq.n	8006ffc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	441a      	add	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d303      	bcc.n	8006fec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68d9      	ldr	r1, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6838      	ldr	r0, [r7, #0]
 8006ff8:	f002 fee7 	bl	8009dca <memcpy>
	}
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800700c:	f001 fd96 	bl	8008b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007018:	e011      	b.n	800703e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b00      	cmp	r3, #0
 8007020:	d012      	beq.n	8007048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3324      	adds	r3, #36	; 0x24
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fe74 	bl	8007d14 <xTaskRemoveFromEventList>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007032:	f000 ff51 	bl	8007ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	3b01      	subs	r3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800703e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	dce9      	bgt.n	800701a <prvUnlockQueue+0x16>
 8007046:	e000      	b.n	800704a <prvUnlockQueue+0x46>
					break;
 8007048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	22ff      	movs	r2, #255	; 0xff
 800704e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007052:	f001 fda7 	bl	8008ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007056:	f001 fd71 	bl	8008b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007062:	e011      	b.n	8007088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d012      	beq.n	8007092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3310      	adds	r3, #16
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fe4f 	bl	8007d14 <xTaskRemoveFromEventList>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800707c:	f000 ff2c 	bl	8007ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	3b01      	subs	r3, #1
 8007084:	b2db      	uxtb	r3, r3
 8007086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	dce9      	bgt.n	8007064 <prvUnlockQueue+0x60>
 8007090:	e000      	b.n	8007094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	22ff      	movs	r2, #255	; 0xff
 8007098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800709c:	f001 fd82 	bl	8008ba4 <vPortExitCritical>
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070b0:	f001 fd44 	bl	8008b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e001      	b.n	80070c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c6:	f001 fd6d 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070dc:	f001 fd2e 	bl	8008b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d102      	bne.n	80070f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e001      	b.n	80070f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070f6:	f001 fd55 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 80070fa:	68fb      	ldr	r3, [r7, #12]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e014      	b.n	800713e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007114:	4a0f      	ldr	r2, [pc, #60]	; (8007154 <vQueueAddToRegistry+0x50>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007120:	490c      	ldr	r1, [pc, #48]	; (8007154 <vQueueAddToRegistry+0x50>)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <vQueueAddToRegistry+0x50>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	4413      	add	r3, r2
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007136:	e006      	b.n	8007146 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b07      	cmp	r3, #7
 8007142:	d9e7      	bls.n	8007114 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000108c 	.word	0x2000108c

08007158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007168:	f001 fce8 	bl	8008b3c <vPortEnterCritical>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007172:	b25b      	sxtb	r3, r3
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d103      	bne.n	8007182 <vQueueWaitForMessageRestricted+0x2a>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007188:	b25b      	sxtb	r3, r3
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718e:	d103      	bne.n	8007198 <vQueueWaitForMessageRestricted+0x40>
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007198:	f001 fd04 	bl	8008ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	3324      	adds	r3, #36	; 0x24
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fd83 	bl	8007cb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071b2:	6978      	ldr	r0, [r7, #20]
 80071b4:	f7ff ff26 	bl	8007004 <prvUnlockQueue>
	}
 80071b8:	bf00      	nop
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08e      	sub	sp, #56	; 0x38
 80071c4:	af04      	add	r7, sp, #16
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10c      	bne.n	80071ee <xTaskCreateStatic+0x2e>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	b672      	cpsid	i
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	b662      	cpsie	i
 80071e8:	623b      	str	r3, [r7, #32]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10c      	bne.n	800720e <xTaskCreateStatic+0x4e>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	b672      	cpsid	i
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	b662      	cpsie	i
 8007208:	61fb      	str	r3, [r7, #28]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800720e:	23a8      	movs	r3, #168	; 0xa8
 8007210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2ba8      	cmp	r3, #168	; 0xa8
 8007216:	d00c      	beq.n	8007232 <xTaskCreateStatic+0x72>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	b672      	cpsid	i
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	b662      	cpsie	i
 800722c:	61bb      	str	r3, [r7, #24]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007232:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01e      	beq.n	8007278 <xTaskCreateStatic+0xb8>
 800723a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01b      	beq.n	8007278 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007248:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	2202      	movs	r2, #2
 800724e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007252:	2300      	movs	r3, #0
 8007254:	9303      	str	r3, [sp, #12]
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	9302      	str	r3, [sp, #8]
 800725a:	f107 0314 	add.w	r3, r7, #20
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 f850 	bl	8007310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007272:	f000 f8f5 	bl	8007460 <prvAddNewTaskToReadyList>
 8007276:	e001      	b.n	800727c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800727c:	697b      	ldr	r3, [r7, #20]
	}
 800727e:	4618      	mov	r0, r3
 8007280:	3728      	adds	r7, #40	; 0x28
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007286:	b580      	push	{r7, lr}
 8007288:	b08c      	sub	sp, #48	; 0x30
 800728a:	af04      	add	r7, sp, #16
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	4613      	mov	r3, r2
 8007294:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fd7a 	bl	8008d94 <pvPortMalloc>
 80072a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072a8:	20a8      	movs	r0, #168	; 0xa8
 80072aa:	f001 fd73 	bl	8008d94 <pvPortMalloc>
 80072ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30
 80072bc:	e005      	b.n	80072ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072be:	6978      	ldr	r0, [r7, #20]
 80072c0:	f001 fe32 	bl	8008f28 <vPortFree>
 80072c4:	e001      	b.n	80072ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d017      	beq.n	8007300 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072d8:	88fa      	ldrh	r2, [r7, #6]
 80072da:	2300      	movs	r3, #0
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f80e 	bl	8007310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072f4:	69f8      	ldr	r0, [r7, #28]
 80072f6:	f000 f8b3 	bl	8007460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	e002      	b.n	8007306 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007306:	69bb      	ldr	r3, [r7, #24]
	}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	461a      	mov	r2, r3
 8007328:	21a5      	movs	r1, #165	; 0xa5
 800732a:	f002 fc78 	bl	8009c1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007338:	440b      	add	r3, r1
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00c      	beq.n	800736c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	b672      	cpsid	i
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	b662      	cpsie	i
 8007366:	617b      	str	r3, [r7, #20]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01f      	beq.n	80073b2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	e012      	b.n	800739e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	7819      	ldrb	r1, [r3, #0]
 8007380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	3334      	adds	r3, #52	; 0x34
 8007388:	460a      	mov	r2, r1
 800738a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	3301      	adds	r3, #1
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d9e9      	bls.n	8007378 <prvInitialiseNewTask+0x68>
 80073a4:	e000      	b.n	80073a8 <prvInitialiseNewTask+0x98>
			{
				break;
 80073a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073b0:	e003      	b.n	80073ba <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	2b37      	cmp	r3, #55	; 0x37
 80073be:	d901      	bls.n	80073c4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073c0:	2337      	movs	r3, #55	; 0x37
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	2200      	movs	r2, #0
 80073d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	3304      	adds	r3, #4
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff f952 	bl	8006684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	3318      	adds	r3, #24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff f94d 	bl	8006684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2200      	movs	r2, #0
 800740c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	3354      	adds	r3, #84	; 0x54
 8007414:	224c      	movs	r2, #76	; 0x4c
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f002 fc00 	bl	8009c1e <memset>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <prvInitialiseNewTask+0x144>)
 8007422:	659a      	str	r2, [r3, #88]	; 0x58
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <prvInitialiseNewTask+0x148>)
 8007428:	65da      	str	r2, [r3, #92]	; 0x5c
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	4a0b      	ldr	r2, [pc, #44]	; (800745c <prvInitialiseNewTask+0x14c>)
 800742e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	69b8      	ldr	r0, [r7, #24]
 8007436:	f001 fa77 	bl	8008928 <pxPortInitialiseStack>
 800743a:	4602      	mov	r2, r0
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800744c:	bf00      	nop
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20005318 	.word	0x20005318
 8007458:	20005380 	.word	0x20005380
 800745c:	200053e8 	.word	0x200053e8

08007460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007468:	f001 fb68 	bl	8008b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800746c:	4b2d      	ldr	r3, [pc, #180]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a2c      	ldr	r2, [pc, #176]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 8007474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007476:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800747e:	4a2a      	ldr	r2, [pc, #168]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007484:	4b27      	ldr	r3, [pc, #156]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d110      	bne.n	80074ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800748c:	f000 fd48 	bl	8007f20 <prvInitialiseTaskLists>
 8007490:	e00d      	b.n	80074ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007492:	4b26      	ldr	r3, [pc, #152]	; (800752c <prvAddNewTaskToReadyList+0xcc>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800749a:	4b23      	ldr	r3, [pc, #140]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d802      	bhi.n	80074ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a8:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ae:	4b20      	ldr	r3, [pc, #128]	; (8007530 <prvAddNewTaskToReadyList+0xd0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <prvAddNewTaskToReadyList+0xd0>)
 80074b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074b8:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <prvAddNewTaskToReadyList+0xd0>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c4:	4b1b      	ldr	r3, [pc, #108]	; (8007534 <prvAddNewTaskToReadyList+0xd4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d903      	bls.n	80074d4 <prvAddNewTaskToReadyList+0x74>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	4a18      	ldr	r2, [pc, #96]	; (8007534 <prvAddNewTaskToReadyList+0xd4>)
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4a15      	ldr	r2, [pc, #84]	; (8007538 <prvAddNewTaskToReadyList+0xd8>)
 80074e2:	441a      	add	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7ff f8d7 	bl	800669e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074f0:	f001 fb58 	bl	8008ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074f4:	4b0d      	ldr	r3, [pc, #52]	; (800752c <prvAddNewTaskToReadyList+0xcc>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00e      	beq.n	800751a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	429a      	cmp	r2, r3
 8007508:	d207      	bcs.n	800751a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800750a:	4b0c      	ldr	r3, [pc, #48]	; (800753c <prvAddNewTaskToReadyList+0xdc>)
 800750c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200015a0 	.word	0x200015a0
 8007528:	200010cc 	.word	0x200010cc
 800752c:	200015ac 	.word	0x200015ac
 8007530:	200015bc 	.word	0x200015bc
 8007534:	200015a8 	.word	0x200015a8
 8007538:	200010d0 	.word	0x200010d0
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d019      	beq.n	8007586 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <vTaskDelay+0x64>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <vTaskDelay+0x34>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	b672      	cpsid	i
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	b662      	cpsie	i
 800756e:	60bb      	str	r3, [r7, #8]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007574:	f000 f99a 	bl	80078ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007578:	2100      	movs	r1, #0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fe24 	bl	80081c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007580:	f000 f9a2 	bl	80078c8 <xTaskResumeAll>
 8007584:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d107      	bne.n	800759c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <vTaskDelay+0x68>)
 800758e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	200015c8 	.word	0x200015c8
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80075b4:	f001 fac2 	bl	8008b3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <vTaskSuspend+0x18>
 80075be:	4b31      	ldr	r3, [pc, #196]	; (8007684 <vTaskSuspend+0xd8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	e000      	b.n	80075c6 <vTaskSuspend+0x1a>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff f8c3 	bl	8006758 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3318      	adds	r3, #24
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff f8ba 	bl	8006758 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4827      	ldr	r0, [pc, #156]	; (8007688 <vTaskSuspend+0xdc>)
 80075ec:	f7ff f857 	bl	800669e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d103      	bne.n	8007604 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007604:	f001 face 	bl	8008ba4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007608:	4b20      	ldr	r3, [pc, #128]	; (800768c <vTaskSuspend+0xe0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007610:	f001 fa94 	bl	8008b3c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007614:	f000 fd28 	bl	8008068 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007618:	f001 fac4 	bl	8008ba4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800761c:	4b19      	ldr	r3, [pc, #100]	; (8007684 <vTaskSuspend+0xd8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	429a      	cmp	r2, r3
 8007624:	d129      	bne.n	800767a <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8007626:	4b19      	ldr	r3, [pc, #100]	; (800768c <vTaskSuspend+0xe0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d019      	beq.n	8007662 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800762e:	4b18      	ldr	r3, [pc, #96]	; (8007690 <vTaskSuspend+0xe4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00c      	beq.n	8007650 <vTaskSuspend+0xa4>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	b672      	cpsid	i
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	b662      	cpsie	i
 800764a:	60bb      	str	r3, [r7, #8]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8007650:	4b10      	ldr	r3, [pc, #64]	; (8007694 <vTaskSuspend+0xe8>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007660:	e00b      	b.n	800767a <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007662:	4b09      	ldr	r3, [pc, #36]	; (8007688 <vTaskSuspend+0xdc>)
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <vTaskSuspend+0xec>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d103      	bne.n	8007676 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <vTaskSuspend+0xd8>)
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
	}
 8007674:	e001      	b.n	800767a <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8007676:	f000 fa93 	bl	8007ba0 <vTaskSwitchContext>
	}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	200010cc 	.word	0x200010cc
 8007688:	2000158c 	.word	0x2000158c
 800768c:	200015ac 	.word	0x200015ac
 8007690:	200015c8 	.word	0x200015c8
 8007694:	e000ed04 	.word	0xe000ed04
 8007698:	200015a0 	.word	0x200015a0

0800769c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10c      	bne.n	80076cc <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	b672      	cpsid	i
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	b662      	cpsie	i
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <prvTaskIsTaskSuspended+0x60>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d10a      	bne.n	80076ec <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	4a09      	ldr	r2, [pc, #36]	; (8007700 <prvTaskIsTaskSuspended+0x64>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d005      	beq.n	80076ec <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076ec:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80076ee:	4618      	mov	r0, r3
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	2000158c 	.word	0x2000158c
 8007700:	20001560 	.word	0x20001560

08007704 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10c      	bne.n	8007730 <vTaskResume+0x2c>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	b672      	cpsid	i
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	b662      	cpsie	i
 800772a:	60bb      	str	r3, [r7, #8]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007730:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <vTaskResume+0xb0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	429a      	cmp	r2, r3
 8007738:	d038      	beq.n	80077ac <vTaskResume+0xa8>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d035      	beq.n	80077ac <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8007740:	f001 f9fc 	bl	8008b3c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff ffa9 	bl	800769c <prvTaskIsTaskSuspended>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02b      	beq.n	80077a8 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3304      	adds	r3, #4
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe ffff 	bl	8006758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <vTaskResume+0xb4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d903      	bls.n	800776e <vTaskResume+0x6a>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	4a13      	ldr	r2, [pc, #76]	; (80077b8 <vTaskResume+0xb4>)
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4a10      	ldr	r2, [pc, #64]	; (80077bc <vTaskResume+0xb8>)
 800777c:	441a      	add	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3304      	adds	r3, #4
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f7fe ff8a 	bl	800669e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <vTaskResume+0xb0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	429a      	cmp	r2, r3
 8007796:	d307      	bcc.n	80077a8 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <vTaskResume+0xbc>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80077a8:	f001 f9fc 	bl	8008ba4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ac:	bf00      	nop
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	200010cc 	.word	0x200010cc
 80077b8:	200015a8 	.word	0x200015a8
 80077bc:	200010d0 	.word	0x200010d0
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077d2:	463a      	mov	r2, r7
 80077d4:	1d39      	adds	r1, r7, #4
 80077d6:	f107 0308 	add.w	r3, r7, #8
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fefe 	bl	80065dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	2300      	movs	r3, #0
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	2300      	movs	r3, #0
 80077f0:	460a      	mov	r2, r1
 80077f2:	4926      	ldr	r1, [pc, #152]	; (800788c <vTaskStartScheduler+0xc8>)
 80077f4:	4826      	ldr	r0, [pc, #152]	; (8007890 <vTaskStartScheduler+0xcc>)
 80077f6:	f7ff fce3 	bl	80071c0 <xTaskCreateStatic>
 80077fa:	4603      	mov	r3, r0
 80077fc:	4a25      	ldr	r2, [pc, #148]	; (8007894 <vTaskStartScheduler+0xd0>)
 80077fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007800:	4b24      	ldr	r3, [pc, #144]	; (8007894 <vTaskStartScheduler+0xd0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007808:	2301      	movs	r3, #1
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	e001      	b.n	8007812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d102      	bne.n	800781e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007818:	f000 fd2a 	bl	8008270 <xTimerCreateTimerTask>
 800781c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d11d      	bne.n	8007860 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	b672      	cpsid	i
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	b662      	cpsie	i
 8007838:	613b      	str	r3, [r7, #16]
}
 800783a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800783c:	4b16      	ldr	r3, [pc, #88]	; (8007898 <vTaskStartScheduler+0xd4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3354      	adds	r3, #84	; 0x54
 8007842:	4a16      	ldr	r2, [pc, #88]	; (800789c <vTaskStartScheduler+0xd8>)
 8007844:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <vTaskStartScheduler+0xdc>)
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800784e:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <vTaskStartScheduler+0xe0>)
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007854:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <vTaskStartScheduler+0xe4>)
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800785a:	f001 f8f1 	bl	8008a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800785e:	e010      	b.n	8007882 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007866:	d10c      	bne.n	8007882 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	b672      	cpsid	i
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	b662      	cpsie	i
 800787c:	60fb      	str	r3, [r7, #12]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <vTaskStartScheduler+0xbc>
}
 8007882:	bf00      	nop
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	0800c4d4 	.word	0x0800c4d4
 8007890:	08007ef1 	.word	0x08007ef1
 8007894:	200015c4 	.word	0x200015c4
 8007898:	200010cc 	.word	0x200010cc
 800789c:	20000074 	.word	0x20000074
 80078a0:	200015c0 	.word	0x200015c0
 80078a4:	200015ac 	.word	0x200015ac
 80078a8:	200015a4 	.word	0x200015a4

080078ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078b0:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <vTaskSuspendAll+0x18>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	4a03      	ldr	r2, [pc, #12]	; (80078c4 <vTaskSuspendAll+0x18>)
 80078b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80078ba:	bf00      	nop
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	200015c8 	.word	0x200015c8

080078c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078d6:	4b43      	ldr	r3, [pc, #268]	; (80079e4 <xTaskResumeAll+0x11c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10c      	bne.n	80078f8 <xTaskResumeAll+0x30>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	b672      	cpsid	i
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	b662      	cpsie	i
 80078f2:	603b      	str	r3, [r7, #0]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078f8:	f001 f920 	bl	8008b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078fc:	4b39      	ldr	r3, [pc, #228]	; (80079e4 <xTaskResumeAll+0x11c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3b01      	subs	r3, #1
 8007902:	4a38      	ldr	r2, [pc, #224]	; (80079e4 <xTaskResumeAll+0x11c>)
 8007904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007906:	4b37      	ldr	r3, [pc, #220]	; (80079e4 <xTaskResumeAll+0x11c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d162      	bne.n	80079d4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800790e:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <xTaskResumeAll+0x120>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d05e      	beq.n	80079d4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007916:	e02f      	b.n	8007978 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007918:	4b34      	ldr	r3, [pc, #208]	; (80079ec <xTaskResumeAll+0x124>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3318      	adds	r3, #24
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe ff17 	bl	8006758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3304      	adds	r3, #4
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe ff12 	bl	8006758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	4b2d      	ldr	r3, [pc, #180]	; (80079f0 <xTaskResumeAll+0x128>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d903      	bls.n	8007948 <xTaskResumeAll+0x80>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <xTaskResumeAll+0x128>)
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4a27      	ldr	r2, [pc, #156]	; (80079f4 <xTaskResumeAll+0x12c>)
 8007956:	441a      	add	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3304      	adds	r3, #4
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	f7fe fe9d 	bl	800669e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <xTaskResumeAll+0x130>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	429a      	cmp	r2, r3
 8007970:	d302      	bcc.n	8007978 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007972:	4b22      	ldr	r3, [pc, #136]	; (80079fc <xTaskResumeAll+0x134>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007978:	4b1c      	ldr	r3, [pc, #112]	; (80079ec <xTaskResumeAll+0x124>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1cb      	bne.n	8007918 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007986:	f000 fb6f 	bl	8008068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800798a:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <xTaskResumeAll+0x138>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d010      	beq.n	80079b8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007996:	f000 f847 	bl	8007a28 <xTaskIncrementTick>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80079a0:	4b16      	ldr	r3, [pc, #88]	; (80079fc <xTaskResumeAll+0x134>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f1      	bne.n	8007996 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80079b2:	4b13      	ldr	r3, [pc, #76]	; (8007a00 <xTaskResumeAll+0x138>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <xTaskResumeAll+0x134>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d009      	beq.n	80079d4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079c4:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <xTaskResumeAll+0x13c>)
 80079c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079d4:	f001 f8e6 	bl	8008ba4 <vPortExitCritical>

	return xAlreadyYielded;
 80079d8:	68bb      	ldr	r3, [r7, #8]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	200015c8 	.word	0x200015c8
 80079e8:	200015a0 	.word	0x200015a0
 80079ec:	20001560 	.word	0x20001560
 80079f0:	200015a8 	.word	0x200015a8
 80079f4:	200010d0 	.word	0x200010d0
 80079f8:	200010cc 	.word	0x200010cc
 80079fc:	200015b4 	.word	0x200015b4
 8007a00:	200015b0 	.word	0x200015b0
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <xTaskGetTickCount+0x1c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a14:	687b      	ldr	r3, [r7, #4]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	200015a4 	.word	0x200015a4

08007a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a32:	4b50      	ldr	r3, [pc, #320]	; (8007b74 <xTaskIncrementTick+0x14c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 808b 	bne.w	8007b52 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a3c:	4b4e      	ldr	r3, [pc, #312]	; (8007b78 <xTaskIncrementTick+0x150>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a44:	4a4c      	ldr	r2, [pc, #304]	; (8007b78 <xTaskIncrementTick+0x150>)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d122      	bne.n	8007a96 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a50:	4b4a      	ldr	r3, [pc, #296]	; (8007b7c <xTaskIncrementTick+0x154>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00c      	beq.n	8007a74 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	b672      	cpsid	i
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	b662      	cpsie	i
 8007a6e:	603b      	str	r3, [r7, #0]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <xTaskIncrementTick+0x4a>
 8007a74:	4b41      	ldr	r3, [pc, #260]	; (8007b7c <xTaskIncrementTick+0x154>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	4b41      	ldr	r3, [pc, #260]	; (8007b80 <xTaskIncrementTick+0x158>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a3f      	ldr	r2, [pc, #252]	; (8007b7c <xTaskIncrementTick+0x154>)
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	4a3f      	ldr	r2, [pc, #252]	; (8007b80 <xTaskIncrementTick+0x158>)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4b3e      	ldr	r3, [pc, #248]	; (8007b84 <xTaskIncrementTick+0x15c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	4a3d      	ldr	r2, [pc, #244]	; (8007b84 <xTaskIncrementTick+0x15c>)
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	f000 fae9 	bl	8008068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a96:	4b3c      	ldr	r3, [pc, #240]	; (8007b88 <xTaskIncrementTick+0x160>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d349      	bcc.n	8007b34 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aa0:	4b36      	ldr	r3, [pc, #216]	; (8007b7c <xTaskIncrementTick+0x154>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aaa:	4b37      	ldr	r3, [pc, #220]	; (8007b88 <xTaskIncrementTick+0x160>)
 8007aac:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab0:	601a      	str	r2, [r3, #0]
					break;
 8007ab2:	e03f      	b.n	8007b34 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab4:	4b31      	ldr	r3, [pc, #196]	; (8007b7c <xTaskIncrementTick+0x154>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d203      	bcs.n	8007ad4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007acc:	4a2e      	ldr	r2, [pc, #184]	; (8007b88 <xTaskIncrementTick+0x160>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ad2:	e02f      	b.n	8007b34 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fe3d 	bl	8006758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fe34 	bl	8006758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4b25      	ldr	r3, [pc, #148]	; (8007b8c <xTaskIncrementTick+0x164>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d903      	bls.n	8007b04 <xTaskIncrementTick+0xdc>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <xTaskIncrementTick+0x164>)
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <xTaskIncrementTick+0x168>)
 8007b12:	441a      	add	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7fe fdbf 	bl	800669e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <xTaskIncrementTick+0x16c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d3b8      	bcc.n	8007aa0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b32:	e7b5      	b.n	8007aa0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b34:	4b17      	ldr	r3, [pc, #92]	; (8007b94 <xTaskIncrementTick+0x16c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3a:	4915      	ldr	r1, [pc, #84]	; (8007b90 <xTaskIncrementTick+0x168>)
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d907      	bls.n	8007b5c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	e004      	b.n	8007b5c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b52:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <xTaskIncrementTick+0x170>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	4a0f      	ldr	r2, [pc, #60]	; (8007b98 <xTaskIncrementTick+0x170>)
 8007b5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <xTaskIncrementTick+0x174>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007b64:	2301      	movs	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b68:	697b      	ldr	r3, [r7, #20]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	200015c8 	.word	0x200015c8
 8007b78:	200015a4 	.word	0x200015a4
 8007b7c:	20001558 	.word	0x20001558
 8007b80:	2000155c 	.word	0x2000155c
 8007b84:	200015b8 	.word	0x200015b8
 8007b88:	200015c0 	.word	0x200015c0
 8007b8c:	200015a8 	.word	0x200015a8
 8007b90:	200010d0 	.word	0x200010d0
 8007b94:	200010cc 	.word	0x200010cc
 8007b98:	200015b0 	.word	0x200015b0
 8007b9c:	200015b4 	.word	0x200015b4

08007ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ba6:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <vTaskSwitchContext+0xb4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bae:	4b2a      	ldr	r3, [pc, #168]	; (8007c58 <vTaskSwitchContext+0xb8>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bb4:	e048      	b.n	8007c48 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007bb6:	4b28      	ldr	r3, [pc, #160]	; (8007c58 <vTaskSwitchContext+0xb8>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bbc:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <vTaskSwitchContext+0xbc>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e012      	b.n	8007bea <vTaskSwitchContext+0x4a>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10c      	bne.n	8007be4 <vTaskSwitchContext+0x44>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	b672      	cpsid	i
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	b662      	cpsie	i
 8007bde:	607b      	str	r3, [r7, #4]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <vTaskSwitchContext+0x42>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	491d      	ldr	r1, [pc, #116]	; (8007c60 <vTaskSwitchContext+0xc0>)
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0e2      	beq.n	8007bc4 <vTaskSwitchContext+0x24>
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4a15      	ldr	r2, [pc, #84]	; (8007c60 <vTaskSwitchContext+0xc0>)
 8007c0a:	4413      	add	r3, r2
 8007c0c:	60bb      	str	r3, [r7, #8]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	605a      	str	r2, [r3, #4]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d104      	bne.n	8007c2e <vTaskSwitchContext+0x8e>
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4a0b      	ldr	r2, [pc, #44]	; (8007c64 <vTaskSwitchContext+0xc4>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <vTaskSwitchContext+0xbc>)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <vTaskSwitchContext+0xc4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3354      	adds	r3, #84	; 0x54
 8007c44:	4a08      	ldr	r2, [pc, #32]	; (8007c68 <vTaskSwitchContext+0xc8>)
 8007c46:	6013      	str	r3, [r2, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	200015c8 	.word	0x200015c8
 8007c58:	200015b4 	.word	0x200015b4
 8007c5c:	200015a8 	.word	0x200015a8
 8007c60:	200010d0 	.word	0x200010d0
 8007c64:	200010cc 	.word	0x200010cc
 8007c68:	20000074 	.word	0x20000074

08007c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10c      	bne.n	8007c96 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	b672      	cpsid	i
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	b662      	cpsie	i
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c96:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <vTaskPlaceOnEventList+0x48>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe fd21 	bl	80066e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	6838      	ldr	r0, [r7, #0]
 8007ca8:	f000 fa8e 	bl	80081c8 <prvAddCurrentTaskToDelayedList>
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200010cc 	.word	0x200010cc

08007cb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10c      	bne.n	8007ce4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	b672      	cpsid	i
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	b662      	cpsie	i
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <vTaskPlaceOnEventListRestricted+0x58>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3318      	adds	r3, #24
 8007cea:	4619      	mov	r1, r3
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7fe fcd6 	bl	800669e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	68b8      	ldr	r0, [r7, #8]
 8007d02:	f000 fa61 	bl	80081c8 <prvAddCurrentTaskToDelayedList>
	}
 8007d06:	bf00      	nop
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200010cc 	.word	0x200010cc

08007d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10c      	bne.n	8007d44 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	b672      	cpsid	i
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	b662      	cpsie	i
 8007d3e:	60fb      	str	r3, [r7, #12]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	3318      	adds	r3, #24
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe fd05 	bl	8006758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <xTaskRemoveFromEventList+0xb4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d11d      	bne.n	8007d92 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fcfc 	bl	8006758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	4b19      	ldr	r3, [pc, #100]	; (8007dcc <xTaskRemoveFromEventList+0xb8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d903      	bls.n	8007d74 <xTaskRemoveFromEventList+0x60>
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4a16      	ldr	r2, [pc, #88]	; (8007dcc <xTaskRemoveFromEventList+0xb8>)
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4a13      	ldr	r2, [pc, #76]	; (8007dd0 <xTaskRemoveFromEventList+0xbc>)
 8007d82:	441a      	add	r2, r3
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fe fc87 	bl	800669e <vListInsertEnd>
 8007d90:	e005      	b.n	8007d9e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3318      	adds	r3, #24
 8007d96:	4619      	mov	r1, r3
 8007d98:	480e      	ldr	r0, [pc, #56]	; (8007dd4 <xTaskRemoveFromEventList+0xc0>)
 8007d9a:	f7fe fc80 	bl	800669e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da2:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <xTaskRemoveFromEventList+0xc4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d905      	bls.n	8007db8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <xTaskRemoveFromEventList+0xc8>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e001      	b.n	8007dbc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dbc:	697b      	ldr	r3, [r7, #20]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	200015c8 	.word	0x200015c8
 8007dcc:	200015a8 	.word	0x200015a8
 8007dd0:	200010d0 	.word	0x200010d0
 8007dd4:	20001560 	.word	0x20001560
 8007dd8:	200010cc 	.word	0x200010cc
 8007ddc:	200015b4 	.word	0x200015b4

08007de0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <vTaskInternalSetTimeOutState+0x24>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <vTaskInternalSetTimeOutState+0x28>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	605a      	str	r2, [r3, #4]
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	200015b8 	.word	0x200015b8
 8007e08:	200015a4 	.word	0x200015a4

08007e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10c      	bne.n	8007e36 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	b672      	cpsid	i
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	b662      	cpsie	i
 8007e30:	613b      	str	r3, [r7, #16]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10c      	bne.n	8007e56 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	b672      	cpsid	i
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	b662      	cpsie	i
 8007e50:	60fb      	str	r3, [r7, #12]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007e56:	f000 fe71 	bl	8008b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <xTaskCheckForTimeOut+0xc4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d102      	bne.n	8007e7a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	e023      	b.n	8007ec2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b15      	ldr	r3, [pc, #84]	; (8007ed4 <xTaskCheckForTimeOut+0xc8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d007      	beq.n	8007e96 <xTaskCheckForTimeOut+0x8a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d302      	bcc.n	8007e96 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e90:	2301      	movs	r3, #1
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e015      	b.n	8007ec2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d20b      	bcs.n	8007eb8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ff97 	bl	8007de0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61fb      	str	r3, [r7, #28]
 8007eb6:	e004      	b.n	8007ec2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ec2:	f000 fe6f 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 8007ec6:	69fb      	ldr	r3, [r7, #28]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3720      	adds	r7, #32
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	200015a4 	.word	0x200015a4
 8007ed4:	200015b8 	.word	0x200015b8

08007ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007edc:	4b03      	ldr	r3, [pc, #12]	; (8007eec <vTaskMissedYield+0x14>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	200015b4 	.word	0x200015b4

08007ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ef8:	f000 f852 	bl	8007fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <prvIdleTask+0x28>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d9f9      	bls.n	8007ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <prvIdleTask+0x2c>)
 8007f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f14:	e7f0      	b.n	8007ef8 <prvIdleTask+0x8>
 8007f16:	bf00      	nop
 8007f18:	200010d0 	.word	0x200010d0
 8007f1c:	e000ed04 	.word	0xe000ed04

08007f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f26:	2300      	movs	r3, #0
 8007f28:	607b      	str	r3, [r7, #4]
 8007f2a:	e00c      	b.n	8007f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4a12      	ldr	r2, [pc, #72]	; (8007f80 <prvInitialiseTaskLists+0x60>)
 8007f38:	4413      	add	r3, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fb82 	bl	8006644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3301      	adds	r3, #1
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b37      	cmp	r3, #55	; 0x37
 8007f4a:	d9ef      	bls.n	8007f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f4c:	480d      	ldr	r0, [pc, #52]	; (8007f84 <prvInitialiseTaskLists+0x64>)
 8007f4e:	f7fe fb79 	bl	8006644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f52:	480d      	ldr	r0, [pc, #52]	; (8007f88 <prvInitialiseTaskLists+0x68>)
 8007f54:	f7fe fb76 	bl	8006644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f58:	480c      	ldr	r0, [pc, #48]	; (8007f8c <prvInitialiseTaskLists+0x6c>)
 8007f5a:	f7fe fb73 	bl	8006644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f5e:	480c      	ldr	r0, [pc, #48]	; (8007f90 <prvInitialiseTaskLists+0x70>)
 8007f60:	f7fe fb70 	bl	8006644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f64:	480b      	ldr	r0, [pc, #44]	; (8007f94 <prvInitialiseTaskLists+0x74>)
 8007f66:	f7fe fb6d 	bl	8006644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <prvInitialiseTaskLists+0x78>)
 8007f6c:	4a05      	ldr	r2, [pc, #20]	; (8007f84 <prvInitialiseTaskLists+0x64>)
 8007f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <prvInitialiseTaskLists+0x7c>)
 8007f72:	4a05      	ldr	r2, [pc, #20]	; (8007f88 <prvInitialiseTaskLists+0x68>)
 8007f74:	601a      	str	r2, [r3, #0]
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200010d0 	.word	0x200010d0
 8007f84:	20001530 	.word	0x20001530
 8007f88:	20001544 	.word	0x20001544
 8007f8c:	20001560 	.word	0x20001560
 8007f90:	20001574 	.word	0x20001574
 8007f94:	2000158c 	.word	0x2000158c
 8007f98:	20001558 	.word	0x20001558
 8007f9c:	2000155c 	.word	0x2000155c

08007fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa6:	e019      	b.n	8007fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fa8:	f000 fdc8 	bl	8008b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fac:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <prvCheckTasksWaitingTermination+0x50>)
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe fbcd 	bl	8006758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <prvCheckTasksWaitingTermination+0x54>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	4a0b      	ldr	r2, [pc, #44]	; (8007ff4 <prvCheckTasksWaitingTermination+0x54>)
 8007fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fc8:	4b0b      	ldr	r3, [pc, #44]	; (8007ff8 <prvCheckTasksWaitingTermination+0x58>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	4a0a      	ldr	r2, [pc, #40]	; (8007ff8 <prvCheckTasksWaitingTermination+0x58>)
 8007fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fd2:	f000 fde7 	bl	8008ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f810 	bl	8007ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <prvCheckTasksWaitingTermination+0x58>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e1      	bne.n	8007fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20001574 	.word	0x20001574
 8007ff4:	200015a0 	.word	0x200015a0
 8007ff8:	20001588 	.word	0x20001588

08007ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3354      	adds	r3, #84	; 0x54
 8008008:	4618      	mov	r0, r3
 800800a:	f001 fe25 	bl	8009c58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008014:	2b00      	cmp	r3, #0
 8008016:	d108      	bne.n	800802a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	4618      	mov	r0, r3
 800801e:	f000 ff83 	bl	8008f28 <vPortFree>
				vPortFree( pxTCB );
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 ff80 	bl	8008f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008028:	e01a      	b.n	8008060 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008030:	2b01      	cmp	r3, #1
 8008032:	d103      	bne.n	800803c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 ff77 	bl	8008f28 <vPortFree>
	}
 800803a:	e011      	b.n	8008060 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008042:	2b02      	cmp	r3, #2
 8008044:	d00c      	beq.n	8008060 <prvDeleteTCB+0x64>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	b672      	cpsid	i
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	b662      	cpsie	i
 800805a:	60fb      	str	r3, [r7, #12]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <prvDeleteTCB+0x62>
	}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <prvResetNextTaskUnblockTime+0x38>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <prvResetNextTaskUnblockTime+0x3c>)
 800807a:	f04f 32ff 	mov.w	r2, #4294967295
 800807e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008080:	e008      	b.n	8008094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <prvResetNextTaskUnblockTime+0x38>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	4a04      	ldr	r2, [pc, #16]	; (80080a4 <prvResetNextTaskUnblockTime+0x3c>)
 8008092:	6013      	str	r3, [r2, #0]
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20001558 	.word	0x20001558
 80080a4:	200015c0 	.word	0x200015c0

080080a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ae:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <xTaskGetSchedulerState+0x34>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080b6:	2301      	movs	r3, #1
 80080b8:	607b      	str	r3, [r7, #4]
 80080ba:	e008      	b.n	80080ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080bc:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <xTaskGetSchedulerState+0x38>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080c4:	2302      	movs	r3, #2
 80080c6:	607b      	str	r3, [r7, #4]
 80080c8:	e001      	b.n	80080ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ca:	2300      	movs	r3, #0
 80080cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080ce:	687b      	ldr	r3, [r7, #4]
	}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	200015ac 	.word	0x200015ac
 80080e0:	200015c8 	.word	0x200015c8

080080e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d05a      	beq.n	80081b0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080fa:	4b30      	ldr	r3, [pc, #192]	; (80081bc <xTaskPriorityDisinherit+0xd8>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	429a      	cmp	r2, r3
 8008102:	d00c      	beq.n	800811e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	b672      	cpsid	i
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	b662      	cpsie	i
 8008118:	60fb      	str	r3, [r7, #12]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10c      	bne.n	8008140 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	b672      	cpsid	i
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	b662      	cpsie	i
 800813a:	60bb      	str	r3, [r7, #8]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008144:	1e5a      	subs	r2, r3, #1
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008152:	429a      	cmp	r2, r3
 8008154:	d02c      	beq.n	80081b0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815a:	2b00      	cmp	r3, #0
 800815c:	d128      	bne.n	80081b0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe faf8 	bl	8006758 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <xTaskPriorityDisinherit+0xdc>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d903      	bls.n	8008190 <xTaskPriorityDisinherit+0xac>
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	4a0c      	ldr	r2, [pc, #48]	; (80081c0 <xTaskPriorityDisinherit+0xdc>)
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4a09      	ldr	r2, [pc, #36]	; (80081c4 <xTaskPriorityDisinherit+0xe0>)
 800819e:	441a      	add	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fe fa79 	bl	800669e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081b0:	697b      	ldr	r3, [r7, #20]
	}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200010cc 	.word	0x200010cc
 80081c0:	200015a8 	.word	0x200015a8
 80081c4:	200010d0 	.word	0x200010d0

080081c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081d2:	4b21      	ldr	r3, [pc, #132]	; (8008258 <prvAddCurrentTaskToDelayedList+0x90>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081d8:	4b20      	ldr	r3, [pc, #128]	; (800825c <prvAddCurrentTaskToDelayedList+0x94>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3304      	adds	r3, #4
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe faba 	bl	8006758 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d10a      	bne.n	8008202 <prvAddCurrentTaskToDelayedList+0x3a>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <prvAddCurrentTaskToDelayedList+0x94>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4819      	ldr	r0, [pc, #100]	; (8008260 <prvAddCurrentTaskToDelayedList+0x98>)
 80081fc:	f7fe fa4f 	bl	800669e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008200:	e026      	b.n	8008250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4413      	add	r3, r2
 8008208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800820a:	4b14      	ldr	r3, [pc, #80]	; (800825c <prvAddCurrentTaskToDelayedList+0x94>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	429a      	cmp	r2, r3
 8008218:	d209      	bcs.n	800822e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821a:	4b12      	ldr	r3, [pc, #72]	; (8008264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <prvAddCurrentTaskToDelayedList+0x94>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7fe fa5d 	bl	80066e6 <vListInsert>
}
 800822c:	e010      	b.n	8008250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800822e:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b0a      	ldr	r3, [pc, #40]	; (800825c <prvAddCurrentTaskToDelayedList+0x94>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fe fa53 	bl	80066e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	429a      	cmp	r2, r3
 8008248:	d202      	bcs.n	8008250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800824a:	4a08      	ldr	r2, [pc, #32]	; (800826c <prvAddCurrentTaskToDelayedList+0xa4>)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6013      	str	r3, [r2, #0]
}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	200015a4 	.word	0x200015a4
 800825c:	200010cc 	.word	0x200010cc
 8008260:	2000158c 	.word	0x2000158c
 8008264:	2000155c 	.word	0x2000155c
 8008268:	20001558 	.word	0x20001558
 800826c:	200015c0 	.word	0x200015c0

08008270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08a      	sub	sp, #40	; 0x28
 8008274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800827a:	f000 fb15 	bl	80088a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800827e:	4b1d      	ldr	r3, [pc, #116]	; (80082f4 <xTimerCreateTimerTask+0x84>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d021      	beq.n	80082ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800828e:	1d3a      	adds	r2, r7, #4
 8008290:	f107 0108 	add.w	r1, r7, #8
 8008294:	f107 030c 	add.w	r3, r7, #12
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe f9b9 	bl	8006610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	9202      	str	r2, [sp, #8]
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	2302      	movs	r3, #2
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	2300      	movs	r3, #0
 80082ae:	460a      	mov	r2, r1
 80082b0:	4911      	ldr	r1, [pc, #68]	; (80082f8 <xTimerCreateTimerTask+0x88>)
 80082b2:	4812      	ldr	r0, [pc, #72]	; (80082fc <xTimerCreateTimerTask+0x8c>)
 80082b4:	f7fe ff84 	bl	80071c0 <xTaskCreateStatic>
 80082b8:	4603      	mov	r3, r0
 80082ba:	4a11      	ldr	r2, [pc, #68]	; (8008300 <xTimerCreateTimerTask+0x90>)
 80082bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <xTimerCreateTimerTask+0x90>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082c6:	2301      	movs	r3, #1
 80082c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10c      	bne.n	80082ea <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	b672      	cpsid	i
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	b662      	cpsie	i
 80082e4:	613b      	str	r3, [r7, #16]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80082ea:	697b      	ldr	r3, [r7, #20]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200015fc 	.word	0x200015fc
 80082f8:	0800c4dc 	.word	0x0800c4dc
 80082fc:	08008441 	.word	0x08008441
 8008300:	20001600 	.word	0x20001600

08008304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10c      	bne.n	8008336 <xTimerGenericCommand+0x32>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	b672      	cpsid	i
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	b662      	cpsie	i
 8008330:	623b      	str	r3, [r7, #32]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008336:	4b1a      	ldr	r3, [pc, #104]	; (80083a0 <xTimerGenericCommand+0x9c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d02a      	beq.n	8008394 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b05      	cmp	r3, #5
 800834e:	dc18      	bgt.n	8008382 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008350:	f7ff feaa 	bl	80080a8 <xTaskGetSchedulerState>
 8008354:	4603      	mov	r3, r0
 8008356:	2b02      	cmp	r3, #2
 8008358:	d109      	bne.n	800836e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800835a:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <xTimerGenericCommand+0x9c>)
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	f107 0110 	add.w	r1, r7, #16
 8008362:	2300      	movs	r3, #0
 8008364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008366:	f7fe fb31 	bl	80069cc <xQueueGenericSend>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24
 800836c:	e012      	b.n	8008394 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800836e:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <xTimerGenericCommand+0x9c>)
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f107 0110 	add.w	r1, r7, #16
 8008376:	2300      	movs	r3, #0
 8008378:	2200      	movs	r2, #0
 800837a:	f7fe fb27 	bl	80069cc <xQueueGenericSend>
 800837e:	6278      	str	r0, [r7, #36]	; 0x24
 8008380:	e008      	b.n	8008394 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <xTimerGenericCommand+0x9c>)
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f107 0110 	add.w	r1, r7, #16
 800838a:	2300      	movs	r3, #0
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	f7fe fc23 	bl	8006bd8 <xQueueGenericSendFromISR>
 8008392:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008396:	4618      	mov	r0, r3
 8008398:	3728      	adds	r7, #40	; 0x28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	200015fc 	.word	0x200015fc

080083a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ae:	4b23      	ldr	r3, [pc, #140]	; (800843c <prvProcessExpiredTimer+0x98>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe f9cb 	bl	8006758 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d024      	beq.n	800841a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	699a      	ldr	r2, [r3, #24]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	18d1      	adds	r1, r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	6978      	ldr	r0, [r7, #20]
 80083de:	f000 f8d3 	bl	8008588 <prvInsertTimerInActiveList>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d021      	beq.n	800842c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083e8:	2300      	movs	r3, #0
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	2100      	movs	r1, #0
 80083f2:	6978      	ldr	r0, [r7, #20]
 80083f4:	f7ff ff86 	bl	8008304 <xTimerGenericCommand>
 80083f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d115      	bne.n	800842c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	b672      	cpsid	i
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	b662      	cpsie	i
 8008414:	60fb      	str	r3, [r7, #12]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008420:	f023 0301 	bic.w	r3, r3, #1
 8008424:	b2da      	uxtb	r2, r3
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	6978      	ldr	r0, [r7, #20]
 8008432:	4798      	blx	r3
}
 8008434:	bf00      	nop
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	200015f4 	.word	0x200015f4

08008440 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008448:	f107 0308 	add.w	r3, r7, #8
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f857 	bl	8008500 <prvGetNextExpireTime>
 8008452:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4619      	mov	r1, r3
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 f803 	bl	8008464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800845e:	f000 f8d5 	bl	800860c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008462:	e7f1      	b.n	8008448 <prvTimerTask+0x8>

08008464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800846e:	f7ff fa1d 	bl	80078ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008472:	f107 0308 	add.w	r3, r7, #8
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f866 	bl	8008548 <prvSampleTimeNow>
 800847c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d130      	bne.n	80084e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <prvProcessTimerOrBlockTask+0x3c>
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	429a      	cmp	r2, r3
 8008490:	d806      	bhi.n	80084a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008492:	f7ff fa19 	bl	80078c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008496:	68f9      	ldr	r1, [r7, #12]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff83 	bl	80083a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800849e:	e024      	b.n	80084ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084a6:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <prvProcessTimerOrBlockTask+0x90>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <prvProcessTimerOrBlockTask+0x50>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e000      	b.n	80084b6 <prvProcessTimerOrBlockTask+0x52>
 80084b4:	2300      	movs	r3, #0
 80084b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084b8:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <prvProcessTimerOrBlockTask+0x94>)
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7fe fe47 	bl	8007158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084ca:	f7ff f9fd 	bl	80078c8 <xTaskResumeAll>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084d4:	4b09      	ldr	r3, [pc, #36]	; (80084fc <prvProcessTimerOrBlockTask+0x98>)
 80084d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	f3bf 8f6f 	isb	sy
}
 80084e4:	e001      	b.n	80084ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084e6:	f7ff f9ef 	bl	80078c8 <xTaskResumeAll>
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200015f8 	.word	0x200015f8
 80084f8:	200015fc 	.word	0x200015fc
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008508:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <prvGetNextExpireTime+0x44>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <prvGetNextExpireTime+0x16>
 8008512:	2201      	movs	r2, #1
 8008514:	e000      	b.n	8008518 <prvGetNextExpireTime+0x18>
 8008516:	2200      	movs	r2, #0
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d105      	bne.n	8008530 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008524:	4b07      	ldr	r3, [pc, #28]	; (8008544 <prvGetNextExpireTime+0x44>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	e001      	b.n	8008534 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008534:	68fb      	ldr	r3, [r7, #12]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	200015f4 	.word	0x200015f4

08008548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008550:	f7ff fa5a 	bl	8007a08 <xTaskGetTickCount>
 8008554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <prvSampleTimeNow+0x3c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	429a      	cmp	r2, r3
 800855e:	d205      	bcs.n	800856c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008560:	f000 f93c 	bl	80087dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e002      	b.n	8008572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008572:	4a04      	ldr	r2, [pc, #16]	; (8008584 <prvSampleTimeNow+0x3c>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008578:	68fb      	ldr	r3, [r7, #12]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20001604 	.word	0x20001604

08008588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d812      	bhi.n	80085d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	1ad2      	subs	r2, r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d302      	bcc.n	80085c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e01b      	b.n	80085fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085c2:	4b10      	ldr	r3, [pc, #64]	; (8008604 <prvInsertTimerInActiveList+0x7c>)
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f7fe f88a 	bl	80066e6 <vListInsert>
 80085d2:	e012      	b.n	80085fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d206      	bcs.n	80085ea <prvInsertTimerInActiveList+0x62>
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d302      	bcc.n	80085ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e007      	b.n	80085fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <prvInsertTimerInActiveList+0x80>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4619      	mov	r1, r3
 80085f4:	4610      	mov	r0, r2
 80085f6:	f7fe f876 	bl	80066e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085fa:	697b      	ldr	r3, [r7, #20]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200015f8 	.word	0x200015f8
 8008608:	200015f4 	.word	0x200015f4

0800860c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	; 0x38
 8008610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008612:	e0d0      	b.n	80087b6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	da1a      	bge.n	8008650 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800861a:	1d3b      	adds	r3, r7, #4
 800861c:	3304      	adds	r3, #4
 800861e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10c      	bne.n	8008640 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	b672      	cpsid	i
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	b662      	cpsie	i
 800863a:	61fb      	str	r3, [r7, #28]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008646:	6850      	ldr	r0, [r2, #4]
 8008648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800864a:	6892      	ldr	r2, [r2, #8]
 800864c:	4611      	mov	r1, r2
 800864e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f2c0 80af 	blt.w	80087b6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	3304      	adds	r3, #4
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe f875 	bl	8006758 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800866e:	463b      	mov	r3, r7
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff ff69 	bl	8008548 <prvSampleTimeNow>
 8008676:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b09      	cmp	r3, #9
 800867c:	f200 809a 	bhi.w	80087b4 <prvProcessReceivedCommands+0x1a8>
 8008680:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <prvProcessReceivedCommands+0x7c>)
 8008682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008686:	bf00      	nop
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b1 	.word	0x080086b1
 8008694:	08008729 	.word	0x08008729
 8008698:	0800873d 	.word	0x0800873d
 800869c:	0800878b 	.word	0x0800878b
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b1 	.word	0x080086b1
 80086a8:	08008729 	.word	0x08008729
 80086ac:	0800873d 	.word	0x0800873d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	18d1      	adds	r1, r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d0:	f7ff ff5a 	bl	8008588 <prvInsertTimerInActiveList>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d06d      	beq.n	80087b6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d062      	beq.n	80087b6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	441a      	add	r2, r3
 80086f8:	2300      	movs	r3, #0
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008702:	f7ff fdff 	bl	8008304 <xTimerGenericCommand>
 8008706:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d153      	bne.n	80087b6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	b672      	cpsid	i
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	b662      	cpsie	i
 8008722:	61bb      	str	r3, [r7, #24]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800872e:	f023 0301 	bic.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800873a:	e03c      	b.n	80087b6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008742:	f043 0301 	orr.w	r3, r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10c      	bne.n	8008776 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	b672      	cpsid	i
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	b662      	cpsie	i
 8008770:	617b      	str	r3, [r7, #20]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	18d1      	adds	r1, r2, r3
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008784:	f7ff ff00 	bl	8008588 <prvInsertTimerInActiveList>
					break;
 8008788:	e015      	b.n	80087b6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800879a:	f000 fbc5 	bl	8008f28 <vPortFree>
 800879e:	e00a      	b.n	80087b6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a6:	f023 0301 	bic.w	r3, r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087b2:	e000      	b.n	80087b6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80087b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087b6:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <prvProcessReceivedCommands+0x1cc>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	1d39      	adds	r1, r7, #4
 80087bc:	2200      	movs	r2, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe faaa 	bl	8006d18 <xQueueReceive>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f47f af24 	bne.w	8008614 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	3730      	adds	r7, #48	; 0x30
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200015fc 	.word	0x200015fc

080087dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087e2:	e04a      	b.n	800887a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087e4:	4b2e      	ldr	r3, [pc, #184]	; (80088a0 <prvSwitchTimerLists+0xc4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ee:	4b2c      	ldr	r3, [pc, #176]	; (80088a0 <prvSwitchTimerLists+0xc4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fd ffab 	bl	8006758 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	d030      	beq.n	800887a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	429a      	cmp	r2, r3
 8008828:	d90e      	bls.n	8008848 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008836:	4b1a      	ldr	r3, [pc, #104]	; (80088a0 <prvSwitchTimerLists+0xc4>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3304      	adds	r3, #4
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7fd ff50 	bl	80066e6 <vListInsert>
 8008846:	e018      	b.n	800887a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008848:	2300      	movs	r3, #0
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	2300      	movs	r3, #0
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	2100      	movs	r1, #0
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fd56 	bl	8008304 <xTimerGenericCommand>
 8008858:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10c      	bne.n	800887a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	b672      	cpsid	i
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	b662      	cpsie	i
 8008874:	603b      	str	r3, [r7, #0]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800887a:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <prvSwitchTimerLists+0xc4>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1af      	bne.n	80087e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008884:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <prvSwitchTimerLists+0xc4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <prvSwitchTimerLists+0xc8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a04      	ldr	r2, [pc, #16]	; (80088a0 <prvSwitchTimerLists+0xc4>)
 8008890:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008892:	4a04      	ldr	r2, [pc, #16]	; (80088a4 <prvSwitchTimerLists+0xc8>)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6013      	str	r3, [r2, #0]
}
 8008898:	bf00      	nop
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	200015f4 	.word	0x200015f4
 80088a4:	200015f8 	.word	0x200015f8

080088a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ae:	f000 f945 	bl	8008b3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d120      	bne.n	80088fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ba:	4814      	ldr	r0, [pc, #80]	; (800890c <prvCheckForValidListAndQueue+0x64>)
 80088bc:	f7fd fec2 	bl	8006644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088c0:	4813      	ldr	r0, [pc, #76]	; (8008910 <prvCheckForValidListAndQueue+0x68>)
 80088c2:	f7fd febf 	bl	8006644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088c6:	4b13      	ldr	r3, [pc, #76]	; (8008914 <prvCheckForValidListAndQueue+0x6c>)
 80088c8:	4a10      	ldr	r2, [pc, #64]	; (800890c <prvCheckForValidListAndQueue+0x64>)
 80088ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088cc:	4b12      	ldr	r3, [pc, #72]	; (8008918 <prvCheckForValidListAndQueue+0x70>)
 80088ce:	4a10      	ldr	r2, [pc, #64]	; (8008910 <prvCheckForValidListAndQueue+0x68>)
 80088d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088d2:	2300      	movs	r3, #0
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	4b11      	ldr	r3, [pc, #68]	; (800891c <prvCheckForValidListAndQueue+0x74>)
 80088d8:	4a11      	ldr	r2, [pc, #68]	; (8008920 <prvCheckForValidListAndQueue+0x78>)
 80088da:	2110      	movs	r1, #16
 80088dc:	200a      	movs	r0, #10
 80088de:	f7fd ffcf 	bl	8006880 <xQueueGenericCreateStatic>
 80088e2:	4603      	mov	r3, r0
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	490b      	ldr	r1, [pc, #44]	; (8008924 <prvCheckForValidListAndQueue+0x7c>)
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fc04 	bl	8007104 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088fc:	f000 f952 	bl	8008ba4 <vPortExitCritical>
}
 8008900:	bf00      	nop
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	200015fc 	.word	0x200015fc
 800890c:	200015cc 	.word	0x200015cc
 8008910:	200015e0 	.word	0x200015e0
 8008914:	200015f4 	.word	0x200015f4
 8008918:	200015f8 	.word	0x200015f8
 800891c:	200016a8 	.word	0x200016a8
 8008920:	20001608 	.word	0x20001608
 8008924:	0800c4e4 	.word	0x0800c4e4

08008928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3b04      	subs	r3, #4
 8008938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b04      	subs	r3, #4
 8008946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b04      	subs	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008958:	4a0c      	ldr	r2, [pc, #48]	; (800898c <pxPortInitialiseStack+0x64>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b14      	subs	r3, #20
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b04      	subs	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f06f 0202 	mvn.w	r2, #2
 8008976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b20      	subs	r3, #32
 800897c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	08008991 	.word	0x08008991

08008990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800899a:	4b14      	ldr	r3, [pc, #80]	; (80089ec <prvTaskExitError+0x5c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d00c      	beq.n	80089be <prvTaskExitError+0x2e>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	b672      	cpsid	i
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	b662      	cpsie	i
 80089b8:	60fb      	str	r3, [r7, #12]
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <prvTaskExitError+0x2c>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	b672      	cpsid	i
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	b662      	cpsie	i
 80089d2:	60bb      	str	r3, [r7, #8]
}
 80089d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089d6:	bf00      	nop
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0fc      	beq.n	80089d8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	20000018 	.word	0x20000018

080089f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <pxCurrentTCBConst2>)
 80089f2:	6819      	ldr	r1, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fa:	f380 8809 	msr	PSP, r0
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	4770      	bx	lr
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst2>:
 8008a10:	200010cc 	.word	0x200010cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a18:	4808      	ldr	r0, [pc, #32]	; (8008a3c <prvPortStartFirstTask+0x24>)
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f380 8808 	msr	MSP, r0
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8814 	msr	CONTROL, r0
 8008a2a:	b662      	cpsie	i
 8008a2c:	b661      	cpsie	f
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	df00      	svc	0
 8008a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a3a:	bf00      	nop
 8008a3c:	e000ed08 	.word	0xe000ed08

08008a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a46:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <xPortStartScheduler+0xe4>)
 8008a48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	22ff      	movs	r2, #255	; 0xff
 8008a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	4b2f      	ldr	r3, [pc, #188]	; (8008b28 <xPortStartScheduler+0xe8>)
 8008a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a6e:	4b2f      	ldr	r3, [pc, #188]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a70:	2207      	movs	r2, #7
 8008a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a74:	e009      	b.n	8008a8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a76:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	4a2b      	ldr	r2, [pc, #172]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a92:	2b80      	cmp	r3, #128	; 0x80
 8008a94:	d0ef      	beq.n	8008a76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a96:	4b25      	ldr	r3, [pc, #148]	; (8008b2c <xPortStartScheduler+0xec>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f1c3 0307 	rsb	r3, r3, #7
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d00c      	beq.n	8008abc <xPortStartScheduler+0x7c>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	b672      	cpsid	i
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	b662      	cpsie	i
 8008ab6:	60bb      	str	r3, [r7, #8]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008abc:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <xPortStartScheduler+0xec>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <xPortStartScheduler+0xec>)
 8008ac4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <xPortStartScheduler+0xec>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ace:	4a17      	ldr	r2, [pc, #92]	; (8008b2c <xPortStartScheduler+0xec>)
 8008ad0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ada:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ae4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ae6:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <xPortStartScheduler+0xf0>)
 8008aec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008af0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008af2:	f000 f8dd 	bl	8008cb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008af6:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <xPortStartScheduler+0xf4>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008afc:	f000 f8fc 	bl	8008cf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b00:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <xPortStartScheduler+0xf8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <xPortStartScheduler+0xf8>)
 8008b06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b0c:	f7ff ff84 	bl	8008a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b10:	f7ff f846 	bl	8007ba0 <vTaskSwitchContext>
	prvTaskExitError();
 8008b14:	f7ff ff3c 	bl	8008990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	e000e400 	.word	0xe000e400
 8008b28:	200016f8 	.word	0x200016f8
 8008b2c:	200016fc 	.word	0x200016fc
 8008b30:	e000ed20 	.word	0xe000ed20
 8008b34:	20000018 	.word	0x20000018
 8008b38:	e000ef34 	.word	0xe000ef34

08008b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	b672      	cpsid	i
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	b662      	cpsie	i
 8008b56:	607b      	str	r3, [r7, #4]
}
 8008b58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b5a:	4b10      	ldr	r3, [pc, #64]	; (8008b9c <vPortEnterCritical+0x60>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	4a0e      	ldr	r2, [pc, #56]	; (8008b9c <vPortEnterCritical+0x60>)
 8008b62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b64:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <vPortEnterCritical+0x60>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d111      	bne.n	8008b90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <vPortEnterCritical+0x64>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00c      	beq.n	8008b90 <vPortEnterCritical+0x54>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	b672      	cpsid	i
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	b662      	cpsie	i
 8008b8a:	603b      	str	r3, [r7, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <vPortEnterCritical+0x52>
	}
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	20000018 	.word	0x20000018
 8008ba0:	e000ed04 	.word	0xe000ed04

08008ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008baa:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10c      	bne.n	8008bcc <vPortExitCritical+0x28>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	b672      	cpsid	i
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	b662      	cpsie	i
 8008bc6:	607b      	str	r3, [r7, #4]
}
 8008bc8:	bf00      	nop
 8008bca:	e7fe      	b.n	8008bca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bd6:	4b08      	ldr	r3, [pc, #32]	; (8008bf8 <vPortExitCritical+0x54>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d105      	bne.n	8008bea <vPortExitCritical+0x46>
 8008bde:	2300      	movs	r3, #0
 8008be0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	f383 8811 	msr	BASEPRI, r3
}
 8008be8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	20000018 	.word	0x20000018
 8008bfc:	00000000 	.word	0x00000000

08008c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c00:	f3ef 8009 	mrs	r0, PSP
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4b15      	ldr	r3, [pc, #84]	; (8008c60 <pxCurrentTCBConst>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	f01e 0f10 	tst.w	lr, #16
 8008c10:	bf08      	it	eq
 8008c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	6010      	str	r0, [r2, #0]
 8008c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	f7fe ffb4 	bl	8007ba0 <vTaskSwitchContext>
 8008c38:	f04f 0000 	mov.w	r0, #0
 8008c3c:	f380 8811 	msr	BASEPRI, r0
 8008c40:	bc09      	pop	{r0, r3}
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	6808      	ldr	r0, [r1, #0]
 8008c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	f01e 0f10 	tst.w	lr, #16
 8008c4e:	bf08      	it	eq
 8008c50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c54:	f380 8809 	msr	PSP, r0
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <pxCurrentTCBConst>:
 8008c60:	200010cc 	.word	0x200010cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop

08008c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	b672      	cpsid	i
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	b662      	cpsie	i
 8008c82:	607b      	str	r3, [r7, #4]
}
 8008c84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c86:	f7fe fecf 	bl	8007a28 <xTaskIncrementTick>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <SysTick_Handler+0x44>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	f383 8811 	msr	BASEPRI, r3
}
 8008ca2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	e000ed04 	.word	0xe000ed04

08008cb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <vPortSetupTimerInterrupt+0x34>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <vPortSetupTimerInterrupt+0x38>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <vPortSetupTimerInterrupt+0x3c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a0a      	ldr	r2, [pc, #40]	; (8008cf0 <vPortSetupTimerInterrupt+0x40>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	099b      	lsrs	r3, r3, #6
 8008ccc:	4a09      	ldr	r2, [pc, #36]	; (8008cf4 <vPortSetupTimerInterrupt+0x44>)
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cd2:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <vPortSetupTimerInterrupt+0x34>)
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	601a      	str	r2, [r3, #0]
}
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	e000e010 	.word	0xe000e010
 8008ce8:	e000e018 	.word	0xe000e018
 8008cec:	20000000 	.word	0x20000000
 8008cf0:	10624dd3 	.word	0x10624dd3
 8008cf4:	e000e014 	.word	0xe000e014

08008cf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d08 <vPortEnableVFP+0x10>
 8008cfc:	6801      	ldr	r1, [r0, #0]
 8008cfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d02:	6001      	str	r1, [r0, #0]
 8008d04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d06:	bf00      	nop
 8008d08:	e000ed88 	.word	0xe000ed88

08008d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d12:	f3ef 8305 	mrs	r3, IPSR
 8008d16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	d916      	bls.n	8008d4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d1e:	4a19      	ldr	r2, [pc, #100]	; (8008d84 <vPortValidateInterruptPriority+0x78>)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <vPortValidateInterruptPriority+0x7c>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	7afa      	ldrb	r2, [r7, #11]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d20c      	bcs.n	8008d4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	b672      	cpsid	i
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	b662      	cpsie	i
 8008d46:	607b      	str	r3, [r7, #4]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d4c:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <vPortValidateInterruptPriority+0x80>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <vPortValidateInterruptPriority+0x84>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d90c      	bls.n	8008d76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	b672      	cpsid	i
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	b662      	cpsie	i
 8008d70:	603b      	str	r3, [r7, #0]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <vPortValidateInterruptPriority+0x68>
	}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	e000e3f0 	.word	0xe000e3f0
 8008d88:	200016f8 	.word	0x200016f8
 8008d8c:	e000ed0c 	.word	0xe000ed0c
 8008d90:	200016fc 	.word	0x200016fc

08008d94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	; 0x28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008da0:	f7fe fd84 	bl	80078ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008da4:	4b5b      	ldr	r3, [pc, #364]	; (8008f14 <pvPortMalloc+0x180>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dac:	f000 f91a 	bl	8008fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008db0:	4b59      	ldr	r3, [pc, #356]	; (8008f18 <pvPortMalloc+0x184>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 8092 	bne.w	8008ee2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01f      	beq.n	8008e04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d016      	beq.n	8008e04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f023 0307 	bic.w	r3, r3, #7
 8008ddc:	3308      	adds	r3, #8
 8008dde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00c      	beq.n	8008e04 <pvPortMalloc+0x70>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	b672      	cpsid	i
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	b662      	cpsie	i
 8008dfe:	617b      	str	r3, [r7, #20]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d06b      	beq.n	8008ee2 <pvPortMalloc+0x14e>
 8008e0a:	4b44      	ldr	r3, [pc, #272]	; (8008f1c <pvPortMalloc+0x188>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d866      	bhi.n	8008ee2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e14:	4b42      	ldr	r3, [pc, #264]	; (8008f20 <pvPortMalloc+0x18c>)
 8008e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e18:	4b41      	ldr	r3, [pc, #260]	; (8008f20 <pvPortMalloc+0x18c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e1e:	e004      	b.n	8008e2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d903      	bls.n	8008e3c <pvPortMalloc+0xa8>
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f1      	bne.n	8008e20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e3c:	4b35      	ldr	r3, [pc, #212]	; (8008f14 <pvPortMalloc+0x180>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d04d      	beq.n	8008ee2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	2308      	movs	r3, #8
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d921      	bls.n	8008eac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00c      	beq.n	8008e94 <pvPortMalloc+0x100>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	b672      	cpsid	i
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	b662      	cpsie	i
 8008e8e:	613b      	str	r3, [r7, #16]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ea6:	69b8      	ldr	r0, [r7, #24]
 8008ea8:	f000 f8fe 	bl	80090a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008eac:	4b1b      	ldr	r3, [pc, #108]	; (8008f1c <pvPortMalloc+0x188>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	4a19      	ldr	r2, [pc, #100]	; (8008f1c <pvPortMalloc+0x188>)
 8008eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eba:	4b18      	ldr	r3, [pc, #96]	; (8008f1c <pvPortMalloc+0x188>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4b19      	ldr	r3, [pc, #100]	; (8008f24 <pvPortMalloc+0x190>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d203      	bcs.n	8008ece <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ec6:	4b15      	ldr	r3, [pc, #84]	; (8008f1c <pvPortMalloc+0x188>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a16      	ldr	r2, [pc, #88]	; (8008f24 <pvPortMalloc+0x190>)
 8008ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <pvPortMalloc+0x184>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ee2:	f7fe fcf1 	bl	80078c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00c      	beq.n	8008f0a <pvPortMalloc+0x176>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	b672      	cpsid	i
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	b662      	cpsie	i
 8008f04:	60fb      	str	r3, [r7, #12]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <pvPortMalloc+0x174>
	return pvReturn;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3728      	adds	r7, #40	; 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20005308 	.word	0x20005308
 8008f18:	20005314 	.word	0x20005314
 8008f1c:	2000530c 	.word	0x2000530c
 8008f20:	20005300 	.word	0x20005300
 8008f24:	20005310 	.word	0x20005310

08008f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d04c      	beq.n	8008fd4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f3a:	2308      	movs	r3, #8
 8008f3c:	425b      	negs	r3, r3
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4413      	add	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b23      	ldr	r3, [pc, #140]	; (8008fdc <vPortFree+0xb4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4013      	ands	r3, r2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10c      	bne.n	8008f70 <vPortFree+0x48>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	60fb      	str	r3, [r7, #12]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00c      	beq.n	8008f92 <vPortFree+0x6a>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	b672      	cpsid	i
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	b662      	cpsie	i
 8008f8c:	60bb      	str	r3, [r7, #8]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	4b11      	ldr	r3, [pc, #68]	; (8008fdc <vPortFree+0xb4>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d019      	beq.n	8008fd4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d115      	bne.n	8008fd4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <vPortFree+0xb4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fb8:	f7fe fc78 	bl	80078ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <vPortFree+0xb8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	4a06      	ldr	r2, [pc, #24]	; (8008fe0 <vPortFree+0xb8>)
 8008fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fca:	6938      	ldr	r0, [r7, #16]
 8008fcc:	f000 f86c 	bl	80090a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fd0:	f7fe fc7a 	bl	80078c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20005314 	.word	0x20005314
 8008fe0:	2000530c 	.word	0x2000530c

08008fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ff0:	4b27      	ldr	r3, [pc, #156]	; (8009090 <prvHeapInit+0xac>)
 8008ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3307      	adds	r3, #7
 8009002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0307 	bic.w	r3, r3, #7
 800900a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	4a1f      	ldr	r2, [pc, #124]	; (8009090 <prvHeapInit+0xac>)
 8009014:	4413      	add	r3, r2
 8009016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800901c:	4a1d      	ldr	r2, [pc, #116]	; (8009094 <prvHeapInit+0xb0>)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009022:	4b1c      	ldr	r3, [pc, #112]	; (8009094 <prvHeapInit+0xb0>)
 8009024:	2200      	movs	r2, #0
 8009026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4413      	add	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009030:	2208      	movs	r2, #8
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0307 	bic.w	r3, r3, #7
 800903e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4a15      	ldr	r2, [pc, #84]	; (8009098 <prvHeapInit+0xb4>)
 8009044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009046:	4b14      	ldr	r3, [pc, #80]	; (8009098 <prvHeapInit+0xb4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2200      	movs	r2, #0
 800904c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800904e:	4b12      	ldr	r3, [pc, #72]	; (8009098 <prvHeapInit+0xb4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009064:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <prvHeapInit+0xb4>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	4a0a      	ldr	r2, [pc, #40]	; (800909c <prvHeapInit+0xb8>)
 8009072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <prvHeapInit+0xbc>)
 800907a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <prvHeapInit+0xc0>)
 800907e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009082:	601a      	str	r2, [r3, #0]
}
 8009084:	bf00      	nop
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20001700 	.word	0x20001700
 8009094:	20005300 	.word	0x20005300
 8009098:	20005308 	.word	0x20005308
 800909c:	20005310 	.word	0x20005310
 80090a0:	2000530c 	.word	0x2000530c
 80090a4:	20005314 	.word	0x20005314

080090a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090b0:	4b28      	ldr	r3, [pc, #160]	; (8009154 <prvInsertBlockIntoFreeList+0xac>)
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	e002      	b.n	80090bc <prvInsertBlockIntoFreeList+0x14>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d8f7      	bhi.n	80090b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	4413      	add	r3, r2
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d108      	bne.n	80090ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	441a      	add	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	441a      	add	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d118      	bne.n	8009130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b15      	ldr	r3, [pc, #84]	; (8009158 <prvInsertBlockIntoFreeList+0xb0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d00d      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	441a      	add	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	e008      	b.n	8009138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009126:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <prvInsertBlockIntoFreeList+0xb0>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e003      	b.n	8009138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d002      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009146:	bf00      	nop
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20005300 	.word	0x20005300
 8009158:	20005308 	.word	0x20005308

0800915c <__cvt>:
 800915c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800915e:	ed2d 8b02 	vpush	{d8}
 8009162:	eeb0 8b40 	vmov.f64	d8, d0
 8009166:	b085      	sub	sp, #20
 8009168:	4617      	mov	r7, r2
 800916a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800916c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800916e:	ee18 2a90 	vmov	r2, s17
 8009172:	f025 0520 	bic.w	r5, r5, #32
 8009176:	2a00      	cmp	r2, #0
 8009178:	bfb6      	itet	lt
 800917a:	222d      	movlt	r2, #45	; 0x2d
 800917c:	2200      	movge	r2, #0
 800917e:	eeb1 8b40 	vneglt.f64	d8, d0
 8009182:	2d46      	cmp	r5, #70	; 0x46
 8009184:	460c      	mov	r4, r1
 8009186:	701a      	strb	r2, [r3, #0]
 8009188:	d004      	beq.n	8009194 <__cvt+0x38>
 800918a:	2d45      	cmp	r5, #69	; 0x45
 800918c:	d100      	bne.n	8009190 <__cvt+0x34>
 800918e:	3401      	adds	r4, #1
 8009190:	2102      	movs	r1, #2
 8009192:	e000      	b.n	8009196 <__cvt+0x3a>
 8009194:	2103      	movs	r1, #3
 8009196:	ab03      	add	r3, sp, #12
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	ab02      	add	r3, sp, #8
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	4622      	mov	r2, r4
 80091a0:	4633      	mov	r3, r6
 80091a2:	eeb0 0b48 	vmov.f64	d0, d8
 80091a6:	f000 fea7 	bl	8009ef8 <_dtoa_r>
 80091aa:	2d47      	cmp	r5, #71	; 0x47
 80091ac:	d101      	bne.n	80091b2 <__cvt+0x56>
 80091ae:	07fb      	lsls	r3, r7, #31
 80091b0:	d51a      	bpl.n	80091e8 <__cvt+0x8c>
 80091b2:	2d46      	cmp	r5, #70	; 0x46
 80091b4:	eb00 0204 	add.w	r2, r0, r4
 80091b8:	d10c      	bne.n	80091d4 <__cvt+0x78>
 80091ba:	7803      	ldrb	r3, [r0, #0]
 80091bc:	2b30      	cmp	r3, #48	; 0x30
 80091be:	d107      	bne.n	80091d0 <__cvt+0x74>
 80091c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80091c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c8:	bf1c      	itt	ne
 80091ca:	f1c4 0401 	rsbne	r4, r4, #1
 80091ce:	6034      	strne	r4, [r6, #0]
 80091d0:	6833      	ldr	r3, [r6, #0]
 80091d2:	441a      	add	r2, r3
 80091d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80091d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091dc:	bf08      	it	eq
 80091de:	9203      	streq	r2, [sp, #12]
 80091e0:	2130      	movs	r1, #48	; 0x30
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d307      	bcc.n	80091f8 <__cvt+0x9c>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ec:	1a1b      	subs	r3, r3, r0
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	b005      	add	sp, #20
 80091f2:	ecbd 8b02 	vpop	{d8}
 80091f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f8:	1c5c      	adds	r4, r3, #1
 80091fa:	9403      	str	r4, [sp, #12]
 80091fc:	7019      	strb	r1, [r3, #0]
 80091fe:	e7f0      	b.n	80091e2 <__cvt+0x86>

08009200 <__exponent>:
 8009200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009202:	4603      	mov	r3, r0
 8009204:	2900      	cmp	r1, #0
 8009206:	bfb8      	it	lt
 8009208:	4249      	neglt	r1, r1
 800920a:	f803 2b02 	strb.w	r2, [r3], #2
 800920e:	bfb4      	ite	lt
 8009210:	222d      	movlt	r2, #45	; 0x2d
 8009212:	222b      	movge	r2, #43	; 0x2b
 8009214:	2909      	cmp	r1, #9
 8009216:	7042      	strb	r2, [r0, #1]
 8009218:	dd2a      	ble.n	8009270 <__exponent+0x70>
 800921a:	f10d 0207 	add.w	r2, sp, #7
 800921e:	4617      	mov	r7, r2
 8009220:	260a      	movs	r6, #10
 8009222:	4694      	mov	ip, r2
 8009224:	fb91 f5f6 	sdiv	r5, r1, r6
 8009228:	fb06 1415 	mls	r4, r6, r5, r1
 800922c:	3430      	adds	r4, #48	; 0x30
 800922e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009232:	460c      	mov	r4, r1
 8009234:	2c63      	cmp	r4, #99	; 0x63
 8009236:	f102 32ff 	add.w	r2, r2, #4294967295
 800923a:	4629      	mov	r1, r5
 800923c:	dcf1      	bgt.n	8009222 <__exponent+0x22>
 800923e:	3130      	adds	r1, #48	; 0x30
 8009240:	f1ac 0402 	sub.w	r4, ip, #2
 8009244:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009248:	1c41      	adds	r1, r0, #1
 800924a:	4622      	mov	r2, r4
 800924c:	42ba      	cmp	r2, r7
 800924e:	d30a      	bcc.n	8009266 <__exponent+0x66>
 8009250:	f10d 0209 	add.w	r2, sp, #9
 8009254:	eba2 020c 	sub.w	r2, r2, ip
 8009258:	42bc      	cmp	r4, r7
 800925a:	bf88      	it	hi
 800925c:	2200      	movhi	r2, #0
 800925e:	4413      	add	r3, r2
 8009260:	1a18      	subs	r0, r3, r0
 8009262:	b003      	add	sp, #12
 8009264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009266:	f812 5b01 	ldrb.w	r5, [r2], #1
 800926a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800926e:	e7ed      	b.n	800924c <__exponent+0x4c>
 8009270:	2330      	movs	r3, #48	; 0x30
 8009272:	3130      	adds	r1, #48	; 0x30
 8009274:	7083      	strb	r3, [r0, #2]
 8009276:	70c1      	strb	r1, [r0, #3]
 8009278:	1d03      	adds	r3, r0, #4
 800927a:	e7f1      	b.n	8009260 <__exponent+0x60>
 800927c:	0000      	movs	r0, r0
	...

08009280 <_printf_float>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	b08b      	sub	sp, #44	; 0x2c
 8009286:	460c      	mov	r4, r1
 8009288:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800928c:	4616      	mov	r6, r2
 800928e:	461f      	mov	r7, r3
 8009290:	4605      	mov	r5, r0
 8009292:	f000 fccd 	bl	8009c30 <_localeconv_r>
 8009296:	f8d0 b000 	ldr.w	fp, [r0]
 800929a:	4658      	mov	r0, fp
 800929c:	f7f7 f820 	bl	80002e0 <strlen>
 80092a0:	2300      	movs	r3, #0
 80092a2:	9308      	str	r3, [sp, #32]
 80092a4:	f8d8 3000 	ldr.w	r3, [r8]
 80092a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	3307      	adds	r3, #7
 80092b0:	f023 0307 	bic.w	r3, r3, #7
 80092b4:	f103 0108 	add.w	r1, r3, #8
 80092b8:	f8c8 1000 	str.w	r1, [r8]
 80092bc:	ed93 0b00 	vldr	d0, [r3]
 80092c0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009520 <_printf_float+0x2a0>
 80092c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80092c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80092cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80092d4:	4682      	mov	sl, r0
 80092d6:	dd24      	ble.n	8009322 <_printf_float+0xa2>
 80092d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80092dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e0:	d502      	bpl.n	80092e8 <_printf_float+0x68>
 80092e2:	232d      	movs	r3, #45	; 0x2d
 80092e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e8:	498f      	ldr	r1, [pc, #572]	; (8009528 <_printf_float+0x2a8>)
 80092ea:	4b90      	ldr	r3, [pc, #576]	; (800952c <_printf_float+0x2ac>)
 80092ec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092f0:	bf94      	ite	ls
 80092f2:	4688      	movls	r8, r1
 80092f4:	4698      	movhi	r8, r3
 80092f6:	2303      	movs	r3, #3
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	f022 0204 	bic.w	r2, r2, #4
 80092fe:	2300      	movs	r3, #0
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	9700      	str	r7, [sp, #0]
 8009306:	4633      	mov	r3, r6
 8009308:	aa09      	add	r2, sp, #36	; 0x24
 800930a:	4621      	mov	r1, r4
 800930c:	4628      	mov	r0, r5
 800930e:	f000 f9d1 	bl	80096b4 <_printf_common>
 8009312:	3001      	adds	r0, #1
 8009314:	f040 808a 	bne.w	800942c <_printf_float+0x1ac>
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	b00b      	add	sp, #44	; 0x2c
 800931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009322:	eeb4 0b40 	vcmp.f64	d0, d0
 8009326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932a:	d709      	bvc.n	8009340 <_printf_float+0xc0>
 800932c:	ee10 3a90 	vmov	r3, s1
 8009330:	2b00      	cmp	r3, #0
 8009332:	bfbc      	itt	lt
 8009334:	232d      	movlt	r3, #45	; 0x2d
 8009336:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800933a:	497d      	ldr	r1, [pc, #500]	; (8009530 <_printf_float+0x2b0>)
 800933c:	4b7d      	ldr	r3, [pc, #500]	; (8009534 <_printf_float+0x2b4>)
 800933e:	e7d5      	b.n	80092ec <_printf_float+0x6c>
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009346:	9104      	str	r1, [sp, #16]
 8009348:	1c59      	adds	r1, r3, #1
 800934a:	d13c      	bne.n	80093c6 <_printf_float+0x146>
 800934c:	2306      	movs	r3, #6
 800934e:	6063      	str	r3, [r4, #4]
 8009350:	2300      	movs	r3, #0
 8009352:	9303      	str	r3, [sp, #12]
 8009354:	ab08      	add	r3, sp, #32
 8009356:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800935a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800935e:	ab07      	add	r3, sp, #28
 8009360:	6861      	ldr	r1, [r4, #4]
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	6022      	str	r2, [r4, #0]
 8009366:	f10d 031b 	add.w	r3, sp, #27
 800936a:	4628      	mov	r0, r5
 800936c:	f7ff fef6 	bl	800915c <__cvt>
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	9907      	ldr	r1, [sp, #28]
 8009374:	2b47      	cmp	r3, #71	; 0x47
 8009376:	4680      	mov	r8, r0
 8009378:	d108      	bne.n	800938c <_printf_float+0x10c>
 800937a:	1cc8      	adds	r0, r1, #3
 800937c:	db02      	blt.n	8009384 <_printf_float+0x104>
 800937e:	6863      	ldr	r3, [r4, #4]
 8009380:	4299      	cmp	r1, r3
 8009382:	dd41      	ble.n	8009408 <_printf_float+0x188>
 8009384:	f1a9 0902 	sub.w	r9, r9, #2
 8009388:	fa5f f989 	uxtb.w	r9, r9
 800938c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009390:	d820      	bhi.n	80093d4 <_printf_float+0x154>
 8009392:	3901      	subs	r1, #1
 8009394:	464a      	mov	r2, r9
 8009396:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800939a:	9107      	str	r1, [sp, #28]
 800939c:	f7ff ff30 	bl	8009200 <__exponent>
 80093a0:	9a08      	ldr	r2, [sp, #32]
 80093a2:	9004      	str	r0, [sp, #16]
 80093a4:	1813      	adds	r3, r2, r0
 80093a6:	2a01      	cmp	r2, #1
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	dc02      	bgt.n	80093b2 <_printf_float+0x132>
 80093ac:	6822      	ldr	r2, [r4, #0]
 80093ae:	07d2      	lsls	r2, r2, #31
 80093b0:	d501      	bpl.n	80093b6 <_printf_float+0x136>
 80093b2:	3301      	adds	r3, #1
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0a2      	beq.n	8009304 <_printf_float+0x84>
 80093be:	232d      	movs	r3, #45	; 0x2d
 80093c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c4:	e79e      	b.n	8009304 <_printf_float+0x84>
 80093c6:	9904      	ldr	r1, [sp, #16]
 80093c8:	2947      	cmp	r1, #71	; 0x47
 80093ca:	d1c1      	bne.n	8009350 <_printf_float+0xd0>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1bf      	bne.n	8009350 <_printf_float+0xd0>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e7bc      	b.n	800934e <_printf_float+0xce>
 80093d4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80093d8:	d118      	bne.n	800940c <_printf_float+0x18c>
 80093da:	2900      	cmp	r1, #0
 80093dc:	6863      	ldr	r3, [r4, #4]
 80093de:	dd0b      	ble.n	80093f8 <_printf_float+0x178>
 80093e0:	6121      	str	r1, [r4, #16]
 80093e2:	b913      	cbnz	r3, 80093ea <_printf_float+0x16a>
 80093e4:	6822      	ldr	r2, [r4, #0]
 80093e6:	07d0      	lsls	r0, r2, #31
 80093e8:	d502      	bpl.n	80093f0 <_printf_float+0x170>
 80093ea:	3301      	adds	r3, #1
 80093ec:	440b      	add	r3, r1
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	2300      	movs	r3, #0
 80093f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	e7de      	b.n	80093b6 <_printf_float+0x136>
 80093f8:	b913      	cbnz	r3, 8009400 <_printf_float+0x180>
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	07d2      	lsls	r2, r2, #31
 80093fe:	d501      	bpl.n	8009404 <_printf_float+0x184>
 8009400:	3302      	adds	r3, #2
 8009402:	e7f4      	b.n	80093ee <_printf_float+0x16e>
 8009404:	2301      	movs	r3, #1
 8009406:	e7f2      	b.n	80093ee <_printf_float+0x16e>
 8009408:	f04f 0967 	mov.w	r9, #103	; 0x67
 800940c:	9b08      	ldr	r3, [sp, #32]
 800940e:	4299      	cmp	r1, r3
 8009410:	db05      	blt.n	800941e <_printf_float+0x19e>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	6121      	str	r1, [r4, #16]
 8009416:	07d8      	lsls	r0, r3, #31
 8009418:	d5ea      	bpl.n	80093f0 <_printf_float+0x170>
 800941a:	1c4b      	adds	r3, r1, #1
 800941c:	e7e7      	b.n	80093ee <_printf_float+0x16e>
 800941e:	2900      	cmp	r1, #0
 8009420:	bfd4      	ite	le
 8009422:	f1c1 0202 	rsble	r2, r1, #2
 8009426:	2201      	movgt	r2, #1
 8009428:	4413      	add	r3, r2
 800942a:	e7e0      	b.n	80093ee <_printf_float+0x16e>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	055a      	lsls	r2, r3, #21
 8009430:	d407      	bmi.n	8009442 <_printf_float+0x1c2>
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	4642      	mov	r2, r8
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	d12a      	bne.n	8009496 <_printf_float+0x216>
 8009440:	e76a      	b.n	8009318 <_printf_float+0x98>
 8009442:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009446:	f240 80e0 	bls.w	800960a <_printf_float+0x38a>
 800944a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800944e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009456:	d133      	bne.n	80094c0 <_printf_float+0x240>
 8009458:	4a37      	ldr	r2, [pc, #220]	; (8009538 <_printf_float+0x2b8>)
 800945a:	2301      	movs	r3, #1
 800945c:	4631      	mov	r1, r6
 800945e:	4628      	mov	r0, r5
 8009460:	47b8      	blx	r7
 8009462:	3001      	adds	r0, #1
 8009464:	f43f af58 	beq.w	8009318 <_printf_float+0x98>
 8009468:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800946c:	429a      	cmp	r2, r3
 800946e:	db02      	blt.n	8009476 <_printf_float+0x1f6>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	07d8      	lsls	r0, r3, #31
 8009474:	d50f      	bpl.n	8009496 <_printf_float+0x216>
 8009476:	4653      	mov	r3, sl
 8009478:	465a      	mov	r2, fp
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f af49 	beq.w	8009318 <_printf_float+0x98>
 8009486:	f04f 0800 	mov.w	r8, #0
 800948a:	f104 091a 	add.w	r9, r4, #26
 800948e:	9b08      	ldr	r3, [sp, #32]
 8009490:	3b01      	subs	r3, #1
 8009492:	4543      	cmp	r3, r8
 8009494:	dc09      	bgt.n	80094aa <_printf_float+0x22a>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	079b      	lsls	r3, r3, #30
 800949a:	f100 8106 	bmi.w	80096aa <_printf_float+0x42a>
 800949e:	68e0      	ldr	r0, [r4, #12]
 80094a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a2:	4298      	cmp	r0, r3
 80094a4:	bfb8      	it	lt
 80094a6:	4618      	movlt	r0, r3
 80094a8:	e738      	b.n	800931c <_printf_float+0x9c>
 80094aa:	2301      	movs	r3, #1
 80094ac:	464a      	mov	r2, r9
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f af2f 	beq.w	8009318 <_printf_float+0x98>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	e7e6      	b.n	800948e <_printf_float+0x20e>
 80094c0:	9b07      	ldr	r3, [sp, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dc3a      	bgt.n	800953c <_printf_float+0x2bc>
 80094c6:	4a1c      	ldr	r2, [pc, #112]	; (8009538 <_printf_float+0x2b8>)
 80094c8:	2301      	movs	r3, #1
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f af21 	beq.w	8009318 <_printf_float+0x98>
 80094d6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80094da:	4313      	orrs	r3, r2
 80094dc:	d102      	bne.n	80094e4 <_printf_float+0x264>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	07d9      	lsls	r1, r3, #31
 80094e2:	d5d8      	bpl.n	8009496 <_printf_float+0x216>
 80094e4:	4653      	mov	r3, sl
 80094e6:	465a      	mov	r2, fp
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	f43f af12 	beq.w	8009318 <_printf_float+0x98>
 80094f4:	f04f 0900 	mov.w	r9, #0
 80094f8:	f104 0a1a 	add.w	sl, r4, #26
 80094fc:	9b07      	ldr	r3, [sp, #28]
 80094fe:	425b      	negs	r3, r3
 8009500:	454b      	cmp	r3, r9
 8009502:	dc01      	bgt.n	8009508 <_printf_float+0x288>
 8009504:	9b08      	ldr	r3, [sp, #32]
 8009506:	e795      	b.n	8009434 <_printf_float+0x1b4>
 8009508:	2301      	movs	r3, #1
 800950a:	4652      	mov	r2, sl
 800950c:	4631      	mov	r1, r6
 800950e:	4628      	mov	r0, r5
 8009510:	47b8      	blx	r7
 8009512:	3001      	adds	r0, #1
 8009514:	f43f af00 	beq.w	8009318 <_printf_float+0x98>
 8009518:	f109 0901 	add.w	r9, r9, #1
 800951c:	e7ee      	b.n	80094fc <_printf_float+0x27c>
 800951e:	bf00      	nop
 8009520:	ffffffff 	.word	0xffffffff
 8009524:	7fefffff 	.word	0x7fefffff
 8009528:	0800c54c 	.word	0x0800c54c
 800952c:	0800c550 	.word	0x0800c550
 8009530:	0800c554 	.word	0x0800c554
 8009534:	0800c558 	.word	0x0800c558
 8009538:	0800c55c 	.word	0x0800c55c
 800953c:	9a08      	ldr	r2, [sp, #32]
 800953e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009540:	429a      	cmp	r2, r3
 8009542:	bfa8      	it	ge
 8009544:	461a      	movge	r2, r3
 8009546:	2a00      	cmp	r2, #0
 8009548:	4691      	mov	r9, r2
 800954a:	dc38      	bgt.n	80095be <_printf_float+0x33e>
 800954c:	2300      	movs	r3, #0
 800954e:	9305      	str	r3, [sp, #20]
 8009550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009554:	f104 021a 	add.w	r2, r4, #26
 8009558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800955a:	9905      	ldr	r1, [sp, #20]
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	eba3 0309 	sub.w	r3, r3, r9
 8009562:	428b      	cmp	r3, r1
 8009564:	dc33      	bgt.n	80095ce <_printf_float+0x34e>
 8009566:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800956a:	429a      	cmp	r2, r3
 800956c:	db3c      	blt.n	80095e8 <_printf_float+0x368>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	07da      	lsls	r2, r3, #31
 8009572:	d439      	bmi.n	80095e8 <_printf_float+0x368>
 8009574:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009578:	eba2 0903 	sub.w	r9, r2, r3
 800957c:	9b04      	ldr	r3, [sp, #16]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	4591      	cmp	r9, r2
 8009582:	bfa8      	it	ge
 8009584:	4691      	movge	r9, r2
 8009586:	f1b9 0f00 	cmp.w	r9, #0
 800958a:	dc35      	bgt.n	80095f8 <_printf_float+0x378>
 800958c:	f04f 0800 	mov.w	r8, #0
 8009590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009594:	f104 0a1a 	add.w	sl, r4, #26
 8009598:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	eba3 0309 	sub.w	r3, r3, r9
 80095a2:	4543      	cmp	r3, r8
 80095a4:	f77f af77 	ble.w	8009496 <_printf_float+0x216>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4652      	mov	r2, sl
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	47b8      	blx	r7
 80095b2:	3001      	adds	r0, #1
 80095b4:	f43f aeb0 	beq.w	8009318 <_printf_float+0x98>
 80095b8:	f108 0801 	add.w	r8, r8, #1
 80095bc:	e7ec      	b.n	8009598 <_printf_float+0x318>
 80095be:	4613      	mov	r3, r2
 80095c0:	4631      	mov	r1, r6
 80095c2:	4642      	mov	r2, r8
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b8      	blx	r7
 80095c8:	3001      	adds	r0, #1
 80095ca:	d1bf      	bne.n	800954c <_printf_float+0x2cc>
 80095cc:	e6a4      	b.n	8009318 <_printf_float+0x98>
 80095ce:	2301      	movs	r3, #1
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	9204      	str	r2, [sp, #16]
 80095d6:	47b8      	blx	r7
 80095d8:	3001      	adds	r0, #1
 80095da:	f43f ae9d 	beq.w	8009318 <_printf_float+0x98>
 80095de:	9b05      	ldr	r3, [sp, #20]
 80095e0:	9a04      	ldr	r2, [sp, #16]
 80095e2:	3301      	adds	r3, #1
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	e7b7      	b.n	8009558 <_printf_float+0x2d8>
 80095e8:	4653      	mov	r3, sl
 80095ea:	465a      	mov	r2, fp
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	d1be      	bne.n	8009574 <_printf_float+0x2f4>
 80095f6:	e68f      	b.n	8009318 <_printf_float+0x98>
 80095f8:	9a04      	ldr	r2, [sp, #16]
 80095fa:	464b      	mov	r3, r9
 80095fc:	4442      	add	r2, r8
 80095fe:	4631      	mov	r1, r6
 8009600:	4628      	mov	r0, r5
 8009602:	47b8      	blx	r7
 8009604:	3001      	adds	r0, #1
 8009606:	d1c1      	bne.n	800958c <_printf_float+0x30c>
 8009608:	e686      	b.n	8009318 <_printf_float+0x98>
 800960a:	9a08      	ldr	r2, [sp, #32]
 800960c:	2a01      	cmp	r2, #1
 800960e:	dc01      	bgt.n	8009614 <_printf_float+0x394>
 8009610:	07db      	lsls	r3, r3, #31
 8009612:	d537      	bpl.n	8009684 <_printf_float+0x404>
 8009614:	2301      	movs	r3, #1
 8009616:	4642      	mov	r2, r8
 8009618:	4631      	mov	r1, r6
 800961a:	4628      	mov	r0, r5
 800961c:	47b8      	blx	r7
 800961e:	3001      	adds	r0, #1
 8009620:	f43f ae7a 	beq.w	8009318 <_printf_float+0x98>
 8009624:	4653      	mov	r3, sl
 8009626:	465a      	mov	r2, fp
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	47b8      	blx	r7
 800962e:	3001      	adds	r0, #1
 8009630:	f43f ae72 	beq.w	8009318 <_printf_float+0x98>
 8009634:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009638:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	9b08      	ldr	r3, [sp, #32]
 8009642:	d01a      	beq.n	800967a <_printf_float+0x3fa>
 8009644:	3b01      	subs	r3, #1
 8009646:	f108 0201 	add.w	r2, r8, #1
 800964a:	4631      	mov	r1, r6
 800964c:	4628      	mov	r0, r5
 800964e:	47b8      	blx	r7
 8009650:	3001      	adds	r0, #1
 8009652:	d10e      	bne.n	8009672 <_printf_float+0x3f2>
 8009654:	e660      	b.n	8009318 <_printf_float+0x98>
 8009656:	2301      	movs	r3, #1
 8009658:	464a      	mov	r2, r9
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f ae59 	beq.w	8009318 <_printf_float+0x98>
 8009666:	f108 0801 	add.w	r8, r8, #1
 800966a:	9b08      	ldr	r3, [sp, #32]
 800966c:	3b01      	subs	r3, #1
 800966e:	4543      	cmp	r3, r8
 8009670:	dcf1      	bgt.n	8009656 <_printf_float+0x3d6>
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009678:	e6dd      	b.n	8009436 <_printf_float+0x1b6>
 800967a:	f04f 0800 	mov.w	r8, #0
 800967e:	f104 091a 	add.w	r9, r4, #26
 8009682:	e7f2      	b.n	800966a <_printf_float+0x3ea>
 8009684:	2301      	movs	r3, #1
 8009686:	4642      	mov	r2, r8
 8009688:	e7df      	b.n	800964a <_printf_float+0x3ca>
 800968a:	2301      	movs	r3, #1
 800968c:	464a      	mov	r2, r9
 800968e:	4631      	mov	r1, r6
 8009690:	4628      	mov	r0, r5
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	f43f ae3f 	beq.w	8009318 <_printf_float+0x98>
 800969a:	f108 0801 	add.w	r8, r8, #1
 800969e:	68e3      	ldr	r3, [r4, #12]
 80096a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096a2:	1a5b      	subs	r3, r3, r1
 80096a4:	4543      	cmp	r3, r8
 80096a6:	dcf0      	bgt.n	800968a <_printf_float+0x40a>
 80096a8:	e6f9      	b.n	800949e <_printf_float+0x21e>
 80096aa:	f04f 0800 	mov.w	r8, #0
 80096ae:	f104 0919 	add.w	r9, r4, #25
 80096b2:	e7f4      	b.n	800969e <_printf_float+0x41e>

080096b4 <_printf_common>:
 80096b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	4616      	mov	r6, r2
 80096ba:	4699      	mov	r9, r3
 80096bc:	688a      	ldr	r2, [r1, #8]
 80096be:	690b      	ldr	r3, [r1, #16]
 80096c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096c4:	4293      	cmp	r3, r2
 80096c6:	bfb8      	it	lt
 80096c8:	4613      	movlt	r3, r2
 80096ca:	6033      	str	r3, [r6, #0]
 80096cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096d0:	4607      	mov	r7, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	b10a      	cbz	r2, 80096da <_printf_common+0x26>
 80096d6:	3301      	adds	r3, #1
 80096d8:	6033      	str	r3, [r6, #0]
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	0699      	lsls	r1, r3, #26
 80096de:	bf42      	ittt	mi
 80096e0:	6833      	ldrmi	r3, [r6, #0]
 80096e2:	3302      	addmi	r3, #2
 80096e4:	6033      	strmi	r3, [r6, #0]
 80096e6:	6825      	ldr	r5, [r4, #0]
 80096e8:	f015 0506 	ands.w	r5, r5, #6
 80096ec:	d106      	bne.n	80096fc <_printf_common+0x48>
 80096ee:	f104 0a19 	add.w	sl, r4, #25
 80096f2:	68e3      	ldr	r3, [r4, #12]
 80096f4:	6832      	ldr	r2, [r6, #0]
 80096f6:	1a9b      	subs	r3, r3, r2
 80096f8:	42ab      	cmp	r3, r5
 80096fa:	dc26      	bgt.n	800974a <_printf_common+0x96>
 80096fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009700:	1e13      	subs	r3, r2, #0
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	bf18      	it	ne
 8009706:	2301      	movne	r3, #1
 8009708:	0692      	lsls	r2, r2, #26
 800970a:	d42b      	bmi.n	8009764 <_printf_common+0xb0>
 800970c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009710:	4649      	mov	r1, r9
 8009712:	4638      	mov	r0, r7
 8009714:	47c0      	blx	r8
 8009716:	3001      	adds	r0, #1
 8009718:	d01e      	beq.n	8009758 <_printf_common+0xa4>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	6922      	ldr	r2, [r4, #16]
 800971e:	f003 0306 	and.w	r3, r3, #6
 8009722:	2b04      	cmp	r3, #4
 8009724:	bf02      	ittt	eq
 8009726:	68e5      	ldreq	r5, [r4, #12]
 8009728:	6833      	ldreq	r3, [r6, #0]
 800972a:	1aed      	subeq	r5, r5, r3
 800972c:	68a3      	ldr	r3, [r4, #8]
 800972e:	bf0c      	ite	eq
 8009730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009734:	2500      	movne	r5, #0
 8009736:	4293      	cmp	r3, r2
 8009738:	bfc4      	itt	gt
 800973a:	1a9b      	subgt	r3, r3, r2
 800973c:	18ed      	addgt	r5, r5, r3
 800973e:	2600      	movs	r6, #0
 8009740:	341a      	adds	r4, #26
 8009742:	42b5      	cmp	r5, r6
 8009744:	d11a      	bne.n	800977c <_printf_common+0xc8>
 8009746:	2000      	movs	r0, #0
 8009748:	e008      	b.n	800975c <_printf_common+0xa8>
 800974a:	2301      	movs	r3, #1
 800974c:	4652      	mov	r2, sl
 800974e:	4649      	mov	r1, r9
 8009750:	4638      	mov	r0, r7
 8009752:	47c0      	blx	r8
 8009754:	3001      	adds	r0, #1
 8009756:	d103      	bne.n	8009760 <_printf_common+0xac>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009760:	3501      	adds	r5, #1
 8009762:	e7c6      	b.n	80096f2 <_printf_common+0x3e>
 8009764:	18e1      	adds	r1, r4, r3
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	2030      	movs	r0, #48	; 0x30
 800976a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800976e:	4422      	add	r2, r4
 8009770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009778:	3302      	adds	r3, #2
 800977a:	e7c7      	b.n	800970c <_printf_common+0x58>
 800977c:	2301      	movs	r3, #1
 800977e:	4622      	mov	r2, r4
 8009780:	4649      	mov	r1, r9
 8009782:	4638      	mov	r0, r7
 8009784:	47c0      	blx	r8
 8009786:	3001      	adds	r0, #1
 8009788:	d0e6      	beq.n	8009758 <_printf_common+0xa4>
 800978a:	3601      	adds	r6, #1
 800978c:	e7d9      	b.n	8009742 <_printf_common+0x8e>
	...

08009790 <_printf_i>:
 8009790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	7e0f      	ldrb	r7, [r1, #24]
 8009796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009798:	2f78      	cmp	r7, #120	; 0x78
 800979a:	4691      	mov	r9, r2
 800979c:	4680      	mov	r8, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	469a      	mov	sl, r3
 80097a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097a6:	d807      	bhi.n	80097b8 <_printf_i+0x28>
 80097a8:	2f62      	cmp	r7, #98	; 0x62
 80097aa:	d80a      	bhi.n	80097c2 <_printf_i+0x32>
 80097ac:	2f00      	cmp	r7, #0
 80097ae:	f000 80d4 	beq.w	800995a <_printf_i+0x1ca>
 80097b2:	2f58      	cmp	r7, #88	; 0x58
 80097b4:	f000 80c0 	beq.w	8009938 <_printf_i+0x1a8>
 80097b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097c0:	e03a      	b.n	8009838 <_printf_i+0xa8>
 80097c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097c6:	2b15      	cmp	r3, #21
 80097c8:	d8f6      	bhi.n	80097b8 <_printf_i+0x28>
 80097ca:	a101      	add	r1, pc, #4	; (adr r1, 80097d0 <_printf_i+0x40>)
 80097cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097d0:	08009829 	.word	0x08009829
 80097d4:	0800983d 	.word	0x0800983d
 80097d8:	080097b9 	.word	0x080097b9
 80097dc:	080097b9 	.word	0x080097b9
 80097e0:	080097b9 	.word	0x080097b9
 80097e4:	080097b9 	.word	0x080097b9
 80097e8:	0800983d 	.word	0x0800983d
 80097ec:	080097b9 	.word	0x080097b9
 80097f0:	080097b9 	.word	0x080097b9
 80097f4:	080097b9 	.word	0x080097b9
 80097f8:	080097b9 	.word	0x080097b9
 80097fc:	08009941 	.word	0x08009941
 8009800:	08009869 	.word	0x08009869
 8009804:	080098fb 	.word	0x080098fb
 8009808:	080097b9 	.word	0x080097b9
 800980c:	080097b9 	.word	0x080097b9
 8009810:	08009963 	.word	0x08009963
 8009814:	080097b9 	.word	0x080097b9
 8009818:	08009869 	.word	0x08009869
 800981c:	080097b9 	.word	0x080097b9
 8009820:	080097b9 	.word	0x080097b9
 8009824:	08009903 	.word	0x08009903
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	1d1a      	adds	r2, r3, #4
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	602a      	str	r2, [r5, #0]
 8009830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009838:	2301      	movs	r3, #1
 800983a:	e09f      	b.n	800997c <_printf_i+0x1ec>
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	682b      	ldr	r3, [r5, #0]
 8009840:	0607      	lsls	r7, r0, #24
 8009842:	f103 0104 	add.w	r1, r3, #4
 8009846:	6029      	str	r1, [r5, #0]
 8009848:	d501      	bpl.n	800984e <_printf_i+0xbe>
 800984a:	681e      	ldr	r6, [r3, #0]
 800984c:	e003      	b.n	8009856 <_printf_i+0xc6>
 800984e:	0646      	lsls	r6, r0, #25
 8009850:	d5fb      	bpl.n	800984a <_printf_i+0xba>
 8009852:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009856:	2e00      	cmp	r6, #0
 8009858:	da03      	bge.n	8009862 <_printf_i+0xd2>
 800985a:	232d      	movs	r3, #45	; 0x2d
 800985c:	4276      	negs	r6, r6
 800985e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009862:	485a      	ldr	r0, [pc, #360]	; (80099cc <_printf_i+0x23c>)
 8009864:	230a      	movs	r3, #10
 8009866:	e012      	b.n	800988e <_printf_i+0xfe>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	6820      	ldr	r0, [r4, #0]
 800986c:	1d19      	adds	r1, r3, #4
 800986e:	6029      	str	r1, [r5, #0]
 8009870:	0605      	lsls	r5, r0, #24
 8009872:	d501      	bpl.n	8009878 <_printf_i+0xe8>
 8009874:	681e      	ldr	r6, [r3, #0]
 8009876:	e002      	b.n	800987e <_printf_i+0xee>
 8009878:	0641      	lsls	r1, r0, #25
 800987a:	d5fb      	bpl.n	8009874 <_printf_i+0xe4>
 800987c:	881e      	ldrh	r6, [r3, #0]
 800987e:	4853      	ldr	r0, [pc, #332]	; (80099cc <_printf_i+0x23c>)
 8009880:	2f6f      	cmp	r7, #111	; 0x6f
 8009882:	bf0c      	ite	eq
 8009884:	2308      	moveq	r3, #8
 8009886:	230a      	movne	r3, #10
 8009888:	2100      	movs	r1, #0
 800988a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800988e:	6865      	ldr	r5, [r4, #4]
 8009890:	60a5      	str	r5, [r4, #8]
 8009892:	2d00      	cmp	r5, #0
 8009894:	bfa2      	ittt	ge
 8009896:	6821      	ldrge	r1, [r4, #0]
 8009898:	f021 0104 	bicge.w	r1, r1, #4
 800989c:	6021      	strge	r1, [r4, #0]
 800989e:	b90e      	cbnz	r6, 80098a4 <_printf_i+0x114>
 80098a0:	2d00      	cmp	r5, #0
 80098a2:	d04b      	beq.n	800993c <_printf_i+0x1ac>
 80098a4:	4615      	mov	r5, r2
 80098a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80098aa:	fb03 6711 	mls	r7, r3, r1, r6
 80098ae:	5dc7      	ldrb	r7, [r0, r7]
 80098b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098b4:	4637      	mov	r7, r6
 80098b6:	42bb      	cmp	r3, r7
 80098b8:	460e      	mov	r6, r1
 80098ba:	d9f4      	bls.n	80098a6 <_printf_i+0x116>
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d10b      	bne.n	80098d8 <_printf_i+0x148>
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	07de      	lsls	r6, r3, #31
 80098c4:	d508      	bpl.n	80098d8 <_printf_i+0x148>
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	6861      	ldr	r1, [r4, #4]
 80098ca:	4299      	cmp	r1, r3
 80098cc:	bfde      	ittt	le
 80098ce:	2330      	movle	r3, #48	; 0x30
 80098d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098d8:	1b52      	subs	r2, r2, r5
 80098da:	6122      	str	r2, [r4, #16]
 80098dc:	f8cd a000 	str.w	sl, [sp]
 80098e0:	464b      	mov	r3, r9
 80098e2:	aa03      	add	r2, sp, #12
 80098e4:	4621      	mov	r1, r4
 80098e6:	4640      	mov	r0, r8
 80098e8:	f7ff fee4 	bl	80096b4 <_printf_common>
 80098ec:	3001      	adds	r0, #1
 80098ee:	d14a      	bne.n	8009986 <_printf_i+0x1f6>
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295
 80098f4:	b004      	add	sp, #16
 80098f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	f043 0320 	orr.w	r3, r3, #32
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	4833      	ldr	r0, [pc, #204]	; (80099d0 <_printf_i+0x240>)
 8009904:	2778      	movs	r7, #120	; 0x78
 8009906:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	6829      	ldr	r1, [r5, #0]
 800990e:	061f      	lsls	r7, r3, #24
 8009910:	f851 6b04 	ldr.w	r6, [r1], #4
 8009914:	d402      	bmi.n	800991c <_printf_i+0x18c>
 8009916:	065f      	lsls	r7, r3, #25
 8009918:	bf48      	it	mi
 800991a:	b2b6      	uxthmi	r6, r6
 800991c:	07df      	lsls	r7, r3, #31
 800991e:	bf48      	it	mi
 8009920:	f043 0320 	orrmi.w	r3, r3, #32
 8009924:	6029      	str	r1, [r5, #0]
 8009926:	bf48      	it	mi
 8009928:	6023      	strmi	r3, [r4, #0]
 800992a:	b91e      	cbnz	r6, 8009934 <_printf_i+0x1a4>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	f023 0320 	bic.w	r3, r3, #32
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	2310      	movs	r3, #16
 8009936:	e7a7      	b.n	8009888 <_printf_i+0xf8>
 8009938:	4824      	ldr	r0, [pc, #144]	; (80099cc <_printf_i+0x23c>)
 800993a:	e7e4      	b.n	8009906 <_printf_i+0x176>
 800993c:	4615      	mov	r5, r2
 800993e:	e7bd      	b.n	80098bc <_printf_i+0x12c>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	6826      	ldr	r6, [r4, #0]
 8009944:	6961      	ldr	r1, [r4, #20]
 8009946:	1d18      	adds	r0, r3, #4
 8009948:	6028      	str	r0, [r5, #0]
 800994a:	0635      	lsls	r5, r6, #24
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	d501      	bpl.n	8009954 <_printf_i+0x1c4>
 8009950:	6019      	str	r1, [r3, #0]
 8009952:	e002      	b.n	800995a <_printf_i+0x1ca>
 8009954:	0670      	lsls	r0, r6, #25
 8009956:	d5fb      	bpl.n	8009950 <_printf_i+0x1c0>
 8009958:	8019      	strh	r1, [r3, #0]
 800995a:	2300      	movs	r3, #0
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	4615      	mov	r5, r2
 8009960:	e7bc      	b.n	80098dc <_printf_i+0x14c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	602a      	str	r2, [r5, #0]
 8009968:	681d      	ldr	r5, [r3, #0]
 800996a:	6862      	ldr	r2, [r4, #4]
 800996c:	2100      	movs	r1, #0
 800996e:	4628      	mov	r0, r5
 8009970:	f7f6 fc66 	bl	8000240 <memchr>
 8009974:	b108      	cbz	r0, 800997a <_printf_i+0x1ea>
 8009976:	1b40      	subs	r0, r0, r5
 8009978:	6060      	str	r0, [r4, #4]
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	2300      	movs	r3, #0
 8009980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009984:	e7aa      	b.n	80098dc <_printf_i+0x14c>
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	462a      	mov	r2, r5
 800998a:	4649      	mov	r1, r9
 800998c:	4640      	mov	r0, r8
 800998e:	47d0      	blx	sl
 8009990:	3001      	adds	r0, #1
 8009992:	d0ad      	beq.n	80098f0 <_printf_i+0x160>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	079b      	lsls	r3, r3, #30
 8009998:	d413      	bmi.n	80099c2 <_printf_i+0x232>
 800999a:	68e0      	ldr	r0, [r4, #12]
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	4298      	cmp	r0, r3
 80099a0:	bfb8      	it	lt
 80099a2:	4618      	movlt	r0, r3
 80099a4:	e7a6      	b.n	80098f4 <_printf_i+0x164>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4632      	mov	r2, r6
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	47d0      	blx	sl
 80099b0:	3001      	adds	r0, #1
 80099b2:	d09d      	beq.n	80098f0 <_printf_i+0x160>
 80099b4:	3501      	adds	r5, #1
 80099b6:	68e3      	ldr	r3, [r4, #12]
 80099b8:	9903      	ldr	r1, [sp, #12]
 80099ba:	1a5b      	subs	r3, r3, r1
 80099bc:	42ab      	cmp	r3, r5
 80099be:	dcf2      	bgt.n	80099a6 <_printf_i+0x216>
 80099c0:	e7eb      	b.n	800999a <_printf_i+0x20a>
 80099c2:	2500      	movs	r5, #0
 80099c4:	f104 0619 	add.w	r6, r4, #25
 80099c8:	e7f5      	b.n	80099b6 <_printf_i+0x226>
 80099ca:	bf00      	nop
 80099cc:	0800c55e 	.word	0x0800c55e
 80099d0:	0800c56f 	.word	0x0800c56f

080099d4 <std>:
 80099d4:	2300      	movs	r3, #0
 80099d6:	b510      	push	{r4, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	e9c0 3300 	strd	r3, r3, [r0]
 80099de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099e2:	6083      	str	r3, [r0, #8]
 80099e4:	8181      	strh	r1, [r0, #12]
 80099e6:	6643      	str	r3, [r0, #100]	; 0x64
 80099e8:	81c2      	strh	r2, [r0, #14]
 80099ea:	6183      	str	r3, [r0, #24]
 80099ec:	4619      	mov	r1, r3
 80099ee:	2208      	movs	r2, #8
 80099f0:	305c      	adds	r0, #92	; 0x5c
 80099f2:	f000 f914 	bl	8009c1e <memset>
 80099f6:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <std+0x58>)
 80099f8:	6263      	str	r3, [r4, #36]	; 0x24
 80099fa:	4b0d      	ldr	r3, [pc, #52]	; (8009a30 <std+0x5c>)
 80099fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <std+0x60>)
 8009a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a02:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <std+0x64>)
 8009a04:	6323      	str	r3, [r4, #48]	; 0x30
 8009a06:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <std+0x68>)
 8009a08:	6224      	str	r4, [r4, #32]
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d006      	beq.n	8009a1c <std+0x48>
 8009a0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a12:	4294      	cmp	r4, r2
 8009a14:	d002      	beq.n	8009a1c <std+0x48>
 8009a16:	33d0      	adds	r3, #208	; 0xd0
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d105      	bne.n	8009a28 <std+0x54>
 8009a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a24:	f000 b9ce 	b.w	8009dc4 <__retarget_lock_init_recursive>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	bf00      	nop
 8009a2c:	08009b99 	.word	0x08009b99
 8009a30:	08009bbb 	.word	0x08009bbb
 8009a34:	08009bf3 	.word	0x08009bf3
 8009a38:	08009c17 	.word	0x08009c17
 8009a3c:	20005318 	.word	0x20005318

08009a40 <stdio_exit_handler>:
 8009a40:	4a02      	ldr	r2, [pc, #8]	; (8009a4c <stdio_exit_handler+0xc>)
 8009a42:	4903      	ldr	r1, [pc, #12]	; (8009a50 <stdio_exit_handler+0x10>)
 8009a44:	4803      	ldr	r0, [pc, #12]	; (8009a54 <stdio_exit_handler+0x14>)
 8009a46:	f000 b869 	b.w	8009b1c <_fwalk_sglue>
 8009a4a:	bf00      	nop
 8009a4c:	2000001c 	.word	0x2000001c
 8009a50:	0800b685 	.word	0x0800b685
 8009a54:	20000028 	.word	0x20000028

08009a58 <cleanup_stdio>:
 8009a58:	6841      	ldr	r1, [r0, #4]
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <cleanup_stdio+0x34>)
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	4604      	mov	r4, r0
 8009a62:	d001      	beq.n	8009a68 <cleanup_stdio+0x10>
 8009a64:	f001 fe0e 	bl	800b684 <_fflush_r>
 8009a68:	68a1      	ldr	r1, [r4, #8]
 8009a6a:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <cleanup_stdio+0x38>)
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d002      	beq.n	8009a76 <cleanup_stdio+0x1e>
 8009a70:	4620      	mov	r0, r4
 8009a72:	f001 fe07 	bl	800b684 <_fflush_r>
 8009a76:	68e1      	ldr	r1, [r4, #12]
 8009a78:	4b06      	ldr	r3, [pc, #24]	; (8009a94 <cleanup_stdio+0x3c>)
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d004      	beq.n	8009a88 <cleanup_stdio+0x30>
 8009a7e:	4620      	mov	r0, r4
 8009a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a84:	f001 bdfe 	b.w	800b684 <_fflush_r>
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20005318 	.word	0x20005318
 8009a90:	20005380 	.word	0x20005380
 8009a94:	200053e8 	.word	0x200053e8

08009a98 <global_stdio_init.part.0>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <global_stdio_init.part.0+0x30>)
 8009a9c:	4c0b      	ldr	r4, [pc, #44]	; (8009acc <global_stdio_init.part.0+0x34>)
 8009a9e:	4a0c      	ldr	r2, [pc, #48]	; (8009ad0 <global_stdio_init.part.0+0x38>)
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2104      	movs	r1, #4
 8009aa8:	f7ff ff94 	bl	80099d4 <std>
 8009aac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	2109      	movs	r1, #9
 8009ab4:	f7ff ff8e 	bl	80099d4 <std>
 8009ab8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009abc:	2202      	movs	r2, #2
 8009abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac2:	2112      	movs	r1, #18
 8009ac4:	f7ff bf86 	b.w	80099d4 <std>
 8009ac8:	20005450 	.word	0x20005450
 8009acc:	20005318 	.word	0x20005318
 8009ad0:	08009a41 	.word	0x08009a41

08009ad4 <__sfp_lock_acquire>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	; (8009adc <__sfp_lock_acquire+0x8>)
 8009ad6:	f000 b976 	b.w	8009dc6 <__retarget_lock_acquire_recursive>
 8009ada:	bf00      	nop
 8009adc:	20005459 	.word	0x20005459

08009ae0 <__sfp_lock_release>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <__sfp_lock_release+0x8>)
 8009ae2:	f000 b971 	b.w	8009dc8 <__retarget_lock_release_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20005459 	.word	0x20005459

08009aec <__sinit>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	4604      	mov	r4, r0
 8009af0:	f7ff fff0 	bl	8009ad4 <__sfp_lock_acquire>
 8009af4:	6a23      	ldr	r3, [r4, #32]
 8009af6:	b11b      	cbz	r3, 8009b00 <__sinit+0x14>
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afc:	f7ff bff0 	b.w	8009ae0 <__sfp_lock_release>
 8009b00:	4b04      	ldr	r3, [pc, #16]	; (8009b14 <__sinit+0x28>)
 8009b02:	6223      	str	r3, [r4, #32]
 8009b04:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <__sinit+0x2c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f5      	bne.n	8009af8 <__sinit+0xc>
 8009b0c:	f7ff ffc4 	bl	8009a98 <global_stdio_init.part.0>
 8009b10:	e7f2      	b.n	8009af8 <__sinit+0xc>
 8009b12:	bf00      	nop
 8009b14:	08009a59 	.word	0x08009a59
 8009b18:	20005450 	.word	0x20005450

08009b1c <_fwalk_sglue>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	4607      	mov	r7, r0
 8009b22:	4688      	mov	r8, r1
 8009b24:	4614      	mov	r4, r2
 8009b26:	2600      	movs	r6, #0
 8009b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b30:	d505      	bpl.n	8009b3e <_fwalk_sglue+0x22>
 8009b32:	6824      	ldr	r4, [r4, #0]
 8009b34:	2c00      	cmp	r4, #0
 8009b36:	d1f7      	bne.n	8009b28 <_fwalk_sglue+0xc>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d907      	bls.n	8009b54 <_fwalk_sglue+0x38>
 8009b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	d003      	beq.n	8009b54 <_fwalk_sglue+0x38>
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4638      	mov	r0, r7
 8009b50:	47c0      	blx	r8
 8009b52:	4306      	orrs	r6, r0
 8009b54:	3568      	adds	r5, #104	; 0x68
 8009b56:	e7e9      	b.n	8009b2c <_fwalk_sglue+0x10>

08009b58 <siprintf>:
 8009b58:	b40e      	push	{r1, r2, r3}
 8009b5a:	b500      	push	{lr}
 8009b5c:	b09c      	sub	sp, #112	; 0x70
 8009b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b60:	9002      	str	r0, [sp, #8]
 8009b62:	9006      	str	r0, [sp, #24]
 8009b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b68:	4809      	ldr	r0, [pc, #36]	; (8009b90 <siprintf+0x38>)
 8009b6a:	9107      	str	r1, [sp, #28]
 8009b6c:	9104      	str	r1, [sp, #16]
 8009b6e:	4909      	ldr	r1, [pc, #36]	; (8009b94 <siprintf+0x3c>)
 8009b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b74:	9105      	str	r1, [sp, #20]
 8009b76:	6800      	ldr	r0, [r0, #0]
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	a902      	add	r1, sp, #8
 8009b7c:	f001 fbfe 	bl	800b37c <_svfiprintf_r>
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	b01c      	add	sp, #112	; 0x70
 8009b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b8c:	b003      	add	sp, #12
 8009b8e:	4770      	bx	lr
 8009b90:	20000074 	.word	0x20000074
 8009b94:	ffff0208 	.word	0xffff0208

08009b98 <__sread>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	f000 f8c2 	bl	8009d28 <_read_r>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	bfab      	itete	ge
 8009ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009baa:	89a3      	ldrhlt	r3, [r4, #12]
 8009bac:	181b      	addge	r3, r3, r0
 8009bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bb2:	bfac      	ite	ge
 8009bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bb6:	81a3      	strhlt	r3, [r4, #12]
 8009bb8:	bd10      	pop	{r4, pc}

08009bba <__swrite>:
 8009bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbe:	461f      	mov	r7, r3
 8009bc0:	898b      	ldrh	r3, [r1, #12]
 8009bc2:	05db      	lsls	r3, r3, #23
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	4616      	mov	r6, r2
 8009bca:	d505      	bpl.n	8009bd8 <__swrite+0x1e>
 8009bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f000 f896 	bl	8009d04 <_lseek_r>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	4632      	mov	r2, r6
 8009be6:	463b      	mov	r3, r7
 8009be8:	4628      	mov	r0, r5
 8009bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bee:	f000 b8ad 	b.w	8009d4c <_write_r>

08009bf2 <__sseek>:
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfa:	f000 f883 	bl	8009d04 <_lseek_r>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	bf15      	itete	ne
 8009c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c0e:	81a3      	strheq	r3, [r4, #12]
 8009c10:	bf18      	it	ne
 8009c12:	81a3      	strhne	r3, [r4, #12]
 8009c14:	bd10      	pop	{r4, pc}

08009c16 <__sclose>:
 8009c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1a:	f000 b80d 	b.w	8009c38 <_close_r>

08009c1e <memset>:
 8009c1e:	4402      	add	r2, r0
 8009c20:	4603      	mov	r3, r0
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d100      	bne.n	8009c28 <memset+0xa>
 8009c26:	4770      	bx	lr
 8009c28:	f803 1b01 	strb.w	r1, [r3], #1
 8009c2c:	e7f9      	b.n	8009c22 <memset+0x4>
	...

08009c30 <_localeconv_r>:
 8009c30:	4800      	ldr	r0, [pc, #0]	; (8009c34 <_localeconv_r+0x4>)
 8009c32:	4770      	bx	lr
 8009c34:	20000168 	.word	0x20000168

08009c38 <_close_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d06      	ldr	r5, [pc, #24]	; (8009c54 <_close_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f7 fee3 	bl	8001a0e <_close>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_close_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_close_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20005454 	.word	0x20005454

08009c58 <_reclaim_reent>:
 8009c58:	4b29      	ldr	r3, [pc, #164]	; (8009d00 <_reclaim_reent+0xa8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4283      	cmp	r3, r0
 8009c5e:	b570      	push	{r4, r5, r6, lr}
 8009c60:	4604      	mov	r4, r0
 8009c62:	d04b      	beq.n	8009cfc <_reclaim_reent+0xa4>
 8009c64:	69c3      	ldr	r3, [r0, #28]
 8009c66:	b143      	cbz	r3, 8009c7a <_reclaim_reent+0x22>
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d144      	bne.n	8009cf8 <_reclaim_reent+0xa0>
 8009c6e:	69e3      	ldr	r3, [r4, #28]
 8009c70:	6819      	ldr	r1, [r3, #0]
 8009c72:	b111      	cbz	r1, 8009c7a <_reclaim_reent+0x22>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 feab 	bl	800a9d0 <_free_r>
 8009c7a:	6961      	ldr	r1, [r4, #20]
 8009c7c:	b111      	cbz	r1, 8009c84 <_reclaim_reent+0x2c>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 fea6 	bl	800a9d0 <_free_r>
 8009c84:	69e1      	ldr	r1, [r4, #28]
 8009c86:	b111      	cbz	r1, 8009c8e <_reclaim_reent+0x36>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 fea1 	bl	800a9d0 <_free_r>
 8009c8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009c90:	b111      	cbz	r1, 8009c98 <_reclaim_reent+0x40>
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fe9c 	bl	800a9d0 <_free_r>
 8009c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c9a:	b111      	cbz	r1, 8009ca2 <_reclaim_reent+0x4a>
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 fe97 	bl	800a9d0 <_free_r>
 8009ca2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ca4:	b111      	cbz	r1, 8009cac <_reclaim_reent+0x54>
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 fe92 	bl	800a9d0 <_free_r>
 8009cac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009cae:	b111      	cbz	r1, 8009cb6 <_reclaim_reent+0x5e>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 fe8d 	bl	800a9d0 <_free_r>
 8009cb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009cb8:	b111      	cbz	r1, 8009cc0 <_reclaim_reent+0x68>
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fe88 	bl	800a9d0 <_free_r>
 8009cc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009cc2:	b111      	cbz	r1, 8009cca <_reclaim_reent+0x72>
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fe83 	bl	800a9d0 <_free_r>
 8009cca:	6a23      	ldr	r3, [r4, #32]
 8009ccc:	b1b3      	cbz	r3, 8009cfc <_reclaim_reent+0xa4>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cd4:	4718      	bx	r3
 8009cd6:	5949      	ldr	r1, [r1, r5]
 8009cd8:	b941      	cbnz	r1, 8009cec <_reclaim_reent+0x94>
 8009cda:	3504      	adds	r5, #4
 8009cdc:	69e3      	ldr	r3, [r4, #28]
 8009cde:	2d80      	cmp	r5, #128	; 0x80
 8009ce0:	68d9      	ldr	r1, [r3, #12]
 8009ce2:	d1f8      	bne.n	8009cd6 <_reclaim_reent+0x7e>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 fe73 	bl	800a9d0 <_free_r>
 8009cea:	e7c0      	b.n	8009c6e <_reclaim_reent+0x16>
 8009cec:	680e      	ldr	r6, [r1, #0]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fe6e 	bl	800a9d0 <_free_r>
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	e7ef      	b.n	8009cd8 <_reclaim_reent+0x80>
 8009cf8:	2500      	movs	r5, #0
 8009cfa:	e7ef      	b.n	8009cdc <_reclaim_reent+0x84>
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000074 	.word	0x20000074

08009d04 <_lseek_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d07      	ldr	r5, [pc, #28]	; (8009d24 <_lseek_r+0x20>)
 8009d08:	4604      	mov	r4, r0
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	602a      	str	r2, [r5, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	f7f7 fea2 	bl	8001a5c <_lseek>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d102      	bne.n	8009d22 <_lseek_r+0x1e>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	b103      	cbz	r3, 8009d22 <_lseek_r+0x1e>
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	20005454 	.word	0x20005454

08009d28 <_read_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d07      	ldr	r5, [pc, #28]	; (8009d48 <_read_r+0x20>)
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	4608      	mov	r0, r1
 8009d30:	4611      	mov	r1, r2
 8009d32:	2200      	movs	r2, #0
 8009d34:	602a      	str	r2, [r5, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f7f7 fe30 	bl	800199c <_read>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_read_r+0x1e>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_read_r+0x1e>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20005454 	.word	0x20005454

08009d4c <_write_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_write_r+0x20>)
 8009d50:	4604      	mov	r4, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f7 fe3b 	bl	80019d6 <_write>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_write_r+0x1e>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_write_r+0x1e>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20005454 	.word	0x20005454

08009d70 <__errno>:
 8009d70:	4b01      	ldr	r3, [pc, #4]	; (8009d78 <__errno+0x8>)
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20000074 	.word	0x20000074

08009d7c <__libc_init_array>:
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	4d0d      	ldr	r5, [pc, #52]	; (8009db4 <__libc_init_array+0x38>)
 8009d80:	4c0d      	ldr	r4, [pc, #52]	; (8009db8 <__libc_init_array+0x3c>)
 8009d82:	1b64      	subs	r4, r4, r5
 8009d84:	10a4      	asrs	r4, r4, #2
 8009d86:	2600      	movs	r6, #0
 8009d88:	42a6      	cmp	r6, r4
 8009d8a:	d109      	bne.n	8009da0 <__libc_init_array+0x24>
 8009d8c:	4d0b      	ldr	r5, [pc, #44]	; (8009dbc <__libc_init_array+0x40>)
 8009d8e:	4c0c      	ldr	r4, [pc, #48]	; (8009dc0 <__libc_init_array+0x44>)
 8009d90:	f002 fb02 	bl	800c398 <_init>
 8009d94:	1b64      	subs	r4, r4, r5
 8009d96:	10a4      	asrs	r4, r4, #2
 8009d98:	2600      	movs	r6, #0
 8009d9a:	42a6      	cmp	r6, r4
 8009d9c:	d105      	bne.n	8009daa <__libc_init_array+0x2e>
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da4:	4798      	blx	r3
 8009da6:	3601      	adds	r6, #1
 8009da8:	e7ee      	b.n	8009d88 <__libc_init_array+0xc>
 8009daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dae:	4798      	blx	r3
 8009db0:	3601      	adds	r6, #1
 8009db2:	e7f2      	b.n	8009d9a <__libc_init_array+0x1e>
 8009db4:	0800e180 	.word	0x0800e180
 8009db8:	0800e180 	.word	0x0800e180
 8009dbc:	0800e180 	.word	0x0800e180
 8009dc0:	0800e184 	.word	0x0800e184

08009dc4 <__retarget_lock_init_recursive>:
 8009dc4:	4770      	bx	lr

08009dc6 <__retarget_lock_acquire_recursive>:
 8009dc6:	4770      	bx	lr

08009dc8 <__retarget_lock_release_recursive>:
 8009dc8:	4770      	bx	lr

08009dca <memcpy>:
 8009dca:	440a      	add	r2, r1
 8009dcc:	4291      	cmp	r1, r2
 8009dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dd2:	d100      	bne.n	8009dd6 <memcpy+0xc>
 8009dd4:	4770      	bx	lr
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009de0:	4291      	cmp	r1, r2
 8009de2:	d1f9      	bne.n	8009dd8 <memcpy+0xe>
 8009de4:	bd10      	pop	{r4, pc}

08009de6 <quorem>:
 8009de6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dea:	6903      	ldr	r3, [r0, #16]
 8009dec:	690c      	ldr	r4, [r1, #16]
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	4607      	mov	r7, r0
 8009df2:	db7e      	blt.n	8009ef2 <quorem+0x10c>
 8009df4:	3c01      	subs	r4, #1
 8009df6:	f101 0814 	add.w	r8, r1, #20
 8009dfa:	f100 0514 	add.w	r5, r0, #20
 8009dfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e18:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e1c:	d331      	bcc.n	8009e82 <quorem+0x9c>
 8009e1e:	f04f 0e00 	mov.w	lr, #0
 8009e22:	4640      	mov	r0, r8
 8009e24:	46ac      	mov	ip, r5
 8009e26:	46f2      	mov	sl, lr
 8009e28:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e2c:	b293      	uxth	r3, r2
 8009e2e:	fb06 e303 	mla	r3, r6, r3, lr
 8009e32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e36:	0c1a      	lsrs	r2, r3, #16
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	ebaa 0303 	sub.w	r3, sl, r3
 8009e3e:	f8dc a000 	ldr.w	sl, [ip]
 8009e42:	fa13 f38a 	uxtah	r3, r3, sl
 8009e46:	fb06 220e 	mla	r2, r6, lr, r2
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e52:	b292      	uxth	r2, r2
 8009e54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e60:	4581      	cmp	r9, r0
 8009e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e66:	f84c 3b04 	str.w	r3, [ip], #4
 8009e6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e6e:	d2db      	bcs.n	8009e28 <quorem+0x42>
 8009e70:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e74:	b92b      	cbnz	r3, 8009e82 <quorem+0x9c>
 8009e76:	9b01      	ldr	r3, [sp, #4]
 8009e78:	3b04      	subs	r3, #4
 8009e7a:	429d      	cmp	r5, r3
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	d32c      	bcc.n	8009eda <quorem+0xf4>
 8009e80:	613c      	str	r4, [r7, #16]
 8009e82:	4638      	mov	r0, r7
 8009e84:	f001 f920 	bl	800b0c8 <__mcmp>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	db22      	blt.n	8009ed2 <quorem+0xec>
 8009e8c:	3601      	adds	r6, #1
 8009e8e:	4629      	mov	r1, r5
 8009e90:	2000      	movs	r0, #0
 8009e92:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e96:	f8d1 c000 	ldr.w	ip, [r1]
 8009e9a:	b293      	uxth	r3, r2
 8009e9c:	1ac3      	subs	r3, r0, r3
 8009e9e:	0c12      	lsrs	r2, r2, #16
 8009ea0:	fa13 f38c 	uxtah	r3, r3, ip
 8009ea4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009ea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb2:	45c1      	cmp	r9, r8
 8009eb4:	f841 3b04 	str.w	r3, [r1], #4
 8009eb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ebc:	d2e9      	bcs.n	8009e92 <quorem+0xac>
 8009ebe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ec6:	b922      	cbnz	r2, 8009ed2 <quorem+0xec>
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	d30a      	bcc.n	8009ee6 <quorem+0x100>
 8009ed0:	613c      	str	r4, [r7, #16]
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	b003      	add	sp, #12
 8009ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	3b04      	subs	r3, #4
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	d1ce      	bne.n	8009e80 <quorem+0x9a>
 8009ee2:	3c01      	subs	r4, #1
 8009ee4:	e7c9      	b.n	8009e7a <quorem+0x94>
 8009ee6:	6812      	ldr	r2, [r2, #0]
 8009ee8:	3b04      	subs	r3, #4
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	d1f0      	bne.n	8009ed0 <quorem+0xea>
 8009eee:	3c01      	subs	r4, #1
 8009ef0:	e7eb      	b.n	8009eca <quorem+0xe4>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e7ee      	b.n	8009ed4 <quorem+0xee>
	...

08009ef8 <_dtoa_r>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	ed2d 8b02 	vpush	{d8}
 8009f00:	69c5      	ldr	r5, [r0, #28]
 8009f02:	b091      	sub	sp, #68	; 0x44
 8009f04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009f08:	ec59 8b10 	vmov	r8, r9, d0
 8009f0c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009f0e:	9106      	str	r1, [sp, #24]
 8009f10:	4606      	mov	r6, r0
 8009f12:	9208      	str	r2, [sp, #32]
 8009f14:	930c      	str	r3, [sp, #48]	; 0x30
 8009f16:	b975      	cbnz	r5, 8009f36 <_dtoa_r+0x3e>
 8009f18:	2010      	movs	r0, #16
 8009f1a:	f000 fda5 	bl	800aa68 <malloc>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	61f0      	str	r0, [r6, #28]
 8009f22:	b920      	cbnz	r0, 8009f2e <_dtoa_r+0x36>
 8009f24:	4ba6      	ldr	r3, [pc, #664]	; (800a1c0 <_dtoa_r+0x2c8>)
 8009f26:	21ef      	movs	r1, #239	; 0xef
 8009f28:	48a6      	ldr	r0, [pc, #664]	; (800a1c4 <_dtoa_r+0x2cc>)
 8009f2a:	f001 fbfd 	bl	800b728 <__assert_func>
 8009f2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f32:	6005      	str	r5, [r0, #0]
 8009f34:	60c5      	str	r5, [r0, #12]
 8009f36:	69f3      	ldr	r3, [r6, #28]
 8009f38:	6819      	ldr	r1, [r3, #0]
 8009f3a:	b151      	cbz	r1, 8009f52 <_dtoa_r+0x5a>
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	604a      	str	r2, [r1, #4]
 8009f40:	2301      	movs	r3, #1
 8009f42:	4093      	lsls	r3, r2
 8009f44:	608b      	str	r3, [r1, #8]
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 fe82 	bl	800ac50 <_Bfree>
 8009f4c:	69f3      	ldr	r3, [r6, #28]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	f1b9 0300 	subs.w	r3, r9, #0
 8009f56:	bfbb      	ittet	lt
 8009f58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f5c:	9303      	strlt	r3, [sp, #12]
 8009f5e:	2300      	movge	r3, #0
 8009f60:	2201      	movlt	r2, #1
 8009f62:	bfac      	ite	ge
 8009f64:	6023      	strge	r3, [r4, #0]
 8009f66:	6022      	strlt	r2, [r4, #0]
 8009f68:	4b97      	ldr	r3, [pc, #604]	; (800a1c8 <_dtoa_r+0x2d0>)
 8009f6a:	9c03      	ldr	r4, [sp, #12]
 8009f6c:	43a3      	bics	r3, r4
 8009f6e:	d11c      	bne.n	8009faa <_dtoa_r+0xb2>
 8009f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f72:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009f7c:	ea53 0308 	orrs.w	r3, r3, r8
 8009f80:	f000 84fb 	beq.w	800a97a <_dtoa_r+0xa82>
 8009f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f86:	b963      	cbnz	r3, 8009fa2 <_dtoa_r+0xaa>
 8009f88:	4b90      	ldr	r3, [pc, #576]	; (800a1cc <_dtoa_r+0x2d4>)
 8009f8a:	e020      	b.n	8009fce <_dtoa_r+0xd6>
 8009f8c:	4b90      	ldr	r3, [pc, #576]	; (800a1d0 <_dtoa_r+0x2d8>)
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	3308      	adds	r3, #8
 8009f92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	9801      	ldr	r0, [sp, #4]
 8009f98:	b011      	add	sp, #68	; 0x44
 8009f9a:	ecbd 8b02 	vpop	{d8}
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	4b8a      	ldr	r3, [pc, #552]	; (800a1cc <_dtoa_r+0x2d4>)
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	3303      	adds	r3, #3
 8009fa8:	e7f3      	b.n	8009f92 <_dtoa_r+0x9a>
 8009faa:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009fae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb6:	d10c      	bne.n	8009fd2 <_dtoa_r+0xda>
 8009fb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fba:	2301      	movs	r3, #1
 8009fbc:	6013      	str	r3, [r2, #0]
 8009fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 84d7 	beq.w	800a974 <_dtoa_r+0xa7c>
 8009fc6:	4b83      	ldr	r3, [pc, #524]	; (800a1d4 <_dtoa_r+0x2dc>)
 8009fc8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	e7e1      	b.n	8009f96 <_dtoa_r+0x9e>
 8009fd2:	aa0e      	add	r2, sp, #56	; 0x38
 8009fd4:	a90f      	add	r1, sp, #60	; 0x3c
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	eeb0 0b48 	vmov.f64	d0, d8
 8009fdc:	f001 f91a 	bl	800b214 <__d2b>
 8009fe0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8009fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d046      	beq.n	800a07a <_dtoa_r+0x182>
 8009fec:	eeb0 7b48 	vmov.f64	d7, d8
 8009ff0:	ee18 1a90 	vmov	r1, s17
 8009ff4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009ff8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009ffc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a000:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a004:	2000      	movs	r0, #0
 800a006:	ee07 1a90 	vmov	s15, r1
 800a00a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a00e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a1a8 <_dtoa_r+0x2b0>
 800a012:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a016:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a1b0 <_dtoa_r+0x2b8>
 800a01a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a01e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a1b8 <_dtoa_r+0x2c0>
 800a022:	ee07 3a90 	vmov	s15, r3
 800a026:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a02a:	eeb0 7b46 	vmov.f64	d7, d6
 800a02e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a032:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a036:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03e:	ee16 ba90 	vmov	fp, s13
 800a042:	9009      	str	r0, [sp, #36]	; 0x24
 800a044:	d508      	bpl.n	800a058 <_dtoa_r+0x160>
 800a046:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a04a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	bf18      	it	ne
 800a054:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a058:	f1bb 0f16 	cmp.w	fp, #22
 800a05c:	d82b      	bhi.n	800a0b6 <_dtoa_r+0x1be>
 800a05e:	495e      	ldr	r1, [pc, #376]	; (800a1d8 <_dtoa_r+0x2e0>)
 800a060:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a064:	ed91 7b00 	vldr	d7, [r1]
 800a068:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a070:	d501      	bpl.n	800a076 <_dtoa_r+0x17e>
 800a072:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a076:	2100      	movs	r1, #0
 800a078:	e01e      	b.n	800a0b8 <_dtoa_r+0x1c0>
 800a07a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a07c:	4413      	add	r3, r2
 800a07e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a082:	2920      	cmp	r1, #32
 800a084:	bfc1      	itttt	gt
 800a086:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a08a:	408c      	lslgt	r4, r1
 800a08c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a090:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a094:	bfd6      	itet	le
 800a096:	f1c1 0120 	rsble	r1, r1, #32
 800a09a:	4321      	orrgt	r1, r4
 800a09c:	fa08 f101 	lslle.w	r1, r8, r1
 800a0a0:	ee07 1a90 	vmov	s15, r1
 800a0a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	ee17 1a90 	vmov	r1, s15
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a0b4:	e7a7      	b.n	800a006 <_dtoa_r+0x10e>
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	1ad2      	subs	r2, r2, r3
 800a0ba:	1e53      	subs	r3, r2, #1
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	bf45      	ittet	mi
 800a0c0:	f1c2 0301 	rsbmi	r3, r2, #1
 800a0c4:	9304      	strmi	r3, [sp, #16]
 800a0c6:	2300      	movpl	r3, #0
 800a0c8:	2300      	movmi	r3, #0
 800a0ca:	bf4c      	ite	mi
 800a0cc:	9305      	strmi	r3, [sp, #20]
 800a0ce:	9304      	strpl	r3, [sp, #16]
 800a0d0:	f1bb 0f00 	cmp.w	fp, #0
 800a0d4:	910b      	str	r1, [sp, #44]	; 0x2c
 800a0d6:	db18      	blt.n	800a10a <_dtoa_r+0x212>
 800a0d8:	9b05      	ldr	r3, [sp, #20]
 800a0da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a0de:	445b      	add	r3, fp
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9a06      	ldr	r2, [sp, #24]
 800a0e6:	2a09      	cmp	r2, #9
 800a0e8:	d848      	bhi.n	800a17c <_dtoa_r+0x284>
 800a0ea:	2a05      	cmp	r2, #5
 800a0ec:	bfc4      	itt	gt
 800a0ee:	3a04      	subgt	r2, #4
 800a0f0:	9206      	strgt	r2, [sp, #24]
 800a0f2:	9a06      	ldr	r2, [sp, #24]
 800a0f4:	f1a2 0202 	sub.w	r2, r2, #2
 800a0f8:	bfcc      	ite	gt
 800a0fa:	2400      	movgt	r4, #0
 800a0fc:	2401      	movle	r4, #1
 800a0fe:	2a03      	cmp	r2, #3
 800a100:	d847      	bhi.n	800a192 <_dtoa_r+0x29a>
 800a102:	e8df f002 	tbb	[pc, r2]
 800a106:	2d0b      	.short	0x2d0b
 800a108:	392b      	.short	0x392b
 800a10a:	9b04      	ldr	r3, [sp, #16]
 800a10c:	2200      	movs	r2, #0
 800a10e:	eba3 030b 	sub.w	r3, r3, fp
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	920a      	str	r2, [sp, #40]	; 0x28
 800a116:	f1cb 0300 	rsb	r3, fp, #0
 800a11a:	e7e3      	b.n	800a0e4 <_dtoa_r+0x1ec>
 800a11c:	2200      	movs	r2, #0
 800a11e:	9207      	str	r2, [sp, #28]
 800a120:	9a08      	ldr	r2, [sp, #32]
 800a122:	2a00      	cmp	r2, #0
 800a124:	dc38      	bgt.n	800a198 <_dtoa_r+0x2a0>
 800a126:	f04f 0a01 	mov.w	sl, #1
 800a12a:	46d1      	mov	r9, sl
 800a12c:	4652      	mov	r2, sl
 800a12e:	f8cd a020 	str.w	sl, [sp, #32]
 800a132:	69f7      	ldr	r7, [r6, #28]
 800a134:	2100      	movs	r1, #0
 800a136:	2004      	movs	r0, #4
 800a138:	f100 0c14 	add.w	ip, r0, #20
 800a13c:	4594      	cmp	ip, r2
 800a13e:	d930      	bls.n	800a1a2 <_dtoa_r+0x2aa>
 800a140:	6079      	str	r1, [r7, #4]
 800a142:	4630      	mov	r0, r6
 800a144:	930d      	str	r3, [sp, #52]	; 0x34
 800a146:	f000 fd43 	bl	800abd0 <_Balloc>
 800a14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a14c:	9001      	str	r0, [sp, #4]
 800a14e:	4602      	mov	r2, r0
 800a150:	2800      	cmp	r0, #0
 800a152:	d145      	bne.n	800a1e0 <_dtoa_r+0x2e8>
 800a154:	4b21      	ldr	r3, [pc, #132]	; (800a1dc <_dtoa_r+0x2e4>)
 800a156:	f240 11af 	movw	r1, #431	; 0x1af
 800a15a:	e6e5      	b.n	8009f28 <_dtoa_r+0x30>
 800a15c:	2201      	movs	r2, #1
 800a15e:	e7de      	b.n	800a11e <_dtoa_r+0x226>
 800a160:	2200      	movs	r2, #0
 800a162:	9207      	str	r2, [sp, #28]
 800a164:	9a08      	ldr	r2, [sp, #32]
 800a166:	eb0b 0a02 	add.w	sl, fp, r2
 800a16a:	f10a 0901 	add.w	r9, sl, #1
 800a16e:	464a      	mov	r2, r9
 800a170:	2a01      	cmp	r2, #1
 800a172:	bfb8      	it	lt
 800a174:	2201      	movlt	r2, #1
 800a176:	e7dc      	b.n	800a132 <_dtoa_r+0x23a>
 800a178:	2201      	movs	r2, #1
 800a17a:	e7f2      	b.n	800a162 <_dtoa_r+0x26a>
 800a17c:	2401      	movs	r4, #1
 800a17e:	2200      	movs	r2, #0
 800a180:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a184:	f04f 3aff 	mov.w	sl, #4294967295
 800a188:	2100      	movs	r1, #0
 800a18a:	46d1      	mov	r9, sl
 800a18c:	2212      	movs	r2, #18
 800a18e:	9108      	str	r1, [sp, #32]
 800a190:	e7cf      	b.n	800a132 <_dtoa_r+0x23a>
 800a192:	2201      	movs	r2, #1
 800a194:	9207      	str	r2, [sp, #28]
 800a196:	e7f5      	b.n	800a184 <_dtoa_r+0x28c>
 800a198:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a19c:	46d1      	mov	r9, sl
 800a19e:	4652      	mov	r2, sl
 800a1a0:	e7c7      	b.n	800a132 <_dtoa_r+0x23a>
 800a1a2:	3101      	adds	r1, #1
 800a1a4:	0040      	lsls	r0, r0, #1
 800a1a6:	e7c7      	b.n	800a138 <_dtoa_r+0x240>
 800a1a8:	636f4361 	.word	0x636f4361
 800a1ac:	3fd287a7 	.word	0x3fd287a7
 800a1b0:	8b60c8b3 	.word	0x8b60c8b3
 800a1b4:	3fc68a28 	.word	0x3fc68a28
 800a1b8:	509f79fb 	.word	0x509f79fb
 800a1bc:	3fd34413 	.word	0x3fd34413
 800a1c0:	0800c58d 	.word	0x0800c58d
 800a1c4:	0800c5a4 	.word	0x0800c5a4
 800a1c8:	7ff00000 	.word	0x7ff00000
 800a1cc:	0800c589 	.word	0x0800c589
 800a1d0:	0800c580 	.word	0x0800c580
 800a1d4:	0800c55d 	.word	0x0800c55d
 800a1d8:	0800c690 	.word	0x0800c690
 800a1dc:	0800c5fc 	.word	0x0800c5fc
 800a1e0:	69f2      	ldr	r2, [r6, #28]
 800a1e2:	9901      	ldr	r1, [sp, #4]
 800a1e4:	6011      	str	r1, [r2, #0]
 800a1e6:	f1b9 0f0e 	cmp.w	r9, #14
 800a1ea:	d86c      	bhi.n	800a2c6 <_dtoa_r+0x3ce>
 800a1ec:	2c00      	cmp	r4, #0
 800a1ee:	d06a      	beq.n	800a2c6 <_dtoa_r+0x3ce>
 800a1f0:	f1bb 0f00 	cmp.w	fp, #0
 800a1f4:	f340 80a0 	ble.w	800a338 <_dtoa_r+0x440>
 800a1f8:	4ac1      	ldr	r2, [pc, #772]	; (800a500 <_dtoa_r+0x608>)
 800a1fa:	f00b 010f 	and.w	r1, fp, #15
 800a1fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a202:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a206:	ed92 7b00 	vldr	d7, [r2]
 800a20a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a20e:	f000 8087 	beq.w	800a320 <_dtoa_r+0x428>
 800a212:	49bc      	ldr	r1, [pc, #752]	; (800a504 <_dtoa_r+0x60c>)
 800a214:	ed91 6b08 	vldr	d6, [r1, #32]
 800a218:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a21c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a220:	f002 020f 	and.w	r2, r2, #15
 800a224:	2103      	movs	r1, #3
 800a226:	48b7      	ldr	r0, [pc, #732]	; (800a504 <_dtoa_r+0x60c>)
 800a228:	2a00      	cmp	r2, #0
 800a22a:	d17b      	bne.n	800a324 <_dtoa_r+0x42c>
 800a22c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a230:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a234:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a23a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a23e:	2a00      	cmp	r2, #0
 800a240:	f000 80a0 	beq.w	800a384 <_dtoa_r+0x48c>
 800a244:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a248:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a250:	f140 8098 	bpl.w	800a384 <_dtoa_r+0x48c>
 800a254:	f1b9 0f00 	cmp.w	r9, #0
 800a258:	f000 8094 	beq.w	800a384 <_dtoa_r+0x48c>
 800a25c:	f1ba 0f00 	cmp.w	sl, #0
 800a260:	dd2f      	ble.n	800a2c2 <_dtoa_r+0x3ca>
 800a262:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a266:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a26a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a26e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a272:	3101      	adds	r1, #1
 800a274:	4654      	mov	r4, sl
 800a276:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a27a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a27e:	ee07 1a90 	vmov	s15, r1
 800a282:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a286:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a28a:	ee15 7a90 	vmov	r7, s11
 800a28e:	ec51 0b15 	vmov	r0, r1, d5
 800a292:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a296:	2c00      	cmp	r4, #0
 800a298:	d177      	bne.n	800a38a <_dtoa_r+0x492>
 800a29a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a29e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a2a2:	ec41 0b17 	vmov	d7, r0, r1
 800a2a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ae:	f300 826a 	bgt.w	800a786 <_dtoa_r+0x88e>
 800a2b2:	eeb1 7b47 	vneg.f64	d7, d7
 800a2b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2be:	f100 8260 	bmi.w	800a782 <_dtoa_r+0x88a>
 800a2c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	f2c0 811d 	blt.w	800a508 <_dtoa_r+0x610>
 800a2ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a2d2:	f300 8119 	bgt.w	800a508 <_dtoa_r+0x610>
 800a2d6:	4b8a      	ldr	r3, [pc, #552]	; (800a500 <_dtoa_r+0x608>)
 800a2d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2dc:	ed93 6b00 	vldr	d6, [r3]
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f280 80b7 	bge.w	800a456 <_dtoa_r+0x55e>
 800a2e8:	f1b9 0f00 	cmp.w	r9, #0
 800a2ec:	f300 80b3 	bgt.w	800a456 <_dtoa_r+0x55e>
 800a2f0:	f040 8246 	bne.w	800a780 <_dtoa_r+0x888>
 800a2f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a2f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a300:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a308:	464c      	mov	r4, r9
 800a30a:	464f      	mov	r7, r9
 800a30c:	f280 821c 	bge.w	800a748 <_dtoa_r+0x850>
 800a310:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a314:	2331      	movs	r3, #49	; 0x31
 800a316:	f808 3b01 	strb.w	r3, [r8], #1
 800a31a:	f10b 0b01 	add.w	fp, fp, #1
 800a31e:	e218      	b.n	800a752 <_dtoa_r+0x85a>
 800a320:	2102      	movs	r1, #2
 800a322:	e780      	b.n	800a226 <_dtoa_r+0x32e>
 800a324:	07d4      	lsls	r4, r2, #31
 800a326:	d504      	bpl.n	800a332 <_dtoa_r+0x43a>
 800a328:	ed90 6b00 	vldr	d6, [r0]
 800a32c:	3101      	adds	r1, #1
 800a32e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a332:	1052      	asrs	r2, r2, #1
 800a334:	3008      	adds	r0, #8
 800a336:	e777      	b.n	800a228 <_dtoa_r+0x330>
 800a338:	d022      	beq.n	800a380 <_dtoa_r+0x488>
 800a33a:	f1cb 0200 	rsb	r2, fp, #0
 800a33e:	4970      	ldr	r1, [pc, #448]	; (800a500 <_dtoa_r+0x608>)
 800a340:	f002 000f 	and.w	r0, r2, #15
 800a344:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a348:	ed91 7b00 	vldr	d7, [r1]
 800a34c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a350:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a354:	486b      	ldr	r0, [pc, #428]	; (800a504 <_dtoa_r+0x60c>)
 800a356:	1112      	asrs	r2, r2, #4
 800a358:	2400      	movs	r4, #0
 800a35a:	2102      	movs	r1, #2
 800a35c:	b92a      	cbnz	r2, 800a36a <_dtoa_r+0x472>
 800a35e:	2c00      	cmp	r4, #0
 800a360:	f43f af6a 	beq.w	800a238 <_dtoa_r+0x340>
 800a364:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a368:	e766      	b.n	800a238 <_dtoa_r+0x340>
 800a36a:	07d7      	lsls	r7, r2, #31
 800a36c:	d505      	bpl.n	800a37a <_dtoa_r+0x482>
 800a36e:	ed90 6b00 	vldr	d6, [r0]
 800a372:	3101      	adds	r1, #1
 800a374:	2401      	movs	r4, #1
 800a376:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a37a:	1052      	asrs	r2, r2, #1
 800a37c:	3008      	adds	r0, #8
 800a37e:	e7ed      	b.n	800a35c <_dtoa_r+0x464>
 800a380:	2102      	movs	r1, #2
 800a382:	e759      	b.n	800a238 <_dtoa_r+0x340>
 800a384:	465a      	mov	r2, fp
 800a386:	464c      	mov	r4, r9
 800a388:	e775      	b.n	800a276 <_dtoa_r+0x37e>
 800a38a:	ec41 0b17 	vmov	d7, r0, r1
 800a38e:	495c      	ldr	r1, [pc, #368]	; (800a500 <_dtoa_r+0x608>)
 800a390:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a394:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a398:	9901      	ldr	r1, [sp, #4]
 800a39a:	440c      	add	r4, r1
 800a39c:	9907      	ldr	r1, [sp, #28]
 800a39e:	b351      	cbz	r1, 800a3f6 <_dtoa_r+0x4fe>
 800a3a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a3a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a3a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a3b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a3b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a3b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a3bc:	ee14 1a90 	vmov	r1, s9
 800a3c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a3c4:	3130      	adds	r1, #48	; 0x30
 800a3c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a3ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d2:	f808 1b01 	strb.w	r1, [r8], #1
 800a3d6:	d439      	bmi.n	800a44c <_dtoa_r+0x554>
 800a3d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a3dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e4:	d472      	bmi.n	800a4cc <_dtoa_r+0x5d4>
 800a3e6:	45a0      	cmp	r8, r4
 800a3e8:	f43f af6b 	beq.w	800a2c2 <_dtoa_r+0x3ca>
 800a3ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a3f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a3f4:	e7e0      	b.n	800a3b8 <_dtoa_r+0x4c0>
 800a3f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a3fe:	4620      	mov	r0, r4
 800a400:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a404:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a408:	ee14 1a90 	vmov	r1, s9
 800a40c:	3130      	adds	r1, #48	; 0x30
 800a40e:	f808 1b01 	strb.w	r1, [r8], #1
 800a412:	45a0      	cmp	r8, r4
 800a414:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a418:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a41c:	d118      	bne.n	800a450 <_dtoa_r+0x558>
 800a41e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a422:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a426:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42e:	dc4d      	bgt.n	800a4cc <_dtoa_r+0x5d4>
 800a430:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a434:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43c:	f57f af41 	bpl.w	800a2c2 <_dtoa_r+0x3ca>
 800a440:	4680      	mov	r8, r0
 800a442:	3801      	subs	r0, #1
 800a444:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a448:	2b30      	cmp	r3, #48	; 0x30
 800a44a:	d0f9      	beq.n	800a440 <_dtoa_r+0x548>
 800a44c:	4693      	mov	fp, r2
 800a44e:	e02a      	b.n	800a4a6 <_dtoa_r+0x5ae>
 800a450:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a454:	e7d6      	b.n	800a404 <_dtoa_r+0x50c>
 800a456:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a45a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a45e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a462:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a466:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a46a:	ee15 3a10 	vmov	r3, s10
 800a46e:	3330      	adds	r3, #48	; 0x30
 800a470:	f808 3b01 	strb.w	r3, [r8], #1
 800a474:	9b01      	ldr	r3, [sp, #4]
 800a476:	eba8 0303 	sub.w	r3, r8, r3
 800a47a:	4599      	cmp	r9, r3
 800a47c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a480:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a484:	d133      	bne.n	800a4ee <_dtoa_r+0x5f6>
 800a486:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a48a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a492:	dc1a      	bgt.n	800a4ca <_dtoa_r+0x5d2>
 800a494:	eeb4 7b46 	vcmp.f64	d7, d6
 800a498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49c:	d103      	bne.n	800a4a6 <_dtoa_r+0x5ae>
 800a49e:	ee15 3a10 	vmov	r3, s10
 800a4a2:	07d9      	lsls	r1, r3, #31
 800a4a4:	d411      	bmi.n	800a4ca <_dtoa_r+0x5d2>
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f000 fbd1 	bl	800ac50 <_Bfree>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4b2:	f888 3000 	strb.w	r3, [r8]
 800a4b6:	f10b 0301 	add.w	r3, fp, #1
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f43f ad69 	beq.w	8009f96 <_dtoa_r+0x9e>
 800a4c4:	f8c3 8000 	str.w	r8, [r3]
 800a4c8:	e565      	b.n	8009f96 <_dtoa_r+0x9e>
 800a4ca:	465a      	mov	r2, fp
 800a4cc:	4643      	mov	r3, r8
 800a4ce:	4698      	mov	r8, r3
 800a4d0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a4d4:	2939      	cmp	r1, #57	; 0x39
 800a4d6:	d106      	bne.n	800a4e6 <_dtoa_r+0x5ee>
 800a4d8:	9901      	ldr	r1, [sp, #4]
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	d1f7      	bne.n	800a4ce <_dtoa_r+0x5d6>
 800a4de:	9801      	ldr	r0, [sp, #4]
 800a4e0:	2130      	movs	r1, #48	; 0x30
 800a4e2:	3201      	adds	r2, #1
 800a4e4:	7001      	strb	r1, [r0, #0]
 800a4e6:	7819      	ldrb	r1, [r3, #0]
 800a4e8:	3101      	adds	r1, #1
 800a4ea:	7019      	strb	r1, [r3, #0]
 800a4ec:	e7ae      	b.n	800a44c <_dtoa_r+0x554>
 800a4ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fa:	d1b2      	bne.n	800a462 <_dtoa_r+0x56a>
 800a4fc:	e7d3      	b.n	800a4a6 <_dtoa_r+0x5ae>
 800a4fe:	bf00      	nop
 800a500:	0800c690 	.word	0x0800c690
 800a504:	0800c668 	.word	0x0800c668
 800a508:	9907      	ldr	r1, [sp, #28]
 800a50a:	2900      	cmp	r1, #0
 800a50c:	f000 80d0 	beq.w	800a6b0 <_dtoa_r+0x7b8>
 800a510:	9906      	ldr	r1, [sp, #24]
 800a512:	2901      	cmp	r1, #1
 800a514:	f300 80b4 	bgt.w	800a680 <_dtoa_r+0x788>
 800a518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a51a:	2900      	cmp	r1, #0
 800a51c:	f000 80ac 	beq.w	800a678 <_dtoa_r+0x780>
 800a520:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a524:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a528:	461c      	mov	r4, r3
 800a52a:	9309      	str	r3, [sp, #36]	; 0x24
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	4413      	add	r3, r2
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	9b05      	ldr	r3, [sp, #20]
 800a534:	2101      	movs	r1, #1
 800a536:	4413      	add	r3, r2
 800a538:	4630      	mov	r0, r6
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	f000 fc3e 	bl	800adbc <__i2b>
 800a540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a542:	4607      	mov	r7, r0
 800a544:	f1b8 0f00 	cmp.w	r8, #0
 800a548:	d00d      	beq.n	800a566 <_dtoa_r+0x66e>
 800a54a:	9a05      	ldr	r2, [sp, #20]
 800a54c:	2a00      	cmp	r2, #0
 800a54e:	dd0a      	ble.n	800a566 <_dtoa_r+0x66e>
 800a550:	4542      	cmp	r2, r8
 800a552:	9904      	ldr	r1, [sp, #16]
 800a554:	bfa8      	it	ge
 800a556:	4642      	movge	r2, r8
 800a558:	1a89      	subs	r1, r1, r2
 800a55a:	9104      	str	r1, [sp, #16]
 800a55c:	9905      	ldr	r1, [sp, #20]
 800a55e:	eba8 0802 	sub.w	r8, r8, r2
 800a562:	1a8a      	subs	r2, r1, r2
 800a564:	9205      	str	r2, [sp, #20]
 800a566:	b303      	cbz	r3, 800a5aa <_dtoa_r+0x6b2>
 800a568:	9a07      	ldr	r2, [sp, #28]
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	f000 80a5 	beq.w	800a6ba <_dtoa_r+0x7c2>
 800a570:	2c00      	cmp	r4, #0
 800a572:	dd13      	ble.n	800a59c <_dtoa_r+0x6a4>
 800a574:	4639      	mov	r1, r7
 800a576:	4622      	mov	r2, r4
 800a578:	4630      	mov	r0, r6
 800a57a:	930d      	str	r3, [sp, #52]	; 0x34
 800a57c:	f000 fcde 	bl	800af3c <__pow5mult>
 800a580:	462a      	mov	r2, r5
 800a582:	4601      	mov	r1, r0
 800a584:	4607      	mov	r7, r0
 800a586:	4630      	mov	r0, r6
 800a588:	f000 fc2e 	bl	800ade8 <__multiply>
 800a58c:	4629      	mov	r1, r5
 800a58e:	9009      	str	r0, [sp, #36]	; 0x24
 800a590:	4630      	mov	r0, r6
 800a592:	f000 fb5d 	bl	800ac50 <_Bfree>
 800a596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a59a:	4615      	mov	r5, r2
 800a59c:	1b1a      	subs	r2, r3, r4
 800a59e:	d004      	beq.n	800a5aa <_dtoa_r+0x6b2>
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f000 fcca 	bl	800af3c <__pow5mult>
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f000 fc05 	bl	800adbc <__i2b>
 800a5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	f340 8081 	ble.w	800a6be <_dtoa_r+0x7c6>
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4601      	mov	r1, r0
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 fcbb 	bl	800af3c <__pow5mult>
 800a5c6:	9b06      	ldr	r3, [sp, #24]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	dd7a      	ble.n	800a6c4 <_dtoa_r+0x7cc>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d2:	6922      	ldr	r2, [r4, #16]
 800a5d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a5d8:	6910      	ldr	r0, [r2, #16]
 800a5da:	f000 fba1 	bl	800ad20 <__hi0bits>
 800a5de:	f1c0 0020 	rsb	r0, r0, #32
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	4418      	add	r0, r3
 800a5e6:	f010 001f 	ands.w	r0, r0, #31
 800a5ea:	f000 8093 	beq.w	800a714 <_dtoa_r+0x81c>
 800a5ee:	f1c0 0220 	rsb	r2, r0, #32
 800a5f2:	2a04      	cmp	r2, #4
 800a5f4:	f340 8085 	ble.w	800a702 <_dtoa_r+0x80a>
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	f1c0 001c 	rsb	r0, r0, #28
 800a5fe:	4403      	add	r3, r0
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	9b05      	ldr	r3, [sp, #20]
 800a604:	4480      	add	r8, r0
 800a606:	4403      	add	r3, r0
 800a608:	9305      	str	r3, [sp, #20]
 800a60a:	9b04      	ldr	r3, [sp, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd05      	ble.n	800a61c <_dtoa_r+0x724>
 800a610:	4629      	mov	r1, r5
 800a612:	461a      	mov	r2, r3
 800a614:	4630      	mov	r0, r6
 800a616:	f000 fceb 	bl	800aff0 <__lshift>
 800a61a:	4605      	mov	r5, r0
 800a61c:	9b05      	ldr	r3, [sp, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd05      	ble.n	800a62e <_dtoa_r+0x736>
 800a622:	4621      	mov	r1, r4
 800a624:	461a      	mov	r2, r3
 800a626:	4630      	mov	r0, r6
 800a628:	f000 fce2 	bl	800aff0 <__lshift>
 800a62c:	4604      	mov	r4, r0
 800a62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d071      	beq.n	800a718 <_dtoa_r+0x820>
 800a634:	4621      	mov	r1, r4
 800a636:	4628      	mov	r0, r5
 800a638:	f000 fd46 	bl	800b0c8 <__mcmp>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	da6b      	bge.n	800a718 <_dtoa_r+0x820>
 800a640:	2300      	movs	r3, #0
 800a642:	4629      	mov	r1, r5
 800a644:	220a      	movs	r2, #10
 800a646:	4630      	mov	r0, r6
 800a648:	f000 fb24 	bl	800ac94 <__multadd>
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a652:	4605      	mov	r5, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 8197 	beq.w	800a988 <_dtoa_r+0xa90>
 800a65a:	4639      	mov	r1, r7
 800a65c:	2300      	movs	r3, #0
 800a65e:	220a      	movs	r2, #10
 800a660:	4630      	mov	r0, r6
 800a662:	f000 fb17 	bl	800ac94 <__multadd>
 800a666:	f1ba 0f00 	cmp.w	sl, #0
 800a66a:	4607      	mov	r7, r0
 800a66c:	f300 8093 	bgt.w	800a796 <_dtoa_r+0x89e>
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	2b02      	cmp	r3, #2
 800a674:	dc57      	bgt.n	800a726 <_dtoa_r+0x82e>
 800a676:	e08e      	b.n	800a796 <_dtoa_r+0x89e>
 800a678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a67a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a67e:	e751      	b.n	800a524 <_dtoa_r+0x62c>
 800a680:	f109 34ff 	add.w	r4, r9, #4294967295
 800a684:	42a3      	cmp	r3, r4
 800a686:	bfbf      	itttt	lt
 800a688:	1ae2      	sublt	r2, r4, r3
 800a68a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a68c:	189b      	addlt	r3, r3, r2
 800a68e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a690:	bfae      	itee	ge
 800a692:	1b1c      	subge	r4, r3, r4
 800a694:	4623      	movlt	r3, r4
 800a696:	2400      	movlt	r4, #0
 800a698:	f1b9 0f00 	cmp.w	r9, #0
 800a69c:	bfb5      	itete	lt
 800a69e:	9a04      	ldrlt	r2, [sp, #16]
 800a6a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a6a4:	eba2 0809 	sublt.w	r8, r2, r9
 800a6a8:	464a      	movge	r2, r9
 800a6aa:	bfb8      	it	lt
 800a6ac:	2200      	movlt	r2, #0
 800a6ae:	e73c      	b.n	800a52a <_dtoa_r+0x632>
 800a6b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6b4:	9f07      	ldr	r7, [sp, #28]
 800a6b6:	461c      	mov	r4, r3
 800a6b8:	e744      	b.n	800a544 <_dtoa_r+0x64c>
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	e770      	b.n	800a5a0 <_dtoa_r+0x6a8>
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	dc18      	bgt.n	800a6f6 <_dtoa_r+0x7fe>
 800a6c4:	9b02      	ldr	r3, [sp, #8]
 800a6c6:	b9b3      	cbnz	r3, 800a6f6 <_dtoa_r+0x7fe>
 800a6c8:	9b03      	ldr	r3, [sp, #12]
 800a6ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a6ce:	b9a2      	cbnz	r2, 800a6fa <_dtoa_r+0x802>
 800a6d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6d4:	0d12      	lsrs	r2, r2, #20
 800a6d6:	0512      	lsls	r2, r2, #20
 800a6d8:	b18a      	cbz	r2, 800a6fe <_dtoa_r+0x806>
 800a6da:	9b04      	ldr	r3, [sp, #16]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	9b05      	ldr	r3, [sp, #20]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	9305      	str	r3, [sp, #20]
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f47f af70 	bne.w	800a5d2 <_dtoa_r+0x6da>
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	e775      	b.n	800a5e2 <_dtoa_r+0x6ea>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	e7f6      	b.n	800a6e8 <_dtoa_r+0x7f0>
 800a6fa:	9b02      	ldr	r3, [sp, #8]
 800a6fc:	e7f4      	b.n	800a6e8 <_dtoa_r+0x7f0>
 800a6fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a700:	e7f3      	b.n	800a6ea <_dtoa_r+0x7f2>
 800a702:	d082      	beq.n	800a60a <_dtoa_r+0x712>
 800a704:	9b04      	ldr	r3, [sp, #16]
 800a706:	321c      	adds	r2, #28
 800a708:	4413      	add	r3, r2
 800a70a:	9304      	str	r3, [sp, #16]
 800a70c:	9b05      	ldr	r3, [sp, #20]
 800a70e:	4490      	add	r8, r2
 800a710:	4413      	add	r3, r2
 800a712:	e779      	b.n	800a608 <_dtoa_r+0x710>
 800a714:	4602      	mov	r2, r0
 800a716:	e7f5      	b.n	800a704 <_dtoa_r+0x80c>
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	dc36      	bgt.n	800a78c <_dtoa_r+0x894>
 800a71e:	9b06      	ldr	r3, [sp, #24]
 800a720:	2b02      	cmp	r3, #2
 800a722:	dd33      	ble.n	800a78c <_dtoa_r+0x894>
 800a724:	46ca      	mov	sl, r9
 800a726:	f1ba 0f00 	cmp.w	sl, #0
 800a72a:	d10d      	bne.n	800a748 <_dtoa_r+0x850>
 800a72c:	4621      	mov	r1, r4
 800a72e:	4653      	mov	r3, sl
 800a730:	2205      	movs	r2, #5
 800a732:	4630      	mov	r0, r6
 800a734:	f000 faae 	bl	800ac94 <__multadd>
 800a738:	4601      	mov	r1, r0
 800a73a:	4604      	mov	r4, r0
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 fcc3 	bl	800b0c8 <__mcmp>
 800a742:	2800      	cmp	r0, #0
 800a744:	f73f ade4 	bgt.w	800a310 <_dtoa_r+0x418>
 800a748:	9b08      	ldr	r3, [sp, #32]
 800a74a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a74e:	ea6f 0b03 	mvn.w	fp, r3
 800a752:	f04f 0900 	mov.w	r9, #0
 800a756:	4621      	mov	r1, r4
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 fa79 	bl	800ac50 <_Bfree>
 800a75e:	2f00      	cmp	r7, #0
 800a760:	f43f aea1 	beq.w	800a4a6 <_dtoa_r+0x5ae>
 800a764:	f1b9 0f00 	cmp.w	r9, #0
 800a768:	d005      	beq.n	800a776 <_dtoa_r+0x87e>
 800a76a:	45b9      	cmp	r9, r7
 800a76c:	d003      	beq.n	800a776 <_dtoa_r+0x87e>
 800a76e:	4649      	mov	r1, r9
 800a770:	4630      	mov	r0, r6
 800a772:	f000 fa6d 	bl	800ac50 <_Bfree>
 800a776:	4639      	mov	r1, r7
 800a778:	4630      	mov	r0, r6
 800a77a:	f000 fa69 	bl	800ac50 <_Bfree>
 800a77e:	e692      	b.n	800a4a6 <_dtoa_r+0x5ae>
 800a780:	2400      	movs	r4, #0
 800a782:	4627      	mov	r7, r4
 800a784:	e7e0      	b.n	800a748 <_dtoa_r+0x850>
 800a786:	4693      	mov	fp, r2
 800a788:	4627      	mov	r7, r4
 800a78a:	e5c1      	b.n	800a310 <_dtoa_r+0x418>
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	46ca      	mov	sl, r9
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 8100 	beq.w	800a996 <_dtoa_r+0xa9e>
 800a796:	f1b8 0f00 	cmp.w	r8, #0
 800a79a:	dd05      	ble.n	800a7a8 <_dtoa_r+0x8b0>
 800a79c:	4639      	mov	r1, r7
 800a79e:	4642      	mov	r2, r8
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f000 fc25 	bl	800aff0 <__lshift>
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d05d      	beq.n	800a86a <_dtoa_r+0x972>
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 fa0d 	bl	800abd0 <_Balloc>
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	b928      	cbnz	r0, 800a7c6 <_dtoa_r+0x8ce>
 800a7ba:	4b82      	ldr	r3, [pc, #520]	; (800a9c4 <_dtoa_r+0xacc>)
 800a7bc:	4602      	mov	r2, r0
 800a7be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a7c2:	f7ff bbb1 	b.w	8009f28 <_dtoa_r+0x30>
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	3202      	adds	r2, #2
 800a7ca:	0092      	lsls	r2, r2, #2
 800a7cc:	f107 010c 	add.w	r1, r7, #12
 800a7d0:	300c      	adds	r0, #12
 800a7d2:	f7ff fafa 	bl	8009dca <memcpy>
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	4641      	mov	r1, r8
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f000 fc08 	bl	800aff0 <__lshift>
 800a7e0:	9b01      	ldr	r3, [sp, #4]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	9304      	str	r3, [sp, #16]
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	4453      	add	r3, sl
 800a7ea:	9308      	str	r3, [sp, #32]
 800a7ec:	9b02      	ldr	r3, [sp, #8]
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	46b9      	mov	r9, r7
 800a7f4:	9307      	str	r3, [sp, #28]
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	9b04      	ldr	r3, [sp, #16]
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	4628      	mov	r0, r5
 800a800:	9302      	str	r3, [sp, #8]
 800a802:	f7ff faf0 	bl	8009de6 <quorem>
 800a806:	4603      	mov	r3, r0
 800a808:	3330      	adds	r3, #48	; 0x30
 800a80a:	9005      	str	r0, [sp, #20]
 800a80c:	4649      	mov	r1, r9
 800a80e:	4628      	mov	r0, r5
 800a810:	9309      	str	r3, [sp, #36]	; 0x24
 800a812:	f000 fc59 	bl	800b0c8 <__mcmp>
 800a816:	463a      	mov	r2, r7
 800a818:	4682      	mov	sl, r0
 800a81a:	4621      	mov	r1, r4
 800a81c:	4630      	mov	r0, r6
 800a81e:	f000 fc6f 	bl	800b100 <__mdiff>
 800a822:	68c2      	ldr	r2, [r0, #12]
 800a824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a826:	4680      	mov	r8, r0
 800a828:	bb0a      	cbnz	r2, 800a86e <_dtoa_r+0x976>
 800a82a:	4601      	mov	r1, r0
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 fc4b 	bl	800b0c8 <__mcmp>
 800a832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a834:	4602      	mov	r2, r0
 800a836:	4641      	mov	r1, r8
 800a838:	4630      	mov	r0, r6
 800a83a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a83e:	f000 fa07 	bl	800ac50 <_Bfree>
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a846:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a84a:	ea43 0102 	orr.w	r1, r3, r2
 800a84e:	9b07      	ldr	r3, [sp, #28]
 800a850:	4319      	orrs	r1, r3
 800a852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a854:	d10d      	bne.n	800a872 <_dtoa_r+0x97a>
 800a856:	2b39      	cmp	r3, #57	; 0x39
 800a858:	d029      	beq.n	800a8ae <_dtoa_r+0x9b6>
 800a85a:	f1ba 0f00 	cmp.w	sl, #0
 800a85e:	dd01      	ble.n	800a864 <_dtoa_r+0x96c>
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	3331      	adds	r3, #49	; 0x31
 800a864:	9a02      	ldr	r2, [sp, #8]
 800a866:	7013      	strb	r3, [r2, #0]
 800a868:	e775      	b.n	800a756 <_dtoa_r+0x85e>
 800a86a:	4638      	mov	r0, r7
 800a86c:	e7b8      	b.n	800a7e0 <_dtoa_r+0x8e8>
 800a86e:	2201      	movs	r2, #1
 800a870:	e7e1      	b.n	800a836 <_dtoa_r+0x93e>
 800a872:	f1ba 0f00 	cmp.w	sl, #0
 800a876:	db06      	blt.n	800a886 <_dtoa_r+0x98e>
 800a878:	9906      	ldr	r1, [sp, #24]
 800a87a:	ea41 0a0a 	orr.w	sl, r1, sl
 800a87e:	9907      	ldr	r1, [sp, #28]
 800a880:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a884:	d120      	bne.n	800a8c8 <_dtoa_r+0x9d0>
 800a886:	2a00      	cmp	r2, #0
 800a888:	ddec      	ble.n	800a864 <_dtoa_r+0x96c>
 800a88a:	4629      	mov	r1, r5
 800a88c:	2201      	movs	r2, #1
 800a88e:	4630      	mov	r0, r6
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	f000 fbad 	bl	800aff0 <__lshift>
 800a896:	4621      	mov	r1, r4
 800a898:	4605      	mov	r5, r0
 800a89a:	f000 fc15 	bl	800b0c8 <__mcmp>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	9b04      	ldr	r3, [sp, #16]
 800a8a2:	dc02      	bgt.n	800a8aa <_dtoa_r+0x9b2>
 800a8a4:	d1de      	bne.n	800a864 <_dtoa_r+0x96c>
 800a8a6:	07da      	lsls	r2, r3, #31
 800a8a8:	d5dc      	bpl.n	800a864 <_dtoa_r+0x96c>
 800a8aa:	2b39      	cmp	r3, #57	; 0x39
 800a8ac:	d1d8      	bne.n	800a860 <_dtoa_r+0x968>
 800a8ae:	9a02      	ldr	r2, [sp, #8]
 800a8b0:	2339      	movs	r3, #57	; 0x39
 800a8b2:	7013      	strb	r3, [r2, #0]
 800a8b4:	4643      	mov	r3, r8
 800a8b6:	4698      	mov	r8, r3
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a8be:	2a39      	cmp	r2, #57	; 0x39
 800a8c0:	d051      	beq.n	800a966 <_dtoa_r+0xa6e>
 800a8c2:	3201      	adds	r2, #1
 800a8c4:	701a      	strb	r2, [r3, #0]
 800a8c6:	e746      	b.n	800a756 <_dtoa_r+0x85e>
 800a8c8:	2a00      	cmp	r2, #0
 800a8ca:	dd03      	ble.n	800a8d4 <_dtoa_r+0x9dc>
 800a8cc:	2b39      	cmp	r3, #57	; 0x39
 800a8ce:	d0ee      	beq.n	800a8ae <_dtoa_r+0x9b6>
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	e7c7      	b.n	800a864 <_dtoa_r+0x96c>
 800a8d4:	9a04      	ldr	r2, [sp, #16]
 800a8d6:	9908      	ldr	r1, [sp, #32]
 800a8d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a8dc:	428a      	cmp	r2, r1
 800a8de:	d02b      	beq.n	800a938 <_dtoa_r+0xa40>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	220a      	movs	r2, #10
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f000 f9d4 	bl	800ac94 <__multadd>
 800a8ec:	45b9      	cmp	r9, r7
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	f04f 020a 	mov.w	r2, #10
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	d107      	bne.n	800a90e <_dtoa_r+0xa16>
 800a8fe:	f000 f9c9 	bl	800ac94 <__multadd>
 800a902:	4681      	mov	r9, r0
 800a904:	4607      	mov	r7, r0
 800a906:	9b04      	ldr	r3, [sp, #16]
 800a908:	3301      	adds	r3, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	e774      	b.n	800a7f8 <_dtoa_r+0x900>
 800a90e:	f000 f9c1 	bl	800ac94 <__multadd>
 800a912:	4639      	mov	r1, r7
 800a914:	4681      	mov	r9, r0
 800a916:	2300      	movs	r3, #0
 800a918:	220a      	movs	r2, #10
 800a91a:	4630      	mov	r0, r6
 800a91c:	f000 f9ba 	bl	800ac94 <__multadd>
 800a920:	4607      	mov	r7, r0
 800a922:	e7f0      	b.n	800a906 <_dtoa_r+0xa0e>
 800a924:	f1ba 0f00 	cmp.w	sl, #0
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	bfcc      	ite	gt
 800a92c:	46d0      	movgt	r8, sl
 800a92e:	f04f 0801 	movle.w	r8, #1
 800a932:	4490      	add	r8, r2
 800a934:	f04f 0900 	mov.w	r9, #0
 800a938:	4629      	mov	r1, r5
 800a93a:	2201      	movs	r2, #1
 800a93c:	4630      	mov	r0, r6
 800a93e:	9302      	str	r3, [sp, #8]
 800a940:	f000 fb56 	bl	800aff0 <__lshift>
 800a944:	4621      	mov	r1, r4
 800a946:	4605      	mov	r5, r0
 800a948:	f000 fbbe 	bl	800b0c8 <__mcmp>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	dcb1      	bgt.n	800a8b4 <_dtoa_r+0x9bc>
 800a950:	d102      	bne.n	800a958 <_dtoa_r+0xa60>
 800a952:	9b02      	ldr	r3, [sp, #8]
 800a954:	07db      	lsls	r3, r3, #31
 800a956:	d4ad      	bmi.n	800a8b4 <_dtoa_r+0x9bc>
 800a958:	4643      	mov	r3, r8
 800a95a:	4698      	mov	r8, r3
 800a95c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a960:	2a30      	cmp	r2, #48	; 0x30
 800a962:	d0fa      	beq.n	800a95a <_dtoa_r+0xa62>
 800a964:	e6f7      	b.n	800a756 <_dtoa_r+0x85e>
 800a966:	9a01      	ldr	r2, [sp, #4]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d1a4      	bne.n	800a8b6 <_dtoa_r+0x9be>
 800a96c:	f10b 0b01 	add.w	fp, fp, #1
 800a970:	2331      	movs	r3, #49	; 0x31
 800a972:	e778      	b.n	800a866 <_dtoa_r+0x96e>
 800a974:	4b14      	ldr	r3, [pc, #80]	; (800a9c8 <_dtoa_r+0xad0>)
 800a976:	f7ff bb2a 	b.w	8009fce <_dtoa_r+0xd6>
 800a97a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f47f ab05 	bne.w	8009f8c <_dtoa_r+0x94>
 800a982:	4b12      	ldr	r3, [pc, #72]	; (800a9cc <_dtoa_r+0xad4>)
 800a984:	f7ff bb23 	b.w	8009fce <_dtoa_r+0xd6>
 800a988:	f1ba 0f00 	cmp.w	sl, #0
 800a98c:	dc03      	bgt.n	800a996 <_dtoa_r+0xa9e>
 800a98e:	9b06      	ldr	r3, [sp, #24]
 800a990:	2b02      	cmp	r3, #2
 800a992:	f73f aec8 	bgt.w	800a726 <_dtoa_r+0x82e>
 800a996:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	f7ff fa22 	bl	8009de6 <quorem>
 800a9a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a9a6:	f808 3b01 	strb.w	r3, [r8], #1
 800a9aa:	9a01      	ldr	r2, [sp, #4]
 800a9ac:	eba8 0202 	sub.w	r2, r8, r2
 800a9b0:	4592      	cmp	sl, r2
 800a9b2:	ddb7      	ble.n	800a924 <_dtoa_r+0xa2c>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	220a      	movs	r2, #10
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 f96a 	bl	800ac94 <__multadd>
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	e7ea      	b.n	800a99a <_dtoa_r+0xaa2>
 800a9c4:	0800c5fc 	.word	0x0800c5fc
 800a9c8:	0800c55c 	.word	0x0800c55c
 800a9cc:	0800c580 	.word	0x0800c580

0800a9d0 <_free_r>:
 800a9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9d2:	2900      	cmp	r1, #0
 800a9d4:	d044      	beq.n	800aa60 <_free_r+0x90>
 800a9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9da:	9001      	str	r0, [sp, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f1a1 0404 	sub.w	r4, r1, #4
 800a9e2:	bfb8      	it	lt
 800a9e4:	18e4      	addlt	r4, r4, r3
 800a9e6:	f000 f8e7 	bl	800abb8 <__malloc_lock>
 800a9ea:	4a1e      	ldr	r2, [pc, #120]	; (800aa64 <_free_r+0x94>)
 800a9ec:	9801      	ldr	r0, [sp, #4]
 800a9ee:	6813      	ldr	r3, [r2, #0]
 800a9f0:	b933      	cbnz	r3, 800aa00 <_free_r+0x30>
 800a9f2:	6063      	str	r3, [r4, #4]
 800a9f4:	6014      	str	r4, [r2, #0]
 800a9f6:	b003      	add	sp, #12
 800a9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9fc:	f000 b8e2 	b.w	800abc4 <__malloc_unlock>
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	d908      	bls.n	800aa16 <_free_r+0x46>
 800aa04:	6825      	ldr	r5, [r4, #0]
 800aa06:	1961      	adds	r1, r4, r5
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf01      	itttt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	1949      	addeq	r1, r1, r5
 800aa12:	6021      	streq	r1, [r4, #0]
 800aa14:	e7ed      	b.n	800a9f2 <_free_r+0x22>
 800aa16:	461a      	mov	r2, r3
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	b10b      	cbz	r3, 800aa20 <_free_r+0x50>
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	d9fa      	bls.n	800aa16 <_free_r+0x46>
 800aa20:	6811      	ldr	r1, [r2, #0]
 800aa22:	1855      	adds	r5, r2, r1
 800aa24:	42a5      	cmp	r5, r4
 800aa26:	d10b      	bne.n	800aa40 <_free_r+0x70>
 800aa28:	6824      	ldr	r4, [r4, #0]
 800aa2a:	4421      	add	r1, r4
 800aa2c:	1854      	adds	r4, r2, r1
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	6011      	str	r1, [r2, #0]
 800aa32:	d1e0      	bne.n	800a9f6 <_free_r+0x26>
 800aa34:	681c      	ldr	r4, [r3, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	6053      	str	r3, [r2, #4]
 800aa3a:	440c      	add	r4, r1
 800aa3c:	6014      	str	r4, [r2, #0]
 800aa3e:	e7da      	b.n	800a9f6 <_free_r+0x26>
 800aa40:	d902      	bls.n	800aa48 <_free_r+0x78>
 800aa42:	230c      	movs	r3, #12
 800aa44:	6003      	str	r3, [r0, #0]
 800aa46:	e7d6      	b.n	800a9f6 <_free_r+0x26>
 800aa48:	6825      	ldr	r5, [r4, #0]
 800aa4a:	1961      	adds	r1, r4, r5
 800aa4c:	428b      	cmp	r3, r1
 800aa4e:	bf04      	itt	eq
 800aa50:	6819      	ldreq	r1, [r3, #0]
 800aa52:	685b      	ldreq	r3, [r3, #4]
 800aa54:	6063      	str	r3, [r4, #4]
 800aa56:	bf04      	itt	eq
 800aa58:	1949      	addeq	r1, r1, r5
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	6054      	str	r4, [r2, #4]
 800aa5e:	e7ca      	b.n	800a9f6 <_free_r+0x26>
 800aa60:	b003      	add	sp, #12
 800aa62:	bd30      	pop	{r4, r5, pc}
 800aa64:	2000545c 	.word	0x2000545c

0800aa68 <malloc>:
 800aa68:	4b02      	ldr	r3, [pc, #8]	; (800aa74 <malloc+0xc>)
 800aa6a:	4601      	mov	r1, r0
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	f000 b823 	b.w	800aab8 <_malloc_r>
 800aa72:	bf00      	nop
 800aa74:	20000074 	.word	0x20000074

0800aa78 <sbrk_aligned>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4e0e      	ldr	r6, [pc, #56]	; (800aab4 <sbrk_aligned+0x3c>)
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	6831      	ldr	r1, [r6, #0]
 800aa80:	4605      	mov	r5, r0
 800aa82:	b911      	cbnz	r1, 800aa8a <sbrk_aligned+0x12>
 800aa84:	f000 fe40 	bl	800b708 <_sbrk_r>
 800aa88:	6030      	str	r0, [r6, #0]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f000 fe3b 	bl	800b708 <_sbrk_r>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d00a      	beq.n	800aaac <sbrk_aligned+0x34>
 800aa96:	1cc4      	adds	r4, r0, #3
 800aa98:	f024 0403 	bic.w	r4, r4, #3
 800aa9c:	42a0      	cmp	r0, r4
 800aa9e:	d007      	beq.n	800aab0 <sbrk_aligned+0x38>
 800aaa0:	1a21      	subs	r1, r4, r0
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 fe30 	bl	800b708 <_sbrk_r>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d101      	bne.n	800aab0 <sbrk_aligned+0x38>
 800aaac:	f04f 34ff 	mov.w	r4, #4294967295
 800aab0:	4620      	mov	r0, r4
 800aab2:	bd70      	pop	{r4, r5, r6, pc}
 800aab4:	20005460 	.word	0x20005460

0800aab8 <_malloc_r>:
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	1ccd      	adds	r5, r1, #3
 800aabe:	f025 0503 	bic.w	r5, r5, #3
 800aac2:	3508      	adds	r5, #8
 800aac4:	2d0c      	cmp	r5, #12
 800aac6:	bf38      	it	cc
 800aac8:	250c      	movcc	r5, #12
 800aaca:	2d00      	cmp	r5, #0
 800aacc:	4607      	mov	r7, r0
 800aace:	db01      	blt.n	800aad4 <_malloc_r+0x1c>
 800aad0:	42a9      	cmp	r1, r5
 800aad2:	d905      	bls.n	800aae0 <_malloc_r+0x28>
 800aad4:	230c      	movs	r3, #12
 800aad6:	603b      	str	r3, [r7, #0]
 800aad8:	2600      	movs	r6, #0
 800aada:	4630      	mov	r0, r6
 800aadc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800abb4 <_malloc_r+0xfc>
 800aae4:	f000 f868 	bl	800abb8 <__malloc_lock>
 800aae8:	f8d8 3000 	ldr.w	r3, [r8]
 800aaec:	461c      	mov	r4, r3
 800aaee:	bb5c      	cbnz	r4, 800ab48 <_malloc_r+0x90>
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7ff ffc0 	bl	800aa78 <sbrk_aligned>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	4604      	mov	r4, r0
 800aafc:	d155      	bne.n	800abaa <_malloc_r+0xf2>
 800aafe:	f8d8 4000 	ldr.w	r4, [r8]
 800ab02:	4626      	mov	r6, r4
 800ab04:	2e00      	cmp	r6, #0
 800ab06:	d145      	bne.n	800ab94 <_malloc_r+0xdc>
 800ab08:	2c00      	cmp	r4, #0
 800ab0a:	d048      	beq.n	800ab9e <_malloc_r+0xe6>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	4631      	mov	r1, r6
 800ab10:	4638      	mov	r0, r7
 800ab12:	eb04 0903 	add.w	r9, r4, r3
 800ab16:	f000 fdf7 	bl	800b708 <_sbrk_r>
 800ab1a:	4581      	cmp	r9, r0
 800ab1c:	d13f      	bne.n	800ab9e <_malloc_r+0xe6>
 800ab1e:	6821      	ldr	r1, [r4, #0]
 800ab20:	1a6d      	subs	r5, r5, r1
 800ab22:	4629      	mov	r1, r5
 800ab24:	4638      	mov	r0, r7
 800ab26:	f7ff ffa7 	bl	800aa78 <sbrk_aligned>
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d037      	beq.n	800ab9e <_malloc_r+0xe6>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	442b      	add	r3, r5
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	f8d8 3000 	ldr.w	r3, [r8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d038      	beq.n	800abae <_malloc_r+0xf6>
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	42a2      	cmp	r2, r4
 800ab40:	d12b      	bne.n	800ab9a <_malloc_r+0xe2>
 800ab42:	2200      	movs	r2, #0
 800ab44:	605a      	str	r2, [r3, #4]
 800ab46:	e00f      	b.n	800ab68 <_malloc_r+0xb0>
 800ab48:	6822      	ldr	r2, [r4, #0]
 800ab4a:	1b52      	subs	r2, r2, r5
 800ab4c:	d41f      	bmi.n	800ab8e <_malloc_r+0xd6>
 800ab4e:	2a0b      	cmp	r2, #11
 800ab50:	d917      	bls.n	800ab82 <_malloc_r+0xca>
 800ab52:	1961      	adds	r1, r4, r5
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	6025      	str	r5, [r4, #0]
 800ab58:	bf18      	it	ne
 800ab5a:	6059      	strne	r1, [r3, #4]
 800ab5c:	6863      	ldr	r3, [r4, #4]
 800ab5e:	bf08      	it	eq
 800ab60:	f8c8 1000 	streq.w	r1, [r8]
 800ab64:	5162      	str	r2, [r4, r5]
 800ab66:	604b      	str	r3, [r1, #4]
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f104 060b 	add.w	r6, r4, #11
 800ab6e:	f000 f829 	bl	800abc4 <__malloc_unlock>
 800ab72:	f026 0607 	bic.w	r6, r6, #7
 800ab76:	1d23      	adds	r3, r4, #4
 800ab78:	1af2      	subs	r2, r6, r3
 800ab7a:	d0ae      	beq.n	800aada <_malloc_r+0x22>
 800ab7c:	1b9b      	subs	r3, r3, r6
 800ab7e:	50a3      	str	r3, [r4, r2]
 800ab80:	e7ab      	b.n	800aada <_malloc_r+0x22>
 800ab82:	42a3      	cmp	r3, r4
 800ab84:	6862      	ldr	r2, [r4, #4]
 800ab86:	d1dd      	bne.n	800ab44 <_malloc_r+0x8c>
 800ab88:	f8c8 2000 	str.w	r2, [r8]
 800ab8c:	e7ec      	b.n	800ab68 <_malloc_r+0xb0>
 800ab8e:	4623      	mov	r3, r4
 800ab90:	6864      	ldr	r4, [r4, #4]
 800ab92:	e7ac      	b.n	800aaee <_malloc_r+0x36>
 800ab94:	4634      	mov	r4, r6
 800ab96:	6876      	ldr	r6, [r6, #4]
 800ab98:	e7b4      	b.n	800ab04 <_malloc_r+0x4c>
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	e7cc      	b.n	800ab38 <_malloc_r+0x80>
 800ab9e:	230c      	movs	r3, #12
 800aba0:	603b      	str	r3, [r7, #0]
 800aba2:	4638      	mov	r0, r7
 800aba4:	f000 f80e 	bl	800abc4 <__malloc_unlock>
 800aba8:	e797      	b.n	800aada <_malloc_r+0x22>
 800abaa:	6025      	str	r5, [r4, #0]
 800abac:	e7dc      	b.n	800ab68 <_malloc_r+0xb0>
 800abae:	605b      	str	r3, [r3, #4]
 800abb0:	deff      	udf	#255	; 0xff
 800abb2:	bf00      	nop
 800abb4:	2000545c 	.word	0x2000545c

0800abb8 <__malloc_lock>:
 800abb8:	4801      	ldr	r0, [pc, #4]	; (800abc0 <__malloc_lock+0x8>)
 800abba:	f7ff b904 	b.w	8009dc6 <__retarget_lock_acquire_recursive>
 800abbe:	bf00      	nop
 800abc0:	20005458 	.word	0x20005458

0800abc4 <__malloc_unlock>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__malloc_unlock+0x8>)
 800abc6:	f7ff b8ff 	b.w	8009dc8 <__retarget_lock_release_recursive>
 800abca:	bf00      	nop
 800abcc:	20005458 	.word	0x20005458

0800abd0 <_Balloc>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	69c6      	ldr	r6, [r0, #28]
 800abd4:	4604      	mov	r4, r0
 800abd6:	460d      	mov	r5, r1
 800abd8:	b976      	cbnz	r6, 800abf8 <_Balloc+0x28>
 800abda:	2010      	movs	r0, #16
 800abdc:	f7ff ff44 	bl	800aa68 <malloc>
 800abe0:	4602      	mov	r2, r0
 800abe2:	61e0      	str	r0, [r4, #28]
 800abe4:	b920      	cbnz	r0, 800abf0 <_Balloc+0x20>
 800abe6:	4b18      	ldr	r3, [pc, #96]	; (800ac48 <_Balloc+0x78>)
 800abe8:	4818      	ldr	r0, [pc, #96]	; (800ac4c <_Balloc+0x7c>)
 800abea:	216b      	movs	r1, #107	; 0x6b
 800abec:	f000 fd9c 	bl	800b728 <__assert_func>
 800abf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abf4:	6006      	str	r6, [r0, #0]
 800abf6:	60c6      	str	r6, [r0, #12]
 800abf8:	69e6      	ldr	r6, [r4, #28]
 800abfa:	68f3      	ldr	r3, [r6, #12]
 800abfc:	b183      	cbz	r3, 800ac20 <_Balloc+0x50>
 800abfe:	69e3      	ldr	r3, [r4, #28]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac06:	b9b8      	cbnz	r0, 800ac38 <_Balloc+0x68>
 800ac08:	2101      	movs	r1, #1
 800ac0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac0e:	1d72      	adds	r2, r6, #5
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fda6 	bl	800b764 <_calloc_r>
 800ac18:	b160      	cbz	r0, 800ac34 <_Balloc+0x64>
 800ac1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac1e:	e00e      	b.n	800ac3e <_Balloc+0x6e>
 800ac20:	2221      	movs	r2, #33	; 0x21
 800ac22:	2104      	movs	r1, #4
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 fd9d 	bl	800b764 <_calloc_r>
 800ac2a:	69e3      	ldr	r3, [r4, #28]
 800ac2c:	60f0      	str	r0, [r6, #12]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e4      	bne.n	800abfe <_Balloc+0x2e>
 800ac34:	2000      	movs	r0, #0
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	6802      	ldr	r2, [r0, #0]
 800ac3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac44:	e7f7      	b.n	800ac36 <_Balloc+0x66>
 800ac46:	bf00      	nop
 800ac48:	0800c58d 	.word	0x0800c58d
 800ac4c:	0800c60d 	.word	0x0800c60d

0800ac50 <_Bfree>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	69c6      	ldr	r6, [r0, #28]
 800ac54:	4605      	mov	r5, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	b976      	cbnz	r6, 800ac78 <_Bfree+0x28>
 800ac5a:	2010      	movs	r0, #16
 800ac5c:	f7ff ff04 	bl	800aa68 <malloc>
 800ac60:	4602      	mov	r2, r0
 800ac62:	61e8      	str	r0, [r5, #28]
 800ac64:	b920      	cbnz	r0, 800ac70 <_Bfree+0x20>
 800ac66:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <_Bfree+0x3c>)
 800ac68:	4809      	ldr	r0, [pc, #36]	; (800ac90 <_Bfree+0x40>)
 800ac6a:	218f      	movs	r1, #143	; 0x8f
 800ac6c:	f000 fd5c 	bl	800b728 <__assert_func>
 800ac70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac74:	6006      	str	r6, [r0, #0]
 800ac76:	60c6      	str	r6, [r0, #12]
 800ac78:	b13c      	cbz	r4, 800ac8a <_Bfree+0x3a>
 800ac7a:	69eb      	ldr	r3, [r5, #28]
 800ac7c:	6862      	ldr	r2, [r4, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac84:	6021      	str	r1, [r4, #0]
 800ac86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	0800c58d 	.word	0x0800c58d
 800ac90:	0800c60d 	.word	0x0800c60d

0800ac94 <__multadd>:
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	690d      	ldr	r5, [r1, #16]
 800ac9a:	4607      	mov	r7, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	461e      	mov	r6, r3
 800aca0:	f101 0c14 	add.w	ip, r1, #20
 800aca4:	2000      	movs	r0, #0
 800aca6:	f8dc 3000 	ldr.w	r3, [ip]
 800acaa:	b299      	uxth	r1, r3
 800acac:	fb02 6101 	mla	r1, r2, r1, r6
 800acb0:	0c1e      	lsrs	r6, r3, #16
 800acb2:	0c0b      	lsrs	r3, r1, #16
 800acb4:	fb02 3306 	mla	r3, r2, r6, r3
 800acb8:	b289      	uxth	r1, r1
 800acba:	3001      	adds	r0, #1
 800acbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acc0:	4285      	cmp	r5, r0
 800acc2:	f84c 1b04 	str.w	r1, [ip], #4
 800acc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acca:	dcec      	bgt.n	800aca6 <__multadd+0x12>
 800accc:	b30e      	cbz	r6, 800ad12 <__multadd+0x7e>
 800acce:	68a3      	ldr	r3, [r4, #8]
 800acd0:	42ab      	cmp	r3, r5
 800acd2:	dc19      	bgt.n	800ad08 <__multadd+0x74>
 800acd4:	6861      	ldr	r1, [r4, #4]
 800acd6:	4638      	mov	r0, r7
 800acd8:	3101      	adds	r1, #1
 800acda:	f7ff ff79 	bl	800abd0 <_Balloc>
 800acde:	4680      	mov	r8, r0
 800ace0:	b928      	cbnz	r0, 800acee <__multadd+0x5a>
 800ace2:	4602      	mov	r2, r0
 800ace4:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <__multadd+0x84>)
 800ace6:	480d      	ldr	r0, [pc, #52]	; (800ad1c <__multadd+0x88>)
 800ace8:	21ba      	movs	r1, #186	; 0xba
 800acea:	f000 fd1d 	bl	800b728 <__assert_func>
 800acee:	6922      	ldr	r2, [r4, #16]
 800acf0:	3202      	adds	r2, #2
 800acf2:	f104 010c 	add.w	r1, r4, #12
 800acf6:	0092      	lsls	r2, r2, #2
 800acf8:	300c      	adds	r0, #12
 800acfa:	f7ff f866 	bl	8009dca <memcpy>
 800acfe:	4621      	mov	r1, r4
 800ad00:	4638      	mov	r0, r7
 800ad02:	f7ff ffa5 	bl	800ac50 <_Bfree>
 800ad06:	4644      	mov	r4, r8
 800ad08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad0c:	3501      	adds	r5, #1
 800ad0e:	615e      	str	r6, [r3, #20]
 800ad10:	6125      	str	r5, [r4, #16]
 800ad12:	4620      	mov	r0, r4
 800ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad18:	0800c5fc 	.word	0x0800c5fc
 800ad1c:	0800c60d 	.word	0x0800c60d

0800ad20 <__hi0bits>:
 800ad20:	0c03      	lsrs	r3, r0, #16
 800ad22:	041b      	lsls	r3, r3, #16
 800ad24:	b9d3      	cbnz	r3, 800ad5c <__hi0bits+0x3c>
 800ad26:	0400      	lsls	r0, r0, #16
 800ad28:	2310      	movs	r3, #16
 800ad2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad2e:	bf04      	itt	eq
 800ad30:	0200      	lsleq	r0, r0, #8
 800ad32:	3308      	addeq	r3, #8
 800ad34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad38:	bf04      	itt	eq
 800ad3a:	0100      	lsleq	r0, r0, #4
 800ad3c:	3304      	addeq	r3, #4
 800ad3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad42:	bf04      	itt	eq
 800ad44:	0080      	lsleq	r0, r0, #2
 800ad46:	3302      	addeq	r3, #2
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	db05      	blt.n	800ad58 <__hi0bits+0x38>
 800ad4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad50:	f103 0301 	add.w	r3, r3, #1
 800ad54:	bf08      	it	eq
 800ad56:	2320      	moveq	r3, #32
 800ad58:	4618      	mov	r0, r3
 800ad5a:	4770      	bx	lr
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e7e4      	b.n	800ad2a <__hi0bits+0xa>

0800ad60 <__lo0bits>:
 800ad60:	6803      	ldr	r3, [r0, #0]
 800ad62:	f013 0207 	ands.w	r2, r3, #7
 800ad66:	d00c      	beq.n	800ad82 <__lo0bits+0x22>
 800ad68:	07d9      	lsls	r1, r3, #31
 800ad6a:	d422      	bmi.n	800adb2 <__lo0bits+0x52>
 800ad6c:	079a      	lsls	r2, r3, #30
 800ad6e:	bf49      	itett	mi
 800ad70:	085b      	lsrmi	r3, r3, #1
 800ad72:	089b      	lsrpl	r3, r3, #2
 800ad74:	6003      	strmi	r3, [r0, #0]
 800ad76:	2201      	movmi	r2, #1
 800ad78:	bf5c      	itt	pl
 800ad7a:	6003      	strpl	r3, [r0, #0]
 800ad7c:	2202      	movpl	r2, #2
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4770      	bx	lr
 800ad82:	b299      	uxth	r1, r3
 800ad84:	b909      	cbnz	r1, 800ad8a <__lo0bits+0x2a>
 800ad86:	0c1b      	lsrs	r3, r3, #16
 800ad88:	2210      	movs	r2, #16
 800ad8a:	b2d9      	uxtb	r1, r3
 800ad8c:	b909      	cbnz	r1, 800ad92 <__lo0bits+0x32>
 800ad8e:	3208      	adds	r2, #8
 800ad90:	0a1b      	lsrs	r3, r3, #8
 800ad92:	0719      	lsls	r1, r3, #28
 800ad94:	bf04      	itt	eq
 800ad96:	091b      	lsreq	r3, r3, #4
 800ad98:	3204      	addeq	r2, #4
 800ad9a:	0799      	lsls	r1, r3, #30
 800ad9c:	bf04      	itt	eq
 800ad9e:	089b      	lsreq	r3, r3, #2
 800ada0:	3202      	addeq	r2, #2
 800ada2:	07d9      	lsls	r1, r3, #31
 800ada4:	d403      	bmi.n	800adae <__lo0bits+0x4e>
 800ada6:	085b      	lsrs	r3, r3, #1
 800ada8:	f102 0201 	add.w	r2, r2, #1
 800adac:	d003      	beq.n	800adb6 <__lo0bits+0x56>
 800adae:	6003      	str	r3, [r0, #0]
 800adb0:	e7e5      	b.n	800ad7e <__lo0bits+0x1e>
 800adb2:	2200      	movs	r2, #0
 800adb4:	e7e3      	b.n	800ad7e <__lo0bits+0x1e>
 800adb6:	2220      	movs	r2, #32
 800adb8:	e7e1      	b.n	800ad7e <__lo0bits+0x1e>
	...

0800adbc <__i2b>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	460c      	mov	r4, r1
 800adc0:	2101      	movs	r1, #1
 800adc2:	f7ff ff05 	bl	800abd0 <_Balloc>
 800adc6:	4602      	mov	r2, r0
 800adc8:	b928      	cbnz	r0, 800add6 <__i2b+0x1a>
 800adca:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <__i2b+0x24>)
 800adcc:	4805      	ldr	r0, [pc, #20]	; (800ade4 <__i2b+0x28>)
 800adce:	f240 1145 	movw	r1, #325	; 0x145
 800add2:	f000 fca9 	bl	800b728 <__assert_func>
 800add6:	2301      	movs	r3, #1
 800add8:	6144      	str	r4, [r0, #20]
 800adda:	6103      	str	r3, [r0, #16]
 800addc:	bd10      	pop	{r4, pc}
 800adde:	bf00      	nop
 800ade0:	0800c5fc 	.word	0x0800c5fc
 800ade4:	0800c60d 	.word	0x0800c60d

0800ade8 <__multiply>:
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	4691      	mov	r9, r2
 800adee:	690a      	ldr	r2, [r1, #16]
 800adf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	bfb8      	it	lt
 800adf8:	460b      	movlt	r3, r1
 800adfa:	460c      	mov	r4, r1
 800adfc:	bfbc      	itt	lt
 800adfe:	464c      	movlt	r4, r9
 800ae00:	4699      	movlt	r9, r3
 800ae02:	6927      	ldr	r7, [r4, #16]
 800ae04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae08:	68a3      	ldr	r3, [r4, #8]
 800ae0a:	6861      	ldr	r1, [r4, #4]
 800ae0c:	eb07 060a 	add.w	r6, r7, sl
 800ae10:	42b3      	cmp	r3, r6
 800ae12:	b085      	sub	sp, #20
 800ae14:	bfb8      	it	lt
 800ae16:	3101      	addlt	r1, #1
 800ae18:	f7ff feda 	bl	800abd0 <_Balloc>
 800ae1c:	b930      	cbnz	r0, 800ae2c <__multiply+0x44>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	4b44      	ldr	r3, [pc, #272]	; (800af34 <__multiply+0x14c>)
 800ae22:	4845      	ldr	r0, [pc, #276]	; (800af38 <__multiply+0x150>)
 800ae24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ae28:	f000 fc7e 	bl	800b728 <__assert_func>
 800ae2c:	f100 0514 	add.w	r5, r0, #20
 800ae30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae34:	462b      	mov	r3, r5
 800ae36:	2200      	movs	r2, #0
 800ae38:	4543      	cmp	r3, r8
 800ae3a:	d321      	bcc.n	800ae80 <__multiply+0x98>
 800ae3c:	f104 0314 	add.w	r3, r4, #20
 800ae40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae44:	f109 0314 	add.w	r3, r9, #20
 800ae48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae4c:	9202      	str	r2, [sp, #8]
 800ae4e:	1b3a      	subs	r2, r7, r4
 800ae50:	3a15      	subs	r2, #21
 800ae52:	f022 0203 	bic.w	r2, r2, #3
 800ae56:	3204      	adds	r2, #4
 800ae58:	f104 0115 	add.w	r1, r4, #21
 800ae5c:	428f      	cmp	r7, r1
 800ae5e:	bf38      	it	cc
 800ae60:	2204      	movcc	r2, #4
 800ae62:	9201      	str	r2, [sp, #4]
 800ae64:	9a02      	ldr	r2, [sp, #8]
 800ae66:	9303      	str	r3, [sp, #12]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d80c      	bhi.n	800ae86 <__multiply+0x9e>
 800ae6c:	2e00      	cmp	r6, #0
 800ae6e:	dd03      	ble.n	800ae78 <__multiply+0x90>
 800ae70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d05b      	beq.n	800af30 <__multiply+0x148>
 800ae78:	6106      	str	r6, [r0, #16]
 800ae7a:	b005      	add	sp, #20
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	f843 2b04 	str.w	r2, [r3], #4
 800ae84:	e7d8      	b.n	800ae38 <__multiply+0x50>
 800ae86:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae8a:	f1ba 0f00 	cmp.w	sl, #0
 800ae8e:	d024      	beq.n	800aeda <__multiply+0xf2>
 800ae90:	f104 0e14 	add.w	lr, r4, #20
 800ae94:	46a9      	mov	r9, r5
 800ae96:	f04f 0c00 	mov.w	ip, #0
 800ae9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae9e:	f8d9 1000 	ldr.w	r1, [r9]
 800aea2:	fa1f fb82 	uxth.w	fp, r2
 800aea6:	b289      	uxth	r1, r1
 800aea8:	fb0a 110b 	mla	r1, sl, fp, r1
 800aeac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aeb0:	f8d9 2000 	ldr.w	r2, [r9]
 800aeb4:	4461      	add	r1, ip
 800aeb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeba:	fb0a c20b 	mla	r2, sl, fp, ip
 800aebe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aec2:	b289      	uxth	r1, r1
 800aec4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aec8:	4577      	cmp	r7, lr
 800aeca:	f849 1b04 	str.w	r1, [r9], #4
 800aece:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aed2:	d8e2      	bhi.n	800ae9a <__multiply+0xb2>
 800aed4:	9a01      	ldr	r2, [sp, #4]
 800aed6:	f845 c002 	str.w	ip, [r5, r2]
 800aeda:	9a03      	ldr	r2, [sp, #12]
 800aedc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aee0:	3304      	adds	r3, #4
 800aee2:	f1b9 0f00 	cmp.w	r9, #0
 800aee6:	d021      	beq.n	800af2c <__multiply+0x144>
 800aee8:	6829      	ldr	r1, [r5, #0]
 800aeea:	f104 0c14 	add.w	ip, r4, #20
 800aeee:	46ae      	mov	lr, r5
 800aef0:	f04f 0a00 	mov.w	sl, #0
 800aef4:	f8bc b000 	ldrh.w	fp, [ip]
 800aef8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aefc:	fb09 220b 	mla	r2, r9, fp, r2
 800af00:	4452      	add	r2, sl
 800af02:	b289      	uxth	r1, r1
 800af04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af08:	f84e 1b04 	str.w	r1, [lr], #4
 800af0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af14:	f8be 1000 	ldrh.w	r1, [lr]
 800af18:	fb09 110a 	mla	r1, r9, sl, r1
 800af1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af20:	4567      	cmp	r7, ip
 800af22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af26:	d8e5      	bhi.n	800aef4 <__multiply+0x10c>
 800af28:	9a01      	ldr	r2, [sp, #4]
 800af2a:	50a9      	str	r1, [r5, r2]
 800af2c:	3504      	adds	r5, #4
 800af2e:	e799      	b.n	800ae64 <__multiply+0x7c>
 800af30:	3e01      	subs	r6, #1
 800af32:	e79b      	b.n	800ae6c <__multiply+0x84>
 800af34:	0800c5fc 	.word	0x0800c5fc
 800af38:	0800c60d 	.word	0x0800c60d

0800af3c <__pow5mult>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	4615      	mov	r5, r2
 800af42:	f012 0203 	ands.w	r2, r2, #3
 800af46:	4606      	mov	r6, r0
 800af48:	460f      	mov	r7, r1
 800af4a:	d007      	beq.n	800af5c <__pow5mult+0x20>
 800af4c:	4c25      	ldr	r4, [pc, #148]	; (800afe4 <__pow5mult+0xa8>)
 800af4e:	3a01      	subs	r2, #1
 800af50:	2300      	movs	r3, #0
 800af52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af56:	f7ff fe9d 	bl	800ac94 <__multadd>
 800af5a:	4607      	mov	r7, r0
 800af5c:	10ad      	asrs	r5, r5, #2
 800af5e:	d03d      	beq.n	800afdc <__pow5mult+0xa0>
 800af60:	69f4      	ldr	r4, [r6, #28]
 800af62:	b97c      	cbnz	r4, 800af84 <__pow5mult+0x48>
 800af64:	2010      	movs	r0, #16
 800af66:	f7ff fd7f 	bl	800aa68 <malloc>
 800af6a:	4602      	mov	r2, r0
 800af6c:	61f0      	str	r0, [r6, #28]
 800af6e:	b928      	cbnz	r0, 800af7c <__pow5mult+0x40>
 800af70:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <__pow5mult+0xac>)
 800af72:	481e      	ldr	r0, [pc, #120]	; (800afec <__pow5mult+0xb0>)
 800af74:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af78:	f000 fbd6 	bl	800b728 <__assert_func>
 800af7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af80:	6004      	str	r4, [r0, #0]
 800af82:	60c4      	str	r4, [r0, #12]
 800af84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af8c:	b94c      	cbnz	r4, 800afa2 <__pow5mult+0x66>
 800af8e:	f240 2171 	movw	r1, #625	; 0x271
 800af92:	4630      	mov	r0, r6
 800af94:	f7ff ff12 	bl	800adbc <__i2b>
 800af98:	2300      	movs	r3, #0
 800af9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800af9e:	4604      	mov	r4, r0
 800afa0:	6003      	str	r3, [r0, #0]
 800afa2:	f04f 0900 	mov.w	r9, #0
 800afa6:	07eb      	lsls	r3, r5, #31
 800afa8:	d50a      	bpl.n	800afc0 <__pow5mult+0x84>
 800afaa:	4639      	mov	r1, r7
 800afac:	4622      	mov	r2, r4
 800afae:	4630      	mov	r0, r6
 800afb0:	f7ff ff1a 	bl	800ade8 <__multiply>
 800afb4:	4639      	mov	r1, r7
 800afb6:	4680      	mov	r8, r0
 800afb8:	4630      	mov	r0, r6
 800afba:	f7ff fe49 	bl	800ac50 <_Bfree>
 800afbe:	4647      	mov	r7, r8
 800afc0:	106d      	asrs	r5, r5, #1
 800afc2:	d00b      	beq.n	800afdc <__pow5mult+0xa0>
 800afc4:	6820      	ldr	r0, [r4, #0]
 800afc6:	b938      	cbnz	r0, 800afd8 <__pow5mult+0x9c>
 800afc8:	4622      	mov	r2, r4
 800afca:	4621      	mov	r1, r4
 800afcc:	4630      	mov	r0, r6
 800afce:	f7ff ff0b 	bl	800ade8 <__multiply>
 800afd2:	6020      	str	r0, [r4, #0]
 800afd4:	f8c0 9000 	str.w	r9, [r0]
 800afd8:	4604      	mov	r4, r0
 800afda:	e7e4      	b.n	800afa6 <__pow5mult+0x6a>
 800afdc:	4638      	mov	r0, r7
 800afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe2:	bf00      	nop
 800afe4:	0800c758 	.word	0x0800c758
 800afe8:	0800c58d 	.word	0x0800c58d
 800afec:	0800c60d 	.word	0x0800c60d

0800aff0 <__lshift>:
 800aff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff4:	460c      	mov	r4, r1
 800aff6:	6849      	ldr	r1, [r1, #4]
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800affe:	68a3      	ldr	r3, [r4, #8]
 800b000:	4607      	mov	r7, r0
 800b002:	4691      	mov	r9, r2
 800b004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b008:	f108 0601 	add.w	r6, r8, #1
 800b00c:	42b3      	cmp	r3, r6
 800b00e:	db0b      	blt.n	800b028 <__lshift+0x38>
 800b010:	4638      	mov	r0, r7
 800b012:	f7ff fddd 	bl	800abd0 <_Balloc>
 800b016:	4605      	mov	r5, r0
 800b018:	b948      	cbnz	r0, 800b02e <__lshift+0x3e>
 800b01a:	4602      	mov	r2, r0
 800b01c:	4b28      	ldr	r3, [pc, #160]	; (800b0c0 <__lshift+0xd0>)
 800b01e:	4829      	ldr	r0, [pc, #164]	; (800b0c4 <__lshift+0xd4>)
 800b020:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b024:	f000 fb80 	bl	800b728 <__assert_func>
 800b028:	3101      	adds	r1, #1
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	e7ee      	b.n	800b00c <__lshift+0x1c>
 800b02e:	2300      	movs	r3, #0
 800b030:	f100 0114 	add.w	r1, r0, #20
 800b034:	f100 0210 	add.w	r2, r0, #16
 800b038:	4618      	mov	r0, r3
 800b03a:	4553      	cmp	r3, sl
 800b03c:	db33      	blt.n	800b0a6 <__lshift+0xb6>
 800b03e:	6920      	ldr	r0, [r4, #16]
 800b040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b044:	f104 0314 	add.w	r3, r4, #20
 800b048:	f019 091f 	ands.w	r9, r9, #31
 800b04c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b054:	d02b      	beq.n	800b0ae <__lshift+0xbe>
 800b056:	f1c9 0e20 	rsb	lr, r9, #32
 800b05a:	468a      	mov	sl, r1
 800b05c:	2200      	movs	r2, #0
 800b05e:	6818      	ldr	r0, [r3, #0]
 800b060:	fa00 f009 	lsl.w	r0, r0, r9
 800b064:	4310      	orrs	r0, r2
 800b066:	f84a 0b04 	str.w	r0, [sl], #4
 800b06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b06e:	459c      	cmp	ip, r3
 800b070:	fa22 f20e 	lsr.w	r2, r2, lr
 800b074:	d8f3      	bhi.n	800b05e <__lshift+0x6e>
 800b076:	ebac 0304 	sub.w	r3, ip, r4
 800b07a:	3b15      	subs	r3, #21
 800b07c:	f023 0303 	bic.w	r3, r3, #3
 800b080:	3304      	adds	r3, #4
 800b082:	f104 0015 	add.w	r0, r4, #21
 800b086:	4584      	cmp	ip, r0
 800b088:	bf38      	it	cc
 800b08a:	2304      	movcc	r3, #4
 800b08c:	50ca      	str	r2, [r1, r3]
 800b08e:	b10a      	cbz	r2, 800b094 <__lshift+0xa4>
 800b090:	f108 0602 	add.w	r6, r8, #2
 800b094:	3e01      	subs	r6, #1
 800b096:	4638      	mov	r0, r7
 800b098:	612e      	str	r6, [r5, #16]
 800b09a:	4621      	mov	r1, r4
 800b09c:	f7ff fdd8 	bl	800ac50 <_Bfree>
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	e7c5      	b.n	800b03a <__lshift+0x4a>
 800b0ae:	3904      	subs	r1, #4
 800b0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0b8:	459c      	cmp	ip, r3
 800b0ba:	d8f9      	bhi.n	800b0b0 <__lshift+0xc0>
 800b0bc:	e7ea      	b.n	800b094 <__lshift+0xa4>
 800b0be:	bf00      	nop
 800b0c0:	0800c5fc 	.word	0x0800c5fc
 800b0c4:	0800c60d 	.word	0x0800c60d

0800b0c8 <__mcmp>:
 800b0c8:	b530      	push	{r4, r5, lr}
 800b0ca:	6902      	ldr	r2, [r0, #16]
 800b0cc:	690c      	ldr	r4, [r1, #16]
 800b0ce:	1b12      	subs	r2, r2, r4
 800b0d0:	d10e      	bne.n	800b0f0 <__mcmp+0x28>
 800b0d2:	f100 0314 	add.w	r3, r0, #20
 800b0d6:	3114      	adds	r1, #20
 800b0d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0e8:	42a5      	cmp	r5, r4
 800b0ea:	d003      	beq.n	800b0f4 <__mcmp+0x2c>
 800b0ec:	d305      	bcc.n	800b0fa <__mcmp+0x32>
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	bd30      	pop	{r4, r5, pc}
 800b0f4:	4283      	cmp	r3, r0
 800b0f6:	d3f3      	bcc.n	800b0e0 <__mcmp+0x18>
 800b0f8:	e7fa      	b.n	800b0f0 <__mcmp+0x28>
 800b0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fe:	e7f7      	b.n	800b0f0 <__mcmp+0x28>

0800b100 <__mdiff>:
 800b100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	460c      	mov	r4, r1
 800b106:	4606      	mov	r6, r0
 800b108:	4611      	mov	r1, r2
 800b10a:	4620      	mov	r0, r4
 800b10c:	4690      	mov	r8, r2
 800b10e:	f7ff ffdb 	bl	800b0c8 <__mcmp>
 800b112:	1e05      	subs	r5, r0, #0
 800b114:	d110      	bne.n	800b138 <__mdiff+0x38>
 800b116:	4629      	mov	r1, r5
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff fd59 	bl	800abd0 <_Balloc>
 800b11e:	b930      	cbnz	r0, 800b12e <__mdiff+0x2e>
 800b120:	4b3a      	ldr	r3, [pc, #232]	; (800b20c <__mdiff+0x10c>)
 800b122:	4602      	mov	r2, r0
 800b124:	f240 2137 	movw	r1, #567	; 0x237
 800b128:	4839      	ldr	r0, [pc, #228]	; (800b210 <__mdiff+0x110>)
 800b12a:	f000 fafd 	bl	800b728 <__assert_func>
 800b12e:	2301      	movs	r3, #1
 800b130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b138:	bfa4      	itt	ge
 800b13a:	4643      	movge	r3, r8
 800b13c:	46a0      	movge	r8, r4
 800b13e:	4630      	mov	r0, r6
 800b140:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b144:	bfa6      	itte	ge
 800b146:	461c      	movge	r4, r3
 800b148:	2500      	movge	r5, #0
 800b14a:	2501      	movlt	r5, #1
 800b14c:	f7ff fd40 	bl	800abd0 <_Balloc>
 800b150:	b920      	cbnz	r0, 800b15c <__mdiff+0x5c>
 800b152:	4b2e      	ldr	r3, [pc, #184]	; (800b20c <__mdiff+0x10c>)
 800b154:	4602      	mov	r2, r0
 800b156:	f240 2145 	movw	r1, #581	; 0x245
 800b15a:	e7e5      	b.n	800b128 <__mdiff+0x28>
 800b15c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b160:	6926      	ldr	r6, [r4, #16]
 800b162:	60c5      	str	r5, [r0, #12]
 800b164:	f104 0914 	add.w	r9, r4, #20
 800b168:	f108 0514 	add.w	r5, r8, #20
 800b16c:	f100 0e14 	add.w	lr, r0, #20
 800b170:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b174:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b178:	f108 0210 	add.w	r2, r8, #16
 800b17c:	46f2      	mov	sl, lr
 800b17e:	2100      	movs	r1, #0
 800b180:	f859 3b04 	ldr.w	r3, [r9], #4
 800b184:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b188:	fa11 f88b 	uxtah	r8, r1, fp
 800b18c:	b299      	uxth	r1, r3
 800b18e:	0c1b      	lsrs	r3, r3, #16
 800b190:	eba8 0801 	sub.w	r8, r8, r1
 800b194:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b198:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b19c:	fa1f f888 	uxth.w	r8, r8
 800b1a0:	1419      	asrs	r1, r3, #16
 800b1a2:	454e      	cmp	r6, r9
 800b1a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1a8:	f84a 3b04 	str.w	r3, [sl], #4
 800b1ac:	d8e8      	bhi.n	800b180 <__mdiff+0x80>
 800b1ae:	1b33      	subs	r3, r6, r4
 800b1b0:	3b15      	subs	r3, #21
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	3415      	adds	r4, #21
 800b1ba:	42a6      	cmp	r6, r4
 800b1bc:	bf38      	it	cc
 800b1be:	2304      	movcc	r3, #4
 800b1c0:	441d      	add	r5, r3
 800b1c2:	4473      	add	r3, lr
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	462e      	mov	r6, r5
 800b1c8:	4566      	cmp	r6, ip
 800b1ca:	d30e      	bcc.n	800b1ea <__mdiff+0xea>
 800b1cc:	f10c 0203 	add.w	r2, ip, #3
 800b1d0:	1b52      	subs	r2, r2, r5
 800b1d2:	f022 0203 	bic.w	r2, r2, #3
 800b1d6:	3d03      	subs	r5, #3
 800b1d8:	45ac      	cmp	ip, r5
 800b1da:	bf38      	it	cc
 800b1dc:	2200      	movcc	r2, #0
 800b1de:	4413      	add	r3, r2
 800b1e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1e4:	b17a      	cbz	r2, 800b206 <__mdiff+0x106>
 800b1e6:	6107      	str	r7, [r0, #16]
 800b1e8:	e7a4      	b.n	800b134 <__mdiff+0x34>
 800b1ea:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1ee:	fa11 f288 	uxtah	r2, r1, r8
 800b1f2:	1414      	asrs	r4, r2, #16
 800b1f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1f8:	b292      	uxth	r2, r2
 800b1fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1fe:	f84e 2b04 	str.w	r2, [lr], #4
 800b202:	1421      	asrs	r1, r4, #16
 800b204:	e7e0      	b.n	800b1c8 <__mdiff+0xc8>
 800b206:	3f01      	subs	r7, #1
 800b208:	e7ea      	b.n	800b1e0 <__mdiff+0xe0>
 800b20a:	bf00      	nop
 800b20c:	0800c5fc 	.word	0x0800c5fc
 800b210:	0800c60d 	.word	0x0800c60d

0800b214 <__d2b>:
 800b214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b218:	460f      	mov	r7, r1
 800b21a:	2101      	movs	r1, #1
 800b21c:	ec59 8b10 	vmov	r8, r9, d0
 800b220:	4616      	mov	r6, r2
 800b222:	f7ff fcd5 	bl	800abd0 <_Balloc>
 800b226:	4604      	mov	r4, r0
 800b228:	b930      	cbnz	r0, 800b238 <__d2b+0x24>
 800b22a:	4602      	mov	r2, r0
 800b22c:	4b24      	ldr	r3, [pc, #144]	; (800b2c0 <__d2b+0xac>)
 800b22e:	4825      	ldr	r0, [pc, #148]	; (800b2c4 <__d2b+0xb0>)
 800b230:	f240 310f 	movw	r1, #783	; 0x30f
 800b234:	f000 fa78 	bl	800b728 <__assert_func>
 800b238:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b23c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b240:	bb2d      	cbnz	r5, 800b28e <__d2b+0x7a>
 800b242:	9301      	str	r3, [sp, #4]
 800b244:	f1b8 0300 	subs.w	r3, r8, #0
 800b248:	d026      	beq.n	800b298 <__d2b+0x84>
 800b24a:	4668      	mov	r0, sp
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	f7ff fd87 	bl	800ad60 <__lo0bits>
 800b252:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b256:	b1e8      	cbz	r0, 800b294 <__d2b+0x80>
 800b258:	f1c0 0320 	rsb	r3, r0, #32
 800b25c:	fa02 f303 	lsl.w	r3, r2, r3
 800b260:	430b      	orrs	r3, r1
 800b262:	40c2      	lsrs	r2, r0
 800b264:	6163      	str	r3, [r4, #20]
 800b266:	9201      	str	r2, [sp, #4]
 800b268:	9b01      	ldr	r3, [sp, #4]
 800b26a:	61a3      	str	r3, [r4, #24]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bf14      	ite	ne
 800b270:	2202      	movne	r2, #2
 800b272:	2201      	moveq	r2, #1
 800b274:	6122      	str	r2, [r4, #16]
 800b276:	b1bd      	cbz	r5, 800b2a8 <__d2b+0x94>
 800b278:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b27c:	4405      	add	r5, r0
 800b27e:	603d      	str	r5, [r7, #0]
 800b280:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b284:	6030      	str	r0, [r6, #0]
 800b286:	4620      	mov	r0, r4
 800b288:	b003      	add	sp, #12
 800b28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b28e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b292:	e7d6      	b.n	800b242 <__d2b+0x2e>
 800b294:	6161      	str	r1, [r4, #20]
 800b296:	e7e7      	b.n	800b268 <__d2b+0x54>
 800b298:	a801      	add	r0, sp, #4
 800b29a:	f7ff fd61 	bl	800ad60 <__lo0bits>
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	6163      	str	r3, [r4, #20]
 800b2a2:	3020      	adds	r0, #32
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	e7e5      	b.n	800b274 <__d2b+0x60>
 800b2a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2b0:	6038      	str	r0, [r7, #0]
 800b2b2:	6918      	ldr	r0, [r3, #16]
 800b2b4:	f7ff fd34 	bl	800ad20 <__hi0bits>
 800b2b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2bc:	e7e2      	b.n	800b284 <__d2b+0x70>
 800b2be:	bf00      	nop
 800b2c0:	0800c5fc 	.word	0x0800c5fc
 800b2c4:	0800c60d 	.word	0x0800c60d

0800b2c8 <__ssputs_r>:
 800b2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2cc:	688e      	ldr	r6, [r1, #8]
 800b2ce:	461f      	mov	r7, r3
 800b2d0:	42be      	cmp	r6, r7
 800b2d2:	680b      	ldr	r3, [r1, #0]
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	4690      	mov	r8, r2
 800b2da:	d82c      	bhi.n	800b336 <__ssputs_r+0x6e>
 800b2dc:	898a      	ldrh	r2, [r1, #12]
 800b2de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2e2:	d026      	beq.n	800b332 <__ssputs_r+0x6a>
 800b2e4:	6965      	ldr	r5, [r4, #20]
 800b2e6:	6909      	ldr	r1, [r1, #16]
 800b2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2ec:	eba3 0901 	sub.w	r9, r3, r1
 800b2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2f4:	1c7b      	adds	r3, r7, #1
 800b2f6:	444b      	add	r3, r9
 800b2f8:	106d      	asrs	r5, r5, #1
 800b2fa:	429d      	cmp	r5, r3
 800b2fc:	bf38      	it	cc
 800b2fe:	461d      	movcc	r5, r3
 800b300:	0553      	lsls	r3, r2, #21
 800b302:	d527      	bpl.n	800b354 <__ssputs_r+0x8c>
 800b304:	4629      	mov	r1, r5
 800b306:	f7ff fbd7 	bl	800aab8 <_malloc_r>
 800b30a:	4606      	mov	r6, r0
 800b30c:	b360      	cbz	r0, 800b368 <__ssputs_r+0xa0>
 800b30e:	6921      	ldr	r1, [r4, #16]
 800b310:	464a      	mov	r2, r9
 800b312:	f7fe fd5a 	bl	8009dca <memcpy>
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	6126      	str	r6, [r4, #16]
 800b324:	6165      	str	r5, [r4, #20]
 800b326:	444e      	add	r6, r9
 800b328:	eba5 0509 	sub.w	r5, r5, r9
 800b32c:	6026      	str	r6, [r4, #0]
 800b32e:	60a5      	str	r5, [r4, #8]
 800b330:	463e      	mov	r6, r7
 800b332:	42be      	cmp	r6, r7
 800b334:	d900      	bls.n	800b338 <__ssputs_r+0x70>
 800b336:	463e      	mov	r6, r7
 800b338:	6820      	ldr	r0, [r4, #0]
 800b33a:	4632      	mov	r2, r6
 800b33c:	4641      	mov	r1, r8
 800b33e:	f000 f9c9 	bl	800b6d4 <memmove>
 800b342:	68a3      	ldr	r3, [r4, #8]
 800b344:	1b9b      	subs	r3, r3, r6
 800b346:	60a3      	str	r3, [r4, #8]
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	4433      	add	r3, r6
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	2000      	movs	r0, #0
 800b350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b354:	462a      	mov	r2, r5
 800b356:	f000 fa2d 	bl	800b7b4 <_realloc_r>
 800b35a:	4606      	mov	r6, r0
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1e0      	bne.n	800b322 <__ssputs_r+0x5a>
 800b360:	6921      	ldr	r1, [r4, #16]
 800b362:	4650      	mov	r0, sl
 800b364:	f7ff fb34 	bl	800a9d0 <_free_r>
 800b368:	230c      	movs	r3, #12
 800b36a:	f8ca 3000 	str.w	r3, [sl]
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	f04f 30ff 	mov.w	r0, #4294967295
 800b37a:	e7e9      	b.n	800b350 <__ssputs_r+0x88>

0800b37c <_svfiprintf_r>:
 800b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b380:	4698      	mov	r8, r3
 800b382:	898b      	ldrh	r3, [r1, #12]
 800b384:	061b      	lsls	r3, r3, #24
 800b386:	b09d      	sub	sp, #116	; 0x74
 800b388:	4607      	mov	r7, r0
 800b38a:	460d      	mov	r5, r1
 800b38c:	4614      	mov	r4, r2
 800b38e:	d50e      	bpl.n	800b3ae <_svfiprintf_r+0x32>
 800b390:	690b      	ldr	r3, [r1, #16]
 800b392:	b963      	cbnz	r3, 800b3ae <_svfiprintf_r+0x32>
 800b394:	2140      	movs	r1, #64	; 0x40
 800b396:	f7ff fb8f 	bl	800aab8 <_malloc_r>
 800b39a:	6028      	str	r0, [r5, #0]
 800b39c:	6128      	str	r0, [r5, #16]
 800b39e:	b920      	cbnz	r0, 800b3aa <_svfiprintf_r+0x2e>
 800b3a0:	230c      	movs	r3, #12
 800b3a2:	603b      	str	r3, [r7, #0]
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a8:	e0d0      	b.n	800b54c <_svfiprintf_r+0x1d0>
 800b3aa:	2340      	movs	r3, #64	; 0x40
 800b3ac:	616b      	str	r3, [r5, #20]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b2:	2320      	movs	r3, #32
 800b3b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3bc:	2330      	movs	r3, #48	; 0x30
 800b3be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b564 <_svfiprintf_r+0x1e8>
 800b3c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3c6:	f04f 0901 	mov.w	r9, #1
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	469a      	mov	sl, r3
 800b3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d2:	b10a      	cbz	r2, 800b3d8 <_svfiprintf_r+0x5c>
 800b3d4:	2a25      	cmp	r2, #37	; 0x25
 800b3d6:	d1f9      	bne.n	800b3cc <_svfiprintf_r+0x50>
 800b3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800b3dc:	d00b      	beq.n	800b3f6 <_svfiprintf_r+0x7a>
 800b3de:	465b      	mov	r3, fp
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f7ff ff6f 	bl	800b2c8 <__ssputs_r>
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	f000 80a9 	beq.w	800b542 <_svfiprintf_r+0x1c6>
 800b3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f2:	445a      	add	r2, fp
 800b3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 80a1 	beq.w	800b542 <_svfiprintf_r+0x1c6>
 800b400:	2300      	movs	r3, #0
 800b402:	f04f 32ff 	mov.w	r2, #4294967295
 800b406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b40a:	f10a 0a01 	add.w	sl, sl, #1
 800b40e:	9304      	str	r3, [sp, #16]
 800b410:	9307      	str	r3, [sp, #28]
 800b412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b416:	931a      	str	r3, [sp, #104]	; 0x68
 800b418:	4654      	mov	r4, sl
 800b41a:	2205      	movs	r2, #5
 800b41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b420:	4850      	ldr	r0, [pc, #320]	; (800b564 <_svfiprintf_r+0x1e8>)
 800b422:	f7f4 ff0d 	bl	8000240 <memchr>
 800b426:	9a04      	ldr	r2, [sp, #16]
 800b428:	b9d8      	cbnz	r0, 800b462 <_svfiprintf_r+0xe6>
 800b42a:	06d0      	lsls	r0, r2, #27
 800b42c:	bf44      	itt	mi
 800b42e:	2320      	movmi	r3, #32
 800b430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b434:	0711      	lsls	r1, r2, #28
 800b436:	bf44      	itt	mi
 800b438:	232b      	movmi	r3, #43	; 0x2b
 800b43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43e:	f89a 3000 	ldrb.w	r3, [sl]
 800b442:	2b2a      	cmp	r3, #42	; 0x2a
 800b444:	d015      	beq.n	800b472 <_svfiprintf_r+0xf6>
 800b446:	9a07      	ldr	r2, [sp, #28]
 800b448:	4654      	mov	r4, sl
 800b44a:	2000      	movs	r0, #0
 800b44c:	f04f 0c0a 	mov.w	ip, #10
 800b450:	4621      	mov	r1, r4
 800b452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b456:	3b30      	subs	r3, #48	; 0x30
 800b458:	2b09      	cmp	r3, #9
 800b45a:	d94d      	bls.n	800b4f8 <_svfiprintf_r+0x17c>
 800b45c:	b1b0      	cbz	r0, 800b48c <_svfiprintf_r+0x110>
 800b45e:	9207      	str	r2, [sp, #28]
 800b460:	e014      	b.n	800b48c <_svfiprintf_r+0x110>
 800b462:	eba0 0308 	sub.w	r3, r0, r8
 800b466:	fa09 f303 	lsl.w	r3, r9, r3
 800b46a:	4313      	orrs	r3, r2
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	46a2      	mov	sl, r4
 800b470:	e7d2      	b.n	800b418 <_svfiprintf_r+0x9c>
 800b472:	9b03      	ldr	r3, [sp, #12]
 800b474:	1d19      	adds	r1, r3, #4
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	9103      	str	r1, [sp, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	bfbb      	ittet	lt
 800b47e:	425b      	neglt	r3, r3
 800b480:	f042 0202 	orrlt.w	r2, r2, #2
 800b484:	9307      	strge	r3, [sp, #28]
 800b486:	9307      	strlt	r3, [sp, #28]
 800b488:	bfb8      	it	lt
 800b48a:	9204      	strlt	r2, [sp, #16]
 800b48c:	7823      	ldrb	r3, [r4, #0]
 800b48e:	2b2e      	cmp	r3, #46	; 0x2e
 800b490:	d10c      	bne.n	800b4ac <_svfiprintf_r+0x130>
 800b492:	7863      	ldrb	r3, [r4, #1]
 800b494:	2b2a      	cmp	r3, #42	; 0x2a
 800b496:	d134      	bne.n	800b502 <_svfiprintf_r+0x186>
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	1d1a      	adds	r2, r3, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	9203      	str	r2, [sp, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	bfb8      	it	lt
 800b4a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4a8:	3402      	adds	r4, #2
 800b4aa:	9305      	str	r3, [sp, #20]
 800b4ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b574 <_svfiprintf_r+0x1f8>
 800b4b0:	7821      	ldrb	r1, [r4, #0]
 800b4b2:	2203      	movs	r2, #3
 800b4b4:	4650      	mov	r0, sl
 800b4b6:	f7f4 fec3 	bl	8000240 <memchr>
 800b4ba:	b138      	cbz	r0, 800b4cc <_svfiprintf_r+0x150>
 800b4bc:	9b04      	ldr	r3, [sp, #16]
 800b4be:	eba0 000a 	sub.w	r0, r0, sl
 800b4c2:	2240      	movs	r2, #64	; 0x40
 800b4c4:	4082      	lsls	r2, r0
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	3401      	adds	r4, #1
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d0:	4825      	ldr	r0, [pc, #148]	; (800b568 <_svfiprintf_r+0x1ec>)
 800b4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4d6:	2206      	movs	r2, #6
 800b4d8:	f7f4 feb2 	bl	8000240 <memchr>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d038      	beq.n	800b552 <_svfiprintf_r+0x1d6>
 800b4e0:	4b22      	ldr	r3, [pc, #136]	; (800b56c <_svfiprintf_r+0x1f0>)
 800b4e2:	bb1b      	cbnz	r3, 800b52c <_svfiprintf_r+0x1b0>
 800b4e4:	9b03      	ldr	r3, [sp, #12]
 800b4e6:	3307      	adds	r3, #7
 800b4e8:	f023 0307 	bic.w	r3, r3, #7
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	9303      	str	r3, [sp, #12]
 800b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f2:	4433      	add	r3, r6
 800b4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f6:	e768      	b.n	800b3ca <_svfiprintf_r+0x4e>
 800b4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	2001      	movs	r0, #1
 800b500:	e7a6      	b.n	800b450 <_svfiprintf_r+0xd4>
 800b502:	2300      	movs	r3, #0
 800b504:	3401      	adds	r4, #1
 800b506:	9305      	str	r3, [sp, #20]
 800b508:	4619      	mov	r1, r3
 800b50a:	f04f 0c0a 	mov.w	ip, #10
 800b50e:	4620      	mov	r0, r4
 800b510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b514:	3a30      	subs	r2, #48	; 0x30
 800b516:	2a09      	cmp	r2, #9
 800b518:	d903      	bls.n	800b522 <_svfiprintf_r+0x1a6>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0c6      	beq.n	800b4ac <_svfiprintf_r+0x130>
 800b51e:	9105      	str	r1, [sp, #20]
 800b520:	e7c4      	b.n	800b4ac <_svfiprintf_r+0x130>
 800b522:	fb0c 2101 	mla	r1, ip, r1, r2
 800b526:	4604      	mov	r4, r0
 800b528:	2301      	movs	r3, #1
 800b52a:	e7f0      	b.n	800b50e <_svfiprintf_r+0x192>
 800b52c:	ab03      	add	r3, sp, #12
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	462a      	mov	r2, r5
 800b532:	4b0f      	ldr	r3, [pc, #60]	; (800b570 <_svfiprintf_r+0x1f4>)
 800b534:	a904      	add	r1, sp, #16
 800b536:	4638      	mov	r0, r7
 800b538:	f7fd fea2 	bl	8009280 <_printf_float>
 800b53c:	1c42      	adds	r2, r0, #1
 800b53e:	4606      	mov	r6, r0
 800b540:	d1d6      	bne.n	800b4f0 <_svfiprintf_r+0x174>
 800b542:	89ab      	ldrh	r3, [r5, #12]
 800b544:	065b      	lsls	r3, r3, #25
 800b546:	f53f af2d 	bmi.w	800b3a4 <_svfiprintf_r+0x28>
 800b54a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b54c:	b01d      	add	sp, #116	; 0x74
 800b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b552:	ab03      	add	r3, sp, #12
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	462a      	mov	r2, r5
 800b558:	4b05      	ldr	r3, [pc, #20]	; (800b570 <_svfiprintf_r+0x1f4>)
 800b55a:	a904      	add	r1, sp, #16
 800b55c:	4638      	mov	r0, r7
 800b55e:	f7fe f917 	bl	8009790 <_printf_i>
 800b562:	e7eb      	b.n	800b53c <_svfiprintf_r+0x1c0>
 800b564:	0800c764 	.word	0x0800c764
 800b568:	0800c76e 	.word	0x0800c76e
 800b56c:	08009281 	.word	0x08009281
 800b570:	0800b2c9 	.word	0x0800b2c9
 800b574:	0800c76a 	.word	0x0800c76a

0800b578 <__sflush_r>:
 800b578:	898a      	ldrh	r2, [r1, #12]
 800b57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57e:	4605      	mov	r5, r0
 800b580:	0710      	lsls	r0, r2, #28
 800b582:	460c      	mov	r4, r1
 800b584:	d458      	bmi.n	800b638 <__sflush_r+0xc0>
 800b586:	684b      	ldr	r3, [r1, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dc05      	bgt.n	800b598 <__sflush_r+0x20>
 800b58c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dc02      	bgt.n	800b598 <__sflush_r+0x20>
 800b592:	2000      	movs	r0, #0
 800b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	d0f9      	beq.n	800b592 <__sflush_r+0x1a>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5a4:	682f      	ldr	r7, [r5, #0]
 800b5a6:	6a21      	ldr	r1, [r4, #32]
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	d032      	beq.n	800b612 <__sflush_r+0x9a>
 800b5ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	075a      	lsls	r2, r3, #29
 800b5b2:	d505      	bpl.n	800b5c0 <__sflush_r+0x48>
 800b5b4:	6863      	ldr	r3, [r4, #4]
 800b5b6:	1ac0      	subs	r0, r0, r3
 800b5b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5ba:	b10b      	cbz	r3, 800b5c0 <__sflush_r+0x48>
 800b5bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5be:	1ac0      	subs	r0, r0, r3
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5c6:	6a21      	ldr	r1, [r4, #32]
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b0      	blx	r6
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	d106      	bne.n	800b5e0 <__sflush_r+0x68>
 800b5d2:	6829      	ldr	r1, [r5, #0]
 800b5d4:	291d      	cmp	r1, #29
 800b5d6:	d82b      	bhi.n	800b630 <__sflush_r+0xb8>
 800b5d8:	4a29      	ldr	r2, [pc, #164]	; (800b680 <__sflush_r+0x108>)
 800b5da:	410a      	asrs	r2, r1
 800b5dc:	07d6      	lsls	r6, r2, #31
 800b5de:	d427      	bmi.n	800b630 <__sflush_r+0xb8>
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	6062      	str	r2, [r4, #4]
 800b5e4:	04d9      	lsls	r1, r3, #19
 800b5e6:	6922      	ldr	r2, [r4, #16]
 800b5e8:	6022      	str	r2, [r4, #0]
 800b5ea:	d504      	bpl.n	800b5f6 <__sflush_r+0x7e>
 800b5ec:	1c42      	adds	r2, r0, #1
 800b5ee:	d101      	bne.n	800b5f4 <__sflush_r+0x7c>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b903      	cbnz	r3, 800b5f6 <__sflush_r+0x7e>
 800b5f4:	6560      	str	r0, [r4, #84]	; 0x54
 800b5f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5f8:	602f      	str	r7, [r5, #0]
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	d0c9      	beq.n	800b592 <__sflush_r+0x1a>
 800b5fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b602:	4299      	cmp	r1, r3
 800b604:	d002      	beq.n	800b60c <__sflush_r+0x94>
 800b606:	4628      	mov	r0, r5
 800b608:	f7ff f9e2 	bl	800a9d0 <_free_r>
 800b60c:	2000      	movs	r0, #0
 800b60e:	6360      	str	r0, [r4, #52]	; 0x34
 800b610:	e7c0      	b.n	800b594 <__sflush_r+0x1c>
 800b612:	2301      	movs	r3, #1
 800b614:	4628      	mov	r0, r5
 800b616:	47b0      	blx	r6
 800b618:	1c41      	adds	r1, r0, #1
 800b61a:	d1c8      	bne.n	800b5ae <__sflush_r+0x36>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0c5      	beq.n	800b5ae <__sflush_r+0x36>
 800b622:	2b1d      	cmp	r3, #29
 800b624:	d001      	beq.n	800b62a <__sflush_r+0xb2>
 800b626:	2b16      	cmp	r3, #22
 800b628:	d101      	bne.n	800b62e <__sflush_r+0xb6>
 800b62a:	602f      	str	r7, [r5, #0]
 800b62c:	e7b1      	b.n	800b592 <__sflush_r+0x1a>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	e7ad      	b.n	800b594 <__sflush_r+0x1c>
 800b638:	690f      	ldr	r7, [r1, #16]
 800b63a:	2f00      	cmp	r7, #0
 800b63c:	d0a9      	beq.n	800b592 <__sflush_r+0x1a>
 800b63e:	0793      	lsls	r3, r2, #30
 800b640:	680e      	ldr	r6, [r1, #0]
 800b642:	bf08      	it	eq
 800b644:	694b      	ldreq	r3, [r1, #20]
 800b646:	600f      	str	r7, [r1, #0]
 800b648:	bf18      	it	ne
 800b64a:	2300      	movne	r3, #0
 800b64c:	eba6 0807 	sub.w	r8, r6, r7
 800b650:	608b      	str	r3, [r1, #8]
 800b652:	f1b8 0f00 	cmp.w	r8, #0
 800b656:	dd9c      	ble.n	800b592 <__sflush_r+0x1a>
 800b658:	6a21      	ldr	r1, [r4, #32]
 800b65a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b65c:	4643      	mov	r3, r8
 800b65e:	463a      	mov	r2, r7
 800b660:	4628      	mov	r0, r5
 800b662:	47b0      	blx	r6
 800b664:	2800      	cmp	r0, #0
 800b666:	dc06      	bgt.n	800b676 <__sflush_r+0xfe>
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b66e:	81a3      	strh	r3, [r4, #12]
 800b670:	f04f 30ff 	mov.w	r0, #4294967295
 800b674:	e78e      	b.n	800b594 <__sflush_r+0x1c>
 800b676:	4407      	add	r7, r0
 800b678:	eba8 0800 	sub.w	r8, r8, r0
 800b67c:	e7e9      	b.n	800b652 <__sflush_r+0xda>
 800b67e:	bf00      	nop
 800b680:	dfbffffe 	.word	0xdfbffffe

0800b684 <_fflush_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	690b      	ldr	r3, [r1, #16]
 800b688:	4605      	mov	r5, r0
 800b68a:	460c      	mov	r4, r1
 800b68c:	b913      	cbnz	r3, 800b694 <_fflush_r+0x10>
 800b68e:	2500      	movs	r5, #0
 800b690:	4628      	mov	r0, r5
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	b118      	cbz	r0, 800b69e <_fflush_r+0x1a>
 800b696:	6a03      	ldr	r3, [r0, #32]
 800b698:	b90b      	cbnz	r3, 800b69e <_fflush_r+0x1a>
 800b69a:	f7fe fa27 	bl	8009aec <__sinit>
 800b69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0f3      	beq.n	800b68e <_fflush_r+0xa>
 800b6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6a8:	07d0      	lsls	r0, r2, #31
 800b6aa:	d404      	bmi.n	800b6b6 <_fflush_r+0x32>
 800b6ac:	0599      	lsls	r1, r3, #22
 800b6ae:	d402      	bmi.n	800b6b6 <_fflush_r+0x32>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6b2:	f7fe fb88 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	f7ff ff5d 	bl	800b578 <__sflush_r>
 800b6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6c0:	07da      	lsls	r2, r3, #31
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	d4e4      	bmi.n	800b690 <_fflush_r+0xc>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	059b      	lsls	r3, r3, #22
 800b6ca:	d4e1      	bmi.n	800b690 <_fflush_r+0xc>
 800b6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ce:	f7fe fb7b 	bl	8009dc8 <__retarget_lock_release_recursive>
 800b6d2:	e7dd      	b.n	800b690 <_fflush_r+0xc>

0800b6d4 <memmove>:
 800b6d4:	4288      	cmp	r0, r1
 800b6d6:	b510      	push	{r4, lr}
 800b6d8:	eb01 0402 	add.w	r4, r1, r2
 800b6dc:	d902      	bls.n	800b6e4 <memmove+0x10>
 800b6de:	4284      	cmp	r4, r0
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	d807      	bhi.n	800b6f4 <memmove+0x20>
 800b6e4:	1e43      	subs	r3, r0, #1
 800b6e6:	42a1      	cmp	r1, r4
 800b6e8:	d008      	beq.n	800b6fc <memmove+0x28>
 800b6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6f2:	e7f8      	b.n	800b6e6 <memmove+0x12>
 800b6f4:	4402      	add	r2, r0
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	428a      	cmp	r2, r1
 800b6fa:	d100      	bne.n	800b6fe <memmove+0x2a>
 800b6fc:	bd10      	pop	{r4, pc}
 800b6fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b706:	e7f7      	b.n	800b6f8 <memmove+0x24>

0800b708 <_sbrk_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d06      	ldr	r5, [pc, #24]	; (800b724 <_sbrk_r+0x1c>)
 800b70c:	2300      	movs	r3, #0
 800b70e:	4604      	mov	r4, r0
 800b710:	4608      	mov	r0, r1
 800b712:	602b      	str	r3, [r5, #0]
 800b714:	f7f6 f9b0 	bl	8001a78 <_sbrk>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d102      	bne.n	800b722 <_sbrk_r+0x1a>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b103      	cbz	r3, 800b722 <_sbrk_r+0x1a>
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	20005454 	.word	0x20005454

0800b728 <__assert_func>:
 800b728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b72a:	4614      	mov	r4, r2
 800b72c:	461a      	mov	r2, r3
 800b72e:	4b09      	ldr	r3, [pc, #36]	; (800b754 <__assert_func+0x2c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4605      	mov	r5, r0
 800b734:	68d8      	ldr	r0, [r3, #12]
 800b736:	b14c      	cbz	r4, 800b74c <__assert_func+0x24>
 800b738:	4b07      	ldr	r3, [pc, #28]	; (800b758 <__assert_func+0x30>)
 800b73a:	9100      	str	r1, [sp, #0]
 800b73c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b740:	4906      	ldr	r1, [pc, #24]	; (800b75c <__assert_func+0x34>)
 800b742:	462b      	mov	r3, r5
 800b744:	f000 f872 	bl	800b82c <fiprintf>
 800b748:	f000 f882 	bl	800b850 <abort>
 800b74c:	4b04      	ldr	r3, [pc, #16]	; (800b760 <__assert_func+0x38>)
 800b74e:	461c      	mov	r4, r3
 800b750:	e7f3      	b.n	800b73a <__assert_func+0x12>
 800b752:	bf00      	nop
 800b754:	20000074 	.word	0x20000074
 800b758:	0800c77f 	.word	0x0800c77f
 800b75c:	0800c78c 	.word	0x0800c78c
 800b760:	0800c7ba 	.word	0x0800c7ba

0800b764 <_calloc_r>:
 800b764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b766:	fba1 2402 	umull	r2, r4, r1, r2
 800b76a:	b94c      	cbnz	r4, 800b780 <_calloc_r+0x1c>
 800b76c:	4611      	mov	r1, r2
 800b76e:	9201      	str	r2, [sp, #4]
 800b770:	f7ff f9a2 	bl	800aab8 <_malloc_r>
 800b774:	9a01      	ldr	r2, [sp, #4]
 800b776:	4605      	mov	r5, r0
 800b778:	b930      	cbnz	r0, 800b788 <_calloc_r+0x24>
 800b77a:	4628      	mov	r0, r5
 800b77c:	b003      	add	sp, #12
 800b77e:	bd30      	pop	{r4, r5, pc}
 800b780:	220c      	movs	r2, #12
 800b782:	6002      	str	r2, [r0, #0]
 800b784:	2500      	movs	r5, #0
 800b786:	e7f8      	b.n	800b77a <_calloc_r+0x16>
 800b788:	4621      	mov	r1, r4
 800b78a:	f7fe fa48 	bl	8009c1e <memset>
 800b78e:	e7f4      	b.n	800b77a <_calloc_r+0x16>

0800b790 <__ascii_mbtowc>:
 800b790:	b082      	sub	sp, #8
 800b792:	b901      	cbnz	r1, 800b796 <__ascii_mbtowc+0x6>
 800b794:	a901      	add	r1, sp, #4
 800b796:	b142      	cbz	r2, 800b7aa <__ascii_mbtowc+0x1a>
 800b798:	b14b      	cbz	r3, 800b7ae <__ascii_mbtowc+0x1e>
 800b79a:	7813      	ldrb	r3, [r2, #0]
 800b79c:	600b      	str	r3, [r1, #0]
 800b79e:	7812      	ldrb	r2, [r2, #0]
 800b7a0:	1e10      	subs	r0, r2, #0
 800b7a2:	bf18      	it	ne
 800b7a4:	2001      	movne	r0, #1
 800b7a6:	b002      	add	sp, #8
 800b7a8:	4770      	bx	lr
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	e7fb      	b.n	800b7a6 <__ascii_mbtowc+0x16>
 800b7ae:	f06f 0001 	mvn.w	r0, #1
 800b7b2:	e7f8      	b.n	800b7a6 <__ascii_mbtowc+0x16>

0800b7b4 <_realloc_r>:
 800b7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	4614      	mov	r4, r2
 800b7bc:	460e      	mov	r6, r1
 800b7be:	b921      	cbnz	r1, 800b7ca <_realloc_r+0x16>
 800b7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	f7ff b977 	b.w	800aab8 <_malloc_r>
 800b7ca:	b92a      	cbnz	r2, 800b7d8 <_realloc_r+0x24>
 800b7cc:	f7ff f900 	bl	800a9d0 <_free_r>
 800b7d0:	4625      	mov	r5, r4
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d8:	f000 f841 	bl	800b85e <_malloc_usable_size_r>
 800b7dc:	4284      	cmp	r4, r0
 800b7de:	4607      	mov	r7, r0
 800b7e0:	d802      	bhi.n	800b7e8 <_realloc_r+0x34>
 800b7e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7e6:	d812      	bhi.n	800b80e <_realloc_r+0x5a>
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	f7ff f964 	bl	800aab8 <_malloc_r>
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d0ed      	beq.n	800b7d2 <_realloc_r+0x1e>
 800b7f6:	42bc      	cmp	r4, r7
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	bf28      	it	cs
 800b7fe:	463a      	movcs	r2, r7
 800b800:	f7fe fae3 	bl	8009dca <memcpy>
 800b804:	4631      	mov	r1, r6
 800b806:	4640      	mov	r0, r8
 800b808:	f7ff f8e2 	bl	800a9d0 <_free_r>
 800b80c:	e7e1      	b.n	800b7d2 <_realloc_r+0x1e>
 800b80e:	4635      	mov	r5, r6
 800b810:	e7df      	b.n	800b7d2 <_realloc_r+0x1e>

0800b812 <__ascii_wctomb>:
 800b812:	b149      	cbz	r1, 800b828 <__ascii_wctomb+0x16>
 800b814:	2aff      	cmp	r2, #255	; 0xff
 800b816:	bf85      	ittet	hi
 800b818:	238a      	movhi	r3, #138	; 0x8a
 800b81a:	6003      	strhi	r3, [r0, #0]
 800b81c:	700a      	strbls	r2, [r1, #0]
 800b81e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b822:	bf98      	it	ls
 800b824:	2001      	movls	r0, #1
 800b826:	4770      	bx	lr
 800b828:	4608      	mov	r0, r1
 800b82a:	4770      	bx	lr

0800b82c <fiprintf>:
 800b82c:	b40e      	push	{r1, r2, r3}
 800b82e:	b503      	push	{r0, r1, lr}
 800b830:	4601      	mov	r1, r0
 800b832:	ab03      	add	r3, sp, #12
 800b834:	4805      	ldr	r0, [pc, #20]	; (800b84c <fiprintf+0x20>)
 800b836:	f853 2b04 	ldr.w	r2, [r3], #4
 800b83a:	6800      	ldr	r0, [r0, #0]
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	f000 f83f 	bl	800b8c0 <_vfiprintf_r>
 800b842:	b002      	add	sp, #8
 800b844:	f85d eb04 	ldr.w	lr, [sp], #4
 800b848:	b003      	add	sp, #12
 800b84a:	4770      	bx	lr
 800b84c:	20000074 	.word	0x20000074

0800b850 <abort>:
 800b850:	b508      	push	{r3, lr}
 800b852:	2006      	movs	r0, #6
 800b854:	f000 fa0c 	bl	800bc70 <raise>
 800b858:	2001      	movs	r0, #1
 800b85a:	f7f6 f895 	bl	8001988 <_exit>

0800b85e <_malloc_usable_size_r>:
 800b85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b862:	1f18      	subs	r0, r3, #4
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfbc      	itt	lt
 800b868:	580b      	ldrlt	r3, [r1, r0]
 800b86a:	18c0      	addlt	r0, r0, r3
 800b86c:	4770      	bx	lr

0800b86e <__sfputc_r>:
 800b86e:	6893      	ldr	r3, [r2, #8]
 800b870:	3b01      	subs	r3, #1
 800b872:	2b00      	cmp	r3, #0
 800b874:	b410      	push	{r4}
 800b876:	6093      	str	r3, [r2, #8]
 800b878:	da08      	bge.n	800b88c <__sfputc_r+0x1e>
 800b87a:	6994      	ldr	r4, [r2, #24]
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	db01      	blt.n	800b884 <__sfputc_r+0x16>
 800b880:	290a      	cmp	r1, #10
 800b882:	d103      	bne.n	800b88c <__sfputc_r+0x1e>
 800b884:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b888:	f000 b934 	b.w	800baf4 <__swbuf_r>
 800b88c:	6813      	ldr	r3, [r2, #0]
 800b88e:	1c58      	adds	r0, r3, #1
 800b890:	6010      	str	r0, [r2, #0]
 800b892:	7019      	strb	r1, [r3, #0]
 800b894:	4608      	mov	r0, r1
 800b896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <__sfputs_r>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460f      	mov	r7, r1
 800b8a2:	4614      	mov	r4, r2
 800b8a4:	18d5      	adds	r5, r2, r3
 800b8a6:	42ac      	cmp	r4, r5
 800b8a8:	d101      	bne.n	800b8ae <__sfputs_r+0x12>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e007      	b.n	800b8be <__sfputs_r+0x22>
 800b8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b2:	463a      	mov	r2, r7
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f7ff ffda 	bl	800b86e <__sfputc_r>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d1f3      	bne.n	800b8a6 <__sfputs_r+0xa>
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8c0 <_vfiprintf_r>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	460d      	mov	r5, r1
 800b8c6:	b09d      	sub	sp, #116	; 0x74
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	4698      	mov	r8, r3
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	b118      	cbz	r0, 800b8d8 <_vfiprintf_r+0x18>
 800b8d0:	6a03      	ldr	r3, [r0, #32]
 800b8d2:	b90b      	cbnz	r3, 800b8d8 <_vfiprintf_r+0x18>
 800b8d4:	f7fe f90a 	bl	8009aec <__sinit>
 800b8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8da:	07d9      	lsls	r1, r3, #31
 800b8dc:	d405      	bmi.n	800b8ea <_vfiprintf_r+0x2a>
 800b8de:	89ab      	ldrh	r3, [r5, #12]
 800b8e0:	059a      	lsls	r2, r3, #22
 800b8e2:	d402      	bmi.n	800b8ea <_vfiprintf_r+0x2a>
 800b8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8e6:	f7fe fa6e 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 800b8ea:	89ab      	ldrh	r3, [r5, #12]
 800b8ec:	071b      	lsls	r3, r3, #28
 800b8ee:	d501      	bpl.n	800b8f4 <_vfiprintf_r+0x34>
 800b8f0:	692b      	ldr	r3, [r5, #16]
 800b8f2:	b99b      	cbnz	r3, 800b91c <_vfiprintf_r+0x5c>
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f000 f93a 	bl	800bb70 <__swsetup_r>
 800b8fc:	b170      	cbz	r0, 800b91c <_vfiprintf_r+0x5c>
 800b8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b900:	07dc      	lsls	r4, r3, #31
 800b902:	d504      	bpl.n	800b90e <_vfiprintf_r+0x4e>
 800b904:	f04f 30ff 	mov.w	r0, #4294967295
 800b908:	b01d      	add	sp, #116	; 0x74
 800b90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	0598      	lsls	r0, r3, #22
 800b912:	d4f7      	bmi.n	800b904 <_vfiprintf_r+0x44>
 800b914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b916:	f7fe fa57 	bl	8009dc8 <__retarget_lock_release_recursive>
 800b91a:	e7f3      	b.n	800b904 <_vfiprintf_r+0x44>
 800b91c:	2300      	movs	r3, #0
 800b91e:	9309      	str	r3, [sp, #36]	; 0x24
 800b920:	2320      	movs	r3, #32
 800b922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b926:	f8cd 800c 	str.w	r8, [sp, #12]
 800b92a:	2330      	movs	r3, #48	; 0x30
 800b92c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bae0 <_vfiprintf_r+0x220>
 800b930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b934:	f04f 0901 	mov.w	r9, #1
 800b938:	4623      	mov	r3, r4
 800b93a:	469a      	mov	sl, r3
 800b93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b940:	b10a      	cbz	r2, 800b946 <_vfiprintf_r+0x86>
 800b942:	2a25      	cmp	r2, #37	; 0x25
 800b944:	d1f9      	bne.n	800b93a <_vfiprintf_r+0x7a>
 800b946:	ebba 0b04 	subs.w	fp, sl, r4
 800b94a:	d00b      	beq.n	800b964 <_vfiprintf_r+0xa4>
 800b94c:	465b      	mov	r3, fp
 800b94e:	4622      	mov	r2, r4
 800b950:	4629      	mov	r1, r5
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff ffa2 	bl	800b89c <__sfputs_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	f000 80a9 	beq.w	800bab0 <_vfiprintf_r+0x1f0>
 800b95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b960:	445a      	add	r2, fp
 800b962:	9209      	str	r2, [sp, #36]	; 0x24
 800b964:	f89a 3000 	ldrb.w	r3, [sl]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 80a1 	beq.w	800bab0 <_vfiprintf_r+0x1f0>
 800b96e:	2300      	movs	r3, #0
 800b970:	f04f 32ff 	mov.w	r2, #4294967295
 800b974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b978:	f10a 0a01 	add.w	sl, sl, #1
 800b97c:	9304      	str	r3, [sp, #16]
 800b97e:	9307      	str	r3, [sp, #28]
 800b980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b984:	931a      	str	r3, [sp, #104]	; 0x68
 800b986:	4654      	mov	r4, sl
 800b988:	2205      	movs	r2, #5
 800b98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98e:	4854      	ldr	r0, [pc, #336]	; (800bae0 <_vfiprintf_r+0x220>)
 800b990:	f7f4 fc56 	bl	8000240 <memchr>
 800b994:	9a04      	ldr	r2, [sp, #16]
 800b996:	b9d8      	cbnz	r0, 800b9d0 <_vfiprintf_r+0x110>
 800b998:	06d1      	lsls	r1, r2, #27
 800b99a:	bf44      	itt	mi
 800b99c:	2320      	movmi	r3, #32
 800b99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9a2:	0713      	lsls	r3, r2, #28
 800b9a4:	bf44      	itt	mi
 800b9a6:	232b      	movmi	r3, #43	; 0x2b
 800b9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b2:	d015      	beq.n	800b9e0 <_vfiprintf_r+0x120>
 800b9b4:	9a07      	ldr	r2, [sp, #28]
 800b9b6:	4654      	mov	r4, sl
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f04f 0c0a 	mov.w	ip, #10
 800b9be:	4621      	mov	r1, r4
 800b9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c4:	3b30      	subs	r3, #48	; 0x30
 800b9c6:	2b09      	cmp	r3, #9
 800b9c8:	d94d      	bls.n	800ba66 <_vfiprintf_r+0x1a6>
 800b9ca:	b1b0      	cbz	r0, 800b9fa <_vfiprintf_r+0x13a>
 800b9cc:	9207      	str	r2, [sp, #28]
 800b9ce:	e014      	b.n	800b9fa <_vfiprintf_r+0x13a>
 800b9d0:	eba0 0308 	sub.w	r3, r0, r8
 800b9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	46a2      	mov	sl, r4
 800b9de:	e7d2      	b.n	800b986 <_vfiprintf_r+0xc6>
 800b9e0:	9b03      	ldr	r3, [sp, #12]
 800b9e2:	1d19      	adds	r1, r3, #4
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	9103      	str	r1, [sp, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bfbb      	ittet	lt
 800b9ec:	425b      	neglt	r3, r3
 800b9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b9f2:	9307      	strge	r3, [sp, #28]
 800b9f4:	9307      	strlt	r3, [sp, #28]
 800b9f6:	bfb8      	it	lt
 800b9f8:	9204      	strlt	r2, [sp, #16]
 800b9fa:	7823      	ldrb	r3, [r4, #0]
 800b9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9fe:	d10c      	bne.n	800ba1a <_vfiprintf_r+0x15a>
 800ba00:	7863      	ldrb	r3, [r4, #1]
 800ba02:	2b2a      	cmp	r3, #42	; 0x2a
 800ba04:	d134      	bne.n	800ba70 <_vfiprintf_r+0x1b0>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	1d1a      	adds	r2, r3, #4
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	9203      	str	r2, [sp, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfb8      	it	lt
 800ba12:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba16:	3402      	adds	r4, #2
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800baf0 <_vfiprintf_r+0x230>
 800ba1e:	7821      	ldrb	r1, [r4, #0]
 800ba20:	2203      	movs	r2, #3
 800ba22:	4650      	mov	r0, sl
 800ba24:	f7f4 fc0c 	bl	8000240 <memchr>
 800ba28:	b138      	cbz	r0, 800ba3a <_vfiprintf_r+0x17a>
 800ba2a:	9b04      	ldr	r3, [sp, #16]
 800ba2c:	eba0 000a 	sub.w	r0, r0, sl
 800ba30:	2240      	movs	r2, #64	; 0x40
 800ba32:	4082      	lsls	r2, r0
 800ba34:	4313      	orrs	r3, r2
 800ba36:	3401      	adds	r4, #1
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba3e:	4829      	ldr	r0, [pc, #164]	; (800bae4 <_vfiprintf_r+0x224>)
 800ba40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba44:	2206      	movs	r2, #6
 800ba46:	f7f4 fbfb 	bl	8000240 <memchr>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d03f      	beq.n	800bace <_vfiprintf_r+0x20e>
 800ba4e:	4b26      	ldr	r3, [pc, #152]	; (800bae8 <_vfiprintf_r+0x228>)
 800ba50:	bb1b      	cbnz	r3, 800ba9a <_vfiprintf_r+0x1da>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	3307      	adds	r3, #7
 800ba56:	f023 0307 	bic.w	r3, r3, #7
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba60:	443b      	add	r3, r7
 800ba62:	9309      	str	r3, [sp, #36]	; 0x24
 800ba64:	e768      	b.n	800b938 <_vfiprintf_r+0x78>
 800ba66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	e7a6      	b.n	800b9be <_vfiprintf_r+0xfe>
 800ba70:	2300      	movs	r3, #0
 800ba72:	3401      	adds	r4, #1
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	4619      	mov	r1, r3
 800ba78:	f04f 0c0a 	mov.w	ip, #10
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba82:	3a30      	subs	r2, #48	; 0x30
 800ba84:	2a09      	cmp	r2, #9
 800ba86:	d903      	bls.n	800ba90 <_vfiprintf_r+0x1d0>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d0c6      	beq.n	800ba1a <_vfiprintf_r+0x15a>
 800ba8c:	9105      	str	r1, [sp, #20]
 800ba8e:	e7c4      	b.n	800ba1a <_vfiprintf_r+0x15a>
 800ba90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba94:	4604      	mov	r4, r0
 800ba96:	2301      	movs	r3, #1
 800ba98:	e7f0      	b.n	800ba7c <_vfiprintf_r+0x1bc>
 800ba9a:	ab03      	add	r3, sp, #12
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	462a      	mov	r2, r5
 800baa0:	4b12      	ldr	r3, [pc, #72]	; (800baec <_vfiprintf_r+0x22c>)
 800baa2:	a904      	add	r1, sp, #16
 800baa4:	4630      	mov	r0, r6
 800baa6:	f7fd fbeb 	bl	8009280 <_printf_float>
 800baaa:	4607      	mov	r7, r0
 800baac:	1c78      	adds	r0, r7, #1
 800baae:	d1d6      	bne.n	800ba5e <_vfiprintf_r+0x19e>
 800bab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	d405      	bmi.n	800bac2 <_vfiprintf_r+0x202>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	059a      	lsls	r2, r3, #22
 800baba:	d402      	bmi.n	800bac2 <_vfiprintf_r+0x202>
 800babc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800babe:	f7fe f983 	bl	8009dc8 <__retarget_lock_release_recursive>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	065b      	lsls	r3, r3, #25
 800bac6:	f53f af1d 	bmi.w	800b904 <_vfiprintf_r+0x44>
 800baca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bacc:	e71c      	b.n	800b908 <_vfiprintf_r+0x48>
 800bace:	ab03      	add	r3, sp, #12
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	462a      	mov	r2, r5
 800bad4:	4b05      	ldr	r3, [pc, #20]	; (800baec <_vfiprintf_r+0x22c>)
 800bad6:	a904      	add	r1, sp, #16
 800bad8:	4630      	mov	r0, r6
 800bada:	f7fd fe59 	bl	8009790 <_printf_i>
 800bade:	e7e4      	b.n	800baaa <_vfiprintf_r+0x1ea>
 800bae0:	0800c764 	.word	0x0800c764
 800bae4:	0800c76e 	.word	0x0800c76e
 800bae8:	08009281 	.word	0x08009281
 800baec:	0800b89d 	.word	0x0800b89d
 800baf0:	0800c76a 	.word	0x0800c76a

0800baf4 <__swbuf_r>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	460e      	mov	r6, r1
 800baf8:	4614      	mov	r4, r2
 800bafa:	4605      	mov	r5, r0
 800bafc:	b118      	cbz	r0, 800bb06 <__swbuf_r+0x12>
 800bafe:	6a03      	ldr	r3, [r0, #32]
 800bb00:	b90b      	cbnz	r3, 800bb06 <__swbuf_r+0x12>
 800bb02:	f7fd fff3 	bl	8009aec <__sinit>
 800bb06:	69a3      	ldr	r3, [r4, #24]
 800bb08:	60a3      	str	r3, [r4, #8]
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	071a      	lsls	r2, r3, #28
 800bb0e:	d525      	bpl.n	800bb5c <__swbuf_r+0x68>
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	b31b      	cbz	r3, 800bb5c <__swbuf_r+0x68>
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	6922      	ldr	r2, [r4, #16]
 800bb18:	1a98      	subs	r0, r3, r2
 800bb1a:	6963      	ldr	r3, [r4, #20]
 800bb1c:	b2f6      	uxtb	r6, r6
 800bb1e:	4283      	cmp	r3, r0
 800bb20:	4637      	mov	r7, r6
 800bb22:	dc04      	bgt.n	800bb2e <__swbuf_r+0x3a>
 800bb24:	4621      	mov	r1, r4
 800bb26:	4628      	mov	r0, r5
 800bb28:	f7ff fdac 	bl	800b684 <_fflush_r>
 800bb2c:	b9e0      	cbnz	r0, 800bb68 <__swbuf_r+0x74>
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	60a3      	str	r3, [r4, #8]
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	6022      	str	r2, [r4, #0]
 800bb3a:	701e      	strb	r6, [r3, #0]
 800bb3c:	6962      	ldr	r2, [r4, #20]
 800bb3e:	1c43      	adds	r3, r0, #1
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d004      	beq.n	800bb4e <__swbuf_r+0x5a>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	07db      	lsls	r3, r3, #31
 800bb48:	d506      	bpl.n	800bb58 <__swbuf_r+0x64>
 800bb4a:	2e0a      	cmp	r6, #10
 800bb4c:	d104      	bne.n	800bb58 <__swbuf_r+0x64>
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4628      	mov	r0, r5
 800bb52:	f7ff fd97 	bl	800b684 <_fflush_r>
 800bb56:	b938      	cbnz	r0, 800bb68 <__swbuf_r+0x74>
 800bb58:	4638      	mov	r0, r7
 800bb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f000 f806 	bl	800bb70 <__swsetup_r>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d0d5      	beq.n	800bb14 <__swbuf_r+0x20>
 800bb68:	f04f 37ff 	mov.w	r7, #4294967295
 800bb6c:	e7f4      	b.n	800bb58 <__swbuf_r+0x64>
	...

0800bb70 <__swsetup_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4b2a      	ldr	r3, [pc, #168]	; (800bc1c <__swsetup_r+0xac>)
 800bb74:	4605      	mov	r5, r0
 800bb76:	6818      	ldr	r0, [r3, #0]
 800bb78:	460c      	mov	r4, r1
 800bb7a:	b118      	cbz	r0, 800bb84 <__swsetup_r+0x14>
 800bb7c:	6a03      	ldr	r3, [r0, #32]
 800bb7e:	b90b      	cbnz	r3, 800bb84 <__swsetup_r+0x14>
 800bb80:	f7fd ffb4 	bl	8009aec <__sinit>
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb8a:	0718      	lsls	r0, r3, #28
 800bb8c:	d422      	bmi.n	800bbd4 <__swsetup_r+0x64>
 800bb8e:	06d9      	lsls	r1, r3, #27
 800bb90:	d407      	bmi.n	800bba2 <__swsetup_r+0x32>
 800bb92:	2309      	movs	r3, #9
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bba0:	e034      	b.n	800bc0c <__swsetup_r+0x9c>
 800bba2:	0758      	lsls	r0, r3, #29
 800bba4:	d512      	bpl.n	800bbcc <__swsetup_r+0x5c>
 800bba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba8:	b141      	cbz	r1, 800bbbc <__swsetup_r+0x4c>
 800bbaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbae:	4299      	cmp	r1, r3
 800bbb0:	d002      	beq.n	800bbb8 <__swsetup_r+0x48>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7fe ff0c 	bl	800a9d0 <_free_r>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	6363      	str	r3, [r4, #52]	; 0x34
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	6063      	str	r3, [r4, #4]
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	6023      	str	r3, [r4, #0]
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f043 0308 	orr.w	r3, r3, #8
 800bbd2:	81a3      	strh	r3, [r4, #12]
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	b94b      	cbnz	r3, 800bbec <__swsetup_r+0x7c>
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe2:	d003      	beq.n	800bbec <__swsetup_r+0x7c>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f000 f884 	bl	800bcf4 <__smakebuf_r>
 800bbec:	89a0      	ldrh	r0, [r4, #12]
 800bbee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbf2:	f010 0301 	ands.w	r3, r0, #1
 800bbf6:	d00a      	beq.n	800bc0e <__swsetup_r+0x9e>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60a3      	str	r3, [r4, #8]
 800bbfc:	6963      	ldr	r3, [r4, #20]
 800bbfe:	425b      	negs	r3, r3
 800bc00:	61a3      	str	r3, [r4, #24]
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	b943      	cbnz	r3, 800bc18 <__swsetup_r+0xa8>
 800bc06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc0a:	d1c4      	bne.n	800bb96 <__swsetup_r+0x26>
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
 800bc0e:	0781      	lsls	r1, r0, #30
 800bc10:	bf58      	it	pl
 800bc12:	6963      	ldrpl	r3, [r4, #20]
 800bc14:	60a3      	str	r3, [r4, #8]
 800bc16:	e7f4      	b.n	800bc02 <__swsetup_r+0x92>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	e7f7      	b.n	800bc0c <__swsetup_r+0x9c>
 800bc1c:	20000074 	.word	0x20000074

0800bc20 <_raise_r>:
 800bc20:	291f      	cmp	r1, #31
 800bc22:	b538      	push	{r3, r4, r5, lr}
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	d904      	bls.n	800bc34 <_raise_r+0x14>
 800bc2a:	2316      	movs	r3, #22
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc36:	b112      	cbz	r2, 800bc3e <_raise_r+0x1e>
 800bc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc3c:	b94b      	cbnz	r3, 800bc52 <_raise_r+0x32>
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f830 	bl	800bca4 <_getpid_r>
 800bc44:	462a      	mov	r2, r5
 800bc46:	4601      	mov	r1, r0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc4e:	f000 b817 	b.w	800bc80 <_kill_r>
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d00a      	beq.n	800bc6c <_raise_r+0x4c>
 800bc56:	1c59      	adds	r1, r3, #1
 800bc58:	d103      	bne.n	800bc62 <_raise_r+0x42>
 800bc5a:	2316      	movs	r3, #22
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	2001      	movs	r0, #1
 800bc60:	e7e7      	b.n	800bc32 <_raise_r+0x12>
 800bc62:	2400      	movs	r4, #0
 800bc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc68:	4628      	mov	r0, r5
 800bc6a:	4798      	blx	r3
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e7e0      	b.n	800bc32 <_raise_r+0x12>

0800bc70 <raise>:
 800bc70:	4b02      	ldr	r3, [pc, #8]	; (800bc7c <raise+0xc>)
 800bc72:	4601      	mov	r1, r0
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	f7ff bfd3 	b.w	800bc20 <_raise_r>
 800bc7a:	bf00      	nop
 800bc7c:	20000074 	.word	0x20000074

0800bc80 <_kill_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d07      	ldr	r5, [pc, #28]	; (800bca0 <_kill_r+0x20>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	f7f5 fe6b 	bl	8001968 <_kill>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	d102      	bne.n	800bc9c <_kill_r+0x1c>
 800bc96:	682b      	ldr	r3, [r5, #0]
 800bc98:	b103      	cbz	r3, 800bc9c <_kill_r+0x1c>
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	bf00      	nop
 800bca0:	20005454 	.word	0x20005454

0800bca4 <_getpid_r>:
 800bca4:	f7f5 be58 	b.w	8001958 <_getpid>

0800bca8 <__swhatbuf_r>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	460c      	mov	r4, r1
 800bcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	b096      	sub	sp, #88	; 0x58
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	461e      	mov	r6, r3
 800bcb8:	da0d      	bge.n	800bcd6 <__swhatbuf_r+0x2e>
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bcc0:	f04f 0100 	mov.w	r1, #0
 800bcc4:	bf0c      	ite	eq
 800bcc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcca:	2340      	movne	r3, #64	; 0x40
 800bccc:	2000      	movs	r0, #0
 800bcce:	6031      	str	r1, [r6, #0]
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	b016      	add	sp, #88	; 0x58
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	466a      	mov	r2, sp
 800bcd8:	f000 f848 	bl	800bd6c <_fstat_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	dbec      	blt.n	800bcba <__swhatbuf_r+0x12>
 800bce0:	9901      	ldr	r1, [sp, #4]
 800bce2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bce6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcea:	4259      	negs	r1, r3
 800bcec:	4159      	adcs	r1, r3
 800bcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf2:	e7eb      	b.n	800bccc <__swhatbuf_r+0x24>

0800bcf4 <__smakebuf_r>:
 800bcf4:	898b      	ldrh	r3, [r1, #12]
 800bcf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcf8:	079d      	lsls	r5, r3, #30
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	d507      	bpl.n	800bd10 <__smakebuf_r+0x1c>
 800bd00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	6163      	str	r3, [r4, #20]
 800bd0c:	b002      	add	sp, #8
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}
 800bd10:	ab01      	add	r3, sp, #4
 800bd12:	466a      	mov	r2, sp
 800bd14:	f7ff ffc8 	bl	800bca8 <__swhatbuf_r>
 800bd18:	9900      	ldr	r1, [sp, #0]
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7fe fecb 	bl	800aab8 <_malloc_r>
 800bd22:	b948      	cbnz	r0, 800bd38 <__smakebuf_r+0x44>
 800bd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd28:	059a      	lsls	r2, r3, #22
 800bd2a:	d4ef      	bmi.n	800bd0c <__smakebuf_r+0x18>
 800bd2c:	f023 0303 	bic.w	r3, r3, #3
 800bd30:	f043 0302 	orr.w	r3, r3, #2
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	e7e3      	b.n	800bd00 <__smakebuf_r+0xc>
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	6020      	str	r0, [r4, #0]
 800bd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd40:	81a3      	strh	r3, [r4, #12]
 800bd42:	9b00      	ldr	r3, [sp, #0]
 800bd44:	6163      	str	r3, [r4, #20]
 800bd46:	9b01      	ldr	r3, [sp, #4]
 800bd48:	6120      	str	r0, [r4, #16]
 800bd4a:	b15b      	cbz	r3, 800bd64 <__smakebuf_r+0x70>
 800bd4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd50:	4630      	mov	r0, r6
 800bd52:	f000 f81d 	bl	800bd90 <_isatty_r>
 800bd56:	b128      	cbz	r0, 800bd64 <__smakebuf_r+0x70>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	f023 0303 	bic.w	r3, r3, #3
 800bd5e:	f043 0301 	orr.w	r3, r3, #1
 800bd62:	81a3      	strh	r3, [r4, #12]
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	431d      	orrs	r5, r3
 800bd68:	81a5      	strh	r5, [r4, #12]
 800bd6a:	e7cf      	b.n	800bd0c <__smakebuf_r+0x18>

0800bd6c <_fstat_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d07      	ldr	r5, [pc, #28]	; (800bd8c <_fstat_r+0x20>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	4611      	mov	r1, r2
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	f7f5 fe54 	bl	8001a26 <_fstat>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d102      	bne.n	800bd88 <_fstat_r+0x1c>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	b103      	cbz	r3, 800bd88 <_fstat_r+0x1c>
 800bd86:	6023      	str	r3, [r4, #0]
 800bd88:	bd38      	pop	{r3, r4, r5, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20005454 	.word	0x20005454

0800bd90 <_isatty_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d06      	ldr	r5, [pc, #24]	; (800bdac <_isatty_r+0x1c>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	602b      	str	r3, [r5, #0]
 800bd9c:	f7f5 fe53 	bl	8001a46 <_isatty>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_isatty_r+0x1a>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_isatty_r+0x1a>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	20005454 	.word	0x20005454

0800bdb0 <checkint>:
 800bdb0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bdb4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	b570      	push	{r4, r5, r6, lr}
 800bdbc:	dd2a      	ble.n	800be14 <checkint+0x64>
 800bdbe:	f240 4333 	movw	r3, #1075	; 0x433
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	dc24      	bgt.n	800be10 <checkint+0x60>
 800bdc6:	1a9b      	subs	r3, r3, r2
 800bdc8:	f1a3 0620 	sub.w	r6, r3, #32
 800bdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd0:	fa02 f403 	lsl.w	r4, r2, r3
 800bdd4:	fa02 f606 	lsl.w	r6, r2, r6
 800bdd8:	f1c3 0520 	rsb	r5, r3, #32
 800bddc:	fa22 f505 	lsr.w	r5, r2, r5
 800bde0:	4334      	orrs	r4, r6
 800bde2:	432c      	orrs	r4, r5
 800bde4:	409a      	lsls	r2, r3
 800bde6:	ea20 0202 	bic.w	r2, r0, r2
 800bdea:	ea21 0404 	bic.w	r4, r1, r4
 800bdee:	4322      	orrs	r2, r4
 800bdf0:	f1a3 0420 	sub.w	r4, r3, #32
 800bdf4:	f1c3 0220 	rsb	r2, r3, #32
 800bdf8:	d10c      	bne.n	800be14 <checkint+0x64>
 800bdfa:	40d8      	lsrs	r0, r3
 800bdfc:	fa01 f302 	lsl.w	r3, r1, r2
 800be00:	4318      	orrs	r0, r3
 800be02:	40e1      	lsrs	r1, r4
 800be04:	4308      	orrs	r0, r1
 800be06:	f000 0001 	and.w	r0, r0, #1
 800be0a:	f1d0 0002 	rsbs	r0, r0, #2
 800be0e:	bd70      	pop	{r4, r5, r6, pc}
 800be10:	2002      	movs	r0, #2
 800be12:	e7fc      	b.n	800be0e <checkint+0x5e>
 800be14:	2000      	movs	r0, #0
 800be16:	e7fa      	b.n	800be0e <checkint+0x5e>

0800be18 <pow>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	ee10 4a90 	vmov	r4, s1
 800be20:	ed2d 8b0a 	vpush	{d8-d12}
 800be24:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800be28:	ee11 aa90 	vmov	sl, s3
 800be2c:	f108 32ff 	add.w	r2, r8, #4294967295
 800be30:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800be34:	429a      	cmp	r2, r3
 800be36:	ee10 5a10 	vmov	r5, s0
 800be3a:	ee11 0a10 	vmov	r0, s2
 800be3e:	b087      	sub	sp, #28
 800be40:	46c4      	mov	ip, r8
 800be42:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800be46:	d806      	bhi.n	800be56 <pow+0x3e>
 800be48:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800be4c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800be50:	2b7f      	cmp	r3, #127	; 0x7f
 800be52:	f240 8156 	bls.w	800c102 <pow+0x2ea>
 800be56:	1802      	adds	r2, r0, r0
 800be58:	eb4a 010a 	adc.w	r1, sl, sl
 800be5c:	f06f 0b01 	mvn.w	fp, #1
 800be60:	1e57      	subs	r7, r2, #1
 800be62:	f141 33ff 	adc.w	r3, r1, #4294967295
 800be66:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800be6a:	45bb      	cmp	fp, r7
 800be6c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800be70:	d242      	bcs.n	800bef8 <pow+0xe0>
 800be72:	ea52 0301 	orrs.w	r3, r2, r1
 800be76:	f04f 0300 	mov.w	r3, #0
 800be7a:	d10c      	bne.n	800be96 <pow+0x7e>
 800be7c:	196d      	adds	r5, r5, r5
 800be7e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800be82:	4164      	adcs	r4, r4
 800be84:	42ab      	cmp	r3, r5
 800be86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be8a:	41a3      	sbcs	r3, r4
 800be8c:	f0c0 808f 	bcc.w	800bfae <pow+0x196>
 800be90:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800be94:	e02b      	b.n	800beee <pow+0xd6>
 800be96:	4ed4      	ldr	r6, [pc, #848]	; (800c1e8 <pow+0x3d0>)
 800be98:	42b4      	cmp	r4, r6
 800be9a:	bf08      	it	eq
 800be9c:	429d      	cmpeq	r5, r3
 800be9e:	d109      	bne.n	800beb4 <pow+0x9c>
 800bea0:	1800      	adds	r0, r0, r0
 800bea2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800bea6:	eb4a 0a0a 	adc.w	sl, sl, sl
 800beaa:	4283      	cmp	r3, r0
 800beac:	4bcf      	ldr	r3, [pc, #828]	; (800c1ec <pow+0x3d4>)
 800beae:	eb73 030a 	sbcs.w	r3, r3, sl
 800beb2:	e7eb      	b.n	800be8c <pow+0x74>
 800beb4:	196d      	adds	r5, r5, r5
 800beb6:	48ce      	ldr	r0, [pc, #824]	; (800c1f0 <pow+0x3d8>)
 800beb8:	4164      	adcs	r4, r4
 800beba:	42ab      	cmp	r3, r5
 800bebc:	eb70 0604 	sbcs.w	r6, r0, r4
 800bec0:	d375      	bcc.n	800bfae <pow+0x196>
 800bec2:	4281      	cmp	r1, r0
 800bec4:	bf08      	it	eq
 800bec6:	429a      	cmpeq	r2, r3
 800bec8:	d171      	bne.n	800bfae <pow+0x196>
 800beca:	4aca      	ldr	r2, [pc, #808]	; (800c1f4 <pow+0x3dc>)
 800becc:	4294      	cmp	r4, r2
 800bece:	bf08      	it	eq
 800bed0:	429d      	cmpeq	r5, r3
 800bed2:	d0dd      	beq.n	800be90 <pow+0x78>
 800bed4:	4294      	cmp	r4, r2
 800bed6:	ea6f 0a0a 	mvn.w	sl, sl
 800beda:	bf34      	ite	cc
 800bedc:	2400      	movcc	r4, #0
 800bede:	2401      	movcs	r4, #1
 800bee0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800bee4:	4554      	cmp	r4, sl
 800bee6:	f040 81dc 	bne.w	800c2a2 <pow+0x48a>
 800beea:	ee21 0b01 	vmul.f64	d0, d1, d1
 800beee:	b007      	add	sp, #28
 800bef0:	ecbd 8b0a 	vpop	{d8-d12}
 800bef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef8:	196f      	adds	r7, r5, r5
 800befa:	eb44 0904 	adc.w	r9, r4, r4
 800befe:	1e7a      	subs	r2, r7, #1
 800bf00:	f169 0300 	sbc.w	r3, r9, #0
 800bf04:	4593      	cmp	fp, r2
 800bf06:	eb7e 0303 	sbcs.w	r3, lr, r3
 800bf0a:	d225      	bcs.n	800bf58 <pow+0x140>
 800bf0c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800bf10:	2c00      	cmp	r4, #0
 800bf12:	da13      	bge.n	800bf3c <pow+0x124>
 800bf14:	4651      	mov	r1, sl
 800bf16:	f7ff ff4b 	bl	800bdb0 <checkint>
 800bf1a:	2801      	cmp	r0, #1
 800bf1c:	d10e      	bne.n	800bf3c <pow+0x124>
 800bf1e:	eeb1 0b40 	vneg.f64	d0, d0
 800bf22:	ea57 0909 	orrs.w	r9, r7, r9
 800bf26:	d10b      	bne.n	800bf40 <pow+0x128>
 800bf28:	f1ba 0f00 	cmp.w	sl, #0
 800bf2c:	dadf      	bge.n	800beee <pow+0xd6>
 800bf2e:	b007      	add	sp, #28
 800bf30:	ecbd 8b0a 	vpop	{d8-d12}
 800bf34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf38:	f000 b9ea 	b.w	800c310 <__math_divzero>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	e7f0      	b.n	800bf22 <pow+0x10a>
 800bf40:	f1ba 0f00 	cmp.w	sl, #0
 800bf44:	dad3      	bge.n	800beee <pow+0xd6>
 800bf46:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bf4a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800bf4e:	ed8d 7b00 	vstr	d7, [sp]
 800bf52:	ed9d 0b00 	vldr	d0, [sp]
 800bf56:	e7ca      	b.n	800beee <pow+0xd6>
 800bf58:	2c00      	cmp	r4, #0
 800bf5a:	da2b      	bge.n	800bfb4 <pow+0x19c>
 800bf5c:	4651      	mov	r1, sl
 800bf5e:	f7ff ff27 	bl	800bdb0 <checkint>
 800bf62:	b930      	cbnz	r0, 800bf72 <pow+0x15a>
 800bf64:	b007      	add	sp, #28
 800bf66:	ecbd 8b0a 	vpop	{d8-d12}
 800bf6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6e:	f000 b9e7 	b.w	800c340 <__math_invalid>
 800bf72:	1e41      	subs	r1, r0, #1
 800bf74:	4248      	negs	r0, r1
 800bf76:	4148      	adcs	r0, r1
 800bf78:	0480      	lsls	r0, r0, #18
 800bf7a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bf7e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800bf82:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800bf86:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800bf8a:	2b7f      	cmp	r3, #127	; 0x7f
 800bf8c:	d92d      	bls.n	800bfea <pow+0x1d2>
 800bf8e:	4b96      	ldr	r3, [pc, #600]	; (800c1e8 <pow+0x3d0>)
 800bf90:	2000      	movs	r0, #0
 800bf92:	429c      	cmp	r4, r3
 800bf94:	bf08      	it	eq
 800bf96:	4285      	cmpeq	r5, r0
 800bf98:	f43f af7a 	beq.w	800be90 <pow+0x78>
 800bf9c:	f240 31bd 	movw	r1, #957	; 0x3bd
 800bfa0:	428a      	cmp	r2, r1
 800bfa2:	d80c      	bhi.n	800bfbe <pow+0x1a6>
 800bfa4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bfa8:	42a8      	cmp	r0, r5
 800bfaa:	41a3      	sbcs	r3, r4
 800bfac:	d204      	bcs.n	800bfb8 <pow+0x1a0>
 800bfae:	ee31 0b00 	vadd.f64	d0, d1, d0
 800bfb2:	e79c      	b.n	800beee <pow+0xd6>
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	e7e4      	b.n	800bf82 <pow+0x16a>
 800bfb8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800bfbc:	e797      	b.n	800beee <pow+0xd6>
 800bfbe:	2d01      	cmp	r5, #1
 800bfc0:	eb74 0303 	sbcs.w	r3, r4, r3
 800bfc4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bfc8:	bf34      	ite	cc
 800bfca:	2301      	movcc	r3, #1
 800bfcc:	2300      	movcs	r3, #0
 800bfce:	4296      	cmp	r6, r2
 800bfd0:	bf8c      	ite	hi
 800bfd2:	2600      	movhi	r6, #0
 800bfd4:	2601      	movls	r6, #1
 800bfd6:	42b3      	cmp	r3, r6
 800bfd8:	f000 809b 	beq.w	800c112 <pow+0x2fa>
 800bfdc:	b007      	add	sp, #28
 800bfde:	ecbd 8b0a 	vpop	{d8-d12}
 800bfe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe6:	f000 b98b 	b.w	800c300 <__math_oflow>
 800bfea:	f1bc 0f00 	cmp.w	ip, #0
 800bfee:	d10b      	bne.n	800c008 <pow+0x1f0>
 800bff0:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800c1d8 <pow+0x3c0>
 800bff4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bff8:	ec53 2b17 	vmov	r2, r3, d7
 800bffc:	ee17 5a10 	vmov	r5, s14
 800c000:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c004:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800c008:	4b7b      	ldr	r3, [pc, #492]	; (800c1f8 <pow+0x3e0>)
 800c00a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c00e:	4423      	add	r3, r4
 800c010:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800c014:	1519      	asrs	r1, r3, #20
 800c016:	0d1b      	lsrs	r3, r3, #20
 800c018:	051b      	lsls	r3, r3, #20
 800c01a:	1ae7      	subs	r7, r4, r3
 800c01c:	4b77      	ldr	r3, [pc, #476]	; (800c1fc <pow+0x3e4>)
 800c01e:	ee03 1a10 	vmov	s6, r1
 800c022:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800c026:	1e2e      	subs	r6, r5, #0
 800c028:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800c02c:	ec47 6b15 	vmov	d5, r6, r7
 800c030:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800c034:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c038:	ed93 7b00 	vldr	d7, [r3]
 800c03c:	ed93 5b02 	vldr	d5, [r3, #8]
 800c040:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800c044:	eea3 2b07 	vfma.f64	d2, d3, d7
 800c048:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800c04c:	ee36 4b02 	vadd.f64	d4, d6, d2
 800c050:	ee32 2b44 	vsub.f64	d2, d2, d4
 800c054:	eea3 7b05 	vfma.f64	d7, d3, d5
 800c058:	ed93 5b04 	vldr	d5, [r3, #16]
 800c05c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800c060:	ee37 7b02 	vadd.f64	d7, d7, d2
 800c064:	ee26 5b05 	vmul.f64	d5, d6, d5
 800c068:	ee26 0b05 	vmul.f64	d0, d6, d5
 800c06c:	ee34 8b00 	vadd.f64	d8, d4, d0
 800c070:	eeb0 9b40 	vmov.f64	d9, d0
 800c074:	ee34 4b48 	vsub.f64	d4, d4, d8
 800c078:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800c07c:	ee34 ab00 	vadd.f64	d10, d4, d0
 800c080:	ed93 5b06 	vldr	d5, [r3, #24]
 800c084:	ee26 bb00 	vmul.f64	d11, d6, d0
 800c088:	ee37 7b09 	vadd.f64	d7, d7, d9
 800c08c:	ed93 4b08 	vldr	d4, [r3, #32]
 800c090:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800c094:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800c098:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c09c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800c0a0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800c0a4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c0a8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800c0ac:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800c0b0:	eea0 4b03 	vfma.f64	d4, d0, d3
 800c0b4:	eea0 5b04 	vfma.f64	d5, d0, d4
 800c0b8:	eeab 7b05 	vfma.f64	d7, d11, d5
 800c0bc:	ee38 4b07 	vadd.f64	d4, d8, d7
 800c0c0:	ee21 6b04 	vmul.f64	d6, d1, d4
 800c0c4:	ee16 3a90 	vmov	r3, s13
 800c0c8:	eeb0 5b46 	vmov.f64	d5, d6
 800c0cc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800c0d0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800c0d4:	18b2      	adds	r2, r6, r2
 800c0d6:	2a3e      	cmp	r2, #62	; 0x3e
 800c0d8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800c0dc:	ee38 8b44 	vsub.f64	d8, d8, d4
 800c0e0:	ee38 8b07 	vadd.f64	d8, d8, d7
 800c0e4:	eea1 5b08 	vfma.f64	d5, d1, d8
 800c0e8:	d91b      	bls.n	800c122 <pow+0x30a>
 800c0ea:	2a00      	cmp	r2, #0
 800c0ec:	da0b      	bge.n	800c106 <pow+0x2ee>
 800c0ee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c0f2:	ee36 0b00 	vadd.f64	d0, d6, d0
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f43f aef9 	beq.w	800beee <pow+0xd6>
 800c0fc:	eeb1 0b40 	vneg.f64	d0, d0
 800c100:	e6f5      	b.n	800beee <pow+0xd6>
 800c102:	2000      	movs	r0, #0
 800c104:	e780      	b.n	800c008 <pow+0x1f0>
 800c106:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800c10a:	d909      	bls.n	800c120 <pow+0x308>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f6bf af65 	bge.w	800bfdc <pow+0x1c4>
 800c112:	b007      	add	sp, #28
 800c114:	ecbd 8b0a 	vpop	{d8-d12}
 800c118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	f000 b8e8 	b.w	800c2f0 <__math_uflow>
 800c120:	2600      	movs	r6, #0
 800c122:	4937      	ldr	r1, [pc, #220]	; (800c200 <pow+0x3e8>)
 800c124:	ed91 4b02 	vldr	d4, [r1, #8]
 800c128:	ed91 3b00 	vldr	d3, [r1]
 800c12c:	eeb0 7b44 	vmov.f64	d7, d4
 800c130:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c134:	ee17 5a10 	vmov	r5, s14
 800c138:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c13c:	ed91 4b04 	vldr	d4, [r1, #16]
 800c140:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800c144:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c148:	ed91 4b06 	vldr	d4, [r1, #24]
 800c14c:	18dc      	adds	r4, r3, r3
 800c14e:	f104 030f 	add.w	r3, r4, #15
 800c152:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800c156:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c15a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800c15e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c162:	ee25 6b05 	vmul.f64	d6, d5, d5
 800c166:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800c16a:	ed91 4b08 	vldr	d4, [r1, #32]
 800c16e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c172:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800c176:	eea5 4b03 	vfma.f64	d4, d5, d3
 800c17a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800c17e:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c182:	ee26 6b06 	vmul.f64	d6, d6, d6
 800c186:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800c18a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800c18e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800c192:	eea5 4b03 	vfma.f64	d4, d5, d3
 800c196:	1940      	adds	r0, r0, r5
 800c198:	2700      	movs	r7, #0
 800c19a:	eb17 020c 	adds.w	r2, r7, ip
 800c19e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800c1a2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	d176      	bne.n	800c298 <pow+0x480>
 800c1aa:	42bd      	cmp	r5, r7
 800c1ac:	db2a      	blt.n	800c204 <pow+0x3ec>
 800c1ae:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800c1b2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	ec41 0b10 	vmov	d0, r0, r1
 800c1bc:	eea7 0b00 	vfma.f64	d0, d7, d0
 800c1c0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800c1e0 <pow+0x3c8>
 800c1c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c1c8:	b007      	add	sp, #28
 800c1ca:	ecbd 8b0a 	vpop	{d8-d12}
 800c1ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d2:	f000 b8cd 	b.w	800c370 <__math_check_oflow>
 800c1d6:	bf00      	nop
 800c1d8:	00000000 	.word	0x00000000
 800c1dc:	43300000 	.word	0x43300000
 800c1e0:	00000000 	.word	0x00000000
 800c1e4:	7f000000 	.word	0x7f000000
 800c1e8:	3ff00000 	.word	0x3ff00000
 800c1ec:	fff00000 	.word	0xfff00000
 800c1f0:	ffe00000 	.word	0xffe00000
 800c1f4:	7fe00000 	.word	0x7fe00000
 800c1f8:	c0196aab 	.word	0xc0196aab
 800c1fc:	0800c8c0 	.word	0x0800c8c0
 800c200:	0800d908 	.word	0x0800d908
 800c204:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c208:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800c20c:	4610      	mov	r0, r2
 800c20e:	ec41 0b15 	vmov	d5, r0, r1
 800c212:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800c216:	ee27 6b05 	vmul.f64	d6, d7, d5
 800c21a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800c21e:	eeb0 4bc7 	vabs.f64	d4, d7
 800c222:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800c226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800c2a8 <pow+0x490>
 800c22e:	d52a      	bpl.n	800c286 <pow+0x46e>
 800c230:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c234:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c240:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800c244:	bf58      	it	pl
 800c246:	eeb0 4b43 	vmovpl.f64	d4, d3
 800c24a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800c24e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800c252:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c256:	ee36 6b05 	vadd.f64	d6, d6, d5
 800c25a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800c25e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800c262:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26a:	d104      	bne.n	800c276 <pow+0x45e>
 800c26c:	4632      	mov	r2, r6
 800c26e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c272:	ec43 2b17 	vmov	d7, r2, r3
 800c276:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c27a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c27e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800c282:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c286:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c28a:	b007      	add	sp, #28
 800c28c:	ecbd 8b0a 	vpop	{d8-d12}
 800c290:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	f000 b863 	b.w	800c35e <__math_check_uflow>
 800c298:	ec43 2b10 	vmov	d0, r2, r3
 800c29c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800c2a0:	e625      	b.n	800beee <pow+0xd6>
 800c2a2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800c2b0 <pow+0x498>
 800c2a6:	e622      	b.n	800beee <pow+0xd6>
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	00100000 	.word	0x00100000
	...

0800c2b8 <with_errno>:
 800c2b8:	b513      	push	{r0, r1, r4, lr}
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	ed8d 0b00 	vstr	d0, [sp]
 800c2c0:	f7fd fd56 	bl	8009d70 <__errno>
 800c2c4:	ed9d 0b00 	vldr	d0, [sp]
 800c2c8:	6004      	str	r4, [r0, #0]
 800c2ca:	b002      	add	sp, #8
 800c2cc:	bd10      	pop	{r4, pc}

0800c2ce <xflow>:
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	b158      	cbz	r0, 800c2ea <xflow+0x1c>
 800c2d2:	eeb1 7b40 	vneg.f64	d7, d0
 800c2d6:	ed8d 7b00 	vstr	d7, [sp]
 800c2da:	ed9d 7b00 	vldr	d7, [sp]
 800c2de:	2022      	movs	r0, #34	; 0x22
 800c2e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c2e4:	b002      	add	sp, #8
 800c2e6:	f7ff bfe7 	b.w	800c2b8 <with_errno>
 800c2ea:	eeb0 7b40 	vmov.f64	d7, d0
 800c2ee:	e7f2      	b.n	800c2d6 <xflow+0x8>

0800c2f0 <__math_uflow>:
 800c2f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2f8 <__math_uflow+0x8>
 800c2f4:	f7ff bfeb 	b.w	800c2ce <xflow>
 800c2f8:	00000000 	.word	0x00000000
 800c2fc:	10000000 	.word	0x10000000

0800c300 <__math_oflow>:
 800c300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c308 <__math_oflow+0x8>
 800c304:	f7ff bfe3 	b.w	800c2ce <xflow>
 800c308:	00000000 	.word	0x00000000
 800c30c:	70000000 	.word	0x70000000

0800c310 <__math_divzero>:
 800c310:	b082      	sub	sp, #8
 800c312:	2800      	cmp	r0, #0
 800c314:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c318:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800c31c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800c320:	ed8d 7b00 	vstr	d7, [sp]
 800c324:	ed9d 0b00 	vldr	d0, [sp]
 800c328:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800c338 <__math_divzero+0x28>
 800c32c:	2022      	movs	r0, #34	; 0x22
 800c32e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800c332:	b002      	add	sp, #8
 800c334:	f7ff bfc0 	b.w	800c2b8 <with_errno>
	...

0800c340 <__math_invalid>:
 800c340:	eeb0 7b40 	vmov.f64	d7, d0
 800c344:	eeb4 7b47 	vcmp.f64	d7, d7
 800c348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800c350:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800c354:	d602      	bvs.n	800c35c <__math_invalid+0x1c>
 800c356:	2021      	movs	r0, #33	; 0x21
 800c358:	f7ff bfae 	b.w	800c2b8 <with_errno>
 800c35c:	4770      	bx	lr

0800c35e <__math_check_uflow>:
 800c35e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c366:	d102      	bne.n	800c36e <__math_check_uflow+0x10>
 800c368:	2022      	movs	r0, #34	; 0x22
 800c36a:	f7ff bfa5 	b.w	800c2b8 <with_errno>
 800c36e:	4770      	bx	lr

0800c370 <__math_check_oflow>:
 800c370:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800c390 <__math_check_oflow+0x20>
 800c374:	eeb0 7bc0 	vabs.f64	d7, d0
 800c378:	eeb4 7b46 	vcmp.f64	d7, d6
 800c37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c380:	dd02      	ble.n	800c388 <__math_check_oflow+0x18>
 800c382:	2022      	movs	r0, #34	; 0x22
 800c384:	f7ff bf98 	b.w	800c2b8 <with_errno>
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w
 800c390:	ffffffff 	.word	0xffffffff
 800c394:	7fefffff 	.word	0x7fefffff

0800c398 <_init>:
 800c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39a:	bf00      	nop
 800c39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39e:	bc08      	pop	{r3}
 800c3a0:	469e      	mov	lr, r3
 800c3a2:	4770      	bx	lr

0800c3a4 <_fini>:
 800c3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a6:	bf00      	nop
 800c3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3aa:	bc08      	pop	{r3}
 800c3ac:	469e      	mov	lr, r3
 800c3ae:	4770      	bx	lr
