
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3d0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc0  0800d5d0  0800d5d0  0000e5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f290  0800f290  00011230  2**0
                  CONTENTS
  4 .ARM          00000008  0800f290  0800f290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f298  0800f298  00011230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f298  0800f298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f29c  0800f29c  0001029c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800f2a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053a0  20000230  0800f4d0  00011230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200055d0  0800f4d0  000115d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025137  00000000  00000000  0001125e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fc8  00000000  00000000  00036395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0003b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001671  00000000  00000000  0003d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cec6  00000000  00000000  0003e6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000248e0  00000000  00000000  0006b59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111e1b  00000000  00000000  0008fe7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a1c9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089d8  00000000  00000000  001a1ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001aa6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000230 	.word	0x20000230
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d5b8 	.word	0x0800d5b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000234 	.word	0x20000234
 800023c:	0800d5b8 	.word	0x0800d5b8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_3;
 80005f6:	2303      	movs	r3, #3
 80005f8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f002 fe15 	bl	8003238 <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000614:	f001 fe9c 	bl	8002350 <Error_Handler>
	}
	return;
 8000618:	bf00      	nop
 800061a:	bf00      	nop
}
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	0000      	movs	r0, r0
 8000624:	0000      	movs	r0, r0
	...

08000628 <readFlow>:
float readFlow(float voltage)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	ed87 0a01 	vstr	s0, [r7, #4]
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	//instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
	instFlow = (voltage - 0.63) / 0.0128;	// calibrated
 8000632:	edd7 7a01 	vldr	s15, [r7, #4]
 8000636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800063a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8000670 <readFlow+0x48>
 800063e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000642:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 8000678 <readFlow+0x50>
 8000646:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800064a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <readFlow+0x58>)
 8000650:	edc3 7a00 	vstr	s15, [r3]
	return instFlow;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <readFlow+0x58>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	ee07 3a90 	vmov	s15, r3
}
 800065c:	eeb0 0a67 	vmov.f32	s0, s15
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	f3af 8000 	nop.w
 8000670:	c28f5c29 	.word	0xc28f5c29
 8000674:	3fe428f5 	.word	0x3fe428f5
 8000678:	eb1c432d 	.word	0xeb1c432d
 800067c:	3f8a36e2 	.word	0x3f8a36e2
 8000680:	2000024c 	.word	0x2000024c

08000684 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	ee07 3a90 	vmov	s15, r3
 8000694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000698:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80006c8 <setFlowRate+0x44>
 800069c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80006cc <setFlowRate+0x48>
 80006a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ac:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80006d0 <setFlowRate+0x4c>
 80006b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006b4:	eef0 7a66 	vmov.f32	s15, s13

}
 80006b8:	eeb0 0a67 	vmov.f32	s0, s15
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	3ca3d70a 	.word	0x3ca3d70a
 80006cc:	00000001 	.word	0x00000001
 80006d0:	3fc147ae 	.word	0x3fc147ae

080006d4 <flowRateMethod>:

void flowRateMethod(uint8_t method){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	// This must change
//


	// This needs to be tested
	if(method == 0){
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d103      	bne.n	80006ec <flowRateMethod+0x18>
		FlowMethodPin.Mode = GPIO_MODE_INPUT;
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <flowRateMethod+0x34>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	e002      	b.n	80006f2 <flowRateMethod+0x1e>
	} else{
		FlowMethodPin.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <flowRateMethod+0x34>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
	}
	HAL_GPIO_Init(FlowMethodGroup, &FlowMethodPin);
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <flowRateMethod+0x38>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4904      	ldr	r1, [pc, #16]	@ (8000708 <flowRateMethod+0x34>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fab7 	bl	8003c6c <HAL_GPIO_Init>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000
 800070c:	20000014 	.word	0x20000014

08000710 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ModeInput1Group, ModeInput1Pin, 0);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <flowStateClose+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a08      	ldr	r2, [pc, #32]	@ (800073c <flowStateClose+0x2c>)
 800071a:	8811      	ldrh	r1, [r2, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fc50 	bl	8003fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ModeInput2Group, ModeInput2Pin, 0);
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <flowStateClose+0x30>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a06      	ldr	r2, [pc, #24]	@ (8000744 <flowStateClose+0x34>)
 800072a:	8811      	ldrh	r1, [r2, #0]
 800072c:	2200      	movs	r2, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fc48 	bl	8003fc4 <HAL_GPIO_WritePin>
return;
 8000734:	bf00      	nop
}
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000020 	.word	0x20000020
 800073c:	20000024 	.word	0x20000024
 8000740:	20000018 	.word	0x20000018
 8000744:	2000001c 	.word	0x2000001c

08000748 <flowStateOpen>:
void flowStateOpen(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ModeInput1Group, ModeInput1Pin, 1);
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <flowStateOpen+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <flowStateOpen+0x2c>)
 8000752:	8811      	ldrh	r1, [r2, #0]
 8000754:	2201      	movs	r2, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fc34 	bl	8003fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ModeInput2Group, ModeInput2Pin, 0);
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <flowStateOpen+0x30>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a06      	ldr	r2, [pc, #24]	@ (800077c <flowStateOpen+0x34>)
 8000762:	8811      	ldrh	r1, [r2, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fc2c 	bl	8003fc4 <HAL_GPIO_WritePin>
return;
 800076c:	bf00      	nop
}
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000020 	.word	0x20000020
 8000774:	20000024 	.word	0x20000024
 8000778:	20000018 	.word	0x20000018
 800077c:	2000001c 	.word	0x2000001c

08000780 <flowStateControl>:
void flowStateControl(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(ModeInput1Group, ModeInput1Pin, 0);	// PB_6 state is irrelevant
	HAL_GPIO_WritePin(ModeInput2Group, ModeInput2Pin, 1);
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <flowStateControl+0x18>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <flowStateControl+0x1c>)
 800078a:	8811      	ldrh	r1, [r2, #0]
 800078c:	2201      	movs	r2, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fc18 	bl	8003fc4 <HAL_GPIO_WritePin>
return;
 8000794:	bf00      	nop
}
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000018 	.word	0x20000018
 800079c:	2000001c 	.word	0x2000001c

080007a0 <stepperOpen>:

void stepperClose(){
	steps = MAX_STEP;
}

void stepperOpen(){
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	steps = 0;
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <stepperOpen+0x14>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	801a      	strh	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	20000254 	.word	0x20000254

080007b8 <stepperStep>:

void stepperStep(uint16_t num){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	if(num > MAX_STEP){
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80007c8:	d904      	bls.n	80007d4 <stepperStep+0x1c>
		steps = MAX_STEP;
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <stepperStep+0x30>)
 80007cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80007d0:	801a      	strh	r2, [r3, #0]
	}else{
	steps = num;
	}
}
 80007d2:	e002      	b.n	80007da <stepperStep+0x22>
	steps = num;
 80007d4:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <stepperStep+0x30>)
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	8013      	strh	r3, [r2, #0]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000254 	.word	0x20000254

080007ec <recalibrate>:

void recalibrate(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	currPos = MAX_STEP;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <recalibrate+0x20>)
 80007f2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80007f6:	801a      	strh	r2, [r3, #0]
	toggleCount = currPos * 2;
 80007f8:	4b04      	ldr	r3, [pc, #16]	@ (800080c <recalibrate+0x20>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <recalibrate+0x24>)
 8000802:	801a      	strh	r2, [r3, #0]
	stepperOpen();
 8000804:	f7ff ffcc 	bl	80007a0 <stepperOpen>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000252 	.word	0x20000252
 8000810:	20000250 	.word	0x20000250

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	pumpTestsParameters[0].currentState = &pumpTestsParameters[0].stateList[0];
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <main+0x70>)
 800081a:	4a1a      	ldr	r2, [pc, #104]	@ (8000884 <main+0x70>)
 800081c:	615a      	str	r2, [r3, #20]
	pumpTestsParameters[1].currentState = &pumpTestsParameters[1].stateList[0];
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <main+0x70>)
 8000820:	4a19      	ldr	r2, [pc, #100]	@ (8000888 <main+0x74>)
 8000822:	665a      	str	r2, [r3, #100]	@ 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f002 fad9 	bl	8002dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f83c 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 fa20 	bl	8000c70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000830:	f000 f9c0 	bl	8000bb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000834:	f000 f9ee 	bl	8000c14 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000838:	f000 f8a6 	bl	8000988 <MX_ADC1_Init>
  MX_DAC_Init();
 800083c:	f000 f906 	bl	8000a4c <MX_DAC_Init>
  MX_TIM10_Init();
 8000840:	f000 f964 	bl	8000b0c <MX_TIM10_Init>
  MX_TIM7_Init();
 8000844:	f000 f92c 	bl	8000aa0 <MX_TIM7_Init>
  MX_UART5_Init();
 8000848:	f000 f984 	bl	8000b54 <MX_UART5_Init>
  // HAL_TIM_Base_Start_IT(&htim7);
  // establishConnection(&huart3);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800084c:	f006 ffd0 	bl	80077f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 8000850:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <main+0x78>)
 8000852:	2100      	movs	r1, #0
 8000854:	480e      	ldr	r0, [pc, #56]	@ (8000890 <main+0x7c>)
 8000856:	f007 f835 	bl	80078c4 <osThreadNew>
 800085a:	4603      	mov	r3, r0
 800085c:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <main+0x80>)
 800085e:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 8000860:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <main+0x84>)
 8000862:	2100      	movs	r1, #0
 8000864:	480d      	ldr	r0, [pc, #52]	@ (800089c <main+0x88>)
 8000866:	f007 f82d 	bl	80078c4 <osThreadNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <main+0x8c>)
 800086e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 8000870:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <main+0x8c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f007 f8cb 	bl	8007a10 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800087a:	f006 ffed 	bl	8007858 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <main+0x6a>
 8000882:	bf00      	nop
 8000884:	2000096c 	.word	0x2000096c
 8000888:	200009bc 	.word	0x200009bc
 800088c:	0800d604 	.word	0x0800d604
 8000890:	08000f61 	.word	0x08000f61
 8000894:	20000964 	.word	0x20000964
 8000898:	0800d628 	.word	0x0800d628
 800089c:	08001ff1 	.word	0x08001ff1
 80008a0:	20000968 	.word	0x20000968

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	@ 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00a fc7d 	bl	800b1b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008c8:	f003 fcf8 	bl	80042bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <SystemClock_Config+0xdc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000980 <SystemClock_Config+0xdc>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <SystemClock_Config+0xdc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e4:	4b27      	ldr	r3, [pc, #156]	@ (8000984 <SystemClock_Config+0xe0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008ec:	4a25      	ldr	r2, [pc, #148]	@ (8000984 <SystemClock_Config+0xe0>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b23      	ldr	r3, [pc, #140]	@ (8000984 <SystemClock_Config+0xe0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000908:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000912:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000918:	2360      	movs	r3, #96	@ 0x60
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fd25 	bl	800437c <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000938:	f001 fd0a 	bl	8002350 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800093c:	f003 fcce 	bl	80042dc <HAL_PWREx_EnableOverDrive>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000946:	f001 fd03 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2302      	movs	r3, #2
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	2103      	movs	r1, #3
 8000966:	4618      	mov	r0, r3
 8000968:	f003 ffb6 	bl	80048d8 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000972:	f001 fced 	bl	8002350 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	@ 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800099a:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 800099c:	4a29      	ldr	r2, [pc, #164]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 800099e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ae:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000a48 <MX_ADC1_Init+0xc0>)
 80009cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e8:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 80009ea:	f002 fa47 	bl	8002e7c <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009f4:	f001 fcac 	bl	8002350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009f8:	2303      	movs	r3, #3
 80009fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000a00:	2302      	movs	r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 8000a0a:	f002 fc15 	bl	8003238 <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a14:	f001 fc9c 	bl	8002350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a18:	230a      	movs	r3, #10
 8000a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000a20:	2303      	movs	r3, #3
 8000a22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_ADC1_Init+0xb8>)
 8000a2a:	f002 fc05 	bl	8003238 <HAL_ADC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a34:	f001 fc8c 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000258 	.word	0x20000258
 8000a44:	40012000 	.word	0x40012000
 8000a48:	0f000001 	.word	0x0f000001

08000a4c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_DAC_Init+0x4c>)
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <MX_DAC_Init+0x50>)
 8000a5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_DAC_Init+0x4c>)
 8000a62:	f002 ff1b 	bl	800389c <HAL_DAC_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a6c:	f001 fc70 	bl	8002350 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_DAC_Init+0x4c>)
 8000a80:	f003 f809 	bl	8003a96 <HAL_DAC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a8a:	f001 fc61 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200002a0 	.word	0x200002a0
 8000a9c:	40007400 	.word	0x40007400

08000aa0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_TIM7_Init+0x64>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	@ (8000b08 <MX_TIM7_Init+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600 - 1;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_TIM7_Init+0x64>)
 8000ab8:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000abc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_TIM7_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5 - 1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_TIM7_Init+0x64>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_TIM7_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <MX_TIM7_Init+0x64>)
 8000ad2:	f004 fd81 	bl	80055d8 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000adc:	f001 fc38 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_TIM7_Init+0x64>)
 8000aee:	f005 f859 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f001 fc2a 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200002b4 	.word	0x200002b4
 8000b08:	40001400 	.word	0x40001400

08000b0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_TIM10_Init+0x40>)
 8000b12:	4a0f      	ldr	r2, [pc, #60]	@ (8000b50 <MX_TIM10_Init+0x44>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48000 - 1;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <MX_TIM10_Init+0x40>)
 8000b18:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_TIM10_Init+0x40>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000 - 1;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_TIM10_Init+0x40>)
 8000b26:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000b2a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_TIM10_Init+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_TIM10_Init+0x40>)
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_TIM10_Init+0x40>)
 8000b3a:	f004 fd4d 	bl	80055d8 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000b44:	f001 fc04 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000300 	.word	0x20000300
 8000b50:	40014400 	.word	0x40014400

08000b54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <MX_UART5_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b80:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b84:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b9a:	f005 f8af 	bl	8005cfc <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_UART5_Init+0x54>
  {
    Error_Handler();
 8000ba4:	f001 fbd4 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000034c 	.word	0x2000034c
 8000bb0:	40005000 	.word	0x40005000

08000bb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <MX_USART3_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf8:	f005 f880 	bl	8005cfc <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f001 fba5 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200003d4 	.word	0x200003d4
 8000c10:	40004800 	.word	0x40004800

08000c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2206      	movs	r2, #6
 8000c24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c58:	f003 f9e7 	bl	800402a <HAL_PCD_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c62:	f001 fb75 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000045c 	.word	0x2000045c

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	@ 0x38
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	4ba2      	ldr	r3, [pc, #648]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4aa1      	ldr	r2, [pc, #644]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b9f      	ldr	r3, [pc, #636]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a9b      	ldr	r2, [pc, #620]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b99      	ldr	r3, [pc, #612]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb6:	4b96      	ldr	r3, [pc, #600]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a95      	ldr	r2, [pc, #596]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cbc:	f043 0320 	orr.w	r3, r3, #32
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b93      	ldr	r3, [pc, #588]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	4b90      	ldr	r3, [pc, #576]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a8f      	ldr	r2, [pc, #572]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b8d      	ldr	r3, [pc, #564]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a89      	ldr	r2, [pc, #548]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b87      	ldr	r3, [pc, #540]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b84      	ldr	r3, [pc, #528]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a83      	ldr	r2, [pc, #524]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b81      	ldr	r3, [pc, #516]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	4b7e      	ldr	r3, [pc, #504]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a7d      	ldr	r2, [pc, #500]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b7b      	ldr	r3, [pc, #492]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2e:	4b78      	ldr	r3, [pc, #480]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a77      	ldr	r2, [pc, #476]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b75      	ldr	r3, [pc, #468]	@ (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4872      	ldr	r0, [pc, #456]	@ (8000f14 <MX_GPIO_Init+0x2a4>)
 8000d4c:	f003 f93a 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, motor2gpio_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2130      	movs	r1, #48	@ 0x30
 8000d54:	4870      	ldr	r0, [pc, #448]	@ (8000f18 <MX_GPIO_Init+0x2a8>)
 8000d56:	f003 f935 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	486f      	ldr	r0, [pc, #444]	@ (8000f1c <MX_GPIO_Init+0x2ac>)
 8000d60:	f003 f930 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_2|LD3_Pin|GPIO_PIN_6
 8000d64:	2200      	movs	r2, #0
 8000d66:	f244 01c5 	movw	r1, #16581	@ 0x40c5
 8000d6a:	486d      	ldr	r0, [pc, #436]	@ (8000f20 <MX_GPIO_Init+0x2b0>)
 8000d6c:	f003 f92a 	bl	8003fc4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4
 8000d70:	2200      	movs	r2, #0
 8000d72:	f643 01f0 	movw	r1, #14576	@ 0x38f0
 8000d76:	486b      	ldr	r0, [pc, #428]	@ (8000f24 <MX_GPIO_Init+0x2b4>)
 8000d78:	f003 f924 	bl	8003fc4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2148      	movs	r1, #72	@ 0x48
 8000d80:	4869      	ldr	r0, [pc, #420]	@ (8000f28 <MX_GPIO_Init+0x2b8>)
 8000d82:	f003 f91f 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d86:	2304      	movs	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	485d      	ldr	r0, [pc, #372]	@ (8000f14 <MX_GPIO_Init+0x2a4>)
 8000d9e:	f002 ff65 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000da2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4858      	ldr	r0, [pc, #352]	@ (8000f1c <MX_GPIO_Init+0x2ac>)
 8000dba:	f002 ff57 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : motor2gpio_Pin */
  GPIO_InitStruct.Pin = motor2gpio_Pin;
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(motor2gpio_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4850      	ldr	r0, [pc, #320]	@ (8000f18 <MX_GPIO_Init+0x2a8>)
 8000dd6:	f002 ff49 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4849      	ldr	r0, [pc, #292]	@ (8000f18 <MX_GPIO_Init+0x2a8>)
 8000df2:	f002 ff3b 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000df6:	2332      	movs	r3, #50	@ 0x32
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e06:	230b      	movs	r3, #11
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4842      	ldr	r0, [pc, #264]	@ (8000f1c <MX_GPIO_Init+0x2ac>)
 8000e12:	f002 ff2b 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e16:	2304      	movs	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	483b      	ldr	r0, [pc, #236]	@ (8000f1c <MX_GPIO_Init+0x2ac>)
 8000e2e:	f002 ff1d 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e32:	2386      	movs	r3, #134	@ 0x86
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e42:	230b      	movs	r3, #11
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4837      	ldr	r0, [pc, #220]	@ (8000f2c <MX_GPIO_Init+0x2bc>)
 8000e4e:	f002 ff0d 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB2 LD3_Pin PB6
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_2|LD3_Pin|GPIO_PIN_6
 8000e52:	f244 03c5 	movw	r3, #16581	@ 0x40c5
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482d      	ldr	r0, [pc, #180]	@ (8000f20 <MX_GPIO_Init+0x2b0>)
 8000e6c:	f002 fefe 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4824      	ldr	r0, [pc, #144]	@ (8000f20 <MX_GPIO_Init+0x2b0>)
 8000e8e:	f002 feed 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4
 8000e92:	f643 03f0 	movw	r3, #14576	@ 0x38f0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481e      	ldr	r0, [pc, #120]	@ (8000f24 <MX_GPIO_Init+0x2b4>)
 8000eac:	f002 fede 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|USB_PowerSwitchOn_Pin;
 8000eb0:	2348      	movs	r3, #72	@ 0x48
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4818      	ldr	r0, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0x2b8>)
 8000ec8:	f002 fed0 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ecc:	2380      	movs	r3, #128	@ 0x80
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <MX_GPIO_Init+0x2b8>)
 8000ee0:	f002 fec4 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ee4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef6:	230b      	movs	r3, #11
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <MX_GPIO_Init+0x2b8>)
 8000f02:	f002 feb3 	bl	8003c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f06:	bf00      	nop
 8000f08:	3738      	adds	r7, #56	@ 0x38
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40021400 	.word	0x40021400
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	40020000 	.word	0x40020000

08000f30 <resetTime>:
        //HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, tx_buffer_size, HAL_MAX_DELAY);
        // Start a new receive operation
        //HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 5);
    }
}
void resetTime(){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	seconds = 0;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <resetTime+0x20>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
	minutes = 0;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <resetTime+0x24>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
	hours = 0;
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <resetTime+0x28>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
//	HAL_TIM_Base_DeInit(&htim10);
//	HAL_TIM_Base_Init(&htim10);
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000a3c 	.word	0x20000a3c
 8000f54:	20000a3b 	.word	0x20000a3b
 8000f58:	20000a3a 	.word	0x20000a3a
 8000f5c:	00000000 	.word	0x00000000

08000f60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(pumpTestsParameters[pump].eNextState) {
 8000f68:	4bc1      	ldr	r3, [pc, #772]	@ (8001270 <StartDefaultTask+0x310>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4ac1      	ldr	r2, [pc, #772]	@ (8001274 <StartDefaultTask+0x314>)
 8000f70:	460b      	mov	r3, r1
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	4413      	add	r3, r2
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	f201 800b 	bhi.w	8001f9a <StartDefaultTask+0x103a>
 8000f84:	a201      	add	r2, pc, #4	@ (adr r2, 8000f8c <StartDefaultTask+0x2c>)
 8000f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8a:	bf00      	nop
 8000f8c:	08000fcd 	.word	0x08000fcd
 8000f90:	08001095 	.word	0x08001095
 8000f94:	0800110f 	.word	0x0800110f
 8000f98:	0800132b 	.word	0x0800132b
 8000f9c:	080013d1 	.word	0x080013d1
 8000fa0:	08001617 	.word	0x08001617
 8000fa4:	08001691 	.word	0x08001691
 8000fa8:	080017a1 	.word	0x080017a1
 8000fac:	08001879 	.word	0x08001879
 8000fb0:	080019b5 	.word	0x080019b5
 8000fb4:	08001a29 	.word	0x08001a29
 8000fb8:	08001bcd 	.word	0x08001bcd
 8000fbc:	08001c4f 	.word	0x08001c4f
 8000fc0:	08001df9 	.word	0x08001df9
 8000fc4:	08001ecf 	.word	0x08001ecf
 8000fc8:	08001f59 	.word	0x08001f59
	  			case START:
	  				osThreadSuspend(sendDataHandle);
 8000fcc:	4baa      	ldr	r3, [pc, #680]	@ (8001278 <StartDefaultTask+0x318>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fd1d 	bl	8007a10 <osThreadSuspend>
					volts = setFlowRate(0);					// assigns volts to 0 L/min
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fb54 	bl	8000684 <setFlowRate>
 8000fdc:	eef0 7a40 	vmov.f32	s15, s0
 8000fe0:	4ba6      	ldr	r3, [pc, #664]	@ (800127c <StartDefaultTask+0x31c>)
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
					dacSet(&hdac, DAC_CHANNEL_1, volts);	// Sets volts
 8000fe6:	4ba5      	ldr	r3, [pc, #660]	@ (800127c <StartDefaultTask+0x31c>)
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	48a3      	ldr	r0, [pc, #652]	@ (8001280 <StartDefaultTask+0x320>)
 8000ff4:	f001 f9b4 	bl	8002360 <dacSet>
					flowControllerADC(&hadc1);				// Changes ADC mult to read Flow Ctrl
 8000ff8:	48a2      	ldr	r0, [pc, #648]	@ (8001284 <StartDefaultTask+0x324>)
 8000ffa:	f7ff faf1 	bl	80005e0 <flowControllerADC>
					flowStateOpen();						// Opens Flow Ctrl
 8000ffe:	f7ff fba3 	bl	8000748 <flowStateOpen>
					resetTime();							// Resets Clk
 8001002:	f7ff ff95 	bl	8000f30 <resetTime>

					recalibrate();
 8001006:	f7ff fbf1 	bl	80007ec <recalibrate>
					HAL_TIM_Base_Start_IT(&htim7);			// Opens Stepper Motor
 800100a:	489f      	ldr	r0, [pc, #636]	@ (8001288 <StartDefaultTask+0x328>)
 800100c:	f004 fb3c 	bl	8005688 <HAL_TIM_Base_Start_IT>

					if(pump){
 8001010:	4b97      	ldr	r3, [pc, #604]	@ (8001270 <StartDefaultTask+0x310>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <StartDefaultTask+0xbe>
						solenoidTwoOpen();
 8001018:	f001 fa30 	bl	800247c <solenoidTwoOpen>
 800101c:	e001      	b.n	8001022 <StartDefaultTask+0xc2>
					}else{
						solenoidOneOpen();
 800101e:	f001 fa11 	bl	8002444 <solenoidOneOpen>
//	  				pumpTestsParameters[0].stateList[7] = ULTIMATE_MEASURE_TEST_INIT;
//	  				pumpTestsParameters[0].stateList[8] = IDLE;
//	  				pumpTestsParameters[0].stateList[9] = 0;

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001022:	4b93      	ldr	r3, [pc, #588]	@ (8001270 <StartDefaultTask+0x310>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	3318      	adds	r3, #24
 8001032:	4a90      	ldr	r2, [pc, #576]	@ (8001274 <StartDefaultTask+0x314>)
 8001034:	1899      	adds	r1, r3, r2
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	2201      	movs	r2, #1
 800103c:	4893      	ldr	r0, [pc, #588]	@ (800128c <StartDefaultTask+0x32c>)
 800103e:	f004 feab 	bl	8005d98 <HAL_UART_Transmit>

					// Receives State List
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[pump].stateList, 20, HAL_MAX_DELAY);
 8001042:	4b8b      	ldr	r3, [pc, #556]	@ (8001270 <StartDefaultTask+0x310>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	4a88      	ldr	r2, [pc, #544]	@ (8001274 <StartDefaultTask+0x314>)
 8001052:	1899      	adds	r1, r3, r2
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	2214      	movs	r2, #20
 800105a:	488c      	ldr	r0, [pc, #560]	@ (800128c <StartDefaultTask+0x32c>)
 800105c:	f004 ff1f 	bl	8005e9e <HAL_UART_Receive>



					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState;
 8001060:	4b83      	ldr	r3, [pc, #524]	@ (8001270 <StartDefaultTask+0x310>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	4a83      	ldr	r2, [pc, #524]	@ (8001274 <StartDefaultTask+0x314>)
 8001068:	460b      	mov	r3, r1
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	3314      	adds	r3, #20
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7e      	ldr	r2, [pc, #504]	@ (8001270 <StartDefaultTask+0x310>)
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	4611      	mov	r1, r2
 800107c:	7818      	ldrb	r0, [r3, #0]
 800107e:	4a7d      	ldr	r2, [pc, #500]	@ (8001274 <StartDefaultTask+0x314>)
 8001080:	460b      	mov	r3, r1
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	3318      	adds	r3, #24
 800108c:	4602      	mov	r2, r0
 800108e:	701a      	strb	r2, [r3, #0]
	  				break;
 8001090:	f000 bf8f 	b.w	8001fb2 <StartDefaultTask+0x1052>
//					pumpTestsParameters[0].VATI[5] = 1;		// flow controller closed
//					pumpTestsParameters[0].VATI[6] = 3;		// mTorr
//					pumpTestsParameters[0].VATI[7] = 50;		// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001094:	4b76      	ldr	r3, [pc, #472]	@ (8001270 <StartDefaultTask+0x310>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	3318      	adds	r3, #24
 80010a4:	4a73      	ldr	r2, [pc, #460]	@ (8001274 <StartDefaultTask+0x314>)
 80010a6:	1899      	adds	r1, r3, r2
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	2201      	movs	r2, #1
 80010ae:	4877      	ldr	r0, [pc, #476]	@ (800128c <StartDefaultTask+0x32c>)
 80010b0:	f004 fe72 	bl	8005d98 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].VATI[0], 8, HAL_MAX_DELAY);
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	2208      	movs	r2, #8
 80010ba:	4975      	ldr	r1, [pc, #468]	@ (8001290 <StartDefaultTask+0x330>)
 80010bc:	4873      	ldr	r0, [pc, #460]	@ (800128c <StartDefaultTask+0x32c>)
 80010be:	f004 feee 	bl	8005e9e <HAL_UART_Receive>

	  				flowStateClose();
 80010c2:	f7ff fb25 	bl	8000710 <flowStateClose>
	  				stepperOpen();
 80010c6:	f7ff fb6b 	bl	80007a0 <stepperOpen>
	  				//solenoidOneOpen();
	  				//solenoidClose();
	  				vacuumGaugeADC(&hadc1);
 80010ca:	486e      	ldr	r0, [pc, #440]	@ (8001284 <StartDefaultTask+0x324>)
 80010cc:	f001 fdea 	bl	8002ca4 <vacuumGaugeADC>
	  				pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
 80010d0:	4b67      	ldr	r3, [pc, #412]	@ (8001270 <StartDefaultTask+0x310>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4a67      	ldr	r2, [pc, #412]	@ (8001274 <StartDefaultTask+0x314>)
 80010d8:	460b      	mov	r3, r1
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	3318      	adds	r3, #24
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 80010e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001294 <StartDefaultTask+0x334>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b68      	ldr	r3, [pc, #416]	@ (8001294 <StartDefaultTask+0x334>)
 80010f4:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 80010f6:	4b60      	ldr	r3, [pc, #384]	@ (8001278 <StartDefaultTask+0x318>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 fcbc 	bl	8007a78 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001100:	4865      	ldr	r0, [pc, #404]	@ (8001298 <StartDefaultTask+0x338>)
 8001102:	f004 fac1 	bl	8005688 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8001106:	f7ff ff13 	bl	8000f30 <resetTime>

	  				break;
 800110a:	f000 bf52 	b.w	8001fb2 <StartDefaultTask+0x1052>
	  			case VAC_ACHIEVMENT_TEST:
	  				volts = adcGet(&hadc1);
 800110e:	485d      	ldr	r0, [pc, #372]	@ (8001284 <StartDefaultTask+0x324>)
 8001110:	f001 f95a 	bl	80023c8 <adcGet>
 8001114:	eef0 7a40 	vmov.f32	s15, s0
 8001118:	4b58      	ldr	r3, [pc, #352]	@ (800127c <StartDefaultTask+0x31c>)
 800111a:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <StartDefaultTask+0x31c>)
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	f001 fdde 	bl	8002ce8 <readVacuum>
 800112c:	eef0 7a40 	vmov.f32	s15, s0
 8001130:	4b5a      	ldr	r3, [pc, #360]	@ (800129c <StartDefaultTask+0x33c>)
 8001132:	edc3 7a00 	vstr	s15, [r3]

	  				// Remove this once STM is connected to hardware
	  				vacuumScale = 1000;
 8001136:	4b59      	ldr	r3, [pc, #356]	@ (800129c <StartDefaultTask+0x33c>)
 8001138:	4a59      	ldr	r2, [pc, #356]	@ (80012a0 <StartDefaultTask+0x340>)
 800113a:	601a      	str	r2, [r3, #0]
	  				if(seconds >= 10){	// Passes test after 10 seconds
 800113c:	4b59      	ldr	r3, [pc, #356]	@ (80012a4 <StartDefaultTask+0x344>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b09      	cmp	r3, #9
 8001142:	d903      	bls.n	800114c <StartDefaultTask+0x1ec>
	  					vacuumScale = 0;
 8001144:	4b55      	ldr	r3, [pc, #340]	@ (800129c <StartDefaultTask+0x33c>)
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
	  				}
	  				//

	  				if(vacuumScale <= (float)pumpTestsParameters[pump].VATI[6] / 1000.0){	// Success
 800114c:	4b53      	ldr	r3, [pc, #332]	@ (800129c <StartDefaultTask+0x33c>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001156:	4b46      	ldr	r3, [pc, #280]	@ (8001270 <StartDefaultTask+0x310>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	4a45      	ldr	r2, [pc, #276]	@ (8001274 <StartDefaultTask+0x314>)
 800115e:	460b      	mov	r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	4413      	add	r3, r2
 8001168:	331f      	adds	r3, #31
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001174:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001178:	ed9f 4b3b 	vldr	d4, [pc, #236]	@ 8001268 <StartDefaultTask+0x308>
 800117c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001180:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001188:	d83b      	bhi.n	8001202 <StartDefaultTask+0x2a2>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 800118a:	4843      	ldr	r0, [pc, #268]	@ (8001298 <StartDefaultTask+0x338>)
 800118c:	f004 faf4 	bl	8005778 <HAL_TIM_Base_Stop_IT>
		  				// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001190:	4b40      	ldr	r3, [pc, #256]	@ (8001294 <StartDefaultTask+0x334>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <StartDefaultTask+0x334>)
 800119c:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 800119e:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <StartDefaultTask+0x348>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fc34 	bl	8007a10 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 80011a8:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <StartDefaultTask+0x310>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4931      	ldr	r1, [pc, #196]	@ (8001274 <StartDefaultTask+0x314>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	440b      	add	r3, r1
 80011ba:	3314      	adds	r3, #20
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1c59      	adds	r1, r3, #1
 80011c0:	482c      	ldr	r0, [pc, #176]	@ (8001274 <StartDefaultTask+0x314>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4403      	add	r3, r0
 80011cc:	3314      	adds	r3, #20
 80011ce:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 80011d0:	4b27      	ldr	r3, [pc, #156]	@ (8001270 <StartDefaultTask+0x310>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <StartDefaultTask+0x314>)
 80011d8:	460b      	mov	r3, r1
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	3314      	adds	r3, #20
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a22      	ldr	r2, [pc, #136]	@ (8001270 <StartDefaultTask+0x310>)
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
 80011ec:	7818      	ldrb	r0, [r3, #0]
 80011ee:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <StartDefaultTask+0x314>)
 80011f0:	460b      	mov	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	3318      	adds	r3, #24
 80011fc:	4602      	mov	r2, r0
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e08e      	b.n	8001320 <StartDefaultTask+0x3c0>
	  				}else if(temperature >= pumpTestsParameters[pump].VATI[7]){	// if current temp is >= temp limit
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <StartDefaultTask+0x310>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	4a1a      	ldr	r2, [pc, #104]	@ (8001274 <StartDefaultTask+0x314>)
 800120a:	460b      	mov	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	3320      	adds	r3, #32
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <StartDefaultTask+0x34c>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	d83f      	bhi.n	80012b0 <StartDefaultTask+0x350>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <StartDefaultTask+0x310>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <StartDefaultTask+0x314>)
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	3318      	adds	r3, #24
 8001244:	220e      	movs	r2, #14
 8001246:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <StartDefaultTask+0x310>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <StartDefaultTask+0x314>)
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	334e      	adds	r3, #78	@ 0x4e
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]
	  					break;
 8001260:	f000 bea7 	b.w	8001fb2 <StartDefaultTask+0x1052>
 8001264:	f3af 8000 	nop.w
 8001268:	00000000 	.word	0x00000000
 800126c:	408f4000 	.word	0x408f4000
 8001270:	20000a0c 	.word	0x20000a0c
 8001274:	2000096c 	.word	0x2000096c
 8001278:	20000968 	.word	0x20000968
 800127c:	20000a10 	.word	0x20000a10
 8001280:	200002a0 	.word	0x200002a0
 8001284:	20000258 	.word	0x20000258
 8001288:	200002b4 	.word	0x200002b4
 800128c:	200003d4 	.word	0x200003d4
 8001290:	20000985 	.word	0x20000985
 8001294:	20000a39 	.word	0x20000a39
 8001298:	20000300 	.word	0x20000300
 800129c:	20000a20 	.word	0x20000a20
 80012a0:	447a0000 	.word	0x447a0000
 80012a4:	20000a3c 	.word	0x20000a3c
 80012a8:	20000964 	.word	0x20000964
 80012ac:	20000038 	.word	0x20000038
	  				}else if(pumpTestsParameters[pump].VATI[2] == hours && pumpTestsParameters[pump].VATI[3] == minutes){
 80012b0:	4ba7      	ldr	r3, [pc, #668]	@ (8001550 <StartDefaultTask+0x5f0>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	4aa7      	ldr	r2, [pc, #668]	@ (8001554 <StartDefaultTask+0x5f4>)
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	331b      	adds	r3, #27
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001558 <StartDefaultTask+0x5f8>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d128      	bne.n	8001320 <StartDefaultTask+0x3c0>
 80012ce:	4ba0      	ldr	r3, [pc, #640]	@ (8001550 <StartDefaultTask+0x5f0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4a9f      	ldr	r2, [pc, #636]	@ (8001554 <StartDefaultTask+0x5f4>)
 80012d6:	460b      	mov	r3, r1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	331c      	adds	r3, #28
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b9d      	ldr	r3, [pc, #628]	@ (800155c <StartDefaultTask+0x5fc>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d119      	bne.n	8001320 <StartDefaultTask+0x3c0>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80012ec:	4b98      	ldr	r3, [pc, #608]	@ (8001550 <StartDefaultTask+0x5f0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4a98      	ldr	r2, [pc, #608]	@ (8001554 <StartDefaultTask+0x5f4>)
 80012f4:	460b      	mov	r3, r1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	3318      	adds	r3, #24
 8001300:	220e      	movs	r2, #14
 8001302:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001304:	4b92      	ldr	r3, [pc, #584]	@ (8001550 <StartDefaultTask+0x5f0>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	4a92      	ldr	r2, [pc, #584]	@ (8001554 <StartDefaultTask+0x5f4>)
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	334e      	adds	r3, #78	@ 0x4e
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
	  					break;
 800131c:	f000 be49 	b.w	8001fb2 <StartDefaultTask+0x1052>
	  				}

	  				osDelay(100); // Checks condition every 100 ms
 8001320:	2064      	movs	r0, #100	@ 0x64
 8001322:	f006 fbdd 	bl	8007ae0 <osDelay>

	  				break;
 8001326:	f000 be44 	b.w	8001fb2 <StartDefaultTask+0x1052>
//					pumpTestsParameters[0].STI[6] = 0;		// mTorr
//					pumpTestsParameters[0].STI[7] = 50;		// temperature in C
//					pumpTestsParameters[0].STI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 800132a:	4b89      	ldr	r3, [pc, #548]	@ (8001550 <StartDefaultTask+0x5f0>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	3318      	adds	r3, #24
 800133a:	4a86      	ldr	r2, [pc, #536]	@ (8001554 <StartDefaultTask+0x5f4>)
 800133c:	1899      	adds	r1, r3, r2
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	2201      	movs	r2, #1
 8001344:	4886      	ldr	r0, [pc, #536]	@ (8001560 <StartDefaultTask+0x600>)
 8001346:	f004 fd27 	bl	8005d98 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].STI[0], 9, HAL_MAX_DELAY);
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	2209      	movs	r2, #9
 8001350:	4984      	ldr	r1, [pc, #528]	@ (8001564 <StartDefaultTask+0x604>)
 8001352:	4883      	ldr	r0, [pc, #524]	@ (8001560 <StartDefaultTask+0x600>)
 8001354:	f004 fda3 	bl	8005e9e <HAL_UART_Receive>

	  				flowStateControl();
 8001358:	f7ff fa12 	bl	8000780 <flowStateControl>
	  				stepperOpen();
 800135c:	f7ff fa20 	bl	80007a0 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 8001360:	4881      	ldr	r0, [pc, #516]	@ (8001568 <StartDefaultTask+0x608>)
 8001362:	f7ff f93d 	bl	80005e0 <flowControllerADC>
	  				pumpTestsParameters[pump].eNextState = SPECIAL_TEST;
 8001366:	4b7a      	ldr	r3, [pc, #488]	@ (8001550 <StartDefaultTask+0x5f0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	4a79      	ldr	r2, [pc, #484]	@ (8001554 <StartDefaultTask+0x5f4>)
 800136e:	460b      	mov	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	3318      	adds	r3, #24
 800137a:	2204      	movs	r2, #4
 800137c:	701a      	strb	r2, [r3, #0]
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].STI[8]));
 800137e:	4b74      	ldr	r3, [pc, #464]	@ (8001550 <StartDefaultTask+0x5f0>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4619      	mov	r1, r3
 8001384:	4a73      	ldr	r2, [pc, #460]	@ (8001554 <StartDefaultTask+0x5f4>)
 8001386:	460b      	mov	r3, r1
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	3329      	adds	r3, #41	@ 0x29
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f975 	bl	8000684 <setFlowRate>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	2100      	movs	r1, #0
 80013a4:	4871      	ldr	r0, [pc, #452]	@ (800156c <StartDefaultTask+0x60c>)
 80013a6:	f000 ffdb 	bl	8002360 <dacSet>

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 80013aa:	4b71      	ldr	r3, [pc, #452]	@ (8001570 <StartDefaultTask+0x610>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001570 <StartDefaultTask+0x610>)
 80013b6:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 80013b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001574 <StartDefaultTask+0x614>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 fb5b 	bl	8007a78 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 80013c2:	486d      	ldr	r0, [pc, #436]	@ (8001578 <StartDefaultTask+0x618>)
 80013c4:	f004 f960 	bl	8005688 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 80013c8:	f7ff fdb2 	bl	8000f30 <resetTime>

	  				break;
 80013cc:	f000 bdf1 	b.w	8001fb2 <StartDefaultTask+0x1052>

	  			case SPECIAL_TEST:
	  				flowControllerADC(&hadc1);
 80013d0:	4865      	ldr	r0, [pc, #404]	@ (8001568 <StartDefaultTask+0x608>)
 80013d2:	f7ff f905 	bl	80005e0 <flowControllerADC>
					volts = adcGet(&hadc1);
 80013d6:	4864      	ldr	r0, [pc, #400]	@ (8001568 <StartDefaultTask+0x608>)
 80013d8:	f000 fff6 	bl	80023c8 <adcGet>
 80013dc:	eef0 7a40 	vmov.f32	s15, s0
 80013e0:	4b66      	ldr	r3, [pc, #408]	@ (800157c <StartDefaultTask+0x61c>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 80013e6:	4b65      	ldr	r3, [pc, #404]	@ (800157c <StartDefaultTask+0x61c>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	f7ff f91a 	bl	8000628 <readFlow>
 80013f4:	eef0 7a40 	vmov.f32	s15, s0
 80013f8:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <StartDefaultTask+0x620>)
 80013fa:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 80013fe:	485a      	ldr	r0, [pc, #360]	@ (8001568 <StartDefaultTask+0x608>)
 8001400:	f001 fc50 	bl	8002ca4 <vacuumGaugeADC>
	  				volts = adcGet(&hadc1);
 8001404:	4858      	ldr	r0, [pc, #352]	@ (8001568 <StartDefaultTask+0x608>)
 8001406:	f000 ffdf 	bl	80023c8 <adcGet>
 800140a:	eef0 7a40 	vmov.f32	s15, s0
 800140e:	4b5b      	ldr	r3, [pc, #364]	@ (800157c <StartDefaultTask+0x61c>)
 8001410:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 8001414:	4b59      	ldr	r3, [pc, #356]	@ (800157c <StartDefaultTask+0x61c>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	f001 fc63 	bl	8002ce8 <readVacuum>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	4b57      	ldr	r3, [pc, #348]	@ (8001584 <StartDefaultTask+0x624>)
 8001428:	edc3 7a00 	vstr	s15, [r3]

	  				// Remove this Once STM is connected to the hardware
	  				flowRate = 0;
 800142c:	4b54      	ldr	r3, [pc, #336]	@ (8001580 <StartDefaultTask+0x620>)
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	  				vacuumScale = 1000;
 8001434:	4b53      	ldr	r3, [pc, #332]	@ (8001584 <StartDefaultTask+0x624>)
 8001436:	4a54      	ldr	r2, [pc, #336]	@ (8001588 <StartDefaultTask+0x628>)
 8001438:	601a      	str	r2, [r3, #0]
	  				if(seconds >= 10){	// After 10 sec Test is success
 800143a:	4b54      	ldr	r3, [pc, #336]	@ (800158c <StartDefaultTask+0x62c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b09      	cmp	r3, #9
 8001440:	d902      	bls.n	8001448 <StartDefaultTask+0x4e8>
	  					flowRate = 50;
 8001442:	4b4f      	ldr	r3, [pc, #316]	@ (8001580 <StartDefaultTask+0x620>)
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <StartDefaultTask+0x630>)
 8001446:	601a      	str	r2, [r3, #0]
	  				}
	  				//

	  				if((uint8_t)flowRate == pumpTestsParameters[pump].STI[8]){	// success
 8001448:	4b4d      	ldr	r3, [pc, #308]	@ (8001580 <StartDefaultTask+0x620>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001452:	edc7 7a00 	vstr	s15, [r7]
 8001456:	783b      	ldrb	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <StartDefaultTask+0x5f0>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	493c      	ldr	r1, [pc, #240]	@ (8001554 <StartDefaultTask+0x5f4>)
 8001462:	4603      	mov	r3, r0
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4403      	add	r3, r0
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	440b      	add	r3, r1
 800146c:	3329      	adds	r3, #41	@ 0x29
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d13b      	bne.n	80014ec <StartDefaultTask+0x58c>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001474:	4840      	ldr	r0, [pc, #256]	@ (8001578 <StartDefaultTask+0x618>)
 8001476:	f004 f97f 	bl	8005778 <HAL_TIM_Base_Stop_IT>
						// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 800147a:	4b3d      	ldr	r3, [pc, #244]	@ (8001570 <StartDefaultTask+0x610>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b3a      	ldr	r3, [pc, #232]	@ (8001570 <StartDefaultTask+0x610>)
 8001486:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8001488:	4b42      	ldr	r3, [pc, #264]	@ (8001594 <StartDefaultTask+0x634>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f006 fabf 	bl	8007a10 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 8001492:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <StartDefaultTask+0x5f0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	492e      	ldr	r1, [pc, #184]	@ (8001554 <StartDefaultTask+0x5f4>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	440b      	add	r3, r1
 80014a4:	3314      	adds	r3, #20
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	482a      	ldr	r0, [pc, #168]	@ (8001554 <StartDefaultTask+0x5f4>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4403      	add	r3, r0
 80014b6:	3314      	adds	r3, #20
 80014b8:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 80014ba:	4b25      	ldr	r3, [pc, #148]	@ (8001550 <StartDefaultTask+0x5f0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	4a24      	ldr	r2, [pc, #144]	@ (8001554 <StartDefaultTask+0x5f4>)
 80014c2:	460b      	mov	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	4413      	add	r3, r2
 80014cc:	3314      	adds	r3, #20
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001550 <StartDefaultTask+0x5f0>)
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	4611      	mov	r1, r2
 80014d6:	7818      	ldrb	r0, [r3, #0]
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <StartDefaultTask+0x5f4>)
 80014da:	460b      	mov	r3, r1
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	3318      	adds	r3, #24
 80014e6:	4602      	mov	r2, r0
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e08f      	b.n	800160c <StartDefaultTask+0x6ac>
	  				}else if(temperature >= pumpTestsParameters[pump].STI[7]){	// if current temp is >= temp limit
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <StartDefaultTask+0x5f0>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a18      	ldr	r2, [pc, #96]	@ (8001554 <StartDefaultTask+0x5f4>)
 80014f4:	460b      	mov	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	4413      	add	r3, r2
 80014fe:	3328      	adds	r3, #40	@ 0x28
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <StartDefaultTask+0x638>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	d840      	bhi.n	800159c <StartDefaultTask+0x63c>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <StartDefaultTask+0x5f0>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4619      	mov	r1, r3
 8001520:	4a0c      	ldr	r2, [pc, #48]	@ (8001554 <StartDefaultTask+0x5f4>)
 8001522:	460b      	mov	r3, r1
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	3318      	adds	r3, #24
 800152e:	220e      	movs	r2, #14
 8001530:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <StartDefaultTask+0x5f0>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <StartDefaultTask+0x5f4>)
 800153a:	460b      	mov	r3, r1
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	334e      	adds	r3, #78	@ 0x4e
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
	  					break;
 800154a:	f000 bd32 	b.w	8001fb2 <StartDefaultTask+0x1052>
 800154e:	bf00      	nop
 8001550:	20000a0c 	.word	0x20000a0c
 8001554:	2000096c 	.word	0x2000096c
 8001558:	20000a3a 	.word	0x20000a3a
 800155c:	20000a3b 	.word	0x20000a3b
 8001560:	200003d4 	.word	0x200003d4
 8001564:	2000098d 	.word	0x2000098d
 8001568:	20000258 	.word	0x20000258
 800156c:	200002a0 	.word	0x200002a0
 8001570:	20000a39 	.word	0x20000a39
 8001574:	20000968 	.word	0x20000968
 8001578:	20000300 	.word	0x20000300
 800157c:	20000a10 	.word	0x20000a10
 8001580:	20000a1c 	.word	0x20000a1c
 8001584:	20000a20 	.word	0x20000a20
 8001588:	447a0000 	.word	0x447a0000
 800158c:	20000a3c 	.word	0x20000a3c
 8001590:	42480000 	.word	0x42480000
 8001594:	20000964 	.word	0x20000964
 8001598:	20000038 	.word	0x20000038
	  				}else if(pumpTestsParameters[pump].STI[2] == hours && pumpTestsParameters[pump].STI[3] == minutes){
 800159c:	4ba8      	ldr	r3, [pc, #672]	@ (8001840 <StartDefaultTask+0x8e0>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4aa8      	ldr	r2, [pc, #672]	@ (8001844 <StartDefaultTask+0x8e4>)
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4413      	add	r3, r2
 80015ae:	3323      	adds	r3, #35	@ 0x23
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001848 <StartDefaultTask+0x8e8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d128      	bne.n	800160c <StartDefaultTask+0x6ac>
 80015ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001840 <StartDefaultTask+0x8e0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	4aa0      	ldr	r2, [pc, #640]	@ (8001844 <StartDefaultTask+0x8e4>)
 80015c2:	460b      	mov	r3, r1
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	3324      	adds	r3, #36	@ 0x24
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	4b9e      	ldr	r3, [pc, #632]	@ (800184c <StartDefaultTask+0x8ec>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d119      	bne.n	800160c <StartDefaultTask+0x6ac>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80015d8:	4b99      	ldr	r3, [pc, #612]	@ (8001840 <StartDefaultTask+0x8e0>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a99      	ldr	r2, [pc, #612]	@ (8001844 <StartDefaultTask+0x8e4>)
 80015e0:	460b      	mov	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	3318      	adds	r3, #24
 80015ec:	220e      	movs	r2, #14
 80015ee:	701a      	strb	r2, [r3, #0]
						pumpTestsParameters[pump].pumpStatus = FAILURE;
 80015f0:	4b93      	ldr	r3, [pc, #588]	@ (8001840 <StartDefaultTask+0x8e0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4a93      	ldr	r2, [pc, #588]	@ (8001844 <StartDefaultTask+0x8e4>)
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	334e      	adds	r3, #78	@ 0x4e
 8001604:	2202      	movs	r2, #2
 8001606:	701a      	strb	r2, [r3, #0]
						break;
 8001608:	f000 bcd3 	b.w	8001fb2 <StartDefaultTask+0x1052>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 800160c:	2064      	movs	r0, #100	@ 0x64
 800160e:	f006 fa67 	bl	8007ae0 <osDelay>
					break;
 8001612:	f000 bcce 	b.w	8001fb2 <StartDefaultTask+0x1052>
//					pumpTestsParameters[0].WUI[5] = 0;		// flow controller open
//					pumpTestsParameters[0].WUI[6] = 0;		// mTorr
//					pumpTestsParameters[0].WUI[7] = 100;	// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001616:	4b8a      	ldr	r3, [pc, #552]	@ (8001840 <StartDefaultTask+0x8e0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	3318      	adds	r3, #24
 8001626:	4a87      	ldr	r2, [pc, #540]	@ (8001844 <StartDefaultTask+0x8e4>)
 8001628:	1899      	adds	r1, r3, r2
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	2201      	movs	r2, #1
 8001630:	4887      	ldr	r0, [pc, #540]	@ (8001850 <StartDefaultTask+0x8f0>)
 8001632:	f004 fbb1 	bl	8005d98 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].WUI[0], 8, HAL_MAX_DELAY);
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2208      	movs	r2, #8
 800163c:	4985      	ldr	r1, [pc, #532]	@ (8001854 <StartDefaultTask+0x8f4>)
 800163e:	4884      	ldr	r0, [pc, #528]	@ (8001850 <StartDefaultTask+0x8f0>)
 8001640:	f004 fc2d 	bl	8005e9e <HAL_UART_Receive>

	  				flowStateOpen();
 8001644:	f7ff f880 	bl	8000748 <flowStateOpen>
	  				stepperOpen();
 8001648:	f7ff f8aa 	bl	80007a0 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				vacuumGaugeADC(&hadc1);
 800164c:	4882      	ldr	r0, [pc, #520]	@ (8001858 <StartDefaultTask+0x8f8>)
 800164e:	f001 fb29 	bl	8002ca4 <vacuumGaugeADC>
	  				pumpTestsParameters[pump].eNextState = WARM_UP;
 8001652:	4b7b      	ldr	r3, [pc, #492]	@ (8001840 <StartDefaultTask+0x8e0>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	4a7a      	ldr	r2, [pc, #488]	@ (8001844 <StartDefaultTask+0x8e4>)
 800165a:	460b      	mov	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	3318      	adds	r3, #24
 8001666:	2206      	movs	r2, #6
 8001668:	701a      	strb	r2, [r3, #0]

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 800166a:	4b7c      	ldr	r3, [pc, #496]	@ (800185c <StartDefaultTask+0x8fc>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b79      	ldr	r3, [pc, #484]	@ (800185c <StartDefaultTask+0x8fc>)
 8001676:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 8001678:	4b79      	ldr	r3, [pc, #484]	@ (8001860 <StartDefaultTask+0x900>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f006 f9fb 	bl	8007a78 <osThreadResume>


	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001682:	4878      	ldr	r0, [pc, #480]	@ (8001864 <StartDefaultTask+0x904>)
 8001684:	f004 f800 	bl	8005688 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8001688:	f7ff fc52 	bl	8000f30 <resetTime>


	  				break;
 800168c:	f000 bc91 	b.w	8001fb2 <StartDefaultTask+0x1052>
	  			case WARM_UP:
	  				// Remove this once STM is connected to hardware
	  				//

	  				// record internal/external temperatures
	  				if(pumpTestsParameters[pump].WUI[2] == hours && pumpTestsParameters[pump].WUI[3] == minutes){	// Success
 8001690:	4b6b      	ldr	r3, [pc, #428]	@ (8001840 <StartDefaultTask+0x8e0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	4a6b      	ldr	r2, [pc, #428]	@ (8001844 <StartDefaultTask+0x8e4>)
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	332c      	adds	r3, #44	@ 0x2c
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	4b68      	ldr	r3, [pc, #416]	@ (8001848 <StartDefaultTask+0x8e8>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d14a      	bne.n	8001744 <StartDefaultTask+0x7e4>
 80016ae:	4b64      	ldr	r3, [pc, #400]	@ (8001840 <StartDefaultTask+0x8e0>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4a63      	ldr	r2, [pc, #396]	@ (8001844 <StartDefaultTask+0x8e4>)
 80016b6:	460b      	mov	r3, r1
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	4413      	add	r3, r2
 80016c0:	332d      	adds	r3, #45	@ 0x2d
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b61      	ldr	r3, [pc, #388]	@ (800184c <StartDefaultTask+0x8ec>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d13b      	bne.n	8001744 <StartDefaultTask+0x7e4>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80016cc:	4865      	ldr	r0, [pc, #404]	@ (8001864 <StartDefaultTask+0x904>)
 80016ce:	f004 f853 	bl	8005778 <HAL_TIM_Base_Stop_IT>
	  					//osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 80016d2:	4b62      	ldr	r3, [pc, #392]	@ (800185c <StartDefaultTask+0x8fc>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b5f      	ldr	r3, [pc, #380]	@ (800185c <StartDefaultTask+0x8fc>)
 80016de:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 80016e0:	4b61      	ldr	r3, [pc, #388]	@ (8001868 <StartDefaultTask+0x908>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f006 f993 	bl	8007a10 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 80016ea:	4b55      	ldr	r3, [pc, #340]	@ (8001840 <StartDefaultTask+0x8e0>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4954      	ldr	r1, [pc, #336]	@ (8001844 <StartDefaultTask+0x8e4>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	440b      	add	r3, r1
 80016fc:	3314      	adds	r3, #20
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1c59      	adds	r1, r3, #1
 8001702:	4850      	ldr	r0, [pc, #320]	@ (8001844 <StartDefaultTask+0x8e4>)
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4403      	add	r3, r0
 800170e:	3314      	adds	r3, #20
 8001710:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8001712:	4b4b      	ldr	r3, [pc, #300]	@ (8001840 <StartDefaultTask+0x8e0>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4619      	mov	r1, r3
 8001718:	4a4a      	ldr	r2, [pc, #296]	@ (8001844 <StartDefaultTask+0x8e4>)
 800171a:	460b      	mov	r3, r1
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	3314      	adds	r3, #20
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a45      	ldr	r2, [pc, #276]	@ (8001840 <StartDefaultTask+0x8e0>)
 800172a:	7812      	ldrb	r2, [r2, #0]
 800172c:	4611      	mov	r1, r2
 800172e:	7818      	ldrb	r0, [r3, #0]
 8001730:	4a44      	ldr	r2, [pc, #272]	@ (8001844 <StartDefaultTask+0x8e4>)
 8001732:	460b      	mov	r3, r1
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	3318      	adds	r3, #24
 800173e:	4602      	mov	r2, r0
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e028      	b.n	8001796 <StartDefaultTask+0x836>
	  				}else if(temperature >= pumpTestsParameters[0].WUI[7]){	// if current temp is >= temp limit
 8001744:	4b3f      	ldr	r3, [pc, #252]	@ (8001844 <StartDefaultTask+0x8e4>)
 8001746:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001752:	4b46      	ldr	r3, [pc, #280]	@ (800186c <StartDefaultTask+0x90c>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d819      	bhi.n	8001796 <StartDefaultTask+0x836>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <StartDefaultTask+0x8e0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	4a36      	ldr	r2, [pc, #216]	@ (8001844 <StartDefaultTask+0x8e4>)
 800176a:	460b      	mov	r3, r1
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4413      	add	r3, r2
 8001774:	3318      	adds	r3, #24
 8001776:	220e      	movs	r2, #14
 8001778:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <StartDefaultTask+0x8e0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4a30      	ldr	r2, [pc, #192]	@ (8001844 <StartDefaultTask+0x8e4>)
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	334e      	adds	r3, #78	@ 0x4e
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
	  					break;
 8001792:	f000 bc0e 	b.w	8001fb2 <StartDefaultTask+0x1052>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 8001796:	2064      	movs	r0, #100	@ 0x64
 8001798:	f006 f9a2 	bl	8007ae0 <osDelay>
	  				break;
 800179c:	f000 bc09 	b.w	8001fb2 <StartDefaultTask+0x1052>
//					pumpTestsParameters[0].LTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].LTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].LTI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <StartDefaultTask+0x8e0>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	3318      	adds	r3, #24
 80017b0:	4a24      	ldr	r2, [pc, #144]	@ (8001844 <StartDefaultTask+0x8e4>)
 80017b2:	1899      	adds	r1, r3, r2
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	2201      	movs	r2, #1
 80017ba:	4825      	ldr	r0, [pc, #148]	@ (8001850 <StartDefaultTask+0x8f0>)
 80017bc:	f004 faec 	bl	8005d98 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].LTI[0], 8, HAL_MAX_DELAY);
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	2208      	movs	r2, #8
 80017c6:	492a      	ldr	r1, [pc, #168]	@ (8001870 <StartDefaultTask+0x910>)
 80017c8:	4821      	ldr	r0, [pc, #132]	@ (8001850 <StartDefaultTask+0x8f0>)
 80017ca:	f004 fb68 	bl	8005e9e <HAL_UART_Receive>

	  				stepperOpen();
 80017ce:	f7fe ffe7 	bl	80007a0 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 80017d2:	4821      	ldr	r0, [pc, #132]	@ (8001858 <StartDefaultTask+0x8f8>)
 80017d4:	f7fe ff04 	bl	80005e0 <flowControllerADC>
	  				pumpTestsParameters[pump].eNextState = LOAD_TEST;
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <StartDefaultTask+0x8e0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <StartDefaultTask+0x8e4>)
 80017e0:	460b      	mov	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	3318      	adds	r3, #24
 80017ec:	2208      	movs	r2, #8
 80017ee:	701a      	strb	r2, [r3, #0]
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <StartDefaultTask+0x8e0>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <StartDefaultTask+0x8e4>)
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	333a      	adds	r3, #58	@ 0x3a
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe ff3c 	bl	8000684 <setFlowRate>
 800180c:	eef0 7a40 	vmov.f32	s15, s0
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	2100      	movs	r1, #0
 8001816:	4817      	ldr	r0, [pc, #92]	@ (8001874 <StartDefaultTask+0x914>)
 8001818:	f000 fda2 	bl	8002360 <dacSet>

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <StartDefaultTask+0x8fc>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <StartDefaultTask+0x8fc>)
 8001828:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <StartDefaultTask+0x900>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f006 f922 	bl	8007a78 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <StartDefaultTask+0x904>)
 8001836:	f003 ff27 	bl	8005688 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 800183a:	f7ff fb79 	bl	8000f30 <resetTime>

	  				break;
 800183e:	e3b8      	b.n	8001fb2 <StartDefaultTask+0x1052>
 8001840:	20000a0c 	.word	0x20000a0c
 8001844:	2000096c 	.word	0x2000096c
 8001848:	20000a3a 	.word	0x20000a3a
 800184c:	20000a3b 	.word	0x20000a3b
 8001850:	200003d4 	.word	0x200003d4
 8001854:	20000996 	.word	0x20000996
 8001858:	20000258 	.word	0x20000258
 800185c:	20000a39 	.word	0x20000a39
 8001860:	20000968 	.word	0x20000968
 8001864:	20000300 	.word	0x20000300
 8001868:	20000964 	.word	0x20000964
 800186c:	20000038 	.word	0x20000038
 8001870:	2000099e 	.word	0x2000099e
 8001874:	200002a0 	.word	0x200002a0
	  			case LOAD_TEST:

					volts = adcGet(&hadc1);
 8001878:	48af      	ldr	r0, [pc, #700]	@ (8001b38 <StartDefaultTask+0xbd8>)
 800187a:	f000 fda5 	bl	80023c8 <adcGet>
 800187e:	eef0 7a40 	vmov.f32	s15, s0
 8001882:	4bae      	ldr	r3, [pc, #696]	@ (8001b3c <StartDefaultTask+0xbdc>)
 8001884:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 8001888:	4bac      	ldr	r3, [pc, #688]	@ (8001b3c <StartDefaultTask+0xbdc>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	f7fe fec9 	bl	8000628 <readFlow>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	4ba9      	ldr	r3, [pc, #676]	@ (8001b40 <StartDefaultTask+0xbe0>)
 800189c:	edc3 7a00 	vstr	s15, [r3]

					// Remove this Once STM is connected to the hardware
					flowRate = 0;
 80018a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001b40 <StartDefaultTask+0xbe0>)
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
					//

	  				if(pumpTestsParameters[pump].LTI[2] == hours && pumpTestsParameters[pump].LTI[3] == minutes){	// Success
 80018a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001b44 <StartDefaultTask+0xbe4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4aa6      	ldr	r2, [pc, #664]	@ (8001b48 <StartDefaultTask+0xbe8>)
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	3334      	adds	r3, #52	@ 0x34
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	4ba3      	ldr	r3, [pc, #652]	@ (8001b4c <StartDefaultTask+0xbec>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d14a      	bne.n	800195c <StartDefaultTask+0x9fc>
 80018c6:	4b9f      	ldr	r3, [pc, #636]	@ (8001b44 <StartDefaultTask+0xbe4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4a9e      	ldr	r2, [pc, #632]	@ (8001b48 <StartDefaultTask+0xbe8>)
 80018ce:	460b      	mov	r3, r1
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4413      	add	r3, r2
 80018d8:	3335      	adds	r3, #53	@ 0x35
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b9c      	ldr	r3, [pc, #624]	@ (8001b50 <StartDefaultTask+0xbf0>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d13b      	bne.n	800195c <StartDefaultTask+0x9fc>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80018e4:	489b      	ldr	r0, [pc, #620]	@ (8001b54 <StartDefaultTask+0xbf4>)
 80018e6:	f003 ff47 	bl	8005778 <HAL_TIM_Base_Stop_IT>
	  					// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 80018ea:	4b9b      	ldr	r3, [pc, #620]	@ (8001b58 <StartDefaultTask+0xbf8>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b98      	ldr	r3, [pc, #608]	@ (8001b58 <StartDefaultTask+0xbf8>)
 80018f6:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 80018f8:	4b98      	ldr	r3, [pc, #608]	@ (8001b5c <StartDefaultTask+0xbfc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 f887 	bl	8007a10 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 8001902:	4b90      	ldr	r3, [pc, #576]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	498f      	ldr	r1, [pc, #572]	@ (8001b48 <StartDefaultTask+0xbe8>)
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	440b      	add	r3, r1
 8001914:	3314      	adds	r3, #20
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	1c59      	adds	r1, r3, #1
 800191a:	488b      	ldr	r0, [pc, #556]	@ (8001b48 <StartDefaultTask+0xbe8>)
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4403      	add	r3, r0
 8001926:	3314      	adds	r3, #20
 8001928:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 800192a:	4b86      	ldr	r3, [pc, #536]	@ (8001b44 <StartDefaultTask+0xbe4>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4a85      	ldr	r2, [pc, #532]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001932:	460b      	mov	r3, r1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	3314      	adds	r3, #20
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a80      	ldr	r2, [pc, #512]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	7818      	ldrb	r0, [r3, #0]
 8001948:	4a7f      	ldr	r2, [pc, #508]	@ (8001b48 <StartDefaultTask+0xbe8>)
 800194a:	460b      	mov	r3, r1
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	3318      	adds	r3, #24
 8001956:	4602      	mov	r2, r0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e027      	b.n	80019ac <StartDefaultTask+0xa4c>
	  				}else if(temperature >= pumpTestsParameters[0].LTI[7]){	// if current temp is >= temp limit
 800195c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b48 <StartDefaultTask+0xbe8>)
 800195e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b60 <StartDefaultTask+0xc00>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	d818      	bhi.n	80019ac <StartDefaultTask+0xa4c>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 800197a:	4b72      	ldr	r3, [pc, #456]	@ (8001b44 <StartDefaultTask+0xbe4>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	4a71      	ldr	r2, [pc, #452]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001982:	460b      	mov	r3, r1
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	3318      	adds	r3, #24
 800198e:	220e      	movs	r2, #14
 8001990:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001992:	4b6c      	ldr	r3, [pc, #432]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	4a6b      	ldr	r2, [pc, #428]	@ (8001b48 <StartDefaultTask+0xbe8>)
 800199a:	460b      	mov	r3, r1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	334e      	adds	r3, #78	@ 0x4e
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
	  					break;
 80019aa:	e302      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  				}

	  				osDelay(100);	// Checks condition every 100 ms
 80019ac:	2064      	movs	r0, #100	@ 0x64
 80019ae:	f006 f897 	bl	8007ae0 <osDelay>
	  				break;
 80019b2:	e2fe      	b.n	8001fb2 <StartDefaultTask+0x1052>
//					pumpTestsParameters[0].OTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].OTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].OTI[8] = 0;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80019b4:	4b63      	ldr	r3, [pc, #396]	@ (8001b44 <StartDefaultTask+0xbe4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	3318      	adds	r3, #24
 80019c4:	4a60      	ldr	r2, [pc, #384]	@ (8001b48 <StartDefaultTask+0xbe8>)
 80019c6:	1899      	adds	r1, r3, r2
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	2201      	movs	r2, #1
 80019ce:	4865      	ldr	r0, [pc, #404]	@ (8001b64 <StartDefaultTask+0xc04>)
 80019d0:	f004 f9e2 	bl	8005d98 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].OTI[0], 8, HAL_MAX_DELAY);
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2208      	movs	r2, #8
 80019da:	4963      	ldr	r1, [pc, #396]	@ (8001b68 <StartDefaultTask+0xc08>)
 80019dc:	4861      	ldr	r0, [pc, #388]	@ (8001b64 <StartDefaultTask+0xc04>)
 80019de:	f004 fa5e 	bl	8005e9e <HAL_UART_Receive>

	  				stepperOpen();
 80019e2:	f7fe fedd 	bl	80007a0 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 80019e6:	4854      	ldr	r0, [pc, #336]	@ (8001b38 <StartDefaultTask+0xbd8>)
 80019e8:	f7fe fdfa 	bl	80005e0 <flowControllerADC>
	  				pumpTestsParameters[pump].eNextState = OPERATION_TEST;
 80019ec:	4b55      	ldr	r3, [pc, #340]	@ (8001b44 <StartDefaultTask+0xbe4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4a55      	ldr	r2, [pc, #340]	@ (8001b48 <StartDefaultTask+0xbe8>)
 80019f4:	460b      	mov	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	3318      	adds	r3, #24
 8001a00:	220a      	movs	r2, #10
 8001a02:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 8001a04:	4b54      	ldr	r3, [pc, #336]	@ (8001b58 <StartDefaultTask+0xbf8>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b52      	ldr	r3, [pc, #328]	@ (8001b58 <StartDefaultTask+0xbf8>)
 8001a10:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 8001a12:	4b56      	ldr	r3, [pc, #344]	@ (8001b6c <StartDefaultTask+0xc0c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 f82e 	bl	8007a78 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001a1c:	484d      	ldr	r0, [pc, #308]	@ (8001b54 <StartDefaultTask+0xbf4>)
 8001a1e:	f003 fe33 	bl	8005688 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8001a22:	f7ff fa85 	bl	8000f30 <resetTime>

	  				break;
 8001a26:	e2c4      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  			case OPERATION_TEST:
	  				flowControllerADC(&hadc1);
 8001a28:	4843      	ldr	r0, [pc, #268]	@ (8001b38 <StartDefaultTask+0xbd8>)
 8001a2a:	f7fe fdd9 	bl	80005e0 <flowControllerADC>
					volts = adcGet(&hadc1);
 8001a2e:	4842      	ldr	r0, [pc, #264]	@ (8001b38 <StartDefaultTask+0xbd8>)
 8001a30:	f000 fcca 	bl	80023c8 <adcGet>
 8001a34:	eef0 7a40 	vmov.f32	s15, s0
 8001a38:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <StartDefaultTask+0xbdc>)
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b3c <StartDefaultTask+0xbdc>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	f7fe fdee 	bl	8000628 <readFlow>
 8001a4c:	eef0 7a40 	vmov.f32	s15, s0
 8001a50:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <StartDefaultTask+0xbe0>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 8001a56:	4838      	ldr	r0, [pc, #224]	@ (8001b38 <StartDefaultTask+0xbd8>)
 8001a58:	f001 f924 	bl	8002ca4 <vacuumGaugeADC>
					volts = adcGet(&hadc1);
 8001a5c:	4836      	ldr	r0, [pc, #216]	@ (8001b38 <StartDefaultTask+0xbd8>)
 8001a5e:	f000 fcb3 	bl	80023c8 <adcGet>
 8001a62:	eef0 7a40 	vmov.f32	s15, s0
 8001a66:	4b35      	ldr	r3, [pc, #212]	@ (8001b3c <StartDefaultTask+0xbdc>)
 8001a68:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(volts);
 8001a6c:	4b33      	ldr	r3, [pc, #204]	@ (8001b3c <StartDefaultTask+0xbdc>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	f001 f937 	bl	8002ce8 <readVacuum>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <StartDefaultTask+0xc10>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]

					// Remove this once STM is connected to Hardware
					//

	  				if(pumpTestsParameters[pump].OTI[2] == hours && pumpTestsParameters[pump].OTI[3] == minutes){	// Success
 8001a84:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	333d      	adds	r3, #61	@ 0x3d
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <StartDefaultTask+0xbec>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d168      	bne.n	8001b74 <StartDefaultTask+0xc14>
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4a27      	ldr	r2, [pc, #156]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001aaa:	460b      	mov	r3, r1
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	333e      	adds	r3, #62	@ 0x3e
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <StartDefaultTask+0xbf0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d159      	bne.n	8001b74 <StartDefaultTask+0xc14>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001ac0:	4824      	ldr	r0, [pc, #144]	@ (8001b54 <StartDefaultTask+0xbf4>)
 8001ac2:	f003 fe59 	bl	8005778 <HAL_TIM_Base_Stop_IT>
	  					// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <StartDefaultTask+0xbf8>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <StartDefaultTask+0xbf8>)
 8001ad2:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8001ad4:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <StartDefaultTask+0xbfc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 ff99 	bl	8007a10 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4918      	ldr	r1, [pc, #96]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	440b      	add	r3, r1
 8001af0:	3314      	adds	r3, #20
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	1c59      	adds	r1, r3, #1
 8001af6:	4814      	ldr	r0, [pc, #80]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	4403      	add	r3, r0
 8001b02:	3314      	adds	r3, #20
 8001b04:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001b0e:	460b      	mov	r3, r1
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	3314      	adds	r3, #20
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a09      	ldr	r2, [pc, #36]	@ (8001b44 <StartDefaultTask+0xbe4>)
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	4611      	mov	r1, r2
 8001b22:	7818      	ldrb	r0, [r3, #0]
 8001b24:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <StartDefaultTask+0xbe8>)
 8001b26:	460b      	mov	r3, r1
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4413      	add	r3, r2
 8001b30:	3318      	adds	r3, #24
 8001b32:	4602      	mov	r2, r0
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	e045      	b.n	8001bc4 <StartDefaultTask+0xc64>
 8001b38:	20000258 	.word	0x20000258
 8001b3c:	20000a10 	.word	0x20000a10
 8001b40:	20000a1c 	.word	0x20000a1c
 8001b44:	20000a0c 	.word	0x20000a0c
 8001b48:	2000096c 	.word	0x2000096c
 8001b4c:	20000a3a 	.word	0x20000a3a
 8001b50:	20000a3b 	.word	0x20000a3b
 8001b54:	20000300 	.word	0x20000300
 8001b58:	20000a39 	.word	0x20000a39
 8001b5c:	20000964 	.word	0x20000964
 8001b60:	20000038 	.word	0x20000038
 8001b64:	200003d4 	.word	0x200003d4
 8001b68:	200009a7 	.word	0x200009a7
 8001b6c:	20000968 	.word	0x20000968
 8001b70:	20000a20 	.word	0x20000a20
	  				}else if(temperature >= pumpTestsParameters[0].OTI[7]){	// if current temp is >= temp limit
 8001b74:	4b90      	ldr	r3, [pc, #576]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001b76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b82:	4b8e      	ldr	r3, [pc, #568]	@ (8001dbc <StartDefaultTask+0xe5c>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	d818      	bhi.n	8001bc4 <StartDefaultTask+0xc64>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001b92:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4a87      	ldr	r2, [pc, #540]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	220e      	movs	r2, #14
 8001ba8:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001baa:	4b85      	ldr	r3, [pc, #532]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4a81      	ldr	r2, [pc, #516]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	334e      	adds	r3, #78	@ 0x4e
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	701a      	strb	r2, [r3, #0]
	  					break;
 8001bc2:	e1f6      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  				}
	  				osDelay(100);
 8001bc4:	2064      	movs	r0, #100	@ 0x64
 8001bc6:	f005 ff8b 	bl	8007ae0 <osDelay>
	  				break;
 8001bca:	e1f2      	b.n	8001fb2 <StartDefaultTask+0x1052>
//					pumpTestsParameters[0].UMTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].UMI[8] = 50;		// Flow Rate
//					pumpTestsParameters[0].UMTI[9] = 15;	// Pressure in kPA

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	3318      	adds	r3, #24
 8001bdc:	4a76      	ldr	r2, [pc, #472]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001bde:	1899      	adds	r1, r3, r2
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
 8001be4:	2201      	movs	r2, #1
 8001be6:	4877      	ldr	r0, [pc, #476]	@ (8001dc4 <StartDefaultTask+0xe64>)
 8001be8:	f004 f8d6 	bl	8005d98 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].UMTI[0], 9, HAL_MAX_DELAY);
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	2209      	movs	r2, #9
 8001bf2:	4975      	ldr	r1, [pc, #468]	@ (8001dc8 <StartDefaultTask+0xe68>)
 8001bf4:	4873      	ldr	r0, [pc, #460]	@ (8001dc4 <StartDefaultTask+0xe64>)
 8001bf6:	f004 f952 	bl	8005e9e <HAL_UART_Receive>

					stepperStep(800);				// close valve half way
 8001bfa:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bfe:	f7fe fddb 	bl	80007b8 <stepperStep>
					HAL_TIM_Base_Start_IT(&htim7);	// starts closing
 8001c02:	4872      	ldr	r0, [pc, #456]	@ (8001dcc <StartDefaultTask+0xe6c>)
 8001c04:	f003 fd40 	bl	8005688 <HAL_TIM_Base_Start_IT>
	  				stepperOpen();
 8001c08:	f7fe fdca 	bl	80007a0 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 8001c0c:	4870      	ldr	r0, [pc, #448]	@ (8001dd0 <StartDefaultTask+0xe70>)
 8001c0e:	f7fe fce7 	bl	80005e0 <flowControllerADC>
					pumpTestsParameters[pump].eNextState = ULTIMATE_MEASURE_TEST;
 8001c12:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4a67      	ldr	r2, [pc, #412]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	3318      	adds	r3, #24
 8001c26:	220c      	movs	r2, #12
 8001c28:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd4 <StartDefaultTask+0xe74>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <StartDefaultTask+0xe74>)
 8001c36:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 8001c38:	4b67      	ldr	r3, [pc, #412]	@ (8001dd8 <StartDefaultTask+0xe78>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 ff1b 	bl	8007a78 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001c42:	4866      	ldr	r0, [pc, #408]	@ (8001ddc <StartDefaultTask+0xe7c>)
 8001c44:	f003 fd20 	bl	8005688 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8001c48:	f7ff f972 	bl	8000f30 <resetTime>

	  				break;
 8001c4c:	e1b1      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  			case ULTIMATE_MEASURE_TEST:
	  				flowControllerADC(&hadc1);
 8001c4e:	4860      	ldr	r0, [pc, #384]	@ (8001dd0 <StartDefaultTask+0xe70>)
 8001c50:	f7fe fcc6 	bl	80005e0 <flowControllerADC>
					volts = adcGet(&hadc1);
 8001c54:	485e      	ldr	r0, [pc, #376]	@ (8001dd0 <StartDefaultTask+0xe70>)
 8001c56:	f000 fbb7 	bl	80023c8 <adcGet>
 8001c5a:	eef0 7a40 	vmov.f32	s15, s0
 8001c5e:	4b60      	ldr	r3, [pc, #384]	@ (8001de0 <StartDefaultTask+0xe80>)
 8001c60:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 8001c64:	4b5e      	ldr	r3, [pc, #376]	@ (8001de0 <StartDefaultTask+0xe80>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	f7fe fcdb 	bl	8000628 <readFlow>
 8001c72:	eef0 7a40 	vmov.f32	s15, s0
 8001c76:	4b5b      	ldr	r3, [pc, #364]	@ (8001de4 <StartDefaultTask+0xe84>)
 8001c78:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 8001c7c:	4854      	ldr	r0, [pc, #336]	@ (8001dd0 <StartDefaultTask+0xe70>)
 8001c7e:	f001 f811 	bl	8002ca4 <vacuumGaugeADC>
					volts = adcGet(&hadc1);
 8001c82:	4853      	ldr	r0, [pc, #332]	@ (8001dd0 <StartDefaultTask+0xe70>)
 8001c84:	f000 fba0 	bl	80023c8 <adcGet>
 8001c88:	eef0 7a40 	vmov.f32	s15, s0
 8001c8c:	4b54      	ldr	r3, [pc, #336]	@ (8001de0 <StartDefaultTask+0xe80>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(volts);
 8001c92:	4b53      	ldr	r3, [pc, #332]	@ (8001de0 <StartDefaultTask+0xe80>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9c:	f001 f824 	bl	8002ce8 <readVacuum>
 8001ca0:	eef0 7a40 	vmov.f32	s15, s0
 8001ca4:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <StartDefaultTask+0xe88>)
 8001ca6:	edc3 7a00 	vstr	s15, [r3]

					// Remove this once STM is connected to Hardware
					//

	  				if(pumpTestsParameters[pump].UMTI[2] == hours && pumpTestsParameters[pump].UMTI[3] == minutes){	// Success
 8001caa:	4b45      	ldr	r3, [pc, #276]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4a41      	ldr	r2, [pc, #260]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	3346      	adds	r3, #70	@ 0x46
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dec <StartDefaultTask+0xe8c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d14a      	bne.n	8001d5e <StartDefaultTask+0xdfe>
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4a3a      	ldr	r2, [pc, #232]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4413      	add	r3, r2
 8001cda:	3347      	adds	r3, #71	@ 0x47
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b44      	ldr	r3, [pc, #272]	@ (8001df0 <StartDefaultTask+0xe90>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d13b      	bne.n	8001d5e <StartDefaultTask+0xdfe>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001ce6:	483d      	ldr	r0, [pc, #244]	@ (8001ddc <StartDefaultTask+0xe7c>)
 8001ce8:	f003 fd46 	bl	8005778 <HAL_TIM_Base_Stop_IT>
	  					// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <StartDefaultTask+0xe74>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <StartDefaultTask+0xe74>)
 8001cf8:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001df4 <StartDefaultTask+0xe94>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f005 fe86 	bl	8007a10 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	492b      	ldr	r1, [pc, #172]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	440b      	add	r3, r1
 8001d16:	3314      	adds	r3, #20
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	4826      	ldr	r0, [pc, #152]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4403      	add	r3, r0
 8001d28:	3314      	adds	r3, #20
 8001d2a:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8001d2c:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001d34:	460b      	mov	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3314      	adds	r3, #20
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	4611      	mov	r1, r2
 8001d48:	7818      	ldrb	r0, [r3, #0]
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	3318      	adds	r3, #24
 8001d58:	4602      	mov	r2, r0
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e027      	b.n	8001dae <StartDefaultTask+0xe4e>
	  				}else if(temperature >= pumpTestsParameters[0].UMTI[7]){	// if current temp is >= temp limit
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001d60:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <StartDefaultTask+0xe5c>)
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d818      	bhi.n	8001dae <StartDefaultTask+0xe4e>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001d7c:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3318      	adds	r3, #24
 8001d90:	220e      	movs	r2, #14
 8001d92:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <StartDefaultTask+0xe60>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4a07      	ldr	r2, [pc, #28]	@ (8001db8 <StartDefaultTask+0xe58>)
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	334e      	adds	r3, #78	@ 0x4e
 8001da8:	2202      	movs	r2, #2
 8001daa:	701a      	strb	r2, [r3, #0]
	  					break;
 8001dac:	e101      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 8001dae:	2064      	movs	r0, #100	@ 0x64
 8001db0:	f005 fe96 	bl	8007ae0 <osDelay>
	  				break;
 8001db4:	e0fd      	b.n	8001fb2 <StartDefaultTask+0x1052>
 8001db6:	bf00      	nop
 8001db8:	2000096c 	.word	0x2000096c
 8001dbc:	20000038 	.word	0x20000038
 8001dc0:	20000a0c 	.word	0x20000a0c
 8001dc4:	200003d4 	.word	0x200003d4
 8001dc8:	200009b0 	.word	0x200009b0
 8001dcc:	200002b4 	.word	0x200002b4
 8001dd0:	20000258 	.word	0x20000258
 8001dd4:	20000a39 	.word	0x20000a39
 8001dd8:	20000968 	.word	0x20000968
 8001ddc:	20000300 	.word	0x20000300
 8001de0:	20000a10 	.word	0x20000a10
 8001de4:	20000a1c 	.word	0x20000a1c
 8001de8:	20000a20 	.word	0x20000a20
 8001dec:	20000a3a 	.word	0x20000a3a
 8001df0:	20000a3b 	.word	0x20000a3b
 8001df4:	20000964 	.word	0x20000964
	  			case IDLE:
	  				flowControllerADC(&hadc1);
 8001df8:	486f      	ldr	r0, [pc, #444]	@ (8001fb8 <StartDefaultTask+0x1058>)
 8001dfa:	f7fe fbf1 	bl	80005e0 <flowControllerADC>
					flowVolts = adcGet(&hadc1);
 8001dfe:	486e      	ldr	r0, [pc, #440]	@ (8001fb8 <StartDefaultTask+0x1058>)
 8001e00:	f000 fae2 	bl	80023c8 <adcGet>
 8001e04:	eef0 7a40 	vmov.f32	s15, s0
 8001e08:	4b6c      	ldr	r3, [pc, #432]	@ (8001fbc <StartDefaultTask+0x105c>)
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(flowVolts);
 8001e0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001fbc <StartDefaultTask+0x105c>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	f7fe fc06 	bl	8000628 <readFlow>
 8001e1c:	eef0 7a40 	vmov.f32	s15, s0
 8001e20:	4b67      	ldr	r3, [pc, #412]	@ (8001fc0 <StartDefaultTask+0x1060>)
 8001e22:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 8001e26:	4864      	ldr	r0, [pc, #400]	@ (8001fb8 <StartDefaultTask+0x1058>)
 8001e28:	f000 ff3c 	bl	8002ca4 <vacuumGaugeADC>
					vacVolts = adcGet(&hadc1);
 8001e2c:	4862      	ldr	r0, [pc, #392]	@ (8001fb8 <StartDefaultTask+0x1058>)
 8001e2e:	f000 facb 	bl	80023c8 <adcGet>
 8001e32:	eef0 7a40 	vmov.f32	s15, s0
 8001e36:	4b63      	ldr	r3, [pc, #396]	@ (8001fc4 <StartDefaultTask+0x1064>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(vacVolts);
 8001e3c:	4b61      	ldr	r3, [pc, #388]	@ (8001fc4 <StartDefaultTask+0x1064>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	eeb0 0a67 	vmov.f32	s0, s15
 8001e46:	f000 ff4f 	bl	8002ce8 <readVacuum>
 8001e4a:	eef0 7a40 	vmov.f32	s15, s0
 8001e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001fc8 <StartDefaultTask+0x1068>)
 8001e50:	edc3 7a00 	vstr	s15, [r3]

					// This is the tests for the Flow Controller
					flowRateMethod(0);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7fe fc3d 	bl	80006d4 <flowRateMethod>
					//flowStateControl();
					//flowStateClose();
					flowStateOpen();
 8001e5a:	f7fe fc75 	bl	8000748 <flowStateOpen>
					dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(10));
 8001e5e:	200a      	movs	r0, #10
 8001e60:	f7fe fc10 	bl	8000684 <setFlowRate>
 8001e64:	eef0 7a40 	vmov.f32	s15, s0
 8001e68:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4857      	ldr	r0, [pc, #348]	@ (8001fcc <StartDefaultTask+0x106c>)
 8001e70:	f000 fa76 	bl	8002360 <dacSet>

					solenoidTwoOpen();
 8001e74:	f000 fb02 	bl	800247c <solenoidTwoOpen>
//					}else if(seconds%10 == 5){
//						stepperOpen();
//						HAL_TIM_Base_Start_IT(&htim7);
//					}

					if(seconds%2 == 0){
 8001e78:	4b55      	ldr	r3, [pc, #340]	@ (8001fd0 <StartDefaultTask+0x1070>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <StartDefaultTask+0xf36>
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8001e86:	2140      	movs	r1, #64	@ 0x40
 8001e88:	4852      	ldr	r0, [pc, #328]	@ (8001fd4 <StartDefaultTask+0x1074>)
 8001e8a:	f002 f8b4 	bl	8003ff6 <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 8001e8e:	2120      	movs	r1, #32
 8001e90:	4850      	ldr	r0, [pc, #320]	@ (8001fd4 <StartDefaultTask+0x1074>)
 8001e92:	f002 f8b0 	bl	8003ff6 <HAL_GPIO_TogglePin>
					}

	  				if(!GET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT)){
 8001e96:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <StartDefaultTask+0x1078>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d110      	bne.n	8001ec4 <StartDefaultTask+0xf64>
						// Starts data Transfer
						SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd8 <StartDefaultTask+0x1078>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd8 <StartDefaultTask+0x1078>)
 8001eae:	701a      	strb	r2, [r3, #0]
						osThreadResume(sendDataHandle);
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <StartDefaultTask+0x107c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f005 fddf 	bl	8007a78 <osThreadResume>

						// Starts this timer
						HAL_TIM_Base_Start_IT(&htim10);
 8001eba:	4849      	ldr	r0, [pc, #292]	@ (8001fe0 <StartDefaultTask+0x1080>)
 8001ebc:	f003 fbe4 	bl	8005688 <HAL_TIM_Base_Start_IT>
						resetTime();
 8001ec0:	f7ff f836 	bl	8000f30 <resetTime>
	  				}
					osDelay(1000);
 8001ec4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ec8:	f005 fe0a 	bl	8007ae0 <osDelay>
	  				break;
 8001ecc:	e071      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  			case FAIL_STATE:
	  				HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001ece:	4b45      	ldr	r3, [pc, #276]	@ (8001fe4 <StartDefaultTask+0x1084>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	3318      	adds	r3, #24
 8001ede:	4a42      	ldr	r2, [pc, #264]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001ee0:	1899      	adds	r1, r3, r2
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4840      	ldr	r0, [pc, #256]	@ (8001fec <StartDefaultTask+0x108c>)
 8001eea:	f003 ff55 	bl	8005d98 <HAL_UART_Transmit>
	  				HAL_TIM_Base_Stop_IT(&htim10);
 8001eee:	483c      	ldr	r0, [pc, #240]	@ (8001fe0 <StartDefaultTask+0x1080>)
 8001ef0:	f003 fc42 	bl	8005778 <HAL_TIM_Base_Stop_IT>
	  				osThreadSuspend(sendDataHandle);
 8001ef4:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <StartDefaultTask+0x107c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f005 fd89 	bl	8007a10 <osThreadSuspend>
	  				pumpTestsParameters[pump].currentState++;
 8001efe:	4b39      	ldr	r3, [pc, #228]	@ (8001fe4 <StartDefaultTask+0x1084>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4938      	ldr	r1, [pc, #224]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	440b      	add	r3, r1
 8001f10:	3314      	adds	r3, #20
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1c59      	adds	r1, r3, #1
 8001f16:	4834      	ldr	r0, [pc, #208]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4403      	add	r3, r0
 8001f22:	3314      	adds	r3, #20
 8001f24:	6019      	str	r1, [r3, #0]
	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8001f26:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe4 <StartDefaultTask+0x1084>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001f2e:	460b      	mov	r3, r1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	3314      	adds	r3, #20
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a29      	ldr	r2, [pc, #164]	@ (8001fe4 <StartDefaultTask+0x1084>)
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	4611      	mov	r1, r2
 8001f42:	7818      	ldrb	r0, [r3, #0]
 8001f44:	4a28      	ldr	r2, [pc, #160]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001f46:	460b      	mov	r3, r1
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4413      	add	r3, r2
 8001f50:	3318      	adds	r3, #24
 8001f52:	4602      	mov	r2, r0
 8001f54:	701a      	strb	r2, [r3, #0]
	  				break;
 8001f56:	e02c      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  			case STOP:
	  				HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <StartDefaultTask+0x1084>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	3318      	adds	r3, #24
 8001f68:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001f6a:	1899      	adds	r1, r3, r2
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	2201      	movs	r2, #1
 8001f72:	481e      	ldr	r0, [pc, #120]	@ (8001fec <StartDefaultTask+0x108c>)
 8001f74:	f003 ff10 	bl	8005d98 <HAL_UART_Transmit>
	  				pumpTestsParameters[pump].eNextState = STOP;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <StartDefaultTask+0x1084>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4413      	add	r3, r2
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 8001f90:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f94:	f000 ff4e 	bl	8002e34 <HAL_Delay>
	  				break;
 8001f98:	e00b      	b.n	8001fb2 <StartDefaultTask+0x1052>
	  			default:
	  				pumpTestsParameters[pump].eNextState = START;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <StartDefaultTask+0x1084>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <StartDefaultTask+0x1088>)
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	3318      	adds	r3, #24
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
	  switch(pumpTestsParameters[pump].eNextState) {
 8001fb2:	f7fe bfd9 	b.w	8000f68 <StartDefaultTask+0x8>
 8001fb6:	bf00      	nop
 8001fb8:	20000258 	.word	0x20000258
 8001fbc:	20000a14 	.word	0x20000a14
 8001fc0:	20000a1c 	.word	0x20000a1c
 8001fc4:	20000a18 	.word	0x20000a18
 8001fc8:	20000a20 	.word	0x20000a20
 8001fcc:	200002a0 	.word	0x200002a0
 8001fd0:	20000a3c 	.word	0x20000a3c
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	20000a39 	.word	0x20000a39
 8001fdc:	20000968 	.word	0x20000968
 8001fe0:	20000300 	.word	0x20000300
 8001fe4:	20000a0c 	.word	0x20000a0c
 8001fe8:	2000096c 	.word	0x2000096c
 8001fec:	200003d4 	.word	0x200003d4

08001ff0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  uint8_t *vacuumScaleBytes = (uint8_t *) &vacuumScale;
 8001ff8:	4b7a      	ldr	r3, [pc, #488]	@ (80021e4 <StartTask02+0x1f4>)
 8001ffa:	617b      	str	r3, [r7, #20]
	  uint8_t *temperatureBytes = (uint8_t *) &temperature;
 8001ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80021e8 <StartTask02+0x1f8>)
 8001ffe:	613b      	str	r3, [r7, #16]
	  uint8_t *flowRateBytes = (uint8_t *) &flowRate;
 8002000:	4b7a      	ldr	r3, [pc, #488]	@ (80021ec <StartTask02+0x1fc>)
 8002002:	60fb      	str	r3, [r7, #12]

    switch(pumpTestsParameters[pump].eNextState){
 8002004:	4b7a      	ldr	r3, [pc, #488]	@ (80021f0 <StartTask02+0x200>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4a7a      	ldr	r2, [pc, #488]	@ (80021f4 <StartTask02+0x204>)
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	3318      	adds	r3, #24
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d873      	bhi.n	8002106 <StartTask02+0x116>
 800201e:	a201      	add	r2, pc, #4	@ (adr r2, 8002024 <StartTask02+0x34>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	080021a9 	.word	0x080021a9
 8002028:	08002107 	.word	0x08002107
 800202c:	08002107 	.word	0x08002107
 8002030:	08002107 	.word	0x08002107
 8002034:	08002107 	.word	0x08002107
 8002038:	08002107 	.word	0x08002107
 800203c:	08002107 	.word	0x08002107
 8002040:	08002107 	.word	0x08002107
 8002044:	08002107 	.word	0x08002107
 8002048:	08002107 	.word	0x08002107
 800204c:	08002107 	.word	0x08002107
 8002050:	08002107 	.word	0x08002107
 8002054:	08002107 	.word	0x08002107
 8002058:	08002065 	.word	0x08002065
 800205c:	080021a9 	.word	0x080021a9
 8002060:	080021a9 	.word	0x080021a9
		case START:
			break;
		case IDLE:
			tx_buffer[0] = pumpTestsParameters[pump].eNextState;
 8002064:	4b62      	ldr	r3, [pc, #392]	@ (80021f0 <StartTask02+0x200>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	4a62      	ldr	r2, [pc, #392]	@ (80021f4 <StartTask02+0x204>)
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3318      	adds	r3, #24
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	4b5f      	ldr	r3, [pc, #380]	@ (80021f8 <StartTask02+0x208>)
 800207c:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = pump;
 800207e:	4b5c      	ldr	r3, [pc, #368]	@ (80021f0 <StartTask02+0x200>)
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	4b5d      	ldr	r3, [pc, #372]	@ (80021f8 <StartTask02+0x208>)
 8002084:	705a      	strb	r2, [r3, #1]
			tx_buffer[2] = hours;
 8002086:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <StartTask02+0x20c>)
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b5b      	ldr	r3, [pc, #364]	@ (80021f8 <StartTask02+0x208>)
 800208c:	709a      	strb	r2, [r3, #2]
			tx_buffer[3] = minutes;
 800208e:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <StartTask02+0x210>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b59      	ldr	r3, [pc, #356]	@ (80021f8 <StartTask02+0x208>)
 8002094:	70da      	strb	r2, [r3, #3]
			tx_buffer[4] = seconds;
 8002096:	4b5b      	ldr	r3, [pc, #364]	@ (8002204 <StartTask02+0x214>)
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	4b57      	ldr	r3, [pc, #348]	@ (80021f8 <StartTask02+0x208>)
 800209c:	711a      	strb	r2, [r3, #4]
			tx_buffer[5] = vacuumScaleBytes[0];	// Torr
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4b55      	ldr	r3, [pc, #340]	@ (80021f8 <StartTask02+0x208>)
 80020a4:	715a      	strb	r2, [r3, #5]
			tx_buffer[6] = vacuumScaleBytes[1];
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	785a      	ldrb	r2, [r3, #1]
 80020aa:	4b53      	ldr	r3, [pc, #332]	@ (80021f8 <StartTask02+0x208>)
 80020ac:	719a      	strb	r2, [r3, #6]
			tx_buffer[7] = vacuumScaleBytes[2];
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	789a      	ldrb	r2, [r3, #2]
 80020b2:	4b51      	ldr	r3, [pc, #324]	@ (80021f8 <StartTask02+0x208>)
 80020b4:	71da      	strb	r2, [r3, #7]
			tx_buffer[8] = vacuumScaleBytes[3];
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	78da      	ldrb	r2, [r3, #3]
 80020ba:	4b4f      	ldr	r3, [pc, #316]	@ (80021f8 <StartTask02+0x208>)
 80020bc:	721a      	strb	r2, [r3, #8]
			tx_buffer[9] = temperatureBytes[0];	// Temperature in C
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	4b4d      	ldr	r3, [pc, #308]	@ (80021f8 <StartTask02+0x208>)
 80020c4:	725a      	strb	r2, [r3, #9]
			tx_buffer[10] = temperatureBytes[1];
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	785a      	ldrb	r2, [r3, #1]
 80020ca:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <StartTask02+0x208>)
 80020cc:	729a      	strb	r2, [r3, #10]
			tx_buffer[11] = temperatureBytes[2];
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	789a      	ldrb	r2, [r3, #2]
 80020d2:	4b49      	ldr	r3, [pc, #292]	@ (80021f8 <StartTask02+0x208>)
 80020d4:	72da      	strb	r2, [r3, #11]
			tx_buffer[12] = temperatureBytes[3];
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	78da      	ldrb	r2, [r3, #3]
 80020da:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <StartTask02+0x208>)
 80020dc:	731a      	strb	r2, [r3, #12]
			tx_buffer[13] = flowRateBytes[0];	// L/min
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4b45      	ldr	r3, [pc, #276]	@ (80021f8 <StartTask02+0x208>)
 80020e4:	735a      	strb	r2, [r3, #13]
			tx_buffer[14] = flowRateBytes[1];
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	785a      	ldrb	r2, [r3, #1]
 80020ea:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <StartTask02+0x208>)
 80020ec:	739a      	strb	r2, [r3, #14]
			tx_buffer[15] = flowRateBytes[2];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	789a      	ldrb	r2, [r3, #2]
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <StartTask02+0x208>)
 80020f4:	73da      	strb	r2, [r3, #15]
			tx_buffer[16] = flowRateBytes[3];
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	78da      	ldrb	r2, [r3, #3]
 80020fa:	4b3f      	ldr	r3, [pc, #252]	@ (80021f8 <StartTask02+0x208>)
 80020fc:	741a      	strb	r2, [r3, #16]
			tx_buffer_size = 17;
 80020fe:	4b42      	ldr	r3, [pc, #264]	@ (8002208 <StartTask02+0x218>)
 8002100:	2211      	movs	r2, #17
 8002102:	701a      	strb	r2, [r3, #0]
			break;
 8002104:	e051      	b.n	80021aa <StartTask02+0x1ba>
		case FAIL_STATE:
			break;
		case STOP:
			break;
		default:
			tx_buffer[0] = pumpTestsParameters[pump].eNextState;
 8002106:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <StartTask02+0x200>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	4a39      	ldr	r2, [pc, #228]	@ (80021f4 <StartTask02+0x204>)
 800210e:	460b      	mov	r3, r1
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4413      	add	r3, r2
 8002118:	3318      	adds	r3, #24
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <StartTask02+0x208>)
 800211e:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = pump;
 8002120:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <StartTask02+0x200>)
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	4b34      	ldr	r3, [pc, #208]	@ (80021f8 <StartTask02+0x208>)
 8002126:	705a      	strb	r2, [r3, #1]
			tx_buffer[2] = hours;
 8002128:	4b34      	ldr	r3, [pc, #208]	@ (80021fc <StartTask02+0x20c>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <StartTask02+0x208>)
 800212e:	709a      	strb	r2, [r3, #2]
			tx_buffer[3] = minutes;
 8002130:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <StartTask02+0x210>)
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <StartTask02+0x208>)
 8002136:	70da      	strb	r2, [r3, #3]
			tx_buffer[4] = seconds;
 8002138:	4b32      	ldr	r3, [pc, #200]	@ (8002204 <StartTask02+0x214>)
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <StartTask02+0x208>)
 800213e:	711a      	strb	r2, [r3, #4]
			tx_buffer[5] = vacuumScaleBytes[0];	// Torr
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	4b2c      	ldr	r3, [pc, #176]	@ (80021f8 <StartTask02+0x208>)
 8002146:	715a      	strb	r2, [r3, #5]
			tx_buffer[6] = vacuumScaleBytes[1];
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	785a      	ldrb	r2, [r3, #1]
 800214c:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <StartTask02+0x208>)
 800214e:	719a      	strb	r2, [r3, #6]
			tx_buffer[7] = vacuumScaleBytes[2];
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	789a      	ldrb	r2, [r3, #2]
 8002154:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <StartTask02+0x208>)
 8002156:	71da      	strb	r2, [r3, #7]
			tx_buffer[8] = vacuumScaleBytes[3];
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	78da      	ldrb	r2, [r3, #3]
 800215c:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <StartTask02+0x208>)
 800215e:	721a      	strb	r2, [r3, #8]
			tx_buffer[9] = temperatureBytes[0];	// Temperature in C
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <StartTask02+0x208>)
 8002166:	725a      	strb	r2, [r3, #9]
			tx_buffer[10] = temperatureBytes[1];
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	785a      	ldrb	r2, [r3, #1]
 800216c:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <StartTask02+0x208>)
 800216e:	729a      	strb	r2, [r3, #10]
			tx_buffer[11] = temperatureBytes[2];
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	789a      	ldrb	r2, [r3, #2]
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <StartTask02+0x208>)
 8002176:	72da      	strb	r2, [r3, #11]
			tx_buffer[12] = temperatureBytes[3];
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	78da      	ldrb	r2, [r3, #3]
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <StartTask02+0x208>)
 800217e:	731a      	strb	r2, [r3, #12]
			tx_buffer[13] = flowRateBytes[0];	// L/min
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <StartTask02+0x208>)
 8002186:	735a      	strb	r2, [r3, #13]
			tx_buffer[14] = flowRateBytes[1];
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	785a      	ldrb	r2, [r3, #1]
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <StartTask02+0x208>)
 800218e:	739a      	strb	r2, [r3, #14]
			tx_buffer[15] = flowRateBytes[2];
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	789a      	ldrb	r2, [r3, #2]
 8002194:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <StartTask02+0x208>)
 8002196:	73da      	strb	r2, [r3, #15]
			tx_buffer[16] = flowRateBytes[3];
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	78da      	ldrb	r2, [r3, #3]
 800219c:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <StartTask02+0x208>)
 800219e:	741a      	strb	r2, [r3, #16]
			tx_buffer_size = 17;
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <StartTask02+0x218>)
 80021a2:	2211      	movs	r2, #17
 80021a4:	701a      	strb	r2, [r3, #0]
			break;
 80021a6:	e000      	b.n	80021aa <StartTask02+0x1ba>
			break;
 80021a8:	bf00      	nop
    }
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buffer, tx_buffer_size);
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <StartTask02+0x218>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	4911      	ldr	r1, [pc, #68]	@ (80021f8 <StartTask02+0x208>)
 80021b2:	4816      	ldr	r0, [pc, #88]	@ (800220c <StartTask02+0x21c>)
 80021b4:	f003 ff38 	bl	8006028 <HAL_UART_Transmit_IT>
    //HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, tx_buffer_size, HAL_MAX_DELAY);

    // If data no longer needs to be sent
	if(!GET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT)){
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <StartTask02+0x220>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <StartTask02+0x1ea>
		osThreadResume(stateMachineHandle);
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <StartTask02+0x224>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f005 fc55 	bl	8007a78 <osThreadResume>
		osThreadSuspend(sendDataHandle);
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <StartTask02+0x228>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f005 fc1c 	bl	8007a10 <osThreadSuspend>
 80021d8:	e70e      	b.n	8001ff8 <StartTask02+0x8>
	}else{
		osDelay(1000);
 80021da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021de:	f005 fc7f 	bl	8007ae0 <osDelay>
  {
 80021e2:	e709      	b.n	8001ff8 <StartTask02+0x8>
 80021e4:	20000a20 	.word	0x20000a20
 80021e8:	20000038 	.word	0x20000038
 80021ec:	20000a1c 	.word	0x20000a1c
 80021f0:	20000a0c 	.word	0x20000a0c
 80021f4:	2000096c 	.word	0x2000096c
 80021f8:	20000a24 	.word	0x20000a24
 80021fc:	20000a3a 	.word	0x20000a3a
 8002200:	20000a3b 	.word	0x20000a3b
 8002204:	20000a3c 	.word	0x20000a3c
 8002208:	20000a38 	.word	0x20000a38
 800220c:	200003d4 	.word	0x200003d4
 8002210:	20000a39 	.word	0x20000a39
 8002214:	20000964 	.word	0x20000964
 8002218:	20000968 	.word	0x20000968

0800221c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3b      	ldr	r2, [pc, #236]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800222e:	f000 fde1 	bl	8002df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim10) { // This a timer period = 1 sec
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a39      	ldr	r2, [pc, #228]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d11f      	bne.n	800227a <HAL_TIM_PeriodElapsedCallback+0x5e>
  		seconds++;
 800223a:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002244:	701a      	strb	r2, [r3, #0]
  		if(seconds == 60){
 8002246:	4b36      	ldr	r3, [pc, #216]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b3c      	cmp	r3, #60	@ 0x3c
 800224c:	d115      	bne.n	800227a <HAL_TIM_PeriodElapsedCallback+0x5e>
  			seconds = 0;
 800224e:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  			minutes++;
 8002254:	4b33      	ldr	r3, [pc, #204]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800225e:	701a      	strb	r2, [r3, #0]
  			if(minutes == 60){
 8002260:	4b30      	ldr	r3, [pc, #192]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b3c      	cmp	r3, #60	@ 0x3c
 8002266:	d108      	bne.n	800227a <HAL_TIM_PeriodElapsedCallback+0x5e>
  				minutes = 0;
 8002268:	4b2e      	ldr	r3, [pc, #184]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
  				hours++;
 800226e:	4b2e      	ldr	r3, [pc, #184]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002278:	701a      	strb	r2, [r3, #0]
  			}
  		}
  	}
  if(htim->Instance == TIM7) { // This is for PWM
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2b      	ldr	r2, [pc, #172]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d144      	bne.n	800230e <HAL_TIM_PeriodElapsedCallback+0xf2>
	  currPos = toggleCount/2;
 8002284:	4b2a      	ldr	r3, [pc, #168]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800228e:	801a      	strh	r2, [r3, #0]
	if(steps != currPos || ((toggleCount%2) != 0)){
 8002290:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_TIM_PeriodElapsedCallback+0x8e>
 800229c:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d02e      	beq.n	8002308 <HAL_TIM_PeriodElapsedCallback+0xec>
		if(steps > currPos ){
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d90e      	bls.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0xb8>
			HAL_GPIO_WritePin(dirGroup, dirPin, SET);
 80022b6:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a21      	ldr	r2, [pc, #132]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022bc:	8811      	ldrh	r1, [r2, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 fe7f 	bl	8003fc4 <HAL_GPIO_WritePin>
			toggleCount++;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	e00d      	b.n	80022f0 <HAL_TIM_PeriodElapsedCallback+0xd4>
		}
		else {
			HAL_GPIO_WritePin(dirGroup, dirPin, RESET);
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a19      	ldr	r2, [pc, #100]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022da:	8811      	ldrh	r1, [r2, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fe70 	bl	8003fc4 <HAL_GPIO_WritePin>
			toggleCount--;
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80022ee:	801a      	strh	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(pulGroup, pulPin);
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fe7b 	bl	8003ff6 <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim7);
 8002300:	4812      	ldr	r0, [pc, #72]	@ (800234c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002302:	f003 f9c1 	bl	8005688 <HAL_TIM_Base_Start_IT>
	}
	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_5);
  }

  /* USER CODE END Callback 1 */
}
 8002306:	e002      	b.n	800230e <HAL_TIM_PeriodElapsedCallback+0xf2>
		HAL_TIM_Base_Stop_IT(&htim7);
 8002308:	4810      	ldr	r0, [pc, #64]	@ (800234c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800230a:	f003 fa35 	bl	8005778 <HAL_TIM_Base_Stop_IT>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40001000 	.word	0x40001000
 800231c:	20000300 	.word	0x20000300
 8002320:	20000a3c 	.word	0x20000a3c
 8002324:	20000a3b 	.word	0x20000a3b
 8002328:	20000a3a 	.word	0x20000a3a
 800232c:	40001400 	.word	0x40001400
 8002330:	20000250 	.word	0x20000250
 8002334:	20000252 	.word	0x20000252
 8002338:	20000254 	.word	0x20000254
 800233c:	20000030 	.word	0x20000030
 8002340:	20000034 	.word	0x20000034
 8002344:	20000028 	.word	0x20000028
 8002348:	2000002c 	.word	0x2000002c
 800234c:	200002b4 	.word	0x200002b4

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <Error_Handler+0x8>
 800235c:	0000      	movs	r0, r0
	...

08002360 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f001 fab5 	bl	80038e0 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 8002376:	edd7 7a01 	vldr	s15, [r7, #4]
 800237a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800237e:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 80023b0 <dacSet+0x50>
 8002382:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002386:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80023b8 <dacSet+0x58>
 800238a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800238e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002392:	ee17 2a90 	vmov	r2, s15
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <dacSet+0x60>)
 8002398:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <dacSet+0x60>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f001 fb48 	bl	8003a38 <HAL_DAC_SetValue>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	66666666 	.word	0x66666666
 80023b4:	400a6666 	.word	0x400a6666
 80023b8:	00000000 	.word	0x00000000
 80023bc:	40affe00 	.word	0x40affe00
 80023c0:	20000a40 	.word	0x20000a40
 80023c4:	00000000 	.word	0x00000000

080023c8 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fd97 	bl	8002f04 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 80023d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fe94 	bl	8003108 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 ff1c 	bl	800321e <HAL_ADC_GetValue>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <adcGet+0x70>)
 80023ec:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <adcGet+0x70>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023fa:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800243c <adcGet+0x74>
 80023fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002402:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002406:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8002430 <adcGet+0x68>
 800240a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800240e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <adcGet+0x78>)
 8002414:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fe41 	bl	80030a0 <HAL_ADC_Stop>
	return adcVolts;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <adcGet+0x78>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
}
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	66666666 	.word	0x66666666
 8002434:	400a6666 	.word	0x400a6666
 8002438:	20000a44 	.word	0x20000a44
 800243c:	457ff000 	.word	0x457ff000
 8002440:	20000a48 	.word	0x20000a48

08002444 <solenoidOneOpen>:
    // Now you can use buffer as a string
    //HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOneOpen(){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(solenoidOneGroup, solenoidOnePin, 1);	// 3.3 V
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <solenoidOneOpen+0x28>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <solenoidOneOpen+0x2c>)
 800244e:	8811      	ldrh	r1, [r2, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fdb6 	bl	8003fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(solenoidTwoGroup, solenoidTwoPin, 0);
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <solenoidOneOpen+0x30>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a06      	ldr	r2, [pc, #24]	@ (8002478 <solenoidOneOpen+0x34>)
 800245e:	8811      	ldrh	r1, [r2, #0]
 8002460:	2200      	movs	r2, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fdae 	bl	8003fc4 <HAL_GPIO_WritePin>
	return;
 8002468:	bf00      	nop
}
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000003c 	.word	0x2000003c
 8002470:	20000040 	.word	0x20000040
 8002474:	20000044 	.word	0x20000044
 8002478:	20000048 	.word	0x20000048

0800247c <solenoidTwoOpen>:
void solenoidTwoOpen(){
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(solenoidOneGroup, solenoidOnePin, 0);
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <solenoidTwoOpen+0x28>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <solenoidTwoOpen+0x2c>)
 8002486:	8811      	ldrh	r1, [r2, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fd9a 	bl	8003fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(solenoidTwoGroup, solenoidTwoPin, 1);
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <solenoidTwoOpen+0x30>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <solenoidTwoOpen+0x34>)
 8002496:	8811      	ldrh	r1, [r2, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f001 fd92 	bl	8003fc4 <HAL_GPIO_WritePin>
	return;
 80024a0:	bf00      	nop
}
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000003c 	.word	0x2000003c
 80024a8:	20000040 	.word	0x20000040
 80024ac:	20000044 	.word	0x20000044
 80024b0:	20000048 	.word	0x20000048

080024b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_MspInit+0x4c>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_MspInit+0x4c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_MspInit+0x4c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_MspInit+0x4c>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_MspInit+0x4c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	210f      	movs	r1, #15
 80024ee:	f06f 0001 	mvn.w	r0, #1
 80024f2:	f001 f9a9 	bl	8003848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a21      	ldr	r2, [pc, #132]	@ (80025a8 <HAL_ADC_MspInit+0xa4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d13b      	bne.n	800259e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002526:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	4a20      	ldr	r2, [pc, #128]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	6453      	str	r3, [r2, #68]	@ 0x44
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a1a      	ldr	r2, [pc, #104]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_ADC_MspInit+0xa8>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002572:	2303      	movs	r3, #3
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	480b      	ldr	r0, [pc, #44]	@ (80025b0 <HAL_ADC_MspInit+0xac>)
 8002582:	f001 fb73 	bl	8003c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8002586:	2368      	movs	r3, #104	@ 0x68
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258a:	2303      	movs	r3, #3
 800258c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4806      	ldr	r0, [pc, #24]	@ (80025b4 <HAL_ADC_MspInit+0xb0>)
 800259a:	f001 fb67 	bl	8003c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40012000 	.word	0x40012000
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020000 	.word	0x40020000

080025b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a19      	ldr	r2, [pc, #100]	@ (800263c <HAL_DAC_MspInit+0x84>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d12b      	bne.n	8002632 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_DAC_MspInit+0x88>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	4a18      	ldr	r2, [pc, #96]	@ (8002640 <HAL_DAC_MspInit+0x88>)
 80025e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80025e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e6:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <HAL_DAC_MspInit+0x88>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_DAC_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <HAL_DAC_MspInit+0x88>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <HAL_DAC_MspInit+0x88>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800260a:	2310      	movs	r3, #16
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260e:	2303      	movs	r3, #3
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4809      	ldr	r0, [pc, #36]	@ (8002644 <HAL_DAC_MspInit+0x8c>)
 800261e:	f001 fb25 	bl	8003c6c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	210f      	movs	r1, #15
 8002626:	2036      	movs	r0, #54	@ 0x36
 8002628:	f001 f90e 	bl	8003848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800262c:	2036      	movs	r0, #54	@ 0x36
 800262e:	f001 f927 	bl	8003880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	@ 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40007400 	.word	0x40007400
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000

08002648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <HAL_TIM_Base_MspInit+0x78>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d114      	bne.n	8002684 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <HAL_TIM_Base_MspInit+0x7c>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002660:	f043 0320 	orr.w	r3, r3, #32
 8002664:	6413      	str	r3, [r2, #64]	@ 0x40
 8002666:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2105      	movs	r1, #5
 8002676:	2037      	movs	r0, #55	@ 0x37
 8002678:	f001 f8e6 	bl	8003848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800267c:	2037      	movs	r0, #55	@ 0x37
 800267e:	f001 f8ff 	bl	8003880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002682:	e018      	b.n	80026b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM10)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0f      	ldr	r2, [pc, #60]	@ (80026c8 <HAL_TIM_Base_MspInit+0x80>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d113      	bne.n	80026b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800268e:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <HAL_TIM_Base_MspInit+0x7c>)
 8002694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002698:	6453      	str	r3, [r2, #68]	@ 0x44
 800269a:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_TIM_Base_MspInit+0x7c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2105      	movs	r1, #5
 80026aa:	2019      	movs	r0, #25
 80026ac:	f001 f8cc 	bl	8003848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026b0:	2019      	movs	r0, #25
 80026b2:	f001 f8e5 	bl	8003880 <HAL_NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40001400 	.word	0x40001400
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40014400 	.word	0x40014400

080026cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b0b0      	sub	sp, #192	@ 0xc0
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	2290      	movs	r2, #144	@ 0x90
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f008 fd60 	bl	800b1b2 <memset>
  if(huart->Instance==UART5)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a58      	ldr	r2, [pc, #352]	@ (8002858 <HAL_UART_MspInit+0x18c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d15f      	bne.n	80027bc <HAL_UART_MspInit+0xf0>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80026fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002700:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002702:	2300      	movs	r3, #0
 8002704:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4618      	mov	r0, r3
 800270c:	f002 fb3c 	bl	8004d88 <HAL_RCCEx_PeriphCLKConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002716:	f7ff fe1b 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800271a:	4b50      	ldr	r3, [pc, #320]	@ (800285c <HAL_UART_MspInit+0x190>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002724:	6413      	str	r3, [r2, #64]	@ 0x40
 8002726:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	4b4a      	ldr	r3, [pc, #296]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	4a49      	ldr	r2, [pc, #292]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6313      	str	r3, [r2, #48]	@ 0x30
 800273e:	4b47      	ldr	r3, [pc, #284]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	4b44      	ldr	r3, [pc, #272]	@ (800285c <HAL_UART_MspInit+0x190>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a43      	ldr	r2, [pc, #268]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002762:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002766:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 800277c:	2307      	movs	r3, #7
 800277e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002782:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002786:	4619      	mov	r1, r3
 8002788:	4835      	ldr	r0, [pc, #212]	@ (8002860 <HAL_UART_MspInit+0x194>)
 800278a:	f001 fa6f 	bl	8003c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800278e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 80027a8:	2307      	movs	r3, #7
 80027aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027b2:	4619      	mov	r1, r3
 80027b4:	482b      	ldr	r0, [pc, #172]	@ (8002864 <HAL_UART_MspInit+0x198>)
 80027b6:	f001 fa59 	bl	8003c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027ba:	e049      	b.n	8002850 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a29      	ldr	r2, [pc, #164]	@ (8002868 <HAL_UART_MspInit+0x19c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d144      	bne.n	8002850 <HAL_UART_MspInit+0x184>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 fad7 	bl	8004d88 <HAL_RCCEx_PeriphCLKConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_UART_MspInit+0x118>
      Error_Handler();
 80027e0:	f7ff fdb6 	bl	8002350 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e4:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <HAL_UART_MspInit+0x190>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	4a1c      	ldr	r2, [pc, #112]	@ (800285c <HAL_UART_MspInit+0x190>)
 80027ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f0:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <HAL_UART_MspInit+0x190>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fc:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_UART_MspInit+0x190>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	4a16      	ldr	r2, [pc, #88]	@ (800285c <HAL_UART_MspInit+0x190>)
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	6313      	str	r3, [r2, #48]	@ 0x30
 8002808:	4b14      	ldr	r3, [pc, #80]	@ (800285c <HAL_UART_MspInit+0x190>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002814:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800282e:	2307      	movs	r3, #7
 8002830:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002834:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002838:	4619      	mov	r1, r3
 800283a:	480c      	ldr	r0, [pc, #48]	@ (800286c <HAL_UART_MspInit+0x1a0>)
 800283c:	f001 fa16 	bl	8003c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	2105      	movs	r1, #5
 8002844:	2027      	movs	r0, #39	@ 0x27
 8002846:	f000 ffff 	bl	8003848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800284a:	2027      	movs	r0, #39	@ 0x27
 800284c:	f001 f818 	bl	8003880 <HAL_NVIC_EnableIRQ>
}
 8002850:	bf00      	nop
 8002852:	37c0      	adds	r7, #192	@ 0xc0
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40005000 	.word	0x40005000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020800 	.word	0x40020800
 8002864:	40020400 	.word	0x40020400
 8002868:	40004800 	.word	0x40004800
 800286c:	40020c00 	.word	0x40020c00

08002870 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0ae      	sub	sp, #184	@ 0xb8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2290      	movs	r2, #144	@ 0x90
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f008 fc8e 	bl	800b1b2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800289e:	d159      	bne.n	8002954 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80028a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fa69 	bl	8004d88 <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80028bc:	f7ff fd48 	bl	8002350 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c0:	4b26      	ldr	r3, [pc, #152]	@ (800295c <HAL_PCD_MspInit+0xec>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_PCD_MspInit+0xec>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80028cc:	4b23      	ldr	r3, [pc, #140]	@ (800295c <HAL_PCD_MspInit+0xec>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80028d8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80028dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80028f2:	230a      	movs	r3, #10
 80028f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4818      	ldr	r0, [pc, #96]	@ (8002960 <HAL_PCD_MspInit+0xf0>)
 8002900:	f001 f9b4 	bl	8003c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800291c:	4619      	mov	r1, r3
 800291e:	4810      	ldr	r0, [pc, #64]	@ (8002960 <HAL_PCD_MspInit+0xf0>)
 8002920:	f001 f9a4 	bl	8003c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002924:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <HAL_PCD_MspInit+0xec>)
 8002926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002928:	4a0c      	ldr	r2, [pc, #48]	@ (800295c <HAL_PCD_MspInit+0xec>)
 800292a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800292e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002930:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_PCD_MspInit+0xec>)
 8002932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4b07      	ldr	r3, [pc, #28]	@ (800295c <HAL_PCD_MspInit+0xec>)
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	4a06      	ldr	r2, [pc, #24]	@ (800295c <HAL_PCD_MspInit+0xec>)
 8002942:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002946:	6453      	str	r3, [r2, #68]	@ 0x44
 8002948:	4b04      	ldr	r3, [pc, #16]	@ (800295c <HAL_PCD_MspInit+0xec>)
 800294a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002954:	bf00      	nop
 8002956:	37b8      	adds	r7, #184	@ 0xb8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000

08002964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08e      	sub	sp, #56	@ 0x38
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002974:	4b33      	ldr	r3, [pc, #204]	@ (8002a44 <HAL_InitTick+0xe0>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	4a32      	ldr	r2, [pc, #200]	@ (8002a44 <HAL_InitTick+0xe0>)
 800297a:	f043 0310 	orr.w	r3, r3, #16
 800297e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002980:	4b30      	ldr	r3, [pc, #192]	@ (8002a44 <HAL_InitTick+0xe0>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800298c:	f107 0210 	add.w	r2, r7, #16
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f002 f9c4 	bl	8004d24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029a6:	f002 f995 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 80029aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80029ac:	e004      	b.n	80029b8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029ae:	f002 f991 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 80029b2:	4603      	mov	r3, r0
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ba:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_InitTick+0xe4>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	0c9b      	lsrs	r3, r3, #18
 80029c2:	3b01      	subs	r3, #1
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029c6:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <HAL_InitTick+0xe8>)
 80029c8:	4a21      	ldr	r2, [pc, #132]	@ (8002a50 <HAL_InitTick+0xec>)
 80029ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029cc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a4c <HAL_InitTick+0xe8>)
 80029ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029d4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <HAL_InitTick+0xe8>)
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029da:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <HAL_InitTick+0xe8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_InitTick+0xe8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <HAL_InitTick+0xe8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80029ec:	4817      	ldr	r0, [pc, #92]	@ (8002a4c <HAL_InitTick+0xe8>)
 80029ee:	f002 fdf3 	bl	80055d8 <HAL_TIM_Base_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80029f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11b      	bne.n	8002a38 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a00:	4812      	ldr	r0, [pc, #72]	@ (8002a4c <HAL_InitTick+0xe8>)
 8002a02:	f002 fe41 	bl	8005688 <HAL_TIM_Base_Start_IT>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d111      	bne.n	8002a38 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a14:	2036      	movs	r0, #54	@ 0x36
 8002a16:	f000 ff33 	bl	8003880 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b0f      	cmp	r3, #15
 8002a1e:	d808      	bhi.n	8002a32 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002a20:	2200      	movs	r2, #0
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	2036      	movs	r0, #54	@ 0x36
 8002a26:	f000 ff0f 	bl	8003848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <HAL_InitTick+0xf0>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	e002      	b.n	8002a38 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3738      	adds	r7, #56	@ 0x38
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	431bde83 	.word	0x431bde83
 8002a4c:	20000a4c 	.word	0x20000a4c
 8002a50:	40001000 	.word	0x40001000
 8002a54:	2000005c 	.word	0x2000005c

08002a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <NMI_Handler+0x4>

08002a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <HardFault_Handler+0x4>

08002a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <MemManage_Handler+0x4>

08002a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <BusFault_Handler+0x4>

08002a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <UsageFault_Handler+0x4>

08002a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002a94:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a96:	f002 fe9e 	bl	80057d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000300 	.word	0x20000300

08002aa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002aa8:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <USART3_IRQHandler+0x10>)
 8002aaa:	f003 fb1b 	bl	80060e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200003d4 	.word	0x200003d4

08002ab8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <TIM6_DAC_IRQHandler+0x20>)
 8002abe:	791b      	ldrb	r3, [r3, #4]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002ac6:	4804      	ldr	r0, [pc, #16]	@ (8002ad8 <TIM6_DAC_IRQHandler+0x20>)
 8002ac8:	f000 ff5c 	bl	8003984 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002acc:	4803      	ldr	r0, [pc, #12]	@ (8002adc <TIM6_DAC_IRQHandler+0x24>)
 8002ace:	f002 fe82 	bl	80057d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200002a0 	.word	0x200002a0
 8002adc:	20000a4c 	.word	0x20000a4c

08002ae0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <TIM7_IRQHandler+0x10>)
 8002ae6:	f002 fe76 	bl	80057d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200002b4 	.word	0x200002b4

08002af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return 1;
 8002af8:	2301      	movs	r3, #1
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_kill>:

int _kill(int pid, int sig)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b0e:	f008 fbf9 	bl	800b304 <__errno>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2216      	movs	r2, #22
 8002b16:	601a      	str	r2, [r3, #0]
  return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_exit>:

void _exit (int status)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ffe7 	bl	8002b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b36:	bf00      	nop
 8002b38:	e7fd      	b.n	8002b36 <_exit+0x12>

08002b3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e00a      	b.n	8002b62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b4c:	f3af 8000 	nop.w
 8002b50:	4601      	mov	r1, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	60ba      	str	r2, [r7, #8]
 8002b58:	b2ca      	uxtb	r2, r1
 8002b5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	dbf0      	blt.n	8002b4c <_read+0x12>
  }

  return len;
 8002b6a:	687b      	ldr	r3, [r7, #4]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e009      	b.n	8002b9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	60ba      	str	r2, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	dbf1      	blt.n	8002b86 <_write+0x12>
  }
  return len;
 8002ba2:	687b      	ldr	r3, [r7, #4]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_close>:

int _close(int file)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_isatty>:

int _isatty(int file)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <_sbrk+0x5c>)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <_sbrk+0x60>)
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c28:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <_sbrk+0x64>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	@ (8002c7c <_sbrk+0x68>)
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d207      	bcs.n	8002c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c44:	f008 fb5e 	bl	800b304 <__errno>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e009      	b.n	8002c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a05      	ldr	r2, [pc, #20]	@ (8002c78 <_sbrk+0x64>)
 8002c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20080000 	.word	0x20080000
 8002c74:	00000400 	.word	0x00000400
 8002c78:	20000a98 	.word	0x20000a98
 8002c7c:	200055d0 	.word	0x200055d0

08002c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <SystemInit+0x20>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <SystemInit+0x20>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_10;
 8002cba:	230a      	movs	r3, #10
 8002cbc:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fab3 	bl	8003238 <HAL_ADC_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8002cd8:	f7ff fb3a 	bl	8002350 <Error_Handler>
	}
	return;
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
}
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <readVacuum>:

float readVacuum(float voltage){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	ed2d 8b02 	vpush	{d8}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	ed87 0a01 	vstr	s0, [r7, #4]

	float exponent = (voltage * 3.13 - referenceVoltage)/scalingFactor;
 8002cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfe:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8002d70 <readVacuum+0x88>
 8002d02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d06:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <readVacuum+0x90>)
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d10:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <readVacuum+0x94>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d26:	edc7 7a03 	vstr	s15, [r7, #12]
	pressure = referencePressure * pow(10, exponent);
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <readVacuum+0x98>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d3c:	eeb0 1b47 	vmov.f64	d1, d7
 8002d40:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002d44:	f00a f974 	bl	800d030 <pow>
 8002d48:	eeb0 7b40 	vmov.f64	d7, d0
 8002d4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <readVacuum+0x9c>)
 8002d56:	edc3 7a00 	vstr	s15, [r3]

	return pressure;
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <readVacuum+0x9c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	ee07 3a90 	vmov	s15, r3
}
 8002d62:	eeb0 0a67 	vmov.f32	s0, s15
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	ecbd 8b02 	vpop	{d8}
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	70a3d70a 	.word	0x70a3d70a
 8002d74:	40090a3d 	.word	0x40090a3d
 8002d78:	20000054 	.word	0x20000054
 8002d7c:	20000058 	.word	0x20000058
 8002d80:	20000050 	.word	0x20000050
 8002d84:	20000a9c 	.word	0x20000a9c

08002d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d8c:	480d      	ldr	r0, [pc, #52]	@ (8002dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d8e:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d90:	4a0e      	ldr	r2, [pc, #56]	@ (8002dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d94:	e002      	b.n	8002d9c <LoopCopyDataInit>

08002d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9a:	3304      	adds	r3, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da0:	d3f9      	bcc.n	8002d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da2:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002da4:	4c0b      	ldr	r4, [pc, #44]	@ (8002dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da8:	e001      	b.n	8002dae <LoopFillZerobss>

08002daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dac:	3204      	adds	r2, #4

08002dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db0:	d3fb      	bcc.n	8002daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002db2:	f7ff ff65 	bl	8002c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db6:	f008 faab 	bl	800b310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dba:	f7fd fd2b 	bl	8000814 <main>
  bx  lr    
 8002dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dc0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002dcc:	0800f2a0 	.word	0x0800f2a0
  ldr r2, =_sbss
 8002dd0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002dd4:	200055d0 	.word	0x200055d0

08002dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <ADC_IRQHandler>

08002dda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dde:	2003      	movs	r0, #3
 8002de0:	f000 fd27 	bl	8003832 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de4:	200f      	movs	r0, #15
 8002de6:	f7ff fdbd 	bl	8002964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dea:	f7ff fb63 	bl	80024b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000060 	.word	0x20000060
 8002e18:	20000aa0 	.word	0x20000aa0

08002e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000aa0 	.word	0x20000aa0

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff ffee 	bl	8002e1c <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000060 	.word	0x20000060

08002e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e031      	b.n	8002ef6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fb32 	bl	8002504 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_ADC_Init+0x84>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fb0a 	bl	80034e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ee6:	e001      	b.n	8002eec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	ffffeefd 	.word	0xffffeefd

08002f04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Start+0x1a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0ad      	b.n	800307a <HAL_ADC_Start+0x176>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d018      	beq.n	8002f66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f44:	4b50      	ldr	r3, [pc, #320]	@ (8003088 <HAL_ADC_Start+0x184>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a50      	ldr	r2, [pc, #320]	@ (800308c <HAL_ADC_Start+0x188>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9a      	lsrs	r2, r3, #18
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f58:	e002      	b.n	8002f60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f9      	bne.n	8002f5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d175      	bne.n	8003060 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f78:	4b45      	ldr	r3, [pc, #276]	@ (8003090 <HAL_ADC_Start+0x18c>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fae:	d106      	bne.n	8002fbe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb4:	f023 0206 	bic.w	r2, r3, #6
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fbc:	e002      	b.n	8002fc4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002fd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_ADC_Start+0x190>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d143      	bne.n	8003078 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e03a      	b.n	8003078 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <HAL_ADC_Start+0x194>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10e      	bne.n	800302a <HAL_ADC_Start+0x126>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003028:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_ADC_Start+0x190>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d120      	bne.n	8003078 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <HAL_ADC_Start+0x198>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d11b      	bne.n	8003078 <HAL_ADC_Start+0x174>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d114      	bne.n	8003078 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	e00b      	b.n	8003078 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0210 	orr.w	r2, r3, #16
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	2000004c 	.word	0x2000004c
 800308c:	431bde83 	.word	0x431bde83
 8003090:	fffff8fe 	.word	0xfffff8fe
 8003094:	40012300 	.word	0x40012300
 8003098:	40012000 	.word	0x40012000
 800309c:	40012200 	.word	0x40012200

080030a0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Stop+0x16>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e01f      	b.n	80030f6 <HAL_ADC_Stop+0x56>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <HAL_ADC_Stop+0x64>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	ffffeefe 	.word	0xffffeefe

08003108 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003124:	d113      	bne.n	800314e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003134:	d10b      	bne.n	800314e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e063      	b.n	8003216 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800314e:	f7ff fe65 	bl	8002e1c <HAL_GetTick>
 8003152:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003154:	e021      	b.n	800319a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d01d      	beq.n	800319a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_ADC_PollForConversion+0x6c>
 8003164:	f7ff fe5a 	bl	8002e1c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d212      	bcs.n	800319a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d00b      	beq.n	800319a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e03d      	b.n	8003216 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d1d6      	bne.n	8003156 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0212 	mvn.w	r2, #18
 80031b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d123      	bne.n	8003214 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11f      	bne.n	8003214 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d111      	bne.n	8003214 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e136      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x28a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b09      	cmp	r3, #9
 8003262:	d93a      	bls.n	80032da <HAL_ADC_ConfigChannel+0xa2>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800326c:	d035      	beq.n	80032da <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68d9      	ldr	r1, [r3, #12]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	3b1e      	subs	r3, #30
 8003284:	2207      	movs	r2, #7
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	400a      	ands	r2, r1
 8003292:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a8d      	ldr	r2, [pc, #564]	@ (80034d0 <HAL_ADC_ConfigChannel+0x298>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	061a      	lsls	r2, r3, #24
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b2:	e035      	b.n	8003320 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68d9      	ldr	r1, [r3, #12]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4403      	add	r3, r0
 80032cc:	3b1e      	subs	r3, #30
 80032ce:	409a      	lsls	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d8:	e022      	b.n	8003320 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6919      	ldr	r1, [r3, #16]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	2207      	movs	r2, #7
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43da      	mvns	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	400a      	ands	r2, r1
 80032fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6919      	ldr	r1, [r3, #16]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	4618      	mov	r0, r3
 8003310:	4603      	mov	r3, r0
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4403      	add	r3, r0
 8003316:	409a      	lsls	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d824      	bhi.n	8003372 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b05      	subs	r3, #5
 800333a:	221f      	movs	r2, #31
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43da      	mvns	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	400a      	ands	r2, r1
 8003348:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	3b05      	subs	r3, #5
 8003364:	fa00 f203 	lsl.w	r2, r0, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003370:	e04c      	b.n	800340c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d824      	bhi.n	80033c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	3b23      	subs	r3, #35	@ 0x23
 800338c:	221f      	movs	r2, #31
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	400a      	ands	r2, r1
 800339a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	4618      	mov	r0, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	3b23      	subs	r3, #35	@ 0x23
 80033b6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c2:	e023      	b.n	800340c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b41      	subs	r3, #65	@ 0x41
 80033d6:	221f      	movs	r2, #31
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43da      	mvns	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	400a      	ands	r2, r1
 80033e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3b41      	subs	r3, #65	@ 0x41
 8003400:	fa00 f203 	lsl.w	r2, r0, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a30      	ldr	r2, [pc, #192]	@ (80034d4 <HAL_ADC_ConfigChannel+0x29c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10a      	bne.n	800342c <HAL_ADC_ConfigChannel+0x1f4>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800341e:	d105      	bne.n	800342c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003420:	4b2d      	ldr	r3, [pc, #180]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a2c      	ldr	r2, [pc, #176]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003426:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800342a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a28      	ldr	r2, [pc, #160]	@ (80034d4 <HAL_ADC_ConfigChannel+0x29c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10f      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x21e>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b12      	cmp	r3, #18
 800343c:	d10b      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800343e:	4b26      	ldr	r3, [pc, #152]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4a25      	ldr	r2, [pc, #148]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003444:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003448:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800344a:	4b23      	ldr	r3, [pc, #140]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a22      	ldr	r2, [pc, #136]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003450:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003454:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <HAL_ADC_ConfigChannel+0x29c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d12b      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x280>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <HAL_ADC_ConfigChannel+0x298>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <HAL_ADC_ConfigChannel+0x23a>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b11      	cmp	r3, #17
 8003470:	d122      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003472:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a18      	ldr	r2, [pc, #96]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003478:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800347c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800347e:	4b16      	ldr	r3, [pc, #88]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003484:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003488:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <HAL_ADC_ConfigChannel+0x298>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d111      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003494:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <HAL_ADC_ConfigChannel+0x2a4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a11      	ldr	r2, [pc, #68]	@ (80034e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9a      	lsrs	r2, r3, #18
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034aa:	e002      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f9      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	10000012 	.word	0x10000012
 80034d4:	40012000 	.word	0x40012000
 80034d8:	40012300 	.word	0x40012300
 80034dc:	2000004c 	.word	0x2000004c
 80034e0:	431bde83 	.word	0x431bde83

080034e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80034ec:	4b78      	ldr	r3, [pc, #480]	@ (80036d0 <ADC_Init+0x1ec>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4a77      	ldr	r2, [pc, #476]	@ (80036d0 <ADC_Init+0x1ec>)
 80034f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80034f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80034f8:	4b75      	ldr	r3, [pc, #468]	@ (80036d0 <ADC_Init+0x1ec>)
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4973      	ldr	r1, [pc, #460]	@ (80036d0 <ADC_Init+0x1ec>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800355a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	4a58      	ldr	r2, [pc, #352]	@ (80036d4 <ADC_Init+0x1f0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003586:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e00f      	b.n	80035de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0202 	bic.w	r2, r2, #2
 80035ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	005a      	lsls	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800362a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	3b01      	subs	r3, #1
 8003638:	035a      	lsls	r2, r3, #13
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e007      	b.n	8003654 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003652:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	3b01      	subs	r3, #1
 8003670:	051a      	lsls	r2, r3, #20
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003696:	025a      	lsls	r2, r3, #9
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	029a      	lsls	r2, r3, #10
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40012300 	.word	0x40012300
 80036d4:	0f000001 	.word	0x0f000001

080036d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <__NVIC_SetPriorityGrouping+0x40>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036f4:	4013      	ands	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	4313      	orrs	r3, r2
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <__NVIC_SetPriorityGrouping+0x40>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00
 800371c:	05fa0000 	.word	0x05fa0000

08003720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <__NVIC_GetPriorityGrouping+0x18>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	f003 0307 	and.w	r3, r3, #7
}
 800372e:	4618      	mov	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	2b00      	cmp	r3, #0
 800374c:	db0b      	blt.n	8003766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	f003 021f 	and.w	r2, r3, #31
 8003754:	4907      	ldr	r1, [pc, #28]	@ (8003774 <__NVIC_EnableIRQ+0x38>)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2001      	movs	r0, #1
 800375e:	fa00 f202 	lsl.w	r2, r0, r2
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000e100 	.word	0xe000e100

08003778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003788:	2b00      	cmp	r3, #0
 800378a:	db0a      	blt.n	80037a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	490c      	ldr	r1, [pc, #48]	@ (80037c4 <__NVIC_SetPriority+0x4c>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	440b      	add	r3, r1
 800379c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a0:	e00a      	b.n	80037b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4908      	ldr	r1, [pc, #32]	@ (80037c8 <__NVIC_SetPriority+0x50>)
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	3b04      	subs	r3, #4
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	440b      	add	r3, r1
 80037b6:	761a      	strb	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	@ 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f1c3 0307 	rsb	r3, r3, #7
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf28      	it	cs
 80037ea:	2304      	movcs	r3, #4
 80037ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d902      	bls.n	80037fc <NVIC_EncodePriority+0x30>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3b03      	subs	r3, #3
 80037fa:	e000      	b.n	80037fe <NVIC_EncodePriority+0x32>
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003814:	f04f 31ff 	mov.w	r1, #4294967295
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43d9      	mvns	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	4313      	orrs	r3, r2
         );
}
 8003826:	4618      	mov	r0, r3
 8003828:	3724      	adds	r7, #36	@ 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ff4c 	bl	80036d8 <__NVIC_SetPriorityGrouping>
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800385a:	f7ff ff61 	bl	8003720 <__NVIC_GetPriorityGrouping>
 800385e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	6978      	ldr	r0, [r7, #20]
 8003866:	f7ff ffb1 	bl	80037cc <NVIC_EncodePriority>
 800386a:	4602      	mov	r2, r0
 800386c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff80 	bl	8003778 <__NVIC_SetPriority>
}
 8003878:	bf00      	nop
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff54 	bl	800373c <__NVIC_EnableIRQ>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e014      	b.n	80038d8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	791b      	ldrb	r3, [r3, #4]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fe7a 	bl	80025b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	795b      	ldrb	r3, [r3, #5]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_DAC_Start+0x16>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e040      	b.n	8003978 <HAL_DAC_Start+0x98>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2201      	movs	r2, #1
 8003910:	409a      	lsls	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10f      	bne.n	8003940 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800392a:	2b3c      	cmp	r3, #60	@ 0x3c
 800392c:	d11d      	bne.n	800396a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0201 	orr.w	r2, r2, #1
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	e014      	b.n	800396a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	213c      	movs	r1, #60	@ 0x3c
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	429a      	cmp	r2, r3
 8003958:	d107      	bne.n	800396a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0202 	orr.w	r2, r2, #2
 8003968:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399a:	d120      	bne.n	80039de <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039aa:	d118      	bne.n	80039de <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2204      	movs	r2, #4
 80039b0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039d6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f852 	bl	8003a82 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ec:	d120      	bne.n	8003a30 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fc:	d118      	bne.n	8003a30 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2204      	movs	r2, #4
 8003a02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f043 0202 	orr.w	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f882 	bl	8003b34 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e004      	b.n	8003a6c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3314      	adds	r3, #20
 8003a6a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	795b      	ldrb	r3, [r3, #5]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_DAC_ConfigChannel+0x18>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e03c      	b.n	8003b28 <HAL_DAC_ConfigChannel+0x92>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	22c0      	movs	r2, #192	@ 0xc0
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43da      	mvns	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	400a      	ands	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b56:	f7ff f961 	bl	8002e1c <HAL_GetTick>
 8003b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d008      	beq.n	8003b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2280      	movs	r2, #128	@ 0x80
 8003b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e052      	b.n	8003c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0216 	bic.w	r2, r2, #22
 8003b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <HAL_DMA_Abort+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0208 	bic.w	r2, r2, #8
 8003bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bca:	e013      	b.n	8003bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bcc:	f7ff f926 	bl	8002e1c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d90c      	bls.n	8003bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2203      	movs	r2, #3
 8003be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e015      	b.n	8003c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e4      	bne.n	8003bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c06:	223f      	movs	r2, #63	@ 0x3f
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d004      	beq.n	8003c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	@ 0x80
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00c      	b.n	8003c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2205      	movs	r2, #5
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	@ 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e175      	b.n	8003f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f040 8164 	bne.w	8003f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d005      	beq.n	8003cc2 <HAL_GPIO_Init+0x56>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d130      	bne.n	8003d24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	2203      	movs	r2, #3
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 0201 	and.w	r2, r3, #1
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d017      	beq.n	8003d60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d123      	bne.n	8003db4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	220f      	movs	r2, #15
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0203 	and.w	r2, r3, #3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80be 	beq.w	8003f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df6:	4b66      	ldr	r3, [pc, #408]	@ (8003f90 <HAL_GPIO_Init+0x324>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	4a65      	ldr	r2, [pc, #404]	@ (8003f90 <HAL_GPIO_Init+0x324>)
 8003dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e02:	4b63      	ldr	r3, [pc, #396]	@ (8003f90 <HAL_GPIO_Init+0x324>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e0e:	4a61      	ldr	r2, [pc, #388]	@ (8003f94 <HAL_GPIO_Init+0x328>)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	3302      	adds	r3, #2
 8003e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	220f      	movs	r2, #15
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a58      	ldr	r2, [pc, #352]	@ (8003f98 <HAL_GPIO_Init+0x32c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d037      	beq.n	8003eaa <HAL_GPIO_Init+0x23e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a57      	ldr	r2, [pc, #348]	@ (8003f9c <HAL_GPIO_Init+0x330>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_GPIO_Init+0x23a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a56      	ldr	r2, [pc, #344]	@ (8003fa0 <HAL_GPIO_Init+0x334>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02b      	beq.n	8003ea2 <HAL_GPIO_Init+0x236>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a55      	ldr	r2, [pc, #340]	@ (8003fa4 <HAL_GPIO_Init+0x338>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d025      	beq.n	8003e9e <HAL_GPIO_Init+0x232>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a54      	ldr	r2, [pc, #336]	@ (8003fa8 <HAL_GPIO_Init+0x33c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <HAL_GPIO_Init+0x22e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a53      	ldr	r2, [pc, #332]	@ (8003fac <HAL_GPIO_Init+0x340>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_Init+0x22a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a52      	ldr	r2, [pc, #328]	@ (8003fb0 <HAL_GPIO_Init+0x344>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_Init+0x226>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a51      	ldr	r2, [pc, #324]	@ (8003fb4 <HAL_GPIO_Init+0x348>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_Init+0x222>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a50      	ldr	r2, [pc, #320]	@ (8003fb8 <HAL_GPIO_Init+0x34c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_Init+0x21e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003fbc <HAL_GPIO_Init+0x350>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_Init+0x21a>
 8003e82:	2309      	movs	r3, #9
 8003e84:	e012      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e86:	230a      	movs	r3, #10
 8003e88:	e010      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	e00e      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00c      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e92:	2306      	movs	r3, #6
 8003e94:	e00a      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e96:	2305      	movs	r3, #5
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	f002 0203 	and.w	r2, r2, #3
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ebc:	4935      	ldr	r1, [pc, #212]	@ (8003f94 <HAL_GPIO_Init+0x328>)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eca:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eee:	4a34      	ldr	r2, [pc, #208]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef4:	4b32      	ldr	r3, [pc, #200]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f18:	4a29      	ldr	r2, [pc, #164]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f1e:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f42:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f6c:	4a14      	ldr	r2, [pc, #80]	@ (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3301      	adds	r3, #1
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	f67f ae86 	bls.w	8003c8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3724      	adds	r7, #36	@ 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40013800 	.word	0x40013800
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	40020400 	.word	0x40020400
 8003fa0:	40020800 	.word	0x40020800
 8003fa4:	40020c00 	.word	0x40020c00
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40021400 	.word	0x40021400
 8003fb0:	40021800 	.word	0x40021800
 8003fb4:	40021c00 	.word	0x40021c00
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	40022400 	.word	0x40022400
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd4:	787b      	ldrb	r3, [r7, #1]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fe0:	e003      	b.n	8003fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	041a      	lsls	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	460b      	mov	r3, r1
 8004000:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004008:	887a      	ldrh	r2, [r7, #2]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	041a      	lsls	r2, r3, #16
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	43d9      	mvns	r1, r3
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	400b      	ands	r3, r1
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800402a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402c:	b08f      	sub	sp, #60	@ 0x3c
 800402e:	af0a      	add	r7, sp, #40	@ 0x28
 8004030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e116      	b.n	800426a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fe fc0a 	bl	8002870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2203      	movs	r2, #3
 8004060:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f003 f914 	bl	80072a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	687e      	ldr	r6, [r7, #4]
 8004088:	466d      	mov	r5, sp
 800408a:	f106 0410 	add.w	r4, r6, #16
 800408e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004096:	e894 0003 	ldmia.w	r4, {r0, r1}
 800409a:	e885 0003 	stmia.w	r5, {r0, r1}
 800409e:	1d33      	adds	r3, r6, #4
 80040a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a2:	6838      	ldr	r0, [r7, #0]
 80040a4:	f003 f8a8 	bl	80071f8 <USB_CoreInit>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0d7      	b.n	800426a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f003 f902 	bl	80072ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	e04a      	b.n	8004162 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	333d      	adds	r3, #61	@ 0x3d
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	333c      	adds	r3, #60	@ 0x3c
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	b298      	uxth	r0, r3
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	3344      	adds	r3, #68	@ 0x44
 8004108:	4602      	mov	r2, r0
 800410a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3340      	adds	r3, #64	@ 0x40
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3348      	adds	r3, #72	@ 0x48
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	334c      	adds	r3, #76	@ 0x4c
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004148:	7bfa      	ldrb	r2, [r7, #15]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	3354      	adds	r3, #84	@ 0x54
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	3301      	adds	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d3af      	bcc.n	80040cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e044      	b.n	80041fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	3301      	adds	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d3b5      	bcc.n	8004172 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	687e      	ldr	r6, [r7, #4]
 800420e:	466d      	mov	r5, sp
 8004210:	f106 0410 	add.w	r4, r6, #16
 8004214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800421c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004220:	e885 0003 	stmia.w	r5, {r0, r1}
 8004224:	1d33      	adds	r3, r6, #4
 8004226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004228:	6838      	ldr	r0, [r7, #0]
 800422a:	f003 f89b 	bl	8007364 <USB_DevInit>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e014      	b.n	800426a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f80b 	bl	8004274 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f003 fa59 	bl	800771a <USB_DevDisconnect>

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004274 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042a2:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	10000003 	.word	0x10000003

080042bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a04      	ldr	r2, [pc, #16]	@ (80042d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40007000 	.word	0x40007000

080042dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b23      	ldr	r3, [pc, #140]	@ (8004374 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <HAL_PWREx_EnableOverDrive+0x98>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f2:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1d      	ldr	r2, [pc, #116]	@ (8004378 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004308:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800430a:	f7fe fd87 	bl	8002e1c <HAL_GetTick>
 800430e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004310:	e009      	b.n	8004326 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004312:	f7fe fd83 	bl	8002e1c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004320:	d901      	bls.n	8004326 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e022      	b.n	800436c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004326:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004332:	d1ee      	bne.n	8004312 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0f      	ldr	r2, [pc, #60]	@ (8004378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004340:	f7fe fd6c 	bl	8002e1c <HAL_GetTick>
 8004344:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004346:	e009      	b.n	800435c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004348:	f7fe fd68 	bl	8002e1c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004356:	d901      	bls.n	800435c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e007      	b.n	800436c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800435c:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004368:	d1ee      	bne.n	8004348 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000

0800437c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004384:	2300      	movs	r3, #0
 8004386:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e29b      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8087 	beq.w	80044ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a0:	4b96      	ldr	r3, [pc, #600]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d00c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ac:	4b93      	ldr	r3, [pc, #588]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d112      	bne.n	80043de <HAL_RCC_OscConfig+0x62>
 80043b8:	4b90      	ldr	r3, [pc, #576]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c4:	d10b      	bne.n	80043de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c6:	4b8d      	ldr	r3, [pc, #564]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d06c      	beq.n	80044ac <HAL_RCC_OscConfig+0x130>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d168      	bne.n	80044ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e275      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x7a>
 80043e8:	4b84      	ldr	r3, [pc, #528]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a83      	ldr	r2, [pc, #524]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80043ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e02e      	b.n	8004454 <HAL_RCC_OscConfig+0xd8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x9c>
 80043fe:	4b7f      	ldr	r3, [pc, #508]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a7e      	ldr	r2, [pc, #504]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b7c      	ldr	r3, [pc, #496]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7b      	ldr	r2, [pc, #492]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e01d      	b.n	8004454 <HAL_RCC_OscConfig+0xd8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0xc0>
 8004422:	4b76      	ldr	r3, [pc, #472]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a75      	ldr	r2, [pc, #468]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b73      	ldr	r3, [pc, #460]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a72      	ldr	r2, [pc, #456]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_OscConfig+0xd8>
 800443c:	4b6f      	ldr	r3, [pc, #444]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6e      	ldr	r2, [pc, #440]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b6c      	ldr	r3, [pc, #432]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a6b      	ldr	r2, [pc, #428]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fe fcde 	bl	8002e1c <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004464:	f7fe fcda 	bl	8002e1c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	@ 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e229      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b61      	ldr	r3, [pc, #388]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0xe8>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fe fcca 	bl	8002e1c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800448c:	f7fe fcc6 	bl	8002e1c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	@ 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e215      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	4b57      	ldr	r3, [pc, #348]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x110>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d069      	beq.n	800458e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ba:	4b50      	ldr	r3, [pc, #320]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b4d      	ldr	r3, [pc, #308]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d11c      	bne.n	800450c <HAL_RCC_OscConfig+0x190>
 80044d2:	4b4a      	ldr	r3, [pc, #296]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d116      	bne.n	800450c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	4b47      	ldr	r3, [pc, #284]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_RCC_OscConfig+0x17a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1e9      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b41      	ldr	r3, [pc, #260]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	493d      	ldr	r1, [pc, #244]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	e040      	b.n	800458e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d023      	beq.n	800455c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004514:	4b39      	ldr	r3, [pc, #228]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a38      	ldr	r2, [pc, #224]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe fc7c 	bl	8002e1c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004528:	f7fe fc78 	bl	8002e1c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e1c7      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453a:	4b30      	ldr	r3, [pc, #192]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004546:	4b2d      	ldr	r3, [pc, #180]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4929      	ldr	r1, [pc, #164]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
 800455a:	e018      	b.n	800458e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455c:	4b27      	ldr	r3, [pc, #156]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a26      	ldr	r2, [pc, #152]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fe fc58 	bl	8002e1c <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004570:	f7fe fc54 	bl	8002e1c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1a3      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	4b1e      	ldr	r3, [pc, #120]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d038      	beq.n	800460c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d019      	beq.n	80045d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a2:	4b16      	ldr	r3, [pc, #88]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80045a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a6:	4a15      	ldr	r2, [pc, #84]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7fe fc35 	bl	8002e1c <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fe fc31 	bl	8002e1c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e180      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c8:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80045ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x23a>
 80045d4:	e01a      	b.n	800460c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d6:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80045d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045da:	4a08      	ldr	r2, [pc, #32]	@ (80045fc <HAL_RCC_OscConfig+0x280>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fe fc1b 	bl	8002e1c <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ea:	f7fe fc17 	bl	8002e1c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d903      	bls.n	8004600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e166      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
 80045fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004600:	4b92      	ldr	r3, [pc, #584]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ee      	bne.n	80045ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a4 	beq.w	8004762 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461a:	4b8c      	ldr	r3, [pc, #560]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	4b89      	ldr	r3, [pc, #548]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	4a88      	ldr	r2, [pc, #544]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	@ 0x40
 8004632:	4b86      	ldr	r3, [pc, #536]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004642:	4b83      	ldr	r3, [pc, #524]	@ (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d118      	bne.n	8004680 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800464e:	4b80      	ldr	r3, [pc, #512]	@ (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7f      	ldr	r2, [pc, #508]	@ (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465a:	f7fe fbdf 	bl	8002e1c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fe fbdb 	bl	8002e1c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b64      	cmp	r3, #100	@ 0x64
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e12a      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004674:	4b76      	ldr	r3, [pc, #472]	@ (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x31a>
 8004688:	4b70      	ldr	r3, [pc, #448]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	4a6f      	ldr	r2, [pc, #444]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	@ 0x70
 8004694:	e02d      	b.n	80046f2 <HAL_RCC_OscConfig+0x376>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x33c>
 800469e:	4b6b      	ldr	r3, [pc, #428]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	4a6a      	ldr	r2, [pc, #424]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046aa:	4b68      	ldr	r3, [pc, #416]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	4a67      	ldr	r2, [pc, #412]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b6:	e01c      	b.n	80046f2 <HAL_RCC_OscConfig+0x376>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d10c      	bne.n	80046da <HAL_RCC_OscConfig+0x35e>
 80046c0:	4b62      	ldr	r3, [pc, #392]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	4a61      	ldr	r2, [pc, #388]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80046cc:	4b5f      	ldr	r3, [pc, #380]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d0:	4a5e      	ldr	r2, [pc, #376]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d8:	e00b      	b.n	80046f2 <HAL_RCC_OscConfig+0x376>
 80046da:	4b5c      	ldr	r3, [pc, #368]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	4a5b      	ldr	r2, [pc, #364]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e6:	4b59      	ldr	r3, [pc, #356]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	4a58      	ldr	r2, [pc, #352]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d015      	beq.n	8004726 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fa:	f7fe fb8f 	bl	8002e1c <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fe fb8b 	bl	8002e1c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0d8      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	4b4c      	ldr	r3, [pc, #304]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ee      	beq.n	8004702 <HAL_RCC_OscConfig+0x386>
 8004724:	e014      	b.n	8004750 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7fe fb79 	bl	8002e1c <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472c:	e00a      	b.n	8004744 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fe fb75 	bl	8002e1c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e0c2      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004744:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ee      	bne.n	800472e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d105      	bne.n	8004762 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004756:	4b3d      	ldr	r3, [pc, #244]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	4a3c      	ldr	r2, [pc, #240]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800475c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004760:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80ae 	beq.w	80048c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476c:	4b37      	ldr	r3, [pc, #220]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d06d      	beq.n	8004854 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d14b      	bne.n	8004818 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004780:	4b32      	ldr	r3, [pc, #200]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a31      	ldr	r2, [pc, #196]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fe fb46 	bl	8002e1c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fe fb42 	bl	8002e1c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e091      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	4b29      	ldr	r3, [pc, #164]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	3b01      	subs	r3, #1
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	491b      	ldr	r1, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e4:	4b19      	ldr	r3, [pc, #100]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a18      	ldr	r2, [pc, #96]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fe fb14 	bl	8002e1c <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fe fb10 	bl	8002e1c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e05f      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	4b10      	ldr	r3, [pc, #64]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x47c>
 8004816:	e057      	b.n	80048c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004818:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a0b      	ldr	r2, [pc, #44]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 800481e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe fafa 	bl	8002e1c <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fe faf6 	bl	8002e1c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e045      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b03      	ldr	r3, [pc, #12]	@ (800484c <HAL_RCC_OscConfig+0x4d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x4b0>
 800484a:	e03d      	b.n	80048c8 <HAL_RCC_OscConfig+0x54c>
 800484c:	40023800 	.word	0x40023800
 8004850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004854:	4b1f      	ldr	r3, [pc, #124]	@ (80048d4 <HAL_RCC_OscConfig+0x558>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d030      	beq.n	80048c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d129      	bne.n	80048c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d122      	bne.n	80048c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800488a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800488c:	4293      	cmp	r3, r2
 800488e:	d119      	bne.n	80048c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	3b01      	subs	r3, #1
 800489e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d10f      	bne.n	80048c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800

080048d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0d0      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d910      	bls.n	8004920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b67      	ldr	r3, [pc, #412]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 020f 	bic.w	r2, r3, #15
 8004906:	4965      	ldr	r1, [pc, #404]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b63      	ldr	r3, [pc, #396]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b8      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b59      	ldr	r3, [pc, #356]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a58      	ldr	r2, [pc, #352]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800493e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004950:	4b53      	ldr	r3, [pc, #332]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a52      	ldr	r2, [pc, #328]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004956:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800495a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b50      	ldr	r3, [pc, #320]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	494d      	ldr	r1, [pc, #308]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d040      	beq.n	80049fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b47      	ldr	r3, [pc, #284]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d115      	bne.n	80049ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e07f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	4b41      	ldr	r3, [pc, #260]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e073      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049aa:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e06b      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ba:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4936      	ldr	r1, [pc, #216]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fe fa26 	bl	8002e1c <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d4:	f7fe fa22 	bl	8002e1c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e053      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 020c 	and.w	r2, r3, #12
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d1eb      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049fc:	4b27      	ldr	r3, [pc, #156]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d210      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 020f 	bic.w	r2, r3, #15
 8004a12:	4922      	ldr	r1, [pc, #136]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e032      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a38:	4b19      	ldr	r3, [pc, #100]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4916      	ldr	r1, [pc, #88]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a56:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490e      	ldr	r1, [pc, #56]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a6a:	f000 f821 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490a      	ldr	r1, [pc, #40]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a09      	ldr	r2, [pc, #36]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8004a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a86:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <HAL_RCC_ClockConfig+0x1d4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fd ff6a 	bl	8002964 <HAL_InitTick>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023c00 	.word	0x40023c00
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	0800d64c 	.word	0x0800d64c
 8004aa8:	2000004c 	.word	0x2000004c
 8004aac:	2000005c 	.word	0x2000005c

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab4:	b094      	sub	sp, #80	@ 0x50
 8004ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004abc:	2300      	movs	r3, #0
 8004abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac8:	4b79      	ldr	r3, [pc, #484]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d00d      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	f200 80e1 	bhi.w	8004c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae2:	e0db      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b73      	ldr	r3, [pc, #460]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ae8:	e0db      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aea:	4b73      	ldr	r3, [pc, #460]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004aec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aee:	e0d8      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004af8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004afa:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d063      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b22:	4622      	mov	r2, r4
 8004b24:	462b      	mov	r3, r5
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	0159      	lsls	r1, r3, #5
 8004b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b34:	0150      	lsls	r0, r2, #5
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	1a51      	subs	r1, r2, r1
 8004b3e:	6139      	str	r1, [r7, #16]
 8004b40:	4629      	mov	r1, r5
 8004b42:	eb63 0301 	sbc.w	r3, r3, r1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b54:	4659      	mov	r1, fp
 8004b56:	018b      	lsls	r3, r1, #6
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5e:	4651      	mov	r1, sl
 8004b60:	018a      	lsls	r2, r1, #6
 8004b62:	4651      	mov	r1, sl
 8004b64:	ebb2 0801 	subs.w	r8, r2, r1
 8004b68:	4659      	mov	r1, fp
 8004b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b82:	4690      	mov	r8, r2
 8004b84:	4699      	mov	r9, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	eb18 0303 	adds.w	r3, r8, r3
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	462b      	mov	r3, r5
 8004b90:	eb49 0303 	adc.w	r3, r9, r3
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	024b      	lsls	r3, r1, #9
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bac:	4621      	mov	r1, r4
 8004bae:	024a      	lsls	r2, r1, #9
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bc0:	f7fb fb96 	bl	80002f0 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bcc:	e058      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bce:	4b38      	ldr	r3, [pc, #224]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	4611      	mov	r1, r2
 8004bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	f04f 0000 	mov.w	r0, #0
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	0159      	lsls	r1, r3, #5
 8004bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bfa:	0150      	lsls	r0, r2, #5
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4641      	mov	r1, r8
 8004c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c06:	4649      	mov	r1, r9
 8004c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c20:	ebb2 040a 	subs.w	r4, r2, sl
 8004c24:	eb63 050b 	sbc.w	r5, r3, fp
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	00eb      	lsls	r3, r5, #3
 8004c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	464b      	mov	r3, r9
 8004c44:	eb45 0303 	adc.w	r3, r5, r3
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c56:	4629      	mov	r1, r5
 8004c58:	028b      	lsls	r3, r1, #10
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c60:	4621      	mov	r1, r4
 8004c62:	028a      	lsls	r2, r1, #10
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	61fa      	str	r2, [r7, #28]
 8004c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c74:	f7fb fb3c 	bl	80002f0 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c80:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3750      	adds	r7, #80	@ 0x50
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	007a1200 	.word	0x007a1200

08004cbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	@ (8004cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000004c 	.word	0x2000004c

08004cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cd8:	f7ff fff0 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0a9b      	lsrs	r3, r3, #10
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	0800d65c 	.word	0x0800d65c

08004cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d00:	f7ff ffdc 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	0b5b      	lsrs	r3, r3, #13
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4903      	ldr	r1, [pc, #12]	@ (8004d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	0800d65c 	.word	0x0800d65c

08004d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	220f      	movs	r2, #15
 8004d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d34:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCC_GetClockConfig+0x5c>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0203 	and.w	r2, r3, #3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d40:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <HAL_RCC_GetClockConfig+0x5c>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <HAL_RCC_GetClockConfig+0x5c>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	08db      	lsrs	r3, r3, #3
 8004d5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d66:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <HAL_RCC_GetClockConfig+0x60>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 020f 	and.w	r2, r3, #15
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	601a      	str	r2, [r3, #0]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40023c00 	.word	0x40023c00

08004d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d012      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004db0:	4b69      	ldr	r3, [pc, #420]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a68      	ldr	r2, [pc, #416]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004dba:	6093      	str	r3, [r2, #8]
 8004dbc:	4b66      	ldr	r3, [pc, #408]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc4:	4964      	ldr	r1, [pc, #400]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d017      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004de2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004de8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df0:	4959      	ldr	r1, [pc, #356]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e00:	d101      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d017      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2c:	494a      	ldr	r1, [pc, #296]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 808b 	beq.w	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	4a39      	ldr	r2, [pc, #228]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e78:	4b37      	ldr	r3, [pc, #220]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e84:	4b35      	ldr	r3, [pc, #212]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a34      	ldr	r2, [pc, #208]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e90:	f7fd ffc4 	bl	8002e1c <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e98:	f7fd ffc0 	bl	8002e1c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	@ 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e38f      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb6:	4b28      	ldr	r3, [pc, #160]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d035      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d02e      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed4:	4b20      	ldr	r3, [pc, #128]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004edc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ede:	4b1e      	ldr	r3, [pc, #120]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eea:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	4a1a      	ldr	r2, [pc, #104]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ef6:	4a18      	ldr	r2, [pc, #96]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004efc:	4b16      	ldr	r3, [pc, #88]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d114      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fd ff88 	bl	8002e1c <HAL_GetTick>
 8004f0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fd ff84 	bl	8002e1c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e351      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f26:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0ee      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f3e:	d111      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f4c:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f4e:	400b      	ands	r3, r1
 8004f50:	4901      	ldr	r1, [pc, #4]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
 8004f56:	e00b      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	0ffffcff 	.word	0x0ffffcff
 8004f64:	4bac      	ldr	r3, [pc, #688]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4aab      	ldr	r2, [pc, #684]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f6e:	6093      	str	r3, [r2, #8]
 8004f70:	4ba9      	ldr	r3, [pc, #676]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7c:	49a6      	ldr	r1, [pc, #664]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d010      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f8e:	4ba2      	ldr	r3, [pc, #648]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f94:	4aa0      	ldr	r2, [pc, #640]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	499b      	ldr	r1, [pc, #620]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fbc:	4b96      	ldr	r3, [pc, #600]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fca:	4993      	ldr	r1, [pc, #588]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fde:	4b8e      	ldr	r3, [pc, #568]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fec:	498a      	ldr	r1, [pc, #552]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005000:	4b85      	ldr	r3, [pc, #532]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800500e:	4982      	ldr	r1, [pc, #520]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005022:	4b7d      	ldr	r3, [pc, #500]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005028:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005030:	4979      	ldr	r1, [pc, #484]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005044:	4b74      	ldr	r3, [pc, #464]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	4971      	ldr	r1, [pc, #452]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005066:	4b6c      	ldr	r3, [pc, #432]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506c:	f023 020c 	bic.w	r2, r3, #12
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005074:	4968      	ldr	r1, [pc, #416]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005088:	4b63      	ldr	r3, [pc, #396]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005096:	4960      	ldr	r1, [pc, #384]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b8:	4957      	ldr	r1, [pc, #348]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050cc:	4b52      	ldr	r3, [pc, #328]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050da:	494f      	ldr	r1, [pc, #316]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fc:	4946      	ldr	r1, [pc, #280]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005110:	4b41      	ldr	r3, [pc, #260]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005116:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511e:	493e      	ldr	r1, [pc, #248]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005132:	4b39      	ldr	r3, [pc, #228]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005138:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005140:	4935      	ldr	r1, [pc, #212]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005154:	4b30      	ldr	r3, [pc, #192]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005162:	492d      	ldr	r1, [pc, #180]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005176:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005184:	4924      	ldr	r1, [pc, #144]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005194:	d101      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005196:	2301      	movs	r3, #1
 8005198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051b6:	4b18      	ldr	r3, [pc, #96]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c4:	4914      	ldr	r1, [pc, #80]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e8:	490b      	ldr	r1, [pc, #44]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051fc:	4b06      	ldr	r3, [pc, #24]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005202:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800520c:	4902      	ldr	r1, [pc, #8]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005228:	4b8a      	ldr	r3, [pc, #552]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800522e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005238:	4986      	ldr	r1, [pc, #536]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800524c:	4b81      	ldr	r3, [pc, #516]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005252:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525c:	497d      	ldr	r1, [pc, #500]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d006      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80d6 	beq.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005278:	4b76      	ldr	r3, [pc, #472]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a75      	ldr	r2, [pc, #468]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800527e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005284:	f7fd fdca 	bl	8002e1c <HAL_GetTick>
 8005288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800528c:	f7fd fdc6 	bl	8002e1c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	@ 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e195      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800529e:	4b6d      	ldr	r3, [pc, #436]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d021      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11d      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052be:	4b65      	ldr	r3, [pc, #404]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052cc:	4b61      	ldr	r3, [pc, #388]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d2:	0e1b      	lsrs	r3, r3, #24
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	019a      	lsls	r2, r3, #6
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	071b      	lsls	r3, r3, #28
 80052f2:	4958      	ldr	r1, [pc, #352]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02e      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005324:	d129      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005326:	4b4b      	ldr	r3, [pc, #300]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005334:	4b47      	ldr	r3, [pc, #284]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533a:	0f1b      	lsrs	r3, r3, #28
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	019a      	lsls	r2, r3, #6
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	493e      	ldr	r1, [pc, #248]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005362:	4b3c      	ldr	r3, [pc, #240]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005368:	f023 021f 	bic.w	r2, r3, #31
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	3b01      	subs	r3, #1
 8005372:	4938      	ldr	r1, [pc, #224]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01d      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005386:	4b33      	ldr	r3, [pc, #204]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800538c:	0e1b      	lsrs	r3, r3, #24
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005394:	4b2f      	ldr	r3, [pc, #188]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800539a:	0f1b      	lsrs	r3, r3, #28
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	019a      	lsls	r2, r3, #6
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	431a      	orrs	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	071b      	lsls	r3, r3, #28
 80053ba:	4926      	ldr	r1, [pc, #152]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d011      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	019a      	lsls	r2, r3, #6
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	061b      	lsls	r3, r3, #24
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	071b      	lsls	r3, r3, #28
 80053ea:	491a      	ldr	r1, [pc, #104]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053f2:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a17      	ldr	r2, [pc, #92]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fe:	f7fd fd0d 	bl	8002e1c <HAL_GetTick>
 8005402:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005404:	e008      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005406:	f7fd fd09 	bl	8002e1c <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b64      	cmp	r3, #100	@ 0x64
 8005412:	d901      	bls.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e0d8      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005418:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b01      	cmp	r3, #1
 8005428:	f040 80ce 	bne.w	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800542c:	4b09      	ldr	r3, [pc, #36]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a08      	ldr	r2, [pc, #32]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fd fcf0 	bl	8002e1c <HAL_GetTick>
 800543c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800543e:	e00b      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005440:	f7fd fcec 	bl	8002e1c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	@ 0x64
 800544c:	d904      	bls.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0bb      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005458:	4b5e      	ldr	r3, [pc, #376]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005464:	d0ec      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005482:	2b00      	cmp	r3, #0
 8005484:	d02e      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d12a      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800548e:	4b51      	ldr	r3, [pc, #324]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800549c:	4b4d      	ldr	r3, [pc, #308]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a2:	0f1b      	lsrs	r3, r3, #28
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	019a      	lsls	r2, r3, #6
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	431a      	orrs	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	4944      	ldr	r1, [pc, #272]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ca:	4b42      	ldr	r3, [pc, #264]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	3b01      	subs	r3, #1
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	493d      	ldr	r1, [pc, #244]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d022      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f8:	d11d      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054fa:	4b36      	ldr	r3, [pc, #216]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005500:	0e1b      	lsrs	r3, r3, #24
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005508:	4b32      	ldr	r3, [pc, #200]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	0f1b      	lsrs	r3, r3, #28
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	019a      	lsls	r2, r3, #6
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	041b      	lsls	r3, r3, #16
 8005522:	431a      	orrs	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	061b      	lsls	r3, r3, #24
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	071b      	lsls	r3, r3, #28
 800552e:	4929      	ldr	r1, [pc, #164]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d028      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005542:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	0e1b      	lsrs	r3, r3, #24
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005550:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005556:	0c1b      	lsrs	r3, r3, #16
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	019a      	lsls	r2, r3, #6
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	041b      	lsls	r3, r3, #16
 8005568:	431a      	orrs	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	061b      	lsls	r3, r3, #24
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	071b      	lsls	r3, r3, #28
 8005576:	4917      	ldr	r1, [pc, #92]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800557e:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	4911      	ldr	r1, [pc, #68]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005594:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0e      	ldr	r2, [pc, #56]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800559a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800559e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a0:	f7fd fc3c 	bl	8002e1c <HAL_GetTick>
 80055a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055a8:	f7fd fc38 	bl	8002e1c <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	@ 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e007      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ba:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055c6:	d1ef      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800

080055d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e049      	b.n	800567e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fd f822 	bl	8002648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f000 fa24 	bl	8005a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e054      	b.n	800574a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a26      	ldr	r2, [pc, #152]	@ (8005758 <HAL_TIM_Base_Start_IT+0xd0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d01d      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a22      	ldr	r2, [pc, #136]	@ (800575c <HAL_TIM_Base_Start_IT+0xd4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a21      	ldr	r2, [pc, #132]	@ (8005760 <HAL_TIM_Base_Start_IT+0xd8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005764 <HAL_TIM_Base_Start_IT+0xdc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005768 <HAL_TIM_Base_Start_IT+0xe0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1c      	ldr	r2, [pc, #112]	@ (800576c <HAL_TIM_Base_Start_IT+0xe4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1b      	ldr	r2, [pc, #108]	@ (8005770 <HAL_TIM_Base_Start_IT+0xe8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d115      	bne.n	8005734 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	4b19      	ldr	r3, [pc, #100]	@ (8005774 <HAL_TIM_Base_Start_IT+0xec>)
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b06      	cmp	r3, #6
 8005718:	d015      	beq.n	8005746 <HAL_TIM_Base_Start_IT+0xbe>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d011      	beq.n	8005746 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	e008      	b.n	8005746 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e000      	b.n	8005748 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40001800 	.word	0x40001800
 8005774:	00010007 	.word	0x00010007

08005778 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	f241 1311 	movw	r3, #4369	@ 0x1111
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10f      	bne.n	80057c0 <HAL_TIM_Base_Stop_IT+0x48>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_Base_Stop_IT+0x48>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d122      	bne.n	8005832 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d11b      	bne.n	8005832 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f06f 0202 	mvn.w	r2, #2
 8005802:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f905 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 800581e:	e005      	b.n	800582c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8f7 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f908 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d122      	bne.n	8005886 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d11b      	bne.n	8005886 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0204 	mvn.w	r2, #4
 8005856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8db 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 8005872:	e005      	b.n	8005880 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8cd 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8de 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d122      	bne.n	80058da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d11b      	bne.n	80058da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0208 	mvn.w	r2, #8
 80058aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2204      	movs	r2, #4
 80058b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f8b1 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 80058c6:	e005      	b.n	80058d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f8a3 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8b4 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d122      	bne.n	800592e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d11b      	bne.n	800592e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0210 	mvn.w	r2, #16
 80058fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2208      	movs	r2, #8
 8005904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f887 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 800591a:	e005      	b.n	8005928 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f879 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f88a 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10e      	bne.n	800595a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f06f 0201 	mvn.w	r2, #1
 8005952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fc fc61 	bl	800221c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005964:	2b80      	cmp	r3, #128	@ 0x80
 8005966:	d10e      	bne.n	8005986 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005972:	2b80      	cmp	r3, #128	@ 0x80
 8005974:	d107      	bne.n	8005986 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800597e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f9a7 	bl	8005cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005994:	d10e      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a0:	2b80      	cmp	r3, #128	@ 0x80
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f99a 	bl	8005ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059be:	2b40      	cmp	r3, #64	@ 0x40
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b40      	cmp	r3, #64	@ 0x40
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f838 	bl	8005a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0220 	mvn.w	r2, #32
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f95a 	bl	8005cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a40      	ldr	r2, [pc, #256]	@ (8005b78 <TIM_Base_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a82:	d00f      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3d      	ldr	r2, [pc, #244]	@ (8005b7c <TIM_Base_SetConfig+0x118>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3b      	ldr	r2, [pc, #236]	@ (8005b84 <TIM_Base_SetConfig+0x120>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b88 <TIM_Base_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d108      	bne.n	8005ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b78 <TIM_Base_SetConfig+0x114>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d02b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac4:	d027      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b7c <TIM_Base_SetConfig+0x118>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d023      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01f      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b84 <TIM_Base_SetConfig+0x120>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a29      	ldr	r2, [pc, #164]	@ (8005b88 <TIM_Base_SetConfig+0x124>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d017      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a28      	ldr	r2, [pc, #160]	@ (8005b8c <TIM_Base_SetConfig+0x128>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a27      	ldr	r2, [pc, #156]	@ (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a26      	ldr	r2, [pc, #152]	@ (8005b94 <TIM_Base_SetConfig+0x130>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a25      	ldr	r2, [pc, #148]	@ (8005b98 <TIM_Base_SetConfig+0x134>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a24      	ldr	r2, [pc, #144]	@ (8005b9c <TIM_Base_SetConfig+0x138>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a23      	ldr	r2, [pc, #140]	@ (8005ba0 <TIM_Base_SetConfig+0x13c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d108      	bne.n	8005b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b78 <TIM_Base_SetConfig+0x114>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_Base_SetConfig+0xf8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a0c      	ldr	r2, [pc, #48]	@ (8005b88 <TIM_Base_SetConfig+0x124>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d103      	bne.n	8005b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	615a      	str	r2, [r3, #20]
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800
 8005b98:	40001800 	.word	0x40001800
 8005b9c:	40001c00 	.word	0x40001c00
 8005ba0:	40002000 	.word	0x40002000

08005ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e06d      	b.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a30      	ldr	r2, [pc, #192]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a20      	ldr	r2, [pc, #128]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2e:	d01d      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a15      	ldr	r2, [pc, #84]	@ (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a16      	ldr	r2, [pc, #88]	@ (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a15      	ldr	r2, [pc, #84]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10c      	bne.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40010400 	.word	0x40010400
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40001800 	.word	0x40001800

08005cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e040      	b.n	8005d90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc fcd4 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2224      	movs	r2, #36	@ 0x24
 8005d28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fce4 	bl	8006708 <UART_SetConfig>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e022      	b.n	8005d90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 ff3c 	bl	8006bd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 ffc3 	bl	8006d14 <UART_CheckIdleState>
 8005d8e:	4603      	mov	r3, r0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	@ 0x28
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d171      	bne.n	8005e94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <HAL_UART_Transmit+0x24>
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e06a      	b.n	8005e96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2221      	movs	r2, #33	@ 0x21
 8005dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dce:	f7fd f825 	bl	8002e1c <HAL_GetTick>
 8005dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dec:	d108      	bne.n	8005e00 <HAL_UART_Transmit+0x68>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	e003      	b.n	8005e08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e08:	e02c      	b.n	8005e64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	@ 0x80
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 ffca 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e038      	b.n	8005e96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e007      	b.n	8005e52 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1cc      	bne.n	8005e0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	2140      	movs	r1, #64	@ 0x40
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 ff97 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e005      	b.n	8005e96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e000      	b.n	8005e96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
  }
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b08a      	sub	sp, #40	@ 0x28
 8005ea2:	af02      	add	r7, sp, #8
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	f040 80b1 	bne.w	800601c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_UART_Receive+0x28>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e0a9      	b.n	800601e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2222      	movs	r2, #34	@ 0x22
 8005ed6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee0:	f7fc ff9c 	bl	8002e1c <HAL_GetTick>
 8005ee4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	88fa      	ldrh	r2, [r7, #6]
 8005eea:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005efe:	d10e      	bne.n	8005f1e <HAL_UART_Receive+0x80>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d105      	bne.n	8005f14 <HAL_UART_Receive+0x76>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f12:	e02d      	b.n	8005f70 <HAL_UART_Receive+0xd2>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	22ff      	movs	r2, #255	@ 0xff
 8005f18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f1c:	e028      	b.n	8005f70 <HAL_UART_Receive+0xd2>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10d      	bne.n	8005f42 <HAL_UART_Receive+0xa4>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <HAL_UART_Receive+0x9a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	22ff      	movs	r2, #255	@ 0xff
 8005f32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f36:	e01b      	b.n	8005f70 <HAL_UART_Receive+0xd2>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	227f      	movs	r2, #127	@ 0x7f
 8005f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f40:	e016      	b.n	8005f70 <HAL_UART_Receive+0xd2>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f4a:	d10d      	bne.n	8005f68 <HAL_UART_Receive+0xca>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <HAL_UART_Receive+0xc0>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	227f      	movs	r2, #127	@ 0x7f
 8005f58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f5c:	e008      	b.n	8005f70 <HAL_UART_Receive+0xd2>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	223f      	movs	r2, #63	@ 0x3f
 8005f62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f66:	e003      	b.n	8005f70 <HAL_UART_Receive+0xd2>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f80:	d108      	bne.n	8005f94 <HAL_UART_Receive+0xf6>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	e003      	b.n	8005f9c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f9c:	e032      	b.n	8006004 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2120      	movs	r1, #32
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 ff00 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e032      	b.n	800601e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	8a7b      	ldrh	r3, [r7, #18]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e00c      	b.n	8005ff2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	8a7b      	ldrh	r3, [r7, #18]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1c6      	bne.n	8005f9e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006028:	b480      	push	{r7}
 800602a:	b08b      	sub	sp, #44	@ 0x2c
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800603a:	2b20      	cmp	r3, #32
 800603c:	d147      	bne.n	80060ce <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_UART_Transmit_IT+0x22>
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e040      	b.n	80060d0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	88fa      	ldrh	r2, [r7, #6]
 8006058:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2221      	movs	r2, #33	@ 0x21
 8006076:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006080:	d107      	bne.n	8006092 <HAL_UART_Transmit_IT+0x6a>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a13      	ldr	r2, [pc, #76]	@ (80060dc <HAL_UART_Transmit_IT+0xb4>)
 800608e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006090:	e002      	b.n	8006098 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a12      	ldr	r2, [pc, #72]	@ (80060e0 <HAL_UART_Transmit_IT+0xb8>)
 8006096:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	613b      	str	r3, [r7, #16]
   return(result);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	623b      	str	r3, [r7, #32]
 80060b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e000      	b.n	80060d0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
  }
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	372c      	adds	r7, #44	@ 0x2c
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	080070e5 	.word	0x080070e5
 80060e0:	0800702f 	.word	0x0800702f

080060e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b0ba      	sub	sp, #232	@ 0xe8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800610a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800610e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006112:	4013      	ands	r3, r2
 8006114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d115      	bne.n	800614c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00f      	beq.n	800614c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d009      	beq.n	800614c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 82ac 	beq.w	800669a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
      }
      return;
 800614a:	e2a6      	b.n	800669a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800614c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8117 	beq.w	8006384 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006166:	4b85      	ldr	r3, [pc, #532]	@ (800637c <HAL_UART_IRQHandler+0x298>)
 8006168:	4013      	ands	r3, r2
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 810a 	beq.w	8006384 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d011      	beq.n	80061a0 <HAL_UART_IRQHandler+0xbc>
 800617c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006196:	f043 0201 	orr.w	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d011      	beq.n	80061d0 <HAL_UART_IRQHandler+0xec>
 80061ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2202      	movs	r2, #2
 80061be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061c6:	f043 0204 	orr.w	r2, r3, #4
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d011      	beq.n	8006200 <HAL_UART_IRQHandler+0x11c>
 80061dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2204      	movs	r2, #4
 80061ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f6:	f043 0202 	orr.w	r2, r3, #2
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d017      	beq.n	800623c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800621c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2208      	movs	r2, #8
 800622a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006232:	f043 0208 	orr.w	r2, r3, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006244:	2b00      	cmp	r3, #0
 8006246:	d012      	beq.n	800626e <HAL_UART_IRQHandler+0x18a>
 8006248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800625c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8212 	beq.w	800669e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b6:	2b40      	cmp	r3, #64	@ 0x40
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d04f      	beq.n	8006366 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fe37 	bl	8006f3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d6:	2b40      	cmp	r3, #64	@ 0x40
 80062d8:	d141      	bne.n	800635e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006306:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800630a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800631e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1d9      	bne.n	80062da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632a:	2b00      	cmp	r3, #0
 800632c:	d013      	beq.n	8006356 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006332:	4a13      	ldr	r2, [pc, #76]	@ (8006380 <HAL_UART_IRQHandler+0x29c>)
 8006334:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633a:	4618      	mov	r0, r3
 800633c:	f7fd fc74 	bl	8003c28 <HAL_DMA_Abort_IT>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d017      	beq.n	8006376 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800634a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006350:	4610      	mov	r0, r2
 8006352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006354:	e00f      	b.n	8006376 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9b6 	bl	80066c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	e00b      	b.n	8006376 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9b2 	bl	80066c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	e007      	b.n	8006376 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9ae 	bl	80066c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006374:	e193      	b.n	800669e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006376:	bf00      	nop
    return;
 8006378:	e191      	b.n	800669e <HAL_UART_IRQHandler+0x5ba>
 800637a:	bf00      	nop
 800637c:	04000120 	.word	0x04000120
 8006380:	08007003 	.word	0x08007003

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006388:	2b01      	cmp	r3, #1
 800638a:	f040 814c 	bne.w	8006626 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8145 	beq.w	8006626 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 813e 	beq.w	8006626 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2210      	movs	r2, #16
 80063b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063bc:	2b40      	cmp	r3, #64	@ 0x40
 80063be:	f040 80b6 	bne.w	800652e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8165 	beq.w	80066a2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f080 815d 	bcs.w	80066a2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fc:	f000 8086 	beq.w	800650c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800641c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800642a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800642e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006436:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1da      	bne.n	8006400 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800645a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3308      	adds	r3, #8
 800646a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800646e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006472:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006476:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e1      	bne.n	800644a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800649c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e3      	bne.n	8006486 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064dc:	f023 0310 	bic.w	r3, r3, #16
 80064e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e4      	bne.n	80064cc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006506:	4618      	mov	r0, r3
 8006508:	f7fd fb1e 	bl	8003b48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800651e:	b29b      	uxth	r3, r3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	b29b      	uxth	r3, r3
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8d8 	bl	80066dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800652c:	e0b9      	b.n	80066a2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800653a:	b29b      	uxth	r3, r3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80ab 	beq.w	80066a6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80a6 	beq.w	80066a6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800656e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800657c:	647b      	str	r3, [r7, #68]	@ 0x44
 800657e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800658a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e4      	bne.n	800655a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	623b      	str	r3, [r7, #32]
   return(result);
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80065b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e3      	bne.n	8006590 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 0310 	bic.w	r3, r3, #16
 80065f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	461a      	mov	r2, r3
 80065fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	617b      	str	r3, [r7, #20]
   return(result);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e4      	bne.n	80065dc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f85c 	bl	80066dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006624:	e03f      	b.n	80066a6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <HAL_UART_IRQHandler+0x56c>
 8006632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006646:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f853 	bl	80066f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800664e:	e02d      	b.n	80066ac <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d008      	beq.n	800667a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01c      	beq.n	80066aa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
    }
    return;
 8006678:	e017      	b.n	80066aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d012      	beq.n	80066ac <HAL_UART_IRQHandler+0x5c8>
 8006686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fd86 	bl	80071a4 <UART_EndTransmit_IT>
    return;
 8006698:	e008      	b.n	80066ac <HAL_UART_IRQHandler+0x5c8>
      return;
 800669a:	bf00      	nop
 800669c:	e006      	b.n	80066ac <HAL_UART_IRQHandler+0x5c8>
    return;
 800669e:	bf00      	nop
 80066a0:	e004      	b.n	80066ac <HAL_UART_IRQHandler+0x5c8>
      return;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <HAL_UART_IRQHandler+0x5c8>
      return;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <HAL_UART_IRQHandler+0x5c8>
    return;
 80066aa:	bf00      	nop
  }

}
 80066ac:	37e8      	adds	r7, #232	@ 0xe8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4ba6      	ldr	r3, [pc, #664]	@ (80069cc <UART_SetConfig+0x2c4>)
 8006734:	4013      	ands	r3, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6812      	ldr	r2, [r2, #0]
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	430b      	orrs	r3, r1
 800673e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	430a      	orrs	r2, r1
 8006778:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a94      	ldr	r2, [pc, #592]	@ (80069d0 <UART_SetConfig+0x2c8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d120      	bne.n	80067c6 <UART_SetConfig+0xbe>
 8006784:	4b93      	ldr	r3, [pc, #588]	@ (80069d4 <UART_SetConfig+0x2cc>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b03      	cmp	r3, #3
 8006790:	d816      	bhi.n	80067c0 <UART_SetConfig+0xb8>
 8006792:	a201      	add	r2, pc, #4	@ (adr r2, 8006798 <UART_SetConfig+0x90>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067b5 	.word	0x080067b5
 80067a0:	080067af 	.word	0x080067af
 80067a4:	080067bb 	.word	0x080067bb
 80067a8:	2301      	movs	r3, #1
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e150      	b.n	8006a50 <UART_SetConfig+0x348>
 80067ae:	2302      	movs	r3, #2
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e14d      	b.n	8006a50 <UART_SetConfig+0x348>
 80067b4:	2304      	movs	r3, #4
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e14a      	b.n	8006a50 <UART_SetConfig+0x348>
 80067ba:	2308      	movs	r3, #8
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e147      	b.n	8006a50 <UART_SetConfig+0x348>
 80067c0:	2310      	movs	r3, #16
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e144      	b.n	8006a50 <UART_SetConfig+0x348>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a83      	ldr	r2, [pc, #524]	@ (80069d8 <UART_SetConfig+0x2d0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d132      	bne.n	8006836 <UART_SetConfig+0x12e>
 80067d0:	4b80      	ldr	r3, [pc, #512]	@ (80069d4 <UART_SetConfig+0x2cc>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	d828      	bhi.n	8006830 <UART_SetConfig+0x128>
 80067de:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <UART_SetConfig+0xdc>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006819 	.word	0x08006819
 80067e8:	08006831 	.word	0x08006831
 80067ec:	08006831 	.word	0x08006831
 80067f0:	08006831 	.word	0x08006831
 80067f4:	08006825 	.word	0x08006825
 80067f8:	08006831 	.word	0x08006831
 80067fc:	08006831 	.word	0x08006831
 8006800:	08006831 	.word	0x08006831
 8006804:	0800681f 	.word	0x0800681f
 8006808:	08006831 	.word	0x08006831
 800680c:	08006831 	.word	0x08006831
 8006810:	08006831 	.word	0x08006831
 8006814:	0800682b 	.word	0x0800682b
 8006818:	2300      	movs	r3, #0
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e118      	b.n	8006a50 <UART_SetConfig+0x348>
 800681e:	2302      	movs	r3, #2
 8006820:	77fb      	strb	r3, [r7, #31]
 8006822:	e115      	b.n	8006a50 <UART_SetConfig+0x348>
 8006824:	2304      	movs	r3, #4
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e112      	b.n	8006a50 <UART_SetConfig+0x348>
 800682a:	2308      	movs	r3, #8
 800682c:	77fb      	strb	r3, [r7, #31]
 800682e:	e10f      	b.n	8006a50 <UART_SetConfig+0x348>
 8006830:	2310      	movs	r3, #16
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e10c      	b.n	8006a50 <UART_SetConfig+0x348>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a68      	ldr	r2, [pc, #416]	@ (80069dc <UART_SetConfig+0x2d4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d120      	bne.n	8006882 <UART_SetConfig+0x17a>
 8006840:	4b64      	ldr	r3, [pc, #400]	@ (80069d4 <UART_SetConfig+0x2cc>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006846:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800684a:	2b30      	cmp	r3, #48	@ 0x30
 800684c:	d013      	beq.n	8006876 <UART_SetConfig+0x16e>
 800684e:	2b30      	cmp	r3, #48	@ 0x30
 8006850:	d814      	bhi.n	800687c <UART_SetConfig+0x174>
 8006852:	2b20      	cmp	r3, #32
 8006854:	d009      	beq.n	800686a <UART_SetConfig+0x162>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d810      	bhi.n	800687c <UART_SetConfig+0x174>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <UART_SetConfig+0x15c>
 800685e:	2b10      	cmp	r3, #16
 8006860:	d006      	beq.n	8006870 <UART_SetConfig+0x168>
 8006862:	e00b      	b.n	800687c <UART_SetConfig+0x174>
 8006864:	2300      	movs	r3, #0
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e0f2      	b.n	8006a50 <UART_SetConfig+0x348>
 800686a:	2302      	movs	r3, #2
 800686c:	77fb      	strb	r3, [r7, #31]
 800686e:	e0ef      	b.n	8006a50 <UART_SetConfig+0x348>
 8006870:	2304      	movs	r3, #4
 8006872:	77fb      	strb	r3, [r7, #31]
 8006874:	e0ec      	b.n	8006a50 <UART_SetConfig+0x348>
 8006876:	2308      	movs	r3, #8
 8006878:	77fb      	strb	r3, [r7, #31]
 800687a:	e0e9      	b.n	8006a50 <UART_SetConfig+0x348>
 800687c:	2310      	movs	r3, #16
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	e0e6      	b.n	8006a50 <UART_SetConfig+0x348>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a56      	ldr	r2, [pc, #344]	@ (80069e0 <UART_SetConfig+0x2d8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d120      	bne.n	80068ce <UART_SetConfig+0x1c6>
 800688c:	4b51      	ldr	r3, [pc, #324]	@ (80069d4 <UART_SetConfig+0x2cc>)
 800688e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006892:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006896:	2bc0      	cmp	r3, #192	@ 0xc0
 8006898:	d013      	beq.n	80068c2 <UART_SetConfig+0x1ba>
 800689a:	2bc0      	cmp	r3, #192	@ 0xc0
 800689c:	d814      	bhi.n	80068c8 <UART_SetConfig+0x1c0>
 800689e:	2b80      	cmp	r3, #128	@ 0x80
 80068a0:	d009      	beq.n	80068b6 <UART_SetConfig+0x1ae>
 80068a2:	2b80      	cmp	r3, #128	@ 0x80
 80068a4:	d810      	bhi.n	80068c8 <UART_SetConfig+0x1c0>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <UART_SetConfig+0x1a8>
 80068aa:	2b40      	cmp	r3, #64	@ 0x40
 80068ac:	d006      	beq.n	80068bc <UART_SetConfig+0x1b4>
 80068ae:	e00b      	b.n	80068c8 <UART_SetConfig+0x1c0>
 80068b0:	2300      	movs	r3, #0
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e0cc      	b.n	8006a50 <UART_SetConfig+0x348>
 80068b6:	2302      	movs	r3, #2
 80068b8:	77fb      	strb	r3, [r7, #31]
 80068ba:	e0c9      	b.n	8006a50 <UART_SetConfig+0x348>
 80068bc:	2304      	movs	r3, #4
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	e0c6      	b.n	8006a50 <UART_SetConfig+0x348>
 80068c2:	2308      	movs	r3, #8
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e0c3      	b.n	8006a50 <UART_SetConfig+0x348>
 80068c8:	2310      	movs	r3, #16
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e0c0      	b.n	8006a50 <UART_SetConfig+0x348>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a44      	ldr	r2, [pc, #272]	@ (80069e4 <UART_SetConfig+0x2dc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d125      	bne.n	8006924 <UART_SetConfig+0x21c>
 80068d8:	4b3e      	ldr	r3, [pc, #248]	@ (80069d4 <UART_SetConfig+0x2cc>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068e6:	d017      	beq.n	8006918 <UART_SetConfig+0x210>
 80068e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ec:	d817      	bhi.n	800691e <UART_SetConfig+0x216>
 80068ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f2:	d00b      	beq.n	800690c <UART_SetConfig+0x204>
 80068f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f8:	d811      	bhi.n	800691e <UART_SetConfig+0x216>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <UART_SetConfig+0x1fe>
 80068fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006902:	d006      	beq.n	8006912 <UART_SetConfig+0x20a>
 8006904:	e00b      	b.n	800691e <UART_SetConfig+0x216>
 8006906:	2300      	movs	r3, #0
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e0a1      	b.n	8006a50 <UART_SetConfig+0x348>
 800690c:	2302      	movs	r3, #2
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e09e      	b.n	8006a50 <UART_SetConfig+0x348>
 8006912:	2304      	movs	r3, #4
 8006914:	77fb      	strb	r3, [r7, #31]
 8006916:	e09b      	b.n	8006a50 <UART_SetConfig+0x348>
 8006918:	2308      	movs	r3, #8
 800691a:	77fb      	strb	r3, [r7, #31]
 800691c:	e098      	b.n	8006a50 <UART_SetConfig+0x348>
 800691e:	2310      	movs	r3, #16
 8006920:	77fb      	strb	r3, [r7, #31]
 8006922:	e095      	b.n	8006a50 <UART_SetConfig+0x348>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2f      	ldr	r2, [pc, #188]	@ (80069e8 <UART_SetConfig+0x2e0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d125      	bne.n	800697a <UART_SetConfig+0x272>
 800692e:	4b29      	ldr	r3, [pc, #164]	@ (80069d4 <UART_SetConfig+0x2cc>)
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006934:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006938:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800693c:	d017      	beq.n	800696e <UART_SetConfig+0x266>
 800693e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006942:	d817      	bhi.n	8006974 <UART_SetConfig+0x26c>
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006948:	d00b      	beq.n	8006962 <UART_SetConfig+0x25a>
 800694a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800694e:	d811      	bhi.n	8006974 <UART_SetConfig+0x26c>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <UART_SetConfig+0x254>
 8006954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006958:	d006      	beq.n	8006968 <UART_SetConfig+0x260>
 800695a:	e00b      	b.n	8006974 <UART_SetConfig+0x26c>
 800695c:	2301      	movs	r3, #1
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e076      	b.n	8006a50 <UART_SetConfig+0x348>
 8006962:	2302      	movs	r3, #2
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e073      	b.n	8006a50 <UART_SetConfig+0x348>
 8006968:	2304      	movs	r3, #4
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e070      	b.n	8006a50 <UART_SetConfig+0x348>
 800696e:	2308      	movs	r3, #8
 8006970:	77fb      	strb	r3, [r7, #31]
 8006972:	e06d      	b.n	8006a50 <UART_SetConfig+0x348>
 8006974:	2310      	movs	r3, #16
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e06a      	b.n	8006a50 <UART_SetConfig+0x348>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1b      	ldr	r2, [pc, #108]	@ (80069ec <UART_SetConfig+0x2e4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d138      	bne.n	80069f6 <UART_SetConfig+0x2ee>
 8006984:	4b13      	ldr	r3, [pc, #76]	@ (80069d4 <UART_SetConfig+0x2cc>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800698e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006992:	d017      	beq.n	80069c4 <UART_SetConfig+0x2bc>
 8006994:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006998:	d82a      	bhi.n	80069f0 <UART_SetConfig+0x2e8>
 800699a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800699e:	d00b      	beq.n	80069b8 <UART_SetConfig+0x2b0>
 80069a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069a4:	d824      	bhi.n	80069f0 <UART_SetConfig+0x2e8>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <UART_SetConfig+0x2aa>
 80069aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ae:	d006      	beq.n	80069be <UART_SetConfig+0x2b6>
 80069b0:	e01e      	b.n	80069f0 <UART_SetConfig+0x2e8>
 80069b2:	2300      	movs	r3, #0
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e04b      	b.n	8006a50 <UART_SetConfig+0x348>
 80069b8:	2302      	movs	r3, #2
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e048      	b.n	8006a50 <UART_SetConfig+0x348>
 80069be:	2304      	movs	r3, #4
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e045      	b.n	8006a50 <UART_SetConfig+0x348>
 80069c4:	2308      	movs	r3, #8
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e042      	b.n	8006a50 <UART_SetConfig+0x348>
 80069ca:	bf00      	nop
 80069cc:	efff69f3 	.word	0xefff69f3
 80069d0:	40011000 	.word	0x40011000
 80069d4:	40023800 	.word	0x40023800
 80069d8:	40004400 	.word	0x40004400
 80069dc:	40004800 	.word	0x40004800
 80069e0:	40004c00 	.word	0x40004c00
 80069e4:	40005000 	.word	0x40005000
 80069e8:	40011400 	.word	0x40011400
 80069ec:	40007800 	.word	0x40007800
 80069f0:	2310      	movs	r3, #16
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e02c      	b.n	8006a50 <UART_SetConfig+0x348>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a72      	ldr	r2, [pc, #456]	@ (8006bc4 <UART_SetConfig+0x4bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d125      	bne.n	8006a4c <UART_SetConfig+0x344>
 8006a00:	4b71      	ldr	r3, [pc, #452]	@ (8006bc8 <UART_SetConfig+0x4c0>)
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006a0a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a0e:	d017      	beq.n	8006a40 <UART_SetConfig+0x338>
 8006a10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a14:	d817      	bhi.n	8006a46 <UART_SetConfig+0x33e>
 8006a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1a:	d00b      	beq.n	8006a34 <UART_SetConfig+0x32c>
 8006a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a20:	d811      	bhi.n	8006a46 <UART_SetConfig+0x33e>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <UART_SetConfig+0x326>
 8006a26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a2a:	d006      	beq.n	8006a3a <UART_SetConfig+0x332>
 8006a2c:	e00b      	b.n	8006a46 <UART_SetConfig+0x33e>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	77fb      	strb	r3, [r7, #31]
 8006a32:	e00d      	b.n	8006a50 <UART_SetConfig+0x348>
 8006a34:	2302      	movs	r3, #2
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e00a      	b.n	8006a50 <UART_SetConfig+0x348>
 8006a3a:	2304      	movs	r3, #4
 8006a3c:	77fb      	strb	r3, [r7, #31]
 8006a3e:	e007      	b.n	8006a50 <UART_SetConfig+0x348>
 8006a40:	2308      	movs	r3, #8
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e004      	b.n	8006a50 <UART_SetConfig+0x348>
 8006a46:	2310      	movs	r3, #16
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e001      	b.n	8006a50 <UART_SetConfig+0x348>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a58:	d15b      	bne.n	8006b12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a5a:	7ffb      	ldrb	r3, [r7, #31]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d828      	bhi.n	8006ab2 <UART_SetConfig+0x3aa>
 8006a60:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <UART_SetConfig+0x360>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a9d 	.word	0x08006a9d
 8006a74:	08006ab3 	.word	0x08006ab3
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006ab3 	.word	0x08006ab3
 8006a80:	08006ab3 	.word	0x08006ab3
 8006a84:	08006ab3 	.word	0x08006ab3
 8006a88:	08006aab 	.word	0x08006aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fe f922 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8006a90:	61b8      	str	r0, [r7, #24]
        break;
 8006a92:	e013      	b.n	8006abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a94:	f7fe f932 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8006a98:	61b8      	str	r0, [r7, #24]
        break;
 8006a9a:	e00f      	b.n	8006abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8006bcc <UART_SetConfig+0x4c4>)
 8006a9e:	61bb      	str	r3, [r7, #24]
        break;
 8006aa0:	e00c      	b.n	8006abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa2:	f7fe f805 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8006aa6:	61b8      	str	r0, [r7, #24]
        break;
 8006aa8:	e008      	b.n	8006abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aae:	61bb      	str	r3, [r7, #24]
        break;
 8006ab0:	e004      	b.n	8006abc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8006aba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d074      	beq.n	8006bac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	005a      	lsls	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	441a      	add	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b0f      	cmp	r3, #15
 8006adc:	d916      	bls.n	8006b0c <UART_SetConfig+0x404>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae4:	d212      	bcs.n	8006b0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f023 030f 	bic.w	r3, r3, #15
 8006aee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	89fb      	ldrh	r3, [r7, #14]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	89fa      	ldrh	r2, [r7, #14]
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	e04f      	b.n	8006bac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	77bb      	strb	r3, [r7, #30]
 8006b10:	e04c      	b.n	8006bac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b12:	7ffb      	ldrb	r3, [r7, #31]
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d828      	bhi.n	8006b6a <UART_SetConfig+0x462>
 8006b18:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <UART_SetConfig+0x418>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b45 	.word	0x08006b45
 8006b24:	08006b4d 	.word	0x08006b4d
 8006b28:	08006b55 	.word	0x08006b55
 8006b2c:	08006b6b 	.word	0x08006b6b
 8006b30:	08006b5b 	.word	0x08006b5b
 8006b34:	08006b6b 	.word	0x08006b6b
 8006b38:	08006b6b 	.word	0x08006b6b
 8006b3c:	08006b6b 	.word	0x08006b6b
 8006b40:	08006b63 	.word	0x08006b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b44:	f7fe f8c6 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8006b48:	61b8      	str	r0, [r7, #24]
        break;
 8006b4a:	e013      	b.n	8006b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b4c:	f7fe f8d6 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8006b50:	61b8      	str	r0, [r7, #24]
        break;
 8006b52:	e00f      	b.n	8006b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b54:	4b1d      	ldr	r3, [pc, #116]	@ (8006bcc <UART_SetConfig+0x4c4>)
 8006b56:	61bb      	str	r3, [r7, #24]
        break;
 8006b58:	e00c      	b.n	8006b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5a:	f7fd ffa9 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8006b5e:	61b8      	str	r0, [r7, #24]
        break;
 8006b60:	e008      	b.n	8006b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b66:	61bb      	str	r3, [r7, #24]
        break;
 8006b68:	e004      	b.n	8006b74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	77bb      	strb	r3, [r7, #30]
        break;
 8006b72:	bf00      	nop
    }

    if (pclk != 0U)
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d018      	beq.n	8006bac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	085a      	lsrs	r2, r3, #1
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	441a      	add	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b0f      	cmp	r3, #15
 8006b92:	d909      	bls.n	8006ba8 <UART_SetConfig+0x4a0>
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9a:	d205      	bcs.n	8006ba8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	e001      	b.n	8006bac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006bb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40007c00 	.word	0x40007c00
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	00f42400 	.word	0x00f42400

08006bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c64:	f003 0310 	and.w	r3, r3, #16
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01a      	beq.n	8006ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cce:	d10a      	bne.n	8006ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]
  }
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d24:	f7fc f87a 	bl	8002e1c <HAL_GetTick>
 8006d28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d10e      	bne.n	8006d56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f831 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e027      	b.n	8006da6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d10e      	bne.n	8006d82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f81b 	bl	8006dae <UART_WaitOnFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e011      	b.n	8006da6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b09c      	sub	sp, #112	@ 0x70
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	603b      	str	r3, [r7, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbe:	e0a7      	b.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	f000 80a3 	beq.w	8006f10 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dca:	f7fc f827 	bl	8002e1c <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d302      	bcc.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d13f      	bne.n	8006e60 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006df4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e00:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e32:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006e34:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e068      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d050      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7c:	d148      	bne.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e6      	bne.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006eda:	623a      	str	r2, [r7, #32]
 8006edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	69f9      	ldr	r1, [r7, #28]
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e5      	bne.n	8006eba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e010      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69da      	ldr	r2, [r3, #28]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	bf0c      	ite	eq
 8006f20:	2301      	moveq	r3, #1
 8006f22:	2300      	movne	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	f43f af48 	beq.w	8006dc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3770      	adds	r7, #112	@ 0x70
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b095      	sub	sp, #84	@ 0x54
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3308      	adds	r3, #8
 8006f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d118      	bne.n	8006fe2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f023 0310 	bic.w	r3, r3, #16
 8006fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	613b      	str	r3, [r7, #16]
   return(result);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ff6:	bf00      	nop
 8006ff8:	3754      	adds	r7, #84	@ 0x54
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff fb51 	bl	80066c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800702e:	b480      	push	{r7}
 8007030:	b08f      	sub	sp, #60	@ 0x3c
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800703a:	2b21      	cmp	r3, #33	@ 0x21
 800703c:	d14c      	bne.n	80070d8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d132      	bne.n	80070b0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	61fb      	str	r3, [r7, #28]
   return(result);
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800706a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800706e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e6      	bne.n	800704a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	60bb      	str	r3, [r7, #8]
   return(result);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007090:	633b      	str	r3, [r7, #48]	@ 0x30
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	613b      	str	r3, [r7, #16]
   return(result);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e6      	bne.n	800707c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80070ae:	e013      	b.n	80070d8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b4:	781a      	ldrb	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80070d8:	bf00      	nop
 80070da:	373c      	adds	r7, #60	@ 0x3c
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b091      	sub	sp, #68	@ 0x44
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070f0:	2b21      	cmp	r3, #33	@ 0x21
 80070f2:	d151      	bne.n	8007198 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d132      	bne.n	8007166 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	623b      	str	r3, [r7, #32]
   return(result);
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007114:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	69b9      	ldr	r1, [r7, #24]
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	617b      	str	r3, [r7, #20]
   return(result);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007164:	e018      	b.n	8007198 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800716c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007198:	bf00      	nop
 800719a:	3744      	adds	r7, #68	@ 0x44
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071c0:	61fb      	str	r3, [r7, #28]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6979      	ldr	r1, [r7, #20]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	613b      	str	r3, [r7, #16]
   return(result);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e6      	bne.n	80071ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fa62 	bl	80066b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f0:	bf00      	nop
 80071f2:	3720      	adds	r7, #32
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071f8:	b084      	sub	sp, #16
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	f107 001c 	add.w	r0, r7, #28
 8007206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2b01      	cmp	r3, #1
 800720e:	d120      	bne.n	8007252 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	4b20      	ldr	r3, [pc, #128]	@ (80072a4 <USB_CoreInit+0xac>)
 8007222:	4013      	ands	r3, r2
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d105      	bne.n	8007246 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa96 	bl	8007778 <USB_CoreReset>
 800724c:	4603      	mov	r3, r0
 800724e:	73fb      	strb	r3, [r7, #15]
 8007250:	e010      	b.n	8007274 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa8a 	bl	8007778 <USB_CoreReset>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	2b01      	cmp	r3, #1
 8007278:	d10b      	bne.n	8007292 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f043 0206 	orr.w	r2, r3, #6
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f043 0220 	orr.w	r2, r3, #32
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800729e:	b004      	add	sp, #16
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	ffbdffbf 	.word	0xffbdffbf

080072a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f023 0201 	bic.w	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d115      	bne.n	8007318 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072f8:	2001      	movs	r0, #1
 80072fa:	f7fb fd9b 	bl	8002e34 <HAL_Delay>
      ms++;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3301      	adds	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa29 	bl	800775c <USB_GetMode>
 800730a:	4603      	mov	r3, r0
 800730c:	2b01      	cmp	r3, #1
 800730e:	d01e      	beq.n	800734e <USB_SetCurrentMode+0x84>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b31      	cmp	r3, #49	@ 0x31
 8007314:	d9f0      	bls.n	80072f8 <USB_SetCurrentMode+0x2e>
 8007316:	e01a      	b.n	800734e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d115      	bne.n	800734a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800732a:	2001      	movs	r0, #1
 800732c:	f7fb fd82 	bl	8002e34 <HAL_Delay>
      ms++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa10 	bl	800775c <USB_GetMode>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <USB_SetCurrentMode+0x84>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b31      	cmp	r3, #49	@ 0x31
 8007346:	d9f0      	bls.n	800732a <USB_SetCurrentMode+0x60>
 8007348:	e001      	b.n	800734e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e005      	b.n	800735a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b32      	cmp	r3, #50	@ 0x32
 8007352:	d101      	bne.n	8007358 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007364:	b084      	sub	sp, #16
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	e009      	b.n	8007398 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	3340      	adds	r3, #64	@ 0x40
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	2200      	movs	r2, #0
 8007390:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3301      	adds	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b0e      	cmp	r3, #14
 800739c:	d9f2      	bls.n	8007384 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800739e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11c      	bne.n	80073de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073b2:	f043 0302 	orr.w	r3, r3, #2
 80073b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e005      	b.n	80073ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073f0:	461a      	mov	r2, r3
 80073f2:	2300      	movs	r3, #0
 80073f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fc:	4619      	mov	r1, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007404:	461a      	mov	r2, r3
 8007406:	680b      	ldr	r3, [r1, #0]
 8007408:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10c      	bne.n	800742a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d104      	bne.n	8007420 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007416:	2100      	movs	r1, #0
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f965 	bl	80076e8 <USB_SetDevSpeed>
 800741e:	e008      	b.n	8007432 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007420:	2101      	movs	r1, #1
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f960 	bl	80076e8 <USB_SetDevSpeed>
 8007428:	e003      	b.n	8007432 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800742a:	2103      	movs	r1, #3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f95b 	bl	80076e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007432:	2110      	movs	r1, #16
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f8f3 	bl	8007620 <USB_FlushTxFifo>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f91f 	bl	8007688 <USB_FlushRxFifo>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745a:	461a      	mov	r2, r3
 800745c:	2300      	movs	r3, #0
 800745e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007466:	461a      	mov	r2, r3
 8007468:	2300      	movs	r3, #0
 800746a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007472:	461a      	mov	r2, r3
 8007474:	2300      	movs	r3, #0
 8007476:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007478:	2300      	movs	r3, #0
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	e043      	b.n	8007506 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007494:	d118      	bne.n	80074c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a8:	461a      	mov	r2, r3
 80074aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e013      	b.n	80074da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074be:	461a      	mov	r2, r3
 80074c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	e008      	b.n	80074da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	461a      	mov	r2, r3
 80074d6:	2300      	movs	r3, #0
 80074d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e6:	461a      	mov	r2, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	461a      	mov	r2, r3
 80074fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	3301      	adds	r3, #1
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	d3b7      	bcc.n	800747e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	e043      	b.n	800759c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007526:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800752a:	d118      	bne.n	800755e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753e:	461a      	mov	r2, r3
 8007540:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	e013      	b.n	8007570 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007554:	461a      	mov	r2, r3
 8007556:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	e008      	b.n	8007570 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800756a:	461a      	mov	r2, r3
 800756c:	2300      	movs	r3, #0
 800756e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757c:	461a      	mov	r2, r3
 800757e:	2300      	movs	r3, #0
 8007580:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800758e:	461a      	mov	r2, r3
 8007590:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007594:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	3301      	adds	r3, #1
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d3b7      	bcc.n	8007514 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80075c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f043 0210 	orr.w	r2, r3, #16
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <USB_DevInit+0x2b4>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f043 0208 	orr.w	r2, r3, #8
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d105      	bne.n	8007608 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699a      	ldr	r2, [r3, #24]
 8007600:	4b06      	ldr	r3, [pc, #24]	@ (800761c <USB_DevInit+0x2b8>)
 8007602:	4313      	orrs	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007614:	b004      	add	sp, #16
 8007616:	4770      	bx	lr
 8007618:	803c3800 	.word	0x803c3800
 800761c:	40000004 	.word	0x40000004

08007620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4a13      	ldr	r2, [pc, #76]	@ (8007684 <USB_FlushTxFifo+0x64>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d901      	bls.n	8007640 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e01b      	b.n	8007678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	daf2      	bge.n	800762e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	019b      	lsls	r3, r3, #6
 8007650:	f043 0220 	orr.w	r2, r3, #32
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4a08      	ldr	r2, [pc, #32]	@ (8007684 <USB_FlushTxFifo+0x64>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d901      	bls.n	800766a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e006      	b.n	8007678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d0f0      	beq.n	8007658 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	00030d40 	.word	0x00030d40

08007688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a11      	ldr	r2, [pc, #68]	@ (80076e4 <USB_FlushRxFifo+0x5c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e018      	b.n	80076d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	daf2      	bge.n	8007694 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2210      	movs	r2, #16
 80076b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4a08      	ldr	r2, [pc, #32]	@ (80076e4 <USB_FlushRxFifo+0x5c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e006      	b.n	80076d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	2b10      	cmp	r3, #16
 80076d4:	d0f0      	beq.n	80076b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	00030d40 	.word	0x00030d40

080076e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007708:	4313      	orrs	r3, r2
 800770a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007748:	f043 0302 	orr.w	r3, r3, #2
 800774c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	f003 0301 	and.w	r3, r3, #1
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3301      	adds	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4a13      	ldr	r2, [pc, #76]	@ (80077dc <USB_CoreReset+0x64>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d901      	bls.n	8007796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e01b      	b.n	80077ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	daf2      	bge.n	8007784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f043 0201 	orr.w	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4a09      	ldr	r2, [pc, #36]	@ (80077dc <USB_CoreReset+0x64>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d901      	bls.n	80077c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e006      	b.n	80077ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d0f0      	beq.n	80077ae <USB_CoreReset+0x36>

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	00030d40 	.word	0x00030d40

080077e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f6:	f3ef 8305 	mrs	r3, IPSR
 80077fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80077fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10f      	bne.n	8007822 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007802:	f3ef 8310 	mrs	r3, PRIMASK
 8007806:	607b      	str	r3, [r7, #4]
  return(result);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800780e:	f3ef 8311 	mrs	r3, BASEPRI
 8007812:	603b      	str	r3, [r7, #0]
  return(result);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <osKernelInitialize+0x3a>
 800781a:	4b0e      	ldr	r3, [pc, #56]	@ (8007854 <osKernelInitialize+0x64>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007822:	f06f 0305 	mvn.w	r3, #5
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e00c      	b.n	8007844 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800782a:	4b0a      	ldr	r3, [pc, #40]	@ (8007854 <osKernelInitialize+0x64>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d105      	bne.n	800783e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007832:	4b08      	ldr	r3, [pc, #32]	@ (8007854 <osKernelInitialize+0x64>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e002      	b.n	8007844 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000aa4 	.word	0x20000aa4

08007858 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800785e:	f3ef 8305 	mrs	r3, IPSR
 8007862:	60bb      	str	r3, [r7, #8]
  return(result);
 8007864:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786a:	f3ef 8310 	mrs	r3, PRIMASK
 800786e:	607b      	str	r3, [r7, #4]
  return(result);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007876:	f3ef 8311 	mrs	r3, BASEPRI
 800787a:	603b      	str	r3, [r7, #0]
  return(result);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <osKernelStart+0x3a>
 8007882:	4b0f      	ldr	r3, [pc, #60]	@ (80078c0 <osKernelStart+0x68>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d103      	bne.n	8007892 <osKernelStart+0x3a>
    stat = osErrorISR;
 800788a:	f06f 0305 	mvn.w	r3, #5
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e010      	b.n	80078b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007892:	4b0b      	ldr	r3, [pc, #44]	@ (80078c0 <osKernelStart+0x68>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d109      	bne.n	80078ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800789a:	f7ff ffa1 	bl	80077e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <osKernelStart+0x68>)
 80078a0:	2202      	movs	r2, #2
 80078a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078a4:	f001 fa58 	bl	8008d58 <vTaskStartScheduler>
      stat = osOK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e002      	b.n	80078b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80078ae:	f04f 33ff 	mov.w	r3, #4294967295
 80078b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078b4:	68fb      	ldr	r3, [r7, #12]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000aa4 	.word	0x20000aa4

080078c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b090      	sub	sp, #64	@ 0x40
 80078c8:	af04      	add	r7, sp, #16
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d4:	f3ef 8305 	mrs	r3, IPSR
 80078d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80078da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 808f 	bne.w	8007a00 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e2:	f3ef 8310 	mrs	r3, PRIMASK
 80078e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ee:	f3ef 8311 	mrs	r3, BASEPRI
 80078f2:	617b      	str	r3, [r7, #20]
  return(result);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <osThreadNew+0x3e>
 80078fa:	4b44      	ldr	r3, [pc, #272]	@ (8007a0c <osThreadNew+0x148>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d07e      	beq.n	8007a00 <osThreadNew+0x13c>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d07b      	beq.n	8007a00 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007908:	2380      	movs	r3, #128	@ 0x80
 800790a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800790c:	2318      	movs	r3, #24
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295
 8007918:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d045      	beq.n	80079ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <osThreadNew+0x6a>
        name = attr->name;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	d008      	beq.n	8007954 <osThreadNew+0x90>
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	2b38      	cmp	r3, #56	@ 0x38
 8007946:	d805      	bhi.n	8007954 <osThreadNew+0x90>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <osThreadNew+0x94>
        return (NULL);
 8007954:	2300      	movs	r3, #0
 8007956:	e054      	b.n	8007a02 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	089b      	lsrs	r3, r3, #2
 8007966:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00e      	beq.n	800798e <osThreadNew+0xca>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2ba7      	cmp	r3, #167	@ 0xa7
 8007976:	d90a      	bls.n	800798e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800797c:	2b00      	cmp	r3, #0
 800797e:	d006      	beq.n	800798e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <osThreadNew+0xca>
        mem = 1;
 8007988:	2301      	movs	r3, #1
 800798a:	623b      	str	r3, [r7, #32]
 800798c:	e010      	b.n	80079b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10c      	bne.n	80079b0 <osThreadNew+0xec>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d108      	bne.n	80079b0 <osThreadNew+0xec>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d104      	bne.n	80079b0 <osThreadNew+0xec>
          mem = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	623b      	str	r3, [r7, #32]
 80079aa:	e001      	b.n	80079b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d110      	bne.n	80079d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079be:	9202      	str	r2, [sp, #8]
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 feb7 	bl	8008740 <xTaskCreateStatic>
 80079d2:	4603      	mov	r3, r0
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	e013      	b.n	8007a00 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d110      	bne.n	8007a00 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f107 0310 	add.w	r3, r7, #16
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 ff0b 	bl	800880c <xTaskCreate>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d001      	beq.n	8007a00 <osThreadNew+0x13c>
          hTask = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a00:	693b      	ldr	r3, [r7, #16]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3730      	adds	r7, #48	@ 0x30
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000aa4 	.word	0x20000aa4

08007a10 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1c:	f3ef 8305 	mrs	r3, IPSR
 8007a20:	617b      	str	r3, [r7, #20]
  return(result);
 8007a22:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10f      	bne.n	8007a48 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a28:	f3ef 8310 	mrs	r3, PRIMASK
 8007a2c:	613b      	str	r3, [r7, #16]
  return(result);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a34:	f3ef 8311 	mrs	r3, BASEPRI
 8007a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <osThreadSuspend+0x40>
 8007a40:	4b0c      	ldr	r3, [pc, #48]	@ (8007a74 <osThreadSuspend+0x64>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d103      	bne.n	8007a50 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8007a48:	f06f 0305 	mvn.w	r3, #5
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	e00b      	b.n	8007a68 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d103      	bne.n	8007a5e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8007a56:	f06f 0303 	mvn.w	r3, #3
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	e004      	b.n	8007a68 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8007a62:	69b8      	ldr	r0, [r7, #24]
 8007a64:	f001 f86a 	bl	8008b3c <vTaskSuspend>
  }

  return (stat);
 8007a68:	69fb      	ldr	r3, [r7, #28]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3720      	adds	r7, #32
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000aa4 	.word	0x20000aa4

08007a78 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a84:	f3ef 8305 	mrs	r3, IPSR
 8007a88:	617b      	str	r3, [r7, #20]
  return(result);
 8007a8a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10f      	bne.n	8007ab0 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a90:	f3ef 8310 	mrs	r3, PRIMASK
 8007a94:	613b      	str	r3, [r7, #16]
  return(result);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007aa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <osThreadResume+0x40>
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <osThreadResume+0x64>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d103      	bne.n	8007ab8 <osThreadResume+0x40>
    stat = osErrorISR;
 8007ab0:	f06f 0305 	mvn.w	r3, #5
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	e00b      	b.n	8007ad0 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d103      	bne.n	8007ac6 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8007abe:	f06f 0303 	mvn.w	r3, #3
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	e004      	b.n	8007ad0 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8007aca:	69b8      	ldr	r0, [r7, #24]
 8007acc:	f001 f8e2 	bl	8008c94 <vTaskResume>
  }

  return (stat);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3720      	adds	r7, #32
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000aa4 	.word	0x20000aa4

08007ae0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae8:	f3ef 8305 	mrs	r3, IPSR
 8007aec:	613b      	str	r3, [r7, #16]
  return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10f      	bne.n	8007b14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007af4:	f3ef 8310 	mrs	r3, PRIMASK
 8007af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b00:	f3ef 8311 	mrs	r3, BASEPRI
 8007b04:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <osDelay+0x3c>
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b38 <osDelay+0x58>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d103      	bne.n	8007b1c <osDelay+0x3c>
    stat = osErrorISR;
 8007b14:	f06f 0305 	mvn.w	r3, #5
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	e007      	b.n	8007b2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 ffd0 	bl	8008acc <vTaskDelay>
    }
  }

  return (stat);
 8007b2c:	697b      	ldr	r3, [r7, #20]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000aa4 	.word	0x20000aa4

08007b3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4a07      	ldr	r2, [pc, #28]	@ (8007b68 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4a06      	ldr	r2, [pc, #24]	@ (8007b6c <vApplicationGetIdleTaskMemory+0x30>)
 8007b52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2280      	movs	r2, #128	@ 0x80
 8007b58:	601a      	str	r2, [r3, #0]
}
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000aa8 	.word	0x20000aa8
 8007b6c:	20000b50 	.word	0x20000b50

08007b70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4a07      	ldr	r2, [pc, #28]	@ (8007b9c <vApplicationGetTimerTaskMemory+0x2c>)
 8007b80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	4a06      	ldr	r2, [pc, #24]	@ (8007ba0 <vApplicationGetTimerTaskMemory+0x30>)
 8007b86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b8e:	601a      	str	r2, [r3, #0]
}
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000d50 	.word	0x20000d50
 8007ba0:	20000df8 	.word	0x20000df8

08007ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f103 0208 	add.w	r2, r3, #8
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f103 0208 	add.w	r2, r3, #8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f103 0208 	add.w	r2, r3, #8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d103      	bne.n	8007c66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e00c      	b.n	8007c80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e002      	b.n	8007c74 <vListInsert+0x2e>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d2f6      	bcs.n	8007c6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
}
 8007cac:	bf00      	nop
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6892      	ldr	r2, [r2, #8]
 8007cce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6852      	ldr	r2, [r2, #4]
 8007cd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d103      	bne.n	8007cec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	1e5a      	subs	r2, r3, #1
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	b672      	cpsid	i
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	b662      	cpsie	i
 8007d34:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007d3c:	f002 f9e6 	bl	800a10c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d48:	68f9      	ldr	r1, [r7, #12]
 8007d4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	441a      	add	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	441a      	add	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	22ff      	movs	r2, #255	@ 0xff
 8007d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	22ff      	movs	r2, #255	@ 0xff
 8007d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d114      	bne.n	8007dbc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01a      	beq.n	8007dd0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3310      	adds	r3, #16
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fa86 	bl	80092b0 <xTaskRemoveFromEventList>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d012      	beq.n	8007dd0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <xQueueGenericReset+0xd4>)
 8007dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	e009      	b.n	8007dd0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3310      	adds	r3, #16
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff feef 	bl	8007ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3324      	adds	r3, #36	@ 0x24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff feea 	bl	8007ba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007dd0:	f002 f9d2 	bl	800a178 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007dd4:	2301      	movs	r3, #1
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	e000ed04 	.word	0xe000ed04

08007de4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	@ 0x38
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10d      	bne.n	8007e14 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfc:	b672      	cpsid	i
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	b662      	cpsie	i
 8007e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e0e:	bf00      	nop
 8007e10:	bf00      	nop
 8007e12:	e7fd      	b.n	8007e10 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10d      	bne.n	8007e36 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1e:	b672      	cpsid	i
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	b662      	cpsie	i
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	e7fd      	b.n	8007e32 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <xQueueGenericCreateStatic+0x5e>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <xQueueGenericCreateStatic+0x62>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <xQueueGenericCreateStatic+0x64>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10d      	bne.n	8007e68 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e50:	b672      	cpsid	i
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	b662      	cpsie	i
 8007e60:	623b      	str	r3, [r7, #32]
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <xQueueGenericCreateStatic+0x90>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <xQueueGenericCreateStatic+0x94>
 8007e74:	2301      	movs	r3, #1
 8007e76:	e000      	b.n	8007e7a <xQueueGenericCreateStatic+0x96>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10d      	bne.n	8007e9a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	b672      	cpsid	i
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	b662      	cpsie	i
 8007e92:	61fb      	str	r3, [r7, #28]
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	e7fd      	b.n	8007e96 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e9a:	2350      	movs	r3, #80	@ 0x50
 8007e9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b50      	cmp	r3, #80	@ 0x50
 8007ea2:	d00d      	beq.n	8007ec0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea8:	b672      	cpsid	i
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	b662      	cpsie	i
 8007eb8:	61bb      	str	r3, [r7, #24]
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ec0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00d      	beq.n	8007ee8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ed4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f805 	bl	8007ef2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3730      	adds	r7, #48	@ 0x30
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	e002      	b.n	8007f14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f20:	2101      	movs	r1, #1
 8007f22:	69b8      	ldr	r0, [r7, #24]
 8007f24:	f7ff fef2 	bl	8007d0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f30:	bf00      	nop
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08e      	sub	sp, #56	@ 0x38
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10d      	bne.n	8007f70 <xQueueGenericSend+0x38>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	b672      	cpsid	i
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	b662      	cpsie	i
 8007f68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f6a:	bf00      	nop
 8007f6c:	bf00      	nop
 8007f6e:	e7fd      	b.n	8007f6c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <xQueueGenericSend+0x46>
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <xQueueGenericSend+0x4a>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e000      	b.n	8007f84 <xQueueGenericSend+0x4c>
 8007f82:	2300      	movs	r3, #0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10d      	bne.n	8007fa4 <xQueueGenericSend+0x6c>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f9e:	bf00      	nop
 8007fa0:	bf00      	nop
 8007fa2:	e7fd      	b.n	8007fa0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d103      	bne.n	8007fb2 <xQueueGenericSend+0x7a>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <xQueueGenericSend+0x7e>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <xQueueGenericSend+0x80>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10d      	bne.n	8007fd8 <xQueueGenericSend+0xa0>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc0:	b672      	cpsid	i
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	b662      	cpsie	i
 8007fd0:	623b      	str	r3, [r7, #32]
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	e7fd      	b.n	8007fd4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fd8:	f001 fb38 	bl	800964c <xTaskGetSchedulerState>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d102      	bne.n	8007fe8 <xQueueGenericSend+0xb0>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <xQueueGenericSend+0xb4>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <xQueueGenericSend+0xb6>
 8007fec:	2300      	movs	r3, #0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10d      	bne.n	800800e <xQueueGenericSend+0xd6>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	b672      	cpsid	i
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	b662      	cpsie	i
 8008006:	61fb      	str	r3, [r7, #28]
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop
 800800c:	e7fd      	b.n	800800a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800800e:	f002 f87d 	bl	800a10c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801a:	429a      	cmp	r2, r3
 800801c:	d302      	bcc.n	8008024 <xQueueGenericSend+0xec>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d129      	bne.n	8008078 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800802a:	f000 fa1b 	bl	8008464 <prvCopyDataToQueue>
 800802e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d010      	beq.n	800805a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	3324      	adds	r3, #36	@ 0x24
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f937 	bl	80092b0 <xTaskRemoveFromEventList>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d013      	beq.n	8008070 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008048:	4b3f      	ldr	r3, [pc, #252]	@ (8008148 <xQueueGenericSend+0x210>)
 800804a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	e00a      	b.n	8008070 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800805a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008060:	4b39      	ldr	r3, [pc, #228]	@ (8008148 <xQueueGenericSend+0x210>)
 8008062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008070:	f002 f882 	bl	800a178 <vPortExitCritical>
				return pdPASS;
 8008074:	2301      	movs	r3, #1
 8008076:	e063      	b.n	8008140 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800807e:	f002 f87b 	bl	800a178 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008082:	2300      	movs	r3, #0
 8008084:	e05c      	b.n	8008140 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800808c:	f107 0314 	add.w	r3, r7, #20
 8008090:	4618      	mov	r0, r3
 8008092:	f001 f973 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008096:	2301      	movs	r3, #1
 8008098:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800809a:	f002 f86d 	bl	800a178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800809e:	f000 fecf 	bl	8008e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080a2:	f002 f833 	bl	800a10c <vPortEnterCritical>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d103      	bne.n	80080bc <xQueueGenericSend+0x184>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080c2:	b25b      	sxtb	r3, r3
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d103      	bne.n	80080d2 <xQueueGenericSend+0x19a>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080d2:	f002 f851 	bl	800a178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080d6:	1d3a      	adds	r2, r7, #4
 80080d8:	f107 0314 	add.w	r3, r7, #20
 80080dc:	4611      	mov	r1, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 f962 	bl	80093a8 <xTaskCheckForTimeOut>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d124      	bne.n	8008134 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080ec:	f000 fab2 	bl	8008654 <prvIsQueueFull>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d018      	beq.n	8008128 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	3310      	adds	r3, #16
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 f880 	bl	8009204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008106:	f000 fa3d 	bl	8008584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800810a:	f000 fea7 	bl	8008e5c <xTaskResumeAll>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f af7c 	bne.w	800800e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008116:	4b0c      	ldr	r3, [pc, #48]	@ (8008148 <xQueueGenericSend+0x210>)
 8008118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	e772      	b.n	800800e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800812a:	f000 fa2b 	bl	8008584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800812e:	f000 fe95 	bl	8008e5c <xTaskResumeAll>
 8008132:	e76c      	b.n	800800e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008136:	f000 fa25 	bl	8008584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800813a:	f000 fe8f 	bl	8008e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800813e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008140:	4618      	mov	r0, r3
 8008142:	3738      	adds	r7, #56	@ 0x38
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08e      	sub	sp, #56	@ 0x38
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10d      	bne.n	8008180 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	b672      	cpsid	i
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	b662      	cpsie	i
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800817a:	bf00      	nop
 800817c:	bf00      	nop
 800817e:	e7fd      	b.n	800817c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d103      	bne.n	800818e <xQueueGenericSendFromISR+0x42>
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <xQueueGenericSendFromISR+0x46>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <xQueueGenericSendFromISR+0x48>
 8008192:	2300      	movs	r3, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10d      	bne.n	80081b4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819c:	b672      	cpsid	i
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	b662      	cpsie	i
 80081ac:	623b      	str	r3, [r7, #32]
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	e7fd      	b.n	80081b0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d103      	bne.n	80081c2 <xQueueGenericSendFromISR+0x76>
 80081ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d101      	bne.n	80081c6 <xQueueGenericSendFromISR+0x7a>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <xQueueGenericSendFromISR+0x7c>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10d      	bne.n	80081e8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d0:	b672      	cpsid	i
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	b662      	cpsie	i
 80081e0:	61fb      	str	r3, [r7, #28]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081e8:	f002 f878 	bl	800a2dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081ec:	f3ef 8211 	mrs	r2, BASEPRI
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	b672      	cpsid	i
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	b662      	cpsie	i
 8008204:	61ba      	str	r2, [r7, #24]
 8008206:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008208:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800820a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008214:	429a      	cmp	r2, r3
 8008216:	d302      	bcc.n	800821e <xQueueGenericSendFromISR+0xd2>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d12c      	bne.n	8008278 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800822e:	f000 f919 	bl	8008464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008232:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d112      	bne.n	8008262 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d016      	beq.n	8008272 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008246:	3324      	adds	r3, #36	@ 0x24
 8008248:	4618      	mov	r0, r3
 800824a:	f001 f831 	bl	80092b0 <xTaskRemoveFromEventList>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e007      	b.n	8008272 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008262:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008266:	3301      	adds	r3, #1
 8008268:	b2db      	uxtb	r3, r3
 800826a:	b25a      	sxtb	r2, r3
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008272:	2301      	movs	r3, #1
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008276:	e001      	b.n	800827c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008278:	2300      	movs	r3, #0
 800827a:	637b      	str	r3, [r7, #52]	@ 0x34
 800827c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008286:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800828a:	4618      	mov	r0, r3
 800828c:	3738      	adds	r7, #56	@ 0x38
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08c      	sub	sp, #48	@ 0x30
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10d      	bne.n	80082ca <xQueueReceive+0x36>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	b672      	cpsid	i
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	b662      	cpsie	i
 80082c2:	623b      	str	r3, [r7, #32]
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	e7fd      	b.n	80082c6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <xQueueReceive+0x44>
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <xQueueReceive+0x48>
 80082d8:	2301      	movs	r3, #1
 80082da:	e000      	b.n	80082de <xQueueReceive+0x4a>
 80082dc:	2300      	movs	r3, #0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10d      	bne.n	80082fe <xQueueReceive+0x6a>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e6:	b672      	cpsid	i
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	b662      	cpsie	i
 80082f6:	61fb      	str	r3, [r7, #28]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082fe:	f001 f9a5 	bl	800964c <xTaskGetSchedulerState>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <xQueueReceive+0x7a>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <xQueueReceive+0x7e>
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <xQueueReceive+0x80>
 8008312:	2300      	movs	r3, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10d      	bne.n	8008334 <xQueueReceive+0xa0>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	61bb      	str	r3, [r7, #24]
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	e7fd      	b.n	8008330 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008334:	f001 feea 	bl	800a10c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01f      	beq.n	8008384 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008348:	f000 f8f6 	bl	8008538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834e:	1e5a      	subs	r2, r3, #1
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00f      	beq.n	800837c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	3310      	adds	r3, #16
 8008360:	4618      	mov	r0, r3
 8008362:	f000 ffa5 	bl	80092b0 <xTaskRemoveFromEventList>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d007      	beq.n	800837c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800836c:	4b3c      	ldr	r3, [pc, #240]	@ (8008460 <xQueueReceive+0x1cc>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800837c:	f001 fefc 	bl	800a178 <vPortExitCritical>
				return pdPASS;
 8008380:	2301      	movs	r3, #1
 8008382:	e069      	b.n	8008458 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800838a:	f001 fef5 	bl	800a178 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800838e:	2300      	movs	r3, #0
 8008390:	e062      	b.n	8008458 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	4618      	mov	r0, r3
 800839e:	f000 ffed 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083a2:	2301      	movs	r3, #1
 80083a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083a6:	f001 fee7 	bl	800a178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083aa:	f000 fd49 	bl	8008e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083ae:	f001 fead 	bl	800a10c <vPortEnterCritical>
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083b8:	b25b      	sxtb	r3, r3
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083be:	d103      	bne.n	80083c8 <xQueueReceive+0x134>
 80083c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d4:	d103      	bne.n	80083de <xQueueReceive+0x14a>
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083de:	f001 fecb 	bl	800a178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083e2:	1d3a      	adds	r2, r7, #4
 80083e4:	f107 0310 	add.w	r3, r7, #16
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 ffdc 	bl	80093a8 <xTaskCheckForTimeOut>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d123      	bne.n	800843e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083f8:	f000 f916 	bl	8008628 <prvIsQueueEmpty>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d017      	beq.n	8008432 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008404:	3324      	adds	r3, #36	@ 0x24
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	4611      	mov	r1, r2
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fefa 	bl	8009204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008412:	f000 f8b7 	bl	8008584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008416:	f000 fd21 	bl	8008e5c <xTaskResumeAll>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d189      	bne.n	8008334 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008420:	4b0f      	ldr	r3, [pc, #60]	@ (8008460 <xQueueReceive+0x1cc>)
 8008422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	e780      	b.n	8008334 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008434:	f000 f8a6 	bl	8008584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008438:	f000 fd10 	bl	8008e5c <xTaskResumeAll>
 800843c:	e77a      	b.n	8008334 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800843e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008440:	f000 f8a0 	bl	8008584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008444:	f000 fd0a 	bl	8008e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800844a:	f000 f8ed 	bl	8008628 <prvIsQueueEmpty>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	f43f af6f 	beq.w	8008334 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008458:	4618      	mov	r0, r3
 800845a:	3730      	adds	r7, #48	@ 0x30
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	e000ed04 	.word	0xe000ed04

08008464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10d      	bne.n	800849e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d14d      	bne.n	8008526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	4618      	mov	r0, r3
 8008490:	f001 f8fa 	bl	8009688 <xTaskPriorityDisinherit>
 8008494:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	609a      	str	r2, [r3, #8]
 800849c:	e043      	b.n	8008526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d119      	bne.n	80084d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6858      	ldr	r0, [r3, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	461a      	mov	r2, r3
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	f002 ff55 	bl	800b35e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084bc:	441a      	add	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d32b      	bcc.n	8008526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]
 80084d6:	e026      	b.n	8008526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68d8      	ldr	r0, [r3, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e0:	461a      	mov	r2, r3
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	f002 ff3b 	bl	800b35e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f0:	425b      	negs	r3, r3
 80084f2:	441a      	add	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d207      	bcs.n	8008514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850c:	425b      	negs	r3, r3
 800850e:	441a      	add	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d105      	bne.n	8008526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	3b01      	subs	r3, #1
 8008524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800852e:	697b      	ldr	r3, [r7, #20]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d018      	beq.n	800857c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	441a      	add	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	429a      	cmp	r2, r3
 8008562:	d303      	bcc.n	800856c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68d9      	ldr	r1, [r3, #12]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008574:	461a      	mov	r2, r3
 8008576:	6838      	ldr	r0, [r7, #0]
 8008578:	f002 fef1 	bl	800b35e <memcpy>
	}
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800858c:	f001 fdbe 	bl	800a10c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008598:	e011      	b.n	80085be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d012      	beq.n	80085c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3324      	adds	r3, #36	@ 0x24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fe82 	bl	80092b0 <xTaskRemoveFromEventList>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085b2:	f000 ff61 	bl	8009478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	dce9      	bgt.n	800859a <prvUnlockQueue+0x16>
 80085c6:	e000      	b.n	80085ca <prvUnlockQueue+0x46>
					break;
 80085c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	22ff      	movs	r2, #255	@ 0xff
 80085ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80085d2:	f001 fdd1 	bl	800a178 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085d6:	f001 fd99 	bl	800a10c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085e2:	e011      	b.n	8008608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d012      	beq.n	8008612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3310      	adds	r3, #16
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fe5d 	bl	80092b0 <xTaskRemoveFromEventList>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085fc:	f000 ff3c 	bl	8009478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	3b01      	subs	r3, #1
 8008604:	b2db      	uxtb	r3, r3
 8008606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800860c:	2b00      	cmp	r3, #0
 800860e:	dce9      	bgt.n	80085e4 <prvUnlockQueue+0x60>
 8008610:	e000      	b.n	8008614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	22ff      	movs	r2, #255	@ 0xff
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800861c:	f001 fdac 	bl	800a178 <vPortExitCritical>
}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008630:	f001 fd6c 	bl	800a10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	2b00      	cmp	r3, #0
 800863a:	d102      	bne.n	8008642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	e001      	b.n	8008646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008646:	f001 fd97 	bl	800a178 <vPortExitCritical>

	return xReturn;
 800864a:	68fb      	ldr	r3, [r7, #12]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800865c:	f001 fd56 	bl	800a10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008668:	429a      	cmp	r2, r3
 800866a:	d102      	bne.n	8008672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e001      	b.n	8008676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008676:	f001 fd7f 	bl	800a178 <vPortExitCritical>

	return xReturn;
 800867a:	68fb      	ldr	r3, [r7, #12]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e014      	b.n	80086be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008694:	4a0f      	ldr	r2, [pc, #60]	@ (80086d4 <vQueueAddToRegistry+0x50>)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10b      	bne.n	80086b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086a0:	490c      	ldr	r1, [pc, #48]	@ (80086d4 <vQueueAddToRegistry+0x50>)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086aa:	4a0a      	ldr	r2, [pc, #40]	@ (80086d4 <vQueueAddToRegistry+0x50>)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	4413      	add	r3, r2
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086b6:	e006      	b.n	80086c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b07      	cmp	r3, #7
 80086c2:	d9e7      	bls.n	8008694 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	200011f8 	.word	0x200011f8

080086d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086e8:	f001 fd10 	bl	800a10c <vPortEnterCritical>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086f2:	b25b      	sxtb	r3, r3
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f8:	d103      	bne.n	8008702 <vQueueWaitForMessageRestricted+0x2a>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008708:	b25b      	sxtb	r3, r3
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d103      	bne.n	8008718 <vQueueWaitForMessageRestricted+0x40>
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008718:	f001 fd2e 	bl	800a178 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	3324      	adds	r3, #36	@ 0x24
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 fd91 	bl	8009254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008732:	6978      	ldr	r0, [r7, #20]
 8008734:	f7ff ff26 	bl	8008584 <prvUnlockQueue>
	}
 8008738:	bf00      	nop
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08e      	sub	sp, #56	@ 0x38
 8008744:	af04      	add	r7, sp, #16
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800874e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10d      	bne.n	8008770 <xTaskCreateStatic+0x30>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	b672      	cpsid	i
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	b662      	cpsie	i
 8008768:	623b      	str	r3, [r7, #32]
}
 800876a:	bf00      	nop
 800876c:	bf00      	nop
 800876e:	e7fd      	b.n	800876c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10d      	bne.n	8008792 <xTaskCreateStatic+0x52>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	b672      	cpsid	i
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	b662      	cpsie	i
 800878a:	61fb      	str	r3, [r7, #28]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008792:	23a8      	movs	r3, #168	@ 0xa8
 8008794:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2ba8      	cmp	r3, #168	@ 0xa8
 800879a:	d00d      	beq.n	80087b8 <xTaskCreateStatic+0x78>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	61bb      	str	r3, [r7, #24]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01e      	beq.n	80087fe <xTaskCreateStatic+0xbe>
 80087c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d01b      	beq.n	80087fe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087d8:	2300      	movs	r3, #0
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	f107 0314 	add.w	r3, r7, #20
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f851 	bl	8008898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087f8:	f000 f8f8 	bl	80089ec <prvAddNewTaskToReadyList>
 80087fc:	e001      	b.n	8008802 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008802:	697b      	ldr	r3, [r7, #20]
	}
 8008804:	4618      	mov	r0, r3
 8008806:	3728      	adds	r7, #40	@ 0x28
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08c      	sub	sp, #48	@ 0x30
 8008810:	af04      	add	r7, sp, #16
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	4613      	mov	r3, r2
 800881a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800881c:	88fb      	ldrh	r3, [r7, #6]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fda1 	bl	800a368 <pvPortMalloc>
 8008826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00e      	beq.n	800884c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800882e:	20a8      	movs	r0, #168	@ 0xa8
 8008830:	f001 fd9a 	bl	800a368 <pvPortMalloc>
 8008834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	631a      	str	r2, [r3, #48]	@ 0x30
 8008842:	e005      	b.n	8008850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008844:	6978      	ldr	r0, [r7, #20]
 8008846:	f001 fe5d 	bl	800a504 <vPortFree>
 800884a:	e001      	b.n	8008850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d017      	beq.n	8008886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800885e:	88fa      	ldrh	r2, [r7, #6]
 8008860:	2300      	movs	r3, #0
 8008862:	9303      	str	r3, [sp, #12]
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	9302      	str	r3, [sp, #8]
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f80f 	bl	8008898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800887a:	69f8      	ldr	r0, [r7, #28]
 800887c:	f000 f8b6 	bl	80089ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	61bb      	str	r3, [r7, #24]
 8008884:	e002      	b.n	800888c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008886:	f04f 33ff 	mov.w	r3, #4294967295
 800888a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800888c:	69bb      	ldr	r3, [r7, #24]
	}
 800888e:	4618      	mov	r0, r3
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	461a      	mov	r2, r3
 80088b0:	21a5      	movs	r1, #165	@ 0xa5
 80088b2:	f002 fc7e 	bl	800b1b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80088c0:	440b      	add	r3, r1
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00d      	beq.n	80088f6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088de:	b672      	cpsid	i
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	b662      	cpsie	i
 80088ee:	617b      	str	r3, [r7, #20]
}
 80088f0:	bf00      	nop
 80088f2:	bf00      	nop
 80088f4:	e7fd      	b.n	80088f2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01f      	beq.n	800893c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	e012      	b.n	8008928 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4413      	add	r3, r2
 8008908:	7819      	ldrb	r1, [r3, #0]
 800890a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	3334      	adds	r3, #52	@ 0x34
 8008912:	460a      	mov	r2, r1
 8008914:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d006      	beq.n	8008930 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3301      	adds	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	2b0f      	cmp	r3, #15
 800892c:	d9e9      	bls.n	8008902 <prvInitialiseNewTask+0x6a>
 800892e:	e000      	b.n	8008932 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008930:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800893a:	e003      	b.n	8008944 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008946:	2b37      	cmp	r3, #55	@ 0x37
 8008948:	d901      	bls.n	800894e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800894a:	2337      	movs	r3, #55	@ 0x37
 800894c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008952:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008958:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	2200      	movs	r2, #0
 800895e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff f93d 	bl	8007be4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800896a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896c:	3318      	adds	r3, #24
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff f938 	bl	8007be4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008978:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008988:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	2200      	movs	r2, #0
 800898e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	2200      	movs	r2, #0
 8008996:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	3354      	adds	r3, #84	@ 0x54
 800899e:	224c      	movs	r2, #76	@ 0x4c
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f002 fc05 	bl	800b1b2 <memset>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	4a0d      	ldr	r2, [pc, #52]	@ (80089e0 <prvInitialiseNewTask+0x148>)
 80089ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	4a0c      	ldr	r2, [pc, #48]	@ (80089e4 <prvInitialiseNewTask+0x14c>)
 80089b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	4a0c      	ldr	r2, [pc, #48]	@ (80089e8 <prvInitialiseNewTask+0x150>)
 80089b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	68f9      	ldr	r1, [r7, #12]
 80089be:	69b8      	ldr	r0, [r7, #24]
 80089c0:	f001 fa92 	bl	8009ee8 <pxPortInitialiseStack>
 80089c4:	4602      	mov	r2, r0
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d6:	bf00      	nop
 80089d8:	3720      	adds	r7, #32
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20005484 	.word	0x20005484
 80089e4:	200054ec 	.word	0x200054ec
 80089e8:	20005554 	.word	0x20005554

080089ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089f4:	f001 fb8a 	bl	800a10c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089f8:	4b2d      	ldr	r3, [pc, #180]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc4>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	4a2c      	ldr	r2, [pc, #176]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc4>)
 8008a00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a02:	4b2c      	ldr	r3, [pc, #176]	@ (8008ab4 <prvAddNewTaskToReadyList+0xc8>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ab4 <prvAddNewTaskToReadyList+0xc8>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a10:	4b27      	ldr	r3, [pc, #156]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc4>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d110      	bne.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a18:	f000 fd52 	bl	80094c0 <prvInitialiseTaskLists>
 8008a1c:	e00d      	b.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a1e:	4b26      	ldr	r3, [pc, #152]	@ (8008ab8 <prvAddNewTaskToReadyList+0xcc>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a26:	4b23      	ldr	r3, [pc, #140]	@ (8008ab4 <prvAddNewTaskToReadyList+0xc8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d802      	bhi.n	8008a3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a34:	4a1f      	ldr	r2, [pc, #124]	@ (8008ab4 <prvAddNewTaskToReadyList+0xc8>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a3a:	4b20      	ldr	r3, [pc, #128]	@ (8008abc <prvAddNewTaskToReadyList+0xd0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	4a1e      	ldr	r2, [pc, #120]	@ (8008abc <prvAddNewTaskToReadyList+0xd0>)
 8008a42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a44:	4b1d      	ldr	r3, [pc, #116]	@ (8008abc <prvAddNewTaskToReadyList+0xd0>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a50:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac0 <prvAddNewTaskToReadyList+0xd4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d903      	bls.n	8008a60 <prvAddNewTaskToReadyList+0x74>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5c:	4a18      	ldr	r2, [pc, #96]	@ (8008ac0 <prvAddNewTaskToReadyList+0xd4>)
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4a15      	ldr	r2, [pc, #84]	@ (8008ac4 <prvAddNewTaskToReadyList+0xd8>)
 8008a6e:	441a      	add	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7ff f8c1 	bl	8007bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a7c:	f001 fb7c 	bl	800a178 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a80:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <prvAddNewTaskToReadyList+0xcc>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00e      	beq.n	8008aa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a88:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab4 <prvAddNewTaskToReadyList+0xc8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d207      	bcs.n	8008aa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a96:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <prvAddNewTaskToReadyList+0xdc>)
 8008a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	2000170c 	.word	0x2000170c
 8008ab4:	20001238 	.word	0x20001238
 8008ab8:	20001718 	.word	0x20001718
 8008abc:	20001728 	.word	0x20001728
 8008ac0:	20001714 	.word	0x20001714
 8008ac4:	2000123c 	.word	0x2000123c
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01a      	beq.n	8008b14 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ade:	4b15      	ldr	r3, [pc, #84]	@ (8008b34 <vTaskDelay+0x68>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00d      	beq.n	8008b02 <vTaskDelay+0x36>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	b672      	cpsid	i
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	b662      	cpsie	i
 8008afa:	60bb      	str	r3, [r7, #8]
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008b02:	f000 f99d 	bl	8008e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b06:	2100      	movs	r1, #0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fe31 	bl	8009770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b0e:	f000 f9a5 	bl	8008e5c <xTaskResumeAll>
 8008b12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d107      	bne.n	8008b2a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008b1a:	4b07      	ldr	r3, [pc, #28]	@ (8008b38 <vTaskDelay+0x6c>)
 8008b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20001734 	.word	0x20001734
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008b44:	f001 fae2 	bl	800a10c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <vTaskSuspend+0x18>
 8008b4e:	4b31      	ldr	r3, [pc, #196]	@ (8008c14 <vTaskSuspend+0xd8>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	e000      	b.n	8008b56 <vTaskSuspend+0x1a>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff f8ab 	bl	8007cb8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3318      	adds	r3, #24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff f8a2 	bl	8007cb8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4827      	ldr	r0, [pc, #156]	@ (8008c18 <vTaskSuspend+0xdc>)
 8008b7c:	f7ff f83f 	bl	8007bfe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d103      	bne.n	8008b94 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008b94:	f001 faf0 	bl	800a178 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008b98:	4b20      	ldr	r3, [pc, #128]	@ (8008c1c <vTaskSuspend+0xe0>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008ba0:	f001 fab4 	bl	800a10c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008ba4:	f000 fd32 	bl	800960c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008ba8:	f001 fae6 	bl	800a178 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008bac:	4b19      	ldr	r3, [pc, #100]	@ (8008c14 <vTaskSuspend+0xd8>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d12a      	bne.n	8008c0c <vTaskSuspend+0xd0>
		{
			if( xSchedulerRunning != pdFALSE )
 8008bb6:	4b19      	ldr	r3, [pc, #100]	@ (8008c1c <vTaskSuspend+0xe0>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01a      	beq.n	8008bf4 <vTaskSuspend+0xb8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008bbe:	4b18      	ldr	r3, [pc, #96]	@ (8008c20 <vTaskSuspend+0xe4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00d      	beq.n	8008be2 <vTaskSuspend+0xa6>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bca:	b672      	cpsid	i
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	b662      	cpsie	i
 8008bda:	60bb      	str	r3, [r7, #8]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8008be2:	4b10      	ldr	r3, [pc, #64]	@ (8008c24 <vTaskSuspend+0xe8>)
 8008be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bf2:	e00b      	b.n	8008c0c <vTaskSuspend+0xd0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008bf4:	4b08      	ldr	r3, [pc, #32]	@ (8008c18 <vTaskSuspend+0xdc>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c28 <vTaskSuspend+0xec>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d103      	bne.n	8008c08 <vTaskSuspend+0xcc>
					pxCurrentTCB = NULL;
 8008c00:	4b04      	ldr	r3, [pc, #16]	@ (8008c14 <vTaskSuspend+0xd8>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
	}
 8008c06:	e001      	b.n	8008c0c <vTaskSuspend+0xd0>
					vTaskSwitchContext();
 8008c08:	f000 fa94 	bl	8009134 <vTaskSwitchContext>
	}
 8008c0c:	bf00      	nop
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20001238 	.word	0x20001238
 8008c18:	200016f8 	.word	0x200016f8
 8008c1c:	20001718 	.word	0x20001718
 8008c20:	20001734 	.word	0x20001734
 8008c24:	e000ed04 	.word	0xe000ed04
 8008c28:	2000170c 	.word	0x2000170c

08008c2c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10d      	bne.n	8008c5e <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c46:	b672      	cpsid	i
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	b662      	cpsie	i
 8008c56:	60fb      	str	r3, [r7, #12]
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	e7fd      	b.n	8008c5a <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	4a0a      	ldr	r2, [pc, #40]	@ (8008c8c <prvTaskIsTaskSuspended+0x60>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d10a      	bne.n	8008c7e <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6c:	4a08      	ldr	r2, [pc, #32]	@ (8008c90 <prvTaskIsTaskSuspended+0x64>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d005      	beq.n	8008c7e <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c7e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	200016f8 	.word	0x200016f8
 8008c90:	200016cc 	.word	0x200016cc

08008c94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10d      	bne.n	8008cc2 <vTaskResume+0x2e>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008caa:	b672      	cpsid	i
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	b662      	cpsie	i
 8008cba:	60bb      	str	r3, [r7, #8]
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008cc2:	4b21      	ldr	r3, [pc, #132]	@ (8008d48 <vTaskResume+0xb4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d038      	beq.n	8008d3e <vTaskResume+0xaa>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d035      	beq.n	8008d3e <vTaskResume+0xaa>
		{
			taskENTER_CRITICAL();
 8008cd2:	f001 fa1b 	bl	800a10c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff ffa8 	bl	8008c2c <prvTaskIsTaskSuspended>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d02b      	beq.n	8008d3a <vTaskResume+0xa6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe ffe6 	bl	8007cb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf0:	4b16      	ldr	r3, [pc, #88]	@ (8008d4c <vTaskResume+0xb8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d903      	bls.n	8008d00 <vTaskResume+0x6c>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfc:	4a13      	ldr	r2, [pc, #76]	@ (8008d4c <vTaskResume+0xb8>)
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d04:	4613      	mov	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4a10      	ldr	r2, [pc, #64]	@ (8008d50 <vTaskResume+0xbc>)
 8008d0e:	441a      	add	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7fe ff71 	bl	8007bfe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d20:	4b09      	ldr	r3, [pc, #36]	@ (8008d48 <vTaskResume+0xb4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d307      	bcc.n	8008d3a <vTaskResume+0xa6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d54 <vTaskResume+0xc0>)
 8008d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008d3a:	f001 fa1d 	bl	800a178 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20001238 	.word	0x20001238
 8008d4c:	20001714 	.word	0x20001714
 8008d50:	2000123c 	.word	0x2000123c
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	@ 0x28
 8008d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d66:	463a      	mov	r2, r7
 8008d68:	1d39      	adds	r1, r7, #4
 8008d6a:	f107 0308 	add.w	r3, r7, #8
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fee4 	bl	8007b3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	9202      	str	r2, [sp, #8]
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	460a      	mov	r2, r1
 8008d86:	4926      	ldr	r1, [pc, #152]	@ (8008e20 <vTaskStartScheduler+0xc8>)
 8008d88:	4826      	ldr	r0, [pc, #152]	@ (8008e24 <vTaskStartScheduler+0xcc>)
 8008d8a:	f7ff fcd9 	bl	8008740 <xTaskCreateStatic>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4a25      	ldr	r2, [pc, #148]	@ (8008e28 <vTaskStartScheduler+0xd0>)
 8008d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d94:	4b24      	ldr	r3, [pc, #144]	@ (8008e28 <vTaskStartScheduler+0xd0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e001      	b.n	8008da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d102      	bne.n	8008db2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dac:	f000 fd34 	bl	8009818 <xTimerCreateTimerTask>
 8008db0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d11d      	bne.n	8008df4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbc:	b672      	cpsid	i
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	b662      	cpsie	i
 8008dcc:	613b      	str	r3, [r7, #16]
}
 8008dce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dd0:	4b16      	ldr	r3, [pc, #88]	@ (8008e2c <vTaskStartScheduler+0xd4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3354      	adds	r3, #84	@ 0x54
 8008dd6:	4a16      	ldr	r2, [pc, #88]	@ (8008e30 <vTaskStartScheduler+0xd8>)
 8008dd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dda:	4b16      	ldr	r3, [pc, #88]	@ (8008e34 <vTaskStartScheduler+0xdc>)
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8008de0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008de2:	4b15      	ldr	r3, [pc, #84]	@ (8008e38 <vTaskStartScheduler+0xe0>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008de8:	4b14      	ldr	r3, [pc, #80]	@ (8008e3c <vTaskStartScheduler+0xe4>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dee:	f001 f90f 	bl	800a010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008df2:	e011      	b.n	8008e18 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d10d      	bne.n	8008e18 <vTaskStartScheduler+0xc0>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	b672      	cpsid	i
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	b662      	cpsie	i
 8008e10:	60fb      	str	r3, [r7, #12]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <vTaskStartScheduler+0xbc>
}
 8008e18:	bf00      	nop
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0800d5ec 	.word	0x0800d5ec
 8008e24:	08009491 	.word	0x08009491
 8008e28:	20001730 	.word	0x20001730
 8008e2c:	20001238 	.word	0x20001238
 8008e30:	20000074 	.word	0x20000074
 8008e34:	2000172c 	.word	0x2000172c
 8008e38:	20001718 	.word	0x20001718
 8008e3c:	20001710 	.word	0x20001710

08008e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e44:	4b04      	ldr	r3, [pc, #16]	@ (8008e58 <vTaskSuspendAll+0x18>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	4a03      	ldr	r2, [pc, #12]	@ (8008e58 <vTaskSuspendAll+0x18>)
 8008e4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008e4e:	bf00      	nop
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	20001734 	.word	0x20001734

08008e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e6a:	4b43      	ldr	r3, [pc, #268]	@ (8008f78 <xTaskResumeAll+0x11c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10d      	bne.n	8008e8e <xTaskResumeAll+0x32>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e76:	b672      	cpsid	i
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	b662      	cpsie	i
 8008e86:	603b      	str	r3, [r7, #0]
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	e7fd      	b.n	8008e8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e8e:	f001 f93d 	bl	800a10c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e92:	4b39      	ldr	r3, [pc, #228]	@ (8008f78 <xTaskResumeAll+0x11c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a37      	ldr	r2, [pc, #220]	@ (8008f78 <xTaskResumeAll+0x11c>)
 8008e9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e9c:	4b36      	ldr	r3, [pc, #216]	@ (8008f78 <xTaskResumeAll+0x11c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d162      	bne.n	8008f6a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ea4:	4b35      	ldr	r3, [pc, #212]	@ (8008f7c <xTaskResumeAll+0x120>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d05e      	beq.n	8008f6a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eac:	e02f      	b.n	8008f0e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eae:	4b34      	ldr	r3, [pc, #208]	@ (8008f80 <xTaskResumeAll+0x124>)
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3318      	adds	r3, #24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fefc 	bl	8007cb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe fef7 	bl	8007cb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ece:	4b2d      	ldr	r3, [pc, #180]	@ (8008f84 <xTaskResumeAll+0x128>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d903      	bls.n	8008ede <xTaskResumeAll+0x82>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eda:	4a2a      	ldr	r2, [pc, #168]	@ (8008f84 <xTaskResumeAll+0x128>)
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4a27      	ldr	r2, [pc, #156]	@ (8008f88 <xTaskResumeAll+0x12c>)
 8008eec:	441a      	add	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	f7fe fe82 	bl	8007bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008efe:	4b23      	ldr	r3, [pc, #140]	@ (8008f8c <xTaskResumeAll+0x130>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d302      	bcc.n	8008f0e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008f08:	4b21      	ldr	r3, [pc, #132]	@ (8008f90 <xTaskResumeAll+0x134>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8008f80 <xTaskResumeAll+0x124>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1cb      	bne.n	8008eae <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f1c:	f000 fb76 	bl	800960c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f20:	4b1c      	ldr	r3, [pc, #112]	@ (8008f94 <xTaskResumeAll+0x138>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d010      	beq.n	8008f4e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f2c:	f000 f846 	bl	8008fbc <xTaskIncrementTick>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008f36:	4b16      	ldr	r3, [pc, #88]	@ (8008f90 <xTaskResumeAll+0x134>)
 8008f38:	2201      	movs	r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1f1      	bne.n	8008f2c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008f48:	4b12      	ldr	r3, [pc, #72]	@ (8008f94 <xTaskResumeAll+0x138>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f4e:	4b10      	ldr	r3, [pc, #64]	@ (8008f90 <xTaskResumeAll+0x134>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f56:	2301      	movs	r3, #1
 8008f58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f98 <xTaskResumeAll+0x13c>)
 8008f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f6a:	f001 f905 	bl	800a178 <vPortExitCritical>

	return xAlreadyYielded;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20001734 	.word	0x20001734
 8008f7c:	2000170c 	.word	0x2000170c
 8008f80:	200016cc 	.word	0x200016cc
 8008f84:	20001714 	.word	0x20001714
 8008f88:	2000123c 	.word	0x2000123c
 8008f8c:	20001238 	.word	0x20001238
 8008f90:	20001720 	.word	0x20001720
 8008f94:	2000171c 	.word	0x2000171c
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fa2:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <xTaskGetTickCount+0x1c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fa8:	687b      	ldr	r3, [r7, #4]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20001710 	.word	0x20001710

08008fbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fc6:	4b50      	ldr	r3, [pc, #320]	@ (8009108 <xTaskIncrementTick+0x14c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f040 808c 	bne.w	80090e8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fd0:	4b4e      	ldr	r3, [pc, #312]	@ (800910c <xTaskIncrementTick+0x150>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800910c <xTaskIncrementTick+0x150>)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d123      	bne.n	800902c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8009110 <xTaskIncrementTick+0x154>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00d      	beq.n	800900a <xTaskIncrementTick+0x4e>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	603b      	str	r3, [r7, #0]
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <xTaskIncrementTick+0x4a>
 800900a:	4b41      	ldr	r3, [pc, #260]	@ (8009110 <xTaskIncrementTick+0x154>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	4b40      	ldr	r3, [pc, #256]	@ (8009114 <xTaskIncrementTick+0x158>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a3e      	ldr	r2, [pc, #248]	@ (8009110 <xTaskIncrementTick+0x154>)
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	4a3e      	ldr	r2, [pc, #248]	@ (8009114 <xTaskIncrementTick+0x158>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	4b3e      	ldr	r3, [pc, #248]	@ (8009118 <xTaskIncrementTick+0x15c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3301      	adds	r3, #1
 8009024:	4a3c      	ldr	r2, [pc, #240]	@ (8009118 <xTaskIncrementTick+0x15c>)
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	f000 faf0 	bl	800960c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800902c:	4b3b      	ldr	r3, [pc, #236]	@ (800911c <xTaskIncrementTick+0x160>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	d349      	bcc.n	80090ca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009036:	4b36      	ldr	r3, [pc, #216]	@ (8009110 <xTaskIncrementTick+0x154>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009040:	4b36      	ldr	r3, [pc, #216]	@ (800911c <xTaskIncrementTick+0x160>)
 8009042:	f04f 32ff 	mov.w	r2, #4294967295
 8009046:	601a      	str	r2, [r3, #0]
					break;
 8009048:	e03f      	b.n	80090ca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904a:	4b31      	ldr	r3, [pc, #196]	@ (8009110 <xTaskIncrementTick+0x154>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	429a      	cmp	r2, r3
 8009060:	d203      	bcs.n	800906a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009062:	4a2e      	ldr	r2, [pc, #184]	@ (800911c <xTaskIncrementTick+0x160>)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009068:	e02f      	b.n	80090ca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3304      	adds	r3, #4
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fe22 	bl	8007cb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009078:	2b00      	cmp	r3, #0
 800907a:	d004      	beq.n	8009086 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3318      	adds	r3, #24
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe fe19 	bl	8007cb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908a:	4b25      	ldr	r3, [pc, #148]	@ (8009120 <xTaskIncrementTick+0x164>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d903      	bls.n	800909a <xTaskIncrementTick+0xde>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009096:	4a22      	ldr	r2, [pc, #136]	@ (8009120 <xTaskIncrementTick+0x164>)
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009124 <xTaskIncrementTick+0x168>)
 80090a8:	441a      	add	r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	3304      	adds	r3, #4
 80090ae:	4619      	mov	r1, r3
 80090b0:	4610      	mov	r0, r2
 80090b2:	f7fe fda4 	bl	8007bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009128 <xTaskIncrementTick+0x16c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d3b8      	bcc.n	8009036 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090c8:	e7b5      	b.n	8009036 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090ca:	4b17      	ldr	r3, [pc, #92]	@ (8009128 <xTaskIncrementTick+0x16c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d0:	4914      	ldr	r1, [pc, #80]	@ (8009124 <xTaskIncrementTick+0x168>)
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d907      	bls.n	80090f2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e004      	b.n	80090f2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80090e8:	4b10      	ldr	r3, [pc, #64]	@ (800912c <xTaskIncrementTick+0x170>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	4a0f      	ldr	r2, [pc, #60]	@ (800912c <xTaskIncrementTick+0x170>)
 80090f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80090f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009130 <xTaskIncrementTick+0x174>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80090fa:	2301      	movs	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80090fe:	697b      	ldr	r3, [r7, #20]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20001734 	.word	0x20001734
 800910c:	20001710 	.word	0x20001710
 8009110:	200016c4 	.word	0x200016c4
 8009114:	200016c8 	.word	0x200016c8
 8009118:	20001724 	.word	0x20001724
 800911c:	2000172c 	.word	0x2000172c
 8009120:	20001714 	.word	0x20001714
 8009124:	2000123c 	.word	0x2000123c
 8009128:	20001238 	.word	0x20001238
 800912c:	2000171c 	.word	0x2000171c
 8009130:	20001720 	.word	0x20001720

08009134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800913a:	4b2c      	ldr	r3, [pc, #176]	@ (80091ec <vTaskSwitchContext+0xb8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009142:	4b2b      	ldr	r3, [pc, #172]	@ (80091f0 <vTaskSwitchContext+0xbc>)
 8009144:	2201      	movs	r2, #1
 8009146:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009148:	e049      	b.n	80091de <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800914a:	4b29      	ldr	r3, [pc, #164]	@ (80091f0 <vTaskSwitchContext+0xbc>)
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009150:	4b28      	ldr	r3, [pc, #160]	@ (80091f4 <vTaskSwitchContext+0xc0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e013      	b.n	8009180 <vTaskSwitchContext+0x4c>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10d      	bne.n	800917a <vTaskSwitchContext+0x46>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009162:	b672      	cpsid	i
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	b662      	cpsie	i
 8009172:	607b      	str	r3, [r7, #4]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <vTaskSwitchContext+0x42>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3b01      	subs	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	491d      	ldr	r1, [pc, #116]	@ (80091f8 <vTaskSwitchContext+0xc4>)
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0e1      	beq.n	8009158 <vTaskSwitchContext+0x24>
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4a16      	ldr	r2, [pc, #88]	@ (80091f8 <vTaskSwitchContext+0xc4>)
 80091a0:	4413      	add	r3, r2
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	605a      	str	r2, [r3, #4]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	3308      	adds	r3, #8
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d104      	bne.n	80091c4 <vTaskSwitchContext+0x90>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	605a      	str	r2, [r3, #4]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	4a0c      	ldr	r2, [pc, #48]	@ (80091fc <vTaskSwitchContext+0xc8>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	4a09      	ldr	r2, [pc, #36]	@ (80091f4 <vTaskSwitchContext+0xc0>)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091d4:	4b09      	ldr	r3, [pc, #36]	@ (80091fc <vTaskSwitchContext+0xc8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3354      	adds	r3, #84	@ 0x54
 80091da:	4a09      	ldr	r2, [pc, #36]	@ (8009200 <vTaskSwitchContext+0xcc>)
 80091dc:	6013      	str	r3, [r2, #0]
}
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20001734 	.word	0x20001734
 80091f0:	20001720 	.word	0x20001720
 80091f4:	20001714 	.word	0x20001714
 80091f8:	2000123c 	.word	0x2000123c
 80091fc:	20001238 	.word	0x20001238
 8009200:	20000074 	.word	0x20000074

08009204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10d      	bne.n	8009230 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009218:	b672      	cpsid	i
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	b662      	cpsie	i
 8009228:	60fb      	str	r3, [r7, #12]
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	e7fd      	b.n	800922c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009230:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <vTaskPlaceOnEventList+0x4c>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3318      	adds	r3, #24
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe fd04 	bl	8007c46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800923e:	2101      	movs	r1, #1
 8009240:	6838      	ldr	r0, [r7, #0]
 8009242:	f000 fa95 	bl	8009770 <prvAddCurrentTaskToDelayedList>
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20001238 	.word	0x20001238

08009254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10d      	bne.n	8009282 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926a:	b672      	cpsid	i
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	b662      	cpsie	i
 800927a:	617b      	str	r3, [r7, #20]
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	e7fd      	b.n	800927e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009282:	4b0a      	ldr	r3, [pc, #40]	@ (80092ac <vTaskPlaceOnEventListRestricted+0x58>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3318      	adds	r3, #24
 8009288:	4619      	mov	r1, r3
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f7fe fcb7 	bl	8007bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800929c:	6879      	ldr	r1, [r7, #4]
 800929e:	68b8      	ldr	r0, [r7, #8]
 80092a0:	f000 fa66 	bl	8009770 <prvAddCurrentTaskToDelayedList>
	}
 80092a4:	bf00      	nop
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20001238 	.word	0x20001238

080092b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10d      	bne.n	80092e2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ca:	b672      	cpsid	i
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	b662      	cpsie	i
 80092da:	60fb      	str	r3, [r7, #12]
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	e7fd      	b.n	80092de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3318      	adds	r3, #24
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fce6 	bl	8007cb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009364 <xTaskRemoveFromEventList+0xb4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d11d      	bne.n	8009330 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe fcdd 	bl	8007cb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009302:	4b19      	ldr	r3, [pc, #100]	@ (8009368 <xTaskRemoveFromEventList+0xb8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d903      	bls.n	8009312 <xTaskRemoveFromEventList+0x62>
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930e:	4a16      	ldr	r2, [pc, #88]	@ (8009368 <xTaskRemoveFromEventList+0xb8>)
 8009310:	6013      	str	r3, [r2, #0]
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4a13      	ldr	r2, [pc, #76]	@ (800936c <xTaskRemoveFromEventList+0xbc>)
 8009320:	441a      	add	r2, r3
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	3304      	adds	r3, #4
 8009326:	4619      	mov	r1, r3
 8009328:	4610      	mov	r0, r2
 800932a:	f7fe fc68 	bl	8007bfe <vListInsertEnd>
 800932e:	e005      	b.n	800933c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	3318      	adds	r3, #24
 8009334:	4619      	mov	r1, r3
 8009336:	480e      	ldr	r0, [pc, #56]	@ (8009370 <xTaskRemoveFromEventList+0xc0>)
 8009338:	f7fe fc61 	bl	8007bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009340:	4b0c      	ldr	r3, [pc, #48]	@ (8009374 <xTaskRemoveFromEventList+0xc4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009346:	429a      	cmp	r2, r3
 8009348:	d905      	bls.n	8009356 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800934a:	2301      	movs	r3, #1
 800934c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800934e:	4b0a      	ldr	r3, [pc, #40]	@ (8009378 <xTaskRemoveFromEventList+0xc8>)
 8009350:	2201      	movs	r2, #1
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e001      	b.n	800935a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800935a:	697b      	ldr	r3, [r7, #20]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20001734 	.word	0x20001734
 8009368:	20001714 	.word	0x20001714
 800936c:	2000123c 	.word	0x2000123c
 8009370:	200016cc 	.word	0x200016cc
 8009374:	20001238 	.word	0x20001238
 8009378:	20001720 	.word	0x20001720

0800937c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009384:	4b06      	ldr	r3, [pc, #24]	@ (80093a0 <vTaskInternalSetTimeOutState+0x24>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800938c:	4b05      	ldr	r3, [pc, #20]	@ (80093a4 <vTaskInternalSetTimeOutState+0x28>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	605a      	str	r2, [r3, #4]
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	20001724 	.word	0x20001724
 80093a4:	20001710 	.word	0x20001710

080093a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10d      	bne.n	80093d4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	b672      	cpsid	i
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	b662      	cpsie	i
 80093cc:	613b      	str	r3, [r7, #16]
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10d      	bne.n	80093f6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093de:	b672      	cpsid	i
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	b662      	cpsie	i
 80093ee:	60fb      	str	r3, [r7, #12]
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e7fd      	b.n	80093f2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80093f6:	f000 fe89 	bl	800a10c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009470 <xTaskCheckForTimeOut+0xc8>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009412:	d102      	bne.n	800941a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009414:	2300      	movs	r3, #0
 8009416:	61fb      	str	r3, [r7, #28]
 8009418:	e023      	b.n	8009462 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b15      	ldr	r3, [pc, #84]	@ (8009474 <xTaskCheckForTimeOut+0xcc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d007      	beq.n	8009436 <xTaskCheckForTimeOut+0x8e>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	429a      	cmp	r2, r3
 800942e:	d302      	bcc.n	8009436 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	e015      	b.n	8009462 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	429a      	cmp	r2, r3
 800943e:	d20b      	bcs.n	8009458 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff ff95 	bl	800937c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009452:	2300      	movs	r3, #0
 8009454:	61fb      	str	r3, [r7, #28]
 8009456:	e004      	b.n	8009462 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800945e:	2301      	movs	r3, #1
 8009460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009462:	f000 fe89 	bl	800a178 <vPortExitCritical>

	return xReturn;
 8009466:	69fb      	ldr	r3, [r7, #28]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20001710 	.word	0x20001710
 8009474:	20001724 	.word	0x20001724

08009478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009478:	b480      	push	{r7}
 800947a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800947c:	4b03      	ldr	r3, [pc, #12]	@ (800948c <vTaskMissedYield+0x14>)
 800947e:	2201      	movs	r2, #1
 8009480:	601a      	str	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20001720 	.word	0x20001720

08009490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009498:	f000 f852 	bl	8009540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800949c:	4b06      	ldr	r3, [pc, #24]	@ (80094b8 <prvIdleTask+0x28>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d9f9      	bls.n	8009498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094a4:	4b05      	ldr	r3, [pc, #20]	@ (80094bc <prvIdleTask+0x2c>)
 80094a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094b4:	e7f0      	b.n	8009498 <prvIdleTask+0x8>
 80094b6:	bf00      	nop
 80094b8:	2000123c 	.word	0x2000123c
 80094bc:	e000ed04 	.word	0xe000ed04

080094c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094c6:	2300      	movs	r3, #0
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	e00c      	b.n	80094e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a12      	ldr	r2, [pc, #72]	@ (8009520 <prvInitialiseTaskLists+0x60>)
 80094d8:	4413      	add	r3, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fb62 	bl	8007ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3301      	adds	r3, #1
 80094e4:	607b      	str	r3, [r7, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b37      	cmp	r3, #55	@ 0x37
 80094ea:	d9ef      	bls.n	80094cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094ec:	480d      	ldr	r0, [pc, #52]	@ (8009524 <prvInitialiseTaskLists+0x64>)
 80094ee:	f7fe fb59 	bl	8007ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094f2:	480d      	ldr	r0, [pc, #52]	@ (8009528 <prvInitialiseTaskLists+0x68>)
 80094f4:	f7fe fb56 	bl	8007ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094f8:	480c      	ldr	r0, [pc, #48]	@ (800952c <prvInitialiseTaskLists+0x6c>)
 80094fa:	f7fe fb53 	bl	8007ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094fe:	480c      	ldr	r0, [pc, #48]	@ (8009530 <prvInitialiseTaskLists+0x70>)
 8009500:	f7fe fb50 	bl	8007ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009504:	480b      	ldr	r0, [pc, #44]	@ (8009534 <prvInitialiseTaskLists+0x74>)
 8009506:	f7fe fb4d 	bl	8007ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800950a:	4b0b      	ldr	r3, [pc, #44]	@ (8009538 <prvInitialiseTaskLists+0x78>)
 800950c:	4a05      	ldr	r2, [pc, #20]	@ (8009524 <prvInitialiseTaskLists+0x64>)
 800950e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009510:	4b0a      	ldr	r3, [pc, #40]	@ (800953c <prvInitialiseTaskLists+0x7c>)
 8009512:	4a05      	ldr	r2, [pc, #20]	@ (8009528 <prvInitialiseTaskLists+0x68>)
 8009514:	601a      	str	r2, [r3, #0]
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	2000123c 	.word	0x2000123c
 8009524:	2000169c 	.word	0x2000169c
 8009528:	200016b0 	.word	0x200016b0
 800952c:	200016cc 	.word	0x200016cc
 8009530:	200016e0 	.word	0x200016e0
 8009534:	200016f8 	.word	0x200016f8
 8009538:	200016c4 	.word	0x200016c4
 800953c:	200016c8 	.word	0x200016c8

08009540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009546:	e019      	b.n	800957c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009548:	f000 fde0 	bl	800a10c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800954c:	4b10      	ldr	r3, [pc, #64]	@ (8009590 <prvCheckTasksWaitingTermination+0x50>)
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3304      	adds	r3, #4
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe fbad 	bl	8007cb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800955e:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <prvCheckTasksWaitingTermination+0x54>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3b01      	subs	r3, #1
 8009564:	4a0b      	ldr	r2, [pc, #44]	@ (8009594 <prvCheckTasksWaitingTermination+0x54>)
 8009566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009568:	4b0b      	ldr	r3, [pc, #44]	@ (8009598 <prvCheckTasksWaitingTermination+0x58>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	4a0a      	ldr	r2, [pc, #40]	@ (8009598 <prvCheckTasksWaitingTermination+0x58>)
 8009570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009572:	f000 fe01 	bl	800a178 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f810 	bl	800959c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <prvCheckTasksWaitingTermination+0x58>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e1      	bne.n	8009548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200016e0 	.word	0x200016e0
 8009594:	2000170c 	.word	0x2000170c
 8009598:	200016f4 	.word	0x200016f4

0800959c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3354      	adds	r3, #84	@ 0x54
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 fe1f 	bl	800b1ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d108      	bne.n	80095ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 ffa1 	bl	800a504 <vPortFree>
				vPortFree( pxTCB );
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 ff9e 	bl	800a504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095c8:	e01b      	b.n	8009602 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d103      	bne.n	80095dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 ff95 	bl	800a504 <vPortFree>
	}
 80095da:	e012      	b.n	8009602 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d00d      	beq.n	8009602 <prvDeleteTCB+0x66>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	b672      	cpsid	i
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	b662      	cpsie	i
 80095fa:	60fb      	str	r3, [r7, #12]
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	e7fd      	b.n	80095fe <prvDeleteTCB+0x62>
	}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009612:	4b0c      	ldr	r3, [pc, #48]	@ (8009644 <prvResetNextTaskUnblockTime+0x38>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800961c:	4b0a      	ldr	r3, [pc, #40]	@ (8009648 <prvResetNextTaskUnblockTime+0x3c>)
 800961e:	f04f 32ff 	mov.w	r2, #4294967295
 8009622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009624:	e008      	b.n	8009638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009626:	4b07      	ldr	r3, [pc, #28]	@ (8009644 <prvResetNextTaskUnblockTime+0x38>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	4a04      	ldr	r2, [pc, #16]	@ (8009648 <prvResetNextTaskUnblockTime+0x3c>)
 8009636:	6013      	str	r3, [r2, #0]
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	200016c4 	.word	0x200016c4
 8009648:	2000172c 	.word	0x2000172c

0800964c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009652:	4b0b      	ldr	r3, [pc, #44]	@ (8009680 <xTaskGetSchedulerState+0x34>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d102      	bne.n	8009660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800965a:	2301      	movs	r3, #1
 800965c:	607b      	str	r3, [r7, #4]
 800965e:	e008      	b.n	8009672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009660:	4b08      	ldr	r3, [pc, #32]	@ (8009684 <xTaskGetSchedulerState+0x38>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009668:	2302      	movs	r3, #2
 800966a:	607b      	str	r3, [r7, #4]
 800966c:	e001      	b.n	8009672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800966e:	2300      	movs	r3, #0
 8009670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009672:	687b      	ldr	r3, [r7, #4]
	}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20001718 	.word	0x20001718
 8009684:	20001734 	.word	0x20001734

08009688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d05c      	beq.n	8009758 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800969e:	4b31      	ldr	r3, [pc, #196]	@ (8009764 <xTaskPriorityDisinherit+0xdc>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d00d      	beq.n	80096c4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	b672      	cpsid	i
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	b662      	cpsie	i
 80096bc:	60fb      	str	r3, [r7, #12]
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10d      	bne.n	80096e8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d0:	b672      	cpsid	i
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	b662      	cpsie	i
 80096e0:	60bb      	str	r3, [r7, #8]
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	e7fd      	b.n	80096e4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ec:	1e5a      	subs	r2, r3, #1
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d02c      	beq.n	8009758 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009702:	2b00      	cmp	r3, #0
 8009704:	d128      	bne.n	8009758 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3304      	adds	r3, #4
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fad4 	bl	8007cb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009728:	4b0f      	ldr	r3, [pc, #60]	@ (8009768 <xTaskPriorityDisinherit+0xe0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d903      	bls.n	8009738 <xTaskPriorityDisinherit+0xb0>
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009734:	4a0c      	ldr	r2, [pc, #48]	@ (8009768 <xTaskPriorityDisinherit+0xe0>)
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4a09      	ldr	r2, [pc, #36]	@ (800976c <xTaskPriorityDisinherit+0xe4>)
 8009746:	441a      	add	r2, r3
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	4610      	mov	r0, r2
 8009750:	f7fe fa55 	bl	8007bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009758:	697b      	ldr	r3, [r7, #20]
	}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20001238 	.word	0x20001238
 8009768:	20001714 	.word	0x20001714
 800976c:	2000123c 	.word	0x2000123c

08009770 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800977a:	4b21      	ldr	r3, [pc, #132]	@ (8009800 <prvAddCurrentTaskToDelayedList+0x90>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009780:	4b20      	ldr	r3, [pc, #128]	@ (8009804 <prvAddCurrentTaskToDelayedList+0x94>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3304      	adds	r3, #4
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fa96 	bl	8007cb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009792:	d10a      	bne.n	80097aa <prvAddCurrentTaskToDelayedList+0x3a>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800979a:	4b1a      	ldr	r3, [pc, #104]	@ (8009804 <prvAddCurrentTaskToDelayedList+0x94>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3304      	adds	r3, #4
 80097a0:	4619      	mov	r1, r3
 80097a2:	4819      	ldr	r0, [pc, #100]	@ (8009808 <prvAddCurrentTaskToDelayedList+0x98>)
 80097a4:	f7fe fa2b 	bl	8007bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097a8:	e026      	b.n	80097f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4413      	add	r3, r2
 80097b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097b2:	4b14      	ldr	r3, [pc, #80]	@ (8009804 <prvAddCurrentTaskToDelayedList+0x94>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d209      	bcs.n	80097d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097c2:	4b12      	ldr	r3, [pc, #72]	@ (800980c <prvAddCurrentTaskToDelayedList+0x9c>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009804 <prvAddCurrentTaskToDelayedList+0x94>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7fe fa39 	bl	8007c46 <vListInsert>
}
 80097d4:	e010      	b.n	80097f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009810 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	4b0a      	ldr	r3, [pc, #40]	@ (8009804 <prvAddCurrentTaskToDelayedList+0x94>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3304      	adds	r3, #4
 80097e0:	4619      	mov	r1, r3
 80097e2:	4610      	mov	r0, r2
 80097e4:	f7fe fa2f 	bl	8007c46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d202      	bcs.n	80097f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097f2:	4a08      	ldr	r2, [pc, #32]	@ (8009814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	6013      	str	r3, [r2, #0]
}
 80097f8:	bf00      	nop
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20001710 	.word	0x20001710
 8009804:	20001238 	.word	0x20001238
 8009808:	200016f8 	.word	0x200016f8
 800980c:	200016c8 	.word	0x200016c8
 8009810:	200016c4 	.word	0x200016c4
 8009814:	2000172c 	.word	0x2000172c

08009818 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	@ 0x28
 800981c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009822:	f000 fb21 	bl	8009e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009826:	4b1e      	ldr	r3, [pc, #120]	@ (80098a0 <xTimerCreateTimerTask+0x88>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d021      	beq.n	8009872 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009836:	1d3a      	adds	r2, r7, #4
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	f107 030c 	add.w	r3, r7, #12
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe f995 	bl	8007b70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	9202      	str	r2, [sp, #8]
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	2302      	movs	r3, #2
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	2300      	movs	r3, #0
 8009856:	460a      	mov	r2, r1
 8009858:	4912      	ldr	r1, [pc, #72]	@ (80098a4 <xTimerCreateTimerTask+0x8c>)
 800985a:	4813      	ldr	r0, [pc, #76]	@ (80098a8 <xTimerCreateTimerTask+0x90>)
 800985c:	f7fe ff70 	bl	8008740 <xTaskCreateStatic>
 8009860:	4603      	mov	r3, r0
 8009862:	4a12      	ldr	r2, [pc, #72]	@ (80098ac <xTimerCreateTimerTask+0x94>)
 8009864:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009866:	4b11      	ldr	r3, [pc, #68]	@ (80098ac <xTimerCreateTimerTask+0x94>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800986e:	2301      	movs	r3, #1
 8009870:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10d      	bne.n	8009894 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987c:	b672      	cpsid	i
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	b662      	cpsie	i
 800988c:	613b      	str	r3, [r7, #16]
}
 800988e:	bf00      	nop
 8009890:	bf00      	nop
 8009892:	e7fd      	b.n	8009890 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009894:	697b      	ldr	r3, [r7, #20]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20001768 	.word	0x20001768
 80098a4:	0800d5f4 	.word	0x0800d5f4
 80098a8:	080099f1 	.word	0x080099f1
 80098ac:	2000176c 	.word	0x2000176c

080098b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	@ 0x28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098be:	2300      	movs	r3, #0
 80098c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10d      	bne.n	80098e4 <xTimerGenericCommand+0x34>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098cc:	b672      	cpsid	i
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	b662      	cpsie	i
 80098dc:	623b      	str	r3, [r7, #32]
}
 80098de:	bf00      	nop
 80098e0:	bf00      	nop
 80098e2:	e7fd      	b.n	80098e0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098e4:	4b19      	ldr	r3, [pc, #100]	@ (800994c <xTimerGenericCommand+0x9c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d02a      	beq.n	8009942 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	dc18      	bgt.n	8009930 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098fe:	f7ff fea5 	bl	800964c <xTaskGetSchedulerState>
 8009902:	4603      	mov	r3, r0
 8009904:	2b02      	cmp	r3, #2
 8009906:	d109      	bne.n	800991c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009908:	4b10      	ldr	r3, [pc, #64]	@ (800994c <xTimerGenericCommand+0x9c>)
 800990a:	6818      	ldr	r0, [r3, #0]
 800990c:	f107 0110 	add.w	r1, r7, #16
 8009910:	2300      	movs	r3, #0
 8009912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009914:	f7fe fb10 	bl	8007f38 <xQueueGenericSend>
 8009918:	6278      	str	r0, [r7, #36]	@ 0x24
 800991a:	e012      	b.n	8009942 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800991c:	4b0b      	ldr	r3, [pc, #44]	@ (800994c <xTimerGenericCommand+0x9c>)
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	f107 0110 	add.w	r1, r7, #16
 8009924:	2300      	movs	r3, #0
 8009926:	2200      	movs	r2, #0
 8009928:	f7fe fb06 	bl	8007f38 <xQueueGenericSend>
 800992c:	6278      	str	r0, [r7, #36]	@ 0x24
 800992e:	e008      	b.n	8009942 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009930:	4b06      	ldr	r3, [pc, #24]	@ (800994c <xTimerGenericCommand+0x9c>)
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	f107 0110 	add.w	r1, r7, #16
 8009938:	2300      	movs	r3, #0
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	f7fe fc06 	bl	800814c <xQueueGenericSendFromISR>
 8009940:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009944:	4618      	mov	r0, r3
 8009946:	3728      	adds	r7, #40	@ 0x28
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20001768 	.word	0x20001768

08009950 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af02      	add	r7, sp, #8
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995a:	4b24      	ldr	r3, [pc, #144]	@ (80099ec <prvProcessExpiredTimer+0x9c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	3304      	adds	r3, #4
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe f9a5 	bl	8007cb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b00      	cmp	r3, #0
 800997a:	d025      	beq.n	80099c8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	699a      	ldr	r2, [r3, #24]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	18d1      	adds	r1, r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	6978      	ldr	r0, [r7, #20]
 800998a:	f000 f8d7 	bl	8009b3c <prvInsertTimerInActiveList>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d022      	beq.n	80099da <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009994:	2300      	movs	r3, #0
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	2300      	movs	r3, #0
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	2100      	movs	r1, #0
 800999e:	6978      	ldr	r0, [r7, #20]
 80099a0:	f7ff ff86 	bl	80098b0 <xTimerGenericCommand>
 80099a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d116      	bne.n	80099da <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b0:	b672      	cpsid	i
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	b662      	cpsie	i
 80099c0:	60fb      	str	r3, [r7, #12]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099ce:	f023 0301 	bic.w	r3, r3, #1
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	6978      	ldr	r0, [r7, #20]
 80099e0:	4798      	blx	r3
}
 80099e2:	bf00      	nop
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20001760 	.word	0x20001760

080099f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099f8:	f107 0308 	add.w	r3, r7, #8
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f859 	bl	8009ab4 <prvGetNextExpireTime>
 8009a02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	4619      	mov	r1, r3
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 f805 	bl	8009a18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a0e:	f000 f8d7 	bl	8009bc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a12:	bf00      	nop
 8009a14:	e7f0      	b.n	80099f8 <prvTimerTask+0x8>
	...

08009a18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a22:	f7ff fa0d 	bl	8008e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f866 	bl	8009afc <prvSampleTimeNow>
 8009a30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d130      	bne.n	8009a9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10a      	bne.n	8009a54 <prvProcessTimerOrBlockTask+0x3c>
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d806      	bhi.n	8009a54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a46:	f7ff fa09 	bl	8008e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a4a:	68f9      	ldr	r1, [r7, #12]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7ff ff7f 	bl	8009950 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a52:	e024      	b.n	8009a9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d008      	beq.n	8009a6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a5a:	4b13      	ldr	r3, [pc, #76]	@ (8009aa8 <prvProcessTimerOrBlockTask+0x90>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <prvProcessTimerOrBlockTask+0x50>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e000      	b.n	8009a6a <prvProcessTimerOrBlockTask+0x52>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8009aac <prvProcessTimerOrBlockTask+0x94>)
 8009a6e:	6818      	ldr	r0, [r3, #0]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7fe fe2d 	bl	80086d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a7e:	f7ff f9ed 	bl	8008e5c <xTaskResumeAll>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a88:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <prvProcessTimerOrBlockTask+0x98>)
 8009a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	f3bf 8f6f 	isb	sy
}
 8009a98:	e001      	b.n	8009a9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a9a:	f7ff f9df 	bl	8008e5c <xTaskResumeAll>
}
 8009a9e:	bf00      	nop
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20001764 	.word	0x20001764
 8009aac:	20001768 	.word	0x20001768
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009abc:	4b0e      	ldr	r3, [pc, #56]	@ (8009af8 <prvGetNextExpireTime+0x44>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <prvGetNextExpireTime+0x16>
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	e000      	b.n	8009acc <prvGetNextExpireTime+0x18>
 8009aca:	2200      	movs	r2, #0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d105      	bne.n	8009ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ad8:	4b07      	ldr	r3, [pc, #28]	@ (8009af8 <prvGetNextExpireTime+0x44>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	e001      	b.n	8009ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	20001760 	.word	0x20001760

08009afc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b04:	f7ff fa4a 	bl	8008f9c <xTaskGetTickCount>
 8009b08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b38 <prvSampleTimeNow+0x3c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d205      	bcs.n	8009b20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b14:	f000 f940 	bl	8009d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	e002      	b.n	8009b26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b26:	4a04      	ldr	r2, [pc, #16]	@ (8009b38 <prvSampleTimeNow+0x3c>)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20001770 	.word	0x20001770

08009b3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d812      	bhi.n	8009b88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	1ad2      	subs	r2, r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d302      	bcc.n	8009b76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b70:	2301      	movs	r3, #1
 8009b72:	617b      	str	r3, [r7, #20]
 8009b74:	e01b      	b.n	8009bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b76:	4b10      	ldr	r3, [pc, #64]	@ (8009bb8 <prvInsertTimerInActiveList+0x7c>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4610      	mov	r0, r2
 8009b82:	f7fe f860 	bl	8007c46 <vListInsert>
 8009b86:	e012      	b.n	8009bae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d206      	bcs.n	8009b9e <prvInsertTimerInActiveList+0x62>
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d302      	bcc.n	8009b9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	e007      	b.n	8009bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b9e:	4b07      	ldr	r3, [pc, #28]	@ (8009bbc <prvInsertTimerInActiveList+0x80>)
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f7fe f84c 	bl	8007c46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bae:	697b      	ldr	r3, [r7, #20]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20001764 	.word	0x20001764
 8009bbc:	20001760 	.word	0x20001760

08009bc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	@ 0x38
 8009bc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bc6:	e0d4      	b.n	8009d72 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	da1b      	bge.n	8009c06 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bce:	1d3b      	adds	r3, r7, #4
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10d      	bne.n	8009bf6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bde:	b672      	cpsid	i
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	b662      	cpsie	i
 8009bee:	61fb      	str	r3, [r7, #28]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfc:	6850      	ldr	r0, [r2, #4]
 8009bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c00:	6892      	ldr	r2, [r2, #8]
 8009c02:	4611      	mov	r1, r2
 8009c04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f2c0 80b2 	blt.w	8009d72 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe f84a 	bl	8007cb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c24:	463b      	mov	r3, r7
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ff68 	bl	8009afc <prvSampleTimeNow>
 8009c2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	f200 809b 	bhi.w	8009d6c <prvProcessReceivedCommands+0x1ac>
 8009c36:	a201      	add	r2, pc, #4	@ (adr r2, 8009c3c <prvProcessReceivedCommands+0x7c>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c65 	.word	0x08009c65
 8009c40:	08009c65 	.word	0x08009c65
 8009c44:	08009c65 	.word	0x08009c65
 8009c48:	08009cdf 	.word	0x08009cdf
 8009c4c:	08009cf3 	.word	0x08009cf3
 8009c50:	08009d43 	.word	0x08009d43
 8009c54:	08009c65 	.word	0x08009c65
 8009c58:	08009c65 	.word	0x08009c65
 8009c5c:	08009cdf 	.word	0x08009cdf
 8009c60:	08009cf3 	.word	0x08009cf3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c6a:	f043 0301 	orr.w	r3, r3, #1
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	18d1      	adds	r1, r2, r3
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c84:	f7ff ff5a 	bl	8009b3c <prvInsertTimerInActiveList>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d070      	beq.n	8009d70 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d065      	beq.n	8009d70 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	441a      	add	r2, r3
 8009cac:	2300      	movs	r3, #0
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb6:	f7ff fdfb 	bl	80098b0 <xTimerGenericCommand>
 8009cba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d156      	bne.n	8009d70 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	b672      	cpsid	i
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	b662      	cpsie	i
 8009cd6:	61bb      	str	r3, [r7, #24]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009cf0:	e03f      	b.n	8009d72 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf8:	f043 0301 	orr.w	r3, r3, #1
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10d      	bne.n	8009d2e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	b672      	cpsid	i
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	b662      	cpsie	i
 8009d26:	617b      	str	r3, [r7, #20]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	699a      	ldr	r2, [r3, #24]
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	18d1      	adds	r1, r2, r3
 8009d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d3c:	f7ff fefe 	bl	8009b3c <prvInsertTimerInActiveList>
					break;
 8009d40:	e017      	b.n	8009d72 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d48:	f003 0302 	and.w	r3, r3, #2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d103      	bne.n	8009d58 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d52:	f000 fbd7 	bl	800a504 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d56:	e00c      	b.n	8009d72 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d5e:	f023 0301 	bic.w	r3, r3, #1
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d6a:	e002      	b.n	8009d72 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009d6c:	bf00      	nop
 8009d6e:	e000      	b.n	8009d72 <prvProcessReceivedCommands+0x1b2>
					break;
 8009d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d72:	4b08      	ldr	r3, [pc, #32]	@ (8009d94 <prvProcessReceivedCommands+0x1d4>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	1d39      	adds	r1, r7, #4
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fa8a 	bl	8008294 <xQueueReceive>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f47f af20 	bne.w	8009bc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	3730      	adds	r7, #48	@ 0x30
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20001768 	.word	0x20001768

08009d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d9e:	e04b      	b.n	8009e38 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009da0:	4b2f      	ldr	r3, [pc, #188]	@ (8009e60 <prvSwitchTimerLists+0xc8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009daa:	4b2d      	ldr	r3, [pc, #180]	@ (8009e60 <prvSwitchTimerLists+0xc8>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3304      	adds	r3, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd ff7d 	bl	8007cb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d031      	beq.n	8009e38 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	4413      	add	r3, r2
 8009ddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d90e      	bls.n	8009e04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009df2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e60 <prvSwitchTimerLists+0xc8>)
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f7fd ff22 	bl	8007c46 <vListInsert>
 8009e02:	e019      	b.n	8009e38 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e04:	2300      	movs	r3, #0
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff fd4e 	bl	80098b0 <xTimerGenericCommand>
 8009e14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10d      	bne.n	8009e38 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	b672      	cpsid	i
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	b662      	cpsie	i
 8009e30:	603b      	str	r3, [r7, #0]
}
 8009e32:	bf00      	nop
 8009e34:	bf00      	nop
 8009e36:	e7fd      	b.n	8009e34 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e38:	4b09      	ldr	r3, [pc, #36]	@ (8009e60 <prvSwitchTimerLists+0xc8>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1ae      	bne.n	8009da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e42:	4b07      	ldr	r3, [pc, #28]	@ (8009e60 <prvSwitchTimerLists+0xc8>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e48:	4b06      	ldr	r3, [pc, #24]	@ (8009e64 <prvSwitchTimerLists+0xcc>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a04      	ldr	r2, [pc, #16]	@ (8009e60 <prvSwitchTimerLists+0xc8>)
 8009e4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e50:	4a04      	ldr	r2, [pc, #16]	@ (8009e64 <prvSwitchTimerLists+0xcc>)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	6013      	str	r3, [r2, #0]
}
 8009e56:	bf00      	nop
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001760 	.word	0x20001760
 8009e64:	20001764 	.word	0x20001764

08009e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e6e:	f000 f94d 	bl	800a10c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e72:	4b15      	ldr	r3, [pc, #84]	@ (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d120      	bne.n	8009ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e7a:	4814      	ldr	r0, [pc, #80]	@ (8009ecc <prvCheckForValidListAndQueue+0x64>)
 8009e7c:	f7fd fe92 	bl	8007ba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e80:	4813      	ldr	r0, [pc, #76]	@ (8009ed0 <prvCheckForValidListAndQueue+0x68>)
 8009e82:	f7fd fe8f 	bl	8007ba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e86:	4b13      	ldr	r3, [pc, #76]	@ (8009ed4 <prvCheckForValidListAndQueue+0x6c>)
 8009e88:	4a10      	ldr	r2, [pc, #64]	@ (8009ecc <prvCheckForValidListAndQueue+0x64>)
 8009e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e8c:	4b12      	ldr	r3, [pc, #72]	@ (8009ed8 <prvCheckForValidListAndQueue+0x70>)
 8009e8e:	4a10      	ldr	r2, [pc, #64]	@ (8009ed0 <prvCheckForValidListAndQueue+0x68>)
 8009e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e92:	2300      	movs	r3, #0
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4b11      	ldr	r3, [pc, #68]	@ (8009edc <prvCheckForValidListAndQueue+0x74>)
 8009e98:	4a11      	ldr	r2, [pc, #68]	@ (8009ee0 <prvCheckForValidListAndQueue+0x78>)
 8009e9a:	2110      	movs	r1, #16
 8009e9c:	200a      	movs	r0, #10
 8009e9e:	f7fd ffa1 	bl	8007de4 <xQueueGenericCreateStatic>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4a08      	ldr	r2, [pc, #32]	@ (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009ea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ea8:	4b07      	ldr	r3, [pc, #28]	@ (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009eb0:	4b05      	ldr	r3, [pc, #20]	@ (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	490b      	ldr	r1, [pc, #44]	@ (8009ee4 <prvCheckForValidListAndQueue+0x7c>)
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fbe4 	bl	8008684 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ebc:	f000 f95c 	bl	800a178 <vPortExitCritical>
}
 8009ec0:	bf00      	nop
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20001768 	.word	0x20001768
 8009ecc:	20001738 	.word	0x20001738
 8009ed0:	2000174c 	.word	0x2000174c
 8009ed4:	20001760 	.word	0x20001760
 8009ed8:	20001764 	.word	0x20001764
 8009edc:	20001814 	.word	0x20001814
 8009ee0:	20001774 	.word	0x20001774
 8009ee4:	0800d5fc 	.word	0x0800d5fc

08009ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3b04      	subs	r3, #4
 8009ef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3b04      	subs	r3, #4
 8009f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f023 0201 	bic.w	r2, r3, #1
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b04      	subs	r3, #4
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f18:	4a0c      	ldr	r2, [pc, #48]	@ (8009f4c <pxPortInitialiseStack+0x64>)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3b14      	subs	r3, #20
 8009f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3b04      	subs	r3, #4
 8009f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f06f 0202 	mvn.w	r2, #2
 8009f36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3b20      	subs	r3, #32
 8009f3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	08009f51 	.word	0x08009f51

08009f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f5a:	4b15      	ldr	r3, [pc, #84]	@ (8009fb0 <prvTaskExitError+0x60>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f62:	d00d      	beq.n	8009f80 <prvTaskExitError+0x30>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f68:	b672      	cpsid	i
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	b662      	cpsie	i
 8009f78:	60fb      	str	r3, [r7, #12]
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <prvTaskExitError+0x2c>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f84:	b672      	cpsid	i
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	b662      	cpsie	i
 8009f94:	60bb      	str	r3, [r7, #8]
}
 8009f96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f98:	bf00      	nop
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0fc      	beq.n	8009f9a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	20000064 	.word	0x20000064
	...

08009fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fc0:	4b07      	ldr	r3, [pc, #28]	@ (8009fe0 <pxCurrentTCBConst2>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	6808      	ldr	r0, [r1, #0]
 8009fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	f380 8809 	msr	PSP, r0
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8811 	msr	BASEPRI, r0
 8009fda:	4770      	bx	lr
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst2>:
 8009fe0:	20001238 	.word	0x20001238
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fe8:	4808      	ldr	r0, [pc, #32]	@ (800a00c <prvPortStartFirstTask+0x24>)
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	6800      	ldr	r0, [r0, #0]
 8009fee:	f380 8808 	msr	MSP, r0
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8814 	msr	CONTROL, r0
 8009ffa:	b662      	cpsie	i
 8009ffc:	b661      	cpsie	f
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	df00      	svc	0
 800a008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a00a:	bf00      	nop
 800a00c:	e000ed08 	.word	0xe000ed08

0800a010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a016:	4b37      	ldr	r3, [pc, #220]	@ (800a0f4 <xPortStartScheduler+0xe4>)
 800a018:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	22ff      	movs	r2, #255	@ 0xff
 800a026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	4b2f      	ldr	r3, [pc, #188]	@ (800a0f8 <xPortStartScheduler+0xe8>)
 800a03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a03e:	4b2f      	ldr	r3, [pc, #188]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a040:	2207      	movs	r2, #7
 800a042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a044:	e009      	b.n	800a05a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a046:	4b2d      	ldr	r3, [pc, #180]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	4a2b      	ldr	r2, [pc, #172]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a050:	78fb      	ldrb	r3, [r7, #3]
 800a052:	b2db      	uxtb	r3, r3
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	b2db      	uxtb	r3, r3
 800a058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a062:	2b80      	cmp	r3, #128	@ 0x80
 800a064:	d0ef      	beq.n	800a046 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a066:	4b25      	ldr	r3, [pc, #148]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f1c3 0307 	rsb	r3, r3, #7
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d00d      	beq.n	800a08e <xPortStartScheduler+0x7e>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	b672      	cpsid	i
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	b662      	cpsie	i
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	e7fd      	b.n	800a08a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a08e:	4b1b      	ldr	r3, [pc, #108]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	4a19      	ldr	r2, [pc, #100]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a098:	4b18      	ldr	r3, [pc, #96]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0a0:	4a16      	ldr	r2, [pc, #88]	@ (800a0fc <xPortStartScheduler+0xec>)
 800a0a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0ac:	4b14      	ldr	r3, [pc, #80]	@ (800a100 <xPortStartScheduler+0xf0>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a13      	ldr	r2, [pc, #76]	@ (800a100 <xPortStartScheduler+0xf0>)
 800a0b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0b8:	4b11      	ldr	r3, [pc, #68]	@ (800a100 <xPortStartScheduler+0xf0>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a10      	ldr	r2, [pc, #64]	@ (800a100 <xPortStartScheduler+0xf0>)
 800a0be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0c4:	f000 f8dc 	bl	800a280 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a104 <xPortStartScheduler+0xf4>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0ce:	f000 f8fb 	bl	800a2c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a108 <xPortStartScheduler+0xf8>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a108 <xPortStartScheduler+0xf8>)
 800a0d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0de:	f7ff ff83 	bl	8009fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0e2:	f7ff f827 	bl	8009134 <vTaskSwitchContext>
	prvTaskExitError();
 800a0e6:	f7ff ff33 	bl	8009f50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	e000e400 	.word	0xe000e400
 800a0f8:	20001864 	.word	0x20001864
 800a0fc:	20001868 	.word	0x20001868
 800a100:	e000ed20 	.word	0xe000ed20
 800a104:	20000064 	.word	0x20000064
 800a108:	e000ef34 	.word	0xe000ef34

0800a10c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	b672      	cpsid	i
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	b662      	cpsie	i
 800a126:	607b      	str	r3, [r7, #4]
}
 800a128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a12a:	4b11      	ldr	r3, [pc, #68]	@ (800a170 <vPortEnterCritical+0x64>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3301      	adds	r3, #1
 800a130:	4a0f      	ldr	r2, [pc, #60]	@ (800a170 <vPortEnterCritical+0x64>)
 800a132:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a134:	4b0e      	ldr	r3, [pc, #56]	@ (800a170 <vPortEnterCritical+0x64>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d112      	bne.n	800a162 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a13c:	4b0d      	ldr	r3, [pc, #52]	@ (800a174 <vPortEnterCritical+0x68>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00d      	beq.n	800a162 <vPortEnterCritical+0x56>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14a:	b672      	cpsid	i
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	b662      	cpsie	i
 800a15a:	603b      	str	r3, [r7, #0]
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <vPortEnterCritical+0x52>
	}
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20000064 	.word	0x20000064
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a17e:	4b13      	ldr	r3, [pc, #76]	@ (800a1cc <vPortExitCritical+0x54>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10d      	bne.n	800a1a2 <vPortExitCritical+0x2a>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	b672      	cpsid	i
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	b662      	cpsie	i
 800a19a:	607b      	str	r3, [r7, #4]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1cc <vPortExitCritical+0x54>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	4a08      	ldr	r2, [pc, #32]	@ (800a1cc <vPortExitCritical+0x54>)
 800a1aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1ac:	4b07      	ldr	r3, [pc, #28]	@ (800a1cc <vPortExitCritical+0x54>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d105      	bne.n	800a1c0 <vPortExitCritical+0x48>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	f383 8811 	msr	BASEPRI, r3
}
 800a1be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	20000064 	.word	0x20000064

0800a1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1d0:	f3ef 8009 	mrs	r0, PSP
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	4b15      	ldr	r3, [pc, #84]	@ (800a230 <pxCurrentTCBConst>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	f01e 0f10 	tst.w	lr, #16
 800a1e0:	bf08      	it	eq
 800a1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	6010      	str	r0, [r2, #0]
 800a1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a1f4:	b672      	cpsid	i
 800a1f6:	f380 8811 	msr	BASEPRI, r0
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	b662      	cpsie	i
 800a204:	f7fe ff96 	bl	8009134 <vTaskSwitchContext>
 800a208:	f04f 0000 	mov.w	r0, #0
 800a20c:	f380 8811 	msr	BASEPRI, r0
 800a210:	bc09      	pop	{r0, r3}
 800a212:	6819      	ldr	r1, [r3, #0]
 800a214:	6808      	ldr	r0, [r1, #0]
 800a216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21a:	f01e 0f10 	tst.w	lr, #16
 800a21e:	bf08      	it	eq
 800a220:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a224:	f380 8809 	msr	PSP, r0
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop

0800a230 <pxCurrentTCBConst>:
 800a230:	20001238 	.word	0x20001238
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop

0800a238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	b672      	cpsid	i
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	b662      	cpsie	i
 800a252:	607b      	str	r3, [r7, #4]
}
 800a254:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a256:	f7fe feb1 	bl	8008fbc <xTaskIncrementTick>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a260:	4b06      	ldr	r3, [pc, #24]	@ (800a27c <SysTick_Handler+0x44>)
 800a262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	2300      	movs	r3, #0
 800a26a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	f383 8811 	msr	BASEPRI, r3
}
 800a272:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	e000ed04 	.word	0xe000ed04

0800a280 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a284:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b4 <vPortSetupTimerInterrupt+0x34>)
 800a286:	2200      	movs	r2, #0
 800a288:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a28a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b8 <vPortSetupTimerInterrupt+0x38>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a290:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vPortSetupTimerInterrupt+0x3c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a0a      	ldr	r2, [pc, #40]	@ (800a2c0 <vPortSetupTimerInterrupt+0x40>)
 800a296:	fba2 2303 	umull	r2, r3, r2, r3
 800a29a:	099b      	lsrs	r3, r3, #6
 800a29c:	4a09      	ldr	r2, [pc, #36]	@ (800a2c4 <vPortSetupTimerInterrupt+0x44>)
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2a2:	4b04      	ldr	r3, [pc, #16]	@ (800a2b4 <vPortSetupTimerInterrupt+0x34>)
 800a2a4:	2207      	movs	r2, #7
 800a2a6:	601a      	str	r2, [r3, #0]
}
 800a2a8:	bf00      	nop
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	e000e010 	.word	0xe000e010
 800a2b8:	e000e018 	.word	0xe000e018
 800a2bc:	2000004c 	.word	0x2000004c
 800a2c0:	10624dd3 	.word	0x10624dd3
 800a2c4:	e000e014 	.word	0xe000e014

0800a2c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2d8 <vPortEnableVFP+0x10>
 800a2cc:	6801      	ldr	r1, [r0, #0]
 800a2ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2d2:	6001      	str	r1, [r0, #0]
 800a2d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2d6:	bf00      	nop
 800a2d8:	e000ed88 	.word	0xe000ed88

0800a2dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2e2:	f3ef 8305 	mrs	r3, IPSR
 800a2e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b0f      	cmp	r3, #15
 800a2ec:	d917      	bls.n	800a31e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a358 <vPortValidateInterruptPriority+0x7c>)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2f8:	4b18      	ldr	r3, [pc, #96]	@ (800a35c <vPortValidateInterruptPriority+0x80>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	7afa      	ldrb	r2, [r7, #11]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d20d      	bcs.n	800a31e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	b672      	cpsid	i
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	b662      	cpsie	i
 800a316:	607b      	str	r3, [r7, #4]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a31e:	4b10      	ldr	r3, [pc, #64]	@ (800a360 <vPortValidateInterruptPriority+0x84>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a326:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <vPortValidateInterruptPriority+0x88>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d90d      	bls.n	800a34a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	b672      	cpsid	i
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	b662      	cpsie	i
 800a342:	603b      	str	r3, [r7, #0]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <vPortValidateInterruptPriority+0x6a>
	}
 800a34a:	bf00      	nop
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	e000e3f0 	.word	0xe000e3f0
 800a35c:	20001864 	.word	0x20001864
 800a360:	e000ed0c 	.word	0xe000ed0c
 800a364:	20001868 	.word	0x20001868

0800a368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08a      	sub	sp, #40	@ 0x28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a370:	2300      	movs	r3, #0
 800a372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a374:	f7fe fd64 	bl	8008e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a378:	4b5d      	ldr	r3, [pc, #372]	@ (800a4f0 <pvPortMalloc+0x188>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a380:	f000 f920 	bl	800a5c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a384:	4b5b      	ldr	r3, [pc, #364]	@ (800a4f4 <pvPortMalloc+0x18c>)
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4013      	ands	r3, r2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 8094 	bne.w	800a4ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d020      	beq.n	800a3da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a398:	2208      	movs	r2, #8
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4413      	add	r3, r2
 800a39e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d017      	beq.n	800a3da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f023 0307 	bic.w	r3, r3, #7
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00d      	beq.n	800a3da <pvPortMalloc+0x72>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	b672      	cpsid	i
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	b662      	cpsie	i
 800a3d2:	617b      	str	r3, [r7, #20]
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	e7fd      	b.n	800a3d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d06c      	beq.n	800a4ba <pvPortMalloc+0x152>
 800a3e0:	4b45      	ldr	r3, [pc, #276]	@ (800a4f8 <pvPortMalloc+0x190>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d867      	bhi.n	800a4ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3ea:	4b44      	ldr	r3, [pc, #272]	@ (800a4fc <pvPortMalloc+0x194>)
 800a3ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3ee:	4b43      	ldr	r3, [pc, #268]	@ (800a4fc <pvPortMalloc+0x194>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3f4:	e004      	b.n	800a400 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	429a      	cmp	r2, r3
 800a408:	d903      	bls.n	800a412 <pvPortMalloc+0xaa>
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f1      	bne.n	800a3f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a412:	4b37      	ldr	r3, [pc, #220]	@ (800a4f0 <pvPortMalloc+0x188>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a418:	429a      	cmp	r2, r3
 800a41a:	d04e      	beq.n	800a4ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2208      	movs	r2, #8
 800a422:	4413      	add	r3, r2
 800a424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	1ad2      	subs	r2, r2, r3
 800a436:	2308      	movs	r3, #8
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d922      	bls.n	800a484 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4413      	add	r3, r2
 800a444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	f003 0307 	and.w	r3, r3, #7
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00d      	beq.n	800a46c <pvPortMalloc+0x104>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a454:	b672      	cpsid	i
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	b662      	cpsie	i
 800a464:	613b      	str	r3, [r7, #16]
}
 800a466:	bf00      	nop
 800a468:	bf00      	nop
 800a46a:	e7fd      	b.n	800a468 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	1ad2      	subs	r2, r2, r3
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a47e:	69b8      	ldr	r0, [r7, #24]
 800a480:	f000 f902 	bl	800a688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a484:	4b1c      	ldr	r3, [pc, #112]	@ (800a4f8 <pvPortMalloc+0x190>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4f8 <pvPortMalloc+0x190>)
 800a490:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a492:	4b19      	ldr	r3, [pc, #100]	@ (800a4f8 <pvPortMalloc+0x190>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	4b1a      	ldr	r3, [pc, #104]	@ (800a500 <pvPortMalloc+0x198>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d203      	bcs.n	800a4a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a49e:	4b16      	ldr	r3, [pc, #88]	@ (800a4f8 <pvPortMalloc+0x190>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a17      	ldr	r2, [pc, #92]	@ (800a500 <pvPortMalloc+0x198>)
 800a4a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	4b12      	ldr	r3, [pc, #72]	@ (800a4f4 <pvPortMalloc+0x18c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4ba:	f7fe fccf 	bl	8008e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	f003 0307 	and.w	r3, r3, #7
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00d      	beq.n	800a4e4 <pvPortMalloc+0x17c>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	b672      	cpsid	i
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	b662      	cpsie	i
 800a4dc:	60fb      	str	r3, [r7, #12]
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	e7fd      	b.n	800a4e0 <pvPortMalloc+0x178>
	return pvReturn;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3728      	adds	r7, #40	@ 0x28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20005474 	.word	0x20005474
 800a4f4:	20005480 	.word	0x20005480
 800a4f8:	20005478 	.word	0x20005478
 800a4fc:	2000546c 	.word	0x2000546c
 800a500:	2000547c 	.word	0x2000547c

0800a504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d04e      	beq.n	800a5b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a516:	2308      	movs	r3, #8
 800a518:	425b      	negs	r3, r3
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4413      	add	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	4b24      	ldr	r3, [pc, #144]	@ (800a5bc <vPortFree+0xb8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4013      	ands	r3, r2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10d      	bne.n	800a54e <vPortFree+0x4a>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a536:	b672      	cpsid	i
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	b662      	cpsie	i
 800a546:	60fb      	str	r3, [r7, #12]
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	e7fd      	b.n	800a54a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00d      	beq.n	800a572 <vPortFree+0x6e>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	b672      	cpsid	i
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	b662      	cpsie	i
 800a56a:	60bb      	str	r3, [r7, #8]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	4b11      	ldr	r3, [pc, #68]	@ (800a5bc <vPortFree+0xb8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4013      	ands	r3, r2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d019      	beq.n	800a5b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d115      	bne.n	800a5b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	4b0b      	ldr	r3, [pc, #44]	@ (800a5bc <vPortFree+0xb8>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	43db      	mvns	r3, r3
 800a592:	401a      	ands	r2, r3
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a598:	f7fe fc52 	bl	8008e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <vPortFree+0xbc>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	4a06      	ldr	r2, [pc, #24]	@ (800a5c0 <vPortFree+0xbc>)
 800a5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5aa:	6938      	ldr	r0, [r7, #16]
 800a5ac:	f000 f86c 	bl	800a688 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a5b0:	f7fe fc54 	bl	8008e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5b4:	bf00      	nop
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20005480 	.word	0x20005480
 800a5c0:	20005478 	.word	0x20005478

0800a5c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a5ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5d0:	4b27      	ldr	r3, [pc, #156]	@ (800a670 <prvHeapInit+0xac>)
 800a5d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00c      	beq.n	800a5f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3307      	adds	r3, #7
 800a5e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f023 0307 	bic.w	r3, r3, #7
 800a5ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a670 <prvHeapInit+0xac>)
 800a5f4:	4413      	add	r3, r2
 800a5f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a674 <prvHeapInit+0xb0>)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a602:	4b1c      	ldr	r3, [pc, #112]	@ (800a674 <prvHeapInit+0xb0>)
 800a604:	2200      	movs	r2, #0
 800a606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a610:	2208      	movs	r2, #8
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	1a9b      	subs	r3, r3, r2
 800a616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f023 0307 	bic.w	r3, r3, #7
 800a61e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4a15      	ldr	r2, [pc, #84]	@ (800a678 <prvHeapInit+0xb4>)
 800a624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a626:	4b14      	ldr	r3, [pc, #80]	@ (800a678 <prvHeapInit+0xb4>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2200      	movs	r2, #0
 800a62c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a62e:	4b12      	ldr	r3, [pc, #72]	@ (800a678 <prvHeapInit+0xb4>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	1ad2      	subs	r2, r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a644:	4b0c      	ldr	r3, [pc, #48]	@ (800a678 <prvHeapInit+0xb4>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	4a0a      	ldr	r2, [pc, #40]	@ (800a67c <prvHeapInit+0xb8>)
 800a652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	4a09      	ldr	r2, [pc, #36]	@ (800a680 <prvHeapInit+0xbc>)
 800a65a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a65c:	4b09      	ldr	r3, [pc, #36]	@ (800a684 <prvHeapInit+0xc0>)
 800a65e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a662:	601a      	str	r2, [r3, #0]
}
 800a664:	bf00      	nop
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	2000186c 	.word	0x2000186c
 800a674:	2000546c 	.word	0x2000546c
 800a678:	20005474 	.word	0x20005474
 800a67c:	2000547c 	.word	0x2000547c
 800a680:	20005478 	.word	0x20005478
 800a684:	20005480 	.word	0x20005480

0800a688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a690:	4b28      	ldr	r3, [pc, #160]	@ (800a734 <prvInsertBlockIntoFreeList+0xac>)
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	e002      	b.n	800a69c <prvInsertBlockIntoFreeList+0x14>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d8f7      	bhi.n	800a696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d108      	bne.n	800a6ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	441a      	add	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	441a      	add	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d118      	bne.n	800a710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	4b15      	ldr	r3, [pc, #84]	@ (800a738 <prvInsertBlockIntoFreeList+0xb0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d00d      	beq.n	800a706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	441a      	add	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	e008      	b.n	800a718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a706:	4b0c      	ldr	r3, [pc, #48]	@ (800a738 <prvInsertBlockIntoFreeList+0xb0>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e003      	b.n	800a718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d002      	beq.n	800a726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	2000546c 	.word	0x2000546c
 800a738:	20005474 	.word	0x20005474

0800a73c <__cvt>:
 800a73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73e:	ed2d 8b02 	vpush	{d8}
 800a742:	eeb0 8b40 	vmov.f64	d8, d0
 800a746:	b085      	sub	sp, #20
 800a748:	4617      	mov	r7, r2
 800a74a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a74c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a74e:	ee18 2a90 	vmov	r2, s17
 800a752:	f025 0520 	bic.w	r5, r5, #32
 800a756:	2a00      	cmp	r2, #0
 800a758:	bfb6      	itet	lt
 800a75a:	222d      	movlt	r2, #45	@ 0x2d
 800a75c:	2200      	movge	r2, #0
 800a75e:	eeb1 8b40 	vneglt.f64	d8, d0
 800a762:	2d46      	cmp	r5, #70	@ 0x46
 800a764:	460c      	mov	r4, r1
 800a766:	701a      	strb	r2, [r3, #0]
 800a768:	d004      	beq.n	800a774 <__cvt+0x38>
 800a76a:	2d45      	cmp	r5, #69	@ 0x45
 800a76c:	d100      	bne.n	800a770 <__cvt+0x34>
 800a76e:	3401      	adds	r4, #1
 800a770:	2102      	movs	r1, #2
 800a772:	e000      	b.n	800a776 <__cvt+0x3a>
 800a774:	2103      	movs	r1, #3
 800a776:	ab03      	add	r3, sp, #12
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	ab02      	add	r3, sp, #8
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	4622      	mov	r2, r4
 800a780:	4633      	mov	r3, r6
 800a782:	eeb0 0b48 	vmov.f64	d0, d8
 800a786:	f000 fe83 	bl	800b490 <_dtoa_r>
 800a78a:	2d47      	cmp	r5, #71	@ 0x47
 800a78c:	d114      	bne.n	800a7b8 <__cvt+0x7c>
 800a78e:	07fb      	lsls	r3, r7, #31
 800a790:	d50a      	bpl.n	800a7a8 <__cvt+0x6c>
 800a792:	1902      	adds	r2, r0, r4
 800a794:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79c:	bf08      	it	eq
 800a79e:	9203      	streq	r2, [sp, #12]
 800a7a0:	2130      	movs	r1, #48	@ 0x30
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d319      	bcc.n	800a7dc <__cvt+0xa0>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7ac:	1a1b      	subs	r3, r3, r0
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	b005      	add	sp, #20
 800a7b2:	ecbd 8b02 	vpop	{d8}
 800a7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7b8:	2d46      	cmp	r5, #70	@ 0x46
 800a7ba:	eb00 0204 	add.w	r2, r0, r4
 800a7be:	d1e9      	bne.n	800a794 <__cvt+0x58>
 800a7c0:	7803      	ldrb	r3, [r0, #0]
 800a7c2:	2b30      	cmp	r3, #48	@ 0x30
 800a7c4:	d107      	bne.n	800a7d6 <__cvt+0x9a>
 800a7c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ce:	bf1c      	itt	ne
 800a7d0:	f1c4 0401 	rsbne	r4, r4, #1
 800a7d4:	6034      	strne	r4, [r6, #0]
 800a7d6:	6833      	ldr	r3, [r6, #0]
 800a7d8:	441a      	add	r2, r3
 800a7da:	e7db      	b.n	800a794 <__cvt+0x58>
 800a7dc:	1c5c      	adds	r4, r3, #1
 800a7de:	9403      	str	r4, [sp, #12]
 800a7e0:	7019      	strb	r1, [r3, #0]
 800a7e2:	e7de      	b.n	800a7a2 <__cvt+0x66>

0800a7e4 <__exponent>:
 800a7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	bfba      	itte	lt
 800a7ea:	4249      	neglt	r1, r1
 800a7ec:	232d      	movlt	r3, #45	@ 0x2d
 800a7ee:	232b      	movge	r3, #43	@ 0x2b
 800a7f0:	2909      	cmp	r1, #9
 800a7f2:	7002      	strb	r2, [r0, #0]
 800a7f4:	7043      	strb	r3, [r0, #1]
 800a7f6:	dd29      	ble.n	800a84c <__exponent+0x68>
 800a7f8:	f10d 0307 	add.w	r3, sp, #7
 800a7fc:	461d      	mov	r5, r3
 800a7fe:	270a      	movs	r7, #10
 800a800:	461a      	mov	r2, r3
 800a802:	fbb1 f6f7 	udiv	r6, r1, r7
 800a806:	fb07 1416 	mls	r4, r7, r6, r1
 800a80a:	3430      	adds	r4, #48	@ 0x30
 800a80c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a810:	460c      	mov	r4, r1
 800a812:	2c63      	cmp	r4, #99	@ 0x63
 800a814:	f103 33ff 	add.w	r3, r3, #4294967295
 800a818:	4631      	mov	r1, r6
 800a81a:	dcf1      	bgt.n	800a800 <__exponent+0x1c>
 800a81c:	3130      	adds	r1, #48	@ 0x30
 800a81e:	1e94      	subs	r4, r2, #2
 800a820:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a824:	1c41      	adds	r1, r0, #1
 800a826:	4623      	mov	r3, r4
 800a828:	42ab      	cmp	r3, r5
 800a82a:	d30a      	bcc.n	800a842 <__exponent+0x5e>
 800a82c:	f10d 0309 	add.w	r3, sp, #9
 800a830:	1a9b      	subs	r3, r3, r2
 800a832:	42ac      	cmp	r4, r5
 800a834:	bf88      	it	hi
 800a836:	2300      	movhi	r3, #0
 800a838:	3302      	adds	r3, #2
 800a83a:	4403      	add	r3, r0
 800a83c:	1a18      	subs	r0, r3, r0
 800a83e:	b003      	add	sp, #12
 800a840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a842:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a846:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a84a:	e7ed      	b.n	800a828 <__exponent+0x44>
 800a84c:	2330      	movs	r3, #48	@ 0x30
 800a84e:	3130      	adds	r1, #48	@ 0x30
 800a850:	7083      	strb	r3, [r0, #2]
 800a852:	70c1      	strb	r1, [r0, #3]
 800a854:	1d03      	adds	r3, r0, #4
 800a856:	e7f1      	b.n	800a83c <__exponent+0x58>

0800a858 <_printf_float>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	b08d      	sub	sp, #52	@ 0x34
 800a85e:	460c      	mov	r4, r1
 800a860:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a864:	4616      	mov	r6, r2
 800a866:	461f      	mov	r7, r3
 800a868:	4605      	mov	r5, r0
 800a86a:	f000 fcab 	bl	800b1c4 <_localeconv_r>
 800a86e:	f8d0 b000 	ldr.w	fp, [r0]
 800a872:	4658      	mov	r0, fp
 800a874:	f7f5 fd34 	bl	80002e0 <strlen>
 800a878:	2300      	movs	r3, #0
 800a87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a87c:	f8d8 3000 	ldr.w	r3, [r8]
 800a880:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a884:	6822      	ldr	r2, [r4, #0]
 800a886:	9005      	str	r0, [sp, #20]
 800a888:	3307      	adds	r3, #7
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	f103 0108 	add.w	r1, r3, #8
 800a892:	f8c8 1000 	str.w	r1, [r8]
 800a896:	ed93 0b00 	vldr	d0, [r3]
 800a89a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aaf8 <_printf_float+0x2a0>
 800a89e:	eeb0 7bc0 	vabs.f64	d7, d0
 800a8a2:	eeb4 7b46 	vcmp.f64	d7, d6
 800a8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a8ae:	dd24      	ble.n	800a8fa <_printf_float+0xa2>
 800a8b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b8:	d502      	bpl.n	800a8c0 <_printf_float+0x68>
 800a8ba:	232d      	movs	r3, #45	@ 0x2d
 800a8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8c0:	498f      	ldr	r1, [pc, #572]	@ (800ab00 <_printf_float+0x2a8>)
 800a8c2:	4b90      	ldr	r3, [pc, #576]	@ (800ab04 <_printf_float+0x2ac>)
 800a8c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a8c8:	bf94      	ite	ls
 800a8ca:	4688      	movls	r8, r1
 800a8cc:	4698      	movhi	r8, r3
 800a8ce:	f022 0204 	bic.w	r2, r2, #4
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	6123      	str	r3, [r4, #16]
 800a8d6:	6022      	str	r2, [r4, #0]
 800a8d8:	f04f 0a00 	mov.w	sl, #0
 800a8dc:	9700      	str	r7, [sp, #0]
 800a8de:	4633      	mov	r3, r6
 800a8e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f000 f9d1 	bl	800ac8c <_printf_common>
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	f040 8089 	bne.w	800aa02 <_printf_float+0x1aa>
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	b00d      	add	sp, #52	@ 0x34
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	eeb4 0b40 	vcmp.f64	d0, d0
 800a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a902:	d709      	bvc.n	800a918 <_printf_float+0xc0>
 800a904:	ee10 3a90 	vmov	r3, s1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bfbc      	itt	lt
 800a90c:	232d      	movlt	r3, #45	@ 0x2d
 800a90e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a912:	497d      	ldr	r1, [pc, #500]	@ (800ab08 <_printf_float+0x2b0>)
 800a914:	4b7d      	ldr	r3, [pc, #500]	@ (800ab0c <_printf_float+0x2b4>)
 800a916:	e7d5      	b.n	800a8c4 <_printf_float+0x6c>
 800a918:	6863      	ldr	r3, [r4, #4]
 800a91a:	1c59      	adds	r1, r3, #1
 800a91c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a920:	d139      	bne.n	800a996 <_printf_float+0x13e>
 800a922:	2306      	movs	r3, #6
 800a924:	6063      	str	r3, [r4, #4]
 800a926:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a92a:	2300      	movs	r3, #0
 800a92c:	6022      	str	r2, [r4, #0]
 800a92e:	9303      	str	r3, [sp, #12]
 800a930:	ab0a      	add	r3, sp, #40	@ 0x28
 800a932:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a936:	ab09      	add	r3, sp, #36	@ 0x24
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	6861      	ldr	r1, [r4, #4]
 800a93c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a940:	4628      	mov	r0, r5
 800a942:	f7ff fefb 	bl	800a73c <__cvt>
 800a946:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a94a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a94c:	4680      	mov	r8, r0
 800a94e:	d129      	bne.n	800a9a4 <_printf_float+0x14c>
 800a950:	1cc8      	adds	r0, r1, #3
 800a952:	db02      	blt.n	800a95a <_printf_float+0x102>
 800a954:	6863      	ldr	r3, [r4, #4]
 800a956:	4299      	cmp	r1, r3
 800a958:	dd41      	ble.n	800a9de <_printf_float+0x186>
 800a95a:	f1a9 0902 	sub.w	r9, r9, #2
 800a95e:	fa5f f989 	uxtb.w	r9, r9
 800a962:	3901      	subs	r1, #1
 800a964:	464a      	mov	r2, r9
 800a966:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a96a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a96c:	f7ff ff3a 	bl	800a7e4 <__exponent>
 800a970:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a972:	1813      	adds	r3, r2, r0
 800a974:	2a01      	cmp	r2, #1
 800a976:	4682      	mov	sl, r0
 800a978:	6123      	str	r3, [r4, #16]
 800a97a:	dc02      	bgt.n	800a982 <_printf_float+0x12a>
 800a97c:	6822      	ldr	r2, [r4, #0]
 800a97e:	07d2      	lsls	r2, r2, #31
 800a980:	d501      	bpl.n	800a986 <_printf_float+0x12e>
 800a982:	3301      	adds	r3, #1
 800a984:	6123      	str	r3, [r4, #16]
 800a986:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0a6      	beq.n	800a8dc <_printf_float+0x84>
 800a98e:	232d      	movs	r3, #45	@ 0x2d
 800a990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a994:	e7a2      	b.n	800a8dc <_printf_float+0x84>
 800a996:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a99a:	d1c4      	bne.n	800a926 <_printf_float+0xce>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1c2      	bne.n	800a926 <_printf_float+0xce>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7bf      	b.n	800a924 <_printf_float+0xcc>
 800a9a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a9a8:	d9db      	bls.n	800a962 <_printf_float+0x10a>
 800a9aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a9ae:	d118      	bne.n	800a9e2 <_printf_float+0x18a>
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	6863      	ldr	r3, [r4, #4]
 800a9b4:	dd0b      	ble.n	800a9ce <_printf_float+0x176>
 800a9b6:	6121      	str	r1, [r4, #16]
 800a9b8:	b913      	cbnz	r3, 800a9c0 <_printf_float+0x168>
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	07d0      	lsls	r0, r2, #31
 800a9be:	d502      	bpl.n	800a9c6 <_printf_float+0x16e>
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	440b      	add	r3, r1
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a9c8:	f04f 0a00 	mov.w	sl, #0
 800a9cc:	e7db      	b.n	800a986 <_printf_float+0x12e>
 800a9ce:	b913      	cbnz	r3, 800a9d6 <_printf_float+0x17e>
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	07d2      	lsls	r2, r2, #31
 800a9d4:	d501      	bpl.n	800a9da <_printf_float+0x182>
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	e7f4      	b.n	800a9c4 <_printf_float+0x16c>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e7f2      	b.n	800a9c4 <_printf_float+0x16c>
 800a9de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a9e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9e4:	4299      	cmp	r1, r3
 800a9e6:	db05      	blt.n	800a9f4 <_printf_float+0x19c>
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	6121      	str	r1, [r4, #16]
 800a9ec:	07d8      	lsls	r0, r3, #31
 800a9ee:	d5ea      	bpl.n	800a9c6 <_printf_float+0x16e>
 800a9f0:	1c4b      	adds	r3, r1, #1
 800a9f2:	e7e7      	b.n	800a9c4 <_printf_float+0x16c>
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	bfd4      	ite	le
 800a9f8:	f1c1 0202 	rsble	r2, r1, #2
 800a9fc:	2201      	movgt	r2, #1
 800a9fe:	4413      	add	r3, r2
 800aa00:	e7e0      	b.n	800a9c4 <_printf_float+0x16c>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	055a      	lsls	r2, r3, #21
 800aa06:	d407      	bmi.n	800aa18 <_printf_float+0x1c0>
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b8      	blx	r7
 800aa12:	3001      	adds	r0, #1
 800aa14:	d12a      	bne.n	800aa6c <_printf_float+0x214>
 800aa16:	e76b      	b.n	800a8f0 <_printf_float+0x98>
 800aa18:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800aa1c:	f240 80e0 	bls.w	800abe0 <_printf_float+0x388>
 800aa20:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aa24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2c:	d133      	bne.n	800aa96 <_printf_float+0x23e>
 800aa2e:	4a38      	ldr	r2, [pc, #224]	@ (800ab10 <_printf_float+0x2b8>)
 800aa30:	2301      	movs	r3, #1
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b8      	blx	r7
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f43f af59 	beq.w	800a8f0 <_printf_float+0x98>
 800aa3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa42:	4543      	cmp	r3, r8
 800aa44:	db02      	blt.n	800aa4c <_printf_float+0x1f4>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	07d8      	lsls	r0, r3, #31
 800aa4a:	d50f      	bpl.n	800aa6c <_printf_float+0x214>
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	465a      	mov	r2, fp
 800aa50:	4631      	mov	r1, r6
 800aa52:	4628      	mov	r0, r5
 800aa54:	47b8      	blx	r7
 800aa56:	3001      	adds	r0, #1
 800aa58:	f43f af4a 	beq.w	800a8f0 <_printf_float+0x98>
 800aa5c:	f04f 0900 	mov.w	r9, #0
 800aa60:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa64:	f104 0a1a 	add.w	sl, r4, #26
 800aa68:	45c8      	cmp	r8, r9
 800aa6a:	dc09      	bgt.n	800aa80 <_printf_float+0x228>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	079b      	lsls	r3, r3, #30
 800aa70:	f100 8107 	bmi.w	800ac82 <_printf_float+0x42a>
 800aa74:	68e0      	ldr	r0, [r4, #12]
 800aa76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa78:	4298      	cmp	r0, r3
 800aa7a:	bfb8      	it	lt
 800aa7c:	4618      	movlt	r0, r3
 800aa7e:	e739      	b.n	800a8f4 <_printf_float+0x9c>
 800aa80:	2301      	movs	r3, #1
 800aa82:	4652      	mov	r2, sl
 800aa84:	4631      	mov	r1, r6
 800aa86:	4628      	mov	r0, r5
 800aa88:	47b8      	blx	r7
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	f43f af30 	beq.w	800a8f0 <_printf_float+0x98>
 800aa90:	f109 0901 	add.w	r9, r9, #1
 800aa94:	e7e8      	b.n	800aa68 <_printf_float+0x210>
 800aa96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc3b      	bgt.n	800ab14 <_printf_float+0x2bc>
 800aa9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ab10 <_printf_float+0x2b8>)
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f43f af22 	beq.w	800a8f0 <_printf_float+0x98>
 800aaac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aab0:	ea59 0303 	orrs.w	r3, r9, r3
 800aab4:	d102      	bne.n	800aabc <_printf_float+0x264>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	07d9      	lsls	r1, r3, #31
 800aaba:	d5d7      	bpl.n	800aa6c <_printf_float+0x214>
 800aabc:	9b05      	ldr	r3, [sp, #20]
 800aabe:	465a      	mov	r2, fp
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f af12 	beq.w	800a8f0 <_printf_float+0x98>
 800aacc:	f04f 0a00 	mov.w	sl, #0
 800aad0:	f104 0b1a 	add.w	fp, r4, #26
 800aad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad6:	425b      	negs	r3, r3
 800aad8:	4553      	cmp	r3, sl
 800aada:	dc01      	bgt.n	800aae0 <_printf_float+0x288>
 800aadc:	464b      	mov	r3, r9
 800aade:	e794      	b.n	800aa0a <_printf_float+0x1b2>
 800aae0:	2301      	movs	r3, #1
 800aae2:	465a      	mov	r2, fp
 800aae4:	4631      	mov	r1, r6
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	f43f af00 	beq.w	800a8f0 <_printf_float+0x98>
 800aaf0:	f10a 0a01 	add.w	sl, sl, #1
 800aaf4:	e7ee      	b.n	800aad4 <_printf_float+0x27c>
 800aaf6:	bf00      	nop
 800aaf8:	ffffffff 	.word	0xffffffff
 800aafc:	7fefffff 	.word	0x7fefffff
 800ab00:	0800d664 	.word	0x0800d664
 800ab04:	0800d668 	.word	0x0800d668
 800ab08:	0800d66c 	.word	0x0800d66c
 800ab0c:	0800d670 	.word	0x0800d670
 800ab10:	0800d674 	.word	0x0800d674
 800ab14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab1a:	4553      	cmp	r3, sl
 800ab1c:	bfa8      	it	ge
 800ab1e:	4653      	movge	r3, sl
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	4699      	mov	r9, r3
 800ab24:	dc37      	bgt.n	800ab96 <_printf_float+0x33e>
 800ab26:	2300      	movs	r3, #0
 800ab28:	9307      	str	r3, [sp, #28]
 800ab2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab2e:	f104 021a 	add.w	r2, r4, #26
 800ab32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab34:	9907      	ldr	r1, [sp, #28]
 800ab36:	9306      	str	r3, [sp, #24]
 800ab38:	eba3 0309 	sub.w	r3, r3, r9
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	dc31      	bgt.n	800aba4 <_printf_float+0x34c>
 800ab40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab42:	459a      	cmp	sl, r3
 800ab44:	dc3b      	bgt.n	800abbe <_printf_float+0x366>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	07da      	lsls	r2, r3, #31
 800ab4a:	d438      	bmi.n	800abbe <_printf_float+0x366>
 800ab4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab4e:	ebaa 0903 	sub.w	r9, sl, r3
 800ab52:	9b06      	ldr	r3, [sp, #24]
 800ab54:	ebaa 0303 	sub.w	r3, sl, r3
 800ab58:	4599      	cmp	r9, r3
 800ab5a:	bfa8      	it	ge
 800ab5c:	4699      	movge	r9, r3
 800ab5e:	f1b9 0f00 	cmp.w	r9, #0
 800ab62:	dc34      	bgt.n	800abce <_printf_float+0x376>
 800ab64:	f04f 0800 	mov.w	r8, #0
 800ab68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab6c:	f104 0b1a 	add.w	fp, r4, #26
 800ab70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab72:	ebaa 0303 	sub.w	r3, sl, r3
 800ab76:	eba3 0309 	sub.w	r3, r3, r9
 800ab7a:	4543      	cmp	r3, r8
 800ab7c:	f77f af76 	ble.w	800aa6c <_printf_float+0x214>
 800ab80:	2301      	movs	r3, #1
 800ab82:	465a      	mov	r2, fp
 800ab84:	4631      	mov	r1, r6
 800ab86:	4628      	mov	r0, r5
 800ab88:	47b8      	blx	r7
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	f43f aeb0 	beq.w	800a8f0 <_printf_float+0x98>
 800ab90:	f108 0801 	add.w	r8, r8, #1
 800ab94:	e7ec      	b.n	800ab70 <_printf_float+0x318>
 800ab96:	4642      	mov	r2, r8
 800ab98:	4631      	mov	r1, r6
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	47b8      	blx	r7
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d1c1      	bne.n	800ab26 <_printf_float+0x2ce>
 800aba2:	e6a5      	b.n	800a8f0 <_printf_float+0x98>
 800aba4:	2301      	movs	r3, #1
 800aba6:	4631      	mov	r1, r6
 800aba8:	4628      	mov	r0, r5
 800abaa:	9206      	str	r2, [sp, #24]
 800abac:	47b8      	blx	r7
 800abae:	3001      	adds	r0, #1
 800abb0:	f43f ae9e 	beq.w	800a8f0 <_printf_float+0x98>
 800abb4:	9b07      	ldr	r3, [sp, #28]
 800abb6:	9a06      	ldr	r2, [sp, #24]
 800abb8:	3301      	adds	r3, #1
 800abba:	9307      	str	r3, [sp, #28]
 800abbc:	e7b9      	b.n	800ab32 <_printf_float+0x2da>
 800abbe:	9b05      	ldr	r3, [sp, #20]
 800abc0:	465a      	mov	r2, fp
 800abc2:	4631      	mov	r1, r6
 800abc4:	4628      	mov	r0, r5
 800abc6:	47b8      	blx	r7
 800abc8:	3001      	adds	r0, #1
 800abca:	d1bf      	bne.n	800ab4c <_printf_float+0x2f4>
 800abcc:	e690      	b.n	800a8f0 <_printf_float+0x98>
 800abce:	9a06      	ldr	r2, [sp, #24]
 800abd0:	464b      	mov	r3, r9
 800abd2:	4442      	add	r2, r8
 800abd4:	4631      	mov	r1, r6
 800abd6:	4628      	mov	r0, r5
 800abd8:	47b8      	blx	r7
 800abda:	3001      	adds	r0, #1
 800abdc:	d1c2      	bne.n	800ab64 <_printf_float+0x30c>
 800abde:	e687      	b.n	800a8f0 <_printf_float+0x98>
 800abe0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800abe4:	f1b9 0f01 	cmp.w	r9, #1
 800abe8:	dc01      	bgt.n	800abee <_printf_float+0x396>
 800abea:	07db      	lsls	r3, r3, #31
 800abec:	d536      	bpl.n	800ac5c <_printf_float+0x404>
 800abee:	2301      	movs	r3, #1
 800abf0:	4642      	mov	r2, r8
 800abf2:	4631      	mov	r1, r6
 800abf4:	4628      	mov	r0, r5
 800abf6:	47b8      	blx	r7
 800abf8:	3001      	adds	r0, #1
 800abfa:	f43f ae79 	beq.w	800a8f0 <_printf_float+0x98>
 800abfe:	9b05      	ldr	r3, [sp, #20]
 800ac00:	465a      	mov	r2, fp
 800ac02:	4631      	mov	r1, r6
 800ac04:	4628      	mov	r0, r5
 800ac06:	47b8      	blx	r7
 800ac08:	3001      	adds	r0, #1
 800ac0a:	f43f ae71 	beq.w	800a8f0 <_printf_float+0x98>
 800ac0e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ac12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac1e:	d018      	beq.n	800ac52 <_printf_float+0x3fa>
 800ac20:	464b      	mov	r3, r9
 800ac22:	f108 0201 	add.w	r2, r8, #1
 800ac26:	4631      	mov	r1, r6
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b8      	blx	r7
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d10c      	bne.n	800ac4a <_printf_float+0x3f2>
 800ac30:	e65e      	b.n	800a8f0 <_printf_float+0x98>
 800ac32:	2301      	movs	r3, #1
 800ac34:	465a      	mov	r2, fp
 800ac36:	4631      	mov	r1, r6
 800ac38:	4628      	mov	r0, r5
 800ac3a:	47b8      	blx	r7
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f43f ae57 	beq.w	800a8f0 <_printf_float+0x98>
 800ac42:	f108 0801 	add.w	r8, r8, #1
 800ac46:	45c8      	cmp	r8, r9
 800ac48:	dbf3      	blt.n	800ac32 <_printf_float+0x3da>
 800ac4a:	4653      	mov	r3, sl
 800ac4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac50:	e6dc      	b.n	800aa0c <_printf_float+0x1b4>
 800ac52:	f04f 0800 	mov.w	r8, #0
 800ac56:	f104 0b1a 	add.w	fp, r4, #26
 800ac5a:	e7f4      	b.n	800ac46 <_printf_float+0x3ee>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	4642      	mov	r2, r8
 800ac60:	e7e1      	b.n	800ac26 <_printf_float+0x3ce>
 800ac62:	2301      	movs	r3, #1
 800ac64:	464a      	mov	r2, r9
 800ac66:	4631      	mov	r1, r6
 800ac68:	4628      	mov	r0, r5
 800ac6a:	47b8      	blx	r7
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	f43f ae3f 	beq.w	800a8f0 <_printf_float+0x98>
 800ac72:	f108 0801 	add.w	r8, r8, #1
 800ac76:	68e3      	ldr	r3, [r4, #12]
 800ac78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac7a:	1a5b      	subs	r3, r3, r1
 800ac7c:	4543      	cmp	r3, r8
 800ac7e:	dcf0      	bgt.n	800ac62 <_printf_float+0x40a>
 800ac80:	e6f8      	b.n	800aa74 <_printf_float+0x21c>
 800ac82:	f04f 0800 	mov.w	r8, #0
 800ac86:	f104 0919 	add.w	r9, r4, #25
 800ac8a:	e7f4      	b.n	800ac76 <_printf_float+0x41e>

0800ac8c <_printf_common>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	4616      	mov	r6, r2
 800ac92:	4698      	mov	r8, r3
 800ac94:	688a      	ldr	r2, [r1, #8]
 800ac96:	690b      	ldr	r3, [r1, #16]
 800ac98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	bfb8      	it	lt
 800aca0:	4613      	movlt	r3, r2
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aca8:	4607      	mov	r7, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	b10a      	cbz	r2, 800acb2 <_printf_common+0x26>
 800acae:	3301      	adds	r3, #1
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	0699      	lsls	r1, r3, #26
 800acb6:	bf42      	ittt	mi
 800acb8:	6833      	ldrmi	r3, [r6, #0]
 800acba:	3302      	addmi	r3, #2
 800acbc:	6033      	strmi	r3, [r6, #0]
 800acbe:	6825      	ldr	r5, [r4, #0]
 800acc0:	f015 0506 	ands.w	r5, r5, #6
 800acc4:	d106      	bne.n	800acd4 <_printf_common+0x48>
 800acc6:	f104 0a19 	add.w	sl, r4, #25
 800acca:	68e3      	ldr	r3, [r4, #12]
 800accc:	6832      	ldr	r2, [r6, #0]
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	42ab      	cmp	r3, r5
 800acd2:	dc26      	bgt.n	800ad22 <_printf_common+0x96>
 800acd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acd8:	6822      	ldr	r2, [r4, #0]
 800acda:	3b00      	subs	r3, #0
 800acdc:	bf18      	it	ne
 800acde:	2301      	movne	r3, #1
 800ace0:	0692      	lsls	r2, r2, #26
 800ace2:	d42b      	bmi.n	800ad3c <_printf_common+0xb0>
 800ace4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ace8:	4641      	mov	r1, r8
 800acea:	4638      	mov	r0, r7
 800acec:	47c8      	blx	r9
 800acee:	3001      	adds	r0, #1
 800acf0:	d01e      	beq.n	800ad30 <_printf_common+0xa4>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	6922      	ldr	r2, [r4, #16]
 800acf6:	f003 0306 	and.w	r3, r3, #6
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	bf02      	ittt	eq
 800acfe:	68e5      	ldreq	r5, [r4, #12]
 800ad00:	6833      	ldreq	r3, [r6, #0]
 800ad02:	1aed      	subeq	r5, r5, r3
 800ad04:	68a3      	ldr	r3, [r4, #8]
 800ad06:	bf0c      	ite	eq
 800ad08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad0c:	2500      	movne	r5, #0
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	bfc4      	itt	gt
 800ad12:	1a9b      	subgt	r3, r3, r2
 800ad14:	18ed      	addgt	r5, r5, r3
 800ad16:	2600      	movs	r6, #0
 800ad18:	341a      	adds	r4, #26
 800ad1a:	42b5      	cmp	r5, r6
 800ad1c:	d11a      	bne.n	800ad54 <_printf_common+0xc8>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	e008      	b.n	800ad34 <_printf_common+0xa8>
 800ad22:	2301      	movs	r3, #1
 800ad24:	4652      	mov	r2, sl
 800ad26:	4641      	mov	r1, r8
 800ad28:	4638      	mov	r0, r7
 800ad2a:	47c8      	blx	r9
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d103      	bne.n	800ad38 <_printf_common+0xac>
 800ad30:	f04f 30ff 	mov.w	r0, #4294967295
 800ad34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad38:	3501      	adds	r5, #1
 800ad3a:	e7c6      	b.n	800acca <_printf_common+0x3e>
 800ad3c:	18e1      	adds	r1, r4, r3
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	2030      	movs	r0, #48	@ 0x30
 800ad42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad46:	4422      	add	r2, r4
 800ad48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad50:	3302      	adds	r3, #2
 800ad52:	e7c7      	b.n	800ace4 <_printf_common+0x58>
 800ad54:	2301      	movs	r3, #1
 800ad56:	4622      	mov	r2, r4
 800ad58:	4641      	mov	r1, r8
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	47c8      	blx	r9
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d0e6      	beq.n	800ad30 <_printf_common+0xa4>
 800ad62:	3601      	adds	r6, #1
 800ad64:	e7d9      	b.n	800ad1a <_printf_common+0x8e>
	...

0800ad68 <_printf_i>:
 800ad68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6c:	7e0f      	ldrb	r7, [r1, #24]
 800ad6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad70:	2f78      	cmp	r7, #120	@ 0x78
 800ad72:	4691      	mov	r9, r2
 800ad74:	4680      	mov	r8, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	469a      	mov	sl, r3
 800ad7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad7e:	d807      	bhi.n	800ad90 <_printf_i+0x28>
 800ad80:	2f62      	cmp	r7, #98	@ 0x62
 800ad82:	d80a      	bhi.n	800ad9a <_printf_i+0x32>
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	f000 80d2 	beq.w	800af2e <_printf_i+0x1c6>
 800ad8a:	2f58      	cmp	r7, #88	@ 0x58
 800ad8c:	f000 80b9 	beq.w	800af02 <_printf_i+0x19a>
 800ad90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad98:	e03a      	b.n	800ae10 <_printf_i+0xa8>
 800ad9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad9e:	2b15      	cmp	r3, #21
 800ada0:	d8f6      	bhi.n	800ad90 <_printf_i+0x28>
 800ada2:	a101      	add	r1, pc, #4	@ (adr r1, 800ada8 <_printf_i+0x40>)
 800ada4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ada8:	0800ae01 	.word	0x0800ae01
 800adac:	0800ae15 	.word	0x0800ae15
 800adb0:	0800ad91 	.word	0x0800ad91
 800adb4:	0800ad91 	.word	0x0800ad91
 800adb8:	0800ad91 	.word	0x0800ad91
 800adbc:	0800ad91 	.word	0x0800ad91
 800adc0:	0800ae15 	.word	0x0800ae15
 800adc4:	0800ad91 	.word	0x0800ad91
 800adc8:	0800ad91 	.word	0x0800ad91
 800adcc:	0800ad91 	.word	0x0800ad91
 800add0:	0800ad91 	.word	0x0800ad91
 800add4:	0800af15 	.word	0x0800af15
 800add8:	0800ae3f 	.word	0x0800ae3f
 800addc:	0800aecf 	.word	0x0800aecf
 800ade0:	0800ad91 	.word	0x0800ad91
 800ade4:	0800ad91 	.word	0x0800ad91
 800ade8:	0800af37 	.word	0x0800af37
 800adec:	0800ad91 	.word	0x0800ad91
 800adf0:	0800ae3f 	.word	0x0800ae3f
 800adf4:	0800ad91 	.word	0x0800ad91
 800adf8:	0800ad91 	.word	0x0800ad91
 800adfc:	0800aed7 	.word	0x0800aed7
 800ae00:	6833      	ldr	r3, [r6, #0]
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6032      	str	r2, [r6, #0]
 800ae08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae10:	2301      	movs	r3, #1
 800ae12:	e09d      	b.n	800af50 <_printf_i+0x1e8>
 800ae14:	6833      	ldr	r3, [r6, #0]
 800ae16:	6820      	ldr	r0, [r4, #0]
 800ae18:	1d19      	adds	r1, r3, #4
 800ae1a:	6031      	str	r1, [r6, #0]
 800ae1c:	0606      	lsls	r6, r0, #24
 800ae1e:	d501      	bpl.n	800ae24 <_printf_i+0xbc>
 800ae20:	681d      	ldr	r5, [r3, #0]
 800ae22:	e003      	b.n	800ae2c <_printf_i+0xc4>
 800ae24:	0645      	lsls	r5, r0, #25
 800ae26:	d5fb      	bpl.n	800ae20 <_printf_i+0xb8>
 800ae28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae2c:	2d00      	cmp	r5, #0
 800ae2e:	da03      	bge.n	800ae38 <_printf_i+0xd0>
 800ae30:	232d      	movs	r3, #45	@ 0x2d
 800ae32:	426d      	negs	r5, r5
 800ae34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae38:	4859      	ldr	r0, [pc, #356]	@ (800afa0 <_printf_i+0x238>)
 800ae3a:	230a      	movs	r3, #10
 800ae3c:	e011      	b.n	800ae62 <_printf_i+0xfa>
 800ae3e:	6821      	ldr	r1, [r4, #0]
 800ae40:	6833      	ldr	r3, [r6, #0]
 800ae42:	0608      	lsls	r0, r1, #24
 800ae44:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae48:	d402      	bmi.n	800ae50 <_printf_i+0xe8>
 800ae4a:	0649      	lsls	r1, r1, #25
 800ae4c:	bf48      	it	mi
 800ae4e:	b2ad      	uxthmi	r5, r5
 800ae50:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae52:	4853      	ldr	r0, [pc, #332]	@ (800afa0 <_printf_i+0x238>)
 800ae54:	6033      	str	r3, [r6, #0]
 800ae56:	bf14      	ite	ne
 800ae58:	230a      	movne	r3, #10
 800ae5a:	2308      	moveq	r3, #8
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae62:	6866      	ldr	r6, [r4, #4]
 800ae64:	60a6      	str	r6, [r4, #8]
 800ae66:	2e00      	cmp	r6, #0
 800ae68:	bfa2      	ittt	ge
 800ae6a:	6821      	ldrge	r1, [r4, #0]
 800ae6c:	f021 0104 	bicge.w	r1, r1, #4
 800ae70:	6021      	strge	r1, [r4, #0]
 800ae72:	b90d      	cbnz	r5, 800ae78 <_printf_i+0x110>
 800ae74:	2e00      	cmp	r6, #0
 800ae76:	d04b      	beq.n	800af10 <_printf_i+0x1a8>
 800ae78:	4616      	mov	r6, r2
 800ae7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae7e:	fb03 5711 	mls	r7, r3, r1, r5
 800ae82:	5dc7      	ldrb	r7, [r0, r7]
 800ae84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae88:	462f      	mov	r7, r5
 800ae8a:	42bb      	cmp	r3, r7
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	d9f4      	bls.n	800ae7a <_printf_i+0x112>
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d10b      	bne.n	800aeac <_printf_i+0x144>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	07df      	lsls	r7, r3, #31
 800ae98:	d508      	bpl.n	800aeac <_printf_i+0x144>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	bfde      	ittt	le
 800aea2:	2330      	movle	r3, #48	@ 0x30
 800aea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aeac:	1b92      	subs	r2, r2, r6
 800aeae:	6122      	str	r2, [r4, #16]
 800aeb0:	f8cd a000 	str.w	sl, [sp]
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	aa03      	add	r2, sp, #12
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4640      	mov	r0, r8
 800aebc:	f7ff fee6 	bl	800ac8c <_printf_common>
 800aec0:	3001      	adds	r0, #1
 800aec2:	d14a      	bne.n	800af5a <_printf_i+0x1f2>
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	b004      	add	sp, #16
 800aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	f043 0320 	orr.w	r3, r3, #32
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	4833      	ldr	r0, [pc, #204]	@ (800afa4 <_printf_i+0x23c>)
 800aed8:	2778      	movs	r7, #120	@ 0x78
 800aeda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	6831      	ldr	r1, [r6, #0]
 800aee2:	061f      	lsls	r7, r3, #24
 800aee4:	f851 5b04 	ldr.w	r5, [r1], #4
 800aee8:	d402      	bmi.n	800aef0 <_printf_i+0x188>
 800aeea:	065f      	lsls	r7, r3, #25
 800aeec:	bf48      	it	mi
 800aeee:	b2ad      	uxthmi	r5, r5
 800aef0:	6031      	str	r1, [r6, #0]
 800aef2:	07d9      	lsls	r1, r3, #31
 800aef4:	bf44      	itt	mi
 800aef6:	f043 0320 	orrmi.w	r3, r3, #32
 800aefa:	6023      	strmi	r3, [r4, #0]
 800aefc:	b11d      	cbz	r5, 800af06 <_printf_i+0x19e>
 800aefe:	2310      	movs	r3, #16
 800af00:	e7ac      	b.n	800ae5c <_printf_i+0xf4>
 800af02:	4827      	ldr	r0, [pc, #156]	@ (800afa0 <_printf_i+0x238>)
 800af04:	e7e9      	b.n	800aeda <_printf_i+0x172>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	f023 0320 	bic.w	r3, r3, #32
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	e7f6      	b.n	800aefe <_printf_i+0x196>
 800af10:	4616      	mov	r6, r2
 800af12:	e7bd      	b.n	800ae90 <_printf_i+0x128>
 800af14:	6833      	ldr	r3, [r6, #0]
 800af16:	6825      	ldr	r5, [r4, #0]
 800af18:	6961      	ldr	r1, [r4, #20]
 800af1a:	1d18      	adds	r0, r3, #4
 800af1c:	6030      	str	r0, [r6, #0]
 800af1e:	062e      	lsls	r6, r5, #24
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	d501      	bpl.n	800af28 <_printf_i+0x1c0>
 800af24:	6019      	str	r1, [r3, #0]
 800af26:	e002      	b.n	800af2e <_printf_i+0x1c6>
 800af28:	0668      	lsls	r0, r5, #25
 800af2a:	d5fb      	bpl.n	800af24 <_printf_i+0x1bc>
 800af2c:	8019      	strh	r1, [r3, #0]
 800af2e:	2300      	movs	r3, #0
 800af30:	6123      	str	r3, [r4, #16]
 800af32:	4616      	mov	r6, r2
 800af34:	e7bc      	b.n	800aeb0 <_printf_i+0x148>
 800af36:	6833      	ldr	r3, [r6, #0]
 800af38:	1d1a      	adds	r2, r3, #4
 800af3a:	6032      	str	r2, [r6, #0]
 800af3c:	681e      	ldr	r6, [r3, #0]
 800af3e:	6862      	ldr	r2, [r4, #4]
 800af40:	2100      	movs	r1, #0
 800af42:	4630      	mov	r0, r6
 800af44:	f7f5 f97c 	bl	8000240 <memchr>
 800af48:	b108      	cbz	r0, 800af4e <_printf_i+0x1e6>
 800af4a:	1b80      	subs	r0, r0, r6
 800af4c:	6060      	str	r0, [r4, #4]
 800af4e:	6863      	ldr	r3, [r4, #4]
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	2300      	movs	r3, #0
 800af54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af58:	e7aa      	b.n	800aeb0 <_printf_i+0x148>
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	4632      	mov	r2, r6
 800af5e:	4649      	mov	r1, r9
 800af60:	4640      	mov	r0, r8
 800af62:	47d0      	blx	sl
 800af64:	3001      	adds	r0, #1
 800af66:	d0ad      	beq.n	800aec4 <_printf_i+0x15c>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	079b      	lsls	r3, r3, #30
 800af6c:	d413      	bmi.n	800af96 <_printf_i+0x22e>
 800af6e:	68e0      	ldr	r0, [r4, #12]
 800af70:	9b03      	ldr	r3, [sp, #12]
 800af72:	4298      	cmp	r0, r3
 800af74:	bfb8      	it	lt
 800af76:	4618      	movlt	r0, r3
 800af78:	e7a6      	b.n	800aec8 <_printf_i+0x160>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4632      	mov	r2, r6
 800af7e:	4649      	mov	r1, r9
 800af80:	4640      	mov	r0, r8
 800af82:	47d0      	blx	sl
 800af84:	3001      	adds	r0, #1
 800af86:	d09d      	beq.n	800aec4 <_printf_i+0x15c>
 800af88:	3501      	adds	r5, #1
 800af8a:	68e3      	ldr	r3, [r4, #12]
 800af8c:	9903      	ldr	r1, [sp, #12]
 800af8e:	1a5b      	subs	r3, r3, r1
 800af90:	42ab      	cmp	r3, r5
 800af92:	dcf2      	bgt.n	800af7a <_printf_i+0x212>
 800af94:	e7eb      	b.n	800af6e <_printf_i+0x206>
 800af96:	2500      	movs	r5, #0
 800af98:	f104 0619 	add.w	r6, r4, #25
 800af9c:	e7f5      	b.n	800af8a <_printf_i+0x222>
 800af9e:	bf00      	nop
 800afa0:	0800d676 	.word	0x0800d676
 800afa4:	0800d687 	.word	0x0800d687

0800afa8 <std>:
 800afa8:	2300      	movs	r3, #0
 800afaa:	b510      	push	{r4, lr}
 800afac:	4604      	mov	r4, r0
 800afae:	e9c0 3300 	strd	r3, r3, [r0]
 800afb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afb6:	6083      	str	r3, [r0, #8]
 800afb8:	8181      	strh	r1, [r0, #12]
 800afba:	6643      	str	r3, [r0, #100]	@ 0x64
 800afbc:	81c2      	strh	r2, [r0, #14]
 800afbe:	6183      	str	r3, [r0, #24]
 800afc0:	4619      	mov	r1, r3
 800afc2:	2208      	movs	r2, #8
 800afc4:	305c      	adds	r0, #92	@ 0x5c
 800afc6:	f000 f8f4 	bl	800b1b2 <memset>
 800afca:	4b0d      	ldr	r3, [pc, #52]	@ (800b000 <std+0x58>)
 800afcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800afce:	4b0d      	ldr	r3, [pc, #52]	@ (800b004 <std+0x5c>)
 800afd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afd2:	4b0d      	ldr	r3, [pc, #52]	@ (800b008 <std+0x60>)
 800afd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afd6:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <std+0x64>)
 800afd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800afda:	4b0d      	ldr	r3, [pc, #52]	@ (800b010 <std+0x68>)
 800afdc:	6224      	str	r4, [r4, #32]
 800afde:	429c      	cmp	r4, r3
 800afe0:	d006      	beq.n	800aff0 <std+0x48>
 800afe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afe6:	4294      	cmp	r4, r2
 800afe8:	d002      	beq.n	800aff0 <std+0x48>
 800afea:	33d0      	adds	r3, #208	@ 0xd0
 800afec:	429c      	cmp	r4, r3
 800afee:	d105      	bne.n	800affc <std+0x54>
 800aff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff8:	f000 b9ae 	b.w	800b358 <__retarget_lock_init_recursive>
 800affc:	bd10      	pop	{r4, pc}
 800affe:	bf00      	nop
 800b000:	0800b12d 	.word	0x0800b12d
 800b004:	0800b14f 	.word	0x0800b14f
 800b008:	0800b187 	.word	0x0800b187
 800b00c:	0800b1ab 	.word	0x0800b1ab
 800b010:	20005484 	.word	0x20005484

0800b014 <stdio_exit_handler>:
 800b014:	4a02      	ldr	r2, [pc, #8]	@ (800b020 <stdio_exit_handler+0xc>)
 800b016:	4903      	ldr	r1, [pc, #12]	@ (800b024 <stdio_exit_handler+0x10>)
 800b018:	4803      	ldr	r0, [pc, #12]	@ (800b028 <stdio_exit_handler+0x14>)
 800b01a:	f000 b869 	b.w	800b0f0 <_fwalk_sglue>
 800b01e:	bf00      	nop
 800b020:	20000068 	.word	0x20000068
 800b024:	0800c949 	.word	0x0800c949
 800b028:	20000078 	.word	0x20000078

0800b02c <cleanup_stdio>:
 800b02c:	6841      	ldr	r1, [r0, #4]
 800b02e:	4b0c      	ldr	r3, [pc, #48]	@ (800b060 <cleanup_stdio+0x34>)
 800b030:	4299      	cmp	r1, r3
 800b032:	b510      	push	{r4, lr}
 800b034:	4604      	mov	r4, r0
 800b036:	d001      	beq.n	800b03c <cleanup_stdio+0x10>
 800b038:	f001 fc86 	bl	800c948 <_fflush_r>
 800b03c:	68a1      	ldr	r1, [r4, #8]
 800b03e:	4b09      	ldr	r3, [pc, #36]	@ (800b064 <cleanup_stdio+0x38>)
 800b040:	4299      	cmp	r1, r3
 800b042:	d002      	beq.n	800b04a <cleanup_stdio+0x1e>
 800b044:	4620      	mov	r0, r4
 800b046:	f001 fc7f 	bl	800c948 <_fflush_r>
 800b04a:	68e1      	ldr	r1, [r4, #12]
 800b04c:	4b06      	ldr	r3, [pc, #24]	@ (800b068 <cleanup_stdio+0x3c>)
 800b04e:	4299      	cmp	r1, r3
 800b050:	d004      	beq.n	800b05c <cleanup_stdio+0x30>
 800b052:	4620      	mov	r0, r4
 800b054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b058:	f001 bc76 	b.w	800c948 <_fflush_r>
 800b05c:	bd10      	pop	{r4, pc}
 800b05e:	bf00      	nop
 800b060:	20005484 	.word	0x20005484
 800b064:	200054ec 	.word	0x200054ec
 800b068:	20005554 	.word	0x20005554

0800b06c <global_stdio_init.part.0>:
 800b06c:	b510      	push	{r4, lr}
 800b06e:	4b0b      	ldr	r3, [pc, #44]	@ (800b09c <global_stdio_init.part.0+0x30>)
 800b070:	4c0b      	ldr	r4, [pc, #44]	@ (800b0a0 <global_stdio_init.part.0+0x34>)
 800b072:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a4 <global_stdio_init.part.0+0x38>)
 800b074:	601a      	str	r2, [r3, #0]
 800b076:	4620      	mov	r0, r4
 800b078:	2200      	movs	r2, #0
 800b07a:	2104      	movs	r1, #4
 800b07c:	f7ff ff94 	bl	800afa8 <std>
 800b080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b084:	2201      	movs	r2, #1
 800b086:	2109      	movs	r1, #9
 800b088:	f7ff ff8e 	bl	800afa8 <std>
 800b08c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b090:	2202      	movs	r2, #2
 800b092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b096:	2112      	movs	r1, #18
 800b098:	f7ff bf86 	b.w	800afa8 <std>
 800b09c:	200055bc 	.word	0x200055bc
 800b0a0:	20005484 	.word	0x20005484
 800b0a4:	0800b015 	.word	0x0800b015

0800b0a8 <__sfp_lock_acquire>:
 800b0a8:	4801      	ldr	r0, [pc, #4]	@ (800b0b0 <__sfp_lock_acquire+0x8>)
 800b0aa:	f000 b956 	b.w	800b35a <__retarget_lock_acquire_recursive>
 800b0ae:	bf00      	nop
 800b0b0:	200055c5 	.word	0x200055c5

0800b0b4 <__sfp_lock_release>:
 800b0b4:	4801      	ldr	r0, [pc, #4]	@ (800b0bc <__sfp_lock_release+0x8>)
 800b0b6:	f000 b951 	b.w	800b35c <__retarget_lock_release_recursive>
 800b0ba:	bf00      	nop
 800b0bc:	200055c5 	.word	0x200055c5

0800b0c0 <__sinit>:
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	f7ff fff0 	bl	800b0a8 <__sfp_lock_acquire>
 800b0c8:	6a23      	ldr	r3, [r4, #32]
 800b0ca:	b11b      	cbz	r3, 800b0d4 <__sinit+0x14>
 800b0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d0:	f7ff bff0 	b.w	800b0b4 <__sfp_lock_release>
 800b0d4:	4b04      	ldr	r3, [pc, #16]	@ (800b0e8 <__sinit+0x28>)
 800b0d6:	6223      	str	r3, [r4, #32]
 800b0d8:	4b04      	ldr	r3, [pc, #16]	@ (800b0ec <__sinit+0x2c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f5      	bne.n	800b0cc <__sinit+0xc>
 800b0e0:	f7ff ffc4 	bl	800b06c <global_stdio_init.part.0>
 800b0e4:	e7f2      	b.n	800b0cc <__sinit+0xc>
 800b0e6:	bf00      	nop
 800b0e8:	0800b02d 	.word	0x0800b02d
 800b0ec:	200055bc 	.word	0x200055bc

0800b0f0 <_fwalk_sglue>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	4688      	mov	r8, r1
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	2600      	movs	r6, #0
 800b0fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b100:	f1b9 0901 	subs.w	r9, r9, #1
 800b104:	d505      	bpl.n	800b112 <_fwalk_sglue+0x22>
 800b106:	6824      	ldr	r4, [r4, #0]
 800b108:	2c00      	cmp	r4, #0
 800b10a:	d1f7      	bne.n	800b0fc <_fwalk_sglue+0xc>
 800b10c:	4630      	mov	r0, r6
 800b10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b112:	89ab      	ldrh	r3, [r5, #12]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d907      	bls.n	800b128 <_fwalk_sglue+0x38>
 800b118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b11c:	3301      	adds	r3, #1
 800b11e:	d003      	beq.n	800b128 <_fwalk_sglue+0x38>
 800b120:	4629      	mov	r1, r5
 800b122:	4638      	mov	r0, r7
 800b124:	47c0      	blx	r8
 800b126:	4306      	orrs	r6, r0
 800b128:	3568      	adds	r5, #104	@ 0x68
 800b12a:	e7e9      	b.n	800b100 <_fwalk_sglue+0x10>

0800b12c <__sread>:
 800b12c:	b510      	push	{r4, lr}
 800b12e:	460c      	mov	r4, r1
 800b130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b134:	f000 f8c2 	bl	800b2bc <_read_r>
 800b138:	2800      	cmp	r0, #0
 800b13a:	bfab      	itete	ge
 800b13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b13e:	89a3      	ldrhlt	r3, [r4, #12]
 800b140:	181b      	addge	r3, r3, r0
 800b142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b146:	bfac      	ite	ge
 800b148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b14a:	81a3      	strhlt	r3, [r4, #12]
 800b14c:	bd10      	pop	{r4, pc}

0800b14e <__swrite>:
 800b14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b152:	461f      	mov	r7, r3
 800b154:	898b      	ldrh	r3, [r1, #12]
 800b156:	05db      	lsls	r3, r3, #23
 800b158:	4605      	mov	r5, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	4616      	mov	r6, r2
 800b15e:	d505      	bpl.n	800b16c <__swrite+0x1e>
 800b160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b164:	2302      	movs	r3, #2
 800b166:	2200      	movs	r2, #0
 800b168:	f000 f896 	bl	800b298 <_lseek_r>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	4632      	mov	r2, r6
 800b17a:	463b      	mov	r3, r7
 800b17c:	4628      	mov	r0, r5
 800b17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b182:	f000 b8ad 	b.w	800b2e0 <_write_r>

0800b186 <__sseek>:
 800b186:	b510      	push	{r4, lr}
 800b188:	460c      	mov	r4, r1
 800b18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b18e:	f000 f883 	bl	800b298 <_lseek_r>
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	bf15      	itete	ne
 800b198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1a2:	81a3      	strheq	r3, [r4, #12]
 800b1a4:	bf18      	it	ne
 800b1a6:	81a3      	strhne	r3, [r4, #12]
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <__sclose>:
 800b1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ae:	f000 b80d 	b.w	800b1cc <_close_r>

0800b1b2 <memset>:
 800b1b2:	4402      	add	r2, r0
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d100      	bne.n	800b1bc <memset+0xa>
 800b1ba:	4770      	bx	lr
 800b1bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c0:	e7f9      	b.n	800b1b6 <memset+0x4>
	...

0800b1c4 <_localeconv_r>:
 800b1c4:	4800      	ldr	r0, [pc, #0]	@ (800b1c8 <_localeconv_r+0x4>)
 800b1c6:	4770      	bx	lr
 800b1c8:	200001b4 	.word	0x200001b4

0800b1cc <_close_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4d06      	ldr	r5, [pc, #24]	@ (800b1e8 <_close_r+0x1c>)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	602b      	str	r3, [r5, #0]
 800b1d8:	f7f7 fce8 	bl	8002bac <_close>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_close_r+0x1a>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_close_r+0x1a>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	200055c0 	.word	0x200055c0

0800b1ec <_reclaim_reent>:
 800b1ec:	4b29      	ldr	r3, [pc, #164]	@ (800b294 <_reclaim_reent+0xa8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4283      	cmp	r3, r0
 800b1f2:	b570      	push	{r4, r5, r6, lr}
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	d04b      	beq.n	800b290 <_reclaim_reent+0xa4>
 800b1f8:	69c3      	ldr	r3, [r0, #28]
 800b1fa:	b1ab      	cbz	r3, 800b228 <_reclaim_reent+0x3c>
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	b16b      	cbz	r3, 800b21c <_reclaim_reent+0x30>
 800b200:	2500      	movs	r5, #0
 800b202:	69e3      	ldr	r3, [r4, #28]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	5959      	ldr	r1, [r3, r5]
 800b208:	2900      	cmp	r1, #0
 800b20a:	d13b      	bne.n	800b284 <_reclaim_reent+0x98>
 800b20c:	3504      	adds	r5, #4
 800b20e:	2d80      	cmp	r5, #128	@ 0x80
 800b210:	d1f7      	bne.n	800b202 <_reclaim_reent+0x16>
 800b212:	69e3      	ldr	r3, [r4, #28]
 800b214:	4620      	mov	r0, r4
 800b216:	68d9      	ldr	r1, [r3, #12]
 800b218:	f000 fe90 	bl	800bf3c <_free_r>
 800b21c:	69e3      	ldr	r3, [r4, #28]
 800b21e:	6819      	ldr	r1, [r3, #0]
 800b220:	b111      	cbz	r1, 800b228 <_reclaim_reent+0x3c>
 800b222:	4620      	mov	r0, r4
 800b224:	f000 fe8a 	bl	800bf3c <_free_r>
 800b228:	6961      	ldr	r1, [r4, #20]
 800b22a:	b111      	cbz	r1, 800b232 <_reclaim_reent+0x46>
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 fe85 	bl	800bf3c <_free_r>
 800b232:	69e1      	ldr	r1, [r4, #28]
 800b234:	b111      	cbz	r1, 800b23c <_reclaim_reent+0x50>
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fe80 	bl	800bf3c <_free_r>
 800b23c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b23e:	b111      	cbz	r1, 800b246 <_reclaim_reent+0x5a>
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fe7b 	bl	800bf3c <_free_r>
 800b246:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b248:	b111      	cbz	r1, 800b250 <_reclaim_reent+0x64>
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 fe76 	bl	800bf3c <_free_r>
 800b250:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b252:	b111      	cbz	r1, 800b25a <_reclaim_reent+0x6e>
 800b254:	4620      	mov	r0, r4
 800b256:	f000 fe71 	bl	800bf3c <_free_r>
 800b25a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b25c:	b111      	cbz	r1, 800b264 <_reclaim_reent+0x78>
 800b25e:	4620      	mov	r0, r4
 800b260:	f000 fe6c 	bl	800bf3c <_free_r>
 800b264:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b266:	b111      	cbz	r1, 800b26e <_reclaim_reent+0x82>
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fe67 	bl	800bf3c <_free_r>
 800b26e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b270:	b111      	cbz	r1, 800b278 <_reclaim_reent+0x8c>
 800b272:	4620      	mov	r0, r4
 800b274:	f000 fe62 	bl	800bf3c <_free_r>
 800b278:	6a23      	ldr	r3, [r4, #32]
 800b27a:	b14b      	cbz	r3, 800b290 <_reclaim_reent+0xa4>
 800b27c:	4620      	mov	r0, r4
 800b27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b282:	4718      	bx	r3
 800b284:	680e      	ldr	r6, [r1, #0]
 800b286:	4620      	mov	r0, r4
 800b288:	f000 fe58 	bl	800bf3c <_free_r>
 800b28c:	4631      	mov	r1, r6
 800b28e:	e7bb      	b.n	800b208 <_reclaim_reent+0x1c>
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	bf00      	nop
 800b294:	20000074 	.word	0x20000074

0800b298 <_lseek_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d07      	ldr	r5, [pc, #28]	@ (800b2b8 <_lseek_r+0x20>)
 800b29c:	4604      	mov	r4, r0
 800b29e:	4608      	mov	r0, r1
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	602a      	str	r2, [r5, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f7f7 fca7 	bl	8002bfa <_lseek>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_lseek_r+0x1e>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_lseek_r+0x1e>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	200055c0 	.word	0x200055c0

0800b2bc <_read_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d07      	ldr	r5, [pc, #28]	@ (800b2dc <_read_r+0x20>)
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	4608      	mov	r0, r1
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	602a      	str	r2, [r5, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	f7f7 fc35 	bl	8002b3a <_read>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_read_r+0x1e>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_read_r+0x1e>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	200055c0 	.word	0x200055c0

0800b2e0 <_write_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d07      	ldr	r5, [pc, #28]	@ (800b300 <_write_r+0x20>)
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	602a      	str	r2, [r5, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f7f7 fc40 	bl	8002b74 <_write>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_write_r+0x1e>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_write_r+0x1e>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	200055c0 	.word	0x200055c0

0800b304 <__errno>:
 800b304:	4b01      	ldr	r3, [pc, #4]	@ (800b30c <__errno+0x8>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20000074 	.word	0x20000074

0800b310 <__libc_init_array>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	4d0d      	ldr	r5, [pc, #52]	@ (800b348 <__libc_init_array+0x38>)
 800b314:	4c0d      	ldr	r4, [pc, #52]	@ (800b34c <__libc_init_array+0x3c>)
 800b316:	1b64      	subs	r4, r4, r5
 800b318:	10a4      	asrs	r4, r4, #2
 800b31a:	2600      	movs	r6, #0
 800b31c:	42a6      	cmp	r6, r4
 800b31e:	d109      	bne.n	800b334 <__libc_init_array+0x24>
 800b320:	4d0b      	ldr	r5, [pc, #44]	@ (800b350 <__libc_init_array+0x40>)
 800b322:	4c0c      	ldr	r4, [pc, #48]	@ (800b354 <__libc_init_array+0x44>)
 800b324:	f002 f948 	bl	800d5b8 <_init>
 800b328:	1b64      	subs	r4, r4, r5
 800b32a:	10a4      	asrs	r4, r4, #2
 800b32c:	2600      	movs	r6, #0
 800b32e:	42a6      	cmp	r6, r4
 800b330:	d105      	bne.n	800b33e <__libc_init_array+0x2e>
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	f855 3b04 	ldr.w	r3, [r5], #4
 800b338:	4798      	blx	r3
 800b33a:	3601      	adds	r6, #1
 800b33c:	e7ee      	b.n	800b31c <__libc_init_array+0xc>
 800b33e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b342:	4798      	blx	r3
 800b344:	3601      	adds	r6, #1
 800b346:	e7f2      	b.n	800b32e <__libc_init_array+0x1e>
 800b348:	0800f298 	.word	0x0800f298
 800b34c:	0800f298 	.word	0x0800f298
 800b350:	0800f298 	.word	0x0800f298
 800b354:	0800f29c 	.word	0x0800f29c

0800b358 <__retarget_lock_init_recursive>:
 800b358:	4770      	bx	lr

0800b35a <__retarget_lock_acquire_recursive>:
 800b35a:	4770      	bx	lr

0800b35c <__retarget_lock_release_recursive>:
 800b35c:	4770      	bx	lr

0800b35e <memcpy>:
 800b35e:	440a      	add	r2, r1
 800b360:	4291      	cmp	r1, r2
 800b362:	f100 33ff 	add.w	r3, r0, #4294967295
 800b366:	d100      	bne.n	800b36a <memcpy+0xc>
 800b368:	4770      	bx	lr
 800b36a:	b510      	push	{r4, lr}
 800b36c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b370:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b374:	4291      	cmp	r1, r2
 800b376:	d1f9      	bne.n	800b36c <memcpy+0xe>
 800b378:	bd10      	pop	{r4, pc}

0800b37a <quorem>:
 800b37a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37e:	6903      	ldr	r3, [r0, #16]
 800b380:	690c      	ldr	r4, [r1, #16]
 800b382:	42a3      	cmp	r3, r4
 800b384:	4607      	mov	r7, r0
 800b386:	db7e      	blt.n	800b486 <quorem+0x10c>
 800b388:	3c01      	subs	r4, #1
 800b38a:	f101 0814 	add.w	r8, r1, #20
 800b38e:	00a3      	lsls	r3, r4, #2
 800b390:	f100 0514 	add.w	r5, r0, #20
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3b0:	d32e      	bcc.n	800b410 <quorem+0x96>
 800b3b2:	f04f 0a00 	mov.w	sl, #0
 800b3b6:	46c4      	mov	ip, r8
 800b3b8:	46ae      	mov	lr, r5
 800b3ba:	46d3      	mov	fp, sl
 800b3bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3c0:	b298      	uxth	r0, r3
 800b3c2:	fb06 a000 	mla	r0, r6, r0, sl
 800b3c6:	0c02      	lsrs	r2, r0, #16
 800b3c8:	0c1b      	lsrs	r3, r3, #16
 800b3ca:	fb06 2303 	mla	r3, r6, r3, r2
 800b3ce:	f8de 2000 	ldr.w	r2, [lr]
 800b3d2:	b280      	uxth	r0, r0
 800b3d4:	b292      	uxth	r2, r2
 800b3d6:	1a12      	subs	r2, r2, r0
 800b3d8:	445a      	add	r2, fp
 800b3da:	f8de 0000 	ldr.w	r0, [lr]
 800b3de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b3e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b3ec:	b292      	uxth	r2, r2
 800b3ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b3f2:	45e1      	cmp	r9, ip
 800b3f4:	f84e 2b04 	str.w	r2, [lr], #4
 800b3f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b3fc:	d2de      	bcs.n	800b3bc <quorem+0x42>
 800b3fe:	9b00      	ldr	r3, [sp, #0]
 800b400:	58eb      	ldr	r3, [r5, r3]
 800b402:	b92b      	cbnz	r3, 800b410 <quorem+0x96>
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	3b04      	subs	r3, #4
 800b408:	429d      	cmp	r5, r3
 800b40a:	461a      	mov	r2, r3
 800b40c:	d32f      	bcc.n	800b46e <quorem+0xf4>
 800b40e:	613c      	str	r4, [r7, #16]
 800b410:	4638      	mov	r0, r7
 800b412:	f001 f90d 	bl	800c630 <__mcmp>
 800b416:	2800      	cmp	r0, #0
 800b418:	db25      	blt.n	800b466 <quorem+0xec>
 800b41a:	4629      	mov	r1, r5
 800b41c:	2000      	movs	r0, #0
 800b41e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b422:	f8d1 c000 	ldr.w	ip, [r1]
 800b426:	fa1f fe82 	uxth.w	lr, r2
 800b42a:	fa1f f38c 	uxth.w	r3, ip
 800b42e:	eba3 030e 	sub.w	r3, r3, lr
 800b432:	4403      	add	r3, r0
 800b434:	0c12      	lsrs	r2, r2, #16
 800b436:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b43a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b43e:	b29b      	uxth	r3, r3
 800b440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b444:	45c1      	cmp	r9, r8
 800b446:	f841 3b04 	str.w	r3, [r1], #4
 800b44a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b44e:	d2e6      	bcs.n	800b41e <quorem+0xa4>
 800b450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b458:	b922      	cbnz	r2, 800b464 <quorem+0xea>
 800b45a:	3b04      	subs	r3, #4
 800b45c:	429d      	cmp	r5, r3
 800b45e:	461a      	mov	r2, r3
 800b460:	d30b      	bcc.n	800b47a <quorem+0x100>
 800b462:	613c      	str	r4, [r7, #16]
 800b464:	3601      	adds	r6, #1
 800b466:	4630      	mov	r0, r6
 800b468:	b003      	add	sp, #12
 800b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46e:	6812      	ldr	r2, [r2, #0]
 800b470:	3b04      	subs	r3, #4
 800b472:	2a00      	cmp	r2, #0
 800b474:	d1cb      	bne.n	800b40e <quorem+0x94>
 800b476:	3c01      	subs	r4, #1
 800b478:	e7c6      	b.n	800b408 <quorem+0x8e>
 800b47a:	6812      	ldr	r2, [r2, #0]
 800b47c:	3b04      	subs	r3, #4
 800b47e:	2a00      	cmp	r2, #0
 800b480:	d1ef      	bne.n	800b462 <quorem+0xe8>
 800b482:	3c01      	subs	r4, #1
 800b484:	e7ea      	b.n	800b45c <quorem+0xe2>
 800b486:	2000      	movs	r0, #0
 800b488:	e7ee      	b.n	800b468 <quorem+0xee>
 800b48a:	0000      	movs	r0, r0
 800b48c:	0000      	movs	r0, r0
	...

0800b490 <_dtoa_r>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	ed2d 8b02 	vpush	{d8}
 800b498:	69c7      	ldr	r7, [r0, #28]
 800b49a:	b091      	sub	sp, #68	@ 0x44
 800b49c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b4a0:	ec55 4b10 	vmov	r4, r5, d0
 800b4a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b4a6:	9107      	str	r1, [sp, #28]
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4ac:	930d      	str	r3, [sp, #52]	@ 0x34
 800b4ae:	b97f      	cbnz	r7, 800b4d0 <_dtoa_r+0x40>
 800b4b0:	2010      	movs	r0, #16
 800b4b2:	f000 fd8d 	bl	800bfd0 <malloc>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	f8c9 001c 	str.w	r0, [r9, #28]
 800b4bc:	b920      	cbnz	r0, 800b4c8 <_dtoa_r+0x38>
 800b4be:	4ba0      	ldr	r3, [pc, #640]	@ (800b740 <_dtoa_r+0x2b0>)
 800b4c0:	21ef      	movs	r1, #239	@ 0xef
 800b4c2:	48a0      	ldr	r0, [pc, #640]	@ (800b744 <_dtoa_r+0x2b4>)
 800b4c4:	f001 fa78 	bl	800c9b8 <__assert_func>
 800b4c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b4cc:	6007      	str	r7, [r0, #0]
 800b4ce:	60c7      	str	r7, [r0, #12]
 800b4d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4d4:	6819      	ldr	r1, [r3, #0]
 800b4d6:	b159      	cbz	r1, 800b4f0 <_dtoa_r+0x60>
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	604a      	str	r2, [r1, #4]
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4093      	lsls	r3, r2
 800b4e0:	608b      	str	r3, [r1, #8]
 800b4e2:	4648      	mov	r0, r9
 800b4e4:	f000 fe6a 	bl	800c1bc <_Bfree>
 800b4e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	1e2b      	subs	r3, r5, #0
 800b4f2:	bfbb      	ittet	lt
 800b4f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b4f8:	9303      	strlt	r3, [sp, #12]
 800b4fa:	2300      	movge	r3, #0
 800b4fc:	2201      	movlt	r2, #1
 800b4fe:	bfac      	ite	ge
 800b500:	6033      	strge	r3, [r6, #0]
 800b502:	6032      	strlt	r2, [r6, #0]
 800b504:	4b90      	ldr	r3, [pc, #576]	@ (800b748 <_dtoa_r+0x2b8>)
 800b506:	9e03      	ldr	r6, [sp, #12]
 800b508:	43b3      	bics	r3, r6
 800b50a:	d110      	bne.n	800b52e <_dtoa_r+0x9e>
 800b50c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b50e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b518:	4323      	orrs	r3, r4
 800b51a:	f000 84de 	beq.w	800beda <_dtoa_r+0xa4a>
 800b51e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b520:	4f8a      	ldr	r7, [pc, #552]	@ (800b74c <_dtoa_r+0x2bc>)
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 84e0 	beq.w	800bee8 <_dtoa_r+0xa58>
 800b528:	1cfb      	adds	r3, r7, #3
 800b52a:	f000 bcdb 	b.w	800bee4 <_dtoa_r+0xa54>
 800b52e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b532:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53a:	d10a      	bne.n	800b552 <_dtoa_r+0xc2>
 800b53c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b53e:	2301      	movs	r3, #1
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b544:	b113      	cbz	r3, 800b54c <_dtoa_r+0xbc>
 800b546:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b548:	4b81      	ldr	r3, [pc, #516]	@ (800b750 <_dtoa_r+0x2c0>)
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	4f81      	ldr	r7, [pc, #516]	@ (800b754 <_dtoa_r+0x2c4>)
 800b54e:	f000 bccb 	b.w	800bee8 <_dtoa_r+0xa58>
 800b552:	aa0e      	add	r2, sp, #56	@ 0x38
 800b554:	a90f      	add	r1, sp, #60	@ 0x3c
 800b556:	4648      	mov	r0, r9
 800b558:	eeb0 0b48 	vmov.f64	d0, d8
 800b55c:	f001 f918 	bl	800c790 <__d2b>
 800b560:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b566:	9001      	str	r0, [sp, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d045      	beq.n	800b5f8 <_dtoa_r+0x168>
 800b56c:	eeb0 7b48 	vmov.f64	d7, d8
 800b570:	ee18 1a90 	vmov	r1, s17
 800b574:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b578:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b57c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b580:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b584:	2500      	movs	r5, #0
 800b586:	ee07 1a90 	vmov	s15, r1
 800b58a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b58e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b728 <_dtoa_r+0x298>
 800b592:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b596:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b730 <_dtoa_r+0x2a0>
 800b59a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b59e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b738 <_dtoa_r+0x2a8>
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b5aa:	eeb0 7b46 	vmov.f64	d7, d6
 800b5ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b5b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b5b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5be:	ee16 8a90 	vmov	r8, s13
 800b5c2:	d508      	bpl.n	800b5d6 <_dtoa_r+0x146>
 800b5c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b5c8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d0:	bf18      	it	ne
 800b5d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b5d6:	f1b8 0f16 	cmp.w	r8, #22
 800b5da:	d82b      	bhi.n	800b634 <_dtoa_r+0x1a4>
 800b5dc:	495e      	ldr	r1, [pc, #376]	@ (800b758 <_dtoa_r+0x2c8>)
 800b5de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b5e2:	ed91 7b00 	vldr	d7, [r1]
 800b5e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ee:	d501      	bpl.n	800b5f4 <_dtoa_r+0x164>
 800b5f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	e01e      	b.n	800b636 <_dtoa_r+0x1a6>
 800b5f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b600:	2920      	cmp	r1, #32
 800b602:	bfc1      	itttt	gt
 800b604:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b608:	408e      	lslgt	r6, r1
 800b60a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b60e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b612:	bfd6      	itet	le
 800b614:	f1c1 0120 	rsble	r1, r1, #32
 800b618:	4331      	orrgt	r1, r6
 800b61a:	fa04 f101 	lslle.w	r1, r4, r1
 800b61e:	ee07 1a90 	vmov	s15, r1
 800b622:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b626:	3b01      	subs	r3, #1
 800b628:	ee17 1a90 	vmov	r1, s15
 800b62c:	2501      	movs	r5, #1
 800b62e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b632:	e7a8      	b.n	800b586 <_dtoa_r+0xf6>
 800b634:	2101      	movs	r1, #1
 800b636:	1ad2      	subs	r2, r2, r3
 800b638:	1e53      	subs	r3, r2, #1
 800b63a:	9306      	str	r3, [sp, #24]
 800b63c:	bf45      	ittet	mi
 800b63e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b642:	9305      	strmi	r3, [sp, #20]
 800b644:	2300      	movpl	r3, #0
 800b646:	2300      	movmi	r3, #0
 800b648:	bf4c      	ite	mi
 800b64a:	9306      	strmi	r3, [sp, #24]
 800b64c:	9305      	strpl	r3, [sp, #20]
 800b64e:	f1b8 0f00 	cmp.w	r8, #0
 800b652:	910c      	str	r1, [sp, #48]	@ 0x30
 800b654:	db18      	blt.n	800b688 <_dtoa_r+0x1f8>
 800b656:	9b06      	ldr	r3, [sp, #24]
 800b658:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b65c:	4443      	add	r3, r8
 800b65e:	9306      	str	r3, [sp, #24]
 800b660:	2300      	movs	r3, #0
 800b662:	9a07      	ldr	r2, [sp, #28]
 800b664:	2a09      	cmp	r2, #9
 800b666:	d849      	bhi.n	800b6fc <_dtoa_r+0x26c>
 800b668:	2a05      	cmp	r2, #5
 800b66a:	bfc4      	itt	gt
 800b66c:	3a04      	subgt	r2, #4
 800b66e:	9207      	strgt	r2, [sp, #28]
 800b670:	9a07      	ldr	r2, [sp, #28]
 800b672:	f1a2 0202 	sub.w	r2, r2, #2
 800b676:	bfcc      	ite	gt
 800b678:	2400      	movgt	r4, #0
 800b67a:	2401      	movle	r4, #1
 800b67c:	2a03      	cmp	r2, #3
 800b67e:	d848      	bhi.n	800b712 <_dtoa_r+0x282>
 800b680:	e8df f002 	tbb	[pc, r2]
 800b684:	3a2c2e0b 	.word	0x3a2c2e0b
 800b688:	9b05      	ldr	r3, [sp, #20]
 800b68a:	2200      	movs	r2, #0
 800b68c:	eba3 0308 	sub.w	r3, r3, r8
 800b690:	9305      	str	r3, [sp, #20]
 800b692:	920a      	str	r2, [sp, #40]	@ 0x28
 800b694:	f1c8 0300 	rsb	r3, r8, #0
 800b698:	e7e3      	b.n	800b662 <_dtoa_r+0x1d2>
 800b69a:	2200      	movs	r2, #0
 800b69c:	9208      	str	r2, [sp, #32]
 800b69e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6a0:	2a00      	cmp	r2, #0
 800b6a2:	dc39      	bgt.n	800b718 <_dtoa_r+0x288>
 800b6a4:	f04f 0b01 	mov.w	fp, #1
 800b6a8:	46da      	mov	sl, fp
 800b6aa:	465a      	mov	r2, fp
 800b6ac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b6b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	2004      	movs	r0, #4
 800b6b8:	f100 0614 	add.w	r6, r0, #20
 800b6bc:	4296      	cmp	r6, r2
 800b6be:	d930      	bls.n	800b722 <_dtoa_r+0x292>
 800b6c0:	6079      	str	r1, [r7, #4]
 800b6c2:	4648      	mov	r0, r9
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	f000 fd39 	bl	800c13c <_Balloc>
 800b6ca:	9b04      	ldr	r3, [sp, #16]
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d146      	bne.n	800b760 <_dtoa_r+0x2d0>
 800b6d2:	4b22      	ldr	r3, [pc, #136]	@ (800b75c <_dtoa_r+0x2cc>)
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b6da:	e6f2      	b.n	800b4c2 <_dtoa_r+0x32>
 800b6dc:	2201      	movs	r2, #1
 800b6de:	e7dd      	b.n	800b69c <_dtoa_r+0x20c>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	9208      	str	r2, [sp, #32]
 800b6e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6e6:	eb08 0b02 	add.w	fp, r8, r2
 800b6ea:	f10b 0a01 	add.w	sl, fp, #1
 800b6ee:	4652      	mov	r2, sl
 800b6f0:	2a01      	cmp	r2, #1
 800b6f2:	bfb8      	it	lt
 800b6f4:	2201      	movlt	r2, #1
 800b6f6:	e7db      	b.n	800b6b0 <_dtoa_r+0x220>
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	e7f2      	b.n	800b6e2 <_dtoa_r+0x252>
 800b6fc:	2401      	movs	r4, #1
 800b6fe:	2200      	movs	r2, #0
 800b700:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b704:	f04f 3bff 	mov.w	fp, #4294967295
 800b708:	2100      	movs	r1, #0
 800b70a:	46da      	mov	sl, fp
 800b70c:	2212      	movs	r2, #18
 800b70e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b710:	e7ce      	b.n	800b6b0 <_dtoa_r+0x220>
 800b712:	2201      	movs	r2, #1
 800b714:	9208      	str	r2, [sp, #32]
 800b716:	e7f5      	b.n	800b704 <_dtoa_r+0x274>
 800b718:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b71c:	46da      	mov	sl, fp
 800b71e:	465a      	mov	r2, fp
 800b720:	e7c6      	b.n	800b6b0 <_dtoa_r+0x220>
 800b722:	3101      	adds	r1, #1
 800b724:	0040      	lsls	r0, r0, #1
 800b726:	e7c7      	b.n	800b6b8 <_dtoa_r+0x228>
 800b728:	636f4361 	.word	0x636f4361
 800b72c:	3fd287a7 	.word	0x3fd287a7
 800b730:	8b60c8b3 	.word	0x8b60c8b3
 800b734:	3fc68a28 	.word	0x3fc68a28
 800b738:	509f79fb 	.word	0x509f79fb
 800b73c:	3fd34413 	.word	0x3fd34413
 800b740:	0800d6a5 	.word	0x0800d6a5
 800b744:	0800d6bc 	.word	0x0800d6bc
 800b748:	7ff00000 	.word	0x7ff00000
 800b74c:	0800d6a1 	.word	0x0800d6a1
 800b750:	0800d675 	.word	0x0800d675
 800b754:	0800d674 	.word	0x0800d674
 800b758:	0800d7b8 	.word	0x0800d7b8
 800b75c:	0800d714 	.word	0x0800d714
 800b760:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b764:	f1ba 0f0e 	cmp.w	sl, #14
 800b768:	6010      	str	r0, [r2, #0]
 800b76a:	d86f      	bhi.n	800b84c <_dtoa_r+0x3bc>
 800b76c:	2c00      	cmp	r4, #0
 800b76e:	d06d      	beq.n	800b84c <_dtoa_r+0x3bc>
 800b770:	f1b8 0f00 	cmp.w	r8, #0
 800b774:	f340 80c2 	ble.w	800b8fc <_dtoa_r+0x46c>
 800b778:	4aca      	ldr	r2, [pc, #808]	@ (800baa4 <_dtoa_r+0x614>)
 800b77a:	f008 010f 	and.w	r1, r8, #15
 800b77e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b782:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b786:	ed92 7b00 	vldr	d7, [r2]
 800b78a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b78e:	f000 80a9 	beq.w	800b8e4 <_dtoa_r+0x454>
 800b792:	4ac5      	ldr	r2, [pc, #788]	@ (800baa8 <_dtoa_r+0x618>)
 800b794:	ed92 6b08 	vldr	d6, [r2, #32]
 800b798:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b79c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b7a0:	f001 010f 	and.w	r1, r1, #15
 800b7a4:	2203      	movs	r2, #3
 800b7a6:	48c0      	ldr	r0, [pc, #768]	@ (800baa8 <_dtoa_r+0x618>)
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	f040 809d 	bne.w	800b8e8 <_dtoa_r+0x458>
 800b7ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b7b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b7b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b7ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b7bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	f000 80c1 	beq.w	800b948 <_dtoa_r+0x4b8>
 800b7c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b7ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d2:	f140 80b9 	bpl.w	800b948 <_dtoa_r+0x4b8>
 800b7d6:	f1ba 0f00 	cmp.w	sl, #0
 800b7da:	f000 80b5 	beq.w	800b948 <_dtoa_r+0x4b8>
 800b7de:	f1bb 0f00 	cmp.w	fp, #0
 800b7e2:	dd31      	ble.n	800b848 <_dtoa_r+0x3b8>
 800b7e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b7e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b7f0:	f108 31ff 	add.w	r1, r8, #4294967295
 800b7f4:	9104      	str	r1, [sp, #16]
 800b7f6:	3201      	adds	r2, #1
 800b7f8:	465c      	mov	r4, fp
 800b7fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b7fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b802:	ee07 2a90 	vmov	s15, r2
 800b806:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b80a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b80e:	ee15 2a90 	vmov	r2, s11
 800b812:	ec51 0b15 	vmov	r0, r1, d5
 800b816:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b81a:	2c00      	cmp	r4, #0
 800b81c:	f040 8098 	bne.w	800b950 <_dtoa_r+0x4c0>
 800b820:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b824:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b828:	ec41 0b17 	vmov	d7, r0, r1
 800b82c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b834:	f300 8261 	bgt.w	800bcfa <_dtoa_r+0x86a>
 800b838:	eeb1 7b47 	vneg.f64	d7, d7
 800b83c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b844:	f100 80f5 	bmi.w	800ba32 <_dtoa_r+0x5a2>
 800b848:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b84c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b84e:	2a00      	cmp	r2, #0
 800b850:	f2c0 812c 	blt.w	800baac <_dtoa_r+0x61c>
 800b854:	f1b8 0f0e 	cmp.w	r8, #14
 800b858:	f300 8128 	bgt.w	800baac <_dtoa_r+0x61c>
 800b85c:	4b91      	ldr	r3, [pc, #580]	@ (800baa4 <_dtoa_r+0x614>)
 800b85e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b862:	ed93 6b00 	vldr	d6, [r3]
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	2b00      	cmp	r3, #0
 800b86a:	da03      	bge.n	800b874 <_dtoa_r+0x3e4>
 800b86c:	f1ba 0f00 	cmp.w	sl, #0
 800b870:	f340 80d2 	ble.w	800ba18 <_dtoa_r+0x588>
 800b874:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b878:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b87c:	463e      	mov	r6, r7
 800b87e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b882:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b886:	ee15 3a10 	vmov	r3, s10
 800b88a:	3330      	adds	r3, #48	@ 0x30
 800b88c:	f806 3b01 	strb.w	r3, [r6], #1
 800b890:	1bf3      	subs	r3, r6, r7
 800b892:	459a      	cmp	sl, r3
 800b894:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b898:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b89c:	f040 80f8 	bne.w	800ba90 <_dtoa_r+0x600>
 800b8a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b8a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ac:	f300 80dd 	bgt.w	800ba6a <_dtoa_r+0x5da>
 800b8b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800b8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b8:	d104      	bne.n	800b8c4 <_dtoa_r+0x434>
 800b8ba:	ee15 3a10 	vmov	r3, s10
 800b8be:	07db      	lsls	r3, r3, #31
 800b8c0:	f100 80d3 	bmi.w	800ba6a <_dtoa_r+0x5da>
 800b8c4:	9901      	ldr	r1, [sp, #4]
 800b8c6:	4648      	mov	r0, r9
 800b8c8:	f000 fc78 	bl	800c1bc <_Bfree>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8d0:	7033      	strb	r3, [r6, #0]
 800b8d2:	f108 0301 	add.w	r3, r8, #1
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 8304 	beq.w	800bee8 <_dtoa_r+0xa58>
 800b8e0:	601e      	str	r6, [r3, #0]
 800b8e2:	e301      	b.n	800bee8 <_dtoa_r+0xa58>
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	e75e      	b.n	800b7a6 <_dtoa_r+0x316>
 800b8e8:	07cc      	lsls	r4, r1, #31
 800b8ea:	d504      	bpl.n	800b8f6 <_dtoa_r+0x466>
 800b8ec:	ed90 6b00 	vldr	d6, [r0]
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8f6:	1049      	asrs	r1, r1, #1
 800b8f8:	3008      	adds	r0, #8
 800b8fa:	e755      	b.n	800b7a8 <_dtoa_r+0x318>
 800b8fc:	d022      	beq.n	800b944 <_dtoa_r+0x4b4>
 800b8fe:	f1c8 0100 	rsb	r1, r8, #0
 800b902:	4a68      	ldr	r2, [pc, #416]	@ (800baa4 <_dtoa_r+0x614>)
 800b904:	f001 000f 	and.w	r0, r1, #15
 800b908:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b90c:	ed92 7b00 	vldr	d7, [r2]
 800b910:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b914:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b918:	4863      	ldr	r0, [pc, #396]	@ (800baa8 <_dtoa_r+0x618>)
 800b91a:	1109      	asrs	r1, r1, #4
 800b91c:	2400      	movs	r4, #0
 800b91e:	2202      	movs	r2, #2
 800b920:	b929      	cbnz	r1, 800b92e <_dtoa_r+0x49e>
 800b922:	2c00      	cmp	r4, #0
 800b924:	f43f af49 	beq.w	800b7ba <_dtoa_r+0x32a>
 800b928:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b92c:	e745      	b.n	800b7ba <_dtoa_r+0x32a>
 800b92e:	07ce      	lsls	r6, r1, #31
 800b930:	d505      	bpl.n	800b93e <_dtoa_r+0x4ae>
 800b932:	ed90 6b00 	vldr	d6, [r0]
 800b936:	3201      	adds	r2, #1
 800b938:	2401      	movs	r4, #1
 800b93a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b93e:	1049      	asrs	r1, r1, #1
 800b940:	3008      	adds	r0, #8
 800b942:	e7ed      	b.n	800b920 <_dtoa_r+0x490>
 800b944:	2202      	movs	r2, #2
 800b946:	e738      	b.n	800b7ba <_dtoa_r+0x32a>
 800b948:	f8cd 8010 	str.w	r8, [sp, #16]
 800b94c:	4654      	mov	r4, sl
 800b94e:	e754      	b.n	800b7fa <_dtoa_r+0x36a>
 800b950:	4a54      	ldr	r2, [pc, #336]	@ (800baa4 <_dtoa_r+0x614>)
 800b952:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b956:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b95a:	9a08      	ldr	r2, [sp, #32]
 800b95c:	ec41 0b17 	vmov	d7, r0, r1
 800b960:	443c      	add	r4, r7
 800b962:	b34a      	cbz	r2, 800b9b8 <_dtoa_r+0x528>
 800b964:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b968:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b96c:	463e      	mov	r6, r7
 800b96e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b972:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b976:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b97a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b97e:	ee14 2a90 	vmov	r2, s9
 800b982:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b986:	3230      	adds	r2, #48	@ 0x30
 800b988:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b98c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b994:	f806 2b01 	strb.w	r2, [r6], #1
 800b998:	d438      	bmi.n	800ba0c <_dtoa_r+0x57c>
 800b99a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b99e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a6:	d462      	bmi.n	800ba6e <_dtoa_r+0x5de>
 800b9a8:	42a6      	cmp	r6, r4
 800b9aa:	f43f af4d 	beq.w	800b848 <_dtoa_r+0x3b8>
 800b9ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b9b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b9b6:	e7e0      	b.n	800b97a <_dtoa_r+0x4ea>
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	463e      	mov	r6, r7
 800b9bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b9c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b9c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b9c8:	ee14 2a90 	vmov	r2, s9
 800b9cc:	3230      	adds	r2, #48	@ 0x30
 800b9ce:	f806 2b01 	strb.w	r2, [r6], #1
 800b9d2:	42a6      	cmp	r6, r4
 800b9d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b9d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b9dc:	d119      	bne.n	800ba12 <_dtoa_r+0x582>
 800b9de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b9e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b9e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ee:	dc3e      	bgt.n	800ba6e <_dtoa_r+0x5de>
 800b9f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b9f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fc:	f57f af24 	bpl.w	800b848 <_dtoa_r+0x3b8>
 800ba00:	460e      	mov	r6, r1
 800ba02:	3901      	subs	r1, #1
 800ba04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba08:	2b30      	cmp	r3, #48	@ 0x30
 800ba0a:	d0f9      	beq.n	800ba00 <_dtoa_r+0x570>
 800ba0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba10:	e758      	b.n	800b8c4 <_dtoa_r+0x434>
 800ba12:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ba16:	e7d5      	b.n	800b9c4 <_dtoa_r+0x534>
 800ba18:	d10b      	bne.n	800ba32 <_dtoa_r+0x5a2>
 800ba1a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ba1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2e:	f2c0 8161 	blt.w	800bcf4 <_dtoa_r+0x864>
 800ba32:	2400      	movs	r4, #0
 800ba34:	4625      	mov	r5, r4
 800ba36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba38:	43db      	mvns	r3, r3
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	463e      	mov	r6, r7
 800ba3e:	f04f 0800 	mov.w	r8, #0
 800ba42:	4621      	mov	r1, r4
 800ba44:	4648      	mov	r0, r9
 800ba46:	f000 fbb9 	bl	800c1bc <_Bfree>
 800ba4a:	2d00      	cmp	r5, #0
 800ba4c:	d0de      	beq.n	800ba0c <_dtoa_r+0x57c>
 800ba4e:	f1b8 0f00 	cmp.w	r8, #0
 800ba52:	d005      	beq.n	800ba60 <_dtoa_r+0x5d0>
 800ba54:	45a8      	cmp	r8, r5
 800ba56:	d003      	beq.n	800ba60 <_dtoa_r+0x5d0>
 800ba58:	4641      	mov	r1, r8
 800ba5a:	4648      	mov	r0, r9
 800ba5c:	f000 fbae 	bl	800c1bc <_Bfree>
 800ba60:	4629      	mov	r1, r5
 800ba62:	4648      	mov	r0, r9
 800ba64:	f000 fbaa 	bl	800c1bc <_Bfree>
 800ba68:	e7d0      	b.n	800ba0c <_dtoa_r+0x57c>
 800ba6a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ba6e:	4633      	mov	r3, r6
 800ba70:	461e      	mov	r6, r3
 800ba72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba76:	2a39      	cmp	r2, #57	@ 0x39
 800ba78:	d106      	bne.n	800ba88 <_dtoa_r+0x5f8>
 800ba7a:	429f      	cmp	r7, r3
 800ba7c:	d1f8      	bne.n	800ba70 <_dtoa_r+0x5e0>
 800ba7e:	9a04      	ldr	r2, [sp, #16]
 800ba80:	3201      	adds	r2, #1
 800ba82:	9204      	str	r2, [sp, #16]
 800ba84:	2230      	movs	r2, #48	@ 0x30
 800ba86:	703a      	strb	r2, [r7, #0]
 800ba88:	781a      	ldrb	r2, [r3, #0]
 800ba8a:	3201      	adds	r2, #1
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	e7bd      	b.n	800ba0c <_dtoa_r+0x57c>
 800ba90:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ba94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9c:	f47f aeef 	bne.w	800b87e <_dtoa_r+0x3ee>
 800baa0:	e710      	b.n	800b8c4 <_dtoa_r+0x434>
 800baa2:	bf00      	nop
 800baa4:	0800d7b8 	.word	0x0800d7b8
 800baa8:	0800d790 	.word	0x0800d790
 800baac:	9908      	ldr	r1, [sp, #32]
 800baae:	2900      	cmp	r1, #0
 800bab0:	f000 80e3 	beq.w	800bc7a <_dtoa_r+0x7ea>
 800bab4:	9907      	ldr	r1, [sp, #28]
 800bab6:	2901      	cmp	r1, #1
 800bab8:	f300 80c8 	bgt.w	800bc4c <_dtoa_r+0x7bc>
 800babc:	2d00      	cmp	r5, #0
 800babe:	f000 80c1 	beq.w	800bc44 <_dtoa_r+0x7b4>
 800bac2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bac6:	9e05      	ldr	r6, [sp, #20]
 800bac8:	461c      	mov	r4, r3
 800baca:	9304      	str	r3, [sp, #16]
 800bacc:	9b05      	ldr	r3, [sp, #20]
 800bace:	4413      	add	r3, r2
 800bad0:	9305      	str	r3, [sp, #20]
 800bad2:	9b06      	ldr	r3, [sp, #24]
 800bad4:	2101      	movs	r1, #1
 800bad6:	4413      	add	r3, r2
 800bad8:	4648      	mov	r0, r9
 800bada:	9306      	str	r3, [sp, #24]
 800badc:	f000 fc22 	bl	800c324 <__i2b>
 800bae0:	9b04      	ldr	r3, [sp, #16]
 800bae2:	4605      	mov	r5, r0
 800bae4:	b166      	cbz	r6, 800bb00 <_dtoa_r+0x670>
 800bae6:	9a06      	ldr	r2, [sp, #24]
 800bae8:	2a00      	cmp	r2, #0
 800baea:	dd09      	ble.n	800bb00 <_dtoa_r+0x670>
 800baec:	42b2      	cmp	r2, r6
 800baee:	9905      	ldr	r1, [sp, #20]
 800baf0:	bfa8      	it	ge
 800baf2:	4632      	movge	r2, r6
 800baf4:	1a89      	subs	r1, r1, r2
 800baf6:	9105      	str	r1, [sp, #20]
 800baf8:	9906      	ldr	r1, [sp, #24]
 800bafa:	1ab6      	subs	r6, r6, r2
 800bafc:	1a8a      	subs	r2, r1, r2
 800bafe:	9206      	str	r2, [sp, #24]
 800bb00:	b1fb      	cbz	r3, 800bb42 <_dtoa_r+0x6b2>
 800bb02:	9a08      	ldr	r2, [sp, #32]
 800bb04:	2a00      	cmp	r2, #0
 800bb06:	f000 80bc 	beq.w	800bc82 <_dtoa_r+0x7f2>
 800bb0a:	b19c      	cbz	r4, 800bb34 <_dtoa_r+0x6a4>
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4622      	mov	r2, r4
 800bb10:	4648      	mov	r0, r9
 800bb12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb14:	f000 fcc6 	bl	800c4a4 <__pow5mult>
 800bb18:	9a01      	ldr	r2, [sp, #4]
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	4648      	mov	r0, r9
 800bb20:	f000 fc16 	bl	800c350 <__multiply>
 800bb24:	9901      	ldr	r1, [sp, #4]
 800bb26:	9004      	str	r0, [sp, #16]
 800bb28:	4648      	mov	r0, r9
 800bb2a:	f000 fb47 	bl	800c1bc <_Bfree>
 800bb2e:	9a04      	ldr	r2, [sp, #16]
 800bb30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb32:	9201      	str	r2, [sp, #4]
 800bb34:	1b1a      	subs	r2, r3, r4
 800bb36:	d004      	beq.n	800bb42 <_dtoa_r+0x6b2>
 800bb38:	9901      	ldr	r1, [sp, #4]
 800bb3a:	4648      	mov	r0, r9
 800bb3c:	f000 fcb2 	bl	800c4a4 <__pow5mult>
 800bb40:	9001      	str	r0, [sp, #4]
 800bb42:	2101      	movs	r1, #1
 800bb44:	4648      	mov	r0, r9
 800bb46:	f000 fbed 	bl	800c324 <__i2b>
 800bb4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f000 81d0 	beq.w	800bef4 <_dtoa_r+0xa64>
 800bb54:	461a      	mov	r2, r3
 800bb56:	4601      	mov	r1, r0
 800bb58:	4648      	mov	r0, r9
 800bb5a:	f000 fca3 	bl	800c4a4 <__pow5mult>
 800bb5e:	9b07      	ldr	r3, [sp, #28]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	4604      	mov	r4, r0
 800bb64:	f300 8095 	bgt.w	800bc92 <_dtoa_r+0x802>
 800bb68:	9b02      	ldr	r3, [sp, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f040 808b 	bne.w	800bc86 <_dtoa_r+0x7f6>
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bb76:	2a00      	cmp	r2, #0
 800bb78:	f040 8087 	bne.w	800bc8a <_dtoa_r+0x7fa>
 800bb7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bb80:	0d12      	lsrs	r2, r2, #20
 800bb82:	0512      	lsls	r2, r2, #20
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	f000 8082 	beq.w	800bc8e <_dtoa_r+0x7fe>
 800bb8a:	9b05      	ldr	r3, [sp, #20]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	9305      	str	r3, [sp, #20]
 800bb90:	9b06      	ldr	r3, [sp, #24]
 800bb92:	3301      	adds	r3, #1
 800bb94:	9306      	str	r3, [sp, #24]
 800bb96:	2301      	movs	r3, #1
 800bb98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 81af 	beq.w	800bf00 <_dtoa_r+0xa70>
 800bba2:	6922      	ldr	r2, [r4, #16]
 800bba4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bba8:	6910      	ldr	r0, [r2, #16]
 800bbaa:	f000 fb6f 	bl	800c28c <__hi0bits>
 800bbae:	f1c0 0020 	rsb	r0, r0, #32
 800bbb2:	9b06      	ldr	r3, [sp, #24]
 800bbb4:	4418      	add	r0, r3
 800bbb6:	f010 001f 	ands.w	r0, r0, #31
 800bbba:	d076      	beq.n	800bcaa <_dtoa_r+0x81a>
 800bbbc:	f1c0 0220 	rsb	r2, r0, #32
 800bbc0:	2a04      	cmp	r2, #4
 800bbc2:	dd69      	ble.n	800bc98 <_dtoa_r+0x808>
 800bbc4:	9b05      	ldr	r3, [sp, #20]
 800bbc6:	f1c0 001c 	rsb	r0, r0, #28
 800bbca:	4403      	add	r3, r0
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	9b06      	ldr	r3, [sp, #24]
 800bbd0:	4406      	add	r6, r0
 800bbd2:	4403      	add	r3, r0
 800bbd4:	9306      	str	r3, [sp, #24]
 800bbd6:	9b05      	ldr	r3, [sp, #20]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dd05      	ble.n	800bbe8 <_dtoa_r+0x758>
 800bbdc:	9901      	ldr	r1, [sp, #4]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4648      	mov	r0, r9
 800bbe2:	f000 fcb9 	bl	800c558 <__lshift>
 800bbe6:	9001      	str	r0, [sp, #4]
 800bbe8:	9b06      	ldr	r3, [sp, #24]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dd05      	ble.n	800bbfa <_dtoa_r+0x76a>
 800bbee:	4621      	mov	r1, r4
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	4648      	mov	r0, r9
 800bbf4:	f000 fcb0 	bl	800c558 <__lshift>
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d056      	beq.n	800bcae <_dtoa_r+0x81e>
 800bc00:	9801      	ldr	r0, [sp, #4]
 800bc02:	4621      	mov	r1, r4
 800bc04:	f000 fd14 	bl	800c630 <__mcmp>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	da50      	bge.n	800bcae <_dtoa_r+0x81e>
 800bc0c:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc10:	9304      	str	r3, [sp, #16]
 800bc12:	9901      	ldr	r1, [sp, #4]
 800bc14:	2300      	movs	r3, #0
 800bc16:	220a      	movs	r2, #10
 800bc18:	4648      	mov	r0, r9
 800bc1a:	f000 faf1 	bl	800c200 <__multadd>
 800bc1e:	9b08      	ldr	r3, [sp, #32]
 800bc20:	9001      	str	r0, [sp, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 816e 	beq.w	800bf04 <_dtoa_r+0xa74>
 800bc28:	4629      	mov	r1, r5
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	4648      	mov	r0, r9
 800bc30:	f000 fae6 	bl	800c200 <__multadd>
 800bc34:	f1bb 0f00 	cmp.w	fp, #0
 800bc38:	4605      	mov	r5, r0
 800bc3a:	dc64      	bgt.n	800bd06 <_dtoa_r+0x876>
 800bc3c:	9b07      	ldr	r3, [sp, #28]
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	dc3e      	bgt.n	800bcc0 <_dtoa_r+0x830>
 800bc42:	e060      	b.n	800bd06 <_dtoa_r+0x876>
 800bc44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc4a:	e73c      	b.n	800bac6 <_dtoa_r+0x636>
 800bc4c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800bc50:	42a3      	cmp	r3, r4
 800bc52:	bfbf      	itttt	lt
 800bc54:	1ae2      	sublt	r2, r4, r3
 800bc56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc58:	189b      	addlt	r3, r3, r2
 800bc5a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800bc5c:	bfae      	itee	ge
 800bc5e:	1b1c      	subge	r4, r3, r4
 800bc60:	4623      	movlt	r3, r4
 800bc62:	2400      	movlt	r4, #0
 800bc64:	f1ba 0f00 	cmp.w	sl, #0
 800bc68:	bfb5      	itete	lt
 800bc6a:	9a05      	ldrlt	r2, [sp, #20]
 800bc6c:	9e05      	ldrge	r6, [sp, #20]
 800bc6e:	eba2 060a 	sublt.w	r6, r2, sl
 800bc72:	4652      	movge	r2, sl
 800bc74:	bfb8      	it	lt
 800bc76:	2200      	movlt	r2, #0
 800bc78:	e727      	b.n	800baca <_dtoa_r+0x63a>
 800bc7a:	9e05      	ldr	r6, [sp, #20]
 800bc7c:	9d08      	ldr	r5, [sp, #32]
 800bc7e:	461c      	mov	r4, r3
 800bc80:	e730      	b.n	800bae4 <_dtoa_r+0x654>
 800bc82:	461a      	mov	r2, r3
 800bc84:	e758      	b.n	800bb38 <_dtoa_r+0x6a8>
 800bc86:	2300      	movs	r3, #0
 800bc88:	e786      	b.n	800bb98 <_dtoa_r+0x708>
 800bc8a:	9b02      	ldr	r3, [sp, #8]
 800bc8c:	e784      	b.n	800bb98 <_dtoa_r+0x708>
 800bc8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bc90:	e783      	b.n	800bb9a <_dtoa_r+0x70a>
 800bc92:	2300      	movs	r3, #0
 800bc94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc96:	e784      	b.n	800bba2 <_dtoa_r+0x712>
 800bc98:	d09d      	beq.n	800bbd6 <_dtoa_r+0x746>
 800bc9a:	9b05      	ldr	r3, [sp, #20]
 800bc9c:	321c      	adds	r2, #28
 800bc9e:	4413      	add	r3, r2
 800bca0:	9305      	str	r3, [sp, #20]
 800bca2:	9b06      	ldr	r3, [sp, #24]
 800bca4:	4416      	add	r6, r2
 800bca6:	4413      	add	r3, r2
 800bca8:	e794      	b.n	800bbd4 <_dtoa_r+0x744>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	e7f5      	b.n	800bc9a <_dtoa_r+0x80a>
 800bcae:	f1ba 0f00 	cmp.w	sl, #0
 800bcb2:	f8cd 8010 	str.w	r8, [sp, #16]
 800bcb6:	46d3      	mov	fp, sl
 800bcb8:	dc21      	bgt.n	800bcfe <_dtoa_r+0x86e>
 800bcba:	9b07      	ldr	r3, [sp, #28]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	dd1e      	ble.n	800bcfe <_dtoa_r+0x86e>
 800bcc0:	f1bb 0f00 	cmp.w	fp, #0
 800bcc4:	f47f aeb7 	bne.w	800ba36 <_dtoa_r+0x5a6>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	465b      	mov	r3, fp
 800bccc:	2205      	movs	r2, #5
 800bcce:	4648      	mov	r0, r9
 800bcd0:	f000 fa96 	bl	800c200 <__multadd>
 800bcd4:	4601      	mov	r1, r0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	9801      	ldr	r0, [sp, #4]
 800bcda:	f000 fca9 	bl	800c630 <__mcmp>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f77f aea9 	ble.w	800ba36 <_dtoa_r+0x5a6>
 800bce4:	463e      	mov	r6, r7
 800bce6:	2331      	movs	r3, #49	@ 0x31
 800bce8:	f806 3b01 	strb.w	r3, [r6], #1
 800bcec:	9b04      	ldr	r3, [sp, #16]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	e6a4      	b.n	800ba3e <_dtoa_r+0x5ae>
 800bcf4:	f8cd 8010 	str.w	r8, [sp, #16]
 800bcf8:	4654      	mov	r4, sl
 800bcfa:	4625      	mov	r5, r4
 800bcfc:	e7f2      	b.n	800bce4 <_dtoa_r+0x854>
 800bcfe:	9b08      	ldr	r3, [sp, #32]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f000 8103 	beq.w	800bf0c <_dtoa_r+0xa7c>
 800bd06:	2e00      	cmp	r6, #0
 800bd08:	dd05      	ble.n	800bd16 <_dtoa_r+0x886>
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	4648      	mov	r0, r9
 800bd10:	f000 fc22 	bl	800c558 <__lshift>
 800bd14:	4605      	mov	r5, r0
 800bd16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d058      	beq.n	800bdce <_dtoa_r+0x93e>
 800bd1c:	6869      	ldr	r1, [r5, #4]
 800bd1e:	4648      	mov	r0, r9
 800bd20:	f000 fa0c 	bl	800c13c <_Balloc>
 800bd24:	4606      	mov	r6, r0
 800bd26:	b928      	cbnz	r0, 800bd34 <_dtoa_r+0x8a4>
 800bd28:	4b82      	ldr	r3, [pc, #520]	@ (800bf34 <_dtoa_r+0xaa4>)
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd30:	f7ff bbc7 	b.w	800b4c2 <_dtoa_r+0x32>
 800bd34:	692a      	ldr	r2, [r5, #16]
 800bd36:	3202      	adds	r2, #2
 800bd38:	0092      	lsls	r2, r2, #2
 800bd3a:	f105 010c 	add.w	r1, r5, #12
 800bd3e:	300c      	adds	r0, #12
 800bd40:	f7ff fb0d 	bl	800b35e <memcpy>
 800bd44:	2201      	movs	r2, #1
 800bd46:	4631      	mov	r1, r6
 800bd48:	4648      	mov	r0, r9
 800bd4a:	f000 fc05 	bl	800c558 <__lshift>
 800bd4e:	1c7b      	adds	r3, r7, #1
 800bd50:	9305      	str	r3, [sp, #20]
 800bd52:	eb07 030b 	add.w	r3, r7, fp
 800bd56:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd58:	9b02      	ldr	r3, [sp, #8]
 800bd5a:	f003 0301 	and.w	r3, r3, #1
 800bd5e:	46a8      	mov	r8, r5
 800bd60:	9308      	str	r3, [sp, #32]
 800bd62:	4605      	mov	r5, r0
 800bd64:	9b05      	ldr	r3, [sp, #20]
 800bd66:	9801      	ldr	r0, [sp, #4]
 800bd68:	4621      	mov	r1, r4
 800bd6a:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd6e:	f7ff fb04 	bl	800b37a <quorem>
 800bd72:	4641      	mov	r1, r8
 800bd74:	9002      	str	r0, [sp, #8]
 800bd76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bd7a:	9801      	ldr	r0, [sp, #4]
 800bd7c:	f000 fc58 	bl	800c630 <__mcmp>
 800bd80:	462a      	mov	r2, r5
 800bd82:	9006      	str	r0, [sp, #24]
 800bd84:	4621      	mov	r1, r4
 800bd86:	4648      	mov	r0, r9
 800bd88:	f000 fc6e 	bl	800c668 <__mdiff>
 800bd8c:	68c2      	ldr	r2, [r0, #12]
 800bd8e:	4606      	mov	r6, r0
 800bd90:	b9fa      	cbnz	r2, 800bdd2 <_dtoa_r+0x942>
 800bd92:	4601      	mov	r1, r0
 800bd94:	9801      	ldr	r0, [sp, #4]
 800bd96:	f000 fc4b 	bl	800c630 <__mcmp>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	4648      	mov	r0, r9
 800bda0:	920a      	str	r2, [sp, #40]	@ 0x28
 800bda2:	f000 fa0b 	bl	800c1bc <_Bfree>
 800bda6:	9b07      	ldr	r3, [sp, #28]
 800bda8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdaa:	9e05      	ldr	r6, [sp, #20]
 800bdac:	ea43 0102 	orr.w	r1, r3, r2
 800bdb0:	9b08      	ldr	r3, [sp, #32]
 800bdb2:	4319      	orrs	r1, r3
 800bdb4:	d10f      	bne.n	800bdd6 <_dtoa_r+0x946>
 800bdb6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bdba:	d028      	beq.n	800be0e <_dtoa_r+0x97e>
 800bdbc:	9b06      	ldr	r3, [sp, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	dd02      	ble.n	800bdc8 <_dtoa_r+0x938>
 800bdc2:	9b02      	ldr	r3, [sp, #8]
 800bdc4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bdc8:	f88b a000 	strb.w	sl, [fp]
 800bdcc:	e639      	b.n	800ba42 <_dtoa_r+0x5b2>
 800bdce:	4628      	mov	r0, r5
 800bdd0:	e7bd      	b.n	800bd4e <_dtoa_r+0x8be>
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	e7e2      	b.n	800bd9c <_dtoa_r+0x90c>
 800bdd6:	9b06      	ldr	r3, [sp, #24]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	db04      	blt.n	800bde6 <_dtoa_r+0x956>
 800bddc:	9907      	ldr	r1, [sp, #28]
 800bdde:	430b      	orrs	r3, r1
 800bde0:	9908      	ldr	r1, [sp, #32]
 800bde2:	430b      	orrs	r3, r1
 800bde4:	d120      	bne.n	800be28 <_dtoa_r+0x998>
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	ddee      	ble.n	800bdc8 <_dtoa_r+0x938>
 800bdea:	9901      	ldr	r1, [sp, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	4648      	mov	r0, r9
 800bdf0:	f000 fbb2 	bl	800c558 <__lshift>
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	9001      	str	r0, [sp, #4]
 800bdf8:	f000 fc1a 	bl	800c630 <__mcmp>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	dc03      	bgt.n	800be08 <_dtoa_r+0x978>
 800be00:	d1e2      	bne.n	800bdc8 <_dtoa_r+0x938>
 800be02:	f01a 0f01 	tst.w	sl, #1
 800be06:	d0df      	beq.n	800bdc8 <_dtoa_r+0x938>
 800be08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800be0c:	d1d9      	bne.n	800bdc2 <_dtoa_r+0x932>
 800be0e:	2339      	movs	r3, #57	@ 0x39
 800be10:	f88b 3000 	strb.w	r3, [fp]
 800be14:	4633      	mov	r3, r6
 800be16:	461e      	mov	r6, r3
 800be18:	3b01      	subs	r3, #1
 800be1a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be1e:	2a39      	cmp	r2, #57	@ 0x39
 800be20:	d053      	beq.n	800beca <_dtoa_r+0xa3a>
 800be22:	3201      	adds	r2, #1
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e60c      	b.n	800ba42 <_dtoa_r+0x5b2>
 800be28:	2a00      	cmp	r2, #0
 800be2a:	dd07      	ble.n	800be3c <_dtoa_r+0x9ac>
 800be2c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800be30:	d0ed      	beq.n	800be0e <_dtoa_r+0x97e>
 800be32:	f10a 0301 	add.w	r3, sl, #1
 800be36:	f88b 3000 	strb.w	r3, [fp]
 800be3a:	e602      	b.n	800ba42 <_dtoa_r+0x5b2>
 800be3c:	9b05      	ldr	r3, [sp, #20]
 800be3e:	9a05      	ldr	r2, [sp, #20]
 800be40:	f803 ac01 	strb.w	sl, [r3, #-1]
 800be44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be46:	4293      	cmp	r3, r2
 800be48:	d029      	beq.n	800be9e <_dtoa_r+0xa0e>
 800be4a:	9901      	ldr	r1, [sp, #4]
 800be4c:	2300      	movs	r3, #0
 800be4e:	220a      	movs	r2, #10
 800be50:	4648      	mov	r0, r9
 800be52:	f000 f9d5 	bl	800c200 <__multadd>
 800be56:	45a8      	cmp	r8, r5
 800be58:	9001      	str	r0, [sp, #4]
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	f04f 020a 	mov.w	r2, #10
 800be62:	4641      	mov	r1, r8
 800be64:	4648      	mov	r0, r9
 800be66:	d107      	bne.n	800be78 <_dtoa_r+0x9e8>
 800be68:	f000 f9ca 	bl	800c200 <__multadd>
 800be6c:	4680      	mov	r8, r0
 800be6e:	4605      	mov	r5, r0
 800be70:	9b05      	ldr	r3, [sp, #20]
 800be72:	3301      	adds	r3, #1
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	e775      	b.n	800bd64 <_dtoa_r+0x8d4>
 800be78:	f000 f9c2 	bl	800c200 <__multadd>
 800be7c:	4629      	mov	r1, r5
 800be7e:	4680      	mov	r8, r0
 800be80:	2300      	movs	r3, #0
 800be82:	220a      	movs	r2, #10
 800be84:	4648      	mov	r0, r9
 800be86:	f000 f9bb 	bl	800c200 <__multadd>
 800be8a:	4605      	mov	r5, r0
 800be8c:	e7f0      	b.n	800be70 <_dtoa_r+0x9e0>
 800be8e:	f1bb 0f00 	cmp.w	fp, #0
 800be92:	bfcc      	ite	gt
 800be94:	465e      	movgt	r6, fp
 800be96:	2601      	movle	r6, #1
 800be98:	443e      	add	r6, r7
 800be9a:	f04f 0800 	mov.w	r8, #0
 800be9e:	9901      	ldr	r1, [sp, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	4648      	mov	r0, r9
 800bea4:	f000 fb58 	bl	800c558 <__lshift>
 800bea8:	4621      	mov	r1, r4
 800beaa:	9001      	str	r0, [sp, #4]
 800beac:	f000 fbc0 	bl	800c630 <__mcmp>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	dcaf      	bgt.n	800be14 <_dtoa_r+0x984>
 800beb4:	d102      	bne.n	800bebc <_dtoa_r+0xa2c>
 800beb6:	f01a 0f01 	tst.w	sl, #1
 800beba:	d1ab      	bne.n	800be14 <_dtoa_r+0x984>
 800bebc:	4633      	mov	r3, r6
 800bebe:	461e      	mov	r6, r3
 800bec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bec4:	2a30      	cmp	r2, #48	@ 0x30
 800bec6:	d0fa      	beq.n	800bebe <_dtoa_r+0xa2e>
 800bec8:	e5bb      	b.n	800ba42 <_dtoa_r+0x5b2>
 800beca:	429f      	cmp	r7, r3
 800becc:	d1a3      	bne.n	800be16 <_dtoa_r+0x986>
 800bece:	9b04      	ldr	r3, [sp, #16]
 800bed0:	3301      	adds	r3, #1
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	2331      	movs	r3, #49	@ 0x31
 800bed6:	703b      	strb	r3, [r7, #0]
 800bed8:	e5b3      	b.n	800ba42 <_dtoa_r+0x5b2>
 800beda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bedc:	4f16      	ldr	r7, [pc, #88]	@ (800bf38 <_dtoa_r+0xaa8>)
 800bede:	b11b      	cbz	r3, 800bee8 <_dtoa_r+0xa58>
 800bee0:	f107 0308 	add.w	r3, r7, #8
 800bee4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	4638      	mov	r0, r7
 800beea:	b011      	add	sp, #68	@ 0x44
 800beec:	ecbd 8b02 	vpop	{d8}
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	9b07      	ldr	r3, [sp, #28]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	f77f ae36 	ble.w	800bb68 <_dtoa_r+0x6d8>
 800befc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800befe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf00:	2001      	movs	r0, #1
 800bf02:	e656      	b.n	800bbb2 <_dtoa_r+0x722>
 800bf04:	f1bb 0f00 	cmp.w	fp, #0
 800bf08:	f77f aed7 	ble.w	800bcba <_dtoa_r+0x82a>
 800bf0c:	463e      	mov	r6, r7
 800bf0e:	9801      	ldr	r0, [sp, #4]
 800bf10:	4621      	mov	r1, r4
 800bf12:	f7ff fa32 	bl	800b37a <quorem>
 800bf16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bf1a:	f806 ab01 	strb.w	sl, [r6], #1
 800bf1e:	1bf2      	subs	r2, r6, r7
 800bf20:	4593      	cmp	fp, r2
 800bf22:	ddb4      	ble.n	800be8e <_dtoa_r+0x9fe>
 800bf24:	9901      	ldr	r1, [sp, #4]
 800bf26:	2300      	movs	r3, #0
 800bf28:	220a      	movs	r2, #10
 800bf2a:	4648      	mov	r0, r9
 800bf2c:	f000 f968 	bl	800c200 <__multadd>
 800bf30:	9001      	str	r0, [sp, #4]
 800bf32:	e7ec      	b.n	800bf0e <_dtoa_r+0xa7e>
 800bf34:	0800d714 	.word	0x0800d714
 800bf38:	0800d698 	.word	0x0800d698

0800bf3c <_free_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4605      	mov	r5, r0
 800bf40:	2900      	cmp	r1, #0
 800bf42:	d041      	beq.n	800bfc8 <_free_r+0x8c>
 800bf44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf48:	1f0c      	subs	r4, r1, #4
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	bfb8      	it	lt
 800bf4e:	18e4      	addlt	r4, r4, r3
 800bf50:	f000 f8e8 	bl	800c124 <__malloc_lock>
 800bf54:	4a1d      	ldr	r2, [pc, #116]	@ (800bfcc <_free_r+0x90>)
 800bf56:	6813      	ldr	r3, [r2, #0]
 800bf58:	b933      	cbnz	r3, 800bf68 <_free_r+0x2c>
 800bf5a:	6063      	str	r3, [r4, #4]
 800bf5c:	6014      	str	r4, [r2, #0]
 800bf5e:	4628      	mov	r0, r5
 800bf60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf64:	f000 b8e4 	b.w	800c130 <__malloc_unlock>
 800bf68:	42a3      	cmp	r3, r4
 800bf6a:	d908      	bls.n	800bf7e <_free_r+0x42>
 800bf6c:	6820      	ldr	r0, [r4, #0]
 800bf6e:	1821      	adds	r1, r4, r0
 800bf70:	428b      	cmp	r3, r1
 800bf72:	bf01      	itttt	eq
 800bf74:	6819      	ldreq	r1, [r3, #0]
 800bf76:	685b      	ldreq	r3, [r3, #4]
 800bf78:	1809      	addeq	r1, r1, r0
 800bf7a:	6021      	streq	r1, [r4, #0]
 800bf7c:	e7ed      	b.n	800bf5a <_free_r+0x1e>
 800bf7e:	461a      	mov	r2, r3
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	b10b      	cbz	r3, 800bf88 <_free_r+0x4c>
 800bf84:	42a3      	cmp	r3, r4
 800bf86:	d9fa      	bls.n	800bf7e <_free_r+0x42>
 800bf88:	6811      	ldr	r1, [r2, #0]
 800bf8a:	1850      	adds	r0, r2, r1
 800bf8c:	42a0      	cmp	r0, r4
 800bf8e:	d10b      	bne.n	800bfa8 <_free_r+0x6c>
 800bf90:	6820      	ldr	r0, [r4, #0]
 800bf92:	4401      	add	r1, r0
 800bf94:	1850      	adds	r0, r2, r1
 800bf96:	4283      	cmp	r3, r0
 800bf98:	6011      	str	r1, [r2, #0]
 800bf9a:	d1e0      	bne.n	800bf5e <_free_r+0x22>
 800bf9c:	6818      	ldr	r0, [r3, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	6053      	str	r3, [r2, #4]
 800bfa2:	4408      	add	r0, r1
 800bfa4:	6010      	str	r0, [r2, #0]
 800bfa6:	e7da      	b.n	800bf5e <_free_r+0x22>
 800bfa8:	d902      	bls.n	800bfb0 <_free_r+0x74>
 800bfaa:	230c      	movs	r3, #12
 800bfac:	602b      	str	r3, [r5, #0]
 800bfae:	e7d6      	b.n	800bf5e <_free_r+0x22>
 800bfb0:	6820      	ldr	r0, [r4, #0]
 800bfb2:	1821      	adds	r1, r4, r0
 800bfb4:	428b      	cmp	r3, r1
 800bfb6:	bf04      	itt	eq
 800bfb8:	6819      	ldreq	r1, [r3, #0]
 800bfba:	685b      	ldreq	r3, [r3, #4]
 800bfbc:	6063      	str	r3, [r4, #4]
 800bfbe:	bf04      	itt	eq
 800bfc0:	1809      	addeq	r1, r1, r0
 800bfc2:	6021      	streq	r1, [r4, #0]
 800bfc4:	6054      	str	r4, [r2, #4]
 800bfc6:	e7ca      	b.n	800bf5e <_free_r+0x22>
 800bfc8:	bd38      	pop	{r3, r4, r5, pc}
 800bfca:	bf00      	nop
 800bfcc:	200055cc 	.word	0x200055cc

0800bfd0 <malloc>:
 800bfd0:	4b02      	ldr	r3, [pc, #8]	@ (800bfdc <malloc+0xc>)
 800bfd2:	4601      	mov	r1, r0
 800bfd4:	6818      	ldr	r0, [r3, #0]
 800bfd6:	f000 b825 	b.w	800c024 <_malloc_r>
 800bfda:	bf00      	nop
 800bfdc:	20000074 	.word	0x20000074

0800bfe0 <sbrk_aligned>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	4e0f      	ldr	r6, [pc, #60]	@ (800c020 <sbrk_aligned+0x40>)
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	6831      	ldr	r1, [r6, #0]
 800bfe8:	4605      	mov	r5, r0
 800bfea:	b911      	cbnz	r1, 800bff2 <sbrk_aligned+0x12>
 800bfec:	f000 fcd4 	bl	800c998 <_sbrk_r>
 800bff0:	6030      	str	r0, [r6, #0]
 800bff2:	4621      	mov	r1, r4
 800bff4:	4628      	mov	r0, r5
 800bff6:	f000 fccf 	bl	800c998 <_sbrk_r>
 800bffa:	1c43      	adds	r3, r0, #1
 800bffc:	d103      	bne.n	800c006 <sbrk_aligned+0x26>
 800bffe:	f04f 34ff 	mov.w	r4, #4294967295
 800c002:	4620      	mov	r0, r4
 800c004:	bd70      	pop	{r4, r5, r6, pc}
 800c006:	1cc4      	adds	r4, r0, #3
 800c008:	f024 0403 	bic.w	r4, r4, #3
 800c00c:	42a0      	cmp	r0, r4
 800c00e:	d0f8      	beq.n	800c002 <sbrk_aligned+0x22>
 800c010:	1a21      	subs	r1, r4, r0
 800c012:	4628      	mov	r0, r5
 800c014:	f000 fcc0 	bl	800c998 <_sbrk_r>
 800c018:	3001      	adds	r0, #1
 800c01a:	d1f2      	bne.n	800c002 <sbrk_aligned+0x22>
 800c01c:	e7ef      	b.n	800bffe <sbrk_aligned+0x1e>
 800c01e:	bf00      	nop
 800c020:	200055c8 	.word	0x200055c8

0800c024 <_malloc_r>:
 800c024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c028:	1ccd      	adds	r5, r1, #3
 800c02a:	f025 0503 	bic.w	r5, r5, #3
 800c02e:	3508      	adds	r5, #8
 800c030:	2d0c      	cmp	r5, #12
 800c032:	bf38      	it	cc
 800c034:	250c      	movcc	r5, #12
 800c036:	2d00      	cmp	r5, #0
 800c038:	4606      	mov	r6, r0
 800c03a:	db01      	blt.n	800c040 <_malloc_r+0x1c>
 800c03c:	42a9      	cmp	r1, r5
 800c03e:	d904      	bls.n	800c04a <_malloc_r+0x26>
 800c040:	230c      	movs	r3, #12
 800c042:	6033      	str	r3, [r6, #0]
 800c044:	2000      	movs	r0, #0
 800c046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c120 <_malloc_r+0xfc>
 800c04e:	f000 f869 	bl	800c124 <__malloc_lock>
 800c052:	f8d8 3000 	ldr.w	r3, [r8]
 800c056:	461c      	mov	r4, r3
 800c058:	bb44      	cbnz	r4, 800c0ac <_malloc_r+0x88>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff ffbf 	bl	800bfe0 <sbrk_aligned>
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	4604      	mov	r4, r0
 800c066:	d158      	bne.n	800c11a <_malloc_r+0xf6>
 800c068:	f8d8 4000 	ldr.w	r4, [r8]
 800c06c:	4627      	mov	r7, r4
 800c06e:	2f00      	cmp	r7, #0
 800c070:	d143      	bne.n	800c0fa <_malloc_r+0xd6>
 800c072:	2c00      	cmp	r4, #0
 800c074:	d04b      	beq.n	800c10e <_malloc_r+0xea>
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	4639      	mov	r1, r7
 800c07a:	4630      	mov	r0, r6
 800c07c:	eb04 0903 	add.w	r9, r4, r3
 800c080:	f000 fc8a 	bl	800c998 <_sbrk_r>
 800c084:	4581      	cmp	r9, r0
 800c086:	d142      	bne.n	800c10e <_malloc_r+0xea>
 800c088:	6821      	ldr	r1, [r4, #0]
 800c08a:	1a6d      	subs	r5, r5, r1
 800c08c:	4629      	mov	r1, r5
 800c08e:	4630      	mov	r0, r6
 800c090:	f7ff ffa6 	bl	800bfe0 <sbrk_aligned>
 800c094:	3001      	adds	r0, #1
 800c096:	d03a      	beq.n	800c10e <_malloc_r+0xea>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	442b      	add	r3, r5
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a2:	685a      	ldr	r2, [r3, #4]
 800c0a4:	bb62      	cbnz	r2, 800c100 <_malloc_r+0xdc>
 800c0a6:	f8c8 7000 	str.w	r7, [r8]
 800c0aa:	e00f      	b.n	800c0cc <_malloc_r+0xa8>
 800c0ac:	6822      	ldr	r2, [r4, #0]
 800c0ae:	1b52      	subs	r2, r2, r5
 800c0b0:	d420      	bmi.n	800c0f4 <_malloc_r+0xd0>
 800c0b2:	2a0b      	cmp	r2, #11
 800c0b4:	d917      	bls.n	800c0e6 <_malloc_r+0xc2>
 800c0b6:	1961      	adds	r1, r4, r5
 800c0b8:	42a3      	cmp	r3, r4
 800c0ba:	6025      	str	r5, [r4, #0]
 800c0bc:	bf18      	it	ne
 800c0be:	6059      	strne	r1, [r3, #4]
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	bf08      	it	eq
 800c0c4:	f8c8 1000 	streq.w	r1, [r8]
 800c0c8:	5162      	str	r2, [r4, r5]
 800c0ca:	604b      	str	r3, [r1, #4]
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f000 f82f 	bl	800c130 <__malloc_unlock>
 800c0d2:	f104 000b 	add.w	r0, r4, #11
 800c0d6:	1d23      	adds	r3, r4, #4
 800c0d8:	f020 0007 	bic.w	r0, r0, #7
 800c0dc:	1ac2      	subs	r2, r0, r3
 800c0de:	bf1c      	itt	ne
 800c0e0:	1a1b      	subne	r3, r3, r0
 800c0e2:	50a3      	strne	r3, [r4, r2]
 800c0e4:	e7af      	b.n	800c046 <_malloc_r+0x22>
 800c0e6:	6862      	ldr	r2, [r4, #4]
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	bf0c      	ite	eq
 800c0ec:	f8c8 2000 	streq.w	r2, [r8]
 800c0f0:	605a      	strne	r2, [r3, #4]
 800c0f2:	e7eb      	b.n	800c0cc <_malloc_r+0xa8>
 800c0f4:	4623      	mov	r3, r4
 800c0f6:	6864      	ldr	r4, [r4, #4]
 800c0f8:	e7ae      	b.n	800c058 <_malloc_r+0x34>
 800c0fa:	463c      	mov	r4, r7
 800c0fc:	687f      	ldr	r7, [r7, #4]
 800c0fe:	e7b6      	b.n	800c06e <_malloc_r+0x4a>
 800c100:	461a      	mov	r2, r3
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	42a3      	cmp	r3, r4
 800c106:	d1fb      	bne.n	800c100 <_malloc_r+0xdc>
 800c108:	2300      	movs	r3, #0
 800c10a:	6053      	str	r3, [r2, #4]
 800c10c:	e7de      	b.n	800c0cc <_malloc_r+0xa8>
 800c10e:	230c      	movs	r3, #12
 800c110:	6033      	str	r3, [r6, #0]
 800c112:	4630      	mov	r0, r6
 800c114:	f000 f80c 	bl	800c130 <__malloc_unlock>
 800c118:	e794      	b.n	800c044 <_malloc_r+0x20>
 800c11a:	6005      	str	r5, [r0, #0]
 800c11c:	e7d6      	b.n	800c0cc <_malloc_r+0xa8>
 800c11e:	bf00      	nop
 800c120:	200055cc 	.word	0x200055cc

0800c124 <__malloc_lock>:
 800c124:	4801      	ldr	r0, [pc, #4]	@ (800c12c <__malloc_lock+0x8>)
 800c126:	f7ff b918 	b.w	800b35a <__retarget_lock_acquire_recursive>
 800c12a:	bf00      	nop
 800c12c:	200055c4 	.word	0x200055c4

0800c130 <__malloc_unlock>:
 800c130:	4801      	ldr	r0, [pc, #4]	@ (800c138 <__malloc_unlock+0x8>)
 800c132:	f7ff b913 	b.w	800b35c <__retarget_lock_release_recursive>
 800c136:	bf00      	nop
 800c138:	200055c4 	.word	0x200055c4

0800c13c <_Balloc>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	69c6      	ldr	r6, [r0, #28]
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	b976      	cbnz	r6, 800c164 <_Balloc+0x28>
 800c146:	2010      	movs	r0, #16
 800c148:	f7ff ff42 	bl	800bfd0 <malloc>
 800c14c:	4602      	mov	r2, r0
 800c14e:	61e0      	str	r0, [r4, #28]
 800c150:	b920      	cbnz	r0, 800c15c <_Balloc+0x20>
 800c152:	4b18      	ldr	r3, [pc, #96]	@ (800c1b4 <_Balloc+0x78>)
 800c154:	4818      	ldr	r0, [pc, #96]	@ (800c1b8 <_Balloc+0x7c>)
 800c156:	216b      	movs	r1, #107	@ 0x6b
 800c158:	f000 fc2e 	bl	800c9b8 <__assert_func>
 800c15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c160:	6006      	str	r6, [r0, #0]
 800c162:	60c6      	str	r6, [r0, #12]
 800c164:	69e6      	ldr	r6, [r4, #28]
 800c166:	68f3      	ldr	r3, [r6, #12]
 800c168:	b183      	cbz	r3, 800c18c <_Balloc+0x50>
 800c16a:	69e3      	ldr	r3, [r4, #28]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c172:	b9b8      	cbnz	r0, 800c1a4 <_Balloc+0x68>
 800c174:	2101      	movs	r1, #1
 800c176:	fa01 f605 	lsl.w	r6, r1, r5
 800c17a:	1d72      	adds	r2, r6, #5
 800c17c:	0092      	lsls	r2, r2, #2
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 fc38 	bl	800c9f4 <_calloc_r>
 800c184:	b160      	cbz	r0, 800c1a0 <_Balloc+0x64>
 800c186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c18a:	e00e      	b.n	800c1aa <_Balloc+0x6e>
 800c18c:	2221      	movs	r2, #33	@ 0x21
 800c18e:	2104      	movs	r1, #4
 800c190:	4620      	mov	r0, r4
 800c192:	f000 fc2f 	bl	800c9f4 <_calloc_r>
 800c196:	69e3      	ldr	r3, [r4, #28]
 800c198:	60f0      	str	r0, [r6, #12]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e4      	bne.n	800c16a <_Balloc+0x2e>
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	6802      	ldr	r2, [r0, #0]
 800c1a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1b0:	e7f7      	b.n	800c1a2 <_Balloc+0x66>
 800c1b2:	bf00      	nop
 800c1b4:	0800d6a5 	.word	0x0800d6a5
 800c1b8:	0800d725 	.word	0x0800d725

0800c1bc <_Bfree>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	69c6      	ldr	r6, [r0, #28]
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	b976      	cbnz	r6, 800c1e4 <_Bfree+0x28>
 800c1c6:	2010      	movs	r0, #16
 800c1c8:	f7ff ff02 	bl	800bfd0 <malloc>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	61e8      	str	r0, [r5, #28]
 800c1d0:	b920      	cbnz	r0, 800c1dc <_Bfree+0x20>
 800c1d2:	4b09      	ldr	r3, [pc, #36]	@ (800c1f8 <_Bfree+0x3c>)
 800c1d4:	4809      	ldr	r0, [pc, #36]	@ (800c1fc <_Bfree+0x40>)
 800c1d6:	218f      	movs	r1, #143	@ 0x8f
 800c1d8:	f000 fbee 	bl	800c9b8 <__assert_func>
 800c1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1e0:	6006      	str	r6, [r0, #0]
 800c1e2:	60c6      	str	r6, [r0, #12]
 800c1e4:	b13c      	cbz	r4, 800c1f6 <_Bfree+0x3a>
 800c1e6:	69eb      	ldr	r3, [r5, #28]
 800c1e8:	6862      	ldr	r2, [r4, #4]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1f0:	6021      	str	r1, [r4, #0]
 800c1f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	0800d6a5 	.word	0x0800d6a5
 800c1fc:	0800d725 	.word	0x0800d725

0800c200 <__multadd>:
 800c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c204:	690d      	ldr	r5, [r1, #16]
 800c206:	4607      	mov	r7, r0
 800c208:	460c      	mov	r4, r1
 800c20a:	461e      	mov	r6, r3
 800c20c:	f101 0c14 	add.w	ip, r1, #20
 800c210:	2000      	movs	r0, #0
 800c212:	f8dc 3000 	ldr.w	r3, [ip]
 800c216:	b299      	uxth	r1, r3
 800c218:	fb02 6101 	mla	r1, r2, r1, r6
 800c21c:	0c1e      	lsrs	r6, r3, #16
 800c21e:	0c0b      	lsrs	r3, r1, #16
 800c220:	fb02 3306 	mla	r3, r2, r6, r3
 800c224:	b289      	uxth	r1, r1
 800c226:	3001      	adds	r0, #1
 800c228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c22c:	4285      	cmp	r5, r0
 800c22e:	f84c 1b04 	str.w	r1, [ip], #4
 800c232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c236:	dcec      	bgt.n	800c212 <__multadd+0x12>
 800c238:	b30e      	cbz	r6, 800c27e <__multadd+0x7e>
 800c23a:	68a3      	ldr	r3, [r4, #8]
 800c23c:	42ab      	cmp	r3, r5
 800c23e:	dc19      	bgt.n	800c274 <__multadd+0x74>
 800c240:	6861      	ldr	r1, [r4, #4]
 800c242:	4638      	mov	r0, r7
 800c244:	3101      	adds	r1, #1
 800c246:	f7ff ff79 	bl	800c13c <_Balloc>
 800c24a:	4680      	mov	r8, r0
 800c24c:	b928      	cbnz	r0, 800c25a <__multadd+0x5a>
 800c24e:	4602      	mov	r2, r0
 800c250:	4b0c      	ldr	r3, [pc, #48]	@ (800c284 <__multadd+0x84>)
 800c252:	480d      	ldr	r0, [pc, #52]	@ (800c288 <__multadd+0x88>)
 800c254:	21ba      	movs	r1, #186	@ 0xba
 800c256:	f000 fbaf 	bl	800c9b8 <__assert_func>
 800c25a:	6922      	ldr	r2, [r4, #16]
 800c25c:	3202      	adds	r2, #2
 800c25e:	f104 010c 	add.w	r1, r4, #12
 800c262:	0092      	lsls	r2, r2, #2
 800c264:	300c      	adds	r0, #12
 800c266:	f7ff f87a 	bl	800b35e <memcpy>
 800c26a:	4621      	mov	r1, r4
 800c26c:	4638      	mov	r0, r7
 800c26e:	f7ff ffa5 	bl	800c1bc <_Bfree>
 800c272:	4644      	mov	r4, r8
 800c274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c278:	3501      	adds	r5, #1
 800c27a:	615e      	str	r6, [r3, #20]
 800c27c:	6125      	str	r5, [r4, #16]
 800c27e:	4620      	mov	r0, r4
 800c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c284:	0800d714 	.word	0x0800d714
 800c288:	0800d725 	.word	0x0800d725

0800c28c <__hi0bits>:
 800c28c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c290:	4603      	mov	r3, r0
 800c292:	bf36      	itet	cc
 800c294:	0403      	lslcc	r3, r0, #16
 800c296:	2000      	movcs	r0, #0
 800c298:	2010      	movcc	r0, #16
 800c29a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c29e:	bf3c      	itt	cc
 800c2a0:	021b      	lslcc	r3, r3, #8
 800c2a2:	3008      	addcc	r0, #8
 800c2a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2a8:	bf3c      	itt	cc
 800c2aa:	011b      	lslcc	r3, r3, #4
 800c2ac:	3004      	addcc	r0, #4
 800c2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2b2:	bf3c      	itt	cc
 800c2b4:	009b      	lslcc	r3, r3, #2
 800c2b6:	3002      	addcc	r0, #2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	db05      	blt.n	800c2c8 <__hi0bits+0x3c>
 800c2bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2c0:	f100 0001 	add.w	r0, r0, #1
 800c2c4:	bf08      	it	eq
 800c2c6:	2020      	moveq	r0, #32
 800c2c8:	4770      	bx	lr

0800c2ca <__lo0bits>:
 800c2ca:	6803      	ldr	r3, [r0, #0]
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	f013 0007 	ands.w	r0, r3, #7
 800c2d2:	d00b      	beq.n	800c2ec <__lo0bits+0x22>
 800c2d4:	07d9      	lsls	r1, r3, #31
 800c2d6:	d421      	bmi.n	800c31c <__lo0bits+0x52>
 800c2d8:	0798      	lsls	r0, r3, #30
 800c2da:	bf49      	itett	mi
 800c2dc:	085b      	lsrmi	r3, r3, #1
 800c2de:	089b      	lsrpl	r3, r3, #2
 800c2e0:	2001      	movmi	r0, #1
 800c2e2:	6013      	strmi	r3, [r2, #0]
 800c2e4:	bf5c      	itt	pl
 800c2e6:	6013      	strpl	r3, [r2, #0]
 800c2e8:	2002      	movpl	r0, #2
 800c2ea:	4770      	bx	lr
 800c2ec:	b299      	uxth	r1, r3
 800c2ee:	b909      	cbnz	r1, 800c2f4 <__lo0bits+0x2a>
 800c2f0:	0c1b      	lsrs	r3, r3, #16
 800c2f2:	2010      	movs	r0, #16
 800c2f4:	b2d9      	uxtb	r1, r3
 800c2f6:	b909      	cbnz	r1, 800c2fc <__lo0bits+0x32>
 800c2f8:	3008      	adds	r0, #8
 800c2fa:	0a1b      	lsrs	r3, r3, #8
 800c2fc:	0719      	lsls	r1, r3, #28
 800c2fe:	bf04      	itt	eq
 800c300:	091b      	lsreq	r3, r3, #4
 800c302:	3004      	addeq	r0, #4
 800c304:	0799      	lsls	r1, r3, #30
 800c306:	bf04      	itt	eq
 800c308:	089b      	lsreq	r3, r3, #2
 800c30a:	3002      	addeq	r0, #2
 800c30c:	07d9      	lsls	r1, r3, #31
 800c30e:	d403      	bmi.n	800c318 <__lo0bits+0x4e>
 800c310:	085b      	lsrs	r3, r3, #1
 800c312:	f100 0001 	add.w	r0, r0, #1
 800c316:	d003      	beq.n	800c320 <__lo0bits+0x56>
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	4770      	bx	lr
 800c31c:	2000      	movs	r0, #0
 800c31e:	4770      	bx	lr
 800c320:	2020      	movs	r0, #32
 800c322:	4770      	bx	lr

0800c324 <__i2b>:
 800c324:	b510      	push	{r4, lr}
 800c326:	460c      	mov	r4, r1
 800c328:	2101      	movs	r1, #1
 800c32a:	f7ff ff07 	bl	800c13c <_Balloc>
 800c32e:	4602      	mov	r2, r0
 800c330:	b928      	cbnz	r0, 800c33e <__i2b+0x1a>
 800c332:	4b05      	ldr	r3, [pc, #20]	@ (800c348 <__i2b+0x24>)
 800c334:	4805      	ldr	r0, [pc, #20]	@ (800c34c <__i2b+0x28>)
 800c336:	f240 1145 	movw	r1, #325	@ 0x145
 800c33a:	f000 fb3d 	bl	800c9b8 <__assert_func>
 800c33e:	2301      	movs	r3, #1
 800c340:	6144      	str	r4, [r0, #20]
 800c342:	6103      	str	r3, [r0, #16]
 800c344:	bd10      	pop	{r4, pc}
 800c346:	bf00      	nop
 800c348:	0800d714 	.word	0x0800d714
 800c34c:	0800d725 	.word	0x0800d725

0800c350 <__multiply>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	4614      	mov	r4, r2
 800c356:	690a      	ldr	r2, [r1, #16]
 800c358:	6923      	ldr	r3, [r4, #16]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	bfa8      	it	ge
 800c35e:	4623      	movge	r3, r4
 800c360:	460f      	mov	r7, r1
 800c362:	bfa4      	itt	ge
 800c364:	460c      	movge	r4, r1
 800c366:	461f      	movge	r7, r3
 800c368:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c36c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c370:	68a3      	ldr	r3, [r4, #8]
 800c372:	6861      	ldr	r1, [r4, #4]
 800c374:	eb0a 0609 	add.w	r6, sl, r9
 800c378:	42b3      	cmp	r3, r6
 800c37a:	b085      	sub	sp, #20
 800c37c:	bfb8      	it	lt
 800c37e:	3101      	addlt	r1, #1
 800c380:	f7ff fedc 	bl	800c13c <_Balloc>
 800c384:	b930      	cbnz	r0, 800c394 <__multiply+0x44>
 800c386:	4602      	mov	r2, r0
 800c388:	4b44      	ldr	r3, [pc, #272]	@ (800c49c <__multiply+0x14c>)
 800c38a:	4845      	ldr	r0, [pc, #276]	@ (800c4a0 <__multiply+0x150>)
 800c38c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c390:	f000 fb12 	bl	800c9b8 <__assert_func>
 800c394:	f100 0514 	add.w	r5, r0, #20
 800c398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c39c:	462b      	mov	r3, r5
 800c39e:	2200      	movs	r2, #0
 800c3a0:	4543      	cmp	r3, r8
 800c3a2:	d321      	bcc.n	800c3e8 <__multiply+0x98>
 800c3a4:	f107 0114 	add.w	r1, r7, #20
 800c3a8:	f104 0214 	add.w	r2, r4, #20
 800c3ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c3b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c3b4:	9302      	str	r3, [sp, #8]
 800c3b6:	1b13      	subs	r3, r2, r4
 800c3b8:	3b15      	subs	r3, #21
 800c3ba:	f023 0303 	bic.w	r3, r3, #3
 800c3be:	3304      	adds	r3, #4
 800c3c0:	f104 0715 	add.w	r7, r4, #21
 800c3c4:	42ba      	cmp	r2, r7
 800c3c6:	bf38      	it	cc
 800c3c8:	2304      	movcc	r3, #4
 800c3ca:	9301      	str	r3, [sp, #4]
 800c3cc:	9b02      	ldr	r3, [sp, #8]
 800c3ce:	9103      	str	r1, [sp, #12]
 800c3d0:	428b      	cmp	r3, r1
 800c3d2:	d80c      	bhi.n	800c3ee <__multiply+0x9e>
 800c3d4:	2e00      	cmp	r6, #0
 800c3d6:	dd03      	ble.n	800c3e0 <__multiply+0x90>
 800c3d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d05b      	beq.n	800c498 <__multiply+0x148>
 800c3e0:	6106      	str	r6, [r0, #16]
 800c3e2:	b005      	add	sp, #20
 800c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e8:	f843 2b04 	str.w	r2, [r3], #4
 800c3ec:	e7d8      	b.n	800c3a0 <__multiply+0x50>
 800c3ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3f2:	f1ba 0f00 	cmp.w	sl, #0
 800c3f6:	d024      	beq.n	800c442 <__multiply+0xf2>
 800c3f8:	f104 0e14 	add.w	lr, r4, #20
 800c3fc:	46a9      	mov	r9, r5
 800c3fe:	f04f 0c00 	mov.w	ip, #0
 800c402:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c406:	f8d9 3000 	ldr.w	r3, [r9]
 800c40a:	fa1f fb87 	uxth.w	fp, r7
 800c40e:	b29b      	uxth	r3, r3
 800c410:	fb0a 330b 	mla	r3, sl, fp, r3
 800c414:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c418:	f8d9 7000 	ldr.w	r7, [r9]
 800c41c:	4463      	add	r3, ip
 800c41e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c422:	fb0a c70b 	mla	r7, sl, fp, ip
 800c426:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c430:	4572      	cmp	r2, lr
 800c432:	f849 3b04 	str.w	r3, [r9], #4
 800c436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c43a:	d8e2      	bhi.n	800c402 <__multiply+0xb2>
 800c43c:	9b01      	ldr	r3, [sp, #4]
 800c43e:	f845 c003 	str.w	ip, [r5, r3]
 800c442:	9b03      	ldr	r3, [sp, #12]
 800c444:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c448:	3104      	adds	r1, #4
 800c44a:	f1b9 0f00 	cmp.w	r9, #0
 800c44e:	d021      	beq.n	800c494 <__multiply+0x144>
 800c450:	682b      	ldr	r3, [r5, #0]
 800c452:	f104 0c14 	add.w	ip, r4, #20
 800c456:	46ae      	mov	lr, r5
 800c458:	f04f 0a00 	mov.w	sl, #0
 800c45c:	f8bc b000 	ldrh.w	fp, [ip]
 800c460:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c464:	fb09 770b 	mla	r7, r9, fp, r7
 800c468:	4457      	add	r7, sl
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c470:	f84e 3b04 	str.w	r3, [lr], #4
 800c474:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c478:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c47c:	f8be 3000 	ldrh.w	r3, [lr]
 800c480:	fb09 330a 	mla	r3, r9, sl, r3
 800c484:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c488:	4562      	cmp	r2, ip
 800c48a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c48e:	d8e5      	bhi.n	800c45c <__multiply+0x10c>
 800c490:	9f01      	ldr	r7, [sp, #4]
 800c492:	51eb      	str	r3, [r5, r7]
 800c494:	3504      	adds	r5, #4
 800c496:	e799      	b.n	800c3cc <__multiply+0x7c>
 800c498:	3e01      	subs	r6, #1
 800c49a:	e79b      	b.n	800c3d4 <__multiply+0x84>
 800c49c:	0800d714 	.word	0x0800d714
 800c4a0:	0800d725 	.word	0x0800d725

0800c4a4 <__pow5mult>:
 800c4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a8:	4615      	mov	r5, r2
 800c4aa:	f012 0203 	ands.w	r2, r2, #3
 800c4ae:	4607      	mov	r7, r0
 800c4b0:	460e      	mov	r6, r1
 800c4b2:	d007      	beq.n	800c4c4 <__pow5mult+0x20>
 800c4b4:	4c25      	ldr	r4, [pc, #148]	@ (800c54c <__pow5mult+0xa8>)
 800c4b6:	3a01      	subs	r2, #1
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4be:	f7ff fe9f 	bl	800c200 <__multadd>
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	10ad      	asrs	r5, r5, #2
 800c4c6:	d03d      	beq.n	800c544 <__pow5mult+0xa0>
 800c4c8:	69fc      	ldr	r4, [r7, #28]
 800c4ca:	b97c      	cbnz	r4, 800c4ec <__pow5mult+0x48>
 800c4cc:	2010      	movs	r0, #16
 800c4ce:	f7ff fd7f 	bl	800bfd0 <malloc>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	61f8      	str	r0, [r7, #28]
 800c4d6:	b928      	cbnz	r0, 800c4e4 <__pow5mult+0x40>
 800c4d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c550 <__pow5mult+0xac>)
 800c4da:	481e      	ldr	r0, [pc, #120]	@ (800c554 <__pow5mult+0xb0>)
 800c4dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4e0:	f000 fa6a 	bl	800c9b8 <__assert_func>
 800c4e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4e8:	6004      	str	r4, [r0, #0]
 800c4ea:	60c4      	str	r4, [r0, #12]
 800c4ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4f4:	b94c      	cbnz	r4, 800c50a <__pow5mult+0x66>
 800c4f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	f7ff ff12 	bl	800c324 <__i2b>
 800c500:	2300      	movs	r3, #0
 800c502:	f8c8 0008 	str.w	r0, [r8, #8]
 800c506:	4604      	mov	r4, r0
 800c508:	6003      	str	r3, [r0, #0]
 800c50a:	f04f 0900 	mov.w	r9, #0
 800c50e:	07eb      	lsls	r3, r5, #31
 800c510:	d50a      	bpl.n	800c528 <__pow5mult+0x84>
 800c512:	4631      	mov	r1, r6
 800c514:	4622      	mov	r2, r4
 800c516:	4638      	mov	r0, r7
 800c518:	f7ff ff1a 	bl	800c350 <__multiply>
 800c51c:	4631      	mov	r1, r6
 800c51e:	4680      	mov	r8, r0
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff fe4b 	bl	800c1bc <_Bfree>
 800c526:	4646      	mov	r6, r8
 800c528:	106d      	asrs	r5, r5, #1
 800c52a:	d00b      	beq.n	800c544 <__pow5mult+0xa0>
 800c52c:	6820      	ldr	r0, [r4, #0]
 800c52e:	b938      	cbnz	r0, 800c540 <__pow5mult+0x9c>
 800c530:	4622      	mov	r2, r4
 800c532:	4621      	mov	r1, r4
 800c534:	4638      	mov	r0, r7
 800c536:	f7ff ff0b 	bl	800c350 <__multiply>
 800c53a:	6020      	str	r0, [r4, #0]
 800c53c:	f8c0 9000 	str.w	r9, [r0]
 800c540:	4604      	mov	r4, r0
 800c542:	e7e4      	b.n	800c50e <__pow5mult+0x6a>
 800c544:	4630      	mov	r0, r6
 800c546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54a:	bf00      	nop
 800c54c:	0800d780 	.word	0x0800d780
 800c550:	0800d6a5 	.word	0x0800d6a5
 800c554:	0800d725 	.word	0x0800d725

0800c558 <__lshift>:
 800c558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c55c:	460c      	mov	r4, r1
 800c55e:	6849      	ldr	r1, [r1, #4]
 800c560:	6923      	ldr	r3, [r4, #16]
 800c562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	4607      	mov	r7, r0
 800c56a:	4691      	mov	r9, r2
 800c56c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c570:	f108 0601 	add.w	r6, r8, #1
 800c574:	42b3      	cmp	r3, r6
 800c576:	db0b      	blt.n	800c590 <__lshift+0x38>
 800c578:	4638      	mov	r0, r7
 800c57a:	f7ff fddf 	bl	800c13c <_Balloc>
 800c57e:	4605      	mov	r5, r0
 800c580:	b948      	cbnz	r0, 800c596 <__lshift+0x3e>
 800c582:	4602      	mov	r2, r0
 800c584:	4b28      	ldr	r3, [pc, #160]	@ (800c628 <__lshift+0xd0>)
 800c586:	4829      	ldr	r0, [pc, #164]	@ (800c62c <__lshift+0xd4>)
 800c588:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c58c:	f000 fa14 	bl	800c9b8 <__assert_func>
 800c590:	3101      	adds	r1, #1
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	e7ee      	b.n	800c574 <__lshift+0x1c>
 800c596:	2300      	movs	r3, #0
 800c598:	f100 0114 	add.w	r1, r0, #20
 800c59c:	f100 0210 	add.w	r2, r0, #16
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	4553      	cmp	r3, sl
 800c5a4:	db33      	blt.n	800c60e <__lshift+0xb6>
 800c5a6:	6920      	ldr	r0, [r4, #16]
 800c5a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5ac:	f104 0314 	add.w	r3, r4, #20
 800c5b0:	f019 091f 	ands.w	r9, r9, #31
 800c5b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5bc:	d02b      	beq.n	800c616 <__lshift+0xbe>
 800c5be:	f1c9 0e20 	rsb	lr, r9, #32
 800c5c2:	468a      	mov	sl, r1
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c5cc:	4310      	orrs	r0, r2
 800c5ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d6:	459c      	cmp	ip, r3
 800c5d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5dc:	d8f3      	bhi.n	800c5c6 <__lshift+0x6e>
 800c5de:	ebac 0304 	sub.w	r3, ip, r4
 800c5e2:	3b15      	subs	r3, #21
 800c5e4:	f023 0303 	bic.w	r3, r3, #3
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	f104 0015 	add.w	r0, r4, #21
 800c5ee:	4584      	cmp	ip, r0
 800c5f0:	bf38      	it	cc
 800c5f2:	2304      	movcc	r3, #4
 800c5f4:	50ca      	str	r2, [r1, r3]
 800c5f6:	b10a      	cbz	r2, 800c5fc <__lshift+0xa4>
 800c5f8:	f108 0602 	add.w	r6, r8, #2
 800c5fc:	3e01      	subs	r6, #1
 800c5fe:	4638      	mov	r0, r7
 800c600:	612e      	str	r6, [r5, #16]
 800c602:	4621      	mov	r1, r4
 800c604:	f7ff fdda 	bl	800c1bc <_Bfree>
 800c608:	4628      	mov	r0, r5
 800c60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c60e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c612:	3301      	adds	r3, #1
 800c614:	e7c5      	b.n	800c5a2 <__lshift+0x4a>
 800c616:	3904      	subs	r1, #4
 800c618:	f853 2b04 	ldr.w	r2, [r3], #4
 800c61c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c620:	459c      	cmp	ip, r3
 800c622:	d8f9      	bhi.n	800c618 <__lshift+0xc0>
 800c624:	e7ea      	b.n	800c5fc <__lshift+0xa4>
 800c626:	bf00      	nop
 800c628:	0800d714 	.word	0x0800d714
 800c62c:	0800d725 	.word	0x0800d725

0800c630 <__mcmp>:
 800c630:	690a      	ldr	r2, [r1, #16]
 800c632:	4603      	mov	r3, r0
 800c634:	6900      	ldr	r0, [r0, #16]
 800c636:	1a80      	subs	r0, r0, r2
 800c638:	b530      	push	{r4, r5, lr}
 800c63a:	d10e      	bne.n	800c65a <__mcmp+0x2a>
 800c63c:	3314      	adds	r3, #20
 800c63e:	3114      	adds	r1, #20
 800c640:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c644:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c64c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c650:	4295      	cmp	r5, r2
 800c652:	d003      	beq.n	800c65c <__mcmp+0x2c>
 800c654:	d205      	bcs.n	800c662 <__mcmp+0x32>
 800c656:	f04f 30ff 	mov.w	r0, #4294967295
 800c65a:	bd30      	pop	{r4, r5, pc}
 800c65c:	42a3      	cmp	r3, r4
 800c65e:	d3f3      	bcc.n	800c648 <__mcmp+0x18>
 800c660:	e7fb      	b.n	800c65a <__mcmp+0x2a>
 800c662:	2001      	movs	r0, #1
 800c664:	e7f9      	b.n	800c65a <__mcmp+0x2a>
	...

0800c668 <__mdiff>:
 800c668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	4689      	mov	r9, r1
 800c66e:	4606      	mov	r6, r0
 800c670:	4611      	mov	r1, r2
 800c672:	4648      	mov	r0, r9
 800c674:	4614      	mov	r4, r2
 800c676:	f7ff ffdb 	bl	800c630 <__mcmp>
 800c67a:	1e05      	subs	r5, r0, #0
 800c67c:	d112      	bne.n	800c6a4 <__mdiff+0x3c>
 800c67e:	4629      	mov	r1, r5
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff fd5b 	bl	800c13c <_Balloc>
 800c686:	4602      	mov	r2, r0
 800c688:	b928      	cbnz	r0, 800c696 <__mdiff+0x2e>
 800c68a:	4b3f      	ldr	r3, [pc, #252]	@ (800c788 <__mdiff+0x120>)
 800c68c:	f240 2137 	movw	r1, #567	@ 0x237
 800c690:	483e      	ldr	r0, [pc, #248]	@ (800c78c <__mdiff+0x124>)
 800c692:	f000 f991 	bl	800c9b8 <__assert_func>
 800c696:	2301      	movs	r3, #1
 800c698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c69c:	4610      	mov	r0, r2
 800c69e:	b003      	add	sp, #12
 800c6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a4:	bfbc      	itt	lt
 800c6a6:	464b      	movlt	r3, r9
 800c6a8:	46a1      	movlt	r9, r4
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6b0:	bfba      	itte	lt
 800c6b2:	461c      	movlt	r4, r3
 800c6b4:	2501      	movlt	r5, #1
 800c6b6:	2500      	movge	r5, #0
 800c6b8:	f7ff fd40 	bl	800c13c <_Balloc>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	b918      	cbnz	r0, 800c6c8 <__mdiff+0x60>
 800c6c0:	4b31      	ldr	r3, [pc, #196]	@ (800c788 <__mdiff+0x120>)
 800c6c2:	f240 2145 	movw	r1, #581	@ 0x245
 800c6c6:	e7e3      	b.n	800c690 <__mdiff+0x28>
 800c6c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6cc:	6926      	ldr	r6, [r4, #16]
 800c6ce:	60c5      	str	r5, [r0, #12]
 800c6d0:	f109 0310 	add.w	r3, r9, #16
 800c6d4:	f109 0514 	add.w	r5, r9, #20
 800c6d8:	f104 0e14 	add.w	lr, r4, #20
 800c6dc:	f100 0b14 	add.w	fp, r0, #20
 800c6e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	46d9      	mov	r9, fp
 800c6ec:	f04f 0c00 	mov.w	ip, #0
 800c6f0:	9b01      	ldr	r3, [sp, #4]
 800c6f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c6f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	fa1f f38a 	uxth.w	r3, sl
 800c700:	4619      	mov	r1, r3
 800c702:	b283      	uxth	r3, r0
 800c704:	1acb      	subs	r3, r1, r3
 800c706:	0c00      	lsrs	r0, r0, #16
 800c708:	4463      	add	r3, ip
 800c70a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c70e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c712:	b29b      	uxth	r3, r3
 800c714:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c718:	4576      	cmp	r6, lr
 800c71a:	f849 3b04 	str.w	r3, [r9], #4
 800c71e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c722:	d8e5      	bhi.n	800c6f0 <__mdiff+0x88>
 800c724:	1b33      	subs	r3, r6, r4
 800c726:	3b15      	subs	r3, #21
 800c728:	f023 0303 	bic.w	r3, r3, #3
 800c72c:	3415      	adds	r4, #21
 800c72e:	3304      	adds	r3, #4
 800c730:	42a6      	cmp	r6, r4
 800c732:	bf38      	it	cc
 800c734:	2304      	movcc	r3, #4
 800c736:	441d      	add	r5, r3
 800c738:	445b      	add	r3, fp
 800c73a:	461e      	mov	r6, r3
 800c73c:	462c      	mov	r4, r5
 800c73e:	4544      	cmp	r4, r8
 800c740:	d30e      	bcc.n	800c760 <__mdiff+0xf8>
 800c742:	f108 0103 	add.w	r1, r8, #3
 800c746:	1b49      	subs	r1, r1, r5
 800c748:	f021 0103 	bic.w	r1, r1, #3
 800c74c:	3d03      	subs	r5, #3
 800c74e:	45a8      	cmp	r8, r5
 800c750:	bf38      	it	cc
 800c752:	2100      	movcc	r1, #0
 800c754:	440b      	add	r3, r1
 800c756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c75a:	b191      	cbz	r1, 800c782 <__mdiff+0x11a>
 800c75c:	6117      	str	r7, [r2, #16]
 800c75e:	e79d      	b.n	800c69c <__mdiff+0x34>
 800c760:	f854 1b04 	ldr.w	r1, [r4], #4
 800c764:	46e6      	mov	lr, ip
 800c766:	0c08      	lsrs	r0, r1, #16
 800c768:	fa1c fc81 	uxtah	ip, ip, r1
 800c76c:	4471      	add	r1, lr
 800c76e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c772:	b289      	uxth	r1, r1
 800c774:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c778:	f846 1b04 	str.w	r1, [r6], #4
 800c77c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c780:	e7dd      	b.n	800c73e <__mdiff+0xd6>
 800c782:	3f01      	subs	r7, #1
 800c784:	e7e7      	b.n	800c756 <__mdiff+0xee>
 800c786:	bf00      	nop
 800c788:	0800d714 	.word	0x0800d714
 800c78c:	0800d725 	.word	0x0800d725

0800c790 <__d2b>:
 800c790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c794:	460f      	mov	r7, r1
 800c796:	2101      	movs	r1, #1
 800c798:	ec59 8b10 	vmov	r8, r9, d0
 800c79c:	4616      	mov	r6, r2
 800c79e:	f7ff fccd 	bl	800c13c <_Balloc>
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	b930      	cbnz	r0, 800c7b4 <__d2b+0x24>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	4b23      	ldr	r3, [pc, #140]	@ (800c838 <__d2b+0xa8>)
 800c7aa:	4824      	ldr	r0, [pc, #144]	@ (800c83c <__d2b+0xac>)
 800c7ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800c7b0:	f000 f902 	bl	800c9b8 <__assert_func>
 800c7b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c7b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7bc:	b10d      	cbz	r5, 800c7c2 <__d2b+0x32>
 800c7be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c7c2:	9301      	str	r3, [sp, #4]
 800c7c4:	f1b8 0300 	subs.w	r3, r8, #0
 800c7c8:	d023      	beq.n	800c812 <__d2b+0x82>
 800c7ca:	4668      	mov	r0, sp
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	f7ff fd7c 	bl	800c2ca <__lo0bits>
 800c7d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c7d6:	b1d0      	cbz	r0, 800c80e <__d2b+0x7e>
 800c7d8:	f1c0 0320 	rsb	r3, r0, #32
 800c7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7e0:	430b      	orrs	r3, r1
 800c7e2:	40c2      	lsrs	r2, r0
 800c7e4:	6163      	str	r3, [r4, #20]
 800c7e6:	9201      	str	r2, [sp, #4]
 800c7e8:	9b01      	ldr	r3, [sp, #4]
 800c7ea:	61a3      	str	r3, [r4, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bf0c      	ite	eq
 800c7f0:	2201      	moveq	r2, #1
 800c7f2:	2202      	movne	r2, #2
 800c7f4:	6122      	str	r2, [r4, #16]
 800c7f6:	b1a5      	cbz	r5, 800c822 <__d2b+0x92>
 800c7f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c7fc:	4405      	add	r5, r0
 800c7fe:	603d      	str	r5, [r7, #0]
 800c800:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c804:	6030      	str	r0, [r6, #0]
 800c806:	4620      	mov	r0, r4
 800c808:	b003      	add	sp, #12
 800c80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c80e:	6161      	str	r1, [r4, #20]
 800c810:	e7ea      	b.n	800c7e8 <__d2b+0x58>
 800c812:	a801      	add	r0, sp, #4
 800c814:	f7ff fd59 	bl	800c2ca <__lo0bits>
 800c818:	9b01      	ldr	r3, [sp, #4]
 800c81a:	6163      	str	r3, [r4, #20]
 800c81c:	3020      	adds	r0, #32
 800c81e:	2201      	movs	r2, #1
 800c820:	e7e8      	b.n	800c7f4 <__d2b+0x64>
 800c822:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c826:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c82a:	6038      	str	r0, [r7, #0]
 800c82c:	6918      	ldr	r0, [r3, #16]
 800c82e:	f7ff fd2d 	bl	800c28c <__hi0bits>
 800c832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c836:	e7e5      	b.n	800c804 <__d2b+0x74>
 800c838:	0800d714 	.word	0x0800d714
 800c83c:	0800d725 	.word	0x0800d725

0800c840 <__sflush_r>:
 800c840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c848:	0716      	lsls	r6, r2, #28
 800c84a:	4605      	mov	r5, r0
 800c84c:	460c      	mov	r4, r1
 800c84e:	d454      	bmi.n	800c8fa <__sflush_r+0xba>
 800c850:	684b      	ldr	r3, [r1, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	dc02      	bgt.n	800c85c <__sflush_r+0x1c>
 800c856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c858:	2b00      	cmp	r3, #0
 800c85a:	dd48      	ble.n	800c8ee <__sflush_r+0xae>
 800c85c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c85e:	2e00      	cmp	r6, #0
 800c860:	d045      	beq.n	800c8ee <__sflush_r+0xae>
 800c862:	2300      	movs	r3, #0
 800c864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c868:	682f      	ldr	r7, [r5, #0]
 800c86a:	6a21      	ldr	r1, [r4, #32]
 800c86c:	602b      	str	r3, [r5, #0]
 800c86e:	d030      	beq.n	800c8d2 <__sflush_r+0x92>
 800c870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	0759      	lsls	r1, r3, #29
 800c876:	d505      	bpl.n	800c884 <__sflush_r+0x44>
 800c878:	6863      	ldr	r3, [r4, #4]
 800c87a:	1ad2      	subs	r2, r2, r3
 800c87c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c87e:	b10b      	cbz	r3, 800c884 <__sflush_r+0x44>
 800c880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c882:	1ad2      	subs	r2, r2, r3
 800c884:	2300      	movs	r3, #0
 800c886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c888:	6a21      	ldr	r1, [r4, #32]
 800c88a:	4628      	mov	r0, r5
 800c88c:	47b0      	blx	r6
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	d106      	bne.n	800c8a2 <__sflush_r+0x62>
 800c894:	6829      	ldr	r1, [r5, #0]
 800c896:	291d      	cmp	r1, #29
 800c898:	d82b      	bhi.n	800c8f2 <__sflush_r+0xb2>
 800c89a:	4a2a      	ldr	r2, [pc, #168]	@ (800c944 <__sflush_r+0x104>)
 800c89c:	410a      	asrs	r2, r1
 800c89e:	07d6      	lsls	r6, r2, #31
 800c8a0:	d427      	bmi.n	800c8f2 <__sflush_r+0xb2>
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	6062      	str	r2, [r4, #4]
 800c8a6:	04d9      	lsls	r1, r3, #19
 800c8a8:	6922      	ldr	r2, [r4, #16]
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	d504      	bpl.n	800c8b8 <__sflush_r+0x78>
 800c8ae:	1c42      	adds	r2, r0, #1
 800c8b0:	d101      	bne.n	800c8b6 <__sflush_r+0x76>
 800c8b2:	682b      	ldr	r3, [r5, #0]
 800c8b4:	b903      	cbnz	r3, 800c8b8 <__sflush_r+0x78>
 800c8b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ba:	602f      	str	r7, [r5, #0]
 800c8bc:	b1b9      	cbz	r1, 800c8ee <__sflush_r+0xae>
 800c8be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8c2:	4299      	cmp	r1, r3
 800c8c4:	d002      	beq.n	800c8cc <__sflush_r+0x8c>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f7ff fb38 	bl	800bf3c <_free_r>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8d0:	e00d      	b.n	800c8ee <__sflush_r+0xae>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	47b0      	blx	r6
 800c8d8:	4602      	mov	r2, r0
 800c8da:	1c50      	adds	r0, r2, #1
 800c8dc:	d1c9      	bne.n	800c872 <__sflush_r+0x32>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0c6      	beq.n	800c872 <__sflush_r+0x32>
 800c8e4:	2b1d      	cmp	r3, #29
 800c8e6:	d001      	beq.n	800c8ec <__sflush_r+0xac>
 800c8e8:	2b16      	cmp	r3, #22
 800c8ea:	d11e      	bne.n	800c92a <__sflush_r+0xea>
 800c8ec:	602f      	str	r7, [r5, #0]
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	e022      	b.n	800c938 <__sflush_r+0xf8>
 800c8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	e01b      	b.n	800c932 <__sflush_r+0xf2>
 800c8fa:	690f      	ldr	r7, [r1, #16]
 800c8fc:	2f00      	cmp	r7, #0
 800c8fe:	d0f6      	beq.n	800c8ee <__sflush_r+0xae>
 800c900:	0793      	lsls	r3, r2, #30
 800c902:	680e      	ldr	r6, [r1, #0]
 800c904:	bf08      	it	eq
 800c906:	694b      	ldreq	r3, [r1, #20]
 800c908:	600f      	str	r7, [r1, #0]
 800c90a:	bf18      	it	ne
 800c90c:	2300      	movne	r3, #0
 800c90e:	eba6 0807 	sub.w	r8, r6, r7
 800c912:	608b      	str	r3, [r1, #8]
 800c914:	f1b8 0f00 	cmp.w	r8, #0
 800c918:	dde9      	ble.n	800c8ee <__sflush_r+0xae>
 800c91a:	6a21      	ldr	r1, [r4, #32]
 800c91c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c91e:	4643      	mov	r3, r8
 800c920:	463a      	mov	r2, r7
 800c922:	4628      	mov	r0, r5
 800c924:	47b0      	blx	r6
 800c926:	2800      	cmp	r0, #0
 800c928:	dc08      	bgt.n	800c93c <__sflush_r+0xfc>
 800c92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c932:	81a3      	strh	r3, [r4, #12]
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93c:	4407      	add	r7, r0
 800c93e:	eba8 0800 	sub.w	r8, r8, r0
 800c942:	e7e7      	b.n	800c914 <__sflush_r+0xd4>
 800c944:	dfbffffe 	.word	0xdfbffffe

0800c948 <_fflush_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	690b      	ldr	r3, [r1, #16]
 800c94c:	4605      	mov	r5, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	b913      	cbnz	r3, 800c958 <_fflush_r+0x10>
 800c952:	2500      	movs	r5, #0
 800c954:	4628      	mov	r0, r5
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	b118      	cbz	r0, 800c962 <_fflush_r+0x1a>
 800c95a:	6a03      	ldr	r3, [r0, #32]
 800c95c:	b90b      	cbnz	r3, 800c962 <_fflush_r+0x1a>
 800c95e:	f7fe fbaf 	bl	800b0c0 <__sinit>
 800c962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0f3      	beq.n	800c952 <_fflush_r+0xa>
 800c96a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c96c:	07d0      	lsls	r0, r2, #31
 800c96e:	d404      	bmi.n	800c97a <_fflush_r+0x32>
 800c970:	0599      	lsls	r1, r3, #22
 800c972:	d402      	bmi.n	800c97a <_fflush_r+0x32>
 800c974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c976:	f7fe fcf0 	bl	800b35a <__retarget_lock_acquire_recursive>
 800c97a:	4628      	mov	r0, r5
 800c97c:	4621      	mov	r1, r4
 800c97e:	f7ff ff5f 	bl	800c840 <__sflush_r>
 800c982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c984:	07da      	lsls	r2, r3, #31
 800c986:	4605      	mov	r5, r0
 800c988:	d4e4      	bmi.n	800c954 <_fflush_r+0xc>
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	059b      	lsls	r3, r3, #22
 800c98e:	d4e1      	bmi.n	800c954 <_fflush_r+0xc>
 800c990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c992:	f7fe fce3 	bl	800b35c <__retarget_lock_release_recursive>
 800c996:	e7dd      	b.n	800c954 <_fflush_r+0xc>

0800c998 <_sbrk_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d06      	ldr	r5, [pc, #24]	@ (800c9b4 <_sbrk_r+0x1c>)
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	602b      	str	r3, [r5, #0]
 800c9a4:	f7f6 f936 	bl	8002c14 <_sbrk>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_sbrk_r+0x1a>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_sbrk_r+0x1a>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	200055c0 	.word	0x200055c0

0800c9b8 <__assert_func>:
 800c9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ba:	4614      	mov	r4, r2
 800c9bc:	461a      	mov	r2, r3
 800c9be:	4b09      	ldr	r3, [pc, #36]	@ (800c9e4 <__assert_func+0x2c>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	68d8      	ldr	r0, [r3, #12]
 800c9c6:	b954      	cbnz	r4, 800c9de <__assert_func+0x26>
 800c9c8:	4b07      	ldr	r3, [pc, #28]	@ (800c9e8 <__assert_func+0x30>)
 800c9ca:	461c      	mov	r4, r3
 800c9cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9d0:	9100      	str	r1, [sp, #0]
 800c9d2:	462b      	mov	r3, r5
 800c9d4:	4905      	ldr	r1, [pc, #20]	@ (800c9ec <__assert_func+0x34>)
 800c9d6:	f000 f841 	bl	800ca5c <fiprintf>
 800c9da:	f000 f851 	bl	800ca80 <abort>
 800c9de:	4b04      	ldr	r3, [pc, #16]	@ (800c9f0 <__assert_func+0x38>)
 800c9e0:	e7f4      	b.n	800c9cc <__assert_func+0x14>
 800c9e2:	bf00      	nop
 800c9e4:	20000074 	.word	0x20000074
 800c9e8:	0800d8c5 	.word	0x0800d8c5
 800c9ec:	0800d897 	.word	0x0800d897
 800c9f0:	0800d88a 	.word	0x0800d88a

0800c9f4 <_calloc_r>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	fba1 5402 	umull	r5, r4, r1, r2
 800c9fa:	b93c      	cbnz	r4, 800ca0c <_calloc_r+0x18>
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	f7ff fb11 	bl	800c024 <_malloc_r>
 800ca02:	4606      	mov	r6, r0
 800ca04:	b928      	cbnz	r0, 800ca12 <_calloc_r+0x1e>
 800ca06:	2600      	movs	r6, #0
 800ca08:	4630      	mov	r0, r6
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
 800ca0c:	220c      	movs	r2, #12
 800ca0e:	6002      	str	r2, [r0, #0]
 800ca10:	e7f9      	b.n	800ca06 <_calloc_r+0x12>
 800ca12:	462a      	mov	r2, r5
 800ca14:	4621      	mov	r1, r4
 800ca16:	f7fe fbcc 	bl	800b1b2 <memset>
 800ca1a:	e7f5      	b.n	800ca08 <_calloc_r+0x14>

0800ca1c <__ascii_mbtowc>:
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	b901      	cbnz	r1, 800ca22 <__ascii_mbtowc+0x6>
 800ca20:	a901      	add	r1, sp, #4
 800ca22:	b142      	cbz	r2, 800ca36 <__ascii_mbtowc+0x1a>
 800ca24:	b14b      	cbz	r3, 800ca3a <__ascii_mbtowc+0x1e>
 800ca26:	7813      	ldrb	r3, [r2, #0]
 800ca28:	600b      	str	r3, [r1, #0]
 800ca2a:	7812      	ldrb	r2, [r2, #0]
 800ca2c:	1e10      	subs	r0, r2, #0
 800ca2e:	bf18      	it	ne
 800ca30:	2001      	movne	r0, #1
 800ca32:	b002      	add	sp, #8
 800ca34:	4770      	bx	lr
 800ca36:	4610      	mov	r0, r2
 800ca38:	e7fb      	b.n	800ca32 <__ascii_mbtowc+0x16>
 800ca3a:	f06f 0001 	mvn.w	r0, #1
 800ca3e:	e7f8      	b.n	800ca32 <__ascii_mbtowc+0x16>

0800ca40 <__ascii_wctomb>:
 800ca40:	4603      	mov	r3, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	b141      	cbz	r1, 800ca58 <__ascii_wctomb+0x18>
 800ca46:	2aff      	cmp	r2, #255	@ 0xff
 800ca48:	d904      	bls.n	800ca54 <__ascii_wctomb+0x14>
 800ca4a:	228a      	movs	r2, #138	@ 0x8a
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca52:	4770      	bx	lr
 800ca54:	700a      	strb	r2, [r1, #0]
 800ca56:	2001      	movs	r0, #1
 800ca58:	4770      	bx	lr
	...

0800ca5c <fiprintf>:
 800ca5c:	b40e      	push	{r1, r2, r3}
 800ca5e:	b503      	push	{r0, r1, lr}
 800ca60:	4601      	mov	r1, r0
 800ca62:	ab03      	add	r3, sp, #12
 800ca64:	4805      	ldr	r0, [pc, #20]	@ (800ca7c <fiprintf+0x20>)
 800ca66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca6a:	6800      	ldr	r0, [r0, #0]
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	f000 f837 	bl	800cae0 <_vfiprintf_r>
 800ca72:	b002      	add	sp, #8
 800ca74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca78:	b003      	add	sp, #12
 800ca7a:	4770      	bx	lr
 800ca7c:	20000074 	.word	0x20000074

0800ca80 <abort>:
 800ca80:	b508      	push	{r3, lr}
 800ca82:	2006      	movs	r0, #6
 800ca84:	f000 fa00 	bl	800ce88 <raise>
 800ca88:	2001      	movs	r0, #1
 800ca8a:	f7f6 f84b 	bl	8002b24 <_exit>

0800ca8e <__sfputc_r>:
 800ca8e:	6893      	ldr	r3, [r2, #8]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	b410      	push	{r4}
 800ca96:	6093      	str	r3, [r2, #8]
 800ca98:	da08      	bge.n	800caac <__sfputc_r+0x1e>
 800ca9a:	6994      	ldr	r4, [r2, #24]
 800ca9c:	42a3      	cmp	r3, r4
 800ca9e:	db01      	blt.n	800caa4 <__sfputc_r+0x16>
 800caa0:	290a      	cmp	r1, #10
 800caa2:	d103      	bne.n	800caac <__sfputc_r+0x1e>
 800caa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caa8:	f000 b932 	b.w	800cd10 <__swbuf_r>
 800caac:	6813      	ldr	r3, [r2, #0]
 800caae:	1c58      	adds	r0, r3, #1
 800cab0:	6010      	str	r0, [r2, #0]
 800cab2:	7019      	strb	r1, [r3, #0]
 800cab4:	4608      	mov	r0, r1
 800cab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <__sfputs_r>:
 800cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cabe:	4606      	mov	r6, r0
 800cac0:	460f      	mov	r7, r1
 800cac2:	4614      	mov	r4, r2
 800cac4:	18d5      	adds	r5, r2, r3
 800cac6:	42ac      	cmp	r4, r5
 800cac8:	d101      	bne.n	800cace <__sfputs_r+0x12>
 800caca:	2000      	movs	r0, #0
 800cacc:	e007      	b.n	800cade <__sfputs_r+0x22>
 800cace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad2:	463a      	mov	r2, r7
 800cad4:	4630      	mov	r0, r6
 800cad6:	f7ff ffda 	bl	800ca8e <__sfputc_r>
 800cada:	1c43      	adds	r3, r0, #1
 800cadc:	d1f3      	bne.n	800cac6 <__sfputs_r+0xa>
 800cade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cae0 <_vfiprintf_r>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	460d      	mov	r5, r1
 800cae6:	b09d      	sub	sp, #116	@ 0x74
 800cae8:	4614      	mov	r4, r2
 800caea:	4698      	mov	r8, r3
 800caec:	4606      	mov	r6, r0
 800caee:	b118      	cbz	r0, 800caf8 <_vfiprintf_r+0x18>
 800caf0:	6a03      	ldr	r3, [r0, #32]
 800caf2:	b90b      	cbnz	r3, 800caf8 <_vfiprintf_r+0x18>
 800caf4:	f7fe fae4 	bl	800b0c0 <__sinit>
 800caf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cafa:	07d9      	lsls	r1, r3, #31
 800cafc:	d405      	bmi.n	800cb0a <_vfiprintf_r+0x2a>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	059a      	lsls	r2, r3, #22
 800cb02:	d402      	bmi.n	800cb0a <_vfiprintf_r+0x2a>
 800cb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb06:	f7fe fc28 	bl	800b35a <__retarget_lock_acquire_recursive>
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	071b      	lsls	r3, r3, #28
 800cb0e:	d501      	bpl.n	800cb14 <_vfiprintf_r+0x34>
 800cb10:	692b      	ldr	r3, [r5, #16]
 800cb12:	b99b      	cbnz	r3, 800cb3c <_vfiprintf_r+0x5c>
 800cb14:	4629      	mov	r1, r5
 800cb16:	4630      	mov	r0, r6
 800cb18:	f000 f938 	bl	800cd8c <__swsetup_r>
 800cb1c:	b170      	cbz	r0, 800cb3c <_vfiprintf_r+0x5c>
 800cb1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb20:	07dc      	lsls	r4, r3, #31
 800cb22:	d504      	bpl.n	800cb2e <_vfiprintf_r+0x4e>
 800cb24:	f04f 30ff 	mov.w	r0, #4294967295
 800cb28:	b01d      	add	sp, #116	@ 0x74
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	0598      	lsls	r0, r3, #22
 800cb32:	d4f7      	bmi.n	800cb24 <_vfiprintf_r+0x44>
 800cb34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb36:	f7fe fc11 	bl	800b35c <__retarget_lock_release_recursive>
 800cb3a:	e7f3      	b.n	800cb24 <_vfiprintf_r+0x44>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb40:	2320      	movs	r3, #32
 800cb42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb46:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb4a:	2330      	movs	r3, #48	@ 0x30
 800cb4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ccfc <_vfiprintf_r+0x21c>
 800cb50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb54:	f04f 0901 	mov.w	r9, #1
 800cb58:	4623      	mov	r3, r4
 800cb5a:	469a      	mov	sl, r3
 800cb5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb60:	b10a      	cbz	r2, 800cb66 <_vfiprintf_r+0x86>
 800cb62:	2a25      	cmp	r2, #37	@ 0x25
 800cb64:	d1f9      	bne.n	800cb5a <_vfiprintf_r+0x7a>
 800cb66:	ebba 0b04 	subs.w	fp, sl, r4
 800cb6a:	d00b      	beq.n	800cb84 <_vfiprintf_r+0xa4>
 800cb6c:	465b      	mov	r3, fp
 800cb6e:	4622      	mov	r2, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7ff ffa2 	bl	800cabc <__sfputs_r>
 800cb78:	3001      	adds	r0, #1
 800cb7a:	f000 80a7 	beq.w	800cccc <_vfiprintf_r+0x1ec>
 800cb7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb80:	445a      	add	r2, fp
 800cb82:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb84:	f89a 3000 	ldrb.w	r3, [sl]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 809f 	beq.w	800cccc <_vfiprintf_r+0x1ec>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295
 800cb94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb98:	f10a 0a01 	add.w	sl, sl, #1
 800cb9c:	9304      	str	r3, [sp, #16]
 800cb9e:	9307      	str	r3, [sp, #28]
 800cba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cba4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cba6:	4654      	mov	r4, sl
 800cba8:	2205      	movs	r2, #5
 800cbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbae:	4853      	ldr	r0, [pc, #332]	@ (800ccfc <_vfiprintf_r+0x21c>)
 800cbb0:	f7f3 fb46 	bl	8000240 <memchr>
 800cbb4:	9a04      	ldr	r2, [sp, #16]
 800cbb6:	b9d8      	cbnz	r0, 800cbf0 <_vfiprintf_r+0x110>
 800cbb8:	06d1      	lsls	r1, r2, #27
 800cbba:	bf44      	itt	mi
 800cbbc:	2320      	movmi	r3, #32
 800cbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbc2:	0713      	lsls	r3, r2, #28
 800cbc4:	bf44      	itt	mi
 800cbc6:	232b      	movmi	r3, #43	@ 0x2b
 800cbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbcc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbd2:	d015      	beq.n	800cc00 <_vfiprintf_r+0x120>
 800cbd4:	9a07      	ldr	r2, [sp, #28]
 800cbd6:	4654      	mov	r4, sl
 800cbd8:	2000      	movs	r0, #0
 800cbda:	f04f 0c0a 	mov.w	ip, #10
 800cbde:	4621      	mov	r1, r4
 800cbe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbe4:	3b30      	subs	r3, #48	@ 0x30
 800cbe6:	2b09      	cmp	r3, #9
 800cbe8:	d94b      	bls.n	800cc82 <_vfiprintf_r+0x1a2>
 800cbea:	b1b0      	cbz	r0, 800cc1a <_vfiprintf_r+0x13a>
 800cbec:	9207      	str	r2, [sp, #28]
 800cbee:	e014      	b.n	800cc1a <_vfiprintf_r+0x13a>
 800cbf0:	eba0 0308 	sub.w	r3, r0, r8
 800cbf4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	46a2      	mov	sl, r4
 800cbfe:	e7d2      	b.n	800cba6 <_vfiprintf_r+0xc6>
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	1d19      	adds	r1, r3, #4
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	9103      	str	r1, [sp, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	bfbb      	ittet	lt
 800cc0c:	425b      	neglt	r3, r3
 800cc0e:	f042 0202 	orrlt.w	r2, r2, #2
 800cc12:	9307      	strge	r3, [sp, #28]
 800cc14:	9307      	strlt	r3, [sp, #28]
 800cc16:	bfb8      	it	lt
 800cc18:	9204      	strlt	r2, [sp, #16]
 800cc1a:	7823      	ldrb	r3, [r4, #0]
 800cc1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc1e:	d10a      	bne.n	800cc36 <_vfiprintf_r+0x156>
 800cc20:	7863      	ldrb	r3, [r4, #1]
 800cc22:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc24:	d132      	bne.n	800cc8c <_vfiprintf_r+0x1ac>
 800cc26:	9b03      	ldr	r3, [sp, #12]
 800cc28:	1d1a      	adds	r2, r3, #4
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	9203      	str	r2, [sp, #12]
 800cc2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc32:	3402      	adds	r4, #2
 800cc34:	9305      	str	r3, [sp, #20]
 800cc36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cd0c <_vfiprintf_r+0x22c>
 800cc3a:	7821      	ldrb	r1, [r4, #0]
 800cc3c:	2203      	movs	r2, #3
 800cc3e:	4650      	mov	r0, sl
 800cc40:	f7f3 fafe 	bl	8000240 <memchr>
 800cc44:	b138      	cbz	r0, 800cc56 <_vfiprintf_r+0x176>
 800cc46:	9b04      	ldr	r3, [sp, #16]
 800cc48:	eba0 000a 	sub.w	r0, r0, sl
 800cc4c:	2240      	movs	r2, #64	@ 0x40
 800cc4e:	4082      	lsls	r2, r0
 800cc50:	4313      	orrs	r3, r2
 800cc52:	3401      	adds	r4, #1
 800cc54:	9304      	str	r3, [sp, #16]
 800cc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc5a:	4829      	ldr	r0, [pc, #164]	@ (800cd00 <_vfiprintf_r+0x220>)
 800cc5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc60:	2206      	movs	r2, #6
 800cc62:	f7f3 faed 	bl	8000240 <memchr>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d03f      	beq.n	800ccea <_vfiprintf_r+0x20a>
 800cc6a:	4b26      	ldr	r3, [pc, #152]	@ (800cd04 <_vfiprintf_r+0x224>)
 800cc6c:	bb1b      	cbnz	r3, 800ccb6 <_vfiprintf_r+0x1d6>
 800cc6e:	9b03      	ldr	r3, [sp, #12]
 800cc70:	3307      	adds	r3, #7
 800cc72:	f023 0307 	bic.w	r3, r3, #7
 800cc76:	3308      	adds	r3, #8
 800cc78:	9303      	str	r3, [sp, #12]
 800cc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc7c:	443b      	add	r3, r7
 800cc7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc80:	e76a      	b.n	800cb58 <_vfiprintf_r+0x78>
 800cc82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc86:	460c      	mov	r4, r1
 800cc88:	2001      	movs	r0, #1
 800cc8a:	e7a8      	b.n	800cbde <_vfiprintf_r+0xfe>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	3401      	adds	r4, #1
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	4619      	mov	r1, r3
 800cc94:	f04f 0c0a 	mov.w	ip, #10
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc9e:	3a30      	subs	r2, #48	@ 0x30
 800cca0:	2a09      	cmp	r2, #9
 800cca2:	d903      	bls.n	800ccac <_vfiprintf_r+0x1cc>
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0c6      	beq.n	800cc36 <_vfiprintf_r+0x156>
 800cca8:	9105      	str	r1, [sp, #20]
 800ccaa:	e7c4      	b.n	800cc36 <_vfiprintf_r+0x156>
 800ccac:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e7f0      	b.n	800cc98 <_vfiprintf_r+0x1b8>
 800ccb6:	ab03      	add	r3, sp, #12
 800ccb8:	9300      	str	r3, [sp, #0]
 800ccba:	462a      	mov	r2, r5
 800ccbc:	4b12      	ldr	r3, [pc, #72]	@ (800cd08 <_vfiprintf_r+0x228>)
 800ccbe:	a904      	add	r1, sp, #16
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7fd fdc9 	bl	800a858 <_printf_float>
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	1c78      	adds	r0, r7, #1
 800ccca:	d1d6      	bne.n	800cc7a <_vfiprintf_r+0x19a>
 800cccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccce:	07d9      	lsls	r1, r3, #31
 800ccd0:	d405      	bmi.n	800ccde <_vfiprintf_r+0x1fe>
 800ccd2:	89ab      	ldrh	r3, [r5, #12]
 800ccd4:	059a      	lsls	r2, r3, #22
 800ccd6:	d402      	bmi.n	800ccde <_vfiprintf_r+0x1fe>
 800ccd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccda:	f7fe fb3f 	bl	800b35c <__retarget_lock_release_recursive>
 800ccde:	89ab      	ldrh	r3, [r5, #12]
 800cce0:	065b      	lsls	r3, r3, #25
 800cce2:	f53f af1f 	bmi.w	800cb24 <_vfiprintf_r+0x44>
 800cce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cce8:	e71e      	b.n	800cb28 <_vfiprintf_r+0x48>
 800ccea:	ab03      	add	r3, sp, #12
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	462a      	mov	r2, r5
 800ccf0:	4b05      	ldr	r3, [pc, #20]	@ (800cd08 <_vfiprintf_r+0x228>)
 800ccf2:	a904      	add	r1, sp, #16
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7fe f837 	bl	800ad68 <_printf_i>
 800ccfa:	e7e4      	b.n	800ccc6 <_vfiprintf_r+0x1e6>
 800ccfc:	0800d9c7 	.word	0x0800d9c7
 800cd00:	0800d9d1 	.word	0x0800d9d1
 800cd04:	0800a859 	.word	0x0800a859
 800cd08:	0800cabd 	.word	0x0800cabd
 800cd0c:	0800d9cd 	.word	0x0800d9cd

0800cd10 <__swbuf_r>:
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd12:	460e      	mov	r6, r1
 800cd14:	4614      	mov	r4, r2
 800cd16:	4605      	mov	r5, r0
 800cd18:	b118      	cbz	r0, 800cd22 <__swbuf_r+0x12>
 800cd1a:	6a03      	ldr	r3, [r0, #32]
 800cd1c:	b90b      	cbnz	r3, 800cd22 <__swbuf_r+0x12>
 800cd1e:	f7fe f9cf 	bl	800b0c0 <__sinit>
 800cd22:	69a3      	ldr	r3, [r4, #24]
 800cd24:	60a3      	str	r3, [r4, #8]
 800cd26:	89a3      	ldrh	r3, [r4, #12]
 800cd28:	071a      	lsls	r2, r3, #28
 800cd2a:	d501      	bpl.n	800cd30 <__swbuf_r+0x20>
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	b943      	cbnz	r3, 800cd42 <__swbuf_r+0x32>
 800cd30:	4621      	mov	r1, r4
 800cd32:	4628      	mov	r0, r5
 800cd34:	f000 f82a 	bl	800cd8c <__swsetup_r>
 800cd38:	b118      	cbz	r0, 800cd42 <__swbuf_r+0x32>
 800cd3a:	f04f 37ff 	mov.w	r7, #4294967295
 800cd3e:	4638      	mov	r0, r7
 800cd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	6922      	ldr	r2, [r4, #16]
 800cd46:	1a98      	subs	r0, r3, r2
 800cd48:	6963      	ldr	r3, [r4, #20]
 800cd4a:	b2f6      	uxtb	r6, r6
 800cd4c:	4283      	cmp	r3, r0
 800cd4e:	4637      	mov	r7, r6
 800cd50:	dc05      	bgt.n	800cd5e <__swbuf_r+0x4e>
 800cd52:	4621      	mov	r1, r4
 800cd54:	4628      	mov	r0, r5
 800cd56:	f7ff fdf7 	bl	800c948 <_fflush_r>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d1ed      	bne.n	800cd3a <__swbuf_r+0x2a>
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	60a3      	str	r3, [r4, #8]
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	6022      	str	r2, [r4, #0]
 800cd6a:	701e      	strb	r6, [r3, #0]
 800cd6c:	6962      	ldr	r2, [r4, #20]
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d004      	beq.n	800cd7e <__swbuf_r+0x6e>
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	07db      	lsls	r3, r3, #31
 800cd78:	d5e1      	bpl.n	800cd3e <__swbuf_r+0x2e>
 800cd7a:	2e0a      	cmp	r6, #10
 800cd7c:	d1df      	bne.n	800cd3e <__swbuf_r+0x2e>
 800cd7e:	4621      	mov	r1, r4
 800cd80:	4628      	mov	r0, r5
 800cd82:	f7ff fde1 	bl	800c948 <_fflush_r>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d0d9      	beq.n	800cd3e <__swbuf_r+0x2e>
 800cd8a:	e7d6      	b.n	800cd3a <__swbuf_r+0x2a>

0800cd8c <__swsetup_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4b29      	ldr	r3, [pc, #164]	@ (800ce34 <__swsetup_r+0xa8>)
 800cd90:	4605      	mov	r5, r0
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	460c      	mov	r4, r1
 800cd96:	b118      	cbz	r0, 800cda0 <__swsetup_r+0x14>
 800cd98:	6a03      	ldr	r3, [r0, #32]
 800cd9a:	b90b      	cbnz	r3, 800cda0 <__swsetup_r+0x14>
 800cd9c:	f7fe f990 	bl	800b0c0 <__sinit>
 800cda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda4:	0719      	lsls	r1, r3, #28
 800cda6:	d422      	bmi.n	800cdee <__swsetup_r+0x62>
 800cda8:	06da      	lsls	r2, r3, #27
 800cdaa:	d407      	bmi.n	800cdbc <__swsetup_r+0x30>
 800cdac:	2209      	movs	r2, #9
 800cdae:	602a      	str	r2, [r5, #0]
 800cdb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdb4:	81a3      	strh	r3, [r4, #12]
 800cdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdba:	e033      	b.n	800ce24 <__swsetup_r+0x98>
 800cdbc:	0758      	lsls	r0, r3, #29
 800cdbe:	d512      	bpl.n	800cde6 <__swsetup_r+0x5a>
 800cdc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdc2:	b141      	cbz	r1, 800cdd6 <__swsetup_r+0x4a>
 800cdc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdc8:	4299      	cmp	r1, r3
 800cdca:	d002      	beq.n	800cdd2 <__swsetup_r+0x46>
 800cdcc:	4628      	mov	r0, r5
 800cdce:	f7ff f8b5 	bl	800bf3c <_free_r>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	2300      	movs	r3, #0
 800cde0:	6063      	str	r3, [r4, #4]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	f043 0308 	orr.w	r3, r3, #8
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	b94b      	cbnz	r3, 800ce06 <__swsetup_r+0x7a>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cdf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdfc:	d003      	beq.n	800ce06 <__swsetup_r+0x7a>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4628      	mov	r0, r5
 800ce02:	f000 f883 	bl	800cf0c <__smakebuf_r>
 800ce06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce0a:	f013 0201 	ands.w	r2, r3, #1
 800ce0e:	d00a      	beq.n	800ce26 <__swsetup_r+0x9a>
 800ce10:	2200      	movs	r2, #0
 800ce12:	60a2      	str	r2, [r4, #8]
 800ce14:	6962      	ldr	r2, [r4, #20]
 800ce16:	4252      	negs	r2, r2
 800ce18:	61a2      	str	r2, [r4, #24]
 800ce1a:	6922      	ldr	r2, [r4, #16]
 800ce1c:	b942      	cbnz	r2, 800ce30 <__swsetup_r+0xa4>
 800ce1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce22:	d1c5      	bne.n	800cdb0 <__swsetup_r+0x24>
 800ce24:	bd38      	pop	{r3, r4, r5, pc}
 800ce26:	0799      	lsls	r1, r3, #30
 800ce28:	bf58      	it	pl
 800ce2a:	6962      	ldrpl	r2, [r4, #20]
 800ce2c:	60a2      	str	r2, [r4, #8]
 800ce2e:	e7f4      	b.n	800ce1a <__swsetup_r+0x8e>
 800ce30:	2000      	movs	r0, #0
 800ce32:	e7f7      	b.n	800ce24 <__swsetup_r+0x98>
 800ce34:	20000074 	.word	0x20000074

0800ce38 <_raise_r>:
 800ce38:	291f      	cmp	r1, #31
 800ce3a:	b538      	push	{r3, r4, r5, lr}
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	460c      	mov	r4, r1
 800ce40:	d904      	bls.n	800ce4c <_raise_r+0x14>
 800ce42:	2316      	movs	r3, #22
 800ce44:	6003      	str	r3, [r0, #0]
 800ce46:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}
 800ce4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce4e:	b112      	cbz	r2, 800ce56 <_raise_r+0x1e>
 800ce50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce54:	b94b      	cbnz	r3, 800ce6a <_raise_r+0x32>
 800ce56:	4628      	mov	r0, r5
 800ce58:	f000 f830 	bl	800cebc <_getpid_r>
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4601      	mov	r1, r0
 800ce60:	4628      	mov	r0, r5
 800ce62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce66:	f000 b817 	b.w	800ce98 <_kill_r>
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d00a      	beq.n	800ce84 <_raise_r+0x4c>
 800ce6e:	1c59      	adds	r1, r3, #1
 800ce70:	d103      	bne.n	800ce7a <_raise_r+0x42>
 800ce72:	2316      	movs	r3, #22
 800ce74:	6003      	str	r3, [r0, #0]
 800ce76:	2001      	movs	r0, #1
 800ce78:	e7e7      	b.n	800ce4a <_raise_r+0x12>
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ce80:	4620      	mov	r0, r4
 800ce82:	4798      	blx	r3
 800ce84:	2000      	movs	r0, #0
 800ce86:	e7e0      	b.n	800ce4a <_raise_r+0x12>

0800ce88 <raise>:
 800ce88:	4b02      	ldr	r3, [pc, #8]	@ (800ce94 <raise+0xc>)
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f7ff bfd3 	b.w	800ce38 <_raise_r>
 800ce92:	bf00      	nop
 800ce94:	20000074 	.word	0x20000074

0800ce98 <_kill_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d07      	ldr	r5, [pc, #28]	@ (800ceb8 <_kill_r+0x20>)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	602b      	str	r3, [r5, #0]
 800cea6:	f7f5 fe2d 	bl	8002b04 <_kill>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	d102      	bne.n	800ceb4 <_kill_r+0x1c>
 800ceae:	682b      	ldr	r3, [r5, #0]
 800ceb0:	b103      	cbz	r3, 800ceb4 <_kill_r+0x1c>
 800ceb2:	6023      	str	r3, [r4, #0]
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	bf00      	nop
 800ceb8:	200055c0 	.word	0x200055c0

0800cebc <_getpid_r>:
 800cebc:	f7f5 be1a 	b.w	8002af4 <_getpid>

0800cec0 <__swhatbuf_r>:
 800cec0:	b570      	push	{r4, r5, r6, lr}
 800cec2:	460c      	mov	r4, r1
 800cec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec8:	2900      	cmp	r1, #0
 800ceca:	b096      	sub	sp, #88	@ 0x58
 800cecc:	4615      	mov	r5, r2
 800cece:	461e      	mov	r6, r3
 800ced0:	da0d      	bge.n	800ceee <__swhatbuf_r+0x2e>
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ced8:	f04f 0100 	mov.w	r1, #0
 800cedc:	bf14      	ite	ne
 800cede:	2340      	movne	r3, #64	@ 0x40
 800cee0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cee4:	2000      	movs	r0, #0
 800cee6:	6031      	str	r1, [r6, #0]
 800cee8:	602b      	str	r3, [r5, #0]
 800ceea:	b016      	add	sp, #88	@ 0x58
 800ceec:	bd70      	pop	{r4, r5, r6, pc}
 800ceee:	466a      	mov	r2, sp
 800cef0:	f000 f848 	bl	800cf84 <_fstat_r>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	dbec      	blt.n	800ced2 <__swhatbuf_r+0x12>
 800cef8:	9901      	ldr	r1, [sp, #4]
 800cefa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cefe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf02:	4259      	negs	r1, r3
 800cf04:	4159      	adcs	r1, r3
 800cf06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf0a:	e7eb      	b.n	800cee4 <__swhatbuf_r+0x24>

0800cf0c <__smakebuf_r>:
 800cf0c:	898b      	ldrh	r3, [r1, #12]
 800cf0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf10:	079d      	lsls	r5, r3, #30
 800cf12:	4606      	mov	r6, r0
 800cf14:	460c      	mov	r4, r1
 800cf16:	d507      	bpl.n	800cf28 <__smakebuf_r+0x1c>
 800cf18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	6123      	str	r3, [r4, #16]
 800cf20:	2301      	movs	r3, #1
 800cf22:	6163      	str	r3, [r4, #20]
 800cf24:	b003      	add	sp, #12
 800cf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf28:	ab01      	add	r3, sp, #4
 800cf2a:	466a      	mov	r2, sp
 800cf2c:	f7ff ffc8 	bl	800cec0 <__swhatbuf_r>
 800cf30:	9f00      	ldr	r7, [sp, #0]
 800cf32:	4605      	mov	r5, r0
 800cf34:	4639      	mov	r1, r7
 800cf36:	4630      	mov	r0, r6
 800cf38:	f7ff f874 	bl	800c024 <_malloc_r>
 800cf3c:	b948      	cbnz	r0, 800cf52 <__smakebuf_r+0x46>
 800cf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf42:	059a      	lsls	r2, r3, #22
 800cf44:	d4ee      	bmi.n	800cf24 <__smakebuf_r+0x18>
 800cf46:	f023 0303 	bic.w	r3, r3, #3
 800cf4a:	f043 0302 	orr.w	r3, r3, #2
 800cf4e:	81a3      	strh	r3, [r4, #12]
 800cf50:	e7e2      	b.n	800cf18 <__smakebuf_r+0xc>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	6020      	str	r0, [r4, #0]
 800cf56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf5a:	81a3      	strh	r3, [r4, #12]
 800cf5c:	9b01      	ldr	r3, [sp, #4]
 800cf5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf62:	b15b      	cbz	r3, 800cf7c <__smakebuf_r+0x70>
 800cf64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf68:	4630      	mov	r0, r6
 800cf6a:	f000 f81d 	bl	800cfa8 <_isatty_r>
 800cf6e:	b128      	cbz	r0, 800cf7c <__smakebuf_r+0x70>
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	f023 0303 	bic.w	r3, r3, #3
 800cf76:	f043 0301 	orr.w	r3, r3, #1
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	89a3      	ldrh	r3, [r4, #12]
 800cf7e:	431d      	orrs	r5, r3
 800cf80:	81a5      	strh	r5, [r4, #12]
 800cf82:	e7cf      	b.n	800cf24 <__smakebuf_r+0x18>

0800cf84 <_fstat_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4d07      	ldr	r5, [pc, #28]	@ (800cfa4 <_fstat_r+0x20>)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	4611      	mov	r1, r2
 800cf90:	602b      	str	r3, [r5, #0]
 800cf92:	f7f5 fe17 	bl	8002bc4 <_fstat>
 800cf96:	1c43      	adds	r3, r0, #1
 800cf98:	d102      	bne.n	800cfa0 <_fstat_r+0x1c>
 800cf9a:	682b      	ldr	r3, [r5, #0]
 800cf9c:	b103      	cbz	r3, 800cfa0 <_fstat_r+0x1c>
 800cf9e:	6023      	str	r3, [r4, #0]
 800cfa0:	bd38      	pop	{r3, r4, r5, pc}
 800cfa2:	bf00      	nop
 800cfa4:	200055c0 	.word	0x200055c0

0800cfa8 <_isatty_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d06      	ldr	r5, [pc, #24]	@ (800cfc4 <_isatty_r+0x1c>)
 800cfac:	2300      	movs	r3, #0
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	602b      	str	r3, [r5, #0]
 800cfb4:	f7f5 fe16 	bl	8002be4 <_isatty>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d102      	bne.n	800cfc2 <_isatty_r+0x1a>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	b103      	cbz	r3, 800cfc2 <_isatty_r+0x1a>
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	200055c0 	.word	0x200055c0

0800cfc8 <checkint>:
 800cfc8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfcc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	b570      	push	{r4, r5, r6, lr}
 800cfd4:	dd2a      	ble.n	800d02c <checkint+0x64>
 800cfd6:	f240 4333 	movw	r3, #1075	@ 0x433
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	dc24      	bgt.n	800d028 <checkint+0x60>
 800cfde:	1a9b      	subs	r3, r3, r2
 800cfe0:	f1a3 0620 	sub.w	r6, r3, #32
 800cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe8:	fa02 f403 	lsl.w	r4, r2, r3
 800cfec:	fa02 f606 	lsl.w	r6, r2, r6
 800cff0:	f1c3 0520 	rsb	r5, r3, #32
 800cff4:	fa22 f505 	lsr.w	r5, r2, r5
 800cff8:	4334      	orrs	r4, r6
 800cffa:	432c      	orrs	r4, r5
 800cffc:	409a      	lsls	r2, r3
 800cffe:	ea20 0202 	bic.w	r2, r0, r2
 800d002:	ea21 0404 	bic.w	r4, r1, r4
 800d006:	4322      	orrs	r2, r4
 800d008:	f1a3 0420 	sub.w	r4, r3, #32
 800d00c:	f1c3 0220 	rsb	r2, r3, #32
 800d010:	d10c      	bne.n	800d02c <checkint+0x64>
 800d012:	40d8      	lsrs	r0, r3
 800d014:	fa01 f302 	lsl.w	r3, r1, r2
 800d018:	4318      	orrs	r0, r3
 800d01a:	40e1      	lsrs	r1, r4
 800d01c:	4308      	orrs	r0, r1
 800d01e:	f000 0001 	and.w	r0, r0, #1
 800d022:	f1d0 0002 	rsbs	r0, r0, #2
 800d026:	bd70      	pop	{r4, r5, r6, pc}
 800d028:	2002      	movs	r0, #2
 800d02a:	e7fc      	b.n	800d026 <checkint+0x5e>
 800d02c:	2000      	movs	r0, #0
 800d02e:	e7fa      	b.n	800d026 <checkint+0x5e>

0800d030 <pow>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	ee10 4a90 	vmov	r4, s1
 800d038:	ed2d 8b0a 	vpush	{d8-d12}
 800d03c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800d040:	ee11 aa90 	vmov	sl, s3
 800d044:	f108 32ff 	add.w	r2, r8, #4294967295
 800d048:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800d04c:	429a      	cmp	r2, r3
 800d04e:	ee10 5a10 	vmov	r5, s0
 800d052:	ee11 0a10 	vmov	r0, s2
 800d056:	b087      	sub	sp, #28
 800d058:	46c4      	mov	ip, r8
 800d05a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800d05e:	d806      	bhi.n	800d06e <pow+0x3e>
 800d060:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800d064:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800d068:	2b7f      	cmp	r3, #127	@ 0x7f
 800d06a:	f240 8157 	bls.w	800d31c <pow+0x2ec>
 800d06e:	1802      	adds	r2, r0, r0
 800d070:	eb4a 010a 	adc.w	r1, sl, sl
 800d074:	f06f 0b01 	mvn.w	fp, #1
 800d078:	1e57      	subs	r7, r2, #1
 800d07a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d07e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800d082:	45bb      	cmp	fp, r7
 800d084:	eb7e 0303 	sbcs.w	r3, lr, r3
 800d088:	d242      	bcs.n	800d110 <pow+0xe0>
 800d08a:	ea52 0301 	orrs.w	r3, r2, r1
 800d08e:	f04f 0300 	mov.w	r3, #0
 800d092:	d10c      	bne.n	800d0ae <pow+0x7e>
 800d094:	196d      	adds	r5, r5, r5
 800d096:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800d09a:	4164      	adcs	r4, r4
 800d09c:	42ab      	cmp	r3, r5
 800d09e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d0a2:	41a3      	sbcs	r3, r4
 800d0a4:	f0c0 808f 	bcc.w	800d1c6 <pow+0x196>
 800d0a8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d0ac:	e02b      	b.n	800d106 <pow+0xd6>
 800d0ae:	4ed4      	ldr	r6, [pc, #848]	@ (800d400 <pow+0x3d0>)
 800d0b0:	42b4      	cmp	r4, r6
 800d0b2:	bf08      	it	eq
 800d0b4:	429d      	cmpeq	r5, r3
 800d0b6:	d109      	bne.n	800d0cc <pow+0x9c>
 800d0b8:	1800      	adds	r0, r0, r0
 800d0ba:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800d0be:	eb4a 0a0a 	adc.w	sl, sl, sl
 800d0c2:	4283      	cmp	r3, r0
 800d0c4:	4bcf      	ldr	r3, [pc, #828]	@ (800d404 <pow+0x3d4>)
 800d0c6:	eb73 030a 	sbcs.w	r3, r3, sl
 800d0ca:	e7eb      	b.n	800d0a4 <pow+0x74>
 800d0cc:	196d      	adds	r5, r5, r5
 800d0ce:	48ce      	ldr	r0, [pc, #824]	@ (800d408 <pow+0x3d8>)
 800d0d0:	4164      	adcs	r4, r4
 800d0d2:	42ab      	cmp	r3, r5
 800d0d4:	eb70 0604 	sbcs.w	r6, r0, r4
 800d0d8:	d375      	bcc.n	800d1c6 <pow+0x196>
 800d0da:	4281      	cmp	r1, r0
 800d0dc:	bf08      	it	eq
 800d0de:	429a      	cmpeq	r2, r3
 800d0e0:	d171      	bne.n	800d1c6 <pow+0x196>
 800d0e2:	4aca      	ldr	r2, [pc, #808]	@ (800d40c <pow+0x3dc>)
 800d0e4:	4294      	cmp	r4, r2
 800d0e6:	bf08      	it	eq
 800d0e8:	429d      	cmpeq	r5, r3
 800d0ea:	d0dd      	beq.n	800d0a8 <pow+0x78>
 800d0ec:	4294      	cmp	r4, r2
 800d0ee:	ea6f 0a0a 	mvn.w	sl, sl
 800d0f2:	bf34      	ite	cc
 800d0f4:	2400      	movcc	r4, #0
 800d0f6:	2401      	movcs	r4, #1
 800d0f8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800d0fc:	4554      	cmp	r4, sl
 800d0fe:	f040 81dc 	bne.w	800d4ba <pow+0x48a>
 800d102:	ee21 0b01 	vmul.f64	d0, d1, d1
 800d106:	b007      	add	sp, #28
 800d108:	ecbd 8b0a 	vpop	{d8-d12}
 800d10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d110:	196f      	adds	r7, r5, r5
 800d112:	eb44 0904 	adc.w	r9, r4, r4
 800d116:	1e7a      	subs	r2, r7, #1
 800d118:	f169 0300 	sbc.w	r3, r9, #0
 800d11c:	4593      	cmp	fp, r2
 800d11e:	eb7e 0303 	sbcs.w	r3, lr, r3
 800d122:	d225      	bcs.n	800d170 <pow+0x140>
 800d124:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d128:	2c00      	cmp	r4, #0
 800d12a:	da13      	bge.n	800d154 <pow+0x124>
 800d12c:	4651      	mov	r1, sl
 800d12e:	f7ff ff4b 	bl	800cfc8 <checkint>
 800d132:	2801      	cmp	r0, #1
 800d134:	d10e      	bne.n	800d154 <pow+0x124>
 800d136:	eeb1 0b40 	vneg.f64	d0, d0
 800d13a:	ea57 0909 	orrs.w	r9, r7, r9
 800d13e:	d10b      	bne.n	800d158 <pow+0x128>
 800d140:	f1ba 0f00 	cmp.w	sl, #0
 800d144:	dadf      	bge.n	800d106 <pow+0xd6>
 800d146:	b007      	add	sp, #28
 800d148:	ecbd 8b0a 	vpop	{d8-d12}
 800d14c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	f000 b9ee 	b.w	800d530 <__math_divzero>
 800d154:	2000      	movs	r0, #0
 800d156:	e7f0      	b.n	800d13a <pow+0x10a>
 800d158:	f1ba 0f00 	cmp.w	sl, #0
 800d15c:	dad3      	bge.n	800d106 <pow+0xd6>
 800d15e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d162:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d166:	ed8d 7b00 	vstr	d7, [sp]
 800d16a:	ed9d 0b00 	vldr	d0, [sp]
 800d16e:	e7ca      	b.n	800d106 <pow+0xd6>
 800d170:	2c00      	cmp	r4, #0
 800d172:	da2b      	bge.n	800d1cc <pow+0x19c>
 800d174:	4651      	mov	r1, sl
 800d176:	f7ff ff27 	bl	800cfc8 <checkint>
 800d17a:	b930      	cbnz	r0, 800d18a <pow+0x15a>
 800d17c:	b007      	add	sp, #28
 800d17e:	ecbd 8b0a 	vpop	{d8-d12}
 800d182:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d186:	f000 b9eb 	b.w	800d560 <__math_invalid>
 800d18a:	1e41      	subs	r1, r0, #1
 800d18c:	4248      	negs	r0, r1
 800d18e:	4148      	adcs	r0, r1
 800d190:	0480      	lsls	r0, r0, #18
 800d192:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d196:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800d19a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800d19e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800d1a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1a4:	d92d      	bls.n	800d202 <pow+0x1d2>
 800d1a6:	4b96      	ldr	r3, [pc, #600]	@ (800d400 <pow+0x3d0>)
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	429c      	cmp	r4, r3
 800d1ac:	bf08      	it	eq
 800d1ae:	4285      	cmpeq	r5, r0
 800d1b0:	f43f af7a 	beq.w	800d0a8 <pow+0x78>
 800d1b4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800d1b8:	428a      	cmp	r2, r1
 800d1ba:	d80c      	bhi.n	800d1d6 <pow+0x1a6>
 800d1bc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d1c0:	42a8      	cmp	r0, r5
 800d1c2:	41a3      	sbcs	r3, r4
 800d1c4:	d204      	bcs.n	800d1d0 <pow+0x1a0>
 800d1c6:	ee31 0b00 	vadd.f64	d0, d1, d0
 800d1ca:	e79c      	b.n	800d106 <pow+0xd6>
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	e7e4      	b.n	800d19a <pow+0x16a>
 800d1d0:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d1d4:	e797      	b.n	800d106 <pow+0xd6>
 800d1d6:	2d01      	cmp	r5, #1
 800d1d8:	eb74 0303 	sbcs.w	r3, r4, r3
 800d1dc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d1e0:	bf34      	ite	cc
 800d1e2:	2301      	movcc	r3, #1
 800d1e4:	2300      	movcs	r3, #0
 800d1e6:	4296      	cmp	r6, r2
 800d1e8:	bf8c      	ite	hi
 800d1ea:	2600      	movhi	r6, #0
 800d1ec:	2601      	movls	r6, #1
 800d1ee:	42b3      	cmp	r3, r6
 800d1f0:	f000 809c 	beq.w	800d32c <pow+0x2fc>
 800d1f4:	b007      	add	sp, #28
 800d1f6:	ecbd 8b0a 	vpop	{d8-d12}
 800d1fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fe:	f000 b98f 	b.w	800d520 <__math_oflow>
 800d202:	f1bc 0f00 	cmp.w	ip, #0
 800d206:	d10a      	bne.n	800d21e <pow+0x1ee>
 800d208:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800d3f0 <pow+0x3c0>
 800d20c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d210:	ec53 2b17 	vmov	r2, r3, d7
 800d214:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800d218:	4615      	mov	r5, r2
 800d21a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800d21e:	4a7c      	ldr	r2, [pc, #496]	@ (800d410 <pow+0x3e0>)
 800d220:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800d224:	4422      	add	r2, r4
 800d226:	1513      	asrs	r3, r2, #20
 800d228:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800d22c:	ee03 3a10 	vmov	s6, r3
 800d230:	0d12      	lsrs	r2, r2, #20
 800d232:	4b78      	ldr	r3, [pc, #480]	@ (800d414 <pow+0x3e4>)
 800d234:	0512      	lsls	r2, r2, #20
 800d236:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800d23a:	1aa7      	subs	r7, r4, r2
 800d23c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800d240:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800d244:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800d248:	1e2e      	subs	r6, r5, #0
 800d24a:	ec47 6b14 	vmov	d4, r6, r7
 800d24e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800d252:	eea4 6b05 	vfma.f64	d6, d4, d5
 800d256:	ed93 5b00 	vldr	d5, [r3]
 800d25a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800d25e:	eea3 2b05 	vfma.f64	d2, d3, d5
 800d262:	ed93 5b02 	vldr	d5, [r3, #8]
 800d266:	ee36 4b02 	vadd.f64	d4, d6, d2
 800d26a:	ee32 2b44 	vsub.f64	d2, d2, d4
 800d26e:	eea3 7b05 	vfma.f64	d7, d3, d5
 800d272:	ed93 5b04 	vldr	d5, [r3, #16]
 800d276:	ee32 2b06 	vadd.f64	d2, d2, d6
 800d27a:	ee37 7b02 	vadd.f64	d7, d7, d2
 800d27e:	ee26 5b05 	vmul.f64	d5, d6, d5
 800d282:	ee26 0b05 	vmul.f64	d0, d6, d5
 800d286:	ee34 8b00 	vadd.f64	d8, d4, d0
 800d28a:	eeb0 9b40 	vmov.f64	d9, d0
 800d28e:	ee34 4b48 	vsub.f64	d4, d4, d8
 800d292:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800d296:	ee34 ab00 	vadd.f64	d10, d4, d0
 800d29a:	ed93 5b06 	vldr	d5, [r3, #24]
 800d29e:	ee26 bb00 	vmul.f64	d11, d6, d0
 800d2a2:	ee37 7b09 	vadd.f64	d7, d7, d9
 800d2a6:	ed93 4b08 	vldr	d4, [r3, #32]
 800d2aa:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800d2ae:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800d2b2:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d2b6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800d2ba:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800d2be:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d2c2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800d2c6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800d2ca:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d2ce:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d2d2:	eeab 7b05 	vfma.f64	d7, d11, d5
 800d2d6:	ee38 4b07 	vadd.f64	d4, d8, d7
 800d2da:	ee21 6b04 	vmul.f64	d6, d1, d4
 800d2de:	ee16 3a90 	vmov	r3, s13
 800d2e2:	eeb0 5b46 	vmov.f64	d5, d6
 800d2e6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d2ea:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800d2ee:	18b2      	adds	r2, r6, r2
 800d2f0:	2a3e      	cmp	r2, #62	@ 0x3e
 800d2f2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800d2f6:	ee38 8b44 	vsub.f64	d8, d8, d4
 800d2fa:	ee38 8b07 	vadd.f64	d8, d8, d7
 800d2fe:	eea1 5b08 	vfma.f64	d5, d1, d8
 800d302:	d91b      	bls.n	800d33c <pow+0x30c>
 800d304:	2a00      	cmp	r2, #0
 800d306:	da0b      	bge.n	800d320 <pow+0x2f0>
 800d308:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d30c:	ee36 0b00 	vadd.f64	d0, d6, d0
 800d310:	2800      	cmp	r0, #0
 800d312:	f43f aef8 	beq.w	800d106 <pow+0xd6>
 800d316:	eeb1 0b40 	vneg.f64	d0, d0
 800d31a:	e6f4      	b.n	800d106 <pow+0xd6>
 800d31c:	2000      	movs	r0, #0
 800d31e:	e77e      	b.n	800d21e <pow+0x1ee>
 800d320:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800d324:	d909      	bls.n	800d33a <pow+0x30a>
 800d326:	2b00      	cmp	r3, #0
 800d328:	f6bf af64 	bge.w	800d1f4 <pow+0x1c4>
 800d32c:	b007      	add	sp, #28
 800d32e:	ecbd 8b0a 	vpop	{d8-d12}
 800d332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d336:	f000 b8eb 	b.w	800d510 <__math_uflow>
 800d33a:	2600      	movs	r6, #0
 800d33c:	4936      	ldr	r1, [pc, #216]	@ (800d418 <pow+0x3e8>)
 800d33e:	ed91 4b02 	vldr	d4, [r1, #8]
 800d342:	ed91 3b00 	vldr	d3, [r1]
 800d346:	eeb0 7b44 	vmov.f64	d7, d4
 800d34a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d34e:	ee17 5a10 	vmov	r5, s14
 800d352:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d356:	ed91 4b04 	vldr	d4, [r1, #16]
 800d35a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800d35e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d362:	ed91 4b06 	vldr	d4, [r1, #24]
 800d366:	18dc      	adds	r4, r3, r3
 800d368:	f104 030f 	add.w	r3, r4, #15
 800d36c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d370:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d374:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800d378:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d37c:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d380:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800d384:	ed91 4b08 	vldr	d4, [r1, #32]
 800d388:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d38c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d390:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d394:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800d398:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d39c:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d3a0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800d3a4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800d3a8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d3ac:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d3b0:	1940      	adds	r0, r0, r5
 800d3b2:	2700      	movs	r7, #0
 800d3b4:	eb17 020c 	adds.w	r2, r7, ip
 800d3b8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800d3bc:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d3c0:	2e00      	cmp	r6, #0
 800d3c2:	d175      	bne.n	800d4b0 <pow+0x480>
 800d3c4:	42bd      	cmp	r5, r7
 800d3c6:	db29      	blt.n	800d41c <pow+0x3ec>
 800d3c8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800d3cc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	ec41 0b10 	vmov	d0, r0, r1
 800d3d6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d3da:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d3f8 <pow+0x3c8>
 800d3de:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d3e2:	b007      	add	sp, #28
 800d3e4:	ecbd 8b0a 	vpop	{d8-d12}
 800d3e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	f000 b8d0 	b.w	800d590 <__math_check_oflow>
 800d3f0:	00000000 	.word	0x00000000
 800d3f4:	43300000 	.word	0x43300000
 800d3f8:	00000000 	.word	0x00000000
 800d3fc:	7f000000 	.word	0x7f000000
 800d400:	3ff00000 	.word	0x3ff00000
 800d404:	fff00000 	.word	0xfff00000
 800d408:	ffe00000 	.word	0xffe00000
 800d40c:	7fe00000 	.word	0x7fe00000
 800d410:	c0196aab 	.word	0xc0196aab
 800d414:	0800d9d8 	.word	0x0800d9d8
 800d418:	0800ea20 	.word	0x0800ea20
 800d41c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d420:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800d424:	4610      	mov	r0, r2
 800d426:	ec41 0b15 	vmov	d5, r0, r1
 800d42a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800d42e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d432:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d436:	eeb0 4bc7 	vabs.f64	d4, d7
 800d43a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800d43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d442:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800d4c0 <pow+0x490>
 800d446:	d52a      	bpl.n	800d49e <pow+0x46e>
 800d448:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d44c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d454:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d458:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800d45c:	bf58      	it	pl
 800d45e:	eeb0 4b43 	vmovpl.f64	d4, d3
 800d462:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d466:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d46a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d46e:	ee36 6b05 	vadd.f64	d6, d6, d5
 800d472:	ee36 6b03 	vadd.f64	d6, d6, d3
 800d476:	ee36 7b44 	vsub.f64	d7, d6, d4
 800d47a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d482:	d104      	bne.n	800d48e <pow+0x45e>
 800d484:	4632      	mov	r2, r6
 800d486:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d48a:	ec43 2b17 	vmov	d7, r2, r3
 800d48e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d492:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d496:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d49a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d49e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d4a2:	b007      	add	sp, #28
 800d4a4:	ecbd 8b0a 	vpop	{d8-d12}
 800d4a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	f000 b867 	b.w	800d57e <__math_check_uflow>
 800d4b0:	ec43 2b10 	vmov	d0, r2, r3
 800d4b4:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d4b8:	e625      	b.n	800d106 <pow+0xd6>
 800d4ba:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800d4c8 <pow+0x498>
 800d4be:	e622      	b.n	800d106 <pow+0xd6>
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	00100000 	.word	0x00100000
	...

0800d4d0 <with_errno>:
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	ed2d 8b02 	vpush	{d8}
 800d4d6:	eeb0 8b40 	vmov.f64	d8, d0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	f7fd ff12 	bl	800b304 <__errno>
 800d4e0:	eeb0 0b48 	vmov.f64	d0, d8
 800d4e4:	ecbd 8b02 	vpop	{d8}
 800d4e8:	6004      	str	r4, [r0, #0]
 800d4ea:	bd10      	pop	{r4, pc}

0800d4ec <xflow>:
 800d4ec:	b082      	sub	sp, #8
 800d4ee:	b158      	cbz	r0, 800d508 <xflow+0x1c>
 800d4f0:	eeb1 7b40 	vneg.f64	d7, d0
 800d4f4:	ed8d 7b00 	vstr	d7, [sp]
 800d4f8:	ed9d 7b00 	vldr	d7, [sp]
 800d4fc:	2022      	movs	r0, #34	@ 0x22
 800d4fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d502:	b002      	add	sp, #8
 800d504:	f7ff bfe4 	b.w	800d4d0 <with_errno>
 800d508:	eeb0 7b40 	vmov.f64	d7, d0
 800d50c:	e7f2      	b.n	800d4f4 <xflow+0x8>
	...

0800d510 <__math_uflow>:
 800d510:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d518 <__math_uflow+0x8>
 800d514:	f7ff bfea 	b.w	800d4ec <xflow>
 800d518:	00000000 	.word	0x00000000
 800d51c:	10000000 	.word	0x10000000

0800d520 <__math_oflow>:
 800d520:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d528 <__math_oflow+0x8>
 800d524:	f7ff bfe2 	b.w	800d4ec <xflow>
 800d528:	00000000 	.word	0x00000000
 800d52c:	70000000 	.word	0x70000000

0800d530 <__math_divzero>:
 800d530:	b082      	sub	sp, #8
 800d532:	2800      	cmp	r0, #0
 800d534:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800d538:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800d53c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d540:	ed8d 7b00 	vstr	d7, [sp]
 800d544:	ed9d 0b00 	vldr	d0, [sp]
 800d548:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800d558 <__math_divzero+0x28>
 800d54c:	2022      	movs	r0, #34	@ 0x22
 800d54e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800d552:	b002      	add	sp, #8
 800d554:	f7ff bfbc 	b.w	800d4d0 <with_errno>
	...

0800d560 <__math_invalid>:
 800d560:	eeb0 7b40 	vmov.f64	d7, d0
 800d564:	eeb4 7b47 	vcmp.f64	d7, d7
 800d568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800d570:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800d574:	d602      	bvs.n	800d57c <__math_invalid+0x1c>
 800d576:	2021      	movs	r0, #33	@ 0x21
 800d578:	f7ff bfaa 	b.w	800d4d0 <with_errno>
 800d57c:	4770      	bx	lr

0800d57e <__math_check_uflow>:
 800d57e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d586:	d102      	bne.n	800d58e <__math_check_uflow+0x10>
 800d588:	2022      	movs	r0, #34	@ 0x22
 800d58a:	f7ff bfa1 	b.w	800d4d0 <with_errno>
 800d58e:	4770      	bx	lr

0800d590 <__math_check_oflow>:
 800d590:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800d5b0 <__math_check_oflow+0x20>
 800d594:	eeb0 7bc0 	vabs.f64	d7, d0
 800d598:	eeb4 7b46 	vcmp.f64	d7, d6
 800d59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a0:	dd02      	ble.n	800d5a8 <__math_check_oflow+0x18>
 800d5a2:	2022      	movs	r0, #34	@ 0x22
 800d5a4:	f7ff bf94 	b.w	800d4d0 <with_errno>
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	f3af 8000 	nop.w
 800d5b0:	ffffffff 	.word	0xffffffff
 800d5b4:	7fefffff 	.word	0x7fefffff

0800d5b8 <_init>:
 800d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ba:	bf00      	nop
 800d5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5be:	bc08      	pop	{r3}
 800d5c0:	469e      	mov	lr, r3
 800d5c2:	4770      	bx	lr

0800d5c4 <_fini>:
 800d5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5c6:	bf00      	nop
 800d5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ca:	bc08      	pop	{r3}
 800d5cc:	469e      	mov	lr, r3
 800d5ce:	4770      	bx	lr
