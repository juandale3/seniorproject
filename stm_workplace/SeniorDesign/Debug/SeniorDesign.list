
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f568  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d78  0800f768  0800f768  00010768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114e0  080114e0  00013240  2**0
                  CONTENTS
  4 .ARM          00000008  080114e0  080114e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114e8  080114e8  00013240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114e8  080114e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080114ec  080114ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  080114f0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053a0  20000240  08011730  00013240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200055e0  08011730  000135e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002519a  00000000  00000000  0001326e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fc8  00000000  00000000  00038408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  0003d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001678  00000000  00000000  0003f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce71  00000000  00000000  00040758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002490a  00000000  00000000  0006d5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111e65  00000000  00000000  00091ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a3d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f6c  00000000  00000000  001a3d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001acce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000240 	.word	0x20000240
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f750 	.word	0x0800f750

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000244 	.word	0x20000244
 800023c:	0800f750 	.word	0x0800f750

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a2 	b.w	80009c4 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_3;
 80009de:	2303      	movs	r3, #3
 80009e0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80009e6:	2302      	movs	r3, #2
 80009e8:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f002 fe65 	bl	80036c0 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 80009fc:	f001 feda 	bl	80027b4 <Error_Handler>
	}
	return;
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
}
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	0000      	movs	r0, r0
 8000a0c:	0000      	movs	r0, r0
	...

08000a10 <readFlow>:
float readFlow(float voltage)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	//instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
	instFlow = (voltage - 0.63) / 0.0128;	// calibrated
 8000a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a22:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8000a58 <readFlow+0x48>
 8000a26:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000a2a:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 8000a60 <readFlow+0x50>
 8000a2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <readFlow+0x58>)
 8000a38:	edc3 7a00 	vstr	s15, [r3]
	return instFlow;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <readFlow+0x58>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	ee07 3a90 	vmov	s15, r3
}
 8000a44:	eeb0 0a67 	vmov.f32	s0, s15
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	f3af 8000 	nop.w
 8000a58:	c28f5c29 	.word	0xc28f5c29
 8000a5c:	3fe428f5 	.word	0x3fe428f5
 8000a60:	eb1c432d 	.word	0xeb1c432d
 8000a64:	3f8a36e2 	.word	0x3f8a36e2
 8000a68:	2000025c 	.word	0x2000025c

08000a6c <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a80:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000ab0 <setFlowRate+0x44>
 8000a84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a88:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8000ab4 <setFlowRate+0x48>
 8000a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a94:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000ab8 <setFlowRate+0x4c>
 8000a98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a9c:	eef0 7a66 	vmov.f32	s15, s13

}
 8000aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	3ca3d70a 	.word	0x3ca3d70a
 8000ab4:	00000001 	.word	0x00000001
 8000ab8:	3fc147ae 	.word	0x3fc147ae

08000abc <flowRateMethod>:

void flowRateMethod(uint8_t method){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	// This must change
//


	// This needs to be tested
	if(method == 0){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <flowRateMethod+0x18>
		FlowMethodPin.Mode = GPIO_MODE_INPUT;
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <flowRateMethod+0x34>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	e002      	b.n	8000ada <flowRateMethod+0x1e>
	} else{
		FlowMethodPin.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <flowRateMethod+0x34>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	605a      	str	r2, [r3, #4]
	}
	HAL_GPIO_Init(FlowMethodGroup, &FlowMethodPin);
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <flowRateMethod+0x38>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4904      	ldr	r1, [pc, #16]	@ (8000af0 <flowRateMethod+0x34>)
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fb07 	bl	80040f4 <HAL_GPIO_Init>

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000014 	.word	0x20000014

08000af8 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ModeInput1Group, ModeInput1Pin, 0);
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <flowStateClose+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <flowStateClose+0x2c>)
 8000b02:	8811      	ldrh	r1, [r2, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fca0 	bl	800444c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ModeInput2Group, ModeInput2Pin, 0);
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <flowStateClose+0x30>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <flowStateClose+0x34>)
 8000b12:	8811      	ldrh	r1, [r2, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fc98 	bl	800444c <HAL_GPIO_WritePin>
return;
 8000b1c:	bf00      	nop
}
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000020 	.word	0x20000020
 8000b24:	20000024 	.word	0x20000024
 8000b28:	20000018 	.word	0x20000018
 8000b2c:	2000001c 	.word	0x2000001c

08000b30 <flowStateOpen>:
void flowStateOpen(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ModeInput1Group, ModeInput1Pin, 1);
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <flowStateOpen+0x28>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <flowStateOpen+0x2c>)
 8000b3a:	8811      	ldrh	r1, [r2, #0]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fc84 	bl	800444c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ModeInput2Group, ModeInput2Pin, 0);
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <flowStateOpen+0x30>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <flowStateOpen+0x34>)
 8000b4a:	8811      	ldrh	r1, [r2, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 fc7c 	bl	800444c <HAL_GPIO_WritePin>
return;
 8000b54:	bf00      	nop
}
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000020 	.word	0x20000020
 8000b5c:	20000024 	.word	0x20000024
 8000b60:	20000018 	.word	0x20000018
 8000b64:	2000001c 	.word	0x2000001c

08000b68 <flowStateControl>:
void flowStateControl(void){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(ModeInput1Group, ModeInput1Pin, 0);	// PB_6 state is irrelevant
	HAL_GPIO_WritePin(ModeInput2Group, ModeInput2Pin, 1);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <flowStateControl+0x18>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <flowStateControl+0x1c>)
 8000b72:	8811      	ldrh	r1, [r2, #0]
 8000b74:	2201      	movs	r2, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fc68 	bl	800444c <HAL_GPIO_WritePin>
return;
 8000b7c:	bf00      	nop
}
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000018 	.word	0x20000018
 8000b84:	2000001c 	.word	0x2000001c

08000b88 <stepperClose>:

//void stepperClose();
//void stepperOpen();
//void stepperAngle(uint8_t angle);

void stepperClose(){
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	steps = MAX_STEP;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <stepperClose+0x18>)
 8000b8e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000b92:	801a      	strh	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000264 	.word	0x20000264

08000ba4 <stepperOpen>:

void stepperOpen(){
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
	steps = 0;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <stepperOpen+0x14>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000264 	.word	0x20000264

08000bbc <stepperStep>:

void stepperStep(uint16_t num){
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	if(num > MAX_STEP){
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000bcc:	d904      	bls.n	8000bd8 <stepperStep+0x1c>
		steps = MAX_STEP;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <stepperStep+0x30>)
 8000bd0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000bd4:	801a      	strh	r2, [r3, #0]
	}else{
	steps = num;
	}
}
 8000bd6:	e002      	b.n	8000bde <stepperStep+0x22>
	steps = num;
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <stepperStep+0x30>)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	8013      	strh	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000264 	.word	0x20000264

08000bf0 <recalibrate>:

void recalibrate(){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	currPos = MAX_STEP;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <recalibrate+0x20>)
 8000bf6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000bfa:	801a      	strh	r2, [r3, #0]
	toggleCount = currPos * 2;
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <recalibrate+0x20>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <recalibrate+0x24>)
 8000c06:	801a      	strh	r2, [r3, #0]
	stepperOpen();
 8000c08:	f7ff ffcc 	bl	8000ba4 <stepperOpen>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000262 	.word	0x20000262
 8000c14:	20000260 	.word	0x20000260

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	pumpTestsParameters[0].currentState = &pumpTestsParameters[0].stateList[0];
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <main+0x70>)
 8000c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8000c88 <main+0x70>)
 8000c20:	615a      	str	r2, [r3, #20]
	pumpTestsParameters[1].currentState = &pumpTestsParameters[1].stateList[0];
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <main+0x70>)
 8000c24:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <main+0x74>)
 8000c26:	665a      	str	r2, [r3, #100]	@ 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f002 fb1b 	bl	8003262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f83c 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f000 fa20 	bl	8001074 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c34:	f000 f9c0 	bl	8000fb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c38:	f000 f9ee 	bl	8001018 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000c3c:	f000 f8a6 	bl	8000d8c <MX_ADC1_Init>
  MX_DAC_Init();
 8000c40:	f000 f906 	bl	8000e50 <MX_DAC_Init>
  MX_TIM10_Init();
 8000c44:	f000 f964 	bl	8000f10 <MX_TIM10_Init>
  MX_TIM7_Init();
 8000c48:	f000 f92c 	bl	8000ea4 <MX_TIM7_Init>
  MX_UART5_Init();
 8000c4c:	f000 f984 	bl	8000f58 <MX_UART5_Init>
  // HAL_TIM_Base_Start_IT(&htim7);
  // establishConnection(&huart3);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c50:	f007 f812 	bl	8007c78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 8000c54:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <main+0x78>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <main+0x7c>)
 8000c5a:	f007 f877 	bl	8007d4c <osThreadNew>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <main+0x80>)
 8000c62:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <main+0x84>)
 8000c66:	2100      	movs	r1, #0
 8000c68:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <main+0x88>)
 8000c6a:	f007 f86f 	bl	8007d4c <osThreadNew>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <main+0x8c>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <main+0x8c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f007 f90d 	bl	8007e98 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c7e:	f007 f82f 	bl	8007ce0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c82:	bf00      	nop
 8000c84:	e7fd      	b.n	8000c82 <main+0x6a>
 8000c86:	bf00      	nop
 8000c88:	2000097c 	.word	0x2000097c
 8000c8c:	200009cc 	.word	0x200009cc
 8000c90:	0800f79c 	.word	0x0800f79c
 8000c94:	08001361 	.word	0x08001361
 8000c98:	20000974 	.word	0x20000974
 8000c9c:	0800f7c0 	.word	0x0800f7c0
 8000ca0:	08002455 	.word	0x08002455
 8000ca4:	20000978 	.word	0x20000978

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2234      	movs	r2, #52	@ 0x34
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00a ff63 	bl	800bb82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ccc:	f003 fd3a 	bl	8004744 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <SystemClock_Config+0xdc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <SystemClock_Config+0xdc>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cdc:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <SystemClock_Config+0xdc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ce8:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <SystemClock_Config+0xe0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cf0:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <SystemClock_Config+0xe0>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <SystemClock_Config+0xe0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d1c:	2360      	movs	r3, #96	@ 0x60
 8000d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fd67 	bl	8004804 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d3c:	f001 fd3a 	bl	80027b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d40:	f003 fd10 	bl	8004764 <HAL_PWREx_EnableOverDrive>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d4a:	f001 fd33 	bl	80027b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2302      	movs	r3, #2
 8000d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	2103      	movs	r1, #3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fff8 	bl	8004d60 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d76:	f001 fd1d 	bl	80027b4 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3750      	adds	r7, #80	@ 0x50
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d9e:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000da0:	4a29      	ldr	r2, [pc, #164]	@ (8000e48 <MX_ADC1_Init+0xbc>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da4:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000db2:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000db8:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dce:	4a1f      	ldr	r2, [pc, #124]	@ (8000e4c <MX_ADC1_Init+0xc0>)
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dec:	4815      	ldr	r0, [pc, #84]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000dee:	f002 fa89 	bl	8003304 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000df8:	f001 fcdc 	bl	80027b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e04:	2302      	movs	r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000e0e:	f002 fc57 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e18:	f001 fccc 	bl	80027b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e24:	2303      	movs	r3, #3
 8000e26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_ADC1_Init+0xb8>)
 8000e2e:	f002 fc47 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000e38:	f001 fcbc 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000268 	.word	0x20000268
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	0f000001 	.word	0x0f000001

08000e50 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <MX_DAC_Init+0x4c>)
 8000e60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <MX_DAC_Init+0x50>)
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <MX_DAC_Init+0x4c>)
 8000e66:	f002 ff5d 	bl	8003d24 <HAL_DAC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e70:	f001 fca0 	bl	80027b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <MX_DAC_Init+0x4c>)
 8000e84:	f003 f84b 	bl	8003f1e <HAL_DAC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e8e:	f001 fc91 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200002b0 	.word	0x200002b0
 8000ea0:	40007400 	.word	0x40007400

08000ea4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_TIM7_Init+0x64>)
 8000eb6:	4a15      	ldr	r2, [pc, #84]	@ (8000f0c <MX_TIM7_Init+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600 - 1;
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_TIM7_Init+0x64>)
 8000ebc:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000ec0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_TIM7_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5 - 1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_TIM7_Init+0x64>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_TIM7_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <MX_TIM7_Init+0x64>)
 8000ed6:	f004 fdc3 	bl	8005a60 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ee0:	f001 fc68 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_TIM7_Init+0x64>)
 8000ef2:	f005 f89b 	bl	800602c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000efc:	f001 fc5a 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200002c4 	.word	0x200002c4
 8000f0c:	40001400 	.word	0x40001400

08000f10 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_TIM10_Init+0x40>)
 8000f16:	4a0f      	ldr	r2, [pc, #60]	@ (8000f54 <MX_TIM10_Init+0x44>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48000 - 1;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <MX_TIM10_Init+0x40>)
 8000f1c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000f20:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <MX_TIM10_Init+0x40>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000 - 1;
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_TIM10_Init+0x40>)
 8000f2a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000f2e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <MX_TIM10_Init+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_TIM10_Init+0x40>)
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_TIM10_Init+0x40>)
 8000f3e:	f004 fd8f 	bl	8005a60 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000f48:	f001 fc34 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000310 	.word	0x20000310
 8000f54:	40014400 	.word	0x40014400

08000f58 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f5e:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <MX_UART5_Init+0x5c>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f64:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f84:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f88:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <MX_UART5_Init+0x58>)
 8000f9e:	f005 f8f1 	bl	8006184 <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_UART5_Init+0x54>
  {
    Error_Handler();
 8000fa8:	f001 fc04 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000035c 	.word	0x2000035c
 8000fb4:	40005000 	.word	0x40005000

08000fb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <MX_USART3_UART_Init+0x5c>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000ffc:	f005 f8c2 	bl	8006184 <HAL_UART_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001006:	f001 fbd5 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003e4 	.word	0x200003e4
 8001014:	40004800 	.word	0x40004800

08001018 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001022:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001026:	2206      	movs	r2, #6
 8001028:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102c:	2202      	movs	r2, #2
 800102e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001038:	2202      	movs	r2, #2
 800103a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103e:	2201      	movs	r2, #1
 8001040:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001050:	2201      	movs	r2, #1
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001056:	2200      	movs	r2, #0
 8001058:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800105c:	f003 fa29 	bl	80044b2 <HAL_PCD_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001066:	f001 fba5 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000046c 	.word	0x2000046c

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	@ 0x38
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	4ba2      	ldr	r3, [pc, #648]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4aa1      	ldr	r2, [pc, #644]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b9f      	ldr	r3, [pc, #636]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a9b      	ldr	r2, [pc, #620]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b99      	ldr	r3, [pc, #612]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4b96      	ldr	r3, [pc, #600]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a95      	ldr	r2, [pc, #596]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b93      	ldr	r3, [pc, #588]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	4b90      	ldr	r3, [pc, #576]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a8f      	ldr	r2, [pc, #572]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b8d      	ldr	r3, [pc, #564]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a89      	ldr	r2, [pc, #548]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b87      	ldr	r3, [pc, #540]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b84      	ldr	r3, [pc, #528]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a83      	ldr	r2, [pc, #524]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b81      	ldr	r3, [pc, #516]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b7e      	ldr	r3, [pc, #504]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a7d      	ldr	r2, [pc, #500]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b7b      	ldr	r3, [pc, #492]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001132:	4b78      	ldr	r3, [pc, #480]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a77      	ldr	r2, [pc, #476]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b75      	ldr	r3, [pc, #468]	@ (8001314 <MX_GPIO_Init+0x2a0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4872      	ldr	r0, [pc, #456]	@ (8001318 <MX_GPIO_Init+0x2a4>)
 8001150:	f003 f97c 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, motor2gpio_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2130      	movs	r1, #48	@ 0x30
 8001158:	4870      	ldr	r0, [pc, #448]	@ (800131c <MX_GPIO_Init+0x2a8>)
 800115a:	f003 f977 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2104      	movs	r1, #4
 8001162:	486f      	ldr	r0, [pc, #444]	@ (8001320 <MX_GPIO_Init+0x2ac>)
 8001164:	f003 f972 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_2|LD3_Pin|GPIO_PIN_6
 8001168:	2200      	movs	r2, #0
 800116a:	f244 01c5 	movw	r1, #16581	@ 0x40c5
 800116e:	486d      	ldr	r0, [pc, #436]	@ (8001324 <MX_GPIO_Init+0x2b0>)
 8001170:	f003 f96c 	bl	800444c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4
 8001174:	2200      	movs	r2, #0
 8001176:	f643 01f0 	movw	r1, #14576	@ 0x38f0
 800117a:	486b      	ldr	r0, [pc, #428]	@ (8001328 <MX_GPIO_Init+0x2b4>)
 800117c:	f003 f966 	bl	800444c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2148      	movs	r1, #72	@ 0x48
 8001184:	4869      	ldr	r0, [pc, #420]	@ (800132c <MX_GPIO_Init+0x2b8>)
 8001186:	f003 f961 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118a:	2304      	movs	r3, #4
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	485d      	ldr	r0, [pc, #372]	@ (8001318 <MX_GPIO_Init+0x2a4>)
 80011a2:	f002 ffa7 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4858      	ldr	r0, [pc, #352]	@ (8001320 <MX_GPIO_Init+0x2ac>)
 80011be:	f002 ff99 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : motor2gpio_Pin */
  GPIO_InitStruct.Pin = motor2gpio_Pin;
 80011c2:	2310      	movs	r3, #16
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(motor2gpio_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4850      	ldr	r0, [pc, #320]	@ (800131c <MX_GPIO_Init+0x2a8>)
 80011da:	f002 ff8b 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011de:	2320      	movs	r3, #32
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4849      	ldr	r0, [pc, #292]	@ (800131c <MX_GPIO_Init+0x2a8>)
 80011f6:	f002 ff7d 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011fa:	2332      	movs	r3, #50	@ 0x32
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120a:	230b      	movs	r3, #11
 800120c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	4842      	ldr	r0, [pc, #264]	@ (8001320 <MX_GPIO_Init+0x2ac>)
 8001216:	f002 ff6d 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800121a:	2304      	movs	r3, #4
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	483b      	ldr	r0, [pc, #236]	@ (8001320 <MX_GPIO_Init+0x2ac>)
 8001232:	f002 ff5f 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001236:	2386      	movs	r3, #134	@ 0x86
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001246:	230b      	movs	r3, #11
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4837      	ldr	r0, [pc, #220]	@ (8001330 <MX_GPIO_Init+0x2bc>)
 8001252:	f002 ff4f 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB2 LD3_Pin PB6
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_2|LD3_Pin|GPIO_PIN_6
 8001256:	f244 03c5 	movw	r3, #16581	@ 0x40c5
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	482d      	ldr	r0, [pc, #180]	@ (8001324 <MX_GPIO_Init+0x2b0>)
 8001270:	f002 ff40 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001286:	230b      	movs	r3, #11
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	4824      	ldr	r0, [pc, #144]	@ (8001324 <MX_GPIO_Init+0x2b0>)
 8001292:	f002 ff2f 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4
 8001296:	f643 03f0 	movw	r3, #14576	@ 0x38f0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	481e      	ldr	r0, [pc, #120]	@ (8001328 <MX_GPIO_Init+0x2b4>)
 80012b0:	f002 ff20 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|USB_PowerSwitchOn_Pin;
 80012b4:	2348      	movs	r3, #72	@ 0x48
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4818      	ldr	r0, [pc, #96]	@ (800132c <MX_GPIO_Init+0x2b8>)
 80012cc:	f002 ff12 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4812      	ldr	r0, [pc, #72]	@ (800132c <MX_GPIO_Init+0x2b8>)
 80012e4:	f002 ff06 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012e8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fa:	230b      	movs	r3, #11
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <MX_GPIO_Init+0x2b8>)
 8001306:	f002 fef5 	bl	80040f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	@ 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020400 	.word	0x40020400
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021800 	.word	0x40021800
 8001330:	40020000 	.word	0x40020000

08001334 <resetTime>:
        //HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, tx_buffer_size, HAL_MAX_DELAY);
        // Start a new receive operation
        //HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 5);
    }
}
void resetTime(){
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	seconds = 0;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <resetTime+0x20>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
	minutes = 0;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <resetTime+0x24>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
	hours = 0;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <resetTime+0x28>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
//	HAL_TIM_Base_DeInit(&htim10);
//	HAL_TIM_Base_Init(&htim10);
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000a4c 	.word	0x20000a4c
 8001358:	20000a4b 	.word	0x20000a4b
 800135c:	20000a4a 	.word	0x20000a4a

08001360 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(pumpTestsParameters[pump].eNextState) {
 8001368:	4bc3      	ldr	r3, [pc, #780]	@ (8001678 <StartDefaultTask+0x318>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4ac3      	ldr	r2, [pc, #780]	@ (800167c <StartDefaultTask+0x31c>)
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	3318      	adds	r3, #24
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f201 803f 	bhi.w	8002402 <StartDefaultTask+0x10a2>
 8001384:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <StartDefaultTask+0x2c>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	080013cd 	.word	0x080013cd
 8001390:	0800149d 	.word	0x0800149d
 8001394:	08001517 	.word	0x08001517
 8001398:	08001733 	.word	0x08001733
 800139c:	080017d9 	.word	0x080017d9
 80013a0:	08001a1f 	.word	0x08001a1f
 80013a4:	08001a99 	.word	0x08001a99
 80013a8:	08001ba9 	.word	0x08001ba9
 80013ac:	08001c81 	.word	0x08001c81
 80013b0:	08001dbd 	.word	0x08001dbd
 80013b4:	08001e31 	.word	0x08001e31
 80013b8:	08001fd5 	.word	0x08001fd5
 80013bc:	08002057 	.word	0x08002057
 80013c0:	080021bf 	.word	0x080021bf
 80013c4:	08002337 	.word	0x08002337
 80013c8:	080023c1 	.word	0x080023c1
	  			case START:
	  				osThreadSuspend(sendDataHandle);
 80013cc:	4bac      	ldr	r3, [pc, #688]	@ (8001680 <StartDefaultTask+0x320>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 fd61 	bl	8007e98 <osThreadSuspend>
					volts = setFlowRate(0);					// assigns volts to 0 L/min
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff fb48 	bl	8000a6c <setFlowRate>
 80013dc:	eef0 7a40 	vmov.f32	s15, s0
 80013e0:	4ba8      	ldr	r3, [pc, #672]	@ (8001684 <StartDefaultTask+0x324>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
					//dacSet(&hdac, DAC_CHANNEL_1, volts);	// Sets volts
					flowControllerADC(&hadc1);				// Changes ADC mult to read Flow Ctrl
 80013e6:	48a8      	ldr	r0, [pc, #672]	@ (8001688 <StartDefaultTask+0x328>)
 80013e8:	f7ff faee 	bl	80009c8 <flowControllerADC>
					//flowStateOpen();						// Opens Flow Ctrl
					flowStateControl();
 80013ec:	f7ff fbbc 	bl	8000b68 <flowStateControl>
					dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(50));
 80013f0:	2032      	movs	r0, #50	@ 0x32
 80013f2:	f7ff fb3b 	bl	8000a6c <setFlowRate>
 80013f6:	eef0 7a40 	vmov.f32	s15, s0
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	2100      	movs	r1, #0
 8001400:	48a2      	ldr	r0, [pc, #648]	@ (800168c <StartDefaultTask+0x32c>)
 8001402:	f001 f9dd 	bl	80027c0 <dacSet>
					resetTime();							// Resets Clk
 8001406:	f7ff ff95 	bl	8001334 <resetTime>

					recalibrate();
 800140a:	f7ff fbf1 	bl	8000bf0 <recalibrate>
					HAL_TIM_Base_Start_IT(&htim7);			// Opens Stepper Motor
 800140e:	48a0      	ldr	r0, [pc, #640]	@ (8001690 <StartDefaultTask+0x330>)
 8001410:	f004 fb7e 	bl	8005b10 <HAL_TIM_Base_Start_IT>

					if(pump){
 8001414:	4b98      	ldr	r3, [pc, #608]	@ (8001678 <StartDefaultTask+0x318>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <StartDefaultTask+0xc2>
						solenoidTwoOpen();
 800141c:	f001 fa5e 	bl	80028dc <solenoidTwoOpen>
 8001420:	e001      	b.n	8001426 <StartDefaultTask+0xc6>
					}else{
						solenoidOneOpen();
 8001422:	f001 fa3f 	bl	80028a4 <solenoidOneOpen>
					}
					solenoidTwoOpen();
 8001426:	f001 fa59 	bl	80028dc <solenoidTwoOpen>
//	  				pumpTestsParameters[0].stateList[7] = ULTIMATE_MEASURE_TEST_INIT;
//	  				pumpTestsParameters[0].stateList[8] = IDLE;
//	  				pumpTestsParameters[0].stateList[9] = 0;

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 800142a:	4b93      	ldr	r3, [pc, #588]	@ (8001678 <StartDefaultTask+0x318>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	3318      	adds	r3, #24
 800143a:	4a90      	ldr	r2, [pc, #576]	@ (800167c <StartDefaultTask+0x31c>)
 800143c:	1899      	adds	r1, r3, r2
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	2201      	movs	r2, #1
 8001444:	4893      	ldr	r0, [pc, #588]	@ (8001694 <StartDefaultTask+0x334>)
 8001446:	f004 feeb 	bl	8006220 <HAL_UART_Transmit>

					// Receives State List
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[pump].stateList, 20, HAL_MAX_DELAY);
 800144a:	4b8b      	ldr	r3, [pc, #556]	@ (8001678 <StartDefaultTask+0x318>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4a88      	ldr	r2, [pc, #544]	@ (800167c <StartDefaultTask+0x31c>)
 800145a:	1899      	adds	r1, r3, r2
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	2214      	movs	r2, #20
 8001462:	488c      	ldr	r0, [pc, #560]	@ (8001694 <StartDefaultTask+0x334>)
 8001464:	f004 ff5f 	bl	8006326 <HAL_UART_Receive>



					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState;
 8001468:	4b83      	ldr	r3, [pc, #524]	@ (8001678 <StartDefaultTask+0x318>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	4a83      	ldr	r2, [pc, #524]	@ (800167c <StartDefaultTask+0x31c>)
 8001470:	460b      	mov	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	3314      	adds	r3, #20
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7e      	ldr	r2, [pc, #504]	@ (8001678 <StartDefaultTask+0x318>)
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	4611      	mov	r1, r2
 8001484:	7818      	ldrb	r0, [r3, #0]
 8001486:	4a7d      	ldr	r2, [pc, #500]	@ (800167c <StartDefaultTask+0x31c>)
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4413      	add	r3, r2
 8001492:	3318      	adds	r3, #24
 8001494:	4602      	mov	r2, r0
 8001496:	701a      	strb	r2, [r3, #0]
	  				break;
 8001498:	f000 bfbf 	b.w	800241a <StartDefaultTask+0x10ba>
//					pumpTestsParameters[0].VATI[5] = 1;		// flow controller closed
//					pumpTestsParameters[0].VATI[6] = 3;		// mTorr
//					pumpTestsParameters[0].VATI[7] = 50;		// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 800149c:	4b76      	ldr	r3, [pc, #472]	@ (8001678 <StartDefaultTask+0x318>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	3318      	adds	r3, #24
 80014ac:	4a73      	ldr	r2, [pc, #460]	@ (800167c <StartDefaultTask+0x31c>)
 80014ae:	1899      	adds	r1, r3, r2
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	2201      	movs	r2, #1
 80014b6:	4877      	ldr	r0, [pc, #476]	@ (8001694 <StartDefaultTask+0x334>)
 80014b8:	f004 feb2 	bl	8006220 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].VATI[0], 8, HAL_MAX_DELAY);
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	2208      	movs	r2, #8
 80014c2:	4975      	ldr	r1, [pc, #468]	@ (8001698 <StartDefaultTask+0x338>)
 80014c4:	4873      	ldr	r0, [pc, #460]	@ (8001694 <StartDefaultTask+0x334>)
 80014c6:	f004 ff2e 	bl	8006326 <HAL_UART_Receive>

	  				flowStateClose();
 80014ca:	f7ff fb15 	bl	8000af8 <flowStateClose>
	  				stepperOpen();
 80014ce:	f7ff fb69 	bl	8000ba4 <stepperOpen>
	  				//solenoidOneOpen();
	  				//solenoidClose();
	  				vacuumGaugeADC(&hadc1);
 80014d2:	486d      	ldr	r0, [pc, #436]	@ (8001688 <StartDefaultTask+0x328>)
 80014d4:	f001 fe28 	bl	8003128 <vacuumGaugeADC>
	  				pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
 80014d8:	4b67      	ldr	r3, [pc, #412]	@ (8001678 <StartDefaultTask+0x318>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	4a67      	ldr	r2, [pc, #412]	@ (800167c <StartDefaultTask+0x31c>)
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	3318      	adds	r3, #24
 80014ec:	2202      	movs	r2, #2
 80014ee:	701a      	strb	r2, [r3, #0]

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 80014f0:	4b6a      	ldr	r3, [pc, #424]	@ (800169c <StartDefaultTask+0x33c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b68      	ldr	r3, [pc, #416]	@ (800169c <StartDefaultTask+0x33c>)
 80014fc:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 80014fe:	4b60      	ldr	r3, [pc, #384]	@ (8001680 <StartDefaultTask+0x320>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f006 fcfc 	bl	8007f00 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001508:	4865      	ldr	r0, [pc, #404]	@ (80016a0 <StartDefaultTask+0x340>)
 800150a:	f004 fb01 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 800150e:	f7ff ff11 	bl	8001334 <resetTime>

	  				break;
 8001512:	f000 bf82 	b.w	800241a <StartDefaultTask+0x10ba>
	  			case VAC_ACHIEVMENT_TEST:
	  				volts = adcGet(&hadc1);
 8001516:	485c      	ldr	r0, [pc, #368]	@ (8001688 <StartDefaultTask+0x328>)
 8001518:	f001 f986 	bl	8002828 <adcGet>
 800151c:	eef0 7a40 	vmov.f32	s15, s0
 8001520:	4b58      	ldr	r3, [pc, #352]	@ (8001684 <StartDefaultTask+0x324>)
 8001522:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 8001526:	4b57      	ldr	r3, [pc, #348]	@ (8001684 <StartDefaultTask+0x324>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	eeb0 0a67 	vmov.f32	s0, s15
 8001530:	f001 fe1e 	bl	8003170 <readVacuum>
 8001534:	eef0 7a40 	vmov.f32	s15, s0
 8001538:	4b5a      	ldr	r3, [pc, #360]	@ (80016a4 <StartDefaultTask+0x344>)
 800153a:	edc3 7a00 	vstr	s15, [r3]

	  				// Remove this once STM is connected to hardware
	  				vacuumScale = 1000;
 800153e:	4b59      	ldr	r3, [pc, #356]	@ (80016a4 <StartDefaultTask+0x344>)
 8001540:	4a59      	ldr	r2, [pc, #356]	@ (80016a8 <StartDefaultTask+0x348>)
 8001542:	601a      	str	r2, [r3, #0]
	  				if(seconds >= 10){	// Passes test after 10 seconds
 8001544:	4b59      	ldr	r3, [pc, #356]	@ (80016ac <StartDefaultTask+0x34c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b09      	cmp	r3, #9
 800154a:	d903      	bls.n	8001554 <StartDefaultTask+0x1f4>
	  					vacuumScale = 0;
 800154c:	4b55      	ldr	r3, [pc, #340]	@ (80016a4 <StartDefaultTask+0x344>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
	  				}
	  				//

	  				if(vacuumScale <= (float)pumpTestsParameters[pump].VATI[6] / 1000.0){	// Success
 8001554:	4b53      	ldr	r3, [pc, #332]	@ (80016a4 <StartDefaultTask+0x344>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800155e:	4b46      	ldr	r3, [pc, #280]	@ (8001678 <StartDefaultTask+0x318>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4a45      	ldr	r2, [pc, #276]	@ (800167c <StartDefaultTask+0x31c>)
 8001566:	460b      	mov	r3, r1
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	331f      	adds	r3, #31
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001580:	ed9f 4b3b 	vldr	d4, [pc, #236]	@ 8001670 <StartDefaultTask+0x310>
 8001584:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001588:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	d83b      	bhi.n	800160a <StartDefaultTask+0x2aa>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001592:	4843      	ldr	r0, [pc, #268]	@ (80016a0 <StartDefaultTask+0x340>)
 8001594:	f004 fb34 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		  				// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001598:	4b40      	ldr	r3, [pc, #256]	@ (800169c <StartDefaultTask+0x33c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b3e      	ldr	r3, [pc, #248]	@ (800169c <StartDefaultTask+0x33c>)
 80015a4:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 80015a6:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <StartDefaultTask+0x350>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f006 fc74 	bl	8007e98 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 80015b0:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <StartDefaultTask+0x318>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4931      	ldr	r1, [pc, #196]	@ (800167c <StartDefaultTask+0x31c>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	440b      	add	r3, r1
 80015c2:	3314      	adds	r3, #20
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1c59      	adds	r1, r3, #1
 80015c8:	482c      	ldr	r0, [pc, #176]	@ (800167c <StartDefaultTask+0x31c>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4403      	add	r3, r0
 80015d4:	3314      	adds	r3, #20
 80015d6:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <StartDefaultTask+0x318>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a27      	ldr	r2, [pc, #156]	@ (800167c <StartDefaultTask+0x31c>)
 80015e0:	460b      	mov	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	3314      	adds	r3, #20
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <StartDefaultTask+0x318>)
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	4611      	mov	r1, r2
 80015f4:	7818      	ldrb	r0, [r3, #0]
 80015f6:	4a21      	ldr	r2, [pc, #132]	@ (800167c <StartDefaultTask+0x31c>)
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	3318      	adds	r3, #24
 8001604:	4602      	mov	r2, r0
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e08e      	b.n	8001728 <StartDefaultTask+0x3c8>
	  				}else if(temperature >= pumpTestsParameters[pump].VATI[7]){	// if current temp is >= temp limit
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <StartDefaultTask+0x318>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4a1a      	ldr	r2, [pc, #104]	@ (800167c <StartDefaultTask+0x31c>)
 8001612:	460b      	mov	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	3320      	adds	r3, #32
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <StartDefaultTask+0x354>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d83f      	bhi.n	80016b8 <StartDefaultTask+0x358>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <StartDefaultTask+0x318>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <StartDefaultTask+0x31c>)
 8001640:	460b      	mov	r3, r1
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	3318      	adds	r3, #24
 800164c:	220e      	movs	r2, #14
 800164e:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <StartDefaultTask+0x318>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <StartDefaultTask+0x31c>)
 8001658:	460b      	mov	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4413      	add	r3, r2
 8001662:	334e      	adds	r3, #78	@ 0x4e
 8001664:	2202      	movs	r2, #2
 8001666:	701a      	strb	r2, [r3, #0]
	  					break;
 8001668:	f000 bed7 	b.w	800241a <StartDefaultTask+0x10ba>
 800166c:	f3af 8000 	nop.w
 8001670:	00000000 	.word	0x00000000
 8001674:	408f4000 	.word	0x408f4000
 8001678:	20000a1c 	.word	0x20000a1c
 800167c:	2000097c 	.word	0x2000097c
 8001680:	20000978 	.word	0x20000978
 8001684:	20000a20 	.word	0x20000a20
 8001688:	20000268 	.word	0x20000268
 800168c:	200002b0 	.word	0x200002b0
 8001690:	200002c4 	.word	0x200002c4
 8001694:	200003e4 	.word	0x200003e4
 8001698:	20000995 	.word	0x20000995
 800169c:	20000a49 	.word	0x20000a49
 80016a0:	20000310 	.word	0x20000310
 80016a4:	20000a30 	.word	0x20000a30
 80016a8:	447a0000 	.word	0x447a0000
 80016ac:	20000a4c 	.word	0x20000a4c
 80016b0:	20000974 	.word	0x20000974
 80016b4:	20000048 	.word	0x20000048
	  				}else if(pumpTestsParameters[pump].VATI[2] == hours && pumpTestsParameters[pump].VATI[3] == minutes){
 80016b8:	4ba7      	ldr	r3, [pc, #668]	@ (8001958 <StartDefaultTask+0x5f8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	4aa7      	ldr	r2, [pc, #668]	@ (800195c <StartDefaultTask+0x5fc>)
 80016c0:	460b      	mov	r3, r1
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	331b      	adds	r3, #27
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	4ba4      	ldr	r3, [pc, #656]	@ (8001960 <StartDefaultTask+0x600>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d128      	bne.n	8001728 <StartDefaultTask+0x3c8>
 80016d6:	4ba0      	ldr	r3, [pc, #640]	@ (8001958 <StartDefaultTask+0x5f8>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4a9f      	ldr	r2, [pc, #636]	@ (800195c <StartDefaultTask+0x5fc>)
 80016de:	460b      	mov	r3, r1
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4413      	add	r3, r2
 80016e8:	331c      	adds	r3, #28
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001964 <StartDefaultTask+0x604>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d119      	bne.n	8001728 <StartDefaultTask+0x3c8>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80016f4:	4b98      	ldr	r3, [pc, #608]	@ (8001958 <StartDefaultTask+0x5f8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4a98      	ldr	r2, [pc, #608]	@ (800195c <StartDefaultTask+0x5fc>)
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	3318      	adds	r3, #24
 8001708:	220e      	movs	r2, #14
 800170a:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800170c:	4b92      	ldr	r3, [pc, #584]	@ (8001958 <StartDefaultTask+0x5f8>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4a92      	ldr	r2, [pc, #584]	@ (800195c <StartDefaultTask+0x5fc>)
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	334e      	adds	r3, #78	@ 0x4e
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]
	  					break;
 8001724:	f000 be79 	b.w	800241a <StartDefaultTask+0x10ba>
	  				}

	  				osDelay(100); // Checks condition every 100 ms
 8001728:	2064      	movs	r0, #100	@ 0x64
 800172a:	f006 fc1d 	bl	8007f68 <osDelay>

	  				break;
 800172e:	f000 be74 	b.w	800241a <StartDefaultTask+0x10ba>
//					pumpTestsParameters[0].STI[6] = 0;		// mTorr
//					pumpTestsParameters[0].STI[7] = 50;		// temperature in C
//					pumpTestsParameters[0].STI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001732:	4b89      	ldr	r3, [pc, #548]	@ (8001958 <StartDefaultTask+0x5f8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	3318      	adds	r3, #24
 8001742:	4a86      	ldr	r2, [pc, #536]	@ (800195c <StartDefaultTask+0x5fc>)
 8001744:	1899      	adds	r1, r3, r2
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	2201      	movs	r2, #1
 800174c:	4886      	ldr	r0, [pc, #536]	@ (8001968 <StartDefaultTask+0x608>)
 800174e:	f004 fd67 	bl	8006220 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].STI[0], 9, HAL_MAX_DELAY);
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	2209      	movs	r2, #9
 8001758:	4984      	ldr	r1, [pc, #528]	@ (800196c <StartDefaultTask+0x60c>)
 800175a:	4883      	ldr	r0, [pc, #524]	@ (8001968 <StartDefaultTask+0x608>)
 800175c:	f004 fde3 	bl	8006326 <HAL_UART_Receive>

	  				flowStateControl();
 8001760:	f7ff fa02 	bl	8000b68 <flowStateControl>
	  				stepperOpen();
 8001764:	f7ff fa1e 	bl	8000ba4 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 8001768:	4881      	ldr	r0, [pc, #516]	@ (8001970 <StartDefaultTask+0x610>)
 800176a:	f7ff f92d 	bl	80009c8 <flowControllerADC>
	  				pumpTestsParameters[pump].eNextState = SPECIAL_TEST;
 800176e:	4b7a      	ldr	r3, [pc, #488]	@ (8001958 <StartDefaultTask+0x5f8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4a79      	ldr	r2, [pc, #484]	@ (800195c <StartDefaultTask+0x5fc>)
 8001776:	460b      	mov	r3, r1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	3318      	adds	r3, #24
 8001782:	2204      	movs	r2, #4
 8001784:	701a      	strb	r2, [r3, #0]
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].STI[8]));
 8001786:	4b74      	ldr	r3, [pc, #464]	@ (8001958 <StartDefaultTask+0x5f8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4a73      	ldr	r2, [pc, #460]	@ (800195c <StartDefaultTask+0x5fc>)
 800178e:	460b      	mov	r3, r1
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	3329      	adds	r3, #41	@ 0x29
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f965 	bl	8000a6c <setFlowRate>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	2100      	movs	r1, #0
 80017ac:	4871      	ldr	r0, [pc, #452]	@ (8001974 <StartDefaultTask+0x614>)
 80017ae:	f001 f807 	bl	80027c0 <dacSet>

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 80017b2:	4b71      	ldr	r3, [pc, #452]	@ (8001978 <StartDefaultTask+0x618>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001978 <StartDefaultTask+0x618>)
 80017be:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 80017c0:	4b6e      	ldr	r3, [pc, #440]	@ (800197c <StartDefaultTask+0x61c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 fb9b 	bl	8007f00 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 80017ca:	486d      	ldr	r0, [pc, #436]	@ (8001980 <StartDefaultTask+0x620>)
 80017cc:	f004 f9a0 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 80017d0:	f7ff fdb0 	bl	8001334 <resetTime>

	  				break;
 80017d4:	f000 be21 	b.w	800241a <StartDefaultTask+0x10ba>

	  			case SPECIAL_TEST:
	  				flowControllerADC(&hadc1);
 80017d8:	4865      	ldr	r0, [pc, #404]	@ (8001970 <StartDefaultTask+0x610>)
 80017da:	f7ff f8f5 	bl	80009c8 <flowControllerADC>
					volts = adcGet(&hadc1);
 80017de:	4864      	ldr	r0, [pc, #400]	@ (8001970 <StartDefaultTask+0x610>)
 80017e0:	f001 f822 	bl	8002828 <adcGet>
 80017e4:	eef0 7a40 	vmov.f32	s15, s0
 80017e8:	4b66      	ldr	r3, [pc, #408]	@ (8001984 <StartDefaultTask+0x624>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 80017ee:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <StartDefaultTask+0x624>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	f7ff f90a 	bl	8000a10 <readFlow>
 80017fc:	eef0 7a40 	vmov.f32	s15, s0
 8001800:	4b61      	ldr	r3, [pc, #388]	@ (8001988 <StartDefaultTask+0x628>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 8001806:	485a      	ldr	r0, [pc, #360]	@ (8001970 <StartDefaultTask+0x610>)
 8001808:	f001 fc8e 	bl	8003128 <vacuumGaugeADC>
	  				volts = adcGet(&hadc1);
 800180c:	4858      	ldr	r0, [pc, #352]	@ (8001970 <StartDefaultTask+0x610>)
 800180e:	f001 f80b 	bl	8002828 <adcGet>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	4b5b      	ldr	r3, [pc, #364]	@ (8001984 <StartDefaultTask+0x624>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 800181c:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <StartDefaultTask+0x624>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	f001 fca3 	bl	8003170 <readVacuum>
 800182a:	eef0 7a40 	vmov.f32	s15, s0
 800182e:	4b57      	ldr	r3, [pc, #348]	@ (800198c <StartDefaultTask+0x62c>)
 8001830:	edc3 7a00 	vstr	s15, [r3]

	  				// Remove this Once STM is connected to the hardware
	  				flowRate = 0;
 8001834:	4b54      	ldr	r3, [pc, #336]	@ (8001988 <StartDefaultTask+0x628>)
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
	  				vacuumScale = 1000;
 800183c:	4b53      	ldr	r3, [pc, #332]	@ (800198c <StartDefaultTask+0x62c>)
 800183e:	4a54      	ldr	r2, [pc, #336]	@ (8001990 <StartDefaultTask+0x630>)
 8001840:	601a      	str	r2, [r3, #0]
	  				if(seconds >= 10){	// After 10 sec Test is success
 8001842:	4b54      	ldr	r3, [pc, #336]	@ (8001994 <StartDefaultTask+0x634>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b09      	cmp	r3, #9
 8001848:	d902      	bls.n	8001850 <StartDefaultTask+0x4f0>
	  					flowRate = 50;
 800184a:	4b4f      	ldr	r3, [pc, #316]	@ (8001988 <StartDefaultTask+0x628>)
 800184c:	4a52      	ldr	r2, [pc, #328]	@ (8001998 <StartDefaultTask+0x638>)
 800184e:	601a      	str	r2, [r3, #0]
	  				}
	  				//

	  				if((uint8_t)flowRate == pumpTestsParameters[pump].STI[8]){	// success
 8001850:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <StartDefaultTask+0x628>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800185a:	edc7 7a00 	vstr	s15, [r7]
 800185e:	783b      	ldrb	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <StartDefaultTask+0x5f8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	493c      	ldr	r1, [pc, #240]	@ (800195c <StartDefaultTask+0x5fc>)
 800186a:	4603      	mov	r3, r0
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4403      	add	r3, r0
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	3329      	adds	r3, #41	@ 0x29
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d13b      	bne.n	80018f4 <StartDefaultTask+0x594>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 800187c:	4840      	ldr	r0, [pc, #256]	@ (8001980 <StartDefaultTask+0x620>)
 800187e:	f004 f9bf 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
						// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001882:	4b3d      	ldr	r3, [pc, #244]	@ (8001978 <StartDefaultTask+0x618>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <StartDefaultTask+0x618>)
 800188e:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8001890:	4b42      	ldr	r3, [pc, #264]	@ (800199c <StartDefaultTask+0x63c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f006 faff 	bl	8007e98 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 800189a:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <StartDefaultTask+0x5f8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	492e      	ldr	r1, [pc, #184]	@ (800195c <StartDefaultTask+0x5fc>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	440b      	add	r3, r1
 80018ac:	3314      	adds	r3, #20
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	482a      	ldr	r0, [pc, #168]	@ (800195c <StartDefaultTask+0x5fc>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4403      	add	r3, r0
 80018be:	3314      	adds	r3, #20
 80018c0:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 80018c2:	4b25      	ldr	r3, [pc, #148]	@ (8001958 <StartDefaultTask+0x5f8>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4a24      	ldr	r2, [pc, #144]	@ (800195c <StartDefaultTask+0x5fc>)
 80018ca:	460b      	mov	r3, r1
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	3314      	adds	r3, #20
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001958 <StartDefaultTask+0x5f8>)
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	4611      	mov	r1, r2
 80018de:	7818      	ldrb	r0, [r3, #0]
 80018e0:	4a1e      	ldr	r2, [pc, #120]	@ (800195c <StartDefaultTask+0x5fc>)
 80018e2:	460b      	mov	r3, r1
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	3318      	adds	r3, #24
 80018ee:	4602      	mov	r2, r0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e08f      	b.n	8001a14 <StartDefaultTask+0x6b4>
	  				}else if(temperature >= pumpTestsParameters[pump].STI[7]){	// if current temp is >= temp limit
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <StartDefaultTask+0x5f8>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4a18      	ldr	r2, [pc, #96]	@ (800195c <StartDefaultTask+0x5fc>)
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	3328      	adds	r3, #40	@ 0x28
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <StartDefaultTask+0x640>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d840      	bhi.n	80019a4 <StartDefaultTask+0x644>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <StartDefaultTask+0x5f8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <StartDefaultTask+0x5fc>)
 800192a:	460b      	mov	r3, r1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	3318      	adds	r3, #24
 8001936:	220e      	movs	r2, #14
 8001938:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <StartDefaultTask+0x5f8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4a06      	ldr	r2, [pc, #24]	@ (800195c <StartDefaultTask+0x5fc>)
 8001942:	460b      	mov	r3, r1
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	334e      	adds	r3, #78	@ 0x4e
 800194e:	2202      	movs	r2, #2
 8001950:	701a      	strb	r2, [r3, #0]
	  					break;
 8001952:	f000 bd62 	b.w	800241a <StartDefaultTask+0x10ba>
 8001956:	bf00      	nop
 8001958:	20000a1c 	.word	0x20000a1c
 800195c:	2000097c 	.word	0x2000097c
 8001960:	20000a4a 	.word	0x20000a4a
 8001964:	20000a4b 	.word	0x20000a4b
 8001968:	200003e4 	.word	0x200003e4
 800196c:	2000099d 	.word	0x2000099d
 8001970:	20000268 	.word	0x20000268
 8001974:	200002b0 	.word	0x200002b0
 8001978:	20000a49 	.word	0x20000a49
 800197c:	20000978 	.word	0x20000978
 8001980:	20000310 	.word	0x20000310
 8001984:	20000a20 	.word	0x20000a20
 8001988:	20000a2c 	.word	0x20000a2c
 800198c:	20000a30 	.word	0x20000a30
 8001990:	447a0000 	.word	0x447a0000
 8001994:	20000a4c 	.word	0x20000a4c
 8001998:	42480000 	.word	0x42480000
 800199c:	20000974 	.word	0x20000974
 80019a0:	20000048 	.word	0x20000048
	  				}else if(pumpTestsParameters[pump].STI[2] == hours && pumpTestsParameters[pump].STI[3] == minutes){
 80019a4:	4ba8      	ldr	r3, [pc, #672]	@ (8001c48 <StartDefaultTask+0x8e8>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4aa8      	ldr	r2, [pc, #672]	@ (8001c4c <StartDefaultTask+0x8ec>)
 80019ac:	460b      	mov	r3, r1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	3323      	adds	r3, #35	@ 0x23
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4ba5      	ldr	r3, [pc, #660]	@ (8001c50 <StartDefaultTask+0x8f0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d128      	bne.n	8001a14 <StartDefaultTask+0x6b4>
 80019c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001c48 <StartDefaultTask+0x8e8>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4aa0      	ldr	r2, [pc, #640]	@ (8001c4c <StartDefaultTask+0x8ec>)
 80019ca:	460b      	mov	r3, r1
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	3324      	adds	r3, #36	@ 0x24
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	4b9e      	ldr	r3, [pc, #632]	@ (8001c54 <StartDefaultTask+0x8f4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d119      	bne.n	8001a14 <StartDefaultTask+0x6b4>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80019e0:	4b99      	ldr	r3, [pc, #612]	@ (8001c48 <StartDefaultTask+0x8e8>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4a99      	ldr	r2, [pc, #612]	@ (8001c4c <StartDefaultTask+0x8ec>)
 80019e8:	460b      	mov	r3, r1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	3318      	adds	r3, #24
 80019f4:	220e      	movs	r2, #14
 80019f6:	701a      	strb	r2, [r3, #0]
						pumpTestsParameters[pump].pumpStatus = FAILURE;
 80019f8:	4b93      	ldr	r3, [pc, #588]	@ (8001c48 <StartDefaultTask+0x8e8>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4a93      	ldr	r2, [pc, #588]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001a00:	460b      	mov	r3, r1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	334e      	adds	r3, #78	@ 0x4e
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
						break;
 8001a10:	f000 bd03 	b.w	800241a <StartDefaultTask+0x10ba>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 8001a14:	2064      	movs	r0, #100	@ 0x64
 8001a16:	f006 faa7 	bl	8007f68 <osDelay>
					break;
 8001a1a:	f000 bcfe 	b.w	800241a <StartDefaultTask+0x10ba>
//					pumpTestsParameters[0].WUI[5] = 0;		// flow controller open
//					pumpTestsParameters[0].WUI[6] = 0;		// mTorr
//					pumpTestsParameters[0].WUI[7] = 100;	// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001a1e:	4b8a      	ldr	r3, [pc, #552]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	4a87      	ldr	r2, [pc, #540]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001a30:	1899      	adds	r1, r3, r2
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	2201      	movs	r2, #1
 8001a38:	4887      	ldr	r0, [pc, #540]	@ (8001c58 <StartDefaultTask+0x8f8>)
 8001a3a:	f004 fbf1 	bl	8006220 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].WUI[0], 8, HAL_MAX_DELAY);
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	2208      	movs	r2, #8
 8001a44:	4985      	ldr	r1, [pc, #532]	@ (8001c5c <StartDefaultTask+0x8fc>)
 8001a46:	4884      	ldr	r0, [pc, #528]	@ (8001c58 <StartDefaultTask+0x8f8>)
 8001a48:	f004 fc6d 	bl	8006326 <HAL_UART_Receive>

	  				flowStateOpen();
 8001a4c:	f7ff f870 	bl	8000b30 <flowStateOpen>
	  				stepperOpen();
 8001a50:	f7ff f8a8 	bl	8000ba4 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				vacuumGaugeADC(&hadc1);
 8001a54:	4882      	ldr	r0, [pc, #520]	@ (8001c60 <StartDefaultTask+0x900>)
 8001a56:	f001 fb67 	bl	8003128 <vacuumGaugeADC>
	  				pumpTestsParameters[pump].eNextState = WARM_UP;
 8001a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4a7a      	ldr	r2, [pc, #488]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001a62:	460b      	mov	r3, r1
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	2206      	movs	r2, #6
 8001a70:	701a      	strb	r2, [r3, #0]

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 8001a72:	4b7c      	ldr	r3, [pc, #496]	@ (8001c64 <StartDefaultTask+0x904>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b79      	ldr	r3, [pc, #484]	@ (8001c64 <StartDefaultTask+0x904>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 8001a80:	4b79      	ldr	r3, [pc, #484]	@ (8001c68 <StartDefaultTask+0x908>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f006 fa3b 	bl	8007f00 <osThreadResume>


	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001a8a:	4878      	ldr	r0, [pc, #480]	@ (8001c6c <StartDefaultTask+0x90c>)
 8001a8c:	f004 f840 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8001a90:	f7ff fc50 	bl	8001334 <resetTime>


	  				break;
 8001a94:	f000 bcc1 	b.w	800241a <StartDefaultTask+0x10ba>
	  			case WARM_UP:
	  				// Remove this once STM is connected to hardware
	  				//

	  				// record internal/external temperatures
	  				if(pumpTestsParameters[pump].WUI[2] == hours && pumpTestsParameters[pump].WUI[3] == minutes){	// Success
 8001a98:	4b6b      	ldr	r3, [pc, #428]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	332c      	adds	r3, #44	@ 0x2c
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b68      	ldr	r3, [pc, #416]	@ (8001c50 <StartDefaultTask+0x8f0>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d14a      	bne.n	8001b4c <StartDefaultTask+0x7ec>
 8001ab6:	4b64      	ldr	r3, [pc, #400]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4a63      	ldr	r2, [pc, #396]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001abe:	460b      	mov	r3, r1
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	332d      	adds	r3, #45	@ 0x2d
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b61      	ldr	r3, [pc, #388]	@ (8001c54 <StartDefaultTask+0x8f4>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d13b      	bne.n	8001b4c <StartDefaultTask+0x7ec>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001ad4:	4865      	ldr	r0, [pc, #404]	@ (8001c6c <StartDefaultTask+0x90c>)
 8001ad6:	f004 f893 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
	  					//osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001ada:	4b62      	ldr	r3, [pc, #392]	@ (8001c64 <StartDefaultTask+0x904>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <StartDefaultTask+0x904>)
 8001ae6:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8001ae8:	4b61      	ldr	r3, [pc, #388]	@ (8001c70 <StartDefaultTask+0x910>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f006 f9d3 	bl	8007e98 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 8001af2:	4b55      	ldr	r3, [pc, #340]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	4954      	ldr	r1, [pc, #336]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	440b      	add	r3, r1
 8001b04:	3314      	adds	r3, #20
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	4850      	ldr	r0, [pc, #320]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4403      	add	r3, r0
 8001b16:	3314      	adds	r3, #20
 8001b18:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8001b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4a4a      	ldr	r2, [pc, #296]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001b22:	460b      	mov	r3, r1
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3314      	adds	r3, #20
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a45      	ldr	r2, [pc, #276]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	4611      	mov	r1, r2
 8001b36:	7818      	ldrb	r0, [r3, #0]
 8001b38:	4a44      	ldr	r2, [pc, #272]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	3318      	adds	r3, #24
 8001b46:	4602      	mov	r2, r0
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e028      	b.n	8001b9e <StartDefaultTask+0x83e>
	  				}else if(temperature >= pumpTestsParameters[0].WUI[7]){	// if current temp is >= temp limit
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001b4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b5a:	4b46      	ldr	r3, [pc, #280]	@ (8001c74 <StartDefaultTask+0x914>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d819      	bhi.n	8001b9e <StartDefaultTask+0x83e>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4a36      	ldr	r2, [pc, #216]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001b72:	460b      	mov	r3, r1
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	220e      	movs	r2, #14
 8001b80:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	334e      	adds	r3, #78	@ 0x4e
 8001b96:	2202      	movs	r2, #2
 8001b98:	701a      	strb	r2, [r3, #0]
	  					break;
 8001b9a:	f000 bc3e 	b.w	800241a <StartDefaultTask+0x10ba>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 8001b9e:	2064      	movs	r0, #100	@ 0x64
 8001ba0:	f006 f9e2 	bl	8007f68 <osDelay>
	  				break;
 8001ba4:	f000 bc39 	b.w	800241a <StartDefaultTask+0x10ba>
//					pumpTestsParameters[0].LTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].LTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].LTI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	3318      	adds	r3, #24
 8001bb8:	4a24      	ldr	r2, [pc, #144]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001bba:	1899      	adds	r1, r3, r2
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4825      	ldr	r0, [pc, #148]	@ (8001c58 <StartDefaultTask+0x8f8>)
 8001bc4:	f004 fb2c 	bl	8006220 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].LTI[0], 8, HAL_MAX_DELAY);
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	2208      	movs	r2, #8
 8001bce:	492a      	ldr	r1, [pc, #168]	@ (8001c78 <StartDefaultTask+0x918>)
 8001bd0:	4821      	ldr	r0, [pc, #132]	@ (8001c58 <StartDefaultTask+0x8f8>)
 8001bd2:	f004 fba8 	bl	8006326 <HAL_UART_Receive>

	  				stepperOpen();
 8001bd6:	f7fe ffe5 	bl	8000ba4 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 8001bda:	4821      	ldr	r0, [pc, #132]	@ (8001c60 <StartDefaultTask+0x900>)
 8001bdc:	f7fe fef4 	bl	80009c8 <flowControllerADC>
	  				pumpTestsParameters[pump].eNextState = LOAD_TEST;
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001be8:	460b      	mov	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3318      	adds	r3, #24
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	701a      	strb	r2, [r3, #0]
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <StartDefaultTask+0x8e8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4a13      	ldr	r2, [pc, #76]	@ (8001c4c <StartDefaultTask+0x8ec>)
 8001c00:	460b      	mov	r3, r1
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4413      	add	r3, r2
 8001c0a:	333a      	adds	r3, #58	@ 0x3a
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe ff2c 	bl	8000a6c <setFlowRate>
 8001c14:	eef0 7a40 	vmov.f32	s15, s0
 8001c18:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4817      	ldr	r0, [pc, #92]	@ (8001c7c <StartDefaultTask+0x91c>)
 8001c20:	f000 fdce 	bl	80027c0 <dacSet>

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <StartDefaultTask+0x904>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <StartDefaultTask+0x904>)
 8001c30:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 8001c32:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <StartDefaultTask+0x908>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f006 f962 	bl	8007f00 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001c3c:	480b      	ldr	r0, [pc, #44]	@ (8001c6c <StartDefaultTask+0x90c>)
 8001c3e:	f003 ff67 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8001c42:	f7ff fb77 	bl	8001334 <resetTime>

	  				break;
 8001c46:	e3e8      	b.n	800241a <StartDefaultTask+0x10ba>
 8001c48:	20000a1c 	.word	0x20000a1c
 8001c4c:	2000097c 	.word	0x2000097c
 8001c50:	20000a4a 	.word	0x20000a4a
 8001c54:	20000a4b 	.word	0x20000a4b
 8001c58:	200003e4 	.word	0x200003e4
 8001c5c:	200009a6 	.word	0x200009a6
 8001c60:	20000268 	.word	0x20000268
 8001c64:	20000a49 	.word	0x20000a49
 8001c68:	20000978 	.word	0x20000978
 8001c6c:	20000310 	.word	0x20000310
 8001c70:	20000974 	.word	0x20000974
 8001c74:	20000048 	.word	0x20000048
 8001c78:	200009ae 	.word	0x200009ae
 8001c7c:	200002b0 	.word	0x200002b0
	  			case LOAD_TEST:

					volts = adcGet(&hadc1);
 8001c80:	48af      	ldr	r0, [pc, #700]	@ (8001f40 <StartDefaultTask+0xbe0>)
 8001c82:	f000 fdd1 	bl	8002828 <adcGet>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
 8001c8a:	4bae      	ldr	r3, [pc, #696]	@ (8001f44 <StartDefaultTask+0xbe4>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 8001c90:	4bac      	ldr	r3, [pc, #688]	@ (8001f44 <StartDefaultTask+0xbe4>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	f7fe feb9 	bl	8000a10 <readFlow>
 8001c9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ca2:	4ba9      	ldr	r3, [pc, #676]	@ (8001f48 <StartDefaultTask+0xbe8>)
 8001ca4:	edc3 7a00 	vstr	s15, [r3]

					// Remove this Once STM is connected to the hardware
					flowRate = 0;
 8001ca8:	4ba7      	ldr	r3, [pc, #668]	@ (8001f48 <StartDefaultTask+0xbe8>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
					//

	  				if(pumpTestsParameters[pump].LTI[2] == hours && pumpTestsParameters[pump].LTI[3] == minutes){	// Success
 8001cb0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3334      	adds	r3, #52	@ 0x34
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	@ (8001f54 <StartDefaultTask+0xbf4>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d14a      	bne.n	8001d64 <StartDefaultTask+0xa04>
 8001cce:	4b9f      	ldr	r3, [pc, #636]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4a9e      	ldr	r2, [pc, #632]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	3335      	adds	r3, #53	@ 0x35
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f58 <StartDefaultTask+0xbf8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d13b      	bne.n	8001d64 <StartDefaultTask+0xa04>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001cec:	489b      	ldr	r0, [pc, #620]	@ (8001f5c <StartDefaultTask+0xbfc>)
 8001cee:	f003 ff87 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
	  					// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001cf2:	4b9b      	ldr	r3, [pc, #620]	@ (8001f60 <StartDefaultTask+0xc00>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b98      	ldr	r3, [pc, #608]	@ (8001f60 <StartDefaultTask+0xc00>)
 8001cfe:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8001d00:	4b98      	ldr	r3, [pc, #608]	@ (8001f64 <StartDefaultTask+0xc04>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f006 f8c7 	bl	8007e98 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 8001d0a:	4b90      	ldr	r3, [pc, #576]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	498f      	ldr	r1, [pc, #572]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3314      	adds	r3, #20
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	488b      	ldr	r0, [pc, #556]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4403      	add	r3, r0
 8001d2e:	3314      	adds	r3, #20
 8001d30:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8001d32:	4b86      	ldr	r3, [pc, #536]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4a85      	ldr	r2, [pc, #532]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	3314      	adds	r3, #20
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a80      	ldr	r2, [pc, #512]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	7818      	ldrb	r0, [r3, #0]
 8001d50:	4a7f      	ldr	r2, [pc, #508]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001d52:	460b      	mov	r3, r1
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	4602      	mov	r2, r0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e027      	b.n	8001db4 <StartDefaultTask+0xa54>
	  				}else if(temperature >= pumpTestsParameters[0].LTI[7]){	// if current temp is >= temp limit
 8001d64:	4b7a      	ldr	r3, [pc, #488]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001d66:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d72:	4b7d      	ldr	r3, [pc, #500]	@ (8001f68 <StartDefaultTask+0xc08>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d818      	bhi.n	8001db4 <StartDefaultTask+0xa54>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001d82:	4b72      	ldr	r3, [pc, #456]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4a71      	ldr	r2, [pc, #452]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4413      	add	r3, r2
 8001d94:	3318      	adds	r3, #24
 8001d96:	220e      	movs	r2, #14
 8001d98:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001da2:	460b      	mov	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4413      	add	r3, r2
 8001dac:	334e      	adds	r3, #78	@ 0x4e
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
	  					break;
 8001db2:	e332      	b.n	800241a <StartDefaultTask+0x10ba>
	  				}

	  				osDelay(100);	// Checks condition every 100 ms
 8001db4:	2064      	movs	r0, #100	@ 0x64
 8001db6:	f006 f8d7 	bl	8007f68 <osDelay>
	  				break;
 8001dba:	e32e      	b.n	800241a <StartDefaultTask+0x10ba>
//					pumpTestsParameters[0].OTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].OTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].OTI[8] = 0;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001dbc:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	3318      	adds	r3, #24
 8001dcc:	4a60      	ldr	r2, [pc, #384]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001dce:	1899      	adds	r1, r3, r2
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4865      	ldr	r0, [pc, #404]	@ (8001f6c <StartDefaultTask+0xc0c>)
 8001dd8:	f004 fa22 	bl	8006220 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].OTI[0], 8, HAL_MAX_DELAY);
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	2208      	movs	r2, #8
 8001de2:	4963      	ldr	r1, [pc, #396]	@ (8001f70 <StartDefaultTask+0xc10>)
 8001de4:	4861      	ldr	r0, [pc, #388]	@ (8001f6c <StartDefaultTask+0xc0c>)
 8001de6:	f004 fa9e 	bl	8006326 <HAL_UART_Receive>

	  				stepperOpen();
 8001dea:	f7fe fedb 	bl	8000ba4 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 8001dee:	4854      	ldr	r0, [pc, #336]	@ (8001f40 <StartDefaultTask+0xbe0>)
 8001df0:	f7fe fdea 	bl	80009c8 <flowControllerADC>
	  				pumpTestsParameters[pump].eNextState = OPERATION_TEST;
 8001df4:	4b55      	ldr	r3, [pc, #340]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4a55      	ldr	r2, [pc, #340]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	3318      	adds	r3, #24
 8001e08:	220a      	movs	r2, #10
 8001e0a:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 8001e0c:	4b54      	ldr	r3, [pc, #336]	@ (8001f60 <StartDefaultTask+0xc00>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b52      	ldr	r3, [pc, #328]	@ (8001f60 <StartDefaultTask+0xc00>)
 8001e18:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 8001e1a:	4b56      	ldr	r3, [pc, #344]	@ (8001f74 <StartDefaultTask+0xc14>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 f86e 	bl	8007f00 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 8001e24:	484d      	ldr	r0, [pc, #308]	@ (8001f5c <StartDefaultTask+0xbfc>)
 8001e26:	f003 fe73 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8001e2a:	f7ff fa83 	bl	8001334 <resetTime>

	  				break;
 8001e2e:	e2f4      	b.n	800241a <StartDefaultTask+0x10ba>
	  			case OPERATION_TEST:
	  				flowControllerADC(&hadc1);
 8001e30:	4843      	ldr	r0, [pc, #268]	@ (8001f40 <StartDefaultTask+0xbe0>)
 8001e32:	f7fe fdc9 	bl	80009c8 <flowControllerADC>
					volts = adcGet(&hadc1);
 8001e36:	4842      	ldr	r0, [pc, #264]	@ (8001f40 <StartDefaultTask+0xbe0>)
 8001e38:	f000 fcf6 	bl	8002828 <adcGet>
 8001e3c:	eef0 7a40 	vmov.f32	s15, s0
 8001e40:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <StartDefaultTask+0xbe4>)
 8001e42:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 8001e46:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <StartDefaultTask+0xbe4>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e50:	f7fe fdde 	bl	8000a10 <readFlow>
 8001e54:	eef0 7a40 	vmov.f32	s15, s0
 8001e58:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <StartDefaultTask+0xbe8>)
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 8001e5e:	4838      	ldr	r0, [pc, #224]	@ (8001f40 <StartDefaultTask+0xbe0>)
 8001e60:	f001 f962 	bl	8003128 <vacuumGaugeADC>
					volts = adcGet(&hadc1);
 8001e64:	4836      	ldr	r0, [pc, #216]	@ (8001f40 <StartDefaultTask+0xbe0>)
 8001e66:	f000 fcdf 	bl	8002828 <adcGet>
 8001e6a:	eef0 7a40 	vmov.f32	s15, s0
 8001e6e:	4b35      	ldr	r3, [pc, #212]	@ (8001f44 <StartDefaultTask+0xbe4>)
 8001e70:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(volts);
 8001e74:	4b33      	ldr	r3, [pc, #204]	@ (8001f44 <StartDefaultTask+0xbe4>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	f001 f977 	bl	8003170 <readVacuum>
 8001e82:	eef0 7a40 	vmov.f32	s15, s0
 8001e86:	4b3c      	ldr	r3, [pc, #240]	@ (8001f78 <StartDefaultTask+0xc18>)
 8001e88:	edc3 7a00 	vstr	s15, [r3]

					// Remove this once STM is connected to Hardware
					//

	  				if(pumpTestsParameters[pump].OTI[2] == hours && pumpTestsParameters[pump].OTI[3] == minutes){	// Success
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4a2f      	ldr	r2, [pc, #188]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001e94:	460b      	mov	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	333d      	adds	r3, #61	@ 0x3d
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f54 <StartDefaultTask+0xbf4>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d168      	bne.n	8001f7c <StartDefaultTask+0xc1c>
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4a27      	ldr	r2, [pc, #156]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	333e      	adds	r3, #62	@ 0x3e
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <StartDefaultTask+0xbf8>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d159      	bne.n	8001f7c <StartDefaultTask+0xc1c>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001ec8:	4824      	ldr	r0, [pc, #144]	@ (8001f5c <StartDefaultTask+0xbfc>)
 8001eca:	f003 fe99 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
	  					// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 8001ece:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <StartDefaultTask+0xc00>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <StartDefaultTask+0xc00>)
 8001eda:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <StartDefaultTask+0xc04>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f005 ffd9 	bl	8007e98 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	4918      	ldr	r1, [pc, #96]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3314      	adds	r3, #20
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	4814      	ldr	r0, [pc, #80]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4403      	add	r3, r0
 8001f0a:	3314      	adds	r3, #20
 8001f0c:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	4a0e      	ldr	r2, [pc, #56]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001f16:	460b      	mov	r3, r1
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	3314      	adds	r3, #20
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <StartDefaultTask+0xbec>)
 8001f26:	7812      	ldrb	r2, [r2, #0]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	7818      	ldrb	r0, [r3, #0]
 8001f2c:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <StartDefaultTask+0xbf0>)
 8001f2e:	460b      	mov	r3, r1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	3318      	adds	r3, #24
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e045      	b.n	8001fcc <StartDefaultTask+0xc6c>
 8001f40:	20000268 	.word	0x20000268
 8001f44:	20000a20 	.word	0x20000a20
 8001f48:	20000a2c 	.word	0x20000a2c
 8001f4c:	20000a1c 	.word	0x20000a1c
 8001f50:	2000097c 	.word	0x2000097c
 8001f54:	20000a4a 	.word	0x20000a4a
 8001f58:	20000a4b 	.word	0x20000a4b
 8001f5c:	20000310 	.word	0x20000310
 8001f60:	20000a49 	.word	0x20000a49
 8001f64:	20000974 	.word	0x20000974
 8001f68:	20000048 	.word	0x20000048
 8001f6c:	200003e4 	.word	0x200003e4
 8001f70:	200009b7 	.word	0x200009b7
 8001f74:	20000978 	.word	0x20000978
 8001f78:	20000a30 	.word	0x20000a30
	  				}else if(temperature >= pumpTestsParameters[0].OTI[7]){	// if current temp is >= temp limit
 8001f7c:	4bb9      	ldr	r3, [pc, #740]	@ (8002264 <StartDefaultTask+0xf04>)
 8001f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8a:	4bb7      	ldr	r3, [pc, #732]	@ (8002268 <StartDefaultTask+0xf08>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f98:	d818      	bhi.n	8001fcc <StartDefaultTask+0xc6c>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001f9a:	4bb4      	ldr	r3, [pc, #720]	@ (800226c <StartDefaultTask+0xf0c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4ab0      	ldr	r2, [pc, #704]	@ (8002264 <StartDefaultTask+0xf04>)
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	3318      	adds	r3, #24
 8001fae:	220e      	movs	r2, #14
 8001fb0:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001fb2:	4bae      	ldr	r3, [pc, #696]	@ (800226c <StartDefaultTask+0xf0c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4aaa      	ldr	r2, [pc, #680]	@ (8002264 <StartDefaultTask+0xf04>)
 8001fba:	460b      	mov	r3, r1
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	334e      	adds	r3, #78	@ 0x4e
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]
	  					break;
 8001fca:	e226      	b.n	800241a <StartDefaultTask+0x10ba>
	  				}
	  				osDelay(100);
 8001fcc:	2064      	movs	r0, #100	@ 0x64
 8001fce:	f005 ffcb 	bl	8007f68 <osDelay>
	  				break;
 8001fd2:	e222      	b.n	800241a <StartDefaultTask+0x10ba>
//					pumpTestsParameters[0].UMTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].UMI[8] = 50;		// Flow Rate
//					pumpTestsParameters[0].UMTI[9] = 15;	// Pressure in kPA

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001fd4:	4ba5      	ldr	r3, [pc, #660]	@ (800226c <StartDefaultTask+0xf0c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	3318      	adds	r3, #24
 8001fe4:	4a9f      	ldr	r2, [pc, #636]	@ (8002264 <StartDefaultTask+0xf04>)
 8001fe6:	1899      	adds	r1, r3, r2
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	2201      	movs	r2, #1
 8001fee:	48a0      	ldr	r0, [pc, #640]	@ (8002270 <StartDefaultTask+0xf10>)
 8001ff0:	f004 f916 	bl	8006220 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].UMTI[0], 9, HAL_MAX_DELAY);
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	2209      	movs	r2, #9
 8001ffa:	499e      	ldr	r1, [pc, #632]	@ (8002274 <StartDefaultTask+0xf14>)
 8001ffc:	489c      	ldr	r0, [pc, #624]	@ (8002270 <StartDefaultTask+0xf10>)
 8001ffe:	f004 f992 	bl	8006326 <HAL_UART_Receive>

					stepperStep(800);				// close valve half way
 8002002:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002006:	f7fe fdd9 	bl	8000bbc <stepperStep>
					HAL_TIM_Base_Start_IT(&htim7);	// starts closing
 800200a:	489b      	ldr	r0, [pc, #620]	@ (8002278 <StartDefaultTask+0xf18>)
 800200c:	f003 fd80 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	  				stepperOpen();
 8002010:	f7fe fdc8 	bl	8000ba4 <stepperOpen>
//	  				solenoidOpen();
//	  				solenoidClose();
	  				flowControllerADC(&hadc1);
 8002014:	4899      	ldr	r0, [pc, #612]	@ (800227c <StartDefaultTask+0xf1c>)
 8002016:	f7fe fcd7 	bl	80009c8 <flowControllerADC>
					pumpTestsParameters[pump].eNextState = ULTIMATE_MEASURE_TEST;
 800201a:	4b94      	ldr	r3, [pc, #592]	@ (800226c <StartDefaultTask+0xf0c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
 8002020:	4a90      	ldr	r2, [pc, #576]	@ (8002264 <StartDefaultTask+0xf04>)
 8002022:	460b      	mov	r3, r1
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	3318      	adds	r3, #24
 800202e:	220c      	movs	r2, #12
 8002030:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));

	  				// Starts data Transfer
	  				SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 8002032:	4b93      	ldr	r3, [pc, #588]	@ (8002280 <StartDefaultTask+0xf20>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b90      	ldr	r3, [pc, #576]	@ (8002280 <StartDefaultTask+0xf20>)
 800203e:	701a      	strb	r2, [r3, #0]
	  				osThreadResume(sendDataHandle);
 8002040:	4b90      	ldr	r3, [pc, #576]	@ (8002284 <StartDefaultTask+0xf24>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f005 ff5b 	bl	8007f00 <osThreadResume>

	  				// Starts this timer
	  				HAL_TIM_Base_Start_IT(&htim10);
 800204a:	488f      	ldr	r0, [pc, #572]	@ (8002288 <StartDefaultTask+0xf28>)
 800204c:	f003 fd60 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	  				resetTime();
 8002050:	f7ff f970 	bl	8001334 <resetTime>

	  				break;
 8002054:	e1e1      	b.n	800241a <StartDefaultTask+0x10ba>
	  			case ULTIMATE_MEASURE_TEST:
	  				flowControllerADC(&hadc1);
 8002056:	4889      	ldr	r0, [pc, #548]	@ (800227c <StartDefaultTask+0xf1c>)
 8002058:	f7fe fcb6 	bl	80009c8 <flowControllerADC>
					volts = adcGet(&hadc1);
 800205c:	4887      	ldr	r0, [pc, #540]	@ (800227c <StartDefaultTask+0xf1c>)
 800205e:	f000 fbe3 	bl	8002828 <adcGet>
 8002062:	eef0 7a40 	vmov.f32	s15, s0
 8002066:	4b89      	ldr	r3, [pc, #548]	@ (800228c <StartDefaultTask+0xf2c>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 800206c:	4b87      	ldr	r3, [pc, #540]	@ (800228c <StartDefaultTask+0xf2c>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	eeb0 0a67 	vmov.f32	s0, s15
 8002076:	f7fe fccb 	bl	8000a10 <readFlow>
 800207a:	eef0 7a40 	vmov.f32	s15, s0
 800207e:	4b84      	ldr	r3, [pc, #528]	@ (8002290 <StartDefaultTask+0xf30>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 8002084:	487d      	ldr	r0, [pc, #500]	@ (800227c <StartDefaultTask+0xf1c>)
 8002086:	f001 f84f 	bl	8003128 <vacuumGaugeADC>
					volts = adcGet(&hadc1);
 800208a:	487c      	ldr	r0, [pc, #496]	@ (800227c <StartDefaultTask+0xf1c>)
 800208c:	f000 fbcc 	bl	8002828 <adcGet>
 8002090:	eef0 7a40 	vmov.f32	s15, s0
 8002094:	4b7d      	ldr	r3, [pc, #500]	@ (800228c <StartDefaultTask+0xf2c>)
 8002096:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(volts);
 800209a:	4b7c      	ldr	r3, [pc, #496]	@ (800228c <StartDefaultTask+0xf2c>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	f001 f864 	bl	8003170 <readVacuum>
 80020a8:	eef0 7a40 	vmov.f32	s15, s0
 80020ac:	4b79      	ldr	r3, [pc, #484]	@ (8002294 <StartDefaultTask+0xf34>)
 80020ae:	edc3 7a00 	vstr	s15, [r3]

					// Remove this once STM is connected to Hardware
					//

	  				if(pumpTestsParameters[pump].UMTI[2] == hours && pumpTestsParameters[pump].UMTI[3] == minutes){	// Success
 80020b2:	4b6e      	ldr	r3, [pc, #440]	@ (800226c <StartDefaultTask+0xf0c>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002264 <StartDefaultTask+0xf04>)
 80020ba:	460b      	mov	r3, r1
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	3346      	adds	r3, #70	@ 0x46
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <StartDefaultTask+0xf38>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d14a      	bne.n	8002166 <StartDefaultTask+0xe06>
 80020d0:	4b66      	ldr	r3, [pc, #408]	@ (800226c <StartDefaultTask+0xf0c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4a63      	ldr	r2, [pc, #396]	@ (8002264 <StartDefaultTask+0xf04>)
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4413      	add	r3, r2
 80020e2:	3347      	adds	r3, #71	@ 0x47
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	4b6d      	ldr	r3, [pc, #436]	@ (800229c <StartDefaultTask+0xf3c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d13b      	bne.n	8002166 <StartDefaultTask+0xe06>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80020ee:	4866      	ldr	r0, [pc, #408]	@ (8002288 <StartDefaultTask+0xf28>)
 80020f0:	f003 fd86 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
	  					// osThreadSuspend(sendDataHandle);
	  					CLEAR_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);	// Suspends Data Transfer
 80020f4:	4b62      	ldr	r3, [pc, #392]	@ (8002280 <StartDefaultTask+0xf20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b60      	ldr	r3, [pc, #384]	@ (8002280 <StartDefaultTask+0xf20>)
 8002100:	701a      	strb	r2, [r3, #0]
	  					osThreadSuspend(stateMachineHandle);			// Pause Testing until Final Message is sent
 8002102:	4b67      	ldr	r3, [pc, #412]	@ (80022a0 <StartDefaultTask+0xf40>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f005 fec6 	bl	8007e98 <osThreadSuspend>
	  					pumpTestsParameters[pump].currentState++;
 800210c:	4b57      	ldr	r3, [pc, #348]	@ (800226c <StartDefaultTask+0xf0c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4954      	ldr	r1, [pc, #336]	@ (8002264 <StartDefaultTask+0xf04>)
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	440b      	add	r3, r1
 800211e:	3314      	adds	r3, #20
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1c59      	adds	r1, r3, #1
 8002124:	484f      	ldr	r0, [pc, #316]	@ (8002264 <StartDefaultTask+0xf04>)
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4403      	add	r3, r0
 8002130:	3314      	adds	r3, #20
 8002132:	6019      	str	r1, [r3, #0]
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 8002134:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <StartDefaultTask+0xf0c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	4a4a      	ldr	r2, [pc, #296]	@ (8002264 <StartDefaultTask+0xf04>)
 800213c:	460b      	mov	r3, r1
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4413      	add	r3, r2
 8002146:	3314      	adds	r3, #20
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a48      	ldr	r2, [pc, #288]	@ (800226c <StartDefaultTask+0xf0c>)
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	4611      	mov	r1, r2
 8002150:	7818      	ldrb	r0, [r3, #0]
 8002152:	4a44      	ldr	r2, [pc, #272]	@ (8002264 <StartDefaultTask+0xf04>)
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	3318      	adds	r3, #24
 8002160:	4602      	mov	r2, r0
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e027      	b.n	80021b6 <StartDefaultTask+0xe56>
	  				}else if(temperature >= pumpTestsParameters[0].UMTI[7]){	// if current temp is >= temp limit
 8002166:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <StartDefaultTask+0xf04>)
 8002168:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002174:	4b3c      	ldr	r3, [pc, #240]	@ (8002268 <StartDefaultTask+0xf08>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	d818      	bhi.n	80021b6 <StartDefaultTask+0xe56>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8002184:	4b39      	ldr	r3, [pc, #228]	@ (800226c <StartDefaultTask+0xf0c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	4a36      	ldr	r2, [pc, #216]	@ (8002264 <StartDefaultTask+0xf04>)
 800218c:	460b      	mov	r3, r1
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	3318      	adds	r3, #24
 8002198:	220e      	movs	r2, #14
 800219a:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800219c:	4b33      	ldr	r3, [pc, #204]	@ (800226c <StartDefaultTask+0xf0c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	4a30      	ldr	r2, [pc, #192]	@ (8002264 <StartDefaultTask+0xf04>)
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4413      	add	r3, r2
 80021ae:	334e      	adds	r3, #78	@ 0x4e
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
	  					break;
 80021b4:	e131      	b.n	800241a <StartDefaultTask+0x10ba>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 80021b6:	2064      	movs	r0, #100	@ 0x64
 80021b8:	f005 fed6 	bl	8007f68 <osDelay>
	  				break;
 80021bc:	e12d      	b.n	800241a <StartDefaultTask+0x10ba>
	  			case IDLE:
	  				flowControllerADC(&hadc1);
 80021be:	482f      	ldr	r0, [pc, #188]	@ (800227c <StartDefaultTask+0xf1c>)
 80021c0:	f7fe fc02 	bl	80009c8 <flowControllerADC>
					flowVolts = adcGet(&hadc1);
 80021c4:	482d      	ldr	r0, [pc, #180]	@ (800227c <StartDefaultTask+0xf1c>)
 80021c6:	f000 fb2f 	bl	8002828 <adcGet>
 80021ca:	eef0 7a40 	vmov.f32	s15, s0
 80021ce:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <StartDefaultTask+0xf44>)
 80021d0:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(flowVolts);
 80021d4:	4b33      	ldr	r3, [pc, #204]	@ (80022a4 <StartDefaultTask+0xf44>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	eeb0 0a67 	vmov.f32	s0, s15
 80021de:	f7fe fc17 	bl	8000a10 <readFlow>
 80021e2:	eef0 7a40 	vmov.f32	s15, s0
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <StartDefaultTask+0xf30>)
 80021e8:	edc3 7a00 	vstr	s15, [r3]
					vacuumGaugeADC(&hadc1);
 80021ec:	4823      	ldr	r0, [pc, #140]	@ (800227c <StartDefaultTask+0xf1c>)
 80021ee:	f000 ff9b 	bl	8003128 <vacuumGaugeADC>
					vacVolts = adcGet(&hadc1);
 80021f2:	4822      	ldr	r0, [pc, #136]	@ (800227c <StartDefaultTask+0xf1c>)
 80021f4:	f000 fb18 	bl	8002828 <adcGet>
 80021f8:	eef0 7a40 	vmov.f32	s15, s0
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <StartDefaultTask+0xf48>)
 80021fe:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(vacVolts);
 8002202:	4b29      	ldr	r3, [pc, #164]	@ (80022a8 <StartDefaultTask+0xf48>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eeb0 0a67 	vmov.f32	s0, s15
 800220c:	f000 ffb0 	bl	8003170 <readVacuum>
 8002210:	eef0 7a40 	vmov.f32	s15, s0
 8002214:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <StartDefaultTask+0xf34>)
 8002216:	edc3 7a00 	vstr	s15, [r3]

					// This is the tests for the Flow Controller
					flowRateMethod(0);
 800221a:	2000      	movs	r0, #0
 800221c:	f7fe fc4e 	bl	8000abc <flowRateMethod>
					//flowStateControl();
					//flowStateClose();
					//flowStateOpen();
					flowStateControl();
 8002220:	f7fe fca2 	bl	8000b68 <flowStateControl>
					dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(50));
 8002224:	2032      	movs	r0, #50	@ 0x32
 8002226:	f7fe fc21 	bl	8000a6c <setFlowRate>
 800222a:	eef0 7a40 	vmov.f32	s15, s0
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	2100      	movs	r1, #0
 8002234:	481d      	ldr	r0, [pc, #116]	@ (80022ac <StartDefaultTask+0xf4c>)
 8002236:	f000 fac3 	bl	80027c0 <dacSet>

					//solenoidTwoOpen();
					// This is testing the Stepper Moter
					if(seconds%10 == 0){
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <StartDefaultTask+0xf50>)
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <StartDefaultTask+0xf54>)
 8002240:	fba3 1302 	umull	r1, r3, r3, r2
 8002244:	08d9      	lsrs	r1, r3, #3
 8002246:	460b      	mov	r3, r1
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d130      	bne.n	80022b8 <StartDefaultTask+0xf58>
						stepperClose();
 8002256:	f7fe fc97 	bl	8000b88 <stepperClose>
						HAL_TIM_Base_Start_IT(&htim7);
 800225a:	4807      	ldr	r0, [pc, #28]	@ (8002278 <StartDefaultTask+0xf18>)
 800225c:	f003 fc58 	bl	8005b10 <HAL_TIM_Base_Start_IT>
 8002260:	e03d      	b.n	80022de <StartDefaultTask+0xf7e>
 8002262:	bf00      	nop
 8002264:	2000097c 	.word	0x2000097c
 8002268:	20000048 	.word	0x20000048
 800226c:	20000a1c 	.word	0x20000a1c
 8002270:	200003e4 	.word	0x200003e4
 8002274:	200009c0 	.word	0x200009c0
 8002278:	200002c4 	.word	0x200002c4
 800227c:	20000268 	.word	0x20000268
 8002280:	20000a49 	.word	0x20000a49
 8002284:	20000978 	.word	0x20000978
 8002288:	20000310 	.word	0x20000310
 800228c:	20000a20 	.word	0x20000a20
 8002290:	20000a2c 	.word	0x20000a2c
 8002294:	20000a30 	.word	0x20000a30
 8002298:	20000a4a 	.word	0x20000a4a
 800229c:	20000a4b 	.word	0x20000a4b
 80022a0:	20000974 	.word	0x20000974
 80022a4:	20000a24 	.word	0x20000a24
 80022a8:	20000a28 	.word	0x20000a28
 80022ac:	200002b0 	.word	0x200002b0
 80022b0:	20000a4c 	.word	0x20000a4c
 80022b4:	cccccccd 	.word	0xcccccccd
					}else if(seconds%10 == 5){
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <StartDefaultTask+0x10c0>)
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	4b59      	ldr	r3, [pc, #356]	@ (8002424 <StartDefaultTask+0x10c4>)
 80022be:	fba3 1302 	umull	r1, r3, r3, r2
 80022c2:	08d9      	lsrs	r1, r3, #3
 80022c4:	460b      	mov	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d104      	bne.n	80022de <StartDefaultTask+0xf7e>
						stepperOpen();
 80022d4:	f7fe fc66 	bl	8000ba4 <stepperOpen>
						HAL_TIM_Base_Start_IT(&htim7);
 80022d8:	4853      	ldr	r0, [pc, #332]	@ (8002428 <StartDefaultTask+0x10c8>)
 80022da:	f003 fc19 	bl	8005b10 <HAL_TIM_Base_Start_IT>

//					if(seconds%2 == 0){
//						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
//						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
//					}
					HAL_GPIO_WritePin(greenLightGroup, greenLightPin, 1);
 80022de:	4b53      	ldr	r3, [pc, #332]	@ (800242c <StartDefaultTask+0x10cc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a53      	ldr	r2, [pc, #332]	@ (8002430 <StartDefaultTask+0x10d0>)
 80022e4:	8811      	ldrh	r1, [r2, #0]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 f8af 	bl	800444c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(redLightGroup, redLightPin, 0);
 80022ee:	4b51      	ldr	r3, [pc, #324]	@ (8002434 <StartDefaultTask+0x10d4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a51      	ldr	r2, [pc, #324]	@ (8002438 <StartDefaultTask+0x10d8>)
 80022f4:	8811      	ldrh	r1, [r2, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 f8a7 	bl	800444c <HAL_GPIO_WritePin>

	  				if(!GET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT)){
 80022fe:	4b4f      	ldr	r3, [pc, #316]	@ (800243c <StartDefaultTask+0x10dc>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d110      	bne.n	800232c <StartDefaultTask+0xfcc>
						// Starts data Transfer
						SET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT);
 800230a:	4b4c      	ldr	r3, [pc, #304]	@ (800243c <StartDefaultTask+0x10dc>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b49      	ldr	r3, [pc, #292]	@ (800243c <StartDefaultTask+0x10dc>)
 8002316:	701a      	strb	r2, [r3, #0]
						osThreadResume(sendDataHandle);
 8002318:	4b49      	ldr	r3, [pc, #292]	@ (8002440 <StartDefaultTask+0x10e0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f005 fdef 	bl	8007f00 <osThreadResume>

						// Starts this timer
						HAL_TIM_Base_Start_IT(&htim10);
 8002322:	4848      	ldr	r0, [pc, #288]	@ (8002444 <StartDefaultTask+0x10e4>)
 8002324:	f003 fbf4 	bl	8005b10 <HAL_TIM_Base_Start_IT>
						resetTime();
 8002328:	f7ff f804 	bl	8001334 <resetTime>
	  				}
					osDelay(1000);
 800232c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002330:	f005 fe1a 	bl	8007f68 <osDelay>
	  				break;
 8002334:	e071      	b.n	800241a <StartDefaultTask+0x10ba>
	  			case FAIL_STATE:
	  				HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8002336:	4b44      	ldr	r3, [pc, #272]	@ (8002448 <StartDefaultTask+0x10e8>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	3318      	adds	r3, #24
 8002346:	4a41      	ldr	r2, [pc, #260]	@ (800244c <StartDefaultTask+0x10ec>)
 8002348:	1899      	adds	r1, r3, r2
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	2201      	movs	r2, #1
 8002350:	483f      	ldr	r0, [pc, #252]	@ (8002450 <StartDefaultTask+0x10f0>)
 8002352:	f003 ff65 	bl	8006220 <HAL_UART_Transmit>
	  				HAL_TIM_Base_Stop_IT(&htim10);
 8002356:	483b      	ldr	r0, [pc, #236]	@ (8002444 <StartDefaultTask+0x10e4>)
 8002358:	f003 fc52 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
	  				osThreadSuspend(sendDataHandle);
 800235c:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <StartDefaultTask+0x10e0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f005 fd99 	bl	8007e98 <osThreadSuspend>
	  				pumpTestsParameters[pump].currentState++;
 8002366:	4b38      	ldr	r3, [pc, #224]	@ (8002448 <StartDefaultTask+0x10e8>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4937      	ldr	r1, [pc, #220]	@ (800244c <StartDefaultTask+0x10ec>)
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	440b      	add	r3, r1
 8002378:	3314      	adds	r3, #20
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	1c59      	adds	r1, r3, #1
 800237e:	4833      	ldr	r0, [pc, #204]	@ (800244c <StartDefaultTask+0x10ec>)
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4403      	add	r3, r0
 800238a:	3314      	adds	r3, #20
 800238c:	6019      	str	r1, [r3, #0]
	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump].currentState);
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <StartDefaultTask+0x10e8>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <StartDefaultTask+0x10ec>)
 8002396:	460b      	mov	r3, r1
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	3314      	adds	r3, #20
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a28      	ldr	r2, [pc, #160]	@ (8002448 <StartDefaultTask+0x10e8>)
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	4611      	mov	r1, r2
 80023aa:	7818      	ldrb	r0, [r3, #0]
 80023ac:	4a27      	ldr	r2, [pc, #156]	@ (800244c <StartDefaultTask+0x10ec>)
 80023ae:	460b      	mov	r3, r1
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4413      	add	r3, r2
 80023b8:	3318      	adds	r3, #24
 80023ba:	4602      	mov	r2, r0
 80023bc:	701a      	strb	r2, [r3, #0]
	  				break;
 80023be:	e02c      	b.n	800241a <StartDefaultTask+0x10ba>
	  			case STOP:
	  				HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80023c0:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <StartDefaultTask+0x10e8>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	3318      	adds	r3, #24
 80023d0:	4a1e      	ldr	r2, [pc, #120]	@ (800244c <StartDefaultTask+0x10ec>)
 80023d2:	1899      	adds	r1, r3, r2
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	2201      	movs	r2, #1
 80023da:	481d      	ldr	r0, [pc, #116]	@ (8002450 <StartDefaultTask+0x10f0>)
 80023dc:	f003 ff20 	bl	8006220 <HAL_UART_Transmit>
	  				pumpTestsParameters[pump].eNextState = STOP;
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <StartDefaultTask+0x10e8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	4a19      	ldr	r2, [pc, #100]	@ (800244c <StartDefaultTask+0x10ec>)
 80023e8:	460b      	mov	r3, r1
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	3318      	adds	r3, #24
 80023f4:	220f      	movs	r2, #15
 80023f6:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 80023f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80023fc:	f000 ff5e 	bl	80032bc <HAL_Delay>
	  				break;
 8002400:	e00b      	b.n	800241a <StartDefaultTask+0x10ba>
	  			default:
	  				pumpTestsParameters[pump].eNextState = START;
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <StartDefaultTask+0x10e8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	4a10      	ldr	r2, [pc, #64]	@ (800244c <StartDefaultTask+0x10ec>)
 800240a:	460b      	mov	r3, r1
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4413      	add	r3, r2
 8002414:	3318      	adds	r3, #24
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
	  switch(pumpTestsParameters[pump].eNextState) {
 800241a:	f7fe bfa5 	b.w	8001368 <StartDefaultTask+0x8>
 800241e:	bf00      	nop
 8002420:	20000a4c 	.word	0x20000a4c
 8002424:	cccccccd 	.word	0xcccccccd
 8002428:	200002c4 	.word	0x200002c4
 800242c:	20000028 	.word	0x20000028
 8002430:	2000002c 	.word	0x2000002c
 8002434:	20000030 	.word	0x20000030
 8002438:	20000034 	.word	0x20000034
 800243c:	20000a49 	.word	0x20000a49
 8002440:	20000978 	.word	0x20000978
 8002444:	20000310 	.word	0x20000310
 8002448:	20000a1c 	.word	0x20000a1c
 800244c:	2000097c 	.word	0x2000097c
 8002450:	200003e4 	.word	0x200003e4

08002454 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  uint8_t *vacuumScaleBytes = (uint8_t *) &vacuumScale;
 800245c:	4b7a      	ldr	r3, [pc, #488]	@ (8002648 <StartTask02+0x1f4>)
 800245e:	617b      	str	r3, [r7, #20]
	  uint8_t *temperatureBytes = (uint8_t *) &temperature;
 8002460:	4b7a      	ldr	r3, [pc, #488]	@ (800264c <StartTask02+0x1f8>)
 8002462:	613b      	str	r3, [r7, #16]
	  uint8_t *flowRateBytes = (uint8_t *) &flowRate;
 8002464:	4b7a      	ldr	r3, [pc, #488]	@ (8002650 <StartTask02+0x1fc>)
 8002466:	60fb      	str	r3, [r7, #12]

    switch(pumpTestsParameters[pump].eNextState){
 8002468:	4b7a      	ldr	r3, [pc, #488]	@ (8002654 <StartTask02+0x200>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	4a7a      	ldr	r2, [pc, #488]	@ (8002658 <StartTask02+0x204>)
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4413      	add	r3, r2
 800247a:	3318      	adds	r3, #24
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	d873      	bhi.n	800256a <StartTask02+0x116>
 8002482:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <StartTask02+0x34>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	0800260d 	.word	0x0800260d
 800248c:	0800256b 	.word	0x0800256b
 8002490:	0800256b 	.word	0x0800256b
 8002494:	0800256b 	.word	0x0800256b
 8002498:	0800256b 	.word	0x0800256b
 800249c:	0800256b 	.word	0x0800256b
 80024a0:	0800256b 	.word	0x0800256b
 80024a4:	0800256b 	.word	0x0800256b
 80024a8:	0800256b 	.word	0x0800256b
 80024ac:	0800256b 	.word	0x0800256b
 80024b0:	0800256b 	.word	0x0800256b
 80024b4:	0800256b 	.word	0x0800256b
 80024b8:	0800256b 	.word	0x0800256b
 80024bc:	080024c9 	.word	0x080024c9
 80024c0:	0800260d 	.word	0x0800260d
 80024c4:	0800260d 	.word	0x0800260d
		case START:
			break;
		case IDLE:
			tx_buffer[0] = pumpTestsParameters[pump].eNextState;
 80024c8:	4b62      	ldr	r3, [pc, #392]	@ (8002654 <StartTask02+0x200>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4a62      	ldr	r2, [pc, #392]	@ (8002658 <StartTask02+0x204>)
 80024d0:	460b      	mov	r3, r1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	3318      	adds	r3, #24
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	4b5f      	ldr	r3, [pc, #380]	@ (800265c <StartTask02+0x208>)
 80024e0:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = pump;
 80024e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002654 <StartTask02+0x200>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b5d      	ldr	r3, [pc, #372]	@ (800265c <StartTask02+0x208>)
 80024e8:	705a      	strb	r2, [r3, #1]
			tx_buffer[2] = hours;
 80024ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002660 <StartTask02+0x20c>)
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	4b5b      	ldr	r3, [pc, #364]	@ (800265c <StartTask02+0x208>)
 80024f0:	709a      	strb	r2, [r3, #2]
			tx_buffer[3] = minutes;
 80024f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002664 <StartTask02+0x210>)
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	4b59      	ldr	r3, [pc, #356]	@ (800265c <StartTask02+0x208>)
 80024f8:	70da      	strb	r2, [r3, #3]
			tx_buffer[4] = seconds;
 80024fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <StartTask02+0x214>)
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	4b57      	ldr	r3, [pc, #348]	@ (800265c <StartTask02+0x208>)
 8002500:	711a      	strb	r2, [r3, #4]
			tx_buffer[5] = vacuumScaleBytes[0];	// Torr
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	4b55      	ldr	r3, [pc, #340]	@ (800265c <StartTask02+0x208>)
 8002508:	715a      	strb	r2, [r3, #5]
			tx_buffer[6] = vacuumScaleBytes[1];
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	785a      	ldrb	r2, [r3, #1]
 800250e:	4b53      	ldr	r3, [pc, #332]	@ (800265c <StartTask02+0x208>)
 8002510:	719a      	strb	r2, [r3, #6]
			tx_buffer[7] = vacuumScaleBytes[2];
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	789a      	ldrb	r2, [r3, #2]
 8002516:	4b51      	ldr	r3, [pc, #324]	@ (800265c <StartTask02+0x208>)
 8002518:	71da      	strb	r2, [r3, #7]
			tx_buffer[8] = vacuumScaleBytes[3];
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	78da      	ldrb	r2, [r3, #3]
 800251e:	4b4f      	ldr	r3, [pc, #316]	@ (800265c <StartTask02+0x208>)
 8002520:	721a      	strb	r2, [r3, #8]
			tx_buffer[9] = temperatureBytes[0];	// Temperature in C
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	4b4d      	ldr	r3, [pc, #308]	@ (800265c <StartTask02+0x208>)
 8002528:	725a      	strb	r2, [r3, #9]
			tx_buffer[10] = temperatureBytes[1];
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	785a      	ldrb	r2, [r3, #1]
 800252e:	4b4b      	ldr	r3, [pc, #300]	@ (800265c <StartTask02+0x208>)
 8002530:	729a      	strb	r2, [r3, #10]
			tx_buffer[11] = temperatureBytes[2];
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	789a      	ldrb	r2, [r3, #2]
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <StartTask02+0x208>)
 8002538:	72da      	strb	r2, [r3, #11]
			tx_buffer[12] = temperatureBytes[3];
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	78da      	ldrb	r2, [r3, #3]
 800253e:	4b47      	ldr	r3, [pc, #284]	@ (800265c <StartTask02+0x208>)
 8002540:	731a      	strb	r2, [r3, #12]
			tx_buffer[13] = flowRateBytes[0];	// L/min
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	4b45      	ldr	r3, [pc, #276]	@ (800265c <StartTask02+0x208>)
 8002548:	735a      	strb	r2, [r3, #13]
			tx_buffer[14] = flowRateBytes[1];
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	785a      	ldrb	r2, [r3, #1]
 800254e:	4b43      	ldr	r3, [pc, #268]	@ (800265c <StartTask02+0x208>)
 8002550:	739a      	strb	r2, [r3, #14]
			tx_buffer[15] = flowRateBytes[2];
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	789a      	ldrb	r2, [r3, #2]
 8002556:	4b41      	ldr	r3, [pc, #260]	@ (800265c <StartTask02+0x208>)
 8002558:	73da      	strb	r2, [r3, #15]
			tx_buffer[16] = flowRateBytes[3];
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	78da      	ldrb	r2, [r3, #3]
 800255e:	4b3f      	ldr	r3, [pc, #252]	@ (800265c <StartTask02+0x208>)
 8002560:	741a      	strb	r2, [r3, #16]
			tx_buffer_size = 17;
 8002562:	4b42      	ldr	r3, [pc, #264]	@ (800266c <StartTask02+0x218>)
 8002564:	2211      	movs	r2, #17
 8002566:	701a      	strb	r2, [r3, #0]
			break;
 8002568:	e051      	b.n	800260e <StartTask02+0x1ba>
		case FAIL_STATE:
			break;
		case STOP:
			break;
		default:
			tx_buffer[0] = pumpTestsParameters[pump].eNextState;
 800256a:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <StartTask02+0x200>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4a39      	ldr	r2, [pc, #228]	@ (8002658 <StartTask02+0x204>)
 8002572:	460b      	mov	r3, r1
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4413      	add	r3, r2
 800257c:	3318      	adds	r3, #24
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	4b36      	ldr	r3, [pc, #216]	@ (800265c <StartTask02+0x208>)
 8002582:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = pump;
 8002584:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <StartTask02+0x200>)
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b34      	ldr	r3, [pc, #208]	@ (800265c <StartTask02+0x208>)
 800258a:	705a      	strb	r2, [r3, #1]
			tx_buffer[2] = hours;
 800258c:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <StartTask02+0x20c>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4b32      	ldr	r3, [pc, #200]	@ (800265c <StartTask02+0x208>)
 8002592:	709a      	strb	r2, [r3, #2]
			tx_buffer[3] = minutes;
 8002594:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <StartTask02+0x210>)
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	4b30      	ldr	r3, [pc, #192]	@ (800265c <StartTask02+0x208>)
 800259a:	70da      	strb	r2, [r3, #3]
			tx_buffer[4] = seconds;
 800259c:	4b32      	ldr	r3, [pc, #200]	@ (8002668 <StartTask02+0x214>)
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	4b2e      	ldr	r3, [pc, #184]	@ (800265c <StartTask02+0x208>)
 80025a2:	711a      	strb	r2, [r3, #4]
			tx_buffer[5] = vacuumScaleBytes[0];	// Torr
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <StartTask02+0x208>)
 80025aa:	715a      	strb	r2, [r3, #5]
			tx_buffer[6] = vacuumScaleBytes[1];
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	785a      	ldrb	r2, [r3, #1]
 80025b0:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <StartTask02+0x208>)
 80025b2:	719a      	strb	r2, [r3, #6]
			tx_buffer[7] = vacuumScaleBytes[2];
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	789a      	ldrb	r2, [r3, #2]
 80025b8:	4b28      	ldr	r3, [pc, #160]	@ (800265c <StartTask02+0x208>)
 80025ba:	71da      	strb	r2, [r3, #7]
			tx_buffer[8] = vacuumScaleBytes[3];
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	78da      	ldrb	r2, [r3, #3]
 80025c0:	4b26      	ldr	r3, [pc, #152]	@ (800265c <StartTask02+0x208>)
 80025c2:	721a      	strb	r2, [r3, #8]
			tx_buffer[9] = temperatureBytes[0];	// Temperature in C
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <StartTask02+0x208>)
 80025ca:	725a      	strb	r2, [r3, #9]
			tx_buffer[10] = temperatureBytes[1];
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	785a      	ldrb	r2, [r3, #1]
 80025d0:	4b22      	ldr	r3, [pc, #136]	@ (800265c <StartTask02+0x208>)
 80025d2:	729a      	strb	r2, [r3, #10]
			tx_buffer[11] = temperatureBytes[2];
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	789a      	ldrb	r2, [r3, #2]
 80025d8:	4b20      	ldr	r3, [pc, #128]	@ (800265c <StartTask02+0x208>)
 80025da:	72da      	strb	r2, [r3, #11]
			tx_buffer[12] = temperatureBytes[3];
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	78da      	ldrb	r2, [r3, #3]
 80025e0:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <StartTask02+0x208>)
 80025e2:	731a      	strb	r2, [r3, #12]
			tx_buffer[13] = flowRateBytes[0];	// L/min
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <StartTask02+0x208>)
 80025ea:	735a      	strb	r2, [r3, #13]
			tx_buffer[14] = flowRateBytes[1];
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	785a      	ldrb	r2, [r3, #1]
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <StartTask02+0x208>)
 80025f2:	739a      	strb	r2, [r3, #14]
			tx_buffer[15] = flowRateBytes[2];
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	789a      	ldrb	r2, [r3, #2]
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <StartTask02+0x208>)
 80025fa:	73da      	strb	r2, [r3, #15]
			tx_buffer[16] = flowRateBytes[3];
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	78da      	ldrb	r2, [r3, #3]
 8002600:	4b16      	ldr	r3, [pc, #88]	@ (800265c <StartTask02+0x208>)
 8002602:	741a      	strb	r2, [r3, #16]
			tx_buffer_size = 17;
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <StartTask02+0x218>)
 8002606:	2211      	movs	r2, #17
 8002608:	701a      	strb	r2, [r3, #0]
			break;
 800260a:	e000      	b.n	800260e <StartTask02+0x1ba>
			break;
 800260c:	bf00      	nop
    }
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buffer, tx_buffer_size);
 800260e:	4b17      	ldr	r3, [pc, #92]	@ (800266c <StartTask02+0x218>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	4911      	ldr	r1, [pc, #68]	@ (800265c <StartTask02+0x208>)
 8002616:	4816      	ldr	r0, [pc, #88]	@ (8002670 <StartTask02+0x21c>)
 8002618:	f003 ff4a 	bl	80064b0 <HAL_UART_Transmit_IT>
    //HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, tx_buffer_size, HAL_MAX_DELAY);

    // If data no longer needs to be sent
	if(!GET_FLAG_BIT(dataTransmitFlags, SEND_DATA_BIT)){
 800261c:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <StartTask02+0x220>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <StartTask02+0x1ea>
		osThreadResume(stateMachineHandle);
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <StartTask02+0x224>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f005 fc67 	bl	8007f00 <osThreadResume>
		osThreadSuspend(sendDataHandle);
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <StartTask02+0x228>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f005 fc2e 	bl	8007e98 <osThreadSuspend>
 800263c:	e70e      	b.n	800245c <StartTask02+0x8>
	}else{
		osDelay(1000);
 800263e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002642:	f005 fc91 	bl	8007f68 <osDelay>
  {
 8002646:	e709      	b.n	800245c <StartTask02+0x8>
 8002648:	20000a30 	.word	0x20000a30
 800264c:	20000048 	.word	0x20000048
 8002650:	20000a2c 	.word	0x20000a2c
 8002654:	20000a1c 	.word	0x20000a1c
 8002658:	2000097c 	.word	0x2000097c
 800265c:	20000a34 	.word	0x20000a34
 8002660:	20000a4a 	.word	0x20000a4a
 8002664:	20000a4b 	.word	0x20000a4b
 8002668:	20000a4c 	.word	0x20000a4c
 800266c:	20000a48 	.word	0x20000a48
 8002670:	200003e4 	.word	0x200003e4
 8002674:	20000a49 	.word	0x20000a49
 8002678:	20000974 	.word	0x20000974
 800267c:	20000978 	.word	0x20000978

08002680 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3b      	ldr	r2, [pc, #236]	@ (800277c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002692:	f000 fdf3 	bl	800327c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim10) { // This a timer period = 1 sec
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a39      	ldr	r2, [pc, #228]	@ (8002780 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d11f      	bne.n	80026de <HAL_TIM_PeriodElapsedCallback+0x5e>
  		seconds++;
 800269e:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b37      	ldr	r3, [pc, #220]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026a8:	701a      	strb	r2, [r3, #0]
  		if(seconds == 60){
 80026aa:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b3c      	cmp	r3, #60	@ 0x3c
 80026b0:	d115      	bne.n	80026de <HAL_TIM_PeriodElapsedCallback+0x5e>
  			seconds = 0;
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  			minutes++;
 80026b8:	4b33      	ldr	r3, [pc, #204]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026c2:	701a      	strb	r2, [r3, #0]
  			if(minutes == 60){
 80026c4:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b3c      	cmp	r3, #60	@ 0x3c
 80026ca:	d108      	bne.n	80026de <HAL_TIM_PeriodElapsedCallback+0x5e>
  				minutes = 0;
 80026cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
  				hours++;
 80026d2:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80026dc:	701a      	strb	r2, [r3, #0]
  			}
  		}
  	}
  if(htim->Instance == TIM7) { // This is for PWM
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002790 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d144      	bne.n	8002772 <HAL_TIM_PeriodElapsedCallback+0xf2>
	  currPos = toggleCount/2;
 80026e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80026f2:	801a      	strh	r2, [r3, #0]
	if(steps != currPos || ((toggleCount%2) != 0)){
 80026f4:	4b29      	ldr	r3, [pc, #164]	@ (800279c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_TIM_PeriodElapsedCallback+0x8e>
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d02e      	beq.n	800276c <HAL_TIM_PeriodElapsedCallback+0xec>
		if(steps > currPos ){
 800270e:	4b23      	ldr	r3, [pc, #140]	@ (800279c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d90e      	bls.n	8002738 <HAL_TIM_PeriodElapsedCallback+0xb8>
			HAL_GPIO_WritePin(dirGroup, dirPin, SET);
 800271a:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002720:	8811      	ldrh	r1, [r2, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4618      	mov	r0, r3
 8002726:	f001 fe91 	bl	800444c <HAL_GPIO_WritePin>
			toggleCount++;
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	e00d      	b.n	8002754 <HAL_TIM_PeriodElapsedCallback+0xd4>
		}
		else {
			HAL_GPIO_WritePin(dirGroup, dirPin, RESET);
 8002738:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800273e:	8811      	ldrh	r1, [r2, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f001 fe82 	bl	800444c <HAL_GPIO_WritePin>
			toggleCount--;
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002752:	801a      	strh	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(pulGroup, pulPin);
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f001 fe8d 	bl	800447e <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim7);
 8002764:	4812      	ldr	r0, [pc, #72]	@ (80027b0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002766:	f003 f9d3 	bl	8005b10 <HAL_TIM_Base_Start_IT>
	}
	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_5);
  }

  /* USER CODE END Callback 1 */
}
 800276a:	e002      	b.n	8002772 <HAL_TIM_PeriodElapsedCallback+0xf2>
		HAL_TIM_Base_Stop_IT(&htim7);
 800276c:	4810      	ldr	r0, [pc, #64]	@ (80027b0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800276e:	f003 fa47 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40001000 	.word	0x40001000
 8002780:	20000310 	.word	0x20000310
 8002784:	20000a4c 	.word	0x20000a4c
 8002788:	20000a4b 	.word	0x20000a4b
 800278c:	20000a4a 	.word	0x20000a4a
 8002790:	40001400 	.word	0x40001400
 8002794:	20000260 	.word	0x20000260
 8002798:	20000262 	.word	0x20000262
 800279c:	20000264 	.word	0x20000264
 80027a0:	20000040 	.word	0x20000040
 80027a4:	20000044 	.word	0x20000044
 80027a8:	20000038 	.word	0x20000038
 80027ac:	2000003c 	.word	0x2000003c
 80027b0:	200002c4 	.word	0x200002c4

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <Error_Handler+0x8>

080027c0 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f001 fac9 	bl	8003d68 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 80027d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027da:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80027de:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8002810 <dacSet+0x50>
 80027e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027e6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002818 <dacSet+0x58>
 80027ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027f2:	ee17 2a90 	vmov	r2, s15
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <dacSet+0x60>)
 80027f8:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <dacSet+0x60>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f001 fb5c 	bl	8003ec0 <HAL_DAC_SetValue>
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	66666666 	.word	0x66666666
 8002814:	400a6666 	.word	0x400a6666
 8002818:	00000000 	.word	0x00000000
 800281c:	40affe00 	.word	0x40affe00
 8002820:	20000a50 	.word	0x20000a50
 8002824:	00000000 	.word	0x00000000

08002828 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fdab 	bl	800338c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 8002836:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fea8 	bl	8003590 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 ff30 	bl	80036a6 <HAL_ADC_GetValue>
 8002846:	4603      	mov	r3, r0
 8002848:	b29a      	uxth	r2, r3
 800284a:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <adcGet+0x70>)
 800284c:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <adcGet+0x70>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800285a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800289c <adcGet+0x74>
 800285e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002866:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8002890 <adcGet+0x68>
 800286a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800286e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <adcGet+0x78>)
 8002874:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fe55 	bl	8003528 <HAL_ADC_Stop>
	return adcVolts;
 800287e:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <adcGet+0x78>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	ee07 3a90 	vmov	s15, r3
}
 8002886:	eeb0 0a67 	vmov.f32	s0, s15
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	66666666 	.word	0x66666666
 8002894:	400a6666 	.word	0x400a6666
 8002898:	20000a54 	.word	0x20000a54
 800289c:	457ff000 	.word	0x457ff000
 80028a0:	20000a58 	.word	0x20000a58

080028a4 <solenoidOneOpen>:
    // Now you can use buffer as a string
    //HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOneOpen(){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(solenoidOneGroup, solenoidOnePin, 1);	// 3.3 V
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <solenoidOneOpen+0x28>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <solenoidOneOpen+0x2c>)
 80028ae:	8811      	ldrh	r1, [r2, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fdca 	bl	800444c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(solenoidTwoGroup, solenoidTwoPin, 0);
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <solenoidOneOpen+0x30>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a06      	ldr	r2, [pc, #24]	@ (80028d8 <solenoidOneOpen+0x34>)
 80028be:	8811      	ldrh	r1, [r2, #0]
 80028c0:	2200      	movs	r2, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fdc2 	bl	800444c <HAL_GPIO_WritePin>
	return;
 80028c8:	bf00      	nop
}
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000004c 	.word	0x2000004c
 80028d0:	20000050 	.word	0x20000050
 80028d4:	20000054 	.word	0x20000054
 80028d8:	20000058 	.word	0x20000058

080028dc <solenoidTwoOpen>:
void solenoidTwoOpen(){
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(solenoidOneGroup, solenoidOnePin, 0);
 80028e0:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <solenoidTwoOpen+0x28>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a08      	ldr	r2, [pc, #32]	@ (8002908 <solenoidTwoOpen+0x2c>)
 80028e6:	8811      	ldrh	r1, [r2, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fdae 	bl	800444c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(solenoidTwoGroup, solenoidTwoPin, 1);
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <solenoidTwoOpen+0x30>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a06      	ldr	r2, [pc, #24]	@ (8002910 <solenoidTwoOpen+0x34>)
 80028f6:	8811      	ldrh	r1, [r2, #0]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 fda6 	bl	800444c <HAL_GPIO_WritePin>
	return;
 8002900:	bf00      	nop
}
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000004c 	.word	0x2000004c
 8002908:	20000050 	.word	0x20000050
 800290c:	20000054 	.word	0x20000054
 8002910:	20000058 	.word	0x20000058

08002914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_MspInit+0x4c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	4a10      	ldr	r2, [pc, #64]	@ (8002960 <HAL_MspInit+0x4c>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	@ 0x40
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <HAL_MspInit+0x4c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_MspInit+0x4c>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <HAL_MspInit+0x4c>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800293c:	6453      	str	r3, [r2, #68]	@ 0x44
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <HAL_MspInit+0x4c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	210f      	movs	r1, #15
 800294e:	f06f 0001 	mvn.w	r0, #1
 8002952:	f001 f9bd 	bl	8003cd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	@ 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a21      	ldr	r2, [pc, #132]	@ (8002a08 <HAL_ADC_MspInit+0xa4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d13b      	bne.n	80029fe <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002986:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002990:	6453      	str	r3, [r2, #68]	@ 0x44
 8002992:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b18      	ldr	r3, [pc, #96]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a14      	ldr	r2, [pc, #80]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_ADC_MspInit+0xa8>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ce:	2301      	movs	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029d2:	2303      	movs	r3, #3
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <HAL_ADC_MspInit+0xac>)
 80029e2:	f001 fb87 	bl	80040f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80029e6:	2368      	movs	r3, #104	@ 0x68
 80029e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ea:	2303      	movs	r3, #3
 80029ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	4806      	ldr	r0, [pc, #24]	@ (8002a14 <HAL_ADC_MspInit+0xb0>)
 80029fa:	f001 fb7b 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029fe:	bf00      	nop
 8002a00:	3728      	adds	r7, #40	@ 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020000 	.word	0x40020000

08002a18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a19      	ldr	r2, [pc, #100]	@ (8002a9c <HAL_DAC_MspInit+0x84>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12b      	bne.n	8002a92 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_DAC_MspInit+0x88>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_DAC_MspInit+0x88>)
 8002a40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a46:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <HAL_DAC_MspInit+0x88>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <HAL_DAC_MspInit+0x88>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	4a12      	ldr	r2, [pc, #72]	@ (8002aa0 <HAL_DAC_MspInit+0x88>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <HAL_DAC_MspInit+0x88>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4809      	ldr	r0, [pc, #36]	@ (8002aa4 <HAL_DAC_MspInit+0x8c>)
 8002a7e:	f001 fb39 	bl	80040f4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	210f      	movs	r1, #15
 8002a86:	2036      	movs	r0, #54	@ 0x36
 8002a88:	f001 f922 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a8c:	2036      	movs	r0, #54	@ 0x36
 8002a8e:	f001 f93b 	bl	8003d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	@ 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40007400 	.word	0x40007400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b20 <HAL_TIM_Base_MspInit+0x78>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d114      	bne.n	8002ae4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002aba:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_TIM_Base_MspInit+0x7c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a19      	ldr	r2, [pc, #100]	@ (8002b24 <HAL_TIM_Base_MspInit+0x7c>)
 8002ac0:	f043 0320 	orr.w	r3, r3, #32
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <HAL_TIM_Base_MspInit+0x7c>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2105      	movs	r1, #5
 8002ad6:	2037      	movs	r0, #55	@ 0x37
 8002ad8:	f001 f8fa 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002adc:	2037      	movs	r0, #55	@ 0x37
 8002ade:	f001 f913 	bl	8003d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002ae2:	e018      	b.n	8002b16 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM10)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b28 <HAL_TIM_Base_MspInit+0x80>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d113      	bne.n	8002b16 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002aee:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <HAL_TIM_Base_MspInit+0x7c>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <HAL_TIM_Base_MspInit+0x7c>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_TIM_Base_MspInit+0x7c>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2105      	movs	r1, #5
 8002b0a:	2019      	movs	r0, #25
 8002b0c:	f001 f8e0 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b10:	2019      	movs	r0, #25
 8002b12:	f001 f8f9 	bl	8003d08 <HAL_NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40001400 	.word	0x40001400
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40014400 	.word	0x40014400

08002b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b0b0      	sub	sp, #192	@ 0xc0
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2290      	movs	r2, #144	@ 0x90
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f009 f818 	bl	800bb82 <memset>
  if(huart->Instance==UART5)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a5c      	ldr	r2, [pc, #368]	@ (8002cc8 <HAL_UART_MspInit+0x19c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d167      	bne.n	8002c2c <HAL_UART_MspInit+0x100>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b60:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002b62:	2300      	movs	r3, #0
 8002b64:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 fb50 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b76:	f7ff fe1d 	bl	80027b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b7a:	4b54      	ldr	r3, [pc, #336]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a53      	ldr	r2, [pc, #332]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002b80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b86:	4b51      	ldr	r3, [pc, #324]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	4b4e      	ldr	r3, [pc, #312]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a4d      	ldr	r2, [pc, #308]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	4b48      	ldr	r3, [pc, #288]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a47      	ldr	r2, [pc, #284]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b45      	ldr	r3, [pc, #276]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8002bdc:	2307      	movs	r3, #7
 8002bde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002be6:	4619      	mov	r1, r3
 8002be8:	4839      	ldr	r0, [pc, #228]	@ (8002cd0 <HAL_UART_MspInit+0x1a4>)
 8002bea:	f001 fa83 	bl	80040f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002c12:	4619      	mov	r1, r3
 8002c14:	482f      	ldr	r0, [pc, #188]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002c16:	f001 fa6d 	bl	80040f4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2105      	movs	r1, #5
 8002c1e:	2035      	movs	r0, #53	@ 0x35
 8002c20:	f001 f856 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002c24:	2035      	movs	r0, #53	@ 0x35
 8002c26:	f001 f86f 	bl	8003d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c2a:	e049      	b.n	8002cc0 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART3)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a29      	ldr	r2, [pc, #164]	@ (8002cd8 <HAL_UART_MspInit+0x1ac>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d144      	bne.n	8002cc0 <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 fae3 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8002c50:	f7ff fdb0 	bl	80027b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	4a1c      	ldr	r2, [pc, #112]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c70:	4a16      	ldr	r2, [pc, #88]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <HAL_UART_MspInit+0x1a0>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <HAL_UART_MspInit+0x1b0>)
 8002cac:	f001 fa22 	bl	80040f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	2027      	movs	r0, #39	@ 0x27
 8002cb6:	f001 f80b 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cba:	2027      	movs	r0, #39	@ 0x27
 8002cbc:	f001 f824 	bl	8003d08 <HAL_NVIC_EnableIRQ>
}
 8002cc0:	bf00      	nop
 8002cc2:	37c0      	adds	r7, #192	@ 0xc0
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40005000 	.word	0x40005000
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020400 	.word	0x40020400
 8002cd8:	40004800 	.word	0x40004800
 8002cdc:	40020c00 	.word	0x40020c00

08002ce0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b0ae      	sub	sp, #184	@ 0xb8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2290      	movs	r2, #144	@ 0x90
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f008 ff3e 	bl	800bb82 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d0e:	d159      	bne.n	8002dc4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 fa75 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002d2c:	f7ff fd42 	bl	80027b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d34:	4a25      	ldr	r2, [pc, #148]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3c:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d48:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d62:	230a      	movs	r3, #10
 8002d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4818      	ldr	r0, [pc, #96]	@ (8002dd0 <HAL_PCD_MspInit+0xf0>)
 8002d70:	f001 f9c0 	bl	80040f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4810      	ldr	r0, [pc, #64]	@ (8002dd0 <HAL_PCD_MspInit+0xf0>)
 8002d90:	f001 f9b0 	bl	80040f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d94:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d98:	4a0c      	ldr	r2, [pc, #48]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	4a06      	ldr	r2, [pc, #24]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db8:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <HAL_PCD_MspInit+0xec>)
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002dc4:	bf00      	nop
 8002dc6:	37b8      	adds	r7, #184	@ 0xb8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000

08002dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08e      	sub	sp, #56	@ 0x38
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002de4:	4b33      	ldr	r3, [pc, #204]	@ (8002eb4 <HAL_InitTick+0xe0>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	4a32      	ldr	r2, [pc, #200]	@ (8002eb4 <HAL_InitTick+0xe0>)
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df0:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <HAL_InitTick+0xe0>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dfc:	f107 0210 	add.w	r2, r7, #16
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 f9d0 	bl	80051ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e16:	f002 f9a1 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 8002e1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002e1c:	e004      	b.n	8002e28 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e1e:	f002 f99d 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 8002e22:	4603      	mov	r3, r0
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	4a23      	ldr	r2, [pc, #140]	@ (8002eb8 <HAL_InitTick+0xe4>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	0c9b      	lsrs	r3, r3, #18
 8002e32:	3b01      	subs	r3, #1
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e36:	4b21      	ldr	r3, [pc, #132]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e38:	4a21      	ldr	r2, [pc, #132]	@ (8002ec0 <HAL_InitTick+0xec>)
 8002e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e44:	4a1d      	ldr	r2, [pc, #116]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e56:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002e5c:	4817      	ldr	r0, [pc, #92]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e5e:	f002 fdff 	bl	8005a60 <HAL_TIM_Base_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002e68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e70:	4812      	ldr	r0, [pc, #72]	@ (8002ebc <HAL_InitTick+0xe8>)
 8002e72:	f002 fe4d 	bl	8005b10 <HAL_TIM_Base_Start_IT>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e84:	2036      	movs	r0, #54	@ 0x36
 8002e86:	f000 ff3f 	bl	8003d08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d808      	bhi.n	8002ea2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e90:	2200      	movs	r2, #0
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	2036      	movs	r0, #54	@ 0x36
 8002e96:	f000 ff1b 	bl	8003cd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <HAL_InitTick+0xf0>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	e002      	b.n	8002ea8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ea8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3738      	adds	r7, #56	@ 0x38
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	20000a5c 	.word	0x20000a5c
 8002ec0:	40001000 	.word	0x40001000
 8002ec4:	2000006c 	.word	0x2000006c

08002ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <NMI_Handler+0x4>

08002ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <MemManage_Handler+0x4>

08002ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <BusFault_Handler+0x4>

08002ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <UsageFault_Handler+0x4>

08002ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002f04:	4802      	ldr	r0, [pc, #8]	@ (8002f10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f06:	f002 feaa 	bl	8005c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000310 	.word	0x20000310

08002f14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f18:	4802      	ldr	r0, [pc, #8]	@ (8002f24 <USART3_IRQHandler+0x10>)
 8002f1a:	f003 fb27 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200003e4 	.word	0x200003e4

08002f28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002f2c:	4802      	ldr	r0, [pc, #8]	@ (8002f38 <UART5_IRQHandler+0x10>)
 8002f2e:	f003 fb1d 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000035c 	.word	0x2000035c

08002f3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <TIM6_DAC_IRQHandler+0x20>)
 8002f42:	791b      	ldrb	r3, [r3, #4]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002f4a:	4804      	ldr	r0, [pc, #16]	@ (8002f5c <TIM6_DAC_IRQHandler+0x20>)
 8002f4c:	f000 ff5e 	bl	8003e0c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002f50:	4803      	ldr	r0, [pc, #12]	@ (8002f60 <TIM6_DAC_IRQHandler+0x24>)
 8002f52:	f002 fe84 	bl	8005c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200002b0 	.word	0x200002b0
 8002f60:	20000a5c 	.word	0x20000a5c

08002f64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <TIM7_IRQHandler+0x10>)
 8002f6a:	f002 fe78 	bl	8005c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200002c4 	.word	0x200002c4

08002f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return 1;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_kill>:

int _kill(int pid, int sig)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f92:	f008 fe9f 	bl	800bcd4 <__errno>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2216      	movs	r2, #22
 8002f9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_exit>:

void _exit (int status)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ffe7 	bl	8002f88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <_exit+0x12>

08002fbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e00a      	b.n	8002fe6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fd0:	f3af 8000 	nop.w
 8002fd4:	4601      	mov	r1, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	60ba      	str	r2, [r7, #8]
 8002fdc:	b2ca      	uxtb	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	dbf0      	blt.n	8002fd0 <_read+0x12>
  }

  return len;
 8002fee:	687b      	ldr	r3, [r7, #4]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e009      	b.n	800301e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	60ba      	str	r2, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	dbf1      	blt.n	800300a <_write+0x12>
  }
  return len;
 8003026:	687b      	ldr	r3, [r7, #4]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_close>:

int _close(int file)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003058:	605a      	str	r2, [r3, #4]
  return 0;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <_isatty>:

int _isatty(int file)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003070:	2301      	movs	r3, #1
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <_sbrk+0x5c>)
 80030a2:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <_sbrk+0x60>)
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030ac:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <_sbrk+0x64>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <_sbrk+0x64>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <_sbrk+0x68>)
 80030b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <_sbrk+0x64>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d207      	bcs.n	80030d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030c8:	f008 fe04 	bl	800bcd4 <__errno>
 80030cc:	4603      	mov	r3, r0
 80030ce:	220c      	movs	r2, #12
 80030d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	e009      	b.n	80030ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030d8:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030de:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <_sbrk+0x64>)
 80030e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20080000 	.word	0x20080000
 80030f8:	00000400 	.word	0x00000400
 80030fc:	20000aa8 	.word	0x20000aa8
 8003100:	200055e0 	.word	0x200055e0

08003104 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <SystemInit+0x20>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <SystemInit+0x20>)
 8003110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003130:	f107 0308 	add.w	r3, r7, #8
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_10;
 800313e:	230a      	movs	r3, #10
 8003140:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003142:	2301      	movs	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003146:	2303      	movs	r3, #3
 8003148:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fab5 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 800315c:	f7ff fb2a 	bl	80027b4 <Error_Handler>
	}
	return;
 8003160:	bf00      	nop
 8003162:	bf00      	nop
}
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	0000      	movs	r0, r0
 800316c:	0000      	movs	r0, r0
	...

08003170 <readVacuum>:

float readVacuum(float voltage){
 8003170:	b580      	push	{r7, lr}
 8003172:	ed2d 8b02 	vpush	{d8}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	ed87 0a01 	vstr	s0, [r7, #4]

	float exponent = (voltage * 3.198 - referenceVoltage)/scalingFactor;
 800317e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003182:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003186:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 80031f8 <readVacuum+0x88>
 800318a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <readVacuum+0x90>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003198:	ee36 5b47 	vsub.f64	d5, d6, d7
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <readVacuum+0x94>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80031aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031ae:	edc7 7a03 	vstr	s15, [r7, #12]
	pressure = referencePressure * pow(10, exponent);
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <readVacuum+0x98>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80031bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031c4:	eeb0 1b47 	vmov.f64	d1, d7
 80031c8:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80031cc:	f00b fffc 	bl	800f1c8 <pow>
 80031d0:	eeb0 7b40 	vmov.f64	d7, d0
 80031d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80031d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <readVacuum+0x9c>)
 80031de:	edc3 7a00 	vstr	s15, [r3]

	return pressure;
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <readVacuum+0x9c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	ee07 3a90 	vmov	s15, r3
}
 80031ea:	eeb0 0a67 	vmov.f32	s0, s15
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	ecbd 8b02 	vpop	{d8}
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	0624dd2f 	.word	0x0624dd2f
 80031fc:	40099581 	.word	0x40099581
 8003200:	20000064 	.word	0x20000064
 8003204:	20000068 	.word	0x20000068
 8003208:	20000060 	.word	0x20000060
 800320c:	20000aac 	.word	0x20000aac

08003210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003214:	480d      	ldr	r0, [pc, #52]	@ (800324c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003216:	490e      	ldr	r1, [pc, #56]	@ (8003250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003218:	4a0e      	ldr	r2, [pc, #56]	@ (8003254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800321c:	e002      	b.n	8003224 <LoopCopyDataInit>

0800321e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003222:	3304      	adds	r3, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003228:	d3f9      	bcc.n	800321e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322a:	4a0b      	ldr	r2, [pc, #44]	@ (8003258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800322c:	4c0b      	ldr	r4, [pc, #44]	@ (800325c <LoopFillZerobss+0x26>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003230:	e001      	b.n	8003236 <LoopFillZerobss>

08003232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003234:	3204      	adds	r2, #4

08003236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003238:	d3fb      	bcc.n	8003232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800323a:	f7ff ff63 	bl	8003104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323e:	f008 fd4f 	bl	800bce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003242:	f7fd fce9 	bl	8000c18 <main>
  bx  lr    
 8003246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003248:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003250:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003254:	080114f0 	.word	0x080114f0
  ldr r2, =_sbss
 8003258:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 800325c:	200055e0 	.word	0x200055e0

08003260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003260:	e7fe      	b.n	8003260 <ADC_IRQHandler>

08003262 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003266:	2003      	movs	r0, #3
 8003268:	f000 fd27 	bl	8003cba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800326c:	200f      	movs	r0, #15
 800326e:	f7ff fdb1 	bl	8002dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003272:	f7ff fb4f 	bl	8002914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	@ (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000070 	.word	0x20000070
 80032a0:	20000ab0 	.word	0x20000ab0

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000ab0 	.word	0x20000ab0

080032bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff ffee 	bl	80032a4 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d005      	beq.n	80032e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_Delay+0x44>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032e2:	bf00      	nop
 80032e4:	f7ff ffde 	bl	80032a4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d8f7      	bhi.n	80032e4 <HAL_Delay+0x28>
  {
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000070 	.word	0x20000070

08003304 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e031      	b.n	800337e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fb1e 	bl	8002964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <HAL_ADC_Init+0x84>)
 8003348:	4013      	ands	r3, r2
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fb0a 	bl	800396c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40
 800336e:	e001      	b.n	8003374 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	ffffeefd 	.word	0xffffeefd

0800338c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Start+0x1a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0ad      	b.n	8003502 <HAL_ADC_Start+0x176>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d018      	beq.n	80033ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80033cc:	4b50      	ldr	r3, [pc, #320]	@ (8003510 <HAL_ADC_Start+0x184>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a50      	ldr	r2, [pc, #320]	@ (8003514 <HAL_ADC_Start+0x188>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0c9a      	lsrs	r2, r3, #18
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033e0:	e002      	b.n	80033e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f9      	bne.n	80033e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d175      	bne.n	80034e8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003400:	4b45      	ldr	r3, [pc, #276]	@ (8003518 <HAL_ADC_Start+0x18c>)
 8003402:	4013      	ands	r3, r2
 8003404:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003422:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	d106      	bne.n	8003446 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	f023 0206 	bic.w	r2, r3, #6
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
 8003444:	e002      	b.n	800344c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800345c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800345e:	4b2f      	ldr	r3, [pc, #188]	@ (800351c <HAL_ADC_Start+0x190>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d143      	bne.n	8003500 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	e03a      	b.n	8003500 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a24      	ldr	r2, [pc, #144]	@ (8003520 <HAL_ADC_Start+0x194>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10e      	bne.n	80034b2 <HAL_ADC_Start+0x126>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80034b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80034b2:	4b1a      	ldr	r3, [pc, #104]	@ (800351c <HAL_ADC_Start+0x190>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d120      	bne.n	8003500 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a18      	ldr	r2, [pc, #96]	@ (8003524 <HAL_ADC_Start+0x198>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d11b      	bne.n	8003500 <HAL_ADC_Start+0x174>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	e00b      	b.n	8003500 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f043 0210 	orr.w	r2, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	2000005c 	.word	0x2000005c
 8003514:	431bde83 	.word	0x431bde83
 8003518:	fffff8fe 	.word	0xfffff8fe
 800351c:	40012300 	.word	0x40012300
 8003520:	40012000 	.word	0x40012000
 8003524:	40012200 	.word	0x40012200

08003528 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADC_Stop+0x16>
 800353a:	2302      	movs	r3, #2
 800353c:	e01f      	b.n	800357e <HAL_ADC_Stop+0x56>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003568:	4b08      	ldr	r3, [pc, #32]	@ (800358c <HAL_ADC_Stop+0x64>)
 800356a:	4013      	ands	r3, r2
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	ffffeefe 	.word	0xffffeefe

08003590 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ac:	d113      	bne.n	80035d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035bc:	d10b      	bne.n	80035d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e063      	b.n	800369e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035d6:	f7ff fe65 	bl	80032a4 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035dc:	e021      	b.n	8003622 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d01d      	beq.n	8003622 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_ADC_PollForConversion+0x6c>
 80035ec:	f7ff fe5a 	bl	80032a4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d212      	bcs.n	8003622 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d00b      	beq.n	8003622 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e03d      	b.n	800369e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d1d6      	bne.n	80035de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0212 	mvn.w	r2, #18
 8003638:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d123      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11f      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1c>
 80036d8:	2302      	movs	r3, #2
 80036da:	e136      	b.n	800394a <HAL_ADC_ConfigChannel+0x28a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	d93a      	bls.n	8003762 <HAL_ADC_ConfigChannel+0xa2>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036f4:	d035      	beq.n	8003762 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	3b1e      	subs	r3, #30
 800370c:	2207      	movs	r2, #7
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	400a      	ands	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a8d      	ldr	r2, [pc, #564]	@ (8003958 <HAL_ADC_ConfigChannel+0x298>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10a      	bne.n	800373c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68d9      	ldr	r1, [r3, #12]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	061a      	lsls	r2, r3, #24
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800373a:	e035      	b.n	80037a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4618      	mov	r0, r3
 800374e:	4603      	mov	r3, r0
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4403      	add	r3, r0
 8003754:	3b1e      	subs	r3, #30
 8003756:	409a      	lsls	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003760:	e022      	b.n	80037a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6919      	ldr	r1, [r3, #16]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	2207      	movs	r2, #7
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43da      	mvns	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	400a      	ands	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6919      	ldr	r1, [r3, #16]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	4618      	mov	r0, r3
 8003798:	4603      	mov	r3, r0
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4403      	add	r3, r0
 800379e:	409a      	lsls	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d824      	bhi.n	80037fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	3b05      	subs	r3, #5
 80037c2:	221f      	movs	r2, #31
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43da      	mvns	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	400a      	ands	r2, r1
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	3b05      	subs	r3, #5
 80037ec:	fa00 f203 	lsl.w	r2, r0, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80037f8:	e04c      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d824      	bhi.n	800384c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	3b23      	subs	r3, #35	@ 0x23
 8003814:	221f      	movs	r2, #31
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	400a      	ands	r2, r1
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	4618      	mov	r0, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	3b23      	subs	r3, #35	@ 0x23
 800383e:	fa00 f203 	lsl.w	r2, r0, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
 800384a:	e023      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	3b41      	subs	r3, #65	@ 0x41
 800385e:	221f      	movs	r2, #31
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43da      	mvns	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	400a      	ands	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3b41      	subs	r3, #65	@ 0x41
 8003888:	fa00 f203 	lsl.w	r2, r0, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a30      	ldr	r2, [pc, #192]	@ (800395c <HAL_ADC_ConfigChannel+0x29c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10a      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038a6:	d105      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80038a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a28      	ldr	r2, [pc, #160]	@ (800395c <HAL_ADC_ConfigChannel+0x29c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10f      	bne.n	80038de <HAL_ADC_ConfigChannel+0x21e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b12      	cmp	r3, #18
 80038c4:	d10b      	bne.n	80038de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80038c6:	4b26      	ldr	r3, [pc, #152]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a25      	ldr	r2, [pc, #148]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80038d2:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a22      	ldr	r2, [pc, #136]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	@ (800395c <HAL_ADC_ConfigChannel+0x29c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d12b      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003958 <HAL_ADC_ConfigChannel+0x298>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x23a>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b11      	cmp	r3, #17
 80038f8:	d122      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80038fa:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 8003900:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003904:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003906:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4a15      	ldr	r2, [pc, #84]	@ (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 800390c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003910:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a10      	ldr	r2, [pc, #64]	@ (8003958 <HAL_ADC_ConfigChannel+0x298>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800391c:	4b11      	ldr	r3, [pc, #68]	@ (8003964 <HAL_ADC_ConfigChannel+0x2a4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a11      	ldr	r2, [pc, #68]	@ (8003968 <HAL_ADC_ConfigChannel+0x2a8>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9a      	lsrs	r2, r3, #18
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003932:	e002      	b.n	800393a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3b01      	subs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f9      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	10000012 	.word	0x10000012
 800395c:	40012000 	.word	0x40012000
 8003960:	40012300 	.word	0x40012300
 8003964:	2000005c 	.word	0x2000005c
 8003968:	431bde83 	.word	0x431bde83

0800396c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003974:	4b78      	ldr	r3, [pc, #480]	@ (8003b58 <ADC_Init+0x1ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a77      	ldr	r2, [pc, #476]	@ (8003b58 <ADC_Init+0x1ec>)
 800397a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800397e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003980:	4b75      	ldr	r3, [pc, #468]	@ (8003b58 <ADC_Init+0x1ec>)
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4973      	ldr	r1, [pc, #460]	@ (8003b58 <ADC_Init+0x1ec>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800399c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	021a      	lsls	r2, r3, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80039c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	4a58      	ldr	r2, [pc, #352]	@ (8003b5c <ADC_Init+0x1f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	e00f      	b.n	8003a66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0202 	bic.w	r2, r2, #2
 8003a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6899      	ldr	r1, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	005a      	lsls	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	035a      	lsls	r2, r3, #13
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	e007      	b.n	8003adc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	051a      	lsls	r2, r3, #20
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6899      	ldr	r1, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b1e:	025a      	lsls	r2, r3, #9
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	029a      	lsls	r2, r3, #10
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	0f000001 	.word	0x0f000001

08003b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b88:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	05fa0000 	.word	0x05fa0000

08003ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bac:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 0307 	and.w	r3, r3, #7
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db0b      	blt.n	8003bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	4907      	ldr	r1, [pc, #28]	@ (8003bfc <__NVIC_EnableIRQ+0x38>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2001      	movs	r0, #1
 8003be6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	e000e100 	.word	0xe000e100

08003c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db0a      	blt.n	8003c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	490c      	ldr	r1, [pc, #48]	@ (8003c4c <__NVIC_SetPriority+0x4c>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	440b      	add	r3, r1
 8003c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c28:	e00a      	b.n	8003c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4908      	ldr	r1, [pc, #32]	@ (8003c50 <__NVIC_SetPriority+0x50>)
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3b04      	subs	r3, #4
 8003c38:	0112      	lsls	r2, r2, #4
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	761a      	strb	r2, [r3, #24]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f1c3 0307 	rsb	r3, r3, #7
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	bf28      	it	cs
 8003c72:	2304      	movcs	r3, #4
 8003c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d902      	bls.n	8003c84 <NVIC_EncodePriority+0x30>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3b03      	subs	r3, #3
 8003c82:	e000      	b.n	8003c86 <NVIC_EncodePriority+0x32>
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43d9      	mvns	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	4313      	orrs	r3, r2
         );
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	@ 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ff4c 	bl	8003b60 <__NVIC_SetPriorityGrouping>
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce2:	f7ff ff61 	bl	8003ba8 <__NVIC_GetPriorityGrouping>
 8003ce6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	6978      	ldr	r0, [r7, #20]
 8003cee:	f7ff ffb1 	bl	8003c54 <NVIC_EncodePriority>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff80 	bl	8003c00 <__NVIC_SetPriority>
}
 8003d00:	bf00      	nop
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff54 	bl	8003bc4 <__NVIC_EnableIRQ>
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e014      	b.n	8003d60 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	791b      	ldrb	r3, [r3, #4]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fe fe66 	bl	8002a18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	795b      	ldrb	r3, [r3, #5]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_DAC_Start+0x16>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e040      	b.n	8003e00 <HAL_DAC_Start+0x98>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003db2:	2b3c      	cmp	r3, #60	@ 0x3c
 8003db4:	d11d      	bne.n	8003df2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e014      	b.n	8003df2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	213c      	movs	r1, #60	@ 0x3c
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d107      	bne.n	8003df2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0202 	orr.w	r2, r2, #2
 8003df0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e22:	d120      	bne.n	8003e66 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e32:	d118      	bne.n	8003e66 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2204      	movs	r2, #4
 8003e38:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e5e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f852 	bl	8003f0a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e74:	d120      	bne.n	8003eb8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e84:	d118      	bne.n	8003eb8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ea0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f882 	bl	8003fbc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e004      	b.n	8003ef4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b087      	sub	sp, #28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	795b      	ldrb	r3, [r3, #5]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_DAC_ConfigChannel+0x18>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e03c      	b.n	8003fb0 <HAL_DAC_ConfigChannel+0x92>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	22c0      	movs	r2, #192	@ 0xc0
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fde:	f7ff f961 	bl	80032a4 <HAL_GetTick>
 8003fe2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d008      	beq.n	8004002 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2280      	movs	r2, #128	@ 0x80
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e052      	b.n	80040a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0216 	bic.w	r2, r2, #22
 8004010:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004020:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <HAL_DMA_Abort+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0208 	bic.w	r2, r2, #8
 8004040:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004052:	e013      	b.n	800407c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004054:	f7ff f926 	bl	80032a4 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b05      	cmp	r3, #5
 8004060:	d90c      	bls.n	800407c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e015      	b.n	80040a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e4      	bne.n	8004054 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	223f      	movs	r2, #63	@ 0x3f
 8004090:	409a      	lsls	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d004      	beq.n	80040ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2280      	movs	r2, #128	@ 0x80
 80040c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e00c      	b.n	80040e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2205      	movs	r2, #5
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	@ 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e175      	b.n	8004400 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004114:	2201      	movs	r2, #1
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	f040 8164 	bne.w	80043fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d005      	beq.n	800414a <HAL_GPIO_Init+0x56>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d130      	bne.n	80041ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0201 	and.w	r2, r3, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d017      	beq.n	80041e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d123      	bne.n	800423c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	08da      	lsrs	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3208      	adds	r2, #8
 80041fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	220f      	movs	r2, #15
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	08da      	lsrs	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3208      	adds	r2, #8
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	2203      	movs	r2, #3
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0203 	and.w	r2, r3, #3
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80be 	beq.w	80043fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427e:	4b66      	ldr	r3, [pc, #408]	@ (8004418 <HAL_GPIO_Init+0x324>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <HAL_GPIO_Init+0x324>)
 8004284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004288:	6453      	str	r3, [r2, #68]	@ 0x44
 800428a:	4b63      	ldr	r3, [pc, #396]	@ (8004418 <HAL_GPIO_Init+0x324>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004296:	4a61      	ldr	r2, [pc, #388]	@ (800441c <HAL_GPIO_Init+0x328>)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	089b      	lsrs	r3, r3, #2
 800429c:	3302      	adds	r3, #2
 800429e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	220f      	movs	r2, #15
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4013      	ands	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a58      	ldr	r2, [pc, #352]	@ (8004420 <HAL_GPIO_Init+0x32c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d037      	beq.n	8004332 <HAL_GPIO_Init+0x23e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a57      	ldr	r2, [pc, #348]	@ (8004424 <HAL_GPIO_Init+0x330>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d031      	beq.n	800432e <HAL_GPIO_Init+0x23a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a56      	ldr	r2, [pc, #344]	@ (8004428 <HAL_GPIO_Init+0x334>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d02b      	beq.n	800432a <HAL_GPIO_Init+0x236>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a55      	ldr	r2, [pc, #340]	@ (800442c <HAL_GPIO_Init+0x338>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d025      	beq.n	8004326 <HAL_GPIO_Init+0x232>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a54      	ldr	r2, [pc, #336]	@ (8004430 <HAL_GPIO_Init+0x33c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01f      	beq.n	8004322 <HAL_GPIO_Init+0x22e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a53      	ldr	r2, [pc, #332]	@ (8004434 <HAL_GPIO_Init+0x340>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d019      	beq.n	800431e <HAL_GPIO_Init+0x22a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a52      	ldr	r2, [pc, #328]	@ (8004438 <HAL_GPIO_Init+0x344>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_GPIO_Init+0x226>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a51      	ldr	r2, [pc, #324]	@ (800443c <HAL_GPIO_Init+0x348>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00d      	beq.n	8004316 <HAL_GPIO_Init+0x222>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a50      	ldr	r2, [pc, #320]	@ (8004440 <HAL_GPIO_Init+0x34c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <HAL_GPIO_Init+0x21e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a4f      	ldr	r2, [pc, #316]	@ (8004444 <HAL_GPIO_Init+0x350>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d101      	bne.n	800430e <HAL_GPIO_Init+0x21a>
 800430a:	2309      	movs	r3, #9
 800430c:	e012      	b.n	8004334 <HAL_GPIO_Init+0x240>
 800430e:	230a      	movs	r3, #10
 8004310:	e010      	b.n	8004334 <HAL_GPIO_Init+0x240>
 8004312:	2308      	movs	r3, #8
 8004314:	e00e      	b.n	8004334 <HAL_GPIO_Init+0x240>
 8004316:	2307      	movs	r3, #7
 8004318:	e00c      	b.n	8004334 <HAL_GPIO_Init+0x240>
 800431a:	2306      	movs	r3, #6
 800431c:	e00a      	b.n	8004334 <HAL_GPIO_Init+0x240>
 800431e:	2305      	movs	r3, #5
 8004320:	e008      	b.n	8004334 <HAL_GPIO_Init+0x240>
 8004322:	2304      	movs	r3, #4
 8004324:	e006      	b.n	8004334 <HAL_GPIO_Init+0x240>
 8004326:	2303      	movs	r3, #3
 8004328:	e004      	b.n	8004334 <HAL_GPIO_Init+0x240>
 800432a:	2302      	movs	r3, #2
 800432c:	e002      	b.n	8004334 <HAL_GPIO_Init+0x240>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_GPIO_Init+0x240>
 8004332:	2300      	movs	r3, #0
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	f002 0203 	and.w	r2, r2, #3
 800433a:	0092      	lsls	r2, r2, #2
 800433c:	4093      	lsls	r3, r2
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004344:	4935      	ldr	r1, [pc, #212]	@ (800441c <HAL_GPIO_Init+0x328>)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	3302      	adds	r3, #2
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004352:	4b3d      	ldr	r3, [pc, #244]	@ (8004448 <HAL_GPIO_Init+0x354>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004376:	4a34      	ldr	r2, [pc, #208]	@ (8004448 <HAL_GPIO_Init+0x354>)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800437c:	4b32      	ldr	r3, [pc, #200]	@ (8004448 <HAL_GPIO_Init+0x354>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043a0:	4a29      	ldr	r2, [pc, #164]	@ (8004448 <HAL_GPIO_Init+0x354>)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043a6:	4b28      	ldr	r3, [pc, #160]	@ (8004448 <HAL_GPIO_Init+0x354>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004448 <HAL_GPIO_Init+0x354>)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004448 <HAL_GPIO_Init+0x354>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043f4:	4a14      	ldr	r2, [pc, #80]	@ (8004448 <HAL_GPIO_Init+0x354>)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3301      	adds	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b0f      	cmp	r3, #15
 8004404:	f67f ae86 	bls.w	8004114 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3724      	adds	r7, #36	@ 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	40013800 	.word	0x40013800
 8004420:	40020000 	.word	0x40020000
 8004424:	40020400 	.word	0x40020400
 8004428:	40020800 	.word	0x40020800
 800442c:	40020c00 	.word	0x40020c00
 8004430:	40021000 	.word	0x40021000
 8004434:	40021400 	.word	0x40021400
 8004438:	40021800 	.word	0x40021800
 800443c:	40021c00 	.word	0x40021c00
 8004440:	40022000 	.word	0x40022000
 8004444:	40022400 	.word	0x40022400
 8004448:	40013c00 	.word	0x40013c00

0800444c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
 8004458:	4613      	mov	r3, r2
 800445a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800445c:	787b      	ldrb	r3, [r7, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004462:	887a      	ldrh	r2, [r7, #2]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004468:	e003      	b.n	8004472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	041a      	lsls	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	619a      	str	r2, [r3, #24]
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004490:	887a      	ldrh	r2, [r7, #2]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4013      	ands	r3, r2
 8004496:	041a      	lsls	r2, r3, #16
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	43d9      	mvns	r1, r3
 800449c:	887b      	ldrh	r3, [r7, #2]
 800449e:	400b      	ands	r3, r1
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	619a      	str	r2, [r3, #24]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b4:	b08f      	sub	sp, #60	@ 0x3c
 80044b6:	af0a      	add	r7, sp, #40	@ 0x28
 80044b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e116      	b.n	80046f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fe fbfe 	bl	8002ce0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2203      	movs	r2, #3
 80044e8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f003 f914 	bl	8007730 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	687e      	ldr	r6, [r7, #4]
 8004510:	466d      	mov	r5, sp
 8004512:	f106 0410 	add.w	r4, r6, #16
 8004516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800451a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800451c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800451e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004522:	e885 0003 	stmia.w	r5, {r0, r1}
 8004526:	1d33      	adds	r3, r6, #4
 8004528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	f003 f8a8 	bl	8007680 <USB_CoreInit>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0d7      	b.n	80046f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f003 f902 	bl	8007752 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e04a      	b.n	80045ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	333d      	adds	r3, #61	@ 0x3d
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	333c      	adds	r3, #60	@ 0x3c
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	b298      	uxth	r0, r3
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3344      	adds	r3, #68	@ 0x44
 8004590:	4602      	mov	r2, r0
 8004592:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3340      	adds	r3, #64	@ 0x40
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3348      	adds	r3, #72	@ 0x48
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	334c      	adds	r3, #76	@ 0x4c
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3354      	adds	r3, #84	@ 0x54
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	3301      	adds	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d3af      	bcc.n	8004554 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e044      	b.n	8004684 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004652:	7bfa      	ldrb	r2, [r7, #15]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	3301      	adds	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d3b5      	bcc.n	80045fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	687e      	ldr	r6, [r7, #4]
 8004696:	466d      	mov	r5, sp
 8004698:	f106 0410 	add.w	r4, r6, #16
 800469c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80046ac:	1d33      	adds	r3, r6, #4
 80046ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	f003 f89b 	bl	80077ec <USB_DevInit>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e014      	b.n	80046f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d102      	bne.n	80046e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f80b 	bl	80046fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f003 fa59 	bl	8007ba2 <USB_DevDisconnect>

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800472a:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <HAL_PCDEx_ActivateLPM+0x44>)
 800472c:	4313      	orrs	r3, r2
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	10000003 	.word	0x10000003

08004744 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a04      	ldr	r2, [pc, #16]	@ (8004760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004752:	6013      	str	r3, [r2, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40007000 	.word	0x40007000

08004764 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	4b23      	ldr	r3, [pc, #140]	@ (80047fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	4a22      	ldr	r2, [pc, #136]	@ (80047fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004778:	6413      	str	r3, [r2, #64]	@ 0x40
 800477a:	4b20      	ldr	r3, [pc, #128]	@ (80047fc <HAL_PWREx_EnableOverDrive+0x98>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004786:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_PWREx_EnableOverDrive+0x9c>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004790:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004792:	f7fe fd87 	bl	80032a4 <HAL_GetTick>
 8004796:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004798:	e009      	b.n	80047ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800479a:	f7fe fd83 	bl	80032a4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047a8:	d901      	bls.n	80047ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e022      	b.n	80047f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047ae:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ba:	d1ee      	bne.n	800479a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047bc:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047c8:	f7fe fd6c 	bl	80032a4 <HAL_GetTick>
 80047cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047ce:	e009      	b.n	80047e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047d0:	f7fe fd68 	bl	80032a4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047de:	d901      	bls.n	80047e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e007      	b.n	80047f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047e4:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f0:	d1ee      	bne.n	80047d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40023800 	.word	0x40023800
 8004800:	40007000 	.word	0x40007000

08004804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800480c:	2300      	movs	r3, #0
 800480e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e29b      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8087 	beq.w	8004936 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004828:	4b96      	ldr	r3, [pc, #600]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b04      	cmp	r3, #4
 8004832:	d00c      	beq.n	800484e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004834:	4b93      	ldr	r3, [pc, #588]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	d112      	bne.n	8004866 <HAL_RCC_OscConfig+0x62>
 8004840:	4b90      	ldr	r3, [pc, #576]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800484c:	d10b      	bne.n	8004866 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d06c      	beq.n	8004934 <HAL_RCC_OscConfig+0x130>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d168      	bne.n	8004934 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e275      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486e:	d106      	bne.n	800487e <HAL_RCC_OscConfig+0x7a>
 8004870:	4b84      	ldr	r3, [pc, #528]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a83      	ldr	r2, [pc, #524]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e02e      	b.n	80048dc <HAL_RCC_OscConfig+0xd8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x9c>
 8004886:	4b7f      	ldr	r3, [pc, #508]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 800488c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b7c      	ldr	r3, [pc, #496]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a7b      	ldr	r2, [pc, #492]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004898:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e01d      	b.n	80048dc <HAL_RCC_OscConfig+0xd8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0xc0>
 80048aa:	4b76      	ldr	r3, [pc, #472]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a75      	ldr	r2, [pc, #468]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b73      	ldr	r3, [pc, #460]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a72      	ldr	r2, [pc, #456]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e00b      	b.n	80048dc <HAL_RCC_OscConfig+0xd8>
 80048c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80048d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d013      	beq.n	800490c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fe fcde 	bl	80032a4 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fe fcda 	bl	80032a4 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	@ 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e229      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b61      	ldr	r3, [pc, #388]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0xe8>
 800490a:	e014      	b.n	8004936 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fe fcca 	bl	80032a4 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fe fcc6 	bl	80032a4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	@ 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e215      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	4b57      	ldr	r3, [pc, #348]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x110>
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d069      	beq.n	8004a16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004942:	4b50      	ldr	r3, [pc, #320]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494e:	4b4d      	ldr	r3, [pc, #308]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b08      	cmp	r3, #8
 8004958:	d11c      	bne.n	8004994 <HAL_RCC_OscConfig+0x190>
 800495a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	4b47      	ldr	r3, [pc, #284]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x17a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e1e9      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b41      	ldr	r3, [pc, #260]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	493d      	ldr	r1, [pc, #244]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004992:	e040      	b.n	8004a16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d023      	beq.n	80049e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800499c:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a38      	ldr	r2, [pc, #224]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fe fc7c 	bl	80032a4 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fe fc78 	bl	80032a4 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e1c7      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c2:	4b30      	ldr	r3, [pc, #192]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4929      	ldr	r1, [pc, #164]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
 80049e2:	e018      	b.n	8004a16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e4:	4b27      	ldr	r3, [pc, #156]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a26      	ldr	r2, [pc, #152]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe fc58 	bl	80032a4 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f8:	f7fe fc54 	bl	80032a4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e1a3      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d038      	beq.n	8004a94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d019      	beq.n	8004a5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2a:	4b16      	ldr	r3, [pc, #88]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	4a15      	ldr	r2, [pc, #84]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fe fc35 	bl	80032a4 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a3e:	f7fe fc31 	bl	80032a4 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e180      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a50:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x23a>
 8004a5c:	e01a      	b.n	8004a94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5e:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a62:	4a08      	ldr	r2, [pc, #32]	@ (8004a84 <HAL_RCC_OscConfig+0x280>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6a:	f7fe fc1b 	bl	80032a4 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a72:	f7fe fc17 	bl	80032a4 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d903      	bls.n	8004a88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e166      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
 8004a84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	4b92      	ldr	r3, [pc, #584]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ee      	bne.n	8004a72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80a4 	beq.w	8004bea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aae:	4b89      	ldr	r3, [pc, #548]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	4a88      	ldr	r2, [pc, #544]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aba:	4b86      	ldr	r3, [pc, #536]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aca:	4b83      	ldr	r3, [pc, #524]	@ (8004cd8 <HAL_RCC_OscConfig+0x4d4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d118      	bne.n	8004b08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ad6:	4b80      	ldr	r3, [pc, #512]	@ (8004cd8 <HAL_RCC_OscConfig+0x4d4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd8 <HAL_RCC_OscConfig+0x4d4>)
 8004adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae2:	f7fe fbdf 	bl	80032a4 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aea:	f7fe fbdb 	bl	80032a4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b64      	cmp	r3, #100	@ 0x64
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e12a      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004afc:	4b76      	ldr	r3, [pc, #472]	@ (8004cd8 <HAL_RCC_OscConfig+0x4d4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCC_OscConfig+0x31a>
 8004b10:	4b70      	ldr	r3, [pc, #448]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b14:	4a6f      	ldr	r2, [pc, #444]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1c:	e02d      	b.n	8004b7a <HAL_RCC_OscConfig+0x376>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCC_OscConfig+0x33c>
 8004b26:	4b6b      	ldr	r3, [pc, #428]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	4a6a      	ldr	r2, [pc, #424]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b32:	4b68      	ldr	r3, [pc, #416]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	4a67      	ldr	r2, [pc, #412]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	f023 0304 	bic.w	r3, r3, #4
 8004b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3e:	e01c      	b.n	8004b7a <HAL_RCC_OscConfig+0x376>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	d10c      	bne.n	8004b62 <HAL_RCC_OscConfig+0x35e>
 8004b48:	4b62      	ldr	r3, [pc, #392]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4c:	4a61      	ldr	r2, [pc, #388]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b4e:	f043 0304 	orr.w	r3, r3, #4
 8004b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b54:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b58:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b60:	e00b      	b.n	8004b7a <HAL_RCC_OscConfig+0x376>
 8004b62:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b66:	4a5b      	ldr	r2, [pc, #364]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6e:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	4a58      	ldr	r2, [pc, #352]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d015      	beq.n	8004bae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b82:	f7fe fb8f 	bl	80032a4 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7fe fb8b 	bl	80032a4 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0d8      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ee      	beq.n	8004b8a <HAL_RCC_OscConfig+0x386>
 8004bac:	e014      	b.n	8004bd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bae:	f7fe fb79 	bl	80032a4 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fe fb75 	bl	80032a4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0c2      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bcc:	4b41      	ldr	r3, [pc, #260]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ee      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d105      	bne.n	8004bea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bde:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80ae 	beq.w	8004d50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf4:	4b37      	ldr	r3, [pc, #220]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d06d      	beq.n	8004cdc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d14b      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c08:	4b32      	ldr	r3, [pc, #200]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a31      	ldr	r2, [pc, #196]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fe fb46 	bl	80032a4 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fe fb42 	bl	80032a4 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e091      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2e:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	3b01      	subs	r3, #1
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c64:	071b      	lsls	r3, r3, #28
 8004c66:	491b      	ldr	r1, [pc, #108]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c6c:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a18      	ldr	r2, [pc, #96]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fe fb14 	bl	80032a4 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fe fb10 	bl	80032a4 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e05f      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b10      	ldr	r3, [pc, #64]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x47c>
 8004c9e:	e057      	b.n	8004d50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fe fafa 	bl	80032a4 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fe faf6 	bl	80032a4 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e045      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc6:	4b03      	ldr	r3, [pc, #12]	@ (8004cd4 <HAL_RCC_OscConfig+0x4d0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4b0>
 8004cd2:	e03d      	b.n	8004d50 <HAL_RCC_OscConfig+0x54c>
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <HAL_RCC_OscConfig+0x558>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d030      	beq.n	8004d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d129      	bne.n	8004d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d122      	bne.n	8004d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d119      	bne.n	8004d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	3b01      	subs	r3, #1
 8004d26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d10f      	bne.n	8004d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800

08004d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0d0      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d78:	4b6a      	ldr	r3, [pc, #424]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d910      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b67      	ldr	r3, [pc, #412]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 020f 	bic.w	r2, r3, #15
 8004d8e:	4965      	ldr	r1, [pc, #404]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b63      	ldr	r3, [pc, #396]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0b8      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc0:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a58      	ldr	r2, [pc, #352]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd8:	4b53      	ldr	r3, [pc, #332]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004de2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b50      	ldr	r3, [pc, #320]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	494d      	ldr	r1, [pc, #308]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d040      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d115      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d107      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e22:	4b41      	ldr	r3, [pc, #260]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e073      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e32:	4b3d      	ldr	r3, [pc, #244]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e06b      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e42:	4b39      	ldr	r3, [pc, #228]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f023 0203 	bic.w	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4936      	ldr	r1, [pc, #216]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e54:	f7fe fa26 	bl	80032a4 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5c:	f7fe fa22 	bl	80032a4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e053      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	4b2d      	ldr	r3, [pc, #180]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 020c 	and.w	r2, r3, #12
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d1eb      	bne.n	8004e5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e84:	4b27      	ldr	r3, [pc, #156]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d210      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 020f 	bic.w	r2, r3, #15
 8004e9a:	4922      	ldr	r1, [pc, #136]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e032      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4916      	ldr	r1, [pc, #88]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ede:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	490e      	ldr	r1, [pc, #56]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ef2:	f000 f821 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	490a      	ldr	r1, [pc, #40]	@ (8004f2c <HAL_RCC_ClockConfig+0x1cc>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	4a09      	ldr	r2, [pc, #36]	@ (8004f30 <HAL_RCC_ClockConfig+0x1d0>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <HAL_RCC_ClockConfig+0x1d4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd ff5e 	bl	8002dd4 <HAL_InitTick>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023c00 	.word	0x40023c00
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	0800f7e4 	.word	0x0800f7e4
 8004f30:	2000005c 	.word	0x2000005c
 8004f34:	2000006c 	.word	0x2000006c

08004f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b094      	sub	sp, #80	@ 0x50
 8004f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f44:	2300      	movs	r3, #0
 8004f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f48:	2300      	movs	r3, #0
 8004f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f50:	4b79      	ldr	r3, [pc, #484]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d00d      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x40>
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	f200 80e1 	bhi.w	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x34>
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6a:	e0db      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b73      	ldr	r3, [pc, #460]	@ (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f70:	e0db      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f72:	4b73      	ldr	r3, [pc, #460]	@ (8005140 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f76:	e0d8      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f78:	4b6f      	ldr	r3, [pc, #444]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f82:	4b6d      	ldr	r3, [pc, #436]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d063      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	2200      	movs	r2, #0
 8004f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	0159      	lsls	r1, r3, #5
 8004fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fbc:	0150      	lsls	r0, r2, #5
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	1a51      	subs	r1, r2, r1
 8004fc6:	6139      	str	r1, [r7, #16]
 8004fc8:	4629      	mov	r1, r5
 8004fca:	eb63 0301 	sbc.w	r3, r3, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fdc:	4659      	mov	r1, fp
 8004fde:	018b      	lsls	r3, r1, #6
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	018a      	lsls	r2, r1, #6
 8004fea:	4651      	mov	r1, sl
 8004fec:	ebb2 0801 	subs.w	r8, r2, r1
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800500a:	4690      	mov	r8, r2
 800500c:	4699      	mov	r9, r3
 800500e:	4623      	mov	r3, r4
 8005010:	eb18 0303 	adds.w	r3, r8, r3
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	462b      	mov	r3, r5
 8005018:	eb49 0303 	adc.w	r3, r9, r3
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800502a:	4629      	mov	r1, r5
 800502c:	024b      	lsls	r3, r1, #9
 800502e:	4621      	mov	r1, r4
 8005030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005034:	4621      	mov	r1, r4
 8005036:	024a      	lsls	r2, r1, #9
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503e:	2200      	movs	r2, #0
 8005040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005048:	f7fb fb0e 	bl	8000668 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005054:	e058      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b38      	ldr	r3, [pc, #224]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	2200      	movs	r2, #0
 800505e:	4618      	mov	r0, r3
 8005060:	4611      	mov	r1, r2
 8005062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	2300      	movs	r3, #0
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
 800506c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	0159      	lsls	r1, r3, #5
 800507e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005082:	0150      	lsls	r0, r2, #5
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4641      	mov	r1, r8
 800508a:	ebb2 0a01 	subs.w	sl, r2, r1
 800508e:	4649      	mov	r1, r9
 8005090:	eb63 0b01 	sbc.w	fp, r3, r1
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050a8:	ebb2 040a 	subs.w	r4, r2, sl
 80050ac:	eb63 050b 	sbc.w	r5, r3, fp
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	464b      	mov	r3, r9
 80050cc:	eb45 0303 	adc.w	r3, r5, r3
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050de:	4629      	mov	r1, r5
 80050e0:	028b      	lsls	r3, r1, #10
 80050e2:	4621      	mov	r1, r4
 80050e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050e8:	4621      	mov	r1, r4
 80050ea:	028a      	lsls	r2, r1, #10
 80050ec:	4610      	mov	r0, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f2:	2200      	movs	r2, #0
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	61fa      	str	r2, [r7, #28]
 80050f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050fc:	f7fb fab4 	bl	8000668 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4613      	mov	r3, r2
 8005106:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005108:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	3301      	adds	r3, #1
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800511a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005122:	e002      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8005126:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800512a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800512c:	4618      	mov	r0, r3
 800512e:	3750      	adds	r7, #80	@ 0x50
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	00f42400 	.word	0x00f42400
 8005140:	007a1200 	.word	0x007a1200

08005144 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005148:	4b03      	ldr	r3, [pc, #12]	@ (8005158 <HAL_RCC_GetHCLKFreq+0x14>)
 800514a:	681b      	ldr	r3, [r3, #0]
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	2000005c 	.word	0x2000005c

0800515c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005160:	f7ff fff0 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b05      	ldr	r3, [pc, #20]	@ (800517c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	0a9b      	lsrs	r3, r3, #10
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4903      	ldr	r1, [pc, #12]	@ (8005180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40023800 	.word	0x40023800
 8005180:	0800f7f4 	.word	0x0800f7f4

08005184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005188:	f7ff ffdc 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0b5b      	lsrs	r3, r3, #13
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4903      	ldr	r1, [pc, #12]	@ (80051a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40023800 	.word	0x40023800
 80051a8:	0800f7f4 	.word	0x0800f7f4

080051ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	220f      	movs	r2, #15
 80051ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051bc:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <HAL_RCC_GetClockConfig+0x5c>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0203 	and.w	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <HAL_RCC_GetClockConfig+0x5c>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005208 <HAL_RCC_GetClockConfig+0x5c>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80051e0:	4b09      	ldr	r3, [pc, #36]	@ (8005208 <HAL_RCC_GetClockConfig+0x5c>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051ee:	4b07      	ldr	r3, [pc, #28]	@ (800520c <HAL_RCC_GetClockConfig+0x60>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 020f 	and.w	r2, r3, #15
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	601a      	str	r2, [r3, #0]
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40023800 	.word	0x40023800
 800520c:	40023c00 	.word	0x40023c00

08005210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d012      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005238:	4b69      	ldr	r3, [pc, #420]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	4a68      	ldr	r2, [pc, #416]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005242:	6093      	str	r3, [r2, #8]
 8005244:	4b66      	ldr	r3, [pc, #408]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524c:	4964      	ldr	r1, [pc, #400]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800525a:	2301      	movs	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d017      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800526a:	4b5d      	ldr	r3, [pc, #372]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005270:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005278:	4959      	ldr	r1, [pc, #356]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005288:	d101      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d017      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052a6:	4b4e      	ldr	r3, [pc, #312]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	494a      	ldr	r1, [pc, #296]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c4:	d101      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 808b 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052f4:	4b3a      	ldr	r3, [pc, #232]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	4a39      	ldr	r2, [pc, #228]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005300:	4b37      	ldr	r3, [pc, #220]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800530c:	4b35      	ldr	r3, [pc, #212]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a34      	ldr	r2, [pc, #208]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005318:	f7fd ffc4 	bl	80032a4 <HAL_GetTick>
 800531c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005320:	f7fd ffc0 	bl	80032a4 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	@ 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e38f      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005332:	4b2c      	ldr	r3, [pc, #176]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800533e:	4b28      	ldr	r3, [pc, #160]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005346:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d035      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	429a      	cmp	r2, r3
 800535a:	d02e      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800535c:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005364:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005366:	4b1e      	ldr	r3, [pc, #120]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005370:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005372:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005376:	4a1a      	ldr	r2, [pc, #104]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800537e:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005384:	4b16      	ldr	r3, [pc, #88]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d114      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fd ff88 	bl	80032a4 <HAL_GetTick>
 8005394:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005396:	e00a      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005398:	f7fd ff84 	bl	80032a4 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e351      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ae:	4b0c      	ldr	r3, [pc, #48]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0ee      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053c6:	d111      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053d4:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053d6:	400b      	ands	r3, r1
 80053d8:	4901      	ldr	r1, [pc, #4]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
 80053de:	e00b      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40007000 	.word	0x40007000
 80053e8:	0ffffcff 	.word	0x0ffffcff
 80053ec:	4bac      	ldr	r3, [pc, #688]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4aab      	ldr	r2, [pc, #684]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80053f6:	6093      	str	r3, [r2, #8]
 80053f8:	4ba9      	ldr	r3, [pc, #676]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005404:	49a6      	ldr	r1, [pc, #664]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005406:	4313      	orrs	r3, r2
 8005408:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005416:	4ba2      	ldr	r3, [pc, #648]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800541c:	4aa0      	ldr	r2, [pc, #640]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800541e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005422:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005426:	4b9e      	ldr	r3, [pc, #632]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005428:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	499b      	ldr	r1, [pc, #620]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005444:	4b96      	ldr	r3, [pc, #600]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005452:	4993      	ldr	r1, [pc, #588]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005466:	4b8e      	ldr	r3, [pc, #568]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005474:	498a      	ldr	r1, [pc, #552]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005488:	4b85      	ldr	r3, [pc, #532]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005496:	4982      	ldr	r1, [pc, #520]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054aa:	4b7d      	ldr	r3, [pc, #500]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b8:	4979      	ldr	r1, [pc, #484]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054cc:	4b74      	ldr	r3, [pc, #464]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d2:	f023 0203 	bic.w	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	4971      	ldr	r1, [pc, #452]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054ee:	4b6c      	ldr	r3, [pc, #432]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f4:	f023 020c 	bic.w	r2, r3, #12
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fc:	4968      	ldr	r1, [pc, #416]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005510:	4b63      	ldr	r3, [pc, #396]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005516:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551e:	4960      	ldr	r1, [pc, #384]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005532:	4b5b      	ldr	r3, [pc, #364]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005538:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005540:	4957      	ldr	r1, [pc, #348]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005554:	4b52      	ldr	r3, [pc, #328]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005562:	494f      	ldr	r1, [pc, #316]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005576:	4b4a      	ldr	r3, [pc, #296]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005584:	4946      	ldr	r1, [pc, #280]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005598:	4b41      	ldr	r3, [pc, #260]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a6:	493e      	ldr	r1, [pc, #248]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055ba:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c8:	4935      	ldr	r1, [pc, #212]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055dc:	4b30      	ldr	r3, [pc, #192]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055ea:	492d      	ldr	r1, [pc, #180]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055fe:	4b28      	ldr	r3, [pc, #160]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005604:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800560c:	4924      	ldr	r1, [pc, #144]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800561c:	d101      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800562e:	2301      	movs	r3, #1
 8005630:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800563e:	4b18      	ldr	r3, [pc, #96]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564c:	4914      	ldr	r1, [pc, #80]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005660:	4b0f      	ldr	r3, [pc, #60]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005670:	490b      	ldr	r1, [pc, #44]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00f      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005684:	4b06      	ldr	r3, [pc, #24]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005694:	4902      	ldr	r1, [pc, #8]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056b0:	4b8a      	ldr	r3, [pc, #552]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	4986      	ldr	r1, [pc, #536]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056d4:	4b81      	ldr	r3, [pc, #516]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056e4:	497d      	ldr	r1, [pc, #500]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d006      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80d6 	beq.w	80058ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005700:	4b76      	ldr	r3, [pc, #472]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a75      	ldr	r2, [pc, #468]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800570a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570c:	f7fd fdca 	bl	80032a4 <HAL_GetTick>
 8005710:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005714:	f7fd fdc6 	bl	80032a4 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	@ 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e195      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005726:	4b6d      	ldr	r3, [pc, #436]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d021      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11d      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005746:	4b65      	ldr	r3, [pc, #404]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005754:	4b61      	ldr	r3, [pc, #388]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575a:	0e1b      	lsrs	r3, r3, #24
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	019a      	lsls	r2, r3, #6
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	041b      	lsls	r3, r3, #16
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	061b      	lsls	r3, r3, #24
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	071b      	lsls	r3, r3, #28
 800577a:	4958      	ldr	r1, [pc, #352]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057ac:	d129      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057ae:	4b4b      	ldr	r3, [pc, #300]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057bc:	4b47      	ldr	r3, [pc, #284]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c2:	0f1b      	lsrs	r3, r3, #28
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	019a      	lsls	r2, r3, #6
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	061b      	lsls	r3, r3, #24
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	071b      	lsls	r3, r3, #28
 80057e2:	493e      	ldr	r1, [pc, #248]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057ea:	4b3c      	ldr	r3, [pc, #240]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057f0:	f023 021f 	bic.w	r2, r3, #31
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	3b01      	subs	r3, #1
 80057fa:	4938      	ldr	r1, [pc, #224]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01d      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800580e:	4b33      	ldr	r3, [pc, #204]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005814:	0e1b      	lsrs	r3, r3, #24
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800581c:	4b2f      	ldr	r3, [pc, #188]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005822:	0f1b      	lsrs	r3, r3, #28
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	019a      	lsls	r2, r3, #6
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	431a      	orrs	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	071b      	lsls	r3, r3, #28
 8005842:	4926      	ldr	r1, [pc, #152]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d011      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	019a      	lsls	r2, r3, #6
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	041b      	lsls	r3, r3, #16
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	061b      	lsls	r3, r3, #24
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	071b      	lsls	r3, r3, #28
 8005872:	491a      	ldr	r1, [pc, #104]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800587a:	4b18      	ldr	r3, [pc, #96]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a17      	ldr	r2, [pc, #92]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005880:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005886:	f7fd fd0d 	bl	80032a4 <HAL_GetTick>
 800588a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800588e:	f7fd fd09 	bl	80032a4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b64      	cmp	r3, #100	@ 0x64
 800589a:	d901      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e0d8      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058a0:	4b0e      	ldr	r3, [pc, #56]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	f040 80ce 	bne.w	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058b4:	4b09      	ldr	r3, [pc, #36]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a08      	ldr	r2, [pc, #32]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c0:	f7fd fcf0 	bl	80032a4 <HAL_GetTick>
 80058c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058c6:	e00b      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058c8:	f7fd fcec 	bl	80032a4 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	@ 0x64
 80058d4:	d904      	bls.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0bb      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058e0:	4b5e      	ldr	r3, [pc, #376]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ec:	d0ec      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02e      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d12a      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005916:	4b51      	ldr	r3, [pc, #324]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005924:	4b4d      	ldr	r3, [pc, #308]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592a:	0f1b      	lsrs	r3, r3, #28
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	019a      	lsls	r2, r3, #6
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	061b      	lsls	r3, r3, #24
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	071b      	lsls	r3, r3, #28
 800594a:	4944      	ldr	r1, [pc, #272]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005952:	4b42      	ldr	r3, [pc, #264]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005958:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	3b01      	subs	r3, #1
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	493d      	ldr	r1, [pc, #244]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d022      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005980:	d11d      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005982:	4b36      	ldr	r3, [pc, #216]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	0e1b      	lsrs	r3, r3, #24
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005990:	4b32      	ldr	r3, [pc, #200]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005996:	0f1b      	lsrs	r3, r3, #28
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	019a      	lsls	r2, r3, #6
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	431a      	orrs	r2, r3
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	061b      	lsls	r3, r3, #24
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	071b      	lsls	r3, r3, #28
 80059b6:	4929      	ldr	r1, [pc, #164]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d028      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059ca:	4b24      	ldr	r3, [pc, #144]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d0:	0e1b      	lsrs	r3, r3, #24
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059d8:	4b20      	ldr	r3, [pc, #128]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059de:	0c1b      	lsrs	r3, r3, #16
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	019a      	lsls	r2, r3, #6
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	431a      	orrs	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	071b      	lsls	r3, r3, #28
 80059fe:	4917      	ldr	r1, [pc, #92]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a06:	4b15      	ldr	r3, [pc, #84]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	4911      	ldr	r1, [pc, #68]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0e      	ldr	r2, [pc, #56]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a28:	f7fd fc3c 	bl	80032a4 <HAL_GetTick>
 8005a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a30:	f7fd fc38 	bl	80032a4 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b64      	cmp	r3, #100	@ 0x64
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e007      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a42:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a4e:	d1ef      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3720      	adds	r7, #32
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023800 	.word	0x40023800

08005a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e049      	b.n	8005b06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fd f80e 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f000 fa24 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d001      	beq.n	8005b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e054      	b.n	8005bd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a26      	ldr	r2, [pc, #152]	@ (8005be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d022      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x80>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b52:	d01d      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x80>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a22      	ldr	r2, [pc, #136]	@ (8005be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d018      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x80>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a21      	ldr	r2, [pc, #132]	@ (8005be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bec <HAL_TIM_Base_Start_IT+0xdc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00e      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x80>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d115      	bne.n	8005bbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	4b19      	ldr	r3, [pc, #100]	@ (8005bfc <HAL_TIM_Base_Start_IT+0xec>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b06      	cmp	r3, #6
 8005ba0:	d015      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0xbe>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ba8:	d011      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0201 	orr.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bba:	e008      	b.n	8005bce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e000      	b.n	8005bd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40001800 	.word	0x40001800
 8005bfc:	00010007 	.word	0x00010007

08005c00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10f      	bne.n	8005c48 <HAL_TIM_Base_Stop_IT+0x48>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d107      	bne.n	8005c48 <HAL_TIM_Base_Stop_IT+0x48>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d122      	bne.n	8005cba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d11b      	bne.n	8005cba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f06f 0202 	mvn.w	r2, #2
 8005c8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f905 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005ca6:	e005      	b.n	8005cb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f8f7 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f908 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d122      	bne.n	8005d0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f06f 0204 	mvn.w	r2, #4
 8005cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f8db 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005cfa:	e005      	b.n	8005d08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8cd 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f8de 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d122      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d11b      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0208 	mvn.w	r2, #8
 8005d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2204      	movs	r2, #4
 8005d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8b1 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f8a3 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8b4 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d122      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d11b      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0210 	mvn.w	r2, #16
 8005d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f887 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005da2:	e005      	b.n	8005db0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f879 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f88a 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10e      	bne.n	8005de2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d107      	bne.n	8005de2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0201 	mvn.w	r2, #1
 8005dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fc fc4f 	bl	8002680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dec:	2b80      	cmp	r3, #128	@ 0x80
 8005dee:	d10e      	bne.n	8005e0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d107      	bne.n	8005e0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9a7 	bl	800615c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e1c:	d10e      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e28:	2b80      	cmp	r3, #128	@ 0x80
 8005e2a:	d107      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f99a 	bl	8006170 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e46:	2b40      	cmp	r3, #64	@ 0x40
 8005e48:	d10e      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d107      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f838 	bl	8005ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d10e      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d107      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0220 	mvn.w	r2, #32
 8005e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f95a 	bl	8006148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a40      	ldr	r2, [pc, #256]	@ (8006000 <TIM_Base_SetConfig+0x114>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0a:	d00f      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8006004 <TIM_Base_SetConfig+0x118>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a3c      	ldr	r2, [pc, #240]	@ (8006008 <TIM_Base_SetConfig+0x11c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800600c <TIM_Base_SetConfig+0x120>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3a      	ldr	r2, [pc, #232]	@ (8006010 <TIM_Base_SetConfig+0x124>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d108      	bne.n	8005f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2f      	ldr	r2, [pc, #188]	@ (8006000 <TIM_Base_SetConfig+0x114>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d02b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4c:	d027      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2c      	ldr	r2, [pc, #176]	@ (8006004 <TIM_Base_SetConfig+0x118>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d023      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a2b      	ldr	r2, [pc, #172]	@ (8006008 <TIM_Base_SetConfig+0x11c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01f      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2a      	ldr	r2, [pc, #168]	@ (800600c <TIM_Base_SetConfig+0x120>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a29      	ldr	r2, [pc, #164]	@ (8006010 <TIM_Base_SetConfig+0x124>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d017      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a28      	ldr	r2, [pc, #160]	@ (8006014 <TIM_Base_SetConfig+0x128>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a27      	ldr	r2, [pc, #156]	@ (8006018 <TIM_Base_SetConfig+0x12c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00f      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a26      	ldr	r2, [pc, #152]	@ (800601c <TIM_Base_SetConfig+0x130>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a25      	ldr	r2, [pc, #148]	@ (8006020 <TIM_Base_SetConfig+0x134>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d007      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a24      	ldr	r2, [pc, #144]	@ (8006024 <TIM_Base_SetConfig+0x138>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a23      	ldr	r2, [pc, #140]	@ (8006028 <TIM_Base_SetConfig+0x13c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d108      	bne.n	8005fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8006000 <TIM_Base_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0xf8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a0c      	ldr	r2, [pc, #48]	@ (8006010 <TIM_Base_SetConfig+0x124>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d103      	bne.n	8005fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	615a      	str	r2, [r3, #20]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40010400 	.word	0x40010400
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800
 8006020:	40001800 	.word	0x40001800
 8006024:	40001c00 	.word	0x40001c00
 8006028:	40002000 	.word	0x40002000

0800602c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006040:	2302      	movs	r3, #2
 8006042:	e06d      	b.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a30      	ldr	r2, [pc, #192]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2f      	ldr	r2, [pc, #188]	@ (8006130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d108      	bne.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800607e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a20      	ldr	r2, [pc, #128]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b6:	d01d      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1a      	ldr	r2, [pc, #104]	@ (800613c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a15      	ldr	r2, [pc, #84]	@ (8006130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a16      	ldr	r2, [pc, #88]	@ (8006140 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a15      	ldr	r2, [pc, #84]	@ (8006144 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10c      	bne.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40010000 	.word	0x40010000
 8006130:	40010400 	.word	0x40010400
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40014000 	.word	0x40014000
 8006144:	40001800 	.word	0x40001800

08006148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e040      	b.n	8006218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fc fcc0 	bl	8002b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2224      	movs	r2, #36	@ 0x24
 80061b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fce4 	bl	8006b90 <UART_SetConfig>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e022      	b.n	8006218 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 ff3c 	bl	8007058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 ffc3 	bl	800719c <UART_CheckIdleState>
 8006216:	4603      	mov	r3, r0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	@ 0x28
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006234:	2b20      	cmp	r3, #32
 8006236:	d171      	bne.n	800631c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_UART_Transmit+0x24>
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e06a      	b.n	800631e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2221      	movs	r2, #33	@ 0x21
 8006254:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006256:	f7fd f825 	bl	80032a4 <HAL_GetTick>
 800625a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	88fa      	ldrh	r2, [r7, #6]
 8006260:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006274:	d108      	bne.n	8006288 <HAL_UART_Transmit+0x68>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d104      	bne.n	8006288 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	e003      	b.n	8006290 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006290:	e02c      	b.n	80062ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	2180      	movs	r1, #128	@ 0x80
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 ffca 	bl	8007236 <UART_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e038      	b.n	800631e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	3302      	adds	r3, #2
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	e007      	b.n	80062da <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3301      	adds	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1cc      	bne.n	8006292 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	2140      	movs	r1, #64	@ 0x40
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 ff97 	bl	8007236 <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e005      	b.n	800631e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b08a      	sub	sp, #40	@ 0x28
 800632a:	af02      	add	r7, sp, #8
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800633c:	2b20      	cmp	r3, #32
 800633e:	f040 80b1 	bne.w	80064a4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_UART_Receive+0x28>
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e0a9      	b.n	80064a6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2222      	movs	r2, #34	@ 0x22
 800635e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006368:	f7fc ff9c 	bl	80032a4 <HAL_GetTick>
 800636c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	88fa      	ldrh	r2, [r7, #6]
 8006372:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006386:	d10e      	bne.n	80063a6 <HAL_UART_Receive+0x80>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <HAL_UART_Receive+0x76>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006396:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800639a:	e02d      	b.n	80063f8 <HAL_UART_Receive+0xd2>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	22ff      	movs	r2, #255	@ 0xff
 80063a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063a4:	e028      	b.n	80063f8 <HAL_UART_Receive+0xd2>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10d      	bne.n	80063ca <HAL_UART_Receive+0xa4>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <HAL_UART_Receive+0x9a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	22ff      	movs	r2, #255	@ 0xff
 80063ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063be:	e01b      	b.n	80063f8 <HAL_UART_Receive+0xd2>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	227f      	movs	r2, #127	@ 0x7f
 80063c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063c8:	e016      	b.n	80063f8 <HAL_UART_Receive+0xd2>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063d2:	d10d      	bne.n	80063f0 <HAL_UART_Receive+0xca>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_UART_Receive+0xc0>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	227f      	movs	r2, #127	@ 0x7f
 80063e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063e4:	e008      	b.n	80063f8 <HAL_UART_Receive+0xd2>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	223f      	movs	r2, #63	@ 0x3f
 80063ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063ee:	e003      	b.n	80063f8 <HAL_UART_Receive+0xd2>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006408:	d108      	bne.n	800641c <HAL_UART_Receive+0xf6>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	e003      	b.n	8006424 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006424:	e032      	b.n	800648c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	2120      	movs	r1, #32
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 ff00 	bl	8007236 <UART_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e032      	b.n	80064a6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10c      	bne.n	8006460 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	b29a      	uxth	r2, r3
 800644e:	8a7b      	ldrh	r3, [r7, #18]
 8006450:	4013      	ands	r3, r2
 8006452:	b29a      	uxth	r2, r3
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	3302      	adds	r3, #2
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	e00c      	b.n	800647a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	b2da      	uxtb	r2, r3
 8006468:	8a7b      	ldrh	r3, [r7, #18]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4013      	ands	r3, r2
 800646e:	b2da      	uxtb	r2, r3
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	3301      	adds	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1c6      	bne.n	8006426 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e000      	b.n	80064a6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
  }
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b08b      	sub	sp, #44	@ 0x2c
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d147      	bne.n	8006556 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_Transmit_IT+0x22>
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e040      	b.n	8006558 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	88fa      	ldrh	r2, [r7, #6]
 80064e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	88fa      	ldrh	r2, [r7, #6]
 80064e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2221      	movs	r2, #33	@ 0x21
 80064fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006508:	d107      	bne.n	800651a <HAL_UART_Transmit_IT+0x6a>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4a13      	ldr	r2, [pc, #76]	@ (8006564 <HAL_UART_Transmit_IT+0xb4>)
 8006516:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006518:	e002      	b.n	8006520 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a12      	ldr	r2, [pc, #72]	@ (8006568 <HAL_UART_Transmit_IT+0xb8>)
 800651e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	613b      	str	r3, [r7, #16]
   return(result);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	623b      	str	r3, [r7, #32]
 8006540:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	69f9      	ldr	r1, [r7, #28]
 8006544:	6a3a      	ldr	r2, [r7, #32]
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	61bb      	str	r3, [r7, #24]
   return(result);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e6      	bne.n	8006520 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	372c      	adds	r7, #44	@ 0x2c
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	0800756d 	.word	0x0800756d
 8006568:	080074b7 	.word	0x080074b7

0800656c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b0ba      	sub	sp, #232	@ 0xe8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006596:	f640 030f 	movw	r3, #2063	@ 0x80f
 800659a:	4013      	ands	r3, r2
 800659c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d115      	bne.n	80065d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00f      	beq.n	80065d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 82ac 	beq.w	8006b22 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
      }
      return;
 80065d2:	e2a6      	b.n	8006b22 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8117 	beq.w	800680c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065ee:	4b85      	ldr	r3, [pc, #532]	@ (8006804 <HAL_UART_IRQHandler+0x298>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 810a 	beq.w	800680c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d011      	beq.n	8006628 <HAL_UART_IRQHandler+0xbc>
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2201      	movs	r2, #1
 8006616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d011      	beq.n	8006658 <HAL_UART_IRQHandler+0xec>
 8006634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2202      	movs	r2, #2
 8006646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800664e:	f043 0204 	orr.w	r2, r3, #4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_UART_IRQHandler+0x11c>
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2204      	movs	r2, #4
 8006676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800667e:	f043 0202 	orr.w	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2208      	movs	r2, #8
 80066b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ba:	f043 0208 	orr.w	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d012      	beq.n	80066f6 <HAL_UART_IRQHandler+0x18a>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8212 	beq.w	8006b26 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00d      	beq.n	800672a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006730:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673e:	2b40      	cmp	r3, #64	@ 0x40
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006746:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800674a:	2b00      	cmp	r3, #0
 800674c:	d04f      	beq.n	80067ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fe37 	bl	80073c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d141      	bne.n	80067e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800677c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800678e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800679a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1d9      	bne.n	8006762 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d013      	beq.n	80067de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ba:	4a13      	ldr	r2, [pc, #76]	@ (8006808 <HAL_UART_IRQHandler+0x29c>)
 80067bc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fc74 	bl	80040b0 <HAL_DMA_Abort_IT>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d017      	beq.n	80067fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	e00f      	b.n	80067fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9b6 	bl	8006b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e4:	e00b      	b.n	80067fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9b2 	bl	8006b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	e007      	b.n	80067fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f9ae 	bl	8006b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80067fc:	e193      	b.n	8006b26 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fe:	bf00      	nop
    return;
 8006800:	e191      	b.n	8006b26 <HAL_UART_IRQHandler+0x5ba>
 8006802:	bf00      	nop
 8006804:	04000120 	.word	0x04000120
 8006808:	0800748b 	.word	0x0800748b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006810:	2b01      	cmp	r3, #1
 8006812:	f040 814c 	bne.w	8006aae <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8145 	beq.w	8006aae <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 813e 	beq.w	8006aae <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2210      	movs	r2, #16
 8006838:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006844:	2b40      	cmp	r3, #64	@ 0x40
 8006846:	f040 80b6 	bne.w	80069b6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006856:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8165 	beq.w	8006b2a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800686a:	429a      	cmp	r2, r3
 800686c:	f080 815d 	bcs.w	8006b2a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006876:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006884:	f000 8086 	beq.w	8006994 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800689c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1da      	bne.n	8006888 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e1      	bne.n	80068d2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800691e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006932:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006934:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006938:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e3      	bne.n	800690e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006964:	f023 0310 	bic.w	r3, r3, #16
 8006968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006976:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006978:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800697c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e4      	bne.n	8006954 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800698e:	4618      	mov	r0, r3
 8006990:	f7fd fb1e 	bl	8003fd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f8d8 	bl	8006b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069b4:	e0b9      	b.n	8006b2a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80ab 	beq.w	8006b2e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80069d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80a6 	beq.w	8006b2e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e4      	bne.n	80069e2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	623b      	str	r3, [r7, #32]
   return(result);
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e3      	bne.n	8006a18 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f023 0310 	bic.w	r3, r3, #16
 8006a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	69b9      	ldr	r1, [r7, #24]
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	617b      	str	r3, [r7, #20]
   return(result);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e4      	bne.n	8006a64 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f85c 	bl	8006b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aac:	e03f      	b.n	8006b2e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x56c>
 8006aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f853 	bl	8006b7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ad6:	e02d      	b.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00e      	beq.n	8006b02 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01c      	beq.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
    }
    return;
 8006b00:	e017      	b.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d012      	beq.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
 8006b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00c      	beq.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fd86 	bl	800762c <UART_EndTransmit_IT>
    return;
 8006b20:	e008      	b.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006b22:	bf00      	nop
 8006b24:	e006      	b.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006b26:	bf00      	nop
 8006b28:	e004      	b.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006b2a:	bf00      	nop
 8006b2c:	e002      	b.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006b2e:	bf00      	nop
 8006b30:	e000      	b.n	8006b34 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006b32:	bf00      	nop
  }

}
 8006b34:	37e8      	adds	r7, #232	@ 0xe8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop

08006b3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4ba6      	ldr	r3, [pc, #664]	@ (8006e54 <UART_SetConfig+0x2c4>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a94      	ldr	r2, [pc, #592]	@ (8006e58 <UART_SetConfig+0x2c8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d120      	bne.n	8006c4e <UART_SetConfig+0xbe>
 8006c0c:	4b93      	ldr	r3, [pc, #588]	@ (8006e5c <UART_SetConfig+0x2cc>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d816      	bhi.n	8006c48 <UART_SetConfig+0xb8>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <UART_SetConfig+0x90>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006c3d 	.word	0x08006c3d
 8006c28:	08006c37 	.word	0x08006c37
 8006c2c:	08006c43 	.word	0x08006c43
 8006c30:	2301      	movs	r3, #1
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e150      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c36:	2302      	movs	r3, #2
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e14d      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e14a      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c42:	2308      	movs	r3, #8
 8006c44:	77fb      	strb	r3, [r7, #31]
 8006c46:	e147      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e144      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a83      	ldr	r2, [pc, #524]	@ (8006e60 <UART_SetConfig+0x2d0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d132      	bne.n	8006cbe <UART_SetConfig+0x12e>
 8006c58:	4b80      	ldr	r3, [pc, #512]	@ (8006e5c <UART_SetConfig+0x2cc>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5e:	f003 030c 	and.w	r3, r3, #12
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d828      	bhi.n	8006cb8 <UART_SetConfig+0x128>
 8006c66:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <UART_SetConfig+0xdc>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006cb9 	.word	0x08006cb9
 8006c74:	08006cb9 	.word	0x08006cb9
 8006c78:	08006cb9 	.word	0x08006cb9
 8006c7c:	08006cad 	.word	0x08006cad
 8006c80:	08006cb9 	.word	0x08006cb9
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006cb9 	.word	0x08006cb9
 8006c8c:	08006ca7 	.word	0x08006ca7
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cb9 	.word	0x08006cb9
 8006c9c:	08006cb3 	.word	0x08006cb3
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e118      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e115      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cac:	2304      	movs	r3, #4
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e112      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e10f      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e10c      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a68      	ldr	r2, [pc, #416]	@ (8006e64 <UART_SetConfig+0x2d4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d120      	bne.n	8006d0a <UART_SetConfig+0x17a>
 8006cc8:	4b64      	ldr	r3, [pc, #400]	@ (8006e5c <UART_SetConfig+0x2cc>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cd2:	2b30      	cmp	r3, #48	@ 0x30
 8006cd4:	d013      	beq.n	8006cfe <UART_SetConfig+0x16e>
 8006cd6:	2b30      	cmp	r3, #48	@ 0x30
 8006cd8:	d814      	bhi.n	8006d04 <UART_SetConfig+0x174>
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d009      	beq.n	8006cf2 <UART_SetConfig+0x162>
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d810      	bhi.n	8006d04 <UART_SetConfig+0x174>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <UART_SetConfig+0x15c>
 8006ce6:	2b10      	cmp	r3, #16
 8006ce8:	d006      	beq.n	8006cf8 <UART_SetConfig+0x168>
 8006cea:	e00b      	b.n	8006d04 <UART_SetConfig+0x174>
 8006cec:	2300      	movs	r3, #0
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e0f2      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e0ef      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e0ec      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cfe:	2308      	movs	r3, #8
 8006d00:	77fb      	strb	r3, [r7, #31]
 8006d02:	e0e9      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d04:	2310      	movs	r3, #16
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e0e6      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a56      	ldr	r2, [pc, #344]	@ (8006e68 <UART_SetConfig+0x2d8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d120      	bne.n	8006d56 <UART_SetConfig+0x1c6>
 8006d14:	4b51      	ldr	r3, [pc, #324]	@ (8006e5c <UART_SetConfig+0x2cc>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d20:	d013      	beq.n	8006d4a <UART_SetConfig+0x1ba>
 8006d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d24:	d814      	bhi.n	8006d50 <UART_SetConfig+0x1c0>
 8006d26:	2b80      	cmp	r3, #128	@ 0x80
 8006d28:	d009      	beq.n	8006d3e <UART_SetConfig+0x1ae>
 8006d2a:	2b80      	cmp	r3, #128	@ 0x80
 8006d2c:	d810      	bhi.n	8006d50 <UART_SetConfig+0x1c0>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <UART_SetConfig+0x1a8>
 8006d32:	2b40      	cmp	r3, #64	@ 0x40
 8006d34:	d006      	beq.n	8006d44 <UART_SetConfig+0x1b4>
 8006d36:	e00b      	b.n	8006d50 <UART_SetConfig+0x1c0>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e0cc      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e0c9      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d44:	2304      	movs	r3, #4
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e0c6      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e0c3      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d50:	2310      	movs	r3, #16
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e0c0      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a44      	ldr	r2, [pc, #272]	@ (8006e6c <UART_SetConfig+0x2dc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d125      	bne.n	8006dac <UART_SetConfig+0x21c>
 8006d60:	4b3e      	ldr	r3, [pc, #248]	@ (8006e5c <UART_SetConfig+0x2cc>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d6e:	d017      	beq.n	8006da0 <UART_SetConfig+0x210>
 8006d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d74:	d817      	bhi.n	8006da6 <UART_SetConfig+0x216>
 8006d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d7a:	d00b      	beq.n	8006d94 <UART_SetConfig+0x204>
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d80:	d811      	bhi.n	8006da6 <UART_SetConfig+0x216>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <UART_SetConfig+0x1fe>
 8006d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d8a:	d006      	beq.n	8006d9a <UART_SetConfig+0x20a>
 8006d8c:	e00b      	b.n	8006da6 <UART_SetConfig+0x216>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e0a1      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d94:	2302      	movs	r3, #2
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e09e      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d9a:	2304      	movs	r3, #4
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e09b      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006da0:	2308      	movs	r3, #8
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e098      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006da6:	2310      	movs	r3, #16
 8006da8:	77fb      	strb	r3, [r7, #31]
 8006daa:	e095      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2f      	ldr	r2, [pc, #188]	@ (8006e70 <UART_SetConfig+0x2e0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d125      	bne.n	8006e02 <UART_SetConfig+0x272>
 8006db6:	4b29      	ldr	r3, [pc, #164]	@ (8006e5c <UART_SetConfig+0x2cc>)
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006dc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dc4:	d017      	beq.n	8006df6 <UART_SetConfig+0x266>
 8006dc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dca:	d817      	bhi.n	8006dfc <UART_SetConfig+0x26c>
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd0:	d00b      	beq.n	8006dea <UART_SetConfig+0x25a>
 8006dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd6:	d811      	bhi.n	8006dfc <UART_SetConfig+0x26c>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <UART_SetConfig+0x254>
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d006      	beq.n	8006df0 <UART_SetConfig+0x260>
 8006de2:	e00b      	b.n	8006dfc <UART_SetConfig+0x26c>
 8006de4:	2301      	movs	r3, #1
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e076      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006dea:	2302      	movs	r3, #2
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	e073      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006df0:	2304      	movs	r3, #4
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e070      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006df6:	2308      	movs	r3, #8
 8006df8:	77fb      	strb	r3, [r7, #31]
 8006dfa:	e06d      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e06a      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1b      	ldr	r2, [pc, #108]	@ (8006e74 <UART_SetConfig+0x2e4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d138      	bne.n	8006e7e <UART_SetConfig+0x2ee>
 8006e0c:	4b13      	ldr	r3, [pc, #76]	@ (8006e5c <UART_SetConfig+0x2cc>)
 8006e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e1a:	d017      	beq.n	8006e4c <UART_SetConfig+0x2bc>
 8006e1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e20:	d82a      	bhi.n	8006e78 <UART_SetConfig+0x2e8>
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e26:	d00b      	beq.n	8006e40 <UART_SetConfig+0x2b0>
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2c:	d824      	bhi.n	8006e78 <UART_SetConfig+0x2e8>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <UART_SetConfig+0x2aa>
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e36:	d006      	beq.n	8006e46 <UART_SetConfig+0x2b6>
 8006e38:	e01e      	b.n	8006e78 <UART_SetConfig+0x2e8>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e04b      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e40:	2302      	movs	r3, #2
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e048      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e46:	2304      	movs	r3, #4
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e045      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e042      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e52:	bf00      	nop
 8006e54:	efff69f3 	.word	0xefff69f3
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40004400 	.word	0x40004400
 8006e64:	40004800 	.word	0x40004800
 8006e68:	40004c00 	.word	0x40004c00
 8006e6c:	40005000 	.word	0x40005000
 8006e70:	40011400 	.word	0x40011400
 8006e74:	40007800 	.word	0x40007800
 8006e78:	2310      	movs	r3, #16
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e02c      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a72      	ldr	r2, [pc, #456]	@ (800704c <UART_SetConfig+0x4bc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d125      	bne.n	8006ed4 <UART_SetConfig+0x344>
 8006e88:	4b71      	ldr	r3, [pc, #452]	@ (8007050 <UART_SetConfig+0x4c0>)
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006e92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e96:	d017      	beq.n	8006ec8 <UART_SetConfig+0x338>
 8006e98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e9c:	d817      	bhi.n	8006ece <UART_SetConfig+0x33e>
 8006e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea2:	d00b      	beq.n	8006ebc <UART_SetConfig+0x32c>
 8006ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea8:	d811      	bhi.n	8006ece <UART_SetConfig+0x33e>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <UART_SetConfig+0x326>
 8006eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eb2:	d006      	beq.n	8006ec2 <UART_SetConfig+0x332>
 8006eb4:	e00b      	b.n	8006ece <UART_SetConfig+0x33e>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e00d      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e00a      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ec2:	2304      	movs	r3, #4
 8006ec4:	77fb      	strb	r3, [r7, #31]
 8006ec6:	e007      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e004      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ece:	2310      	movs	r3, #16
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e001      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee0:	d15b      	bne.n	8006f9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ee2:	7ffb      	ldrb	r3, [r7, #31]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d828      	bhi.n	8006f3a <UART_SetConfig+0x3aa>
 8006ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <UART_SetConfig+0x360>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	08006f3b 	.word	0x08006f3b
 8006f00:	08006f2b 	.word	0x08006f2b
 8006f04:	08006f3b 	.word	0x08006f3b
 8006f08:	08006f3b 	.word	0x08006f3b
 8006f0c:	08006f3b 	.word	0x08006f3b
 8006f10:	08006f33 	.word	0x08006f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fe f922 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 8006f18:	61b8      	str	r0, [r7, #24]
        break;
 8006f1a:	e013      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f1c:	f7fe f932 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 8006f20:	61b8      	str	r0, [r7, #24]
        break;
 8006f22:	e00f      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b4b      	ldr	r3, [pc, #300]	@ (8007054 <UART_SetConfig+0x4c4>)
 8006f26:	61bb      	str	r3, [r7, #24]
        break;
 8006f28:	e00c      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fe f805 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8006f2e:	61b8      	str	r0, [r7, #24]
        break;
 8006f30:	e008      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f36:	61bb      	str	r3, [r7, #24]
        break;
 8006f38:	e004      	b.n	8006f44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	77bb      	strb	r3, [r7, #30]
        break;
 8006f42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d074      	beq.n	8007034 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	005a      	lsls	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	441a      	add	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2b0f      	cmp	r3, #15
 8006f64:	d916      	bls.n	8006f94 <UART_SetConfig+0x404>
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6c:	d212      	bcs.n	8006f94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f023 030f 	bic.w	r3, r3, #15
 8006f76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	89fb      	ldrh	r3, [r7, #14]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	89fa      	ldrh	r2, [r7, #14]
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	e04f      	b.n	8007034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	77bb      	strb	r3, [r7, #30]
 8006f98:	e04c      	b.n	8007034 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f9a:	7ffb      	ldrb	r3, [r7, #31]
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d828      	bhi.n	8006ff2 <UART_SetConfig+0x462>
 8006fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <UART_SetConfig+0x418>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	08006ff3 	.word	0x08006ff3
 8006fb8:	08006fe3 	.word	0x08006fe3
 8006fbc:	08006ff3 	.word	0x08006ff3
 8006fc0:	08006ff3 	.word	0x08006ff3
 8006fc4:	08006ff3 	.word	0x08006ff3
 8006fc8:	08006feb 	.word	0x08006feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fcc:	f7fe f8c6 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 8006fd0:	61b8      	str	r0, [r7, #24]
        break;
 8006fd2:	e013      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd4:	f7fe f8d6 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 8006fd8:	61b8      	str	r0, [r7, #24]
        break;
 8006fda:	e00f      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007054 <UART_SetConfig+0x4c4>)
 8006fde:	61bb      	str	r3, [r7, #24]
        break;
 8006fe0:	e00c      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe2:	f7fd ffa9 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8006fe6:	61b8      	str	r0, [r7, #24]
        break;
 8006fe8:	e008      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fee:	61bb      	str	r3, [r7, #24]
        break;
 8006ff0:	e004      	b.n	8006ffc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8006ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d018      	beq.n	8007034 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	085a      	lsrs	r2, r3, #1
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	441a      	add	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b0f      	cmp	r3, #15
 800701a:	d909      	bls.n	8007030 <UART_SetConfig+0x4a0>
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007022:	d205      	bcs.n	8007030 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	e001      	b.n	8007034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007040:	7fbb      	ldrb	r3, [r7, #30]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40007c00 	.word	0x40007c00
 8007050:	40023800 	.word	0x40023800
 8007054:	00f42400 	.word	0x00f42400

08007058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01a      	beq.n	800716e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007156:	d10a      	bne.n	800716e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071ac:	f7fc f87a 	bl	80032a4 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d10e      	bne.n	80071de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f831 	bl	8007236 <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e027      	b.n	800722e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d10e      	bne.n	800720a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f81b 	bl	8007236 <UART_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e011      	b.n	800722e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b09c      	sub	sp, #112	@ 0x70
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007246:	e0a7      	b.n	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	f000 80a3 	beq.w	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007252:	f7fc f827 	bl	80032a4 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <UART_WaitOnFlagUntilTimeout+0x32>
 8007262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007264:	2b00      	cmp	r3, #0
 8007266:	d13f      	bne.n	80072e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007278:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800727c:	667b      	str	r3, [r7, #100]	@ 0x64
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007288:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800728c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80072ba:	64ba      	str	r2, [r7, #72]	@ 0x48
 80072bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e5      	bne.n	800729a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2220      	movs	r2, #32
 80072d2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e068      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d050      	beq.n	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007304:	d148      	bne.n	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800730e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007324:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e6      	bne.n	8007310 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	613b      	str	r3, [r7, #16]
   return(result);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007362:	623a      	str	r2, [r7, #32]
 8007364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	69f9      	ldr	r1, [r7, #28]
 8007368:	6a3a      	ldr	r2, [r7, #32]
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e010      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4013      	ands	r3, r2
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	bf0c      	ite	eq
 80073a8:	2301      	moveq	r3, #1
 80073aa:	2300      	movne	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	f43f af48 	beq.w	8007248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3770      	adds	r7, #112	@ 0x70
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b095      	sub	sp, #84	@ 0x54
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e6      	bne.n	80073ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3308      	adds	r3, #8
 8007402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	61fb      	str	r3, [r7, #28]
   return(result);
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	f023 0301 	bic.w	r3, r3, #1
 8007412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3308      	adds	r3, #8
 800741a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800741c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800741e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e5      	bne.n	80073fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007434:	2b01      	cmp	r3, #1
 8007436:	d118      	bne.n	800746a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	60bb      	str	r3, [r7, #8]
   return(result);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f023 0310 	bic.w	r3, r3, #16
 800744c:	647b      	str	r3, [r7, #68]	@ 0x44
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	613b      	str	r3, [r7, #16]
   return(result);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e6      	bne.n	8007438 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800747e:	bf00      	nop
 8007480:	3754      	adds	r7, #84	@ 0x54
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007496:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7ff fb51 	bl	8006b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b08f      	sub	sp, #60	@ 0x3c
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074c2:	2b21      	cmp	r3, #33	@ 0x21
 80074c4:	d14c      	bne.n	8007560 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d132      	bne.n	8007538 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e6      	bne.n	80074d2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	60bb      	str	r3, [r7, #8]
   return(result);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007518:	633b      	str	r3, [r7, #48]	@ 0x30
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6979      	ldr	r1, [r7, #20]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	613b      	str	r3, [r7, #16]
   return(result);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e6      	bne.n	8007504 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007536:	e013      	b.n	8007560 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007560:	bf00      	nop
 8007562:	373c      	adds	r7, #60	@ 0x3c
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b091      	sub	sp, #68	@ 0x44
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007578:	2b21      	cmp	r3, #33	@ 0x21
 800757a:	d151      	bne.n	8007620 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d132      	bne.n	80075ee <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	623b      	str	r3, [r7, #32]
   return(result);
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800759c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	69b9      	ldr	r1, [r7, #24]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	617b      	str	r3, [r7, #20]
   return(result);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e6      	bne.n	80075ba <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80075ec:	e018      	b.n	8007620 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80075f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007602:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007608:	1c9a      	adds	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007620:	bf00      	nop
 8007622:	3744      	adds	r7, #68	@ 0x44
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	60bb      	str	r3, [r7, #8]
   return(result);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6979      	ldr	r1, [r7, #20]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e6      	bne.n	8007634 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fa62 	bl	8006b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007678:	bf00      	nop
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007680:	b084      	sub	sp, #16
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	f107 001c 	add.w	r0, r7, #28
 800768e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	2b01      	cmp	r3, #1
 8007696:	d120      	bne.n	80076da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	4b20      	ldr	r3, [pc, #128]	@ (800772c <USB_CoreInit+0xac>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d105      	bne.n	80076ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa96 	bl	8007c00 <USB_CoreReset>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]
 80076d8:	e010      	b.n	80076fc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa8a 	bl	8007c00 <USB_CoreReset>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80076fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d10b      	bne.n	800771a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f043 0206 	orr.w	r2, r3, #6
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f043 0220 	orr.w	r2, r3, #32
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007726:	b004      	add	sp, #16
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	ffbdffbf 	.word	0xffbdffbf

08007730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f023 0201 	bic.w	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d115      	bne.n	80077a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007780:	2001      	movs	r0, #1
 8007782:	f7fb fd9b 	bl	80032bc <HAL_Delay>
      ms++;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fa29 	bl	8007be4 <USB_GetMode>
 8007792:	4603      	mov	r3, r0
 8007794:	2b01      	cmp	r3, #1
 8007796:	d01e      	beq.n	80077d6 <USB_SetCurrentMode+0x84>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b31      	cmp	r3, #49	@ 0x31
 800779c:	d9f0      	bls.n	8007780 <USB_SetCurrentMode+0x2e>
 800779e:	e01a      	b.n	80077d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d115      	bne.n	80077d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077b2:	2001      	movs	r0, #1
 80077b4:	f7fb fd82 	bl	80032bc <HAL_Delay>
      ms++;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa10 	bl	8007be4 <USB_GetMode>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <USB_SetCurrentMode+0x84>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b31      	cmp	r3, #49	@ 0x31
 80077ce:	d9f0      	bls.n	80077b2 <USB_SetCurrentMode+0x60>
 80077d0:	e001      	b.n	80077d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e005      	b.n	80077e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b32      	cmp	r3, #50	@ 0x32
 80077da:	d101      	bne.n	80077e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ec:	b084      	sub	sp, #16
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e009      	b.n	8007820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3340      	adds	r3, #64	@ 0x40
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	2200      	movs	r2, #0
 8007818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3301      	adds	r3, #1
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b0e      	cmp	r3, #14
 8007824:	d9f2      	bls.n	800780c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d11c      	bne.n	8007866 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800783a:	f043 0302 	orr.w	r3, r3, #2
 800783e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e005      	b.n	8007872 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007878:	461a      	mov	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007884:	4619      	mov	r1, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788c:	461a      	mov	r2, r3
 800788e:	680b      	ldr	r3, [r1, #0]
 8007890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10c      	bne.n	80078b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d104      	bne.n	80078a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800789e:	2100      	movs	r1, #0
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f965 	bl	8007b70 <USB_SetDevSpeed>
 80078a6:	e008      	b.n	80078ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078a8:	2101      	movs	r1, #1
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f960 	bl	8007b70 <USB_SetDevSpeed>
 80078b0:	e003      	b.n	80078ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078b2:	2103      	movs	r1, #3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f95b 	bl	8007b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078ba:	2110      	movs	r1, #16
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f8f3 	bl	8007aa8 <USB_FlushTxFifo>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f91f 	bl	8007b10 <USB_FlushRxFifo>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e2:	461a      	mov	r2, r3
 80078e4:	2300      	movs	r3, #0
 80078e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ee:	461a      	mov	r2, r3
 80078f0:	2300      	movs	r3, #0
 80078f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078fa:	461a      	mov	r2, r3
 80078fc:	2300      	movs	r3, #0
 80078fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007900:	2300      	movs	r3, #0
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	e043      	b.n	800798e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800791c:	d118      	bne.n	8007950 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007930:	461a      	mov	r2, r3
 8007932:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	e013      	b.n	8007962 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007946:	461a      	mov	r2, r3
 8007948:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	e008      	b.n	8007962 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795c:	461a      	mov	r2, r3
 800795e:	2300      	movs	r3, #0
 8007960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796e:	461a      	mov	r2, r3
 8007970:	2300      	movs	r3, #0
 8007972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	461a      	mov	r2, r3
 8007982:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	3301      	adds	r3, #1
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	429a      	cmp	r2, r3
 8007994:	d3b7      	bcc.n	8007906 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	e043      	b.n	8007a24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b2:	d118      	bne.n	80079e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c6:	461a      	mov	r2, r3
 80079c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	e013      	b.n	80079f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079dc:	461a      	mov	r2, r3
 80079de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	e008      	b.n	80079f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f2:	461a      	mov	r2, r3
 80079f4:	2300      	movs	r3, #0
 80079f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a04:	461a      	mov	r2, r3
 8007a06:	2300      	movs	r3, #0
 8007a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a16:	461a      	mov	r2, r3
 8007a18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3301      	adds	r3, #1
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d3b7      	bcc.n	800799c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d105      	bne.n	8007a60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	f043 0210 	orr.w	r2, r3, #16
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa0 <USB_DevInit+0x2b4>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f043 0208 	orr.w	r2, r3, #8
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d105      	bne.n	8007a90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699a      	ldr	r2, [r3, #24]
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <USB_DevInit+0x2b8>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a9c:	b004      	add	sp, #16
 8007a9e:	4770      	bx	lr
 8007aa0:	803c3800 	.word	0x803c3800
 8007aa4:	40000004 	.word	0x40000004

08007aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4a13      	ldr	r2, [pc, #76]	@ (8007b0c <USB_FlushTxFifo+0x64>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d901      	bls.n	8007ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e01b      	b.n	8007b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	daf2      	bge.n	8007ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	019b      	lsls	r3, r3, #6
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a08      	ldr	r2, [pc, #32]	@ (8007b0c <USB_FlushTxFifo+0x64>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d901      	bls.n	8007af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e006      	b.n	8007b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d0f0      	beq.n	8007ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	00030d40 	.word	0x00030d40

08007b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4a11      	ldr	r2, [pc, #68]	@ (8007b6c <USB_FlushRxFifo+0x5c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d901      	bls.n	8007b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e018      	b.n	8007b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	daf2      	bge.n	8007b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2210      	movs	r2, #16
 8007b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3301      	adds	r3, #1
 8007b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4a08      	ldr	r2, [pc, #32]	@ (8007b6c <USB_FlushRxFifo+0x5c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d901      	bls.n	8007b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e006      	b.n	8007b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	2b10      	cmp	r3, #16
 8007b5c:	d0f0      	beq.n	8007b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	00030d40 	.word	0x00030d40

08007b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	68f9      	ldr	r1, [r7, #12]
 8007b8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b90:	4313      	orrs	r3, r2
 8007b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bbc:	f023 0303 	bic.w	r3, r3, #3
 8007bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4a13      	ldr	r2, [pc, #76]	@ (8007c64 <USB_CoreReset+0x64>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e01b      	b.n	8007c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	daf2      	bge.n	8007c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f043 0201 	orr.w	r2, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a09      	ldr	r2, [pc, #36]	@ (8007c64 <USB_CoreReset+0x64>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d901      	bls.n	8007c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e006      	b.n	8007c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d0f0      	beq.n	8007c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	00030d40 	.word	0x00030d40

08007c68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007c6c:	bf00      	nop
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c7e:	f3ef 8305 	mrs	r3, IPSR
 8007c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10f      	bne.n	8007caa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8e:	607b      	str	r3, [r7, #4]
  return(result);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d105      	bne.n	8007ca2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c96:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <osKernelInitialize+0x3a>
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cdc <osKernelInitialize+0x64>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d103      	bne.n	8007cb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007caa:	f06f 0305 	mvn.w	r3, #5
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e00c      	b.n	8007ccc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cdc <osKernelInitialize+0x64>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cba:	4b08      	ldr	r3, [pc, #32]	@ (8007cdc <osKernelInitialize+0x64>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e002      	b.n	8007ccc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000ab4 	.word	0x20000ab4

08007ce0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ce6:	f3ef 8305 	mrs	r3, IPSR
 8007cea:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10f      	bne.n	8007d12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf6:	607b      	str	r3, [r7, #4]
  return(result);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d105      	bne.n	8007d0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8007d02:	603b      	str	r3, [r7, #0]
  return(result);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <osKernelStart+0x3a>
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d48 <osKernelStart+0x68>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d103      	bne.n	8007d1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007d12:	f06f 0305 	mvn.w	r3, #5
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	e010      	b.n	8007d3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <osKernelStart+0x68>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d109      	bne.n	8007d36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d22:	f7ff ffa1 	bl	8007c68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d26:	4b08      	ldr	r3, [pc, #32]	@ (8007d48 <osKernelStart+0x68>)
 8007d28:	2202      	movs	r2, #2
 8007d2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d2c:	f001 fa58 	bl	80091e0 <vTaskStartScheduler>
      stat = osOK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	e002      	b.n	8007d3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000ab4 	.word	0x20000ab4

08007d4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b090      	sub	sp, #64	@ 0x40
 8007d50:	af04      	add	r7, sp, #16
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d5c:	f3ef 8305 	mrs	r3, IPSR
 8007d60:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 808f 	bne.w	8007e88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d105      	bne.n	8007d82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d76:	f3ef 8311 	mrs	r3, BASEPRI
 8007d7a:	617b      	str	r3, [r7, #20]
  return(result);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <osThreadNew+0x3e>
 8007d82:	4b44      	ldr	r3, [pc, #272]	@ (8007e94 <osThreadNew+0x148>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d07e      	beq.n	8007e88 <osThreadNew+0x13c>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d07b      	beq.n	8007e88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007d90:	2380      	movs	r3, #128	@ 0x80
 8007d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007d94:	2318      	movs	r3, #24
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007da0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d045      	beq.n	8007e34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <osThreadNew+0x6a>
        name = attr->name;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <osThreadNew+0x90>
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	2b38      	cmp	r3, #56	@ 0x38
 8007dce:	d805      	bhi.n	8007ddc <osThreadNew+0x90>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <osThreadNew+0x94>
        return (NULL);
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e054      	b.n	8007e8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	089b      	lsrs	r3, r3, #2
 8007dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00e      	beq.n	8007e16 <osThreadNew+0xca>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2ba7      	cmp	r3, #167	@ 0xa7
 8007dfe:	d90a      	bls.n	8007e16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <osThreadNew+0xca>
        mem = 1;
 8007e10:	2301      	movs	r3, #1
 8007e12:	623b      	str	r3, [r7, #32]
 8007e14:	e010      	b.n	8007e38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <osThreadNew+0xec>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d108      	bne.n	8007e38 <osThreadNew+0xec>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <osThreadNew+0xec>
          mem = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	623b      	str	r3, [r7, #32]
 8007e32:	e001      	b.n	8007e38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d110      	bne.n	8007e60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e46:	9202      	str	r2, [sp, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 feb7 	bl	8008bc8 <xTaskCreateStatic>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	e013      	b.n	8007e88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d110      	bne.n	8007e88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	f107 0310 	add.w	r3, r7, #16
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 ff0b 	bl	8008c94 <xTaskCreate>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <osThreadNew+0x13c>
          hTask = NULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e88:	693b      	ldr	r3, [r7, #16]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3730      	adds	r7, #48	@ 0x30
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000ab4 	.word	0x20000ab4

08007e98 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ea4:	f3ef 8305 	mrs	r3, IPSR
 8007ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8007eaa:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb4:	613b      	str	r3, [r7, #16]
  return(result);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ec0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <osThreadSuspend+0x40>
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8007efc <osThreadSuspend+0x64>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d103      	bne.n	8007ed8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8007ed0:	f06f 0305 	mvn.w	r3, #5
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	e00b      	b.n	8007ef0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d103      	bne.n	8007ee6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8007ede:	f06f 0303 	mvn.w	r3, #3
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	e004      	b.n	8007ef0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8007eea:	69b8      	ldr	r0, [r7, #24]
 8007eec:	f001 f86a 	bl	8008fc4 <vTaskSuspend>
  }

  return (stat);
 8007ef0:	69fb      	ldr	r3, [r7, #28]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000ab4 	.word	0x20000ab4

08007f00 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f0c:	f3ef 8305 	mrs	r3, IPSR
 8007f10:	617b      	str	r3, [r7, #20]
  return(result);
 8007f12:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f18:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d105      	bne.n	8007f30 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f24:	f3ef 8311 	mrs	r3, BASEPRI
 8007f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <osThreadResume+0x40>
 8007f30:	4b0c      	ldr	r3, [pc, #48]	@ (8007f64 <osThreadResume+0x64>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d103      	bne.n	8007f40 <osThreadResume+0x40>
    stat = osErrorISR;
 8007f38:	f06f 0305 	mvn.w	r3, #5
 8007f3c:	61fb      	str	r3, [r7, #28]
 8007f3e:	e00b      	b.n	8007f58 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8007f46:	f06f 0303 	mvn.w	r3, #3
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	e004      	b.n	8007f58 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8007f52:	69b8      	ldr	r0, [r7, #24]
 8007f54:	f001 f8e2 	bl	800911c <vTaskResume>
  }

  return (stat);
 8007f58:	69fb      	ldr	r3, [r7, #28]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000ab4 	.word	0x20000ab4

08007f68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f70:	f3ef 8305 	mrs	r3, IPSR
 8007f74:	613b      	str	r3, [r7, #16]
  return(result);
 8007f76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10f      	bne.n	8007f9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d105      	bne.n	8007f94 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f88:	f3ef 8311 	mrs	r3, BASEPRI
 8007f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <osDelay+0x3c>
 8007f94:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc0 <osDelay+0x58>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d103      	bne.n	8007fa4 <osDelay+0x3c>
    stat = osErrorISR;
 8007f9c:	f06f 0305 	mvn.w	r3, #5
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e007      	b.n	8007fb4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 ffd0 	bl	8008f54 <vTaskDelay>
    }
  }

  return (stat);
 8007fb4:	697b      	ldr	r3, [r7, #20]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000ab4 	.word	0x20000ab4

08007fc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a07      	ldr	r2, [pc, #28]	@ (8007ff0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4a06      	ldr	r2, [pc, #24]	@ (8007ff4 <vApplicationGetIdleTaskMemory+0x30>)
 8007fda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2280      	movs	r2, #128	@ 0x80
 8007fe0:	601a      	str	r2, [r3, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000ab8 	.word	0x20000ab8
 8007ff4:	20000b60 	.word	0x20000b60

08007ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4a07      	ldr	r2, [pc, #28]	@ (8008024 <vApplicationGetTimerTaskMemory+0x2c>)
 8008008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	4a06      	ldr	r2, [pc, #24]	@ (8008028 <vApplicationGetTimerTaskMemory+0x30>)
 800800e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008016:	601a      	str	r2, [r3, #0]
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	20000d60 	.word	0x20000d60
 8008028:	20000e08 	.word	0x20000e08

0800802c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f103 0208 	add.w	r2, r3, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f04f 32ff 	mov.w	r2, #4294967295
 8008044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f103 0208 	add.w	r2, r3, #8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f103 0208 	add.w	r2, r3, #8
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	601a      	str	r2, [r3, #0]
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d103      	bne.n	80080ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e00c      	b.n	8008108 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3308      	adds	r3, #8
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e002      	b.n	80080fc <vListInsert+0x2e>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	429a      	cmp	r2, r3
 8008106:	d2f6      	bcs.n	80080f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	601a      	str	r2, [r3, #0]
}
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6892      	ldr	r2, [r2, #8]
 8008156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6852      	ldr	r2, [r2, #4]
 8008160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d103      	bne.n	8008174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689a      	ldr	r2, [r3, #8]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	1e5a      	subs	r2, r3, #1
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10d      	bne.n	80081c4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ac:	b672      	cpsid	i
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	b662      	cpsie	i
 80081bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80081c4:	f002 f9e2 	bl	800a58c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d0:	68f9      	ldr	r1, [r7, #12]
 80081d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	441a      	add	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f4:	3b01      	subs	r3, #1
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081fa:	fb01 f303 	mul.w	r3, r1, r3
 80081fe:	441a      	add	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	22ff      	movs	r2, #255	@ 0xff
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	22ff      	movs	r2, #255	@ 0xff
 8008210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d114      	bne.n	8008244 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01a      	beq.n	8008258 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3310      	adds	r3, #16
 8008226:	4618      	mov	r0, r3
 8008228:	f001 fa86 	bl	8009738 <xTaskRemoveFromEventList>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d012      	beq.n	8008258 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <xQueueGenericReset+0xd4>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	e009      	b.n	8008258 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3310      	adds	r3, #16
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff feef 	bl	800802c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3324      	adds	r3, #36	@ 0x24
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff feea 	bl	800802c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008258:	f002 f9ce 	bl	800a5f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800825c:	2301      	movs	r3, #1
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08e      	sub	sp, #56	@ 0x38
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10d      	bne.n	800829c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	b672      	cpsid	i
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	b662      	cpsie	i
 8008294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	e7fd      	b.n	8008298 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10d      	bne.n	80082be <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	b672      	cpsid	i
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	b662      	cpsie	i
 80082b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	e7fd      	b.n	80082ba <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <xQueueGenericCreateStatic+0x5e>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <xQueueGenericCreateStatic+0x62>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <xQueueGenericCreateStatic+0x64>
 80082ce:	2300      	movs	r3, #0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10d      	bne.n	80082f0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
 80082e8:	623b      	str	r3, [r7, #32]
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	e7fd      	b.n	80082ec <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d102      	bne.n	80082fc <xQueueGenericCreateStatic+0x90>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <xQueueGenericCreateStatic+0x94>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <xQueueGenericCreateStatic+0x96>
 8008300:	2300      	movs	r3, #0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10d      	bne.n	8008322 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830a:	b672      	cpsid	i
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	b662      	cpsie	i
 800831a:	61fb      	str	r3, [r7, #28]
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	e7fd      	b.n	800831e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008322:	2350      	movs	r3, #80	@ 0x50
 8008324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b50      	cmp	r3, #80	@ 0x50
 800832a:	d00d      	beq.n	8008348 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	b672      	cpsid	i
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	b662      	cpsie	i
 8008340:	61bb      	str	r3, [r7, #24]
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	e7fd      	b.n	8008344 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008348:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800834e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00d      	beq.n	8008370 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800835c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 f805 	bl	800837a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008372:	4618      	mov	r0, r3
 8008374:	3730      	adds	r7, #48	@ 0x30
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	e002      	b.n	800839c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083a8:	2101      	movs	r1, #1
 80083aa:	69b8      	ldr	r0, [r7, #24]
 80083ac:	f7ff fef2 	bl	8008194 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083b8:	bf00      	nop
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08e      	sub	sp, #56	@ 0x38
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ce:	2300      	movs	r3, #0
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10d      	bne.n	80083f8 <xQueueGenericSend+0x38>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e0:	b672      	cpsid	i
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	b662      	cpsie	i
 80083f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d103      	bne.n	8008406 <xQueueGenericSend+0x46>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <xQueueGenericSend+0x4a>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <xQueueGenericSend+0x4c>
 800840a:	2300      	movs	r3, #0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10d      	bne.n	800842c <xQueueGenericSend+0x6c>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	b672      	cpsid	i
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	b662      	cpsie	i
 8008424:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <xQueueGenericSend+0x7a>
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <xQueueGenericSend+0x7e>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <xQueueGenericSend+0x80>
 800843e:	2300      	movs	r3, #0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10d      	bne.n	8008460 <xQueueGenericSend+0xa0>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	b672      	cpsid	i
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	b662      	cpsie	i
 8008458:	623b      	str	r3, [r7, #32]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008460:	f001 fb38 	bl	8009ad4 <xTaskGetSchedulerState>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <xQueueGenericSend+0xb0>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <xQueueGenericSend+0xb4>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <xQueueGenericSend+0xb6>
 8008474:	2300      	movs	r3, #0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10d      	bne.n	8008496 <xQueueGenericSend+0xd6>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	b672      	cpsid	i
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	b662      	cpsie	i
 800848e:	61fb      	str	r3, [r7, #28]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008496:	f002 f879 	bl	800a58c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d302      	bcc.n	80084ac <xQueueGenericSend+0xec>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d129      	bne.n	8008500 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084b2:	f000 fa1b 	bl	80088ec <prvCopyDataToQueue>
 80084b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d010      	beq.n	80084e2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	3324      	adds	r3, #36	@ 0x24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 f937 	bl	8009738 <xTaskRemoveFromEventList>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d013      	beq.n	80084f8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084d0:	4b3f      	ldr	r3, [pc, #252]	@ (80085d0 <xQueueGenericSend+0x210>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	e00a      	b.n	80084f8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084e8:	4b39      	ldr	r3, [pc, #228]	@ (80085d0 <xQueueGenericSend+0x210>)
 80084ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084f8:	f002 f87e 	bl	800a5f8 <vPortExitCritical>
				return pdPASS;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e063      	b.n	80085c8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008506:	f002 f877 	bl	800a5f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800850a:	2300      	movs	r3, #0
 800850c:	e05c      	b.n	80085c8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008510:	2b00      	cmp	r3, #0
 8008512:	d106      	bne.n	8008522 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008514:	f107 0314 	add.w	r3, r7, #20
 8008518:	4618      	mov	r0, r3
 800851a:	f001 f973 	bl	8009804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851e:	2301      	movs	r3, #1
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008522:	f002 f869 	bl	800a5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008526:	f000 fecf 	bl	80092c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800852a:	f002 f82f 	bl	800a58c <vPortEnterCritical>
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008534:	b25b      	sxtb	r3, r3
 8008536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853a:	d103      	bne.n	8008544 <xQueueGenericSend+0x184>
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800854a:	b25b      	sxtb	r3, r3
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d103      	bne.n	800855a <xQueueGenericSend+0x19a>
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800855a:	f002 f84d 	bl	800a5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855e:	1d3a      	adds	r2, r7, #4
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f001 f962 	bl	8009830 <xTaskCheckForTimeOut>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d124      	bne.n	80085bc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008574:	f000 fab2 	bl	8008adc <prvIsQueueFull>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d018      	beq.n	80085b0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	3310      	adds	r3, #16
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f880 	bl	800968c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800858c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800858e:	f000 fa3d 	bl	8008a0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008592:	f000 fea7 	bl	80092e4 <xTaskResumeAll>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	f47f af7c 	bne.w	8008496 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800859e:	4b0c      	ldr	r3, [pc, #48]	@ (80085d0 <xQueueGenericSend+0x210>)
 80085a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	e772      	b.n	8008496 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085b2:	f000 fa2b 	bl	8008a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b6:	f000 fe95 	bl	80092e4 <xTaskResumeAll>
 80085ba:	e76c      	b.n	8008496 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085be:	f000 fa25 	bl	8008a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085c2:	f000 fe8f 	bl	80092e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3738      	adds	r7, #56	@ 0x38
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08e      	sub	sp, #56	@ 0x38
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10d      	bne.n	8008608 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f0:	b672      	cpsid	i
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	b662      	cpsie	i
 8008600:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d103      	bne.n	8008616 <xQueueGenericSendFromISR+0x42>
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <xQueueGenericSendFromISR+0x46>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <xQueueGenericSendFromISR+0x48>
 800861a:	2300      	movs	r3, #0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10d      	bne.n	800863c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008624:	b672      	cpsid	i
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	b662      	cpsie	i
 8008634:	623b      	str	r3, [r7, #32]
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d103      	bne.n	800864a <xQueueGenericSendFromISR+0x76>
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <xQueueGenericSendFromISR+0x7a>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <xQueueGenericSendFromISR+0x7c>
 800864e:	2300      	movs	r3, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10d      	bne.n	8008670 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	b672      	cpsid	i
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	b662      	cpsie	i
 8008668:	61fb      	str	r3, [r7, #28]
}
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	e7fd      	b.n	800866c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008670:	f002 f874 	bl	800a75c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008674:	f3ef 8211 	mrs	r2, BASEPRI
 8008678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867c:	b672      	cpsid	i
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	b662      	cpsie	i
 800868c:	61ba      	str	r2, [r7, #24]
 800868e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008690:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869c:	429a      	cmp	r2, r3
 800869e:	d302      	bcc.n	80086a6 <xQueueGenericSendFromISR+0xd2>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d12c      	bne.n	8008700 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086b6:	f000 f919 	bl	80088ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d112      	bne.n	80086ea <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d016      	beq.n	80086fa <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	3324      	adds	r3, #36	@ 0x24
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f831 	bl	8009738 <xTaskRemoveFromEventList>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00e      	beq.n	80086fa <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e007      	b.n	80086fa <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	b25a      	sxtb	r2, r3
 80086f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80086fa:	2301      	movs	r3, #1
 80086fc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80086fe:	e001      	b.n	8008704 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008700:	2300      	movs	r3, #0
 8008702:	637b      	str	r3, [r7, #52]	@ 0x34
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008706:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800870e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008712:	4618      	mov	r0, r3
 8008714:	3738      	adds	r7, #56	@ 0x38
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08c      	sub	sp, #48	@ 0x30
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008728:	2300      	movs	r3, #0
 800872a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10d      	bne.n	8008752 <xQueueReceive+0x36>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	b672      	cpsid	i
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	b662      	cpsie	i
 800874a:	623b      	str	r3, [r7, #32]
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <xQueueReceive+0x44>
 8008758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <xQueueReceive+0x48>
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <xQueueReceive+0x4a>
 8008764:	2300      	movs	r3, #0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10d      	bne.n	8008786 <xQueueReceive+0x6a>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876e:	b672      	cpsid	i
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	b662      	cpsie	i
 800877e:	61fb      	str	r3, [r7, #28]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008786:	f001 f9a5 	bl	8009ad4 <xTaskGetSchedulerState>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d102      	bne.n	8008796 <xQueueReceive+0x7a>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <xQueueReceive+0x7e>
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <xQueueReceive+0x80>
 800879a:	2300      	movs	r3, #0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10d      	bne.n	80087bc <xQueueReceive+0xa0>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	b672      	cpsid	i
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	b662      	cpsie	i
 80087b4:	61bb      	str	r3, [r7, #24]
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087bc:	f001 fee6 	bl	800a58c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01f      	beq.n	800880c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087d0:	f000 f8f6 	bl	80089c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	1e5a      	subs	r2, r3, #1
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00f      	beq.n	8008804 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	3310      	adds	r3, #16
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 ffa5 	bl	8009738 <xTaskRemoveFromEventList>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d007      	beq.n	8008804 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087f4:	4b3c      	ldr	r3, [pc, #240]	@ (80088e8 <xQueueReceive+0x1cc>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008804:	f001 fef8 	bl	800a5f8 <vPortExitCritical>
				return pdPASS;
 8008808:	2301      	movs	r3, #1
 800880a:	e069      	b.n	80088e0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008812:	f001 fef1 	bl	800a5f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008816:	2300      	movs	r3, #0
 8008818:	e062      	b.n	80088e0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d106      	bne.n	800882e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008820:	f107 0310 	add.w	r3, r7, #16
 8008824:	4618      	mov	r0, r3
 8008826:	f000 ffed 	bl	8009804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800882a:	2301      	movs	r3, #1
 800882c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800882e:	f001 fee3 	bl	800a5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008832:	f000 fd49 	bl	80092c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008836:	f001 fea9 	bl	800a58c <vPortEnterCritical>
 800883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008840:	b25b      	sxtb	r3, r3
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008846:	d103      	bne.n	8008850 <xQueueReceive+0x134>
 8008848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008856:	b25b      	sxtb	r3, r3
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d103      	bne.n	8008866 <xQueueReceive+0x14a>
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008866:	f001 fec7 	bl	800a5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800886a:	1d3a      	adds	r2, r7, #4
 800886c:	f107 0310 	add.w	r3, r7, #16
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f000 ffdc 	bl	8009830 <xTaskCheckForTimeOut>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d123      	bne.n	80088c6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800887e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008880:	f000 f916 	bl	8008ab0 <prvIsQueueEmpty>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d017      	beq.n	80088ba <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	3324      	adds	r3, #36	@ 0x24
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fefa 	bl	800968c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800889a:	f000 f8b7 	bl	8008a0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800889e:	f000 fd21 	bl	80092e4 <xTaskResumeAll>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d189      	bne.n	80087bc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80088a8:	4b0f      	ldr	r3, [pc, #60]	@ (80088e8 <xQueueReceive+0x1cc>)
 80088aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	e780      	b.n	80087bc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088bc:	f000 f8a6 	bl	8008a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088c0:	f000 fd10 	bl	80092e4 <xTaskResumeAll>
 80088c4:	e77a      	b.n	80087bc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c8:	f000 f8a0 	bl	8008a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088cc:	f000 fd0a 	bl	80092e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088d2:	f000 f8ed 	bl	8008ab0 <prvIsQueueEmpty>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f43f af6f 	beq.w	80087bc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3730      	adds	r7, #48	@ 0x30
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	e000ed04 	.word	0xe000ed04

080088ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10d      	bne.n	8008926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d14d      	bne.n	80089ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	4618      	mov	r0, r3
 8008918:	f001 f8fa 	bl	8009b10 <xTaskPriorityDisinherit>
 800891c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	e043      	b.n	80089ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d119      	bne.n	8008960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6858      	ldr	r0, [r3, #4]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008934:	461a      	mov	r2, r3
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	f003 f9f9 	bl	800bd2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008944:	441a      	add	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	429a      	cmp	r2, r3
 8008954:	d32b      	bcc.n	80089ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	e026      	b.n	80089ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68d8      	ldr	r0, [r3, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008968:	461a      	mov	r2, r3
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	f003 f9df 	bl	800bd2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008978:	425b      	negs	r3, r3
 800897a:	441a      	add	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d207      	bcs.n	800899c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008994:	425b      	negs	r3, r3
 8008996:	441a      	add	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d105      	bne.n	80089ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80089b6:	697b      	ldr	r3, [r7, #20]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d018      	beq.n	8008a04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089da:	441a      	add	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d303      	bcc.n	80089f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68d9      	ldr	r1, [r3, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fc:	461a      	mov	r2, r3
 80089fe:	6838      	ldr	r0, [r7, #0]
 8008a00:	f003 f995 	bl	800bd2e <memcpy>
	}
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a14:	f001 fdba 	bl	800a58c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a20:	e011      	b.n	8008a46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d012      	beq.n	8008a50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3324      	adds	r3, #36	@ 0x24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fe82 	bl	8009738 <xTaskRemoveFromEventList>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a3a:	f000 ff61 	bl	8009900 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dce9      	bgt.n	8008a22 <prvUnlockQueue+0x16>
 8008a4e:	e000      	b.n	8008a52 <prvUnlockQueue+0x46>
					break;
 8008a50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	22ff      	movs	r2, #255	@ 0xff
 8008a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a5a:	f001 fdcd 	bl	800a5f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a5e:	f001 fd95 	bl	800a58c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a6a:	e011      	b.n	8008a90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d012      	beq.n	8008a9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3310      	adds	r3, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fe5d 	bl	8009738 <xTaskRemoveFromEventList>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a84:	f000 ff3c 	bl	8009900 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dce9      	bgt.n	8008a6c <prvUnlockQueue+0x60>
 8008a98:	e000      	b.n	8008a9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	22ff      	movs	r2, #255	@ 0xff
 8008aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008aa4:	f001 fda8 	bl	800a5f8 <vPortExitCritical>
}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ab8:	f001 fd68 	bl	800a58c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	e001      	b.n	8008ace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ace:	f001 fd93 	bl	800a5f8 <vPortExitCritical>

	return xReturn;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ae4:	f001 fd52 	bl	800a58c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d102      	bne.n	8008afa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008af4:	2301      	movs	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e001      	b.n	8008afe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008afe:	f001 fd7b 	bl	800a5f8 <vPortExitCritical>

	return xReturn;
 8008b02:	68fb      	ldr	r3, [r7, #12]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e014      	b.n	8008b46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b5c <vQueueAddToRegistry+0x50>)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10b      	bne.n	8008b40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b28:	490c      	ldr	r1, [pc, #48]	@ (8008b5c <vQueueAddToRegistry+0x50>)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b32:	4a0a      	ldr	r2, [pc, #40]	@ (8008b5c <vQueueAddToRegistry+0x50>)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	4413      	add	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b3e:	e006      	b.n	8008b4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b07      	cmp	r3, #7
 8008b4a:	d9e7      	bls.n	8008b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20001208 	.word	0x20001208

08008b60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b70:	f001 fd0c 	bl	800a58c <vPortEnterCritical>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b7a:	b25b      	sxtb	r3, r3
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b80:	d103      	bne.n	8008b8a <vQueueWaitForMessageRestricted+0x2a>
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b96:	d103      	bne.n	8008ba0 <vQueueWaitForMessageRestricted+0x40>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ba0:	f001 fd2a 	bl	800a5f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d106      	bne.n	8008bba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	3324      	adds	r3, #36	@ 0x24
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fd91 	bl	80096dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	f7ff ff26 	bl	8008a0c <prvUnlockQueue>
	}
 8008bc0:	bf00      	nop
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08e      	sub	sp, #56	@ 0x38
 8008bcc:	af04      	add	r7, sp, #16
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10d      	bne.n	8008bf8 <xTaskCreateStatic+0x30>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be0:	b672      	cpsid	i
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	b662      	cpsie	i
 8008bf0:	623b      	str	r3, [r7, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10d      	bne.n	8008c1a <xTaskCreateStatic+0x52>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	b672      	cpsid	i
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	b662      	cpsie	i
 8008c12:	61fb      	str	r3, [r7, #28]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c1a:	23a8      	movs	r3, #168	@ 0xa8
 8008c1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2ba8      	cmp	r3, #168	@ 0xa8
 8008c22:	d00d      	beq.n	8008c40 <xTaskCreateStatic+0x78>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	b672      	cpsid	i
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	b662      	cpsie	i
 8008c38:	61bb      	str	r3, [r7, #24]
}
 8008c3a:	bf00      	nop
 8008c3c:	bf00      	nop
 8008c3e:	e7fd      	b.n	8008c3c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01e      	beq.n	8008c86 <xTaskCreateStatic+0xbe>
 8008c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d01b      	beq.n	8008c86 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c60:	2300      	movs	r3, #0
 8008c62:	9303      	str	r3, [sp, #12]
 8008c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	f107 0314 	add.w	r3, r7, #20
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 f851 	bl	8008d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c80:	f000 f8f8 	bl	8008e74 <prvAddNewTaskToReadyList>
 8008c84:	e001      	b.n	8008c8a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c8a:	697b      	ldr	r3, [r7, #20]
	}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3728      	adds	r7, #40	@ 0x28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08c      	sub	sp, #48	@ 0x30
 8008c98:	af04      	add	r7, sp, #16
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 fd9d 	bl	800a7e8 <pvPortMalloc>
 8008cae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00e      	beq.n	8008cd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cb6:	20a8      	movs	r0, #168	@ 0xa8
 8008cb8:	f001 fd96 	bl	800a7e8 <pvPortMalloc>
 8008cbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cca:	e005      	b.n	8008cd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ccc:	6978      	ldr	r0, [r7, #20]
 8008cce:	f001 fe59 	bl	800a984 <vPortFree>
 8008cd2:	e001      	b.n	8008cd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d017      	beq.n	8008d0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9303      	str	r3, [sp, #12]
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	9302      	str	r3, [sp, #8]
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f80f 	bl	8008d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d02:	69f8      	ldr	r0, [r7, #28]
 8008d04:	f000 f8b6 	bl	8008e74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	e002      	b.n	8008d14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d14:	69bb      	ldr	r3, [r7, #24]
	}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	461a      	mov	r2, r3
 8008d38:	21a5      	movs	r1, #165	@ 0xa5
 8008d3a:	f002 ff22 	bl	800bb82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008d48:	440b      	add	r3, r1
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f023 0307 	bic.w	r3, r3, #7
 8008d56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00d      	beq.n	8008d7e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d66:	b672      	cpsid	i
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	b662      	cpsie	i
 8008d76:	617b      	str	r3, [r7, #20]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01f      	beq.n	8008dc4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]
 8008d88:	e012      	b.n	8008db0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	4413      	add	r3, r2
 8008d90:	7819      	ldrb	r1, [r3, #0]
 8008d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	4413      	add	r3, r2
 8008d98:	3334      	adds	r3, #52	@ 0x34
 8008d9a:	460a      	mov	r2, r1
 8008d9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d006      	beq.n	8008db8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	3301      	adds	r3, #1
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d9e9      	bls.n	8008d8a <prvInitialiseNewTask+0x6a>
 8008db6:	e000      	b.n	8008dba <prvInitialiseNewTask+0x9a>
			{
				break;
 8008db8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008dc2:	e003      	b.n	8008dcc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	2b37      	cmp	r3, #55	@ 0x37
 8008dd0:	d901      	bls.n	8008dd6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dd2:	2337      	movs	r3, #55	@ 0x37
 8008dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dda:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008de0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	2200      	movs	r2, #0
 8008de6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dea:	3304      	adds	r3, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff f93d 	bl	800806c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	3318      	adds	r3, #24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff f938 	bl	800806c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	3354      	adds	r3, #84	@ 0x54
 8008e26:	224c      	movs	r2, #76	@ 0x4c
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f002 fea9 	bl	800bb82 <memset>
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	4a0d      	ldr	r2, [pc, #52]	@ (8008e68 <prvInitialiseNewTask+0x148>)
 8008e34:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	4a0c      	ldr	r2, [pc, #48]	@ (8008e6c <prvInitialiseNewTask+0x14c>)
 8008e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8008e70 <prvInitialiseNewTask+0x150>)
 8008e40:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	68f9      	ldr	r1, [r7, #12]
 8008e46:	69b8      	ldr	r0, [r7, #24]
 8008e48:	f001 fa92 	bl	800a370 <pxPortInitialiseStack>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5e:	bf00      	nop
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20005494 	.word	0x20005494
 8008e6c:	200054fc 	.word	0x200054fc
 8008e70:	20005564 	.word	0x20005564

08008e74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e7c:	f001 fb86 	bl	800a58c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e80:	4b2d      	ldr	r3, [pc, #180]	@ (8008f38 <prvAddNewTaskToReadyList+0xc4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3301      	adds	r3, #1
 8008e86:	4a2c      	ldr	r2, [pc, #176]	@ (8008f38 <prvAddNewTaskToReadyList+0xc4>)
 8008e88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8008f3c <prvAddNewTaskToReadyList+0xc8>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d109      	bne.n	8008ea6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e92:	4a2a      	ldr	r2, [pc, #168]	@ (8008f3c <prvAddNewTaskToReadyList+0xc8>)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e98:	4b27      	ldr	r3, [pc, #156]	@ (8008f38 <prvAddNewTaskToReadyList+0xc4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d110      	bne.n	8008ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ea0:	f000 fd52 	bl	8009948 <prvInitialiseTaskLists>
 8008ea4:	e00d      	b.n	8008ec2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ea6:	4b26      	ldr	r3, [pc, #152]	@ (8008f40 <prvAddNewTaskToReadyList+0xcc>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008eae:	4b23      	ldr	r3, [pc, #140]	@ (8008f3c <prvAddNewTaskToReadyList+0xc8>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d802      	bhi.n	8008ec2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8008f3c <prvAddNewTaskToReadyList+0xc8>)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ec2:	4b20      	ldr	r3, [pc, #128]	@ (8008f44 <prvAddNewTaskToReadyList+0xd0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f44 <prvAddNewTaskToReadyList+0xd0>)
 8008eca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f44 <prvAddNewTaskToReadyList+0xd0>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f48 <prvAddNewTaskToReadyList+0xd4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d903      	bls.n	8008ee8 <prvAddNewTaskToReadyList+0x74>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	4a18      	ldr	r2, [pc, #96]	@ (8008f48 <prvAddNewTaskToReadyList+0xd4>)
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4a15      	ldr	r2, [pc, #84]	@ (8008f4c <prvAddNewTaskToReadyList+0xd8>)
 8008ef6:	441a      	add	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7ff f8c1 	bl	8008086 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f04:	f001 fb78 	bl	800a5f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f08:	4b0d      	ldr	r3, [pc, #52]	@ (8008f40 <prvAddNewTaskToReadyList+0xcc>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00e      	beq.n	8008f2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f10:	4b0a      	ldr	r3, [pc, #40]	@ (8008f3c <prvAddNewTaskToReadyList+0xc8>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d207      	bcs.n	8008f2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <prvAddNewTaskToReadyList+0xdc>)
 8008f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	2000171c 	.word	0x2000171c
 8008f3c:	20001248 	.word	0x20001248
 8008f40:	20001728 	.word	0x20001728
 8008f44:	20001738 	.word	0x20001738
 8008f48:	20001724 	.word	0x20001724
 8008f4c:	2000124c 	.word	0x2000124c
 8008f50:	e000ed04 	.word	0xe000ed04

08008f54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01a      	beq.n	8008f9c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f66:	4b15      	ldr	r3, [pc, #84]	@ (8008fbc <vTaskDelay+0x68>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00d      	beq.n	8008f8a <vTaskDelay+0x36>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	b672      	cpsid	i
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	b662      	cpsie	i
 8008f82:	60bb      	str	r3, [r7, #8]
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f8a:	f000 f99d 	bl	80092c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f8e:	2100      	movs	r1, #0
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fe31 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f96:	f000 f9a5 	bl	80092e4 <xTaskResumeAll>
 8008f9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d107      	bne.n	8008fb2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008fa2:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <vTaskDelay+0x6c>)
 8008fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20001744 	.word	0x20001744
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008fcc:	f001 fade 	bl	800a58c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <vTaskSuspend+0x18>
 8008fd6:	4b31      	ldr	r3, [pc, #196]	@ (800909c <vTaskSuspend+0xd8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	e000      	b.n	8008fde <vTaskSuspend+0x1a>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff f8ab 	bl	8008140 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3318      	adds	r3, #24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff f8a2 	bl	8008140 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3304      	adds	r3, #4
 8009000:	4619      	mov	r1, r3
 8009002:	4827      	ldr	r0, [pc, #156]	@ (80090a0 <vTaskSuspend+0xdc>)
 8009004:	f7ff f83f 	bl	8008086 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b01      	cmp	r3, #1
 8009012:	d103      	bne.n	800901c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800901c:	f001 faec 	bl	800a5f8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009020:	4b20      	ldr	r3, [pc, #128]	@ (80090a4 <vTaskSuspend+0xe0>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009028:	f001 fab0 	bl	800a58c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800902c:	f000 fd32 	bl	8009a94 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009030:	f001 fae2 	bl	800a5f8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009034:	4b19      	ldr	r3, [pc, #100]	@ (800909c <vTaskSuspend+0xd8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	429a      	cmp	r2, r3
 800903c:	d12a      	bne.n	8009094 <vTaskSuspend+0xd0>
		{
			if( xSchedulerRunning != pdFALSE )
 800903e:	4b19      	ldr	r3, [pc, #100]	@ (80090a4 <vTaskSuspend+0xe0>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d01a      	beq.n	800907c <vTaskSuspend+0xb8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009046:	4b18      	ldr	r3, [pc, #96]	@ (80090a8 <vTaskSuspend+0xe4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00d      	beq.n	800906a <vTaskSuspend+0xa6>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	b672      	cpsid	i
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	b662      	cpsie	i
 8009062:	60bb      	str	r3, [r7, #8]
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	e7fd      	b.n	8009066 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 800906a:	4b10      	ldr	r3, [pc, #64]	@ (80090ac <vTaskSuspend+0xe8>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800907a:	e00b      	b.n	8009094 <vTaskSuspend+0xd0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800907c:	4b08      	ldr	r3, [pc, #32]	@ (80090a0 <vTaskSuspend+0xdc>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	4b0b      	ldr	r3, [pc, #44]	@ (80090b0 <vTaskSuspend+0xec>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d103      	bne.n	8009090 <vTaskSuspend+0xcc>
					pxCurrentTCB = NULL;
 8009088:	4b04      	ldr	r3, [pc, #16]	@ (800909c <vTaskSuspend+0xd8>)
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
	}
 800908e:	e001      	b.n	8009094 <vTaskSuspend+0xd0>
					vTaskSwitchContext();
 8009090:	f000 fa94 	bl	80095bc <vTaskSwitchContext>
	}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20001248 	.word	0x20001248
 80090a0:	20001708 	.word	0x20001708
 80090a4:	20001728 	.word	0x20001728
 80090a8:	20001744 	.word	0x20001744
 80090ac:	e000ed04 	.word	0xe000ed04
 80090b0:	2000171c 	.word	0x2000171c

080090b4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10d      	bne.n	80090e6 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ce:	b672      	cpsid	i
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	b662      	cpsie	i
 80090de:	60fb      	str	r3, [r7, #12]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009114 <prvTaskIsTaskSuspended+0x60>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10a      	bne.n	8009106 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f4:	4a08      	ldr	r2, [pc, #32]	@ (8009118 <prvTaskIsTaskSuspended+0x64>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d005      	beq.n	8009106 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8009102:	2301      	movs	r3, #1
 8009104:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009106:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009108:	4618      	mov	r0, r3
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	20001708 	.word	0x20001708
 8009118:	200016dc 	.word	0x200016dc

0800911c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10d      	bne.n	800914a <vTaskResume+0x2e>
	__asm volatile
 800912e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009132:	b672      	cpsid	i
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	b662      	cpsie	i
 8009142:	60bb      	str	r3, [r7, #8]
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	e7fd      	b.n	8009146 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800914a:	4b21      	ldr	r3, [pc, #132]	@ (80091d0 <vTaskResume+0xb4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	429a      	cmp	r2, r3
 8009152:	d038      	beq.n	80091c6 <vTaskResume+0xaa>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d035      	beq.n	80091c6 <vTaskResume+0xaa>
		{
			taskENTER_CRITICAL();
 800915a:	f001 fa17 	bl	800a58c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f7ff ffa8 	bl	80090b4 <prvTaskIsTaskSuspended>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d02b      	beq.n	80091c2 <vTaskResume+0xa6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3304      	adds	r3, #4
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe ffe6 	bl	8008140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009178:	4b16      	ldr	r3, [pc, #88]	@ (80091d4 <vTaskResume+0xb8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d903      	bls.n	8009188 <vTaskResume+0x6c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009184:	4a13      	ldr	r2, [pc, #76]	@ (80091d4 <vTaskResume+0xb8>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4a10      	ldr	r2, [pc, #64]	@ (80091d8 <vTaskResume+0xbc>)
 8009196:	441a      	add	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe ff71 	bl	8008086 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a8:	4b09      	ldr	r3, [pc, #36]	@ (80091d0 <vTaskResume+0xb4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d307      	bcc.n	80091c2 <vTaskResume+0xa6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80091b2:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <vTaskResume+0xc0>)
 80091b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80091c2:	f001 fa19 	bl	800a5f8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20001248 	.word	0x20001248
 80091d4:	20001724 	.word	0x20001724
 80091d8:	2000124c 	.word	0x2000124c
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08a      	sub	sp, #40	@ 0x28
 80091e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091ee:	463a      	mov	r2, r7
 80091f0:	1d39      	adds	r1, r7, #4
 80091f2:	f107 0308 	add.w	r3, r7, #8
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fee4 	bl	8007fc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	9202      	str	r2, [sp, #8]
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	2300      	movs	r3, #0
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	460a      	mov	r2, r1
 800920e:	4926      	ldr	r1, [pc, #152]	@ (80092a8 <vTaskStartScheduler+0xc8>)
 8009210:	4826      	ldr	r0, [pc, #152]	@ (80092ac <vTaskStartScheduler+0xcc>)
 8009212:	f7ff fcd9 	bl	8008bc8 <xTaskCreateStatic>
 8009216:	4603      	mov	r3, r0
 8009218:	4a25      	ldr	r2, [pc, #148]	@ (80092b0 <vTaskStartScheduler+0xd0>)
 800921a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800921c:	4b24      	ldr	r3, [pc, #144]	@ (80092b0 <vTaskStartScheduler+0xd0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e001      	b.n	800922e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d102      	bne.n	800923a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009234:	f000 fd34 	bl	8009ca0 <xTimerCreateTimerTask>
 8009238:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d11d      	bne.n	800927c <vTaskStartScheduler+0x9c>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	b672      	cpsid	i
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	b662      	cpsie	i
 8009254:	613b      	str	r3, [r7, #16]
}
 8009256:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009258:	4b16      	ldr	r3, [pc, #88]	@ (80092b4 <vTaskStartScheduler+0xd4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3354      	adds	r3, #84	@ 0x54
 800925e:	4a16      	ldr	r2, [pc, #88]	@ (80092b8 <vTaskStartScheduler+0xd8>)
 8009260:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009262:	4b16      	ldr	r3, [pc, #88]	@ (80092bc <vTaskStartScheduler+0xdc>)
 8009264:	f04f 32ff 	mov.w	r2, #4294967295
 8009268:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800926a:	4b15      	ldr	r3, [pc, #84]	@ (80092c0 <vTaskStartScheduler+0xe0>)
 800926c:	2201      	movs	r2, #1
 800926e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009270:	4b14      	ldr	r3, [pc, #80]	@ (80092c4 <vTaskStartScheduler+0xe4>)
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009276:	f001 f90b 	bl	800a490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800927a:	e011      	b.n	80092a0 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	d10d      	bne.n	80092a0 <vTaskStartScheduler+0xc0>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009288:	b672      	cpsid	i
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	b662      	cpsie	i
 8009298:	60fb      	str	r3, [r7, #12]
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <vTaskStartScheduler+0xbc>
}
 80092a0:	bf00      	nop
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	0800f784 	.word	0x0800f784
 80092ac:	08009919 	.word	0x08009919
 80092b0:	20001740 	.word	0x20001740
 80092b4:	20001248 	.word	0x20001248
 80092b8:	20000084 	.word	0x20000084
 80092bc:	2000173c 	.word	0x2000173c
 80092c0:	20001728 	.word	0x20001728
 80092c4:	20001720 	.word	0x20001720

080092c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80092cc:	4b04      	ldr	r3, [pc, #16]	@ (80092e0 <vTaskSuspendAll+0x18>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3301      	adds	r3, #1
 80092d2:	4a03      	ldr	r2, [pc, #12]	@ (80092e0 <vTaskSuspendAll+0x18>)
 80092d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80092d6:	bf00      	nop
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20001744 	.word	0x20001744

080092e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092f2:	4b43      	ldr	r3, [pc, #268]	@ (8009400 <xTaskResumeAll+0x11c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10d      	bne.n	8009316 <xTaskResumeAll+0x32>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	b672      	cpsid	i
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	b662      	cpsie	i
 800930e:	603b      	str	r3, [r7, #0]
}
 8009310:	bf00      	nop
 8009312:	bf00      	nop
 8009314:	e7fd      	b.n	8009312 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009316:	f001 f939 	bl	800a58c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800931a:	4b39      	ldr	r3, [pc, #228]	@ (8009400 <xTaskResumeAll+0x11c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3b01      	subs	r3, #1
 8009320:	4a37      	ldr	r2, [pc, #220]	@ (8009400 <xTaskResumeAll+0x11c>)
 8009322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009324:	4b36      	ldr	r3, [pc, #216]	@ (8009400 <xTaskResumeAll+0x11c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d162      	bne.n	80093f2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800932c:	4b35      	ldr	r3, [pc, #212]	@ (8009404 <xTaskResumeAll+0x120>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d05e      	beq.n	80093f2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009334:	e02f      	b.n	8009396 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009336:	4b34      	ldr	r3, [pc, #208]	@ (8009408 <xTaskResumeAll+0x124>)
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3318      	adds	r3, #24
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fefc 	bl	8008140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3304      	adds	r3, #4
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fef7 	bl	8008140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009356:	4b2d      	ldr	r3, [pc, #180]	@ (800940c <xTaskResumeAll+0x128>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d903      	bls.n	8009366 <xTaskResumeAll+0x82>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009362:	4a2a      	ldr	r2, [pc, #168]	@ (800940c <xTaskResumeAll+0x128>)
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4a27      	ldr	r2, [pc, #156]	@ (8009410 <xTaskResumeAll+0x12c>)
 8009374:	441a      	add	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3304      	adds	r3, #4
 800937a:	4619      	mov	r1, r3
 800937c:	4610      	mov	r0, r2
 800937e:	f7fe fe82 	bl	8008086 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009386:	4b23      	ldr	r3, [pc, #140]	@ (8009414 <xTaskResumeAll+0x130>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938c:	429a      	cmp	r2, r3
 800938e:	d302      	bcc.n	8009396 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009390:	4b21      	ldr	r3, [pc, #132]	@ (8009418 <xTaskResumeAll+0x134>)
 8009392:	2201      	movs	r2, #1
 8009394:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009396:	4b1c      	ldr	r3, [pc, #112]	@ (8009408 <xTaskResumeAll+0x124>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1cb      	bne.n	8009336 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093a4:	f000 fb76 	bl	8009a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093a8:	4b1c      	ldr	r3, [pc, #112]	@ (800941c <xTaskResumeAll+0x138>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d010      	beq.n	80093d6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093b4:	f000 f846 	bl	8009444 <xTaskIncrementTick>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80093be:	4b16      	ldr	r3, [pc, #88]	@ (8009418 <xTaskResumeAll+0x134>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f1      	bne.n	80093b4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80093d0:	4b12      	ldr	r3, [pc, #72]	@ (800941c <xTaskResumeAll+0x138>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093d6:	4b10      	ldr	r3, [pc, #64]	@ (8009418 <xTaskResumeAll+0x134>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d009      	beq.n	80093f2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093de:	2301      	movs	r3, #1
 80093e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009420 <xTaskResumeAll+0x13c>)
 80093e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093f2:	f001 f901 	bl	800a5f8 <vPortExitCritical>

	return xAlreadyYielded;
 80093f6:	68bb      	ldr	r3, [r7, #8]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20001744 	.word	0x20001744
 8009404:	2000171c 	.word	0x2000171c
 8009408:	200016dc 	.word	0x200016dc
 800940c:	20001724 	.word	0x20001724
 8009410:	2000124c 	.word	0x2000124c
 8009414:	20001248 	.word	0x20001248
 8009418:	20001730 	.word	0x20001730
 800941c:	2000172c 	.word	0x2000172c
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800942a:	4b05      	ldr	r3, [pc, #20]	@ (8009440 <xTaskGetTickCount+0x1c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009430:	687b      	ldr	r3, [r7, #4]
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	20001720 	.word	0x20001720

08009444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944e:	4b50      	ldr	r3, [pc, #320]	@ (8009590 <xTaskIncrementTick+0x14c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 808c 	bne.w	8009570 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009458:	4b4e      	ldr	r3, [pc, #312]	@ (8009594 <xTaskIncrementTick+0x150>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009460:	4a4c      	ldr	r2, [pc, #304]	@ (8009594 <xTaskIncrementTick+0x150>)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d123      	bne.n	80094b4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800946c:	4b4a      	ldr	r3, [pc, #296]	@ (8009598 <xTaskIncrementTick+0x154>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00d      	beq.n	8009492 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	b672      	cpsid	i
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	b662      	cpsie	i
 800948a:	603b      	str	r3, [r7, #0]
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	e7fd      	b.n	800948e <xTaskIncrementTick+0x4a>
 8009492:	4b41      	ldr	r3, [pc, #260]	@ (8009598 <xTaskIncrementTick+0x154>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	4b40      	ldr	r3, [pc, #256]	@ (800959c <xTaskIncrementTick+0x158>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a3e      	ldr	r2, [pc, #248]	@ (8009598 <xTaskIncrementTick+0x154>)
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	4a3e      	ldr	r2, [pc, #248]	@ (800959c <xTaskIncrementTick+0x158>)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	4b3e      	ldr	r3, [pc, #248]	@ (80095a0 <xTaskIncrementTick+0x15c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	4a3c      	ldr	r2, [pc, #240]	@ (80095a0 <xTaskIncrementTick+0x15c>)
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	f000 faf0 	bl	8009a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094b4:	4b3b      	ldr	r3, [pc, #236]	@ (80095a4 <xTaskIncrementTick+0x160>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d349      	bcc.n	8009552 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094be:	4b36      	ldr	r3, [pc, #216]	@ (8009598 <xTaskIncrementTick+0x154>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d104      	bne.n	80094d2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c8:	4b36      	ldr	r3, [pc, #216]	@ (80095a4 <xTaskIncrementTick+0x160>)
 80094ca:	f04f 32ff 	mov.w	r2, #4294967295
 80094ce:	601a      	str	r2, [r3, #0]
					break;
 80094d0:	e03f      	b.n	8009552 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d2:	4b31      	ldr	r3, [pc, #196]	@ (8009598 <xTaskIncrementTick+0x154>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d203      	bcs.n	80094f2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094ea:	4a2e      	ldr	r2, [pc, #184]	@ (80095a4 <xTaskIncrementTick+0x160>)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094f0:	e02f      	b.n	8009552 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fe22 	bl	8008140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	3318      	adds	r3, #24
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fe19 	bl	8008140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009512:	4b25      	ldr	r3, [pc, #148]	@ (80095a8 <xTaskIncrementTick+0x164>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d903      	bls.n	8009522 <xTaskIncrementTick+0xde>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951e:	4a22      	ldr	r2, [pc, #136]	@ (80095a8 <xTaskIncrementTick+0x164>)
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4a1f      	ldr	r2, [pc, #124]	@ (80095ac <xTaskIncrementTick+0x168>)
 8009530:	441a      	add	r2, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	3304      	adds	r3, #4
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f7fe fda4 	bl	8008086 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009542:	4b1b      	ldr	r3, [pc, #108]	@ (80095b0 <xTaskIncrementTick+0x16c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009548:	429a      	cmp	r2, r3
 800954a:	d3b8      	bcc.n	80094be <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009550:	e7b5      	b.n	80094be <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009552:	4b17      	ldr	r3, [pc, #92]	@ (80095b0 <xTaskIncrementTick+0x16c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009558:	4914      	ldr	r1, [pc, #80]	@ (80095ac <xTaskIncrementTick+0x168>)
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d907      	bls.n	800957a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800956a:	2301      	movs	r3, #1
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	e004      	b.n	800957a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009570:	4b10      	ldr	r3, [pc, #64]	@ (80095b4 <xTaskIncrementTick+0x170>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a0f      	ldr	r2, [pc, #60]	@ (80095b4 <xTaskIncrementTick+0x170>)
 8009578:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800957a:	4b0f      	ldr	r3, [pc, #60]	@ (80095b8 <xTaskIncrementTick+0x174>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009586:	697b      	ldr	r3, [r7, #20]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001744 	.word	0x20001744
 8009594:	20001720 	.word	0x20001720
 8009598:	200016d4 	.word	0x200016d4
 800959c:	200016d8 	.word	0x200016d8
 80095a0:	20001734 	.word	0x20001734
 80095a4:	2000173c 	.word	0x2000173c
 80095a8:	20001724 	.word	0x20001724
 80095ac:	2000124c 	.word	0x2000124c
 80095b0:	20001248 	.word	0x20001248
 80095b4:	2000172c 	.word	0x2000172c
 80095b8:	20001730 	.word	0x20001730

080095bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009674 <vTaskSwitchContext+0xb8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095ca:	4b2b      	ldr	r3, [pc, #172]	@ (8009678 <vTaskSwitchContext+0xbc>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095d0:	e049      	b.n	8009666 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80095d2:	4b29      	ldr	r3, [pc, #164]	@ (8009678 <vTaskSwitchContext+0xbc>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d8:	4b28      	ldr	r3, [pc, #160]	@ (800967c <vTaskSwitchContext+0xc0>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	e013      	b.n	8009608 <vTaskSwitchContext+0x4c>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10d      	bne.n	8009602 <vTaskSwitchContext+0x46>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	b672      	cpsid	i
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	b662      	cpsie	i
 80095fa:	607b      	str	r3, [r7, #4]
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	e7fd      	b.n	80095fe <vTaskSwitchContext+0x42>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3b01      	subs	r3, #1
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	491d      	ldr	r1, [pc, #116]	@ (8009680 <vTaskSwitchContext+0xc4>)
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0e1      	beq.n	80095e0 <vTaskSwitchContext+0x24>
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4a16      	ldr	r2, [pc, #88]	@ (8009680 <vTaskSwitchContext+0xc4>)
 8009628:	4413      	add	r3, r2
 800962a:	60bb      	str	r3, [r7, #8]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	3308      	adds	r3, #8
 800963e:	429a      	cmp	r2, r3
 8009640:	d104      	bne.n	800964c <vTaskSwitchContext+0x90>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	605a      	str	r2, [r3, #4]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	4a0c      	ldr	r2, [pc, #48]	@ (8009684 <vTaskSwitchContext+0xc8>)
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	4a09      	ldr	r2, [pc, #36]	@ (800967c <vTaskSwitchContext+0xc0>)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800965c:	4b09      	ldr	r3, [pc, #36]	@ (8009684 <vTaskSwitchContext+0xc8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3354      	adds	r3, #84	@ 0x54
 8009662:	4a09      	ldr	r2, [pc, #36]	@ (8009688 <vTaskSwitchContext+0xcc>)
 8009664:	6013      	str	r3, [r2, #0]
}
 8009666:	bf00      	nop
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	20001744 	.word	0x20001744
 8009678:	20001730 	.word	0x20001730
 800967c:	20001724 	.word	0x20001724
 8009680:	2000124c 	.word	0x2000124c
 8009684:	20001248 	.word	0x20001248
 8009688:	20000084 	.word	0x20000084

0800968c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10d      	bne.n	80096b8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a0:	b672      	cpsid	i
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	b662      	cpsie	i
 80096b0:	60fb      	str	r3, [r7, #12]
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096b8:	4b07      	ldr	r3, [pc, #28]	@ (80096d8 <vTaskPlaceOnEventList+0x4c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3318      	adds	r3, #24
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7fe fd04 	bl	80080ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096c6:	2101      	movs	r1, #1
 80096c8:	6838      	ldr	r0, [r7, #0]
 80096ca:	f000 fa95 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20001248 	.word	0x20001248

080096dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10d      	bne.n	800970a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	b672      	cpsid	i
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	b662      	cpsie	i
 8009702:	617b      	str	r3, [r7, #20]
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	e7fd      	b.n	8009706 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800970a:	4b0a      	ldr	r3, [pc, #40]	@ (8009734 <vTaskPlaceOnEventListRestricted+0x58>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3318      	adds	r3, #24
 8009710:	4619      	mov	r1, r3
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7fe fcb7 	bl	8008086 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800971e:	f04f 33ff 	mov.w	r3, #4294967295
 8009722:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	68b8      	ldr	r0, [r7, #8]
 8009728:	f000 fa66 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
	}
 800972c:	bf00      	nop
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20001248 	.word	0x20001248

08009738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10d      	bne.n	800976a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	60fb      	str	r3, [r7, #12]
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	e7fd      	b.n	8009766 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3318      	adds	r3, #24
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fce6 	bl	8008140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009774:	4b1d      	ldr	r3, [pc, #116]	@ (80097ec <xTaskRemoveFromEventList+0xb4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d11d      	bne.n	80097b8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fcdd 	bl	8008140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978a:	4b19      	ldr	r3, [pc, #100]	@ (80097f0 <xTaskRemoveFromEventList+0xb8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d903      	bls.n	800979a <xTaskRemoveFromEventList+0x62>
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009796:	4a16      	ldr	r2, [pc, #88]	@ (80097f0 <xTaskRemoveFromEventList+0xb8>)
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4a13      	ldr	r2, [pc, #76]	@ (80097f4 <xTaskRemoveFromEventList+0xbc>)
 80097a8:	441a      	add	r2, r3
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f7fe fc68 	bl	8008086 <vListInsertEnd>
 80097b6:	e005      	b.n	80097c4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	3318      	adds	r3, #24
 80097bc:	4619      	mov	r1, r3
 80097be:	480e      	ldr	r0, [pc, #56]	@ (80097f8 <xTaskRemoveFromEventList+0xc0>)
 80097c0:	f7fe fc61 	bl	8008086 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c8:	4b0c      	ldr	r3, [pc, #48]	@ (80097fc <xTaskRemoveFromEventList+0xc4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d905      	bls.n	80097de <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009800 <xTaskRemoveFromEventList+0xc8>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	e001      	b.n	80097e2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80097de:	2300      	movs	r3, #0
 80097e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097e2:	697b      	ldr	r3, [r7, #20]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20001744 	.word	0x20001744
 80097f0:	20001724 	.word	0x20001724
 80097f4:	2000124c 	.word	0x2000124c
 80097f8:	200016dc 	.word	0x200016dc
 80097fc:	20001248 	.word	0x20001248
 8009800:	20001730 	.word	0x20001730

08009804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800980c:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <vTaskInternalSetTimeOutState+0x24>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009814:	4b05      	ldr	r3, [pc, #20]	@ (800982c <vTaskInternalSetTimeOutState+0x28>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	605a      	str	r2, [r3, #4]
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	20001734 	.word	0x20001734
 800982c:	20001720 	.word	0x20001720

08009830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10d      	bne.n	800985c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	b672      	cpsid	i
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	b662      	cpsie	i
 8009854:	613b      	str	r3, [r7, #16]
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	b672      	cpsid	i
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	b662      	cpsie	i
 8009876:	60fb      	str	r3, [r7, #12]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800987e:	f000 fe85 	bl	800a58c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009882:	4b1d      	ldr	r3, [pc, #116]	@ (80098f8 <xTaskCheckForTimeOut+0xc8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d102      	bne.n	80098a2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800989c:	2300      	movs	r3, #0
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	e023      	b.n	80098ea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4b15      	ldr	r3, [pc, #84]	@ (80098fc <xTaskCheckForTimeOut+0xcc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d007      	beq.n	80098be <xTaskCheckForTimeOut+0x8e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d302      	bcc.n	80098be <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098b8:	2301      	movs	r3, #1
 80098ba:	61fb      	str	r3, [r7, #28]
 80098bc:	e015      	b.n	80098ea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d20b      	bcs.n	80098e0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	1ad2      	subs	r2, r2, r3
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ff95 	bl	8009804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098da:	2300      	movs	r3, #0
 80098dc:	61fb      	str	r3, [r7, #28]
 80098de:	e004      	b.n	80098ea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2200      	movs	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098e6:	2301      	movs	r3, #1
 80098e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098ea:	f000 fe85 	bl	800a5f8 <vPortExitCritical>

	return xReturn;
 80098ee:	69fb      	ldr	r3, [r7, #28]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3720      	adds	r7, #32
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	20001720 	.word	0x20001720
 80098fc:	20001734 	.word	0x20001734

08009900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009904:	4b03      	ldr	r3, [pc, #12]	@ (8009914 <vTaskMissedYield+0x14>)
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]
}
 800990a:	bf00      	nop
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	20001730 	.word	0x20001730

08009918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009920:	f000 f852 	bl	80099c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009924:	4b06      	ldr	r3, [pc, #24]	@ (8009940 <prvIdleTask+0x28>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d9f9      	bls.n	8009920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800992c:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <prvIdleTask+0x2c>)
 800992e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800993c:	e7f0      	b.n	8009920 <prvIdleTask+0x8>
 800993e:	bf00      	nop
 8009940:	2000124c 	.word	0x2000124c
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800994e:	2300      	movs	r3, #0
 8009950:	607b      	str	r3, [r7, #4]
 8009952:	e00c      	b.n	800996e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4a12      	ldr	r2, [pc, #72]	@ (80099a8 <prvInitialiseTaskLists+0x60>)
 8009960:	4413      	add	r3, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fb62 	bl	800802c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3301      	adds	r3, #1
 800996c:	607b      	str	r3, [r7, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b37      	cmp	r3, #55	@ 0x37
 8009972:	d9ef      	bls.n	8009954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009974:	480d      	ldr	r0, [pc, #52]	@ (80099ac <prvInitialiseTaskLists+0x64>)
 8009976:	f7fe fb59 	bl	800802c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800997a:	480d      	ldr	r0, [pc, #52]	@ (80099b0 <prvInitialiseTaskLists+0x68>)
 800997c:	f7fe fb56 	bl	800802c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009980:	480c      	ldr	r0, [pc, #48]	@ (80099b4 <prvInitialiseTaskLists+0x6c>)
 8009982:	f7fe fb53 	bl	800802c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009986:	480c      	ldr	r0, [pc, #48]	@ (80099b8 <prvInitialiseTaskLists+0x70>)
 8009988:	f7fe fb50 	bl	800802c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800998c:	480b      	ldr	r0, [pc, #44]	@ (80099bc <prvInitialiseTaskLists+0x74>)
 800998e:	f7fe fb4d 	bl	800802c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009992:	4b0b      	ldr	r3, [pc, #44]	@ (80099c0 <prvInitialiseTaskLists+0x78>)
 8009994:	4a05      	ldr	r2, [pc, #20]	@ (80099ac <prvInitialiseTaskLists+0x64>)
 8009996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009998:	4b0a      	ldr	r3, [pc, #40]	@ (80099c4 <prvInitialiseTaskLists+0x7c>)
 800999a:	4a05      	ldr	r2, [pc, #20]	@ (80099b0 <prvInitialiseTaskLists+0x68>)
 800999c:	601a      	str	r2, [r3, #0]
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	2000124c 	.word	0x2000124c
 80099ac:	200016ac 	.word	0x200016ac
 80099b0:	200016c0 	.word	0x200016c0
 80099b4:	200016dc 	.word	0x200016dc
 80099b8:	200016f0 	.word	0x200016f0
 80099bc:	20001708 	.word	0x20001708
 80099c0:	200016d4 	.word	0x200016d4
 80099c4:	200016d8 	.word	0x200016d8

080099c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ce:	e019      	b.n	8009a04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099d0:	f000 fddc 	bl	800a58c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d4:	4b10      	ldr	r3, [pc, #64]	@ (8009a18 <prvCheckTasksWaitingTermination+0x50>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3304      	adds	r3, #4
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fbad 	bl	8008140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099e6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a1c <prvCheckTasksWaitingTermination+0x54>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	4a0b      	ldr	r2, [pc, #44]	@ (8009a1c <prvCheckTasksWaitingTermination+0x54>)
 80099ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a20 <prvCheckTasksWaitingTermination+0x58>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009a20 <prvCheckTasksWaitingTermination+0x58>)
 80099f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099fa:	f000 fdfd 	bl	800a5f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f810 	bl	8009a24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a04:	4b06      	ldr	r3, [pc, #24]	@ (8009a20 <prvCheckTasksWaitingTermination+0x58>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e1      	bne.n	80099d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a0c:	bf00      	nop
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	200016f0 	.word	0x200016f0
 8009a1c:	2000171c 	.word	0x2000171c
 8009a20:	20001704 	.word	0x20001704

08009a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3354      	adds	r3, #84	@ 0x54
 8009a30:	4618      	mov	r0, r3
 8009a32:	f002 f8c3 	bl	800bbbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d108      	bne.n	8009a52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 ff9d 	bl	800a984 <vPortFree>
				vPortFree( pxTCB );
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 ff9a 	bl	800a984 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a50:	e01b      	b.n	8009a8a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d103      	bne.n	8009a64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 ff91 	bl	800a984 <vPortFree>
	}
 8009a62:	e012      	b.n	8009a8a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d00d      	beq.n	8009a8a <prvDeleteTCB+0x66>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a72:	b672      	cpsid	i
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	b662      	cpsie	i
 8009a82:	60fb      	str	r3, [r7, #12]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <prvDeleteTCB+0x62>
	}
 8009a8a:	bf00      	nop
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009acc <prvResetNextTaskUnblockTime+0x38>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d104      	bne.n	8009aae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009aac:	e008      	b.n	8009ac0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aae:	4b07      	ldr	r3, [pc, #28]	@ (8009acc <prvResetNextTaskUnblockTime+0x38>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	4a04      	ldr	r2, [pc, #16]	@ (8009ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8009abe:	6013      	str	r3, [r2, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	200016d4 	.word	0x200016d4
 8009ad0:	2000173c 	.word	0x2000173c

08009ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ada:	4b0b      	ldr	r3, [pc, #44]	@ (8009b08 <xTaskGetSchedulerState+0x34>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	607b      	str	r3, [r7, #4]
 8009ae6:	e008      	b.n	8009afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae8:	4b08      	ldr	r3, [pc, #32]	@ (8009b0c <xTaskGetSchedulerState+0x38>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009af0:	2302      	movs	r3, #2
 8009af2:	607b      	str	r3, [r7, #4]
 8009af4:	e001      	b.n	8009afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009af6:	2300      	movs	r3, #0
 8009af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009afa:	687b      	ldr	r3, [r7, #4]
	}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	20001728 	.word	0x20001728
 8009b0c:	20001744 	.word	0x20001744

08009b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d05c      	beq.n	8009be0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b26:	4b31      	ldr	r3, [pc, #196]	@ (8009bec <xTaskPriorityDisinherit+0xdc>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d00d      	beq.n	8009b4c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b34:	b672      	cpsid	i
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	b662      	cpsie	i
 8009b44:	60fb      	str	r3, [r7, #12]
}
 8009b46:	bf00      	nop
 8009b48:	bf00      	nop
 8009b4a:	e7fd      	b.n	8009b48 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10d      	bne.n	8009b70 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	b672      	cpsid	i
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	b662      	cpsie	i
 8009b68:	60bb      	str	r3, [r7, #8]
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d02c      	beq.n	8009be0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d128      	bne.n	8009be0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fad4 	bl	8008140 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf0 <xTaskPriorityDisinherit+0xe0>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d903      	bls.n	8009bc0 <xTaskPriorityDisinherit+0xb0>
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf0 <xTaskPriorityDisinherit+0xe0>)
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4a09      	ldr	r2, [pc, #36]	@ (8009bf4 <xTaskPriorityDisinherit+0xe4>)
 8009bce:	441a      	add	r2, r3
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f7fe fa55 	bl	8008086 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009be0:	697b      	ldr	r3, [r7, #20]
	}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20001248 	.word	0x20001248
 8009bf0:	20001724 	.word	0x20001724
 8009bf4:	2000124c 	.word	0x2000124c

08009bf8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c02:	4b21      	ldr	r3, [pc, #132]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c08:	4b20      	ldr	r3, [pc, #128]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fa96 	bl	8008140 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	d10a      	bne.n	8009c32 <prvAddCurrentTaskToDelayedList+0x3a>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c22:	4b1a      	ldr	r3, [pc, #104]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4819      	ldr	r0, [pc, #100]	@ (8009c90 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c2c:	f7fe fa2b 	bl	8008086 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c30:	e026      	b.n	8009c80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4413      	add	r3, r2
 8009c38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c3a:	4b14      	ldr	r3, [pc, #80]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d209      	bcs.n	8009c5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c4a:	4b12      	ldr	r3, [pc, #72]	@ (8009c94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7fe fa39 	bl	80080ce <vListInsert>
}
 8009c5c:	e010      	b.n	8009c80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b0a      	ldr	r3, [pc, #40]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fe fa2f 	bl	80080ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c70:	4b0a      	ldr	r3, [pc, #40]	@ (8009c9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d202      	bcs.n	8009c80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c7a:	4a08      	ldr	r2, [pc, #32]	@ (8009c9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	6013      	str	r3, [r2, #0]
}
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20001720 	.word	0x20001720
 8009c8c:	20001248 	.word	0x20001248
 8009c90:	20001708 	.word	0x20001708
 8009c94:	200016d8 	.word	0x200016d8
 8009c98:	200016d4 	.word	0x200016d4
 8009c9c:	2000173c 	.word	0x2000173c

08009ca0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	@ 0x28
 8009ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009caa:	f000 fb21 	bl	800a2f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009cae:	4b1e      	ldr	r3, [pc, #120]	@ (8009d28 <xTimerCreateTimerTask+0x88>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d021      	beq.n	8009cfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cbe:	1d3a      	adds	r2, r7, #4
 8009cc0:	f107 0108 	add.w	r1, r7, #8
 8009cc4:	f107 030c 	add.w	r3, r7, #12
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe f995 	bl	8007ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	9202      	str	r2, [sp, #8]
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	2302      	movs	r3, #2
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	460a      	mov	r2, r1
 8009ce0:	4912      	ldr	r1, [pc, #72]	@ (8009d2c <xTimerCreateTimerTask+0x8c>)
 8009ce2:	4813      	ldr	r0, [pc, #76]	@ (8009d30 <xTimerCreateTimerTask+0x90>)
 8009ce4:	f7fe ff70 	bl	8008bc8 <xTaskCreateStatic>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4a12      	ldr	r2, [pc, #72]	@ (8009d34 <xTimerCreateTimerTask+0x94>)
 8009cec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cee:	4b11      	ldr	r3, [pc, #68]	@ (8009d34 <xTimerCreateTimerTask+0x94>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10d      	bne.n	8009d1c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d04:	b672      	cpsid	i
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	b662      	cpsie	i
 8009d14:	613b      	str	r3, [r7, #16]
}
 8009d16:	bf00      	nop
 8009d18:	bf00      	nop
 8009d1a:	e7fd      	b.n	8009d18 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009d1c:	697b      	ldr	r3, [r7, #20]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20001778 	.word	0x20001778
 8009d2c:	0800f78c 	.word	0x0800f78c
 8009d30:	08009e79 	.word	0x08009e79
 8009d34:	2000177c 	.word	0x2000177c

08009d38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	@ 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10d      	bne.n	8009d6c <xTimerGenericCommand+0x34>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	b672      	cpsid	i
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	b662      	cpsie	i
 8009d64:	623b      	str	r3, [r7, #32]
}
 8009d66:	bf00      	nop
 8009d68:	bf00      	nop
 8009d6a:	e7fd      	b.n	8009d68 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d6c:	4b19      	ldr	r3, [pc, #100]	@ (8009dd4 <xTimerGenericCommand+0x9c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d02a      	beq.n	8009dca <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	dc18      	bgt.n	8009db8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d86:	f7ff fea5 	bl	8009ad4 <xTaskGetSchedulerState>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d109      	bne.n	8009da4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d90:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <xTimerGenericCommand+0x9c>)
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	f107 0110 	add.w	r1, r7, #16
 8009d98:	2300      	movs	r3, #0
 8009d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d9c:	f7fe fb10 	bl	80083c0 <xQueueGenericSend>
 8009da0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009da2:	e012      	b.n	8009dca <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009da4:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd4 <xTimerGenericCommand+0x9c>)
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	f107 0110 	add.w	r1, r7, #16
 8009dac:	2300      	movs	r3, #0
 8009dae:	2200      	movs	r2, #0
 8009db0:	f7fe fb06 	bl	80083c0 <xQueueGenericSend>
 8009db4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009db6:	e008      	b.n	8009dca <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009db8:	4b06      	ldr	r3, [pc, #24]	@ (8009dd4 <xTimerGenericCommand+0x9c>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	f107 0110 	add.w	r1, r7, #16
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	f7fe fc06 	bl	80085d4 <xQueueGenericSendFromISR>
 8009dc8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3728      	adds	r7, #40	@ 0x28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20001778 	.word	0x20001778

08009dd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de2:	4b24      	ldr	r3, [pc, #144]	@ (8009e74 <prvProcessExpiredTimer+0x9c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	3304      	adds	r3, #4
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe f9a5 	bl	8008140 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d025      	beq.n	8009e50 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	699a      	ldr	r2, [r3, #24]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	18d1      	adds	r1, r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	6978      	ldr	r0, [r7, #20]
 8009e12:	f000 f8d7 	bl	8009fc4 <prvInsertTimerInActiveList>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d022      	beq.n	8009e62 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	2300      	movs	r3, #0
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	2100      	movs	r1, #0
 8009e26:	6978      	ldr	r0, [r7, #20]
 8009e28:	f7ff ff86 	bl	8009d38 <xTimerGenericCommand>
 8009e2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d116      	bne.n	8009e62 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	b672      	cpsid	i
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	b662      	cpsie	i
 8009e48:	60fb      	str	r3, [r7, #12]
}
 8009e4a:	bf00      	nop
 8009e4c:	bf00      	nop
 8009e4e:	e7fd      	b.n	8009e4c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e56:	f023 0301 	bic.w	r3, r3, #1
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	6978      	ldr	r0, [r7, #20]
 8009e68:	4798      	blx	r3
}
 8009e6a:	bf00      	nop
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20001770 	.word	0x20001770

08009e78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e80:	f107 0308 	add.w	r3, r7, #8
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 f859 	bl	8009f3c <prvGetNextExpireTime>
 8009e8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f805 	bl	8009ea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e96:	f000 f8d7 	bl	800a048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e9a:	bf00      	nop
 8009e9c:	e7f0      	b.n	8009e80 <prvTimerTask+0x8>
	...

08009ea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009eaa:	f7ff fa0d 	bl	80092c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009eae:	f107 0308 	add.w	r3, r7, #8
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f866 	bl	8009f84 <prvSampleTimeNow>
 8009eb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d130      	bne.n	8009f22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <prvProcessTimerOrBlockTask+0x3c>
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d806      	bhi.n	8009edc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ece:	f7ff fa09 	bl	80092e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ed2:	68f9      	ldr	r1, [r7, #12]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7ff ff7f 	bl	8009dd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009eda:	e024      	b.n	8009f26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d008      	beq.n	8009ef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ee2:	4b13      	ldr	r3, [pc, #76]	@ (8009f30 <prvProcessTimerOrBlockTask+0x90>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <prvProcessTimerOrBlockTask+0x50>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e000      	b.n	8009ef2 <prvProcessTimerOrBlockTask+0x52>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8009f34 <prvProcessTimerOrBlockTask+0x94>)
 8009ef6:	6818      	ldr	r0, [r3, #0]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	4619      	mov	r1, r3
 8009f02:	f7fe fe2d 	bl	8008b60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f06:	f7ff f9ed 	bl	80092e4 <xTaskResumeAll>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f10:	4b09      	ldr	r3, [pc, #36]	@ (8009f38 <prvProcessTimerOrBlockTask+0x98>)
 8009f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	f3bf 8f6f 	isb	sy
}
 8009f20:	e001      	b.n	8009f26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f22:	f7ff f9df 	bl	80092e4 <xTaskResumeAll>
}
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20001774 	.word	0x20001774
 8009f34:	20001778 	.word	0x20001778
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f44:	4b0e      	ldr	r3, [pc, #56]	@ (8009f80 <prvGetNextExpireTime+0x44>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <prvGetNextExpireTime+0x16>
 8009f4e:	2201      	movs	r2, #1
 8009f50:	e000      	b.n	8009f54 <prvGetNextExpireTime+0x18>
 8009f52:	2200      	movs	r2, #0
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d105      	bne.n	8009f6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f60:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <prvGetNextExpireTime+0x44>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	e001      	b.n	8009f70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f70:	68fb      	ldr	r3, [r7, #12]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20001770 	.word	0x20001770

08009f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f8c:	f7ff fa4a 	bl	8009424 <xTaskGetTickCount>
 8009f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f92:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <prvSampleTimeNow+0x3c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d205      	bcs.n	8009fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f9c:	f000 f940 	bl	800a220 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	e002      	b.n	8009fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009fae:	4a04      	ldr	r2, [pc, #16]	@ (8009fc0 <prvSampleTimeNow+0x3c>)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20001780 	.word	0x20001780

08009fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d812      	bhi.n	800a010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d302      	bcc.n	8009ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	e01b      	b.n	800a036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ffe:	4b10      	ldr	r3, [pc, #64]	@ (800a040 <prvInsertTimerInActiveList+0x7c>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3304      	adds	r3, #4
 800a006:	4619      	mov	r1, r3
 800a008:	4610      	mov	r0, r2
 800a00a:	f7fe f860 	bl	80080ce <vListInsert>
 800a00e:	e012      	b.n	800a036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d206      	bcs.n	800a026 <prvInsertTimerInActiveList+0x62>
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d302      	bcc.n	800a026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a020:	2301      	movs	r3, #1
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	e007      	b.n	800a036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a026:	4b07      	ldr	r3, [pc, #28]	@ (800a044 <prvInsertTimerInActiveList+0x80>)
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3304      	adds	r3, #4
 800a02e:	4619      	mov	r1, r3
 800a030:	4610      	mov	r0, r2
 800a032:	f7fe f84c 	bl	80080ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a036:	697b      	ldr	r3, [r7, #20]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20001774 	.word	0x20001774
 800a044:	20001770 	.word	0x20001770

0800a048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08e      	sub	sp, #56	@ 0x38
 800a04c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a04e:	e0d4      	b.n	800a1fa <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	da1b      	bge.n	800a08e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a056:	1d3b      	adds	r3, r7, #4
 800a058:	3304      	adds	r3, #4
 800a05a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10d      	bne.n	800a07e <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a066:	b672      	cpsid	i
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	b662      	cpsie	i
 800a076:	61fb      	str	r3, [r7, #28]
}
 800a078:	bf00      	nop
 800a07a:	bf00      	nop
 800a07c:	e7fd      	b.n	800a07a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a084:	6850      	ldr	r0, [r2, #4]
 800a086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a088:	6892      	ldr	r2, [r2, #8]
 800a08a:	4611      	mov	r1, r2
 800a08c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f2c0 80b2 	blt.w	800a1fa <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d004      	beq.n	800a0ac <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe f84a 	bl	8008140 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff ff68 	bl	8009f84 <prvSampleTimeNow>
 800a0b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b09      	cmp	r3, #9
 800a0ba:	f200 809b 	bhi.w	800a1f4 <prvProcessReceivedCommands+0x1ac>
 800a0be:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c4 <prvProcessReceivedCommands+0x7c>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0ed 	.word	0x0800a0ed
 800a0c8:	0800a0ed 	.word	0x0800a0ed
 800a0cc:	0800a0ed 	.word	0x0800a0ed
 800a0d0:	0800a167 	.word	0x0800a167
 800a0d4:	0800a17b 	.word	0x0800a17b
 800a0d8:	0800a1cb 	.word	0x0800a1cb
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0ed 	.word	0x0800a0ed
 800a0e4:	0800a167 	.word	0x0800a167
 800a0e8:	0800a17b 	.word	0x0800a17b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0f2:	f043 0301 	orr.w	r3, r3, #1
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	18d1      	adds	r1, r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a10a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a10c:	f7ff ff5a 	bl	8009fc4 <prvInsertTimerInActiveList>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d070      	beq.n	800a1f8 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a11c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d065      	beq.n	800a1f8 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	441a      	add	r2, r3
 800a134:	2300      	movs	r3, #0
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	2100      	movs	r1, #0
 800a13c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a13e:	f7ff fdfb 	bl	8009d38 <xTimerGenericCommand>
 800a142:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d156      	bne.n	800a1f8 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	b672      	cpsid	i
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	b662      	cpsie	i
 800a15e:	61bb      	str	r3, [r7, #24]
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	e7fd      	b.n	800a162 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a16c:	f023 0301 	bic.w	r3, r3, #1
 800a170:	b2da      	uxtb	r2, r3
 800a172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a178:	e03f      	b.n	800a1fa <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a180:	f043 0301 	orr.w	r3, r3, #1
 800a184:	b2da      	uxtb	r2, r3
 800a186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a190:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10d      	bne.n	800a1b6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19e:	b672      	cpsid	i
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	b662      	cpsie	i
 800a1ae:	617b      	str	r3, [r7, #20]
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	699a      	ldr	r2, [r3, #24]
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	18d1      	adds	r1, r2, r3
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1c4:	f7ff fefe 	bl	8009fc4 <prvInsertTimerInActiveList>
					break;
 800a1c8:	e017      	b.n	800a1fa <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1d0:	f003 0302 	and.w	r3, r3, #2
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d103      	bne.n	800a1e0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a1d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1da:	f000 fbd3 	bl	800a984 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1de:	e00c      	b.n	800a1fa <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1e6:	f023 0301 	bic.w	r3, r3, #1
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a1f2:	e002      	b.n	800a1fa <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a1f4:	bf00      	nop
 800a1f6:	e000      	b.n	800a1fa <prvProcessReceivedCommands+0x1b2>
					break;
 800a1f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1fa:	4b08      	ldr	r3, [pc, #32]	@ (800a21c <prvProcessReceivedCommands+0x1d4>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	1d39      	adds	r1, r7, #4
 800a200:	2200      	movs	r2, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fa8a 	bl	800871c <xQueueReceive>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f47f af20 	bne.w	800a050 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	3730      	adds	r7, #48	@ 0x30
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	20001778 	.word	0x20001778

0800a220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a226:	e04b      	b.n	800a2c0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a228:	4b2f      	ldr	r3, [pc, #188]	@ (800a2e8 <prvSwitchTimerLists+0xc8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a232:	4b2d      	ldr	r3, [pc, #180]	@ (800a2e8 <prvSwitchTimerLists+0xc8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3304      	adds	r3, #4
 800a240:	4618      	mov	r0, r3
 800a242:	f7fd ff7d 	bl	8008140 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d031      	beq.n	800a2c0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4413      	add	r3, r2
 800a264:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d90e      	bls.n	800a28c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a27a:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e8 <prvSwitchTimerLists+0xc8>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3304      	adds	r3, #4
 800a282:	4619      	mov	r1, r3
 800a284:	4610      	mov	r0, r2
 800a286:	f7fd ff22 	bl	80080ce <vListInsert>
 800a28a:	e019      	b.n	800a2c0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a28c:	2300      	movs	r3, #0
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	2300      	movs	r3, #0
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	2100      	movs	r1, #0
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f7ff fd4e 	bl	8009d38 <xTimerGenericCommand>
 800a29c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10d      	bne.n	800a2c0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a8:	b672      	cpsid	i
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	b662      	cpsie	i
 800a2b8:	603b      	str	r3, [r7, #0]
}
 800a2ba:	bf00      	nop
 800a2bc:	bf00      	nop
 800a2be:	e7fd      	b.n	800a2bc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2c0:	4b09      	ldr	r3, [pc, #36]	@ (800a2e8 <prvSwitchTimerLists+0xc8>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1ae      	bne.n	800a228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2ca:	4b07      	ldr	r3, [pc, #28]	@ (800a2e8 <prvSwitchTimerLists+0xc8>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2d0:	4b06      	ldr	r3, [pc, #24]	@ (800a2ec <prvSwitchTimerLists+0xcc>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a04      	ldr	r2, [pc, #16]	@ (800a2e8 <prvSwitchTimerLists+0xc8>)
 800a2d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2d8:	4a04      	ldr	r2, [pc, #16]	@ (800a2ec <prvSwitchTimerLists+0xcc>)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	6013      	str	r3, [r2, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20001770 	.word	0x20001770
 800a2ec:	20001774 	.word	0x20001774

0800a2f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2f6:	f000 f949 	bl	800a58c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2fa:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <prvCheckForValidListAndQueue+0x60>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d120      	bne.n	800a344 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a302:	4814      	ldr	r0, [pc, #80]	@ (800a354 <prvCheckForValidListAndQueue+0x64>)
 800a304:	f7fd fe92 	bl	800802c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a308:	4813      	ldr	r0, [pc, #76]	@ (800a358 <prvCheckForValidListAndQueue+0x68>)
 800a30a:	f7fd fe8f 	bl	800802c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a30e:	4b13      	ldr	r3, [pc, #76]	@ (800a35c <prvCheckForValidListAndQueue+0x6c>)
 800a310:	4a10      	ldr	r2, [pc, #64]	@ (800a354 <prvCheckForValidListAndQueue+0x64>)
 800a312:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a314:	4b12      	ldr	r3, [pc, #72]	@ (800a360 <prvCheckForValidListAndQueue+0x70>)
 800a316:	4a10      	ldr	r2, [pc, #64]	@ (800a358 <prvCheckForValidListAndQueue+0x68>)
 800a318:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a31a:	2300      	movs	r3, #0
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	4b11      	ldr	r3, [pc, #68]	@ (800a364 <prvCheckForValidListAndQueue+0x74>)
 800a320:	4a11      	ldr	r2, [pc, #68]	@ (800a368 <prvCheckForValidListAndQueue+0x78>)
 800a322:	2110      	movs	r1, #16
 800a324:	200a      	movs	r0, #10
 800a326:	f7fd ffa1 	bl	800826c <xQueueGenericCreateStatic>
 800a32a:	4603      	mov	r3, r0
 800a32c:	4a08      	ldr	r2, [pc, #32]	@ (800a350 <prvCheckForValidListAndQueue+0x60>)
 800a32e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a330:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <prvCheckForValidListAndQueue+0x60>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d005      	beq.n	800a344 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a338:	4b05      	ldr	r3, [pc, #20]	@ (800a350 <prvCheckForValidListAndQueue+0x60>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	490b      	ldr	r1, [pc, #44]	@ (800a36c <prvCheckForValidListAndQueue+0x7c>)
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fbe4 	bl	8008b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a344:	f000 f958 	bl	800a5f8 <vPortExitCritical>
}
 800a348:	bf00      	nop
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20001778 	.word	0x20001778
 800a354:	20001748 	.word	0x20001748
 800a358:	2000175c 	.word	0x2000175c
 800a35c:	20001770 	.word	0x20001770
 800a360:	20001774 	.word	0x20001774
 800a364:	20001824 	.word	0x20001824
 800a368:	20001784 	.word	0x20001784
 800a36c:	0800f794 	.word	0x0800f794

0800a370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3b04      	subs	r3, #4
 800a380:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3b04      	subs	r3, #4
 800a38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f023 0201 	bic.w	r2, r3, #1
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3b04      	subs	r3, #4
 800a39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3a0:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d4 <pxPortInitialiseStack+0x64>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3b14      	subs	r3, #20
 800a3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3b04      	subs	r3, #4
 800a3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f06f 0202 	mvn.w	r2, #2
 800a3be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3b20      	subs	r3, #32
 800a3c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	0800a3d9 	.word	0x0800a3d9

0800a3d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3e2:	4b15      	ldr	r3, [pc, #84]	@ (800a438 <prvTaskExitError+0x60>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	d00d      	beq.n	800a408 <prvTaskExitError+0x30>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f0:	b672      	cpsid	i
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	b662      	cpsie	i
 800a400:	60fb      	str	r3, [r7, #12]
}
 800a402:	bf00      	nop
 800a404:	bf00      	nop
 800a406:	e7fd      	b.n	800a404 <prvTaskExitError+0x2c>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40c:	b672      	cpsid	i
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	b662      	cpsie	i
 800a41c:	60bb      	str	r3, [r7, #8]
}
 800a41e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a420:	bf00      	nop
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0fc      	beq.n	800a422 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000074 	.word	0x20000074
 800a43c:	00000000 	.word	0x00000000

0800a440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a440:	4b07      	ldr	r3, [pc, #28]	@ (800a460 <pxCurrentTCBConst2>)
 800a442:	6819      	ldr	r1, [r3, #0]
 800a444:	6808      	ldr	r0, [r1, #0]
 800a446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44a:	f380 8809 	msr	PSP, r0
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f04f 0000 	mov.w	r0, #0
 800a456:	f380 8811 	msr	BASEPRI, r0
 800a45a:	4770      	bx	lr
 800a45c:	f3af 8000 	nop.w

0800a460 <pxCurrentTCBConst2>:
 800a460:	20001248 	.word	0x20001248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop

0800a468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a468:	4808      	ldr	r0, [pc, #32]	@ (800a48c <prvPortStartFirstTask+0x24>)
 800a46a:	6800      	ldr	r0, [r0, #0]
 800a46c:	6800      	ldr	r0, [r0, #0]
 800a46e:	f380 8808 	msr	MSP, r0
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f380 8814 	msr	CONTROL, r0
 800a47a:	b662      	cpsie	i
 800a47c:	b661      	cpsie	f
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	df00      	svc	0
 800a488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a48a:	bf00      	nop
 800a48c:	e000ed08 	.word	0xe000ed08

0800a490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a496:	4b37      	ldr	r3, [pc, #220]	@ (800a574 <xPortStartScheduler+0xe4>)
 800a498:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	22ff      	movs	r2, #255	@ 0xff
 800a4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a578 <xPortStartScheduler+0xe8>)
 800a4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4be:	4b2f      	ldr	r3, [pc, #188]	@ (800a57c <xPortStartScheduler+0xec>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4c4:	e009      	b.n	800a4da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a4c6:	4b2d      	ldr	r3, [pc, #180]	@ (800a57c <xPortStartScheduler+0xec>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	4a2b      	ldr	r2, [pc, #172]	@ (800a57c <xPortStartScheduler+0xec>)
 800a4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4e2:	2b80      	cmp	r3, #128	@ 0x80
 800a4e4:	d0ef      	beq.n	800a4c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4e6:	4b25      	ldr	r3, [pc, #148]	@ (800a57c <xPortStartScheduler+0xec>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1c3 0307 	rsb	r3, r3, #7
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d00d      	beq.n	800a50e <xPortStartScheduler+0x7e>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f6:	b672      	cpsid	i
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	b662      	cpsie	i
 800a506:	60bb      	str	r3, [r7, #8]
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	e7fd      	b.n	800a50a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a50e:	4b1b      	ldr	r3, [pc, #108]	@ (800a57c <xPortStartScheduler+0xec>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	021b      	lsls	r3, r3, #8
 800a514:	4a19      	ldr	r2, [pc, #100]	@ (800a57c <xPortStartScheduler+0xec>)
 800a516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a518:	4b18      	ldr	r3, [pc, #96]	@ (800a57c <xPortStartScheduler+0xec>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a520:	4a16      	ldr	r2, [pc, #88]	@ (800a57c <xPortStartScheduler+0xec>)
 800a522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	b2da      	uxtb	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a52c:	4b14      	ldr	r3, [pc, #80]	@ (800a580 <xPortStartScheduler+0xf0>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a13      	ldr	r2, [pc, #76]	@ (800a580 <xPortStartScheduler+0xf0>)
 800a532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a538:	4b11      	ldr	r3, [pc, #68]	@ (800a580 <xPortStartScheduler+0xf0>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a10      	ldr	r2, [pc, #64]	@ (800a580 <xPortStartScheduler+0xf0>)
 800a53e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a544:	f000 f8dc 	bl	800a700 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a548:	4b0e      	ldr	r3, [pc, #56]	@ (800a584 <xPortStartScheduler+0xf4>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a54e:	f000 f8fb 	bl	800a748 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a552:	4b0d      	ldr	r3, [pc, #52]	@ (800a588 <xPortStartScheduler+0xf8>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a0c      	ldr	r2, [pc, #48]	@ (800a588 <xPortStartScheduler+0xf8>)
 800a558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a55c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a55e:	f7ff ff83 	bl	800a468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a562:	f7ff f82b 	bl	80095bc <vTaskSwitchContext>
	prvTaskExitError();
 800a566:	f7ff ff37 	bl	800a3d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	e000e400 	.word	0xe000e400
 800a578:	20001874 	.word	0x20001874
 800a57c:	20001878 	.word	0x20001878
 800a580:	e000ed20 	.word	0xe000ed20
 800a584:	20000074 	.word	0x20000074
 800a588:	e000ef34 	.word	0xe000ef34

0800a58c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	b672      	cpsid	i
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	b662      	cpsie	i
 800a5a6:	607b      	str	r3, [r7, #4]
}
 800a5a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5aa:	4b11      	ldr	r3, [pc, #68]	@ (800a5f0 <vPortEnterCritical+0x64>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	4a0f      	ldr	r2, [pc, #60]	@ (800a5f0 <vPortEnterCritical+0x64>)
 800a5b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f0 <vPortEnterCritical+0x64>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d112      	bne.n	800a5e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <vPortEnterCritical+0x68>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00d      	beq.n	800a5e2 <vPortEnterCritical+0x56>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ca:	b672      	cpsid	i
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	b662      	cpsie	i
 800a5da:	603b      	str	r3, [r7, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	bf00      	nop
 800a5e0:	e7fd      	b.n	800a5de <vPortEnterCritical+0x52>
	}
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	20000074 	.word	0x20000074
 800a5f4:	e000ed04 	.word	0xe000ed04

0800a5f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5fe:	4b13      	ldr	r3, [pc, #76]	@ (800a64c <vPortExitCritical+0x54>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10d      	bne.n	800a622 <vPortExitCritical+0x2a>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60a:	b672      	cpsid	i
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	b662      	cpsie	i
 800a61a:	607b      	str	r3, [r7, #4]
}
 800a61c:	bf00      	nop
 800a61e:	bf00      	nop
 800a620:	e7fd      	b.n	800a61e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a622:	4b0a      	ldr	r3, [pc, #40]	@ (800a64c <vPortExitCritical+0x54>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3b01      	subs	r3, #1
 800a628:	4a08      	ldr	r2, [pc, #32]	@ (800a64c <vPortExitCritical+0x54>)
 800a62a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a62c:	4b07      	ldr	r3, [pc, #28]	@ (800a64c <vPortExitCritical+0x54>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d105      	bne.n	800a640 <vPortExitCritical+0x48>
 800a634:	2300      	movs	r3, #0
 800a636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	f383 8811 	msr	BASEPRI, r3
}
 800a63e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20000074 	.word	0x20000074

0800a650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a650:	f3ef 8009 	mrs	r0, PSP
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4b15      	ldr	r3, [pc, #84]	@ (800a6b0 <pxCurrentTCBConst>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f01e 0f10 	tst.w	lr, #16
 800a660:	bf08      	it	eq
 800a662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a674:	b672      	cpsid	i
 800a676:	f380 8811 	msr	BASEPRI, r0
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	b662      	cpsie	i
 800a684:	f7fe ff9a 	bl	80095bc <vTaskSwitchContext>
 800a688:	f04f 0000 	mov.w	r0, #0
 800a68c:	f380 8811 	msr	BASEPRI, r0
 800a690:	bc09      	pop	{r0, r3}
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69a:	f01e 0f10 	tst.w	lr, #16
 800a69e:	bf08      	it	eq
 800a6a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6a4:	f380 8809 	msr	PSP, r0
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop

0800a6b0 <pxCurrentTCBConst>:
 800a6b0:	20001248 	.word	0x20001248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c2:	b672      	cpsid	i
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	b662      	cpsie	i
 800a6d2:	607b      	str	r3, [r7, #4]
}
 800a6d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6d6:	f7fe feb5 	bl	8009444 <xTaskIncrementTick>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6e0:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <SysTick_Handler+0x44>)
 800a6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f383 8811 	msr	BASEPRI, r3
}
 800a6f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	e000ed04 	.word	0xe000ed04

0800a700 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a704:	4b0b      	ldr	r3, [pc, #44]	@ (800a734 <vPortSetupTimerInterrupt+0x34>)
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a70a:	4b0b      	ldr	r3, [pc, #44]	@ (800a738 <vPortSetupTimerInterrupt+0x38>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a710:	4b0a      	ldr	r3, [pc, #40]	@ (800a73c <vPortSetupTimerInterrupt+0x3c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a0a      	ldr	r2, [pc, #40]	@ (800a740 <vPortSetupTimerInterrupt+0x40>)
 800a716:	fba2 2303 	umull	r2, r3, r2, r3
 800a71a:	099b      	lsrs	r3, r3, #6
 800a71c:	4a09      	ldr	r2, [pc, #36]	@ (800a744 <vPortSetupTimerInterrupt+0x44>)
 800a71e:	3b01      	subs	r3, #1
 800a720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a722:	4b04      	ldr	r3, [pc, #16]	@ (800a734 <vPortSetupTimerInterrupt+0x34>)
 800a724:	2207      	movs	r2, #7
 800a726:	601a      	str	r2, [r3, #0]
}
 800a728:	bf00      	nop
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	e000e010 	.word	0xe000e010
 800a738:	e000e018 	.word	0xe000e018
 800a73c:	2000005c 	.word	0x2000005c
 800a740:	10624dd3 	.word	0x10624dd3
 800a744:	e000e014 	.word	0xe000e014

0800a748 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a748:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a758 <vPortEnableVFP+0x10>
 800a74c:	6801      	ldr	r1, [r0, #0]
 800a74e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a752:	6001      	str	r1, [r0, #0]
 800a754:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a756:	bf00      	nop
 800a758:	e000ed88 	.word	0xe000ed88

0800a75c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a762:	f3ef 8305 	mrs	r3, IPSR
 800a766:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b0f      	cmp	r3, #15
 800a76c:	d917      	bls.n	800a79e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a76e:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d8 <vPortValidateInterruptPriority+0x7c>)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a778:	4b18      	ldr	r3, [pc, #96]	@ (800a7dc <vPortValidateInterruptPriority+0x80>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	7afa      	ldrb	r2, [r7, #11]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d20d      	bcs.n	800a79e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a786:	b672      	cpsid	i
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	b662      	cpsie	i
 800a796:	607b      	str	r3, [r7, #4]
}
 800a798:	bf00      	nop
 800a79a:	bf00      	nop
 800a79c:	e7fd      	b.n	800a79a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a79e:	4b10      	ldr	r3, [pc, #64]	@ (800a7e0 <vPortValidateInterruptPriority+0x84>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a7e4 <vPortValidateInterruptPriority+0x88>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d90d      	bls.n	800a7ca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b2:	b672      	cpsid	i
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	b662      	cpsie	i
 800a7c2:	603b      	str	r3, [r7, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop
 800a7c8:	e7fd      	b.n	800a7c6 <vPortValidateInterruptPriority+0x6a>
	}
 800a7ca:	bf00      	nop
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	e000e3f0 	.word	0xe000e3f0
 800a7dc:	20001874 	.word	0x20001874
 800a7e0:	e000ed0c 	.word	0xe000ed0c
 800a7e4:	20001878 	.word	0x20001878

0800a7e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b08a      	sub	sp, #40	@ 0x28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7f4:	f7fe fd68 	bl	80092c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7f8:	4b5d      	ldr	r3, [pc, #372]	@ (800a970 <pvPortMalloc+0x188>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a800:	f000 f920 	bl	800aa44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a804:	4b5b      	ldr	r3, [pc, #364]	@ (800a974 <pvPortMalloc+0x18c>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f040 8094 	bne.w	800a93a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d020      	beq.n	800a85a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a818:	2208      	movs	r2, #8
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4413      	add	r3, r2
 800a81e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	2b00      	cmp	r3, #0
 800a828:	d017      	beq.n	800a85a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f023 0307 	bic.w	r3, r3, #7
 800a830:	3308      	adds	r3, #8
 800a832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00d      	beq.n	800a85a <pvPortMalloc+0x72>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	b672      	cpsid	i
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	b662      	cpsie	i
 800a852:	617b      	str	r3, [r7, #20]
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop
 800a858:	e7fd      	b.n	800a856 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d06c      	beq.n	800a93a <pvPortMalloc+0x152>
 800a860:	4b45      	ldr	r3, [pc, #276]	@ (800a978 <pvPortMalloc+0x190>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d867      	bhi.n	800a93a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a86a:	4b44      	ldr	r3, [pc, #272]	@ (800a97c <pvPortMalloc+0x194>)
 800a86c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a86e:	4b43      	ldr	r3, [pc, #268]	@ (800a97c <pvPortMalloc+0x194>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a874:	e004      	b.n	800a880 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	429a      	cmp	r2, r3
 800a888:	d903      	bls.n	800a892 <pvPortMalloc+0xaa>
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f1      	bne.n	800a876 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a892:	4b37      	ldr	r3, [pc, #220]	@ (800a970 <pvPortMalloc+0x188>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a898:	429a      	cmp	r2, r3
 800a89a:	d04e      	beq.n	800a93a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2208      	movs	r2, #8
 800a8a2:	4413      	add	r3, r2
 800a8a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	1ad2      	subs	r2, r2, r3
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d922      	bls.n	800a904 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00d      	beq.n	800a8ec <pvPortMalloc+0x104>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d4:	b672      	cpsid	i
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	b662      	cpsie	i
 800a8e4:	613b      	str	r3, [r7, #16]
}
 800a8e6:	bf00      	nop
 800a8e8:	bf00      	nop
 800a8ea:	e7fd      	b.n	800a8e8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	1ad2      	subs	r2, r2, r3
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8fe:	69b8      	ldr	r0, [r7, #24]
 800a900:	f000 f902 	bl	800ab08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a904:	4b1c      	ldr	r3, [pc, #112]	@ (800a978 <pvPortMalloc+0x190>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	4a1a      	ldr	r2, [pc, #104]	@ (800a978 <pvPortMalloc+0x190>)
 800a910:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a912:	4b19      	ldr	r3, [pc, #100]	@ (800a978 <pvPortMalloc+0x190>)
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	4b1a      	ldr	r3, [pc, #104]	@ (800a980 <pvPortMalloc+0x198>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d203      	bcs.n	800a926 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a91e:	4b16      	ldr	r3, [pc, #88]	@ (800a978 <pvPortMalloc+0x190>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a17      	ldr	r2, [pc, #92]	@ (800a980 <pvPortMalloc+0x198>)
 800a924:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	4b12      	ldr	r3, [pc, #72]	@ (800a974 <pvPortMalloc+0x18c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	431a      	orrs	r2, r3
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a936:	2200      	movs	r2, #0
 800a938:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a93a:	f7fe fcd3 	bl	80092e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00d      	beq.n	800a964 <pvPortMalloc+0x17c>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94c:	b672      	cpsid	i
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	b662      	cpsie	i
 800a95c:	60fb      	str	r3, [r7, #12]
}
 800a95e:	bf00      	nop
 800a960:	bf00      	nop
 800a962:	e7fd      	b.n	800a960 <pvPortMalloc+0x178>
	return pvReturn;
 800a964:	69fb      	ldr	r3, [r7, #28]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3728      	adds	r7, #40	@ 0x28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20005484 	.word	0x20005484
 800a974:	20005490 	.word	0x20005490
 800a978:	20005488 	.word	0x20005488
 800a97c:	2000547c 	.word	0x2000547c
 800a980:	2000548c 	.word	0x2000548c

0800a984 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d04e      	beq.n	800aa34 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a996:	2308      	movs	r3, #8
 800a998:	425b      	negs	r3, r3
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	4413      	add	r3, r2
 800a99e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	4b24      	ldr	r3, [pc, #144]	@ (800aa3c <vPortFree+0xb8>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10d      	bne.n	800a9ce <vPortFree+0x4a>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b6:	b672      	cpsid	i
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	b662      	cpsie	i
 800a9c6:	60fb      	str	r3, [r7, #12]
}
 800a9c8:	bf00      	nop
 800a9ca:	bf00      	nop
 800a9cc:	e7fd      	b.n	800a9ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00d      	beq.n	800a9f2 <vPortFree+0x6e>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	b672      	cpsid	i
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	b662      	cpsie	i
 800a9ea:	60bb      	str	r3, [r7, #8]
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	e7fd      	b.n	800a9ee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	4b11      	ldr	r3, [pc, #68]	@ (800aa3c <vPortFree+0xb8>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d019      	beq.n	800aa34 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d115      	bne.n	800aa34 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	685a      	ldr	r2, [r3, #4]
 800aa0c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa3c <vPortFree+0xb8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	43db      	mvns	r3, r3
 800aa12:	401a      	ands	r2, r3
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa18:	f7fe fc56 	bl	80092c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	4b07      	ldr	r3, [pc, #28]	@ (800aa40 <vPortFree+0xbc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4413      	add	r3, r2
 800aa26:	4a06      	ldr	r2, [pc, #24]	@ (800aa40 <vPortFree+0xbc>)
 800aa28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa2a:	6938      	ldr	r0, [r7, #16]
 800aa2c:	f000 f86c 	bl	800ab08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aa30:	f7fe fc58 	bl	80092e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa34:	bf00      	nop
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20005490 	.word	0x20005490
 800aa40:	20005488 	.word	0x20005488

0800aa44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa4a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aa4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa50:	4b27      	ldr	r3, [pc, #156]	@ (800aaf0 <prvHeapInit+0xac>)
 800aa52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f003 0307 	and.w	r3, r3, #7
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00c      	beq.n	800aa78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3307      	adds	r3, #7
 800aa62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0307 	bic.w	r3, r3, #7
 800aa6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	4a1f      	ldr	r2, [pc, #124]	@ (800aaf0 <prvHeapInit+0xac>)
 800aa74:	4413      	add	r3, r2
 800aa76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa7c:	4a1d      	ldr	r2, [pc, #116]	@ (800aaf4 <prvHeapInit+0xb0>)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa82:	4b1c      	ldr	r3, [pc, #112]	@ (800aaf4 <prvHeapInit+0xb0>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa90:	2208      	movs	r2, #8
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 0307 	bic.w	r3, r3, #7
 800aa9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4a15      	ldr	r2, [pc, #84]	@ (800aaf8 <prvHeapInit+0xb4>)
 800aaa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aaa6:	4b14      	ldr	r3, [pc, #80]	@ (800aaf8 <prvHeapInit+0xb4>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aaae:	4b12      	ldr	r3, [pc, #72]	@ (800aaf8 <prvHeapInit+0xb4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	1ad2      	subs	r2, r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aac4:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf8 <prvHeapInit+0xb4>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	4a0a      	ldr	r2, [pc, #40]	@ (800aafc <prvHeapInit+0xb8>)
 800aad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	4a09      	ldr	r2, [pc, #36]	@ (800ab00 <prvHeapInit+0xbc>)
 800aada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aadc:	4b09      	ldr	r3, [pc, #36]	@ (800ab04 <prvHeapInit+0xc0>)
 800aade:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	2000187c 	.word	0x2000187c
 800aaf4:	2000547c 	.word	0x2000547c
 800aaf8:	20005484 	.word	0x20005484
 800aafc:	2000548c 	.word	0x2000548c
 800ab00:	20005488 	.word	0x20005488
 800ab04:	20005490 	.word	0x20005490

0800ab08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab10:	4b28      	ldr	r3, [pc, #160]	@ (800abb4 <prvInsertBlockIntoFreeList+0xac>)
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	e002      	b.n	800ab1c <prvInsertBlockIntoFreeList+0x14>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d8f7      	bhi.n	800ab16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	4413      	add	r3, r2
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d108      	bne.n	800ab4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	441a      	add	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	441a      	add	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d118      	bne.n	800ab90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b15      	ldr	r3, [pc, #84]	@ (800abb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d00d      	beq.n	800ab86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	441a      	add	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	e008      	b.n	800ab98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab86:	4b0c      	ldr	r3, [pc, #48]	@ (800abb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	e003      	b.n	800ab98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d002      	beq.n	800aba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aba6:	bf00      	nop
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	2000547c 	.word	0x2000547c
 800abb8:	20005484 	.word	0x20005484

0800abbc <_strtol_l.constprop.0>:
 800abbc:	2b24      	cmp	r3, #36	@ 0x24
 800abbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc2:	4686      	mov	lr, r0
 800abc4:	4690      	mov	r8, r2
 800abc6:	d801      	bhi.n	800abcc <_strtol_l.constprop.0+0x10>
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d106      	bne.n	800abda <_strtol_l.constprop.0+0x1e>
 800abcc:	f001 f882 	bl	800bcd4 <__errno>
 800abd0:	2316      	movs	r3, #22
 800abd2:	6003      	str	r3, [r0, #0]
 800abd4:	2000      	movs	r0, #0
 800abd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abda:	4834      	ldr	r0, [pc, #208]	@ (800acac <_strtol_l.constprop.0+0xf0>)
 800abdc:	460d      	mov	r5, r1
 800abde:	462a      	mov	r2, r5
 800abe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abe4:	5d06      	ldrb	r6, [r0, r4]
 800abe6:	f016 0608 	ands.w	r6, r6, #8
 800abea:	d1f8      	bne.n	800abde <_strtol_l.constprop.0+0x22>
 800abec:	2c2d      	cmp	r4, #45	@ 0x2d
 800abee:	d12d      	bne.n	800ac4c <_strtol_l.constprop.0+0x90>
 800abf0:	782c      	ldrb	r4, [r5, #0]
 800abf2:	2601      	movs	r6, #1
 800abf4:	1c95      	adds	r5, r2, #2
 800abf6:	f033 0210 	bics.w	r2, r3, #16
 800abfa:	d109      	bne.n	800ac10 <_strtol_l.constprop.0+0x54>
 800abfc:	2c30      	cmp	r4, #48	@ 0x30
 800abfe:	d12a      	bne.n	800ac56 <_strtol_l.constprop.0+0x9a>
 800ac00:	782a      	ldrb	r2, [r5, #0]
 800ac02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac06:	2a58      	cmp	r2, #88	@ 0x58
 800ac08:	d125      	bne.n	800ac56 <_strtol_l.constprop.0+0x9a>
 800ac0a:	786c      	ldrb	r4, [r5, #1]
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	3502      	adds	r5, #2
 800ac10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ac14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac18:	2200      	movs	r2, #0
 800ac1a:	fbbc f9f3 	udiv	r9, ip, r3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac28:	2f09      	cmp	r7, #9
 800ac2a:	d81b      	bhi.n	800ac64 <_strtol_l.constprop.0+0xa8>
 800ac2c:	463c      	mov	r4, r7
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	dd27      	ble.n	800ac82 <_strtol_l.constprop.0+0xc6>
 800ac32:	1c57      	adds	r7, r2, #1
 800ac34:	d007      	beq.n	800ac46 <_strtol_l.constprop.0+0x8a>
 800ac36:	4581      	cmp	r9, r0
 800ac38:	d320      	bcc.n	800ac7c <_strtol_l.constprop.0+0xc0>
 800ac3a:	d101      	bne.n	800ac40 <_strtol_l.constprop.0+0x84>
 800ac3c:	45a2      	cmp	sl, r4
 800ac3e:	db1d      	blt.n	800ac7c <_strtol_l.constprop.0+0xc0>
 800ac40:	fb00 4003 	mla	r0, r0, r3, r4
 800ac44:	2201      	movs	r2, #1
 800ac46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac4a:	e7eb      	b.n	800ac24 <_strtol_l.constprop.0+0x68>
 800ac4c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac4e:	bf04      	itt	eq
 800ac50:	782c      	ldrbeq	r4, [r5, #0]
 800ac52:	1c95      	addeq	r5, r2, #2
 800ac54:	e7cf      	b.n	800abf6 <_strtol_l.constprop.0+0x3a>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1da      	bne.n	800ac10 <_strtol_l.constprop.0+0x54>
 800ac5a:	2c30      	cmp	r4, #48	@ 0x30
 800ac5c:	bf0c      	ite	eq
 800ac5e:	2308      	moveq	r3, #8
 800ac60:	230a      	movne	r3, #10
 800ac62:	e7d5      	b.n	800ac10 <_strtol_l.constprop.0+0x54>
 800ac64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac68:	2f19      	cmp	r7, #25
 800ac6a:	d801      	bhi.n	800ac70 <_strtol_l.constprop.0+0xb4>
 800ac6c:	3c37      	subs	r4, #55	@ 0x37
 800ac6e:	e7de      	b.n	800ac2e <_strtol_l.constprop.0+0x72>
 800ac70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac74:	2f19      	cmp	r7, #25
 800ac76:	d804      	bhi.n	800ac82 <_strtol_l.constprop.0+0xc6>
 800ac78:	3c57      	subs	r4, #87	@ 0x57
 800ac7a:	e7d8      	b.n	800ac2e <_strtol_l.constprop.0+0x72>
 800ac7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac80:	e7e1      	b.n	800ac46 <_strtol_l.constprop.0+0x8a>
 800ac82:	1c53      	adds	r3, r2, #1
 800ac84:	d108      	bne.n	800ac98 <_strtol_l.constprop.0+0xdc>
 800ac86:	2322      	movs	r3, #34	@ 0x22
 800ac88:	f8ce 3000 	str.w	r3, [lr]
 800ac8c:	4660      	mov	r0, ip
 800ac8e:	f1b8 0f00 	cmp.w	r8, #0
 800ac92:	d0a0      	beq.n	800abd6 <_strtol_l.constprop.0+0x1a>
 800ac94:	1e69      	subs	r1, r5, #1
 800ac96:	e006      	b.n	800aca6 <_strtol_l.constprop.0+0xea>
 800ac98:	b106      	cbz	r6, 800ac9c <_strtol_l.constprop.0+0xe0>
 800ac9a:	4240      	negs	r0, r0
 800ac9c:	f1b8 0f00 	cmp.w	r8, #0
 800aca0:	d099      	beq.n	800abd6 <_strtol_l.constprop.0+0x1a>
 800aca2:	2a00      	cmp	r2, #0
 800aca4:	d1f6      	bne.n	800ac94 <_strtol_l.constprop.0+0xd8>
 800aca6:	f8c8 1000 	str.w	r1, [r8]
 800acaa:	e794      	b.n	800abd6 <_strtol_l.constprop.0+0x1a>
 800acac:	0800f7fd 	.word	0x0800f7fd

0800acb0 <_strtol_r>:
 800acb0:	f7ff bf84 	b.w	800abbc <_strtol_l.constprop.0>

0800acb4 <__cvt>:
 800acb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb6:	ed2d 8b02 	vpush	{d8}
 800acba:	eeb0 8b40 	vmov.f64	d8, d0
 800acbe:	b085      	sub	sp, #20
 800acc0:	4617      	mov	r7, r2
 800acc2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800acc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acc6:	ee18 2a90 	vmov	r2, s17
 800acca:	f025 0520 	bic.w	r5, r5, #32
 800acce:	2a00      	cmp	r2, #0
 800acd0:	bfb6      	itet	lt
 800acd2:	222d      	movlt	r2, #45	@ 0x2d
 800acd4:	2200      	movge	r2, #0
 800acd6:	eeb1 8b40 	vneglt.f64	d8, d0
 800acda:	2d46      	cmp	r5, #70	@ 0x46
 800acdc:	460c      	mov	r4, r1
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	d004      	beq.n	800acec <__cvt+0x38>
 800ace2:	2d45      	cmp	r5, #69	@ 0x45
 800ace4:	d100      	bne.n	800ace8 <__cvt+0x34>
 800ace6:	3401      	adds	r4, #1
 800ace8:	2102      	movs	r1, #2
 800acea:	e000      	b.n	800acee <__cvt+0x3a>
 800acec:	2103      	movs	r1, #3
 800acee:	ab03      	add	r3, sp, #12
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	ab02      	add	r3, sp, #8
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4622      	mov	r2, r4
 800acf8:	4633      	mov	r3, r6
 800acfa:	eeb0 0b48 	vmov.f64	d0, d8
 800acfe:	f001 f8b3 	bl	800be68 <_dtoa_r>
 800ad02:	2d47      	cmp	r5, #71	@ 0x47
 800ad04:	d114      	bne.n	800ad30 <__cvt+0x7c>
 800ad06:	07fb      	lsls	r3, r7, #31
 800ad08:	d50a      	bpl.n	800ad20 <__cvt+0x6c>
 800ad0a:	1902      	adds	r2, r0, r4
 800ad0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad14:	bf08      	it	eq
 800ad16:	9203      	streq	r2, [sp, #12]
 800ad18:	2130      	movs	r1, #48	@ 0x30
 800ad1a:	9b03      	ldr	r3, [sp, #12]
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d319      	bcc.n	800ad54 <__cvt+0xa0>
 800ad20:	9b03      	ldr	r3, [sp, #12]
 800ad22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad24:	1a1b      	subs	r3, r3, r0
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	b005      	add	sp, #20
 800ad2a:	ecbd 8b02 	vpop	{d8}
 800ad2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad30:	2d46      	cmp	r5, #70	@ 0x46
 800ad32:	eb00 0204 	add.w	r2, r0, r4
 800ad36:	d1e9      	bne.n	800ad0c <__cvt+0x58>
 800ad38:	7803      	ldrb	r3, [r0, #0]
 800ad3a:	2b30      	cmp	r3, #48	@ 0x30
 800ad3c:	d107      	bne.n	800ad4e <__cvt+0x9a>
 800ad3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad46:	bf1c      	itt	ne
 800ad48:	f1c4 0401 	rsbne	r4, r4, #1
 800ad4c:	6034      	strne	r4, [r6, #0]
 800ad4e:	6833      	ldr	r3, [r6, #0]
 800ad50:	441a      	add	r2, r3
 800ad52:	e7db      	b.n	800ad0c <__cvt+0x58>
 800ad54:	1c5c      	adds	r4, r3, #1
 800ad56:	9403      	str	r4, [sp, #12]
 800ad58:	7019      	strb	r1, [r3, #0]
 800ad5a:	e7de      	b.n	800ad1a <__cvt+0x66>

0800ad5c <__exponent>:
 800ad5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	bfba      	itte	lt
 800ad62:	4249      	neglt	r1, r1
 800ad64:	232d      	movlt	r3, #45	@ 0x2d
 800ad66:	232b      	movge	r3, #43	@ 0x2b
 800ad68:	2909      	cmp	r1, #9
 800ad6a:	7002      	strb	r2, [r0, #0]
 800ad6c:	7043      	strb	r3, [r0, #1]
 800ad6e:	dd29      	ble.n	800adc4 <__exponent+0x68>
 800ad70:	f10d 0307 	add.w	r3, sp, #7
 800ad74:	461d      	mov	r5, r3
 800ad76:	270a      	movs	r7, #10
 800ad78:	461a      	mov	r2, r3
 800ad7a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad7e:	fb07 1416 	mls	r4, r7, r6, r1
 800ad82:	3430      	adds	r4, #48	@ 0x30
 800ad84:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad88:	460c      	mov	r4, r1
 800ad8a:	2c63      	cmp	r4, #99	@ 0x63
 800ad8c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad90:	4631      	mov	r1, r6
 800ad92:	dcf1      	bgt.n	800ad78 <__exponent+0x1c>
 800ad94:	3130      	adds	r1, #48	@ 0x30
 800ad96:	1e94      	subs	r4, r2, #2
 800ad98:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad9c:	1c41      	adds	r1, r0, #1
 800ad9e:	4623      	mov	r3, r4
 800ada0:	42ab      	cmp	r3, r5
 800ada2:	d30a      	bcc.n	800adba <__exponent+0x5e>
 800ada4:	f10d 0309 	add.w	r3, sp, #9
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	42ac      	cmp	r4, r5
 800adac:	bf88      	it	hi
 800adae:	2300      	movhi	r3, #0
 800adb0:	3302      	adds	r3, #2
 800adb2:	4403      	add	r3, r0
 800adb4:	1a18      	subs	r0, r3, r0
 800adb6:	b003      	add	sp, #12
 800adb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adba:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adbe:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adc2:	e7ed      	b.n	800ada0 <__exponent+0x44>
 800adc4:	2330      	movs	r3, #48	@ 0x30
 800adc6:	3130      	adds	r1, #48	@ 0x30
 800adc8:	7083      	strb	r3, [r0, #2]
 800adca:	70c1      	strb	r1, [r0, #3]
 800adcc:	1d03      	adds	r3, r0, #4
 800adce:	e7f1      	b.n	800adb4 <__exponent+0x58>

0800add0 <_printf_float>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	b08d      	sub	sp, #52	@ 0x34
 800add6:	460c      	mov	r4, r1
 800add8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800addc:	4616      	mov	r6, r2
 800adde:	461f      	mov	r7, r3
 800ade0:	4605      	mov	r5, r0
 800ade2:	f000 fed7 	bl	800bb94 <_localeconv_r>
 800ade6:	f8d0 b000 	ldr.w	fp, [r0]
 800adea:	4658      	mov	r0, fp
 800adec:	f7f5 fa78 	bl	80002e0 <strlen>
 800adf0:	2300      	movs	r3, #0
 800adf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800adf4:	f8d8 3000 	ldr.w	r3, [r8]
 800adf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800adfc:	6822      	ldr	r2, [r4, #0]
 800adfe:	9005      	str	r0, [sp, #20]
 800ae00:	3307      	adds	r3, #7
 800ae02:	f023 0307 	bic.w	r3, r3, #7
 800ae06:	f103 0108 	add.w	r1, r3, #8
 800ae0a:	f8c8 1000 	str.w	r1, [r8]
 800ae0e:	ed93 0b00 	vldr	d0, [r3]
 800ae12:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b070 <_printf_float+0x2a0>
 800ae16:	eeb0 7bc0 	vabs.f64	d7, d0
 800ae1a:	eeb4 7b46 	vcmp.f64	d7, d6
 800ae1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae22:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ae26:	dd24      	ble.n	800ae72 <_printf_float+0xa2>
 800ae28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae30:	d502      	bpl.n	800ae38 <_printf_float+0x68>
 800ae32:	232d      	movs	r3, #45	@ 0x2d
 800ae34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae38:	498f      	ldr	r1, [pc, #572]	@ (800b078 <_printf_float+0x2a8>)
 800ae3a:	4b90      	ldr	r3, [pc, #576]	@ (800b07c <_printf_float+0x2ac>)
 800ae3c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ae40:	bf94      	ite	ls
 800ae42:	4688      	movls	r8, r1
 800ae44:	4698      	movhi	r8, r3
 800ae46:	f022 0204 	bic.w	r2, r2, #4
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	6123      	str	r3, [r4, #16]
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	f04f 0a00 	mov.w	sl, #0
 800ae54:	9700      	str	r7, [sp, #0]
 800ae56:	4633      	mov	r3, r6
 800ae58:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f9d1 	bl	800b204 <_printf_common>
 800ae62:	3001      	adds	r0, #1
 800ae64:	f040 8089 	bne.w	800af7a <_printf_float+0x1aa>
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6c:	b00d      	add	sp, #52	@ 0x34
 800ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae72:	eeb4 0b40 	vcmp.f64	d0, d0
 800ae76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7a:	d709      	bvc.n	800ae90 <_printf_float+0xc0>
 800ae7c:	ee10 3a90 	vmov	r3, s1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfbc      	itt	lt
 800ae84:	232d      	movlt	r3, #45	@ 0x2d
 800ae86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ae8a:	497d      	ldr	r1, [pc, #500]	@ (800b080 <_printf_float+0x2b0>)
 800ae8c:	4b7d      	ldr	r3, [pc, #500]	@ (800b084 <_printf_float+0x2b4>)
 800ae8e:	e7d5      	b.n	800ae3c <_printf_float+0x6c>
 800ae90:	6863      	ldr	r3, [r4, #4]
 800ae92:	1c59      	adds	r1, r3, #1
 800ae94:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ae98:	d139      	bne.n	800af0e <_printf_float+0x13e>
 800ae9a:	2306      	movs	r3, #6
 800ae9c:	6063      	str	r3, [r4, #4]
 800ae9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aea2:	2300      	movs	r3, #0
 800aea4:	6022      	str	r2, [r4, #0]
 800aea6:	9303      	str	r3, [sp, #12]
 800aea8:	ab0a      	add	r3, sp, #40	@ 0x28
 800aeaa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800aeae:	ab09      	add	r3, sp, #36	@ 0x24
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	6861      	ldr	r1, [r4, #4]
 800aeb4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f7ff fefb 	bl	800acb4 <__cvt>
 800aebe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aec4:	4680      	mov	r8, r0
 800aec6:	d129      	bne.n	800af1c <_printf_float+0x14c>
 800aec8:	1cc8      	adds	r0, r1, #3
 800aeca:	db02      	blt.n	800aed2 <_printf_float+0x102>
 800aecc:	6863      	ldr	r3, [r4, #4]
 800aece:	4299      	cmp	r1, r3
 800aed0:	dd41      	ble.n	800af56 <_printf_float+0x186>
 800aed2:	f1a9 0902 	sub.w	r9, r9, #2
 800aed6:	fa5f f989 	uxtb.w	r9, r9
 800aeda:	3901      	subs	r1, #1
 800aedc:	464a      	mov	r2, r9
 800aede:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aee2:	9109      	str	r1, [sp, #36]	@ 0x24
 800aee4:	f7ff ff3a 	bl	800ad5c <__exponent>
 800aee8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aeea:	1813      	adds	r3, r2, r0
 800aeec:	2a01      	cmp	r2, #1
 800aeee:	4682      	mov	sl, r0
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	dc02      	bgt.n	800aefa <_printf_float+0x12a>
 800aef4:	6822      	ldr	r2, [r4, #0]
 800aef6:	07d2      	lsls	r2, r2, #31
 800aef8:	d501      	bpl.n	800aefe <_printf_float+0x12e>
 800aefa:	3301      	adds	r3, #1
 800aefc:	6123      	str	r3, [r4, #16]
 800aefe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0a6      	beq.n	800ae54 <_printf_float+0x84>
 800af06:	232d      	movs	r3, #45	@ 0x2d
 800af08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af0c:	e7a2      	b.n	800ae54 <_printf_float+0x84>
 800af0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af12:	d1c4      	bne.n	800ae9e <_printf_float+0xce>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1c2      	bne.n	800ae9e <_printf_float+0xce>
 800af18:	2301      	movs	r3, #1
 800af1a:	e7bf      	b.n	800ae9c <_printf_float+0xcc>
 800af1c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800af20:	d9db      	bls.n	800aeda <_printf_float+0x10a>
 800af22:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800af26:	d118      	bne.n	800af5a <_printf_float+0x18a>
 800af28:	2900      	cmp	r1, #0
 800af2a:	6863      	ldr	r3, [r4, #4]
 800af2c:	dd0b      	ble.n	800af46 <_printf_float+0x176>
 800af2e:	6121      	str	r1, [r4, #16]
 800af30:	b913      	cbnz	r3, 800af38 <_printf_float+0x168>
 800af32:	6822      	ldr	r2, [r4, #0]
 800af34:	07d0      	lsls	r0, r2, #31
 800af36:	d502      	bpl.n	800af3e <_printf_float+0x16e>
 800af38:	3301      	adds	r3, #1
 800af3a:	440b      	add	r3, r1
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af40:	f04f 0a00 	mov.w	sl, #0
 800af44:	e7db      	b.n	800aefe <_printf_float+0x12e>
 800af46:	b913      	cbnz	r3, 800af4e <_printf_float+0x17e>
 800af48:	6822      	ldr	r2, [r4, #0]
 800af4a:	07d2      	lsls	r2, r2, #31
 800af4c:	d501      	bpl.n	800af52 <_printf_float+0x182>
 800af4e:	3302      	adds	r3, #2
 800af50:	e7f4      	b.n	800af3c <_printf_float+0x16c>
 800af52:	2301      	movs	r3, #1
 800af54:	e7f2      	b.n	800af3c <_printf_float+0x16c>
 800af56:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800af5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af5c:	4299      	cmp	r1, r3
 800af5e:	db05      	blt.n	800af6c <_printf_float+0x19c>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	6121      	str	r1, [r4, #16]
 800af64:	07d8      	lsls	r0, r3, #31
 800af66:	d5ea      	bpl.n	800af3e <_printf_float+0x16e>
 800af68:	1c4b      	adds	r3, r1, #1
 800af6a:	e7e7      	b.n	800af3c <_printf_float+0x16c>
 800af6c:	2900      	cmp	r1, #0
 800af6e:	bfd4      	ite	le
 800af70:	f1c1 0202 	rsble	r2, r1, #2
 800af74:	2201      	movgt	r2, #1
 800af76:	4413      	add	r3, r2
 800af78:	e7e0      	b.n	800af3c <_printf_float+0x16c>
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	055a      	lsls	r2, r3, #21
 800af7e:	d407      	bmi.n	800af90 <_printf_float+0x1c0>
 800af80:	6923      	ldr	r3, [r4, #16]
 800af82:	4642      	mov	r2, r8
 800af84:	4631      	mov	r1, r6
 800af86:	4628      	mov	r0, r5
 800af88:	47b8      	blx	r7
 800af8a:	3001      	adds	r0, #1
 800af8c:	d12a      	bne.n	800afe4 <_printf_float+0x214>
 800af8e:	e76b      	b.n	800ae68 <_printf_float+0x98>
 800af90:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800af94:	f240 80e0 	bls.w	800b158 <_printf_float+0x388>
 800af98:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800af9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa4:	d133      	bne.n	800b00e <_printf_float+0x23e>
 800afa6:	4a38      	ldr	r2, [pc, #224]	@ (800b088 <_printf_float+0x2b8>)
 800afa8:	2301      	movs	r3, #1
 800afaa:	4631      	mov	r1, r6
 800afac:	4628      	mov	r0, r5
 800afae:	47b8      	blx	r7
 800afb0:	3001      	adds	r0, #1
 800afb2:	f43f af59 	beq.w	800ae68 <_printf_float+0x98>
 800afb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800afba:	4543      	cmp	r3, r8
 800afbc:	db02      	blt.n	800afc4 <_printf_float+0x1f4>
 800afbe:	6823      	ldr	r3, [r4, #0]
 800afc0:	07d8      	lsls	r0, r3, #31
 800afc2:	d50f      	bpl.n	800afe4 <_printf_float+0x214>
 800afc4:	9b05      	ldr	r3, [sp, #20]
 800afc6:	465a      	mov	r2, fp
 800afc8:	4631      	mov	r1, r6
 800afca:	4628      	mov	r0, r5
 800afcc:	47b8      	blx	r7
 800afce:	3001      	adds	r0, #1
 800afd0:	f43f af4a 	beq.w	800ae68 <_printf_float+0x98>
 800afd4:	f04f 0900 	mov.w	r9, #0
 800afd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800afdc:	f104 0a1a 	add.w	sl, r4, #26
 800afe0:	45c8      	cmp	r8, r9
 800afe2:	dc09      	bgt.n	800aff8 <_printf_float+0x228>
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	079b      	lsls	r3, r3, #30
 800afe8:	f100 8107 	bmi.w	800b1fa <_printf_float+0x42a>
 800afec:	68e0      	ldr	r0, [r4, #12]
 800afee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aff0:	4298      	cmp	r0, r3
 800aff2:	bfb8      	it	lt
 800aff4:	4618      	movlt	r0, r3
 800aff6:	e739      	b.n	800ae6c <_printf_float+0x9c>
 800aff8:	2301      	movs	r3, #1
 800affa:	4652      	mov	r2, sl
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	f43f af30 	beq.w	800ae68 <_printf_float+0x98>
 800b008:	f109 0901 	add.w	r9, r9, #1
 800b00c:	e7e8      	b.n	800afe0 <_printf_float+0x210>
 800b00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b010:	2b00      	cmp	r3, #0
 800b012:	dc3b      	bgt.n	800b08c <_printf_float+0x2bc>
 800b014:	4a1c      	ldr	r2, [pc, #112]	@ (800b088 <_printf_float+0x2b8>)
 800b016:	2301      	movs	r3, #1
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	f43f af22 	beq.w	800ae68 <_printf_float+0x98>
 800b024:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b028:	ea59 0303 	orrs.w	r3, r9, r3
 800b02c:	d102      	bne.n	800b034 <_printf_float+0x264>
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	07d9      	lsls	r1, r3, #31
 800b032:	d5d7      	bpl.n	800afe4 <_printf_float+0x214>
 800b034:	9b05      	ldr	r3, [sp, #20]
 800b036:	465a      	mov	r2, fp
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b8      	blx	r7
 800b03e:	3001      	adds	r0, #1
 800b040:	f43f af12 	beq.w	800ae68 <_printf_float+0x98>
 800b044:	f04f 0a00 	mov.w	sl, #0
 800b048:	f104 0b1a 	add.w	fp, r4, #26
 800b04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b04e:	425b      	negs	r3, r3
 800b050:	4553      	cmp	r3, sl
 800b052:	dc01      	bgt.n	800b058 <_printf_float+0x288>
 800b054:	464b      	mov	r3, r9
 800b056:	e794      	b.n	800af82 <_printf_float+0x1b2>
 800b058:	2301      	movs	r3, #1
 800b05a:	465a      	mov	r2, fp
 800b05c:	4631      	mov	r1, r6
 800b05e:	4628      	mov	r0, r5
 800b060:	47b8      	blx	r7
 800b062:	3001      	adds	r0, #1
 800b064:	f43f af00 	beq.w	800ae68 <_printf_float+0x98>
 800b068:	f10a 0a01 	add.w	sl, sl, #1
 800b06c:	e7ee      	b.n	800b04c <_printf_float+0x27c>
 800b06e:	bf00      	nop
 800b070:	ffffffff 	.word	0xffffffff
 800b074:	7fefffff 	.word	0x7fefffff
 800b078:	0800f8fd 	.word	0x0800f8fd
 800b07c:	0800f901 	.word	0x0800f901
 800b080:	0800f905 	.word	0x0800f905
 800b084:	0800f909 	.word	0x0800f909
 800b088:	0800f90d 	.word	0x0800f90d
 800b08c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b08e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b092:	4553      	cmp	r3, sl
 800b094:	bfa8      	it	ge
 800b096:	4653      	movge	r3, sl
 800b098:	2b00      	cmp	r3, #0
 800b09a:	4699      	mov	r9, r3
 800b09c:	dc37      	bgt.n	800b10e <_printf_float+0x33e>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9307      	str	r3, [sp, #28]
 800b0a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0a6:	f104 021a 	add.w	r2, r4, #26
 800b0aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0ac:	9907      	ldr	r1, [sp, #28]
 800b0ae:	9306      	str	r3, [sp, #24]
 800b0b0:	eba3 0309 	sub.w	r3, r3, r9
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	dc31      	bgt.n	800b11c <_printf_float+0x34c>
 800b0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ba:	459a      	cmp	sl, r3
 800b0bc:	dc3b      	bgt.n	800b136 <_printf_float+0x366>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	07da      	lsls	r2, r3, #31
 800b0c2:	d438      	bmi.n	800b136 <_printf_float+0x366>
 800b0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c6:	ebaa 0903 	sub.w	r9, sl, r3
 800b0ca:	9b06      	ldr	r3, [sp, #24]
 800b0cc:	ebaa 0303 	sub.w	r3, sl, r3
 800b0d0:	4599      	cmp	r9, r3
 800b0d2:	bfa8      	it	ge
 800b0d4:	4699      	movge	r9, r3
 800b0d6:	f1b9 0f00 	cmp.w	r9, #0
 800b0da:	dc34      	bgt.n	800b146 <_printf_float+0x376>
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0e4:	f104 0b1a 	add.w	fp, r4, #26
 800b0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ea:	ebaa 0303 	sub.w	r3, sl, r3
 800b0ee:	eba3 0309 	sub.w	r3, r3, r9
 800b0f2:	4543      	cmp	r3, r8
 800b0f4:	f77f af76 	ble.w	800afe4 <_printf_float+0x214>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	465a      	mov	r2, fp
 800b0fc:	4631      	mov	r1, r6
 800b0fe:	4628      	mov	r0, r5
 800b100:	47b8      	blx	r7
 800b102:	3001      	adds	r0, #1
 800b104:	f43f aeb0 	beq.w	800ae68 <_printf_float+0x98>
 800b108:	f108 0801 	add.w	r8, r8, #1
 800b10c:	e7ec      	b.n	800b0e8 <_printf_float+0x318>
 800b10e:	4642      	mov	r2, r8
 800b110:	4631      	mov	r1, r6
 800b112:	4628      	mov	r0, r5
 800b114:	47b8      	blx	r7
 800b116:	3001      	adds	r0, #1
 800b118:	d1c1      	bne.n	800b09e <_printf_float+0x2ce>
 800b11a:	e6a5      	b.n	800ae68 <_printf_float+0x98>
 800b11c:	2301      	movs	r3, #1
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	9206      	str	r2, [sp, #24]
 800b124:	47b8      	blx	r7
 800b126:	3001      	adds	r0, #1
 800b128:	f43f ae9e 	beq.w	800ae68 <_printf_float+0x98>
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	9a06      	ldr	r2, [sp, #24]
 800b130:	3301      	adds	r3, #1
 800b132:	9307      	str	r3, [sp, #28]
 800b134:	e7b9      	b.n	800b0aa <_printf_float+0x2da>
 800b136:	9b05      	ldr	r3, [sp, #20]
 800b138:	465a      	mov	r2, fp
 800b13a:	4631      	mov	r1, r6
 800b13c:	4628      	mov	r0, r5
 800b13e:	47b8      	blx	r7
 800b140:	3001      	adds	r0, #1
 800b142:	d1bf      	bne.n	800b0c4 <_printf_float+0x2f4>
 800b144:	e690      	b.n	800ae68 <_printf_float+0x98>
 800b146:	9a06      	ldr	r2, [sp, #24]
 800b148:	464b      	mov	r3, r9
 800b14a:	4442      	add	r2, r8
 800b14c:	4631      	mov	r1, r6
 800b14e:	4628      	mov	r0, r5
 800b150:	47b8      	blx	r7
 800b152:	3001      	adds	r0, #1
 800b154:	d1c2      	bne.n	800b0dc <_printf_float+0x30c>
 800b156:	e687      	b.n	800ae68 <_printf_float+0x98>
 800b158:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b15c:	f1b9 0f01 	cmp.w	r9, #1
 800b160:	dc01      	bgt.n	800b166 <_printf_float+0x396>
 800b162:	07db      	lsls	r3, r3, #31
 800b164:	d536      	bpl.n	800b1d4 <_printf_float+0x404>
 800b166:	2301      	movs	r3, #1
 800b168:	4642      	mov	r2, r8
 800b16a:	4631      	mov	r1, r6
 800b16c:	4628      	mov	r0, r5
 800b16e:	47b8      	blx	r7
 800b170:	3001      	adds	r0, #1
 800b172:	f43f ae79 	beq.w	800ae68 <_printf_float+0x98>
 800b176:	9b05      	ldr	r3, [sp, #20]
 800b178:	465a      	mov	r2, fp
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f ae71 	beq.w	800ae68 <_printf_float+0x98>
 800b186:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b18a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b192:	f109 39ff 	add.w	r9, r9, #4294967295
 800b196:	d018      	beq.n	800b1ca <_printf_float+0x3fa>
 800b198:	464b      	mov	r3, r9
 800b19a:	f108 0201 	add.w	r2, r8, #1
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d10c      	bne.n	800b1c2 <_printf_float+0x3f2>
 800b1a8:	e65e      	b.n	800ae68 <_printf_float+0x98>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	465a      	mov	r2, fp
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	f43f ae57 	beq.w	800ae68 <_printf_float+0x98>
 800b1ba:	f108 0801 	add.w	r8, r8, #1
 800b1be:	45c8      	cmp	r8, r9
 800b1c0:	dbf3      	blt.n	800b1aa <_printf_float+0x3da>
 800b1c2:	4653      	mov	r3, sl
 800b1c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b1c8:	e6dc      	b.n	800af84 <_printf_float+0x1b4>
 800b1ca:	f04f 0800 	mov.w	r8, #0
 800b1ce:	f104 0b1a 	add.w	fp, r4, #26
 800b1d2:	e7f4      	b.n	800b1be <_printf_float+0x3ee>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	4642      	mov	r2, r8
 800b1d8:	e7e1      	b.n	800b19e <_printf_float+0x3ce>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	464a      	mov	r2, r9
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	47b8      	blx	r7
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	f43f ae3f 	beq.w	800ae68 <_printf_float+0x98>
 800b1ea:	f108 0801 	add.w	r8, r8, #1
 800b1ee:	68e3      	ldr	r3, [r4, #12]
 800b1f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1f2:	1a5b      	subs	r3, r3, r1
 800b1f4:	4543      	cmp	r3, r8
 800b1f6:	dcf0      	bgt.n	800b1da <_printf_float+0x40a>
 800b1f8:	e6f8      	b.n	800afec <_printf_float+0x21c>
 800b1fa:	f04f 0800 	mov.w	r8, #0
 800b1fe:	f104 0919 	add.w	r9, r4, #25
 800b202:	e7f4      	b.n	800b1ee <_printf_float+0x41e>

0800b204 <_printf_common>:
 800b204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b208:	4616      	mov	r6, r2
 800b20a:	4698      	mov	r8, r3
 800b20c:	688a      	ldr	r2, [r1, #8]
 800b20e:	690b      	ldr	r3, [r1, #16]
 800b210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b214:	4293      	cmp	r3, r2
 800b216:	bfb8      	it	lt
 800b218:	4613      	movlt	r3, r2
 800b21a:	6033      	str	r3, [r6, #0]
 800b21c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b220:	4607      	mov	r7, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b10a      	cbz	r2, 800b22a <_printf_common+0x26>
 800b226:	3301      	adds	r3, #1
 800b228:	6033      	str	r3, [r6, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	0699      	lsls	r1, r3, #26
 800b22e:	bf42      	ittt	mi
 800b230:	6833      	ldrmi	r3, [r6, #0]
 800b232:	3302      	addmi	r3, #2
 800b234:	6033      	strmi	r3, [r6, #0]
 800b236:	6825      	ldr	r5, [r4, #0]
 800b238:	f015 0506 	ands.w	r5, r5, #6
 800b23c:	d106      	bne.n	800b24c <_printf_common+0x48>
 800b23e:	f104 0a19 	add.w	sl, r4, #25
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	6832      	ldr	r2, [r6, #0]
 800b246:	1a9b      	subs	r3, r3, r2
 800b248:	42ab      	cmp	r3, r5
 800b24a:	dc26      	bgt.n	800b29a <_printf_common+0x96>
 800b24c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b250:	6822      	ldr	r2, [r4, #0]
 800b252:	3b00      	subs	r3, #0
 800b254:	bf18      	it	ne
 800b256:	2301      	movne	r3, #1
 800b258:	0692      	lsls	r2, r2, #26
 800b25a:	d42b      	bmi.n	800b2b4 <_printf_common+0xb0>
 800b25c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b260:	4641      	mov	r1, r8
 800b262:	4638      	mov	r0, r7
 800b264:	47c8      	blx	r9
 800b266:	3001      	adds	r0, #1
 800b268:	d01e      	beq.n	800b2a8 <_printf_common+0xa4>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	6922      	ldr	r2, [r4, #16]
 800b26e:	f003 0306 	and.w	r3, r3, #6
 800b272:	2b04      	cmp	r3, #4
 800b274:	bf02      	ittt	eq
 800b276:	68e5      	ldreq	r5, [r4, #12]
 800b278:	6833      	ldreq	r3, [r6, #0]
 800b27a:	1aed      	subeq	r5, r5, r3
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	bf0c      	ite	eq
 800b280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b284:	2500      	movne	r5, #0
 800b286:	4293      	cmp	r3, r2
 800b288:	bfc4      	itt	gt
 800b28a:	1a9b      	subgt	r3, r3, r2
 800b28c:	18ed      	addgt	r5, r5, r3
 800b28e:	2600      	movs	r6, #0
 800b290:	341a      	adds	r4, #26
 800b292:	42b5      	cmp	r5, r6
 800b294:	d11a      	bne.n	800b2cc <_printf_common+0xc8>
 800b296:	2000      	movs	r0, #0
 800b298:	e008      	b.n	800b2ac <_printf_common+0xa8>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4652      	mov	r2, sl
 800b29e:	4641      	mov	r1, r8
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	47c8      	blx	r9
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d103      	bne.n	800b2b0 <_printf_common+0xac>
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	e7c6      	b.n	800b242 <_printf_common+0x3e>
 800b2b4:	18e1      	adds	r1, r4, r3
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	2030      	movs	r0, #48	@ 0x30
 800b2ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2be:	4422      	add	r2, r4
 800b2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	e7c7      	b.n	800b25c <_printf_common+0x58>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	47c8      	blx	r9
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d0e6      	beq.n	800b2a8 <_printf_common+0xa4>
 800b2da:	3601      	adds	r6, #1
 800b2dc:	e7d9      	b.n	800b292 <_printf_common+0x8e>
	...

0800b2e0 <_printf_i>:
 800b2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e4:	7e0f      	ldrb	r7, [r1, #24]
 800b2e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2e8:	2f78      	cmp	r7, #120	@ 0x78
 800b2ea:	4691      	mov	r9, r2
 800b2ec:	4680      	mov	r8, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	469a      	mov	sl, r3
 800b2f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2f6:	d807      	bhi.n	800b308 <_printf_i+0x28>
 800b2f8:	2f62      	cmp	r7, #98	@ 0x62
 800b2fa:	d80a      	bhi.n	800b312 <_printf_i+0x32>
 800b2fc:	2f00      	cmp	r7, #0
 800b2fe:	f000 80d2 	beq.w	800b4a6 <_printf_i+0x1c6>
 800b302:	2f58      	cmp	r7, #88	@ 0x58
 800b304:	f000 80b9 	beq.w	800b47a <_printf_i+0x19a>
 800b308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b30c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b310:	e03a      	b.n	800b388 <_printf_i+0xa8>
 800b312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b316:	2b15      	cmp	r3, #21
 800b318:	d8f6      	bhi.n	800b308 <_printf_i+0x28>
 800b31a:	a101      	add	r1, pc, #4	@ (adr r1, 800b320 <_printf_i+0x40>)
 800b31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b320:	0800b379 	.word	0x0800b379
 800b324:	0800b38d 	.word	0x0800b38d
 800b328:	0800b309 	.word	0x0800b309
 800b32c:	0800b309 	.word	0x0800b309
 800b330:	0800b309 	.word	0x0800b309
 800b334:	0800b309 	.word	0x0800b309
 800b338:	0800b38d 	.word	0x0800b38d
 800b33c:	0800b309 	.word	0x0800b309
 800b340:	0800b309 	.word	0x0800b309
 800b344:	0800b309 	.word	0x0800b309
 800b348:	0800b309 	.word	0x0800b309
 800b34c:	0800b48d 	.word	0x0800b48d
 800b350:	0800b3b7 	.word	0x0800b3b7
 800b354:	0800b447 	.word	0x0800b447
 800b358:	0800b309 	.word	0x0800b309
 800b35c:	0800b309 	.word	0x0800b309
 800b360:	0800b4af 	.word	0x0800b4af
 800b364:	0800b309 	.word	0x0800b309
 800b368:	0800b3b7 	.word	0x0800b3b7
 800b36c:	0800b309 	.word	0x0800b309
 800b370:	0800b309 	.word	0x0800b309
 800b374:	0800b44f 	.word	0x0800b44f
 800b378:	6833      	ldr	r3, [r6, #0]
 800b37a:	1d1a      	adds	r2, r3, #4
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6032      	str	r2, [r6, #0]
 800b380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b388:	2301      	movs	r3, #1
 800b38a:	e09d      	b.n	800b4c8 <_printf_i+0x1e8>
 800b38c:	6833      	ldr	r3, [r6, #0]
 800b38e:	6820      	ldr	r0, [r4, #0]
 800b390:	1d19      	adds	r1, r3, #4
 800b392:	6031      	str	r1, [r6, #0]
 800b394:	0606      	lsls	r6, r0, #24
 800b396:	d501      	bpl.n	800b39c <_printf_i+0xbc>
 800b398:	681d      	ldr	r5, [r3, #0]
 800b39a:	e003      	b.n	800b3a4 <_printf_i+0xc4>
 800b39c:	0645      	lsls	r5, r0, #25
 800b39e:	d5fb      	bpl.n	800b398 <_printf_i+0xb8>
 800b3a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3a4:	2d00      	cmp	r5, #0
 800b3a6:	da03      	bge.n	800b3b0 <_printf_i+0xd0>
 800b3a8:	232d      	movs	r3, #45	@ 0x2d
 800b3aa:	426d      	negs	r5, r5
 800b3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b0:	4859      	ldr	r0, [pc, #356]	@ (800b518 <_printf_i+0x238>)
 800b3b2:	230a      	movs	r3, #10
 800b3b4:	e011      	b.n	800b3da <_printf_i+0xfa>
 800b3b6:	6821      	ldr	r1, [r4, #0]
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	0608      	lsls	r0, r1, #24
 800b3bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3c0:	d402      	bmi.n	800b3c8 <_printf_i+0xe8>
 800b3c2:	0649      	lsls	r1, r1, #25
 800b3c4:	bf48      	it	mi
 800b3c6:	b2ad      	uxthmi	r5, r5
 800b3c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3ca:	4853      	ldr	r0, [pc, #332]	@ (800b518 <_printf_i+0x238>)
 800b3cc:	6033      	str	r3, [r6, #0]
 800b3ce:	bf14      	ite	ne
 800b3d0:	230a      	movne	r3, #10
 800b3d2:	2308      	moveq	r3, #8
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3da:	6866      	ldr	r6, [r4, #4]
 800b3dc:	60a6      	str	r6, [r4, #8]
 800b3de:	2e00      	cmp	r6, #0
 800b3e0:	bfa2      	ittt	ge
 800b3e2:	6821      	ldrge	r1, [r4, #0]
 800b3e4:	f021 0104 	bicge.w	r1, r1, #4
 800b3e8:	6021      	strge	r1, [r4, #0]
 800b3ea:	b90d      	cbnz	r5, 800b3f0 <_printf_i+0x110>
 800b3ec:	2e00      	cmp	r6, #0
 800b3ee:	d04b      	beq.n	800b488 <_printf_i+0x1a8>
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3f6:	fb03 5711 	mls	r7, r3, r1, r5
 800b3fa:	5dc7      	ldrb	r7, [r0, r7]
 800b3fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b400:	462f      	mov	r7, r5
 800b402:	42bb      	cmp	r3, r7
 800b404:	460d      	mov	r5, r1
 800b406:	d9f4      	bls.n	800b3f2 <_printf_i+0x112>
 800b408:	2b08      	cmp	r3, #8
 800b40a:	d10b      	bne.n	800b424 <_printf_i+0x144>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	07df      	lsls	r7, r3, #31
 800b410:	d508      	bpl.n	800b424 <_printf_i+0x144>
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	6861      	ldr	r1, [r4, #4]
 800b416:	4299      	cmp	r1, r3
 800b418:	bfde      	ittt	le
 800b41a:	2330      	movle	r3, #48	@ 0x30
 800b41c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b420:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b424:	1b92      	subs	r2, r2, r6
 800b426:	6122      	str	r2, [r4, #16]
 800b428:	f8cd a000 	str.w	sl, [sp]
 800b42c:	464b      	mov	r3, r9
 800b42e:	aa03      	add	r2, sp, #12
 800b430:	4621      	mov	r1, r4
 800b432:	4640      	mov	r0, r8
 800b434:	f7ff fee6 	bl	800b204 <_printf_common>
 800b438:	3001      	adds	r0, #1
 800b43a:	d14a      	bne.n	800b4d2 <_printf_i+0x1f2>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	b004      	add	sp, #16
 800b442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	f043 0320 	orr.w	r3, r3, #32
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	4833      	ldr	r0, [pc, #204]	@ (800b51c <_printf_i+0x23c>)
 800b450:	2778      	movs	r7, #120	@ 0x78
 800b452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	6831      	ldr	r1, [r6, #0]
 800b45a:	061f      	lsls	r7, r3, #24
 800b45c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b460:	d402      	bmi.n	800b468 <_printf_i+0x188>
 800b462:	065f      	lsls	r7, r3, #25
 800b464:	bf48      	it	mi
 800b466:	b2ad      	uxthmi	r5, r5
 800b468:	6031      	str	r1, [r6, #0]
 800b46a:	07d9      	lsls	r1, r3, #31
 800b46c:	bf44      	itt	mi
 800b46e:	f043 0320 	orrmi.w	r3, r3, #32
 800b472:	6023      	strmi	r3, [r4, #0]
 800b474:	b11d      	cbz	r5, 800b47e <_printf_i+0x19e>
 800b476:	2310      	movs	r3, #16
 800b478:	e7ac      	b.n	800b3d4 <_printf_i+0xf4>
 800b47a:	4827      	ldr	r0, [pc, #156]	@ (800b518 <_printf_i+0x238>)
 800b47c:	e7e9      	b.n	800b452 <_printf_i+0x172>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	f023 0320 	bic.w	r3, r3, #32
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	e7f6      	b.n	800b476 <_printf_i+0x196>
 800b488:	4616      	mov	r6, r2
 800b48a:	e7bd      	b.n	800b408 <_printf_i+0x128>
 800b48c:	6833      	ldr	r3, [r6, #0]
 800b48e:	6825      	ldr	r5, [r4, #0]
 800b490:	6961      	ldr	r1, [r4, #20]
 800b492:	1d18      	adds	r0, r3, #4
 800b494:	6030      	str	r0, [r6, #0]
 800b496:	062e      	lsls	r6, r5, #24
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	d501      	bpl.n	800b4a0 <_printf_i+0x1c0>
 800b49c:	6019      	str	r1, [r3, #0]
 800b49e:	e002      	b.n	800b4a6 <_printf_i+0x1c6>
 800b4a0:	0668      	lsls	r0, r5, #25
 800b4a2:	d5fb      	bpl.n	800b49c <_printf_i+0x1bc>
 800b4a4:	8019      	strh	r1, [r3, #0]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	4616      	mov	r6, r2
 800b4ac:	e7bc      	b.n	800b428 <_printf_i+0x148>
 800b4ae:	6833      	ldr	r3, [r6, #0]
 800b4b0:	1d1a      	adds	r2, r3, #4
 800b4b2:	6032      	str	r2, [r6, #0]
 800b4b4:	681e      	ldr	r6, [r3, #0]
 800b4b6:	6862      	ldr	r2, [r4, #4]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7f4 fec0 	bl	8000240 <memchr>
 800b4c0:	b108      	cbz	r0, 800b4c6 <_printf_i+0x1e6>
 800b4c2:	1b80      	subs	r0, r0, r6
 800b4c4:	6060      	str	r0, [r4, #4]
 800b4c6:	6863      	ldr	r3, [r4, #4]
 800b4c8:	6123      	str	r3, [r4, #16]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4d0:	e7aa      	b.n	800b428 <_printf_i+0x148>
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4640      	mov	r0, r8
 800b4da:	47d0      	blx	sl
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d0ad      	beq.n	800b43c <_printf_i+0x15c>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	079b      	lsls	r3, r3, #30
 800b4e4:	d413      	bmi.n	800b50e <_printf_i+0x22e>
 800b4e6:	68e0      	ldr	r0, [r4, #12]
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	4298      	cmp	r0, r3
 800b4ec:	bfb8      	it	lt
 800b4ee:	4618      	movlt	r0, r3
 800b4f0:	e7a6      	b.n	800b440 <_printf_i+0x160>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	47d0      	blx	sl
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d09d      	beq.n	800b43c <_printf_i+0x15c>
 800b500:	3501      	adds	r5, #1
 800b502:	68e3      	ldr	r3, [r4, #12]
 800b504:	9903      	ldr	r1, [sp, #12]
 800b506:	1a5b      	subs	r3, r3, r1
 800b508:	42ab      	cmp	r3, r5
 800b50a:	dcf2      	bgt.n	800b4f2 <_printf_i+0x212>
 800b50c:	e7eb      	b.n	800b4e6 <_printf_i+0x206>
 800b50e:	2500      	movs	r5, #0
 800b510:	f104 0619 	add.w	r6, r4, #25
 800b514:	e7f5      	b.n	800b502 <_printf_i+0x222>
 800b516:	bf00      	nop
 800b518:	0800f90f 	.word	0x0800f90f
 800b51c:	0800f920 	.word	0x0800f920

0800b520 <_scanf_float>:
 800b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	b087      	sub	sp, #28
 800b526:	4617      	mov	r7, r2
 800b528:	9303      	str	r3, [sp, #12]
 800b52a:	688b      	ldr	r3, [r1, #8]
 800b52c:	1e5a      	subs	r2, r3, #1
 800b52e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b532:	bf81      	itttt	hi
 800b534:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b538:	eb03 0b05 	addhi.w	fp, r3, r5
 800b53c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b540:	608b      	strhi	r3, [r1, #8]
 800b542:	680b      	ldr	r3, [r1, #0]
 800b544:	460a      	mov	r2, r1
 800b546:	f04f 0500 	mov.w	r5, #0
 800b54a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b54e:	f842 3b1c 	str.w	r3, [r2], #28
 800b552:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b556:	4680      	mov	r8, r0
 800b558:	460c      	mov	r4, r1
 800b55a:	bf98      	it	ls
 800b55c:	f04f 0b00 	movls.w	fp, #0
 800b560:	9201      	str	r2, [sp, #4]
 800b562:	4616      	mov	r6, r2
 800b564:	46aa      	mov	sl, r5
 800b566:	46a9      	mov	r9, r5
 800b568:	9502      	str	r5, [sp, #8]
 800b56a:	68a2      	ldr	r2, [r4, #8]
 800b56c:	b152      	cbz	r2, 800b584 <_scanf_float+0x64>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b4e      	cmp	r3, #78	@ 0x4e
 800b574:	d864      	bhi.n	800b640 <_scanf_float+0x120>
 800b576:	2b40      	cmp	r3, #64	@ 0x40
 800b578:	d83c      	bhi.n	800b5f4 <_scanf_float+0xd4>
 800b57a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b57e:	b2c8      	uxtb	r0, r1
 800b580:	280e      	cmp	r0, #14
 800b582:	d93a      	bls.n	800b5fa <_scanf_float+0xda>
 800b584:	f1b9 0f00 	cmp.w	r9, #0
 800b588:	d003      	beq.n	800b592 <_scanf_float+0x72>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b596:	f1ba 0f01 	cmp.w	sl, #1
 800b59a:	f200 8117 	bhi.w	800b7cc <_scanf_float+0x2ac>
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	429e      	cmp	r6, r3
 800b5a2:	f200 8108 	bhi.w	800b7b6 <_scanf_float+0x296>
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	b007      	add	sp, #28
 800b5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b5b2:	2a0d      	cmp	r2, #13
 800b5b4:	d8e6      	bhi.n	800b584 <_scanf_float+0x64>
 800b5b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b5bc <_scanf_float+0x9c>)
 800b5b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5bc:	0800b703 	.word	0x0800b703
 800b5c0:	0800b585 	.word	0x0800b585
 800b5c4:	0800b585 	.word	0x0800b585
 800b5c8:	0800b585 	.word	0x0800b585
 800b5cc:	0800b763 	.word	0x0800b763
 800b5d0:	0800b73b 	.word	0x0800b73b
 800b5d4:	0800b585 	.word	0x0800b585
 800b5d8:	0800b585 	.word	0x0800b585
 800b5dc:	0800b711 	.word	0x0800b711
 800b5e0:	0800b585 	.word	0x0800b585
 800b5e4:	0800b585 	.word	0x0800b585
 800b5e8:	0800b585 	.word	0x0800b585
 800b5ec:	0800b585 	.word	0x0800b585
 800b5f0:	0800b6c9 	.word	0x0800b6c9
 800b5f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b5f8:	e7db      	b.n	800b5b2 <_scanf_float+0x92>
 800b5fa:	290e      	cmp	r1, #14
 800b5fc:	d8c2      	bhi.n	800b584 <_scanf_float+0x64>
 800b5fe:	a001      	add	r0, pc, #4	@ (adr r0, 800b604 <_scanf_float+0xe4>)
 800b600:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b604:	0800b6b9 	.word	0x0800b6b9
 800b608:	0800b585 	.word	0x0800b585
 800b60c:	0800b6b9 	.word	0x0800b6b9
 800b610:	0800b74f 	.word	0x0800b74f
 800b614:	0800b585 	.word	0x0800b585
 800b618:	0800b661 	.word	0x0800b661
 800b61c:	0800b69f 	.word	0x0800b69f
 800b620:	0800b69f 	.word	0x0800b69f
 800b624:	0800b69f 	.word	0x0800b69f
 800b628:	0800b69f 	.word	0x0800b69f
 800b62c:	0800b69f 	.word	0x0800b69f
 800b630:	0800b69f 	.word	0x0800b69f
 800b634:	0800b69f 	.word	0x0800b69f
 800b638:	0800b69f 	.word	0x0800b69f
 800b63c:	0800b69f 	.word	0x0800b69f
 800b640:	2b6e      	cmp	r3, #110	@ 0x6e
 800b642:	d809      	bhi.n	800b658 <_scanf_float+0x138>
 800b644:	2b60      	cmp	r3, #96	@ 0x60
 800b646:	d8b2      	bhi.n	800b5ae <_scanf_float+0x8e>
 800b648:	2b54      	cmp	r3, #84	@ 0x54
 800b64a:	d07b      	beq.n	800b744 <_scanf_float+0x224>
 800b64c:	2b59      	cmp	r3, #89	@ 0x59
 800b64e:	d199      	bne.n	800b584 <_scanf_float+0x64>
 800b650:	2d07      	cmp	r5, #7
 800b652:	d197      	bne.n	800b584 <_scanf_float+0x64>
 800b654:	2508      	movs	r5, #8
 800b656:	e02c      	b.n	800b6b2 <_scanf_float+0x192>
 800b658:	2b74      	cmp	r3, #116	@ 0x74
 800b65a:	d073      	beq.n	800b744 <_scanf_float+0x224>
 800b65c:	2b79      	cmp	r3, #121	@ 0x79
 800b65e:	e7f6      	b.n	800b64e <_scanf_float+0x12e>
 800b660:	6821      	ldr	r1, [r4, #0]
 800b662:	05c8      	lsls	r0, r1, #23
 800b664:	d51b      	bpl.n	800b69e <_scanf_float+0x17e>
 800b666:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b66a:	6021      	str	r1, [r4, #0]
 800b66c:	f109 0901 	add.w	r9, r9, #1
 800b670:	f1bb 0f00 	cmp.w	fp, #0
 800b674:	d003      	beq.n	800b67e <_scanf_float+0x15e>
 800b676:	3201      	adds	r2, #1
 800b678:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b67c:	60a2      	str	r2, [r4, #8]
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	3b01      	subs	r3, #1
 800b682:	60a3      	str	r3, [r4, #8]
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	3301      	adds	r3, #1
 800b688:	6123      	str	r3, [r4, #16]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	607b      	str	r3, [r7, #4]
 800b692:	f340 8087 	ble.w	800b7a4 <_scanf_float+0x284>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	3301      	adds	r3, #1
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	e765      	b.n	800b56a <_scanf_float+0x4a>
 800b69e:	eb1a 0105 	adds.w	r1, sl, r5
 800b6a2:	f47f af6f 	bne.w	800b584 <_scanf_float+0x64>
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b6ac:	6022      	str	r2, [r4, #0]
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	468a      	mov	sl, r1
 800b6b2:	f806 3b01 	strb.w	r3, [r6], #1
 800b6b6:	e7e2      	b.n	800b67e <_scanf_float+0x15e>
 800b6b8:	6822      	ldr	r2, [r4, #0]
 800b6ba:	0610      	lsls	r0, r2, #24
 800b6bc:	f57f af62 	bpl.w	800b584 <_scanf_float+0x64>
 800b6c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6c4:	6022      	str	r2, [r4, #0]
 800b6c6:	e7f4      	b.n	800b6b2 <_scanf_float+0x192>
 800b6c8:	f1ba 0f00 	cmp.w	sl, #0
 800b6cc:	d10e      	bne.n	800b6ec <_scanf_float+0x1cc>
 800b6ce:	f1b9 0f00 	cmp.w	r9, #0
 800b6d2:	d10e      	bne.n	800b6f2 <_scanf_float+0x1d2>
 800b6d4:	6822      	ldr	r2, [r4, #0]
 800b6d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b6da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b6de:	d108      	bne.n	800b6f2 <_scanf_float+0x1d2>
 800b6e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6e4:	6022      	str	r2, [r4, #0]
 800b6e6:	f04f 0a01 	mov.w	sl, #1
 800b6ea:	e7e2      	b.n	800b6b2 <_scanf_float+0x192>
 800b6ec:	f1ba 0f02 	cmp.w	sl, #2
 800b6f0:	d055      	beq.n	800b79e <_scanf_float+0x27e>
 800b6f2:	2d01      	cmp	r5, #1
 800b6f4:	d002      	beq.n	800b6fc <_scanf_float+0x1dc>
 800b6f6:	2d04      	cmp	r5, #4
 800b6f8:	f47f af44 	bne.w	800b584 <_scanf_float+0x64>
 800b6fc:	3501      	adds	r5, #1
 800b6fe:	b2ed      	uxtb	r5, r5
 800b700:	e7d7      	b.n	800b6b2 <_scanf_float+0x192>
 800b702:	f1ba 0f01 	cmp.w	sl, #1
 800b706:	f47f af3d 	bne.w	800b584 <_scanf_float+0x64>
 800b70a:	f04f 0a02 	mov.w	sl, #2
 800b70e:	e7d0      	b.n	800b6b2 <_scanf_float+0x192>
 800b710:	b97d      	cbnz	r5, 800b732 <_scanf_float+0x212>
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	f47f af38 	bne.w	800b58a <_scanf_float+0x6a>
 800b71a:	6822      	ldr	r2, [r4, #0]
 800b71c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b720:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b724:	f040 8101 	bne.w	800b92a <_scanf_float+0x40a>
 800b728:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b72c:	6022      	str	r2, [r4, #0]
 800b72e:	2501      	movs	r5, #1
 800b730:	e7bf      	b.n	800b6b2 <_scanf_float+0x192>
 800b732:	2d03      	cmp	r5, #3
 800b734:	d0e2      	beq.n	800b6fc <_scanf_float+0x1dc>
 800b736:	2d05      	cmp	r5, #5
 800b738:	e7de      	b.n	800b6f8 <_scanf_float+0x1d8>
 800b73a:	2d02      	cmp	r5, #2
 800b73c:	f47f af22 	bne.w	800b584 <_scanf_float+0x64>
 800b740:	2503      	movs	r5, #3
 800b742:	e7b6      	b.n	800b6b2 <_scanf_float+0x192>
 800b744:	2d06      	cmp	r5, #6
 800b746:	f47f af1d 	bne.w	800b584 <_scanf_float+0x64>
 800b74a:	2507      	movs	r5, #7
 800b74c:	e7b1      	b.n	800b6b2 <_scanf_float+0x192>
 800b74e:	6822      	ldr	r2, [r4, #0]
 800b750:	0591      	lsls	r1, r2, #22
 800b752:	f57f af17 	bpl.w	800b584 <_scanf_float+0x64>
 800b756:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b75a:	6022      	str	r2, [r4, #0]
 800b75c:	f8cd 9008 	str.w	r9, [sp, #8]
 800b760:	e7a7      	b.n	800b6b2 <_scanf_float+0x192>
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b768:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b76c:	d006      	beq.n	800b77c <_scanf_float+0x25c>
 800b76e:	0550      	lsls	r0, r2, #21
 800b770:	f57f af08 	bpl.w	800b584 <_scanf_float+0x64>
 800b774:	f1b9 0f00 	cmp.w	r9, #0
 800b778:	f000 80d7 	beq.w	800b92a <_scanf_float+0x40a>
 800b77c:	0591      	lsls	r1, r2, #22
 800b77e:	bf58      	it	pl
 800b780:	9902      	ldrpl	r1, [sp, #8]
 800b782:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b786:	bf58      	it	pl
 800b788:	eba9 0101 	subpl.w	r1, r9, r1
 800b78c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b790:	bf58      	it	pl
 800b792:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b796:	6022      	str	r2, [r4, #0]
 800b798:	f04f 0900 	mov.w	r9, #0
 800b79c:	e789      	b.n	800b6b2 <_scanf_float+0x192>
 800b79e:	f04f 0a03 	mov.w	sl, #3
 800b7a2:	e786      	b.n	800b6b2 <_scanf_float+0x192>
 800b7a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4798      	blx	r3
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f43f aedb 	beq.w	800b56a <_scanf_float+0x4a>
 800b7b4:	e6e6      	b.n	800b584 <_scanf_float+0x64>
 800b7b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7be:	463a      	mov	r2, r7
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	4798      	blx	r3
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	6123      	str	r3, [r4, #16]
 800b7ca:	e6e8      	b.n	800b59e <_scanf_float+0x7e>
 800b7cc:	1e6b      	subs	r3, r5, #1
 800b7ce:	2b06      	cmp	r3, #6
 800b7d0:	d824      	bhi.n	800b81c <_scanf_float+0x2fc>
 800b7d2:	2d02      	cmp	r5, #2
 800b7d4:	d836      	bhi.n	800b844 <_scanf_float+0x324>
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	429e      	cmp	r6, r3
 800b7da:	f67f aee4 	bls.w	800b5a6 <_scanf_float+0x86>
 800b7de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7e6:	463a      	mov	r2, r7
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4798      	blx	r3
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	6123      	str	r3, [r4, #16]
 800b7f2:	e7f0      	b.n	800b7d6 <_scanf_float+0x2b6>
 800b7f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b7fc:	463a      	mov	r2, r7
 800b7fe:	4640      	mov	r0, r8
 800b800:	4798      	blx	r3
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	3b01      	subs	r3, #1
 800b806:	6123      	str	r3, [r4, #16]
 800b808:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b80c:	fa5f fa8a 	uxtb.w	sl, sl
 800b810:	f1ba 0f02 	cmp.w	sl, #2
 800b814:	d1ee      	bne.n	800b7f4 <_scanf_float+0x2d4>
 800b816:	3d03      	subs	r5, #3
 800b818:	b2ed      	uxtb	r5, r5
 800b81a:	1b76      	subs	r6, r6, r5
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	05da      	lsls	r2, r3, #23
 800b820:	d530      	bpl.n	800b884 <_scanf_float+0x364>
 800b822:	055b      	lsls	r3, r3, #21
 800b824:	d511      	bpl.n	800b84a <_scanf_float+0x32a>
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	429e      	cmp	r6, r3
 800b82a:	f67f aebc 	bls.w	800b5a6 <_scanf_float+0x86>
 800b82e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b836:	463a      	mov	r2, r7
 800b838:	4640      	mov	r0, r8
 800b83a:	4798      	blx	r3
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	3b01      	subs	r3, #1
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	e7f0      	b.n	800b826 <_scanf_float+0x306>
 800b844:	46aa      	mov	sl, r5
 800b846:	46b3      	mov	fp, r6
 800b848:	e7de      	b.n	800b808 <_scanf_float+0x2e8>
 800b84a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b84e:	6923      	ldr	r3, [r4, #16]
 800b850:	2965      	cmp	r1, #101	@ 0x65
 800b852:	f103 33ff 	add.w	r3, r3, #4294967295
 800b856:	f106 35ff 	add.w	r5, r6, #4294967295
 800b85a:	6123      	str	r3, [r4, #16]
 800b85c:	d00c      	beq.n	800b878 <_scanf_float+0x358>
 800b85e:	2945      	cmp	r1, #69	@ 0x45
 800b860:	d00a      	beq.n	800b878 <_scanf_float+0x358>
 800b862:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b866:	463a      	mov	r2, r7
 800b868:	4640      	mov	r0, r8
 800b86a:	4798      	blx	r3
 800b86c:	6923      	ldr	r3, [r4, #16]
 800b86e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b872:	3b01      	subs	r3, #1
 800b874:	1eb5      	subs	r5, r6, #2
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b87c:	463a      	mov	r2, r7
 800b87e:	4640      	mov	r0, r8
 800b880:	4798      	blx	r3
 800b882:	462e      	mov	r6, r5
 800b884:	6822      	ldr	r2, [r4, #0]
 800b886:	f012 0210 	ands.w	r2, r2, #16
 800b88a:	d001      	beq.n	800b890 <_scanf_float+0x370>
 800b88c:	2000      	movs	r0, #0
 800b88e:	e68b      	b.n	800b5a8 <_scanf_float+0x88>
 800b890:	7032      	strb	r2, [r6, #0]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b89c:	d11a      	bne.n	800b8d4 <_scanf_float+0x3b4>
 800b89e:	9b02      	ldr	r3, [sp, #8]
 800b8a0:	454b      	cmp	r3, r9
 800b8a2:	eba3 0209 	sub.w	r2, r3, r9
 800b8a6:	d121      	bne.n	800b8ec <_scanf_float+0x3cc>
 800b8a8:	9901      	ldr	r1, [sp, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	f002 fb91 	bl	800dfd4 <_strtod_r>
 800b8b2:	9b03      	ldr	r3, [sp, #12]
 800b8b4:	6821      	ldr	r1, [r4, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f011 0f02 	tst.w	r1, #2
 800b8bc:	f103 0204 	add.w	r2, r3, #4
 800b8c0:	d01f      	beq.n	800b902 <_scanf_float+0x3e2>
 800b8c2:	9903      	ldr	r1, [sp, #12]
 800b8c4:	600a      	str	r2, [r1, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	ed83 0b00 	vstr	d0, [r3]
 800b8cc:	68e3      	ldr	r3, [r4, #12]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	60e3      	str	r3, [r4, #12]
 800b8d2:	e7db      	b.n	800b88c <_scanf_float+0x36c>
 800b8d4:	9b04      	ldr	r3, [sp, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0e6      	beq.n	800b8a8 <_scanf_float+0x388>
 800b8da:	9905      	ldr	r1, [sp, #20]
 800b8dc:	230a      	movs	r3, #10
 800b8de:	3101      	adds	r1, #1
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	f7ff f9e5 	bl	800acb0 <_strtol_r>
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	9e05      	ldr	r6, [sp, #20]
 800b8ea:	1ac2      	subs	r2, r0, r3
 800b8ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b8f0:	429e      	cmp	r6, r3
 800b8f2:	bf28      	it	cs
 800b8f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b8f8:	490d      	ldr	r1, [pc, #52]	@ (800b930 <_scanf_float+0x410>)
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f000 f8de 	bl	800babc <siprintf>
 800b900:	e7d2      	b.n	800b8a8 <_scanf_float+0x388>
 800b902:	f011 0f04 	tst.w	r1, #4
 800b906:	9903      	ldr	r1, [sp, #12]
 800b908:	600a      	str	r2, [r1, #0]
 800b90a:	d1dc      	bne.n	800b8c6 <_scanf_float+0x3a6>
 800b90c:	eeb4 0b40 	vcmp.f64	d0, d0
 800b910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b914:	681d      	ldr	r5, [r3, #0]
 800b916:	d705      	bvc.n	800b924 <_scanf_float+0x404>
 800b918:	4806      	ldr	r0, [pc, #24]	@ (800b934 <_scanf_float+0x414>)
 800b91a:	f000 fa17 	bl	800bd4c <nanf>
 800b91e:	ed85 0a00 	vstr	s0, [r5]
 800b922:	e7d3      	b.n	800b8cc <_scanf_float+0x3ac>
 800b924:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b928:	e7f9      	b.n	800b91e <_scanf_float+0x3fe>
 800b92a:	f04f 0900 	mov.w	r9, #0
 800b92e:	e630      	b.n	800b592 <_scanf_float+0x72>
 800b930:	0800f931 	.word	0x0800f931
 800b934:	0800fbc4 	.word	0x0800fbc4

0800b938 <std>:
 800b938:	2300      	movs	r3, #0
 800b93a:	b510      	push	{r4, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	e9c0 3300 	strd	r3, r3, [r0]
 800b942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b946:	6083      	str	r3, [r0, #8]
 800b948:	8181      	strh	r1, [r0, #12]
 800b94a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b94c:	81c2      	strh	r2, [r0, #14]
 800b94e:	6183      	str	r3, [r0, #24]
 800b950:	4619      	mov	r1, r3
 800b952:	2208      	movs	r2, #8
 800b954:	305c      	adds	r0, #92	@ 0x5c
 800b956:	f000 f914 	bl	800bb82 <memset>
 800b95a:	4b0d      	ldr	r3, [pc, #52]	@ (800b990 <std+0x58>)
 800b95c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b95e:	4b0d      	ldr	r3, [pc, #52]	@ (800b994 <std+0x5c>)
 800b960:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b962:	4b0d      	ldr	r3, [pc, #52]	@ (800b998 <std+0x60>)
 800b964:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b966:	4b0d      	ldr	r3, [pc, #52]	@ (800b99c <std+0x64>)
 800b968:	6323      	str	r3, [r4, #48]	@ 0x30
 800b96a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a0 <std+0x68>)
 800b96c:	6224      	str	r4, [r4, #32]
 800b96e:	429c      	cmp	r4, r3
 800b970:	d006      	beq.n	800b980 <std+0x48>
 800b972:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b976:	4294      	cmp	r4, r2
 800b978:	d002      	beq.n	800b980 <std+0x48>
 800b97a:	33d0      	adds	r3, #208	@ 0xd0
 800b97c:	429c      	cmp	r4, r3
 800b97e:	d105      	bne.n	800b98c <std+0x54>
 800b980:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b988:	f000 b9ce 	b.w	800bd28 <__retarget_lock_init_recursive>
 800b98c:	bd10      	pop	{r4, pc}
 800b98e:	bf00      	nop
 800b990:	0800bafd 	.word	0x0800bafd
 800b994:	0800bb1f 	.word	0x0800bb1f
 800b998:	0800bb57 	.word	0x0800bb57
 800b99c:	0800bb7b 	.word	0x0800bb7b
 800b9a0:	20005494 	.word	0x20005494

0800b9a4 <stdio_exit_handler>:
 800b9a4:	4a02      	ldr	r2, [pc, #8]	@ (800b9b0 <stdio_exit_handler+0xc>)
 800b9a6:	4903      	ldr	r1, [pc, #12]	@ (800b9b4 <stdio_exit_handler+0x10>)
 800b9a8:	4803      	ldr	r0, [pc, #12]	@ (800b9b8 <stdio_exit_handler+0x14>)
 800b9aa:	f000 b869 	b.w	800ba80 <_fwalk_sglue>
 800b9ae:	bf00      	nop
 800b9b0:	20000078 	.word	0x20000078
 800b9b4:	0800e399 	.word	0x0800e399
 800b9b8:	20000088 	.word	0x20000088

0800b9bc <cleanup_stdio>:
 800b9bc:	6841      	ldr	r1, [r0, #4]
 800b9be:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f0 <cleanup_stdio+0x34>)
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	d001      	beq.n	800b9cc <cleanup_stdio+0x10>
 800b9c8:	f002 fce6 	bl	800e398 <_fflush_r>
 800b9cc:	68a1      	ldr	r1, [r4, #8]
 800b9ce:	4b09      	ldr	r3, [pc, #36]	@ (800b9f4 <cleanup_stdio+0x38>)
 800b9d0:	4299      	cmp	r1, r3
 800b9d2:	d002      	beq.n	800b9da <cleanup_stdio+0x1e>
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f002 fcdf 	bl	800e398 <_fflush_r>
 800b9da:	68e1      	ldr	r1, [r4, #12]
 800b9dc:	4b06      	ldr	r3, [pc, #24]	@ (800b9f8 <cleanup_stdio+0x3c>)
 800b9de:	4299      	cmp	r1, r3
 800b9e0:	d004      	beq.n	800b9ec <cleanup_stdio+0x30>
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9e8:	f002 bcd6 	b.w	800e398 <_fflush_r>
 800b9ec:	bd10      	pop	{r4, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20005494 	.word	0x20005494
 800b9f4:	200054fc 	.word	0x200054fc
 800b9f8:	20005564 	.word	0x20005564

0800b9fc <global_stdio_init.part.0>:
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800ba2c <global_stdio_init.part.0+0x30>)
 800ba00:	4c0b      	ldr	r4, [pc, #44]	@ (800ba30 <global_stdio_init.part.0+0x34>)
 800ba02:	4a0c      	ldr	r2, [pc, #48]	@ (800ba34 <global_stdio_init.part.0+0x38>)
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	4620      	mov	r0, r4
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2104      	movs	r1, #4
 800ba0c:	f7ff ff94 	bl	800b938 <std>
 800ba10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba14:	2201      	movs	r2, #1
 800ba16:	2109      	movs	r1, #9
 800ba18:	f7ff ff8e 	bl	800b938 <std>
 800ba1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba20:	2202      	movs	r2, #2
 800ba22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba26:	2112      	movs	r1, #18
 800ba28:	f7ff bf86 	b.w	800b938 <std>
 800ba2c:	200055cc 	.word	0x200055cc
 800ba30:	20005494 	.word	0x20005494
 800ba34:	0800b9a5 	.word	0x0800b9a5

0800ba38 <__sfp_lock_acquire>:
 800ba38:	4801      	ldr	r0, [pc, #4]	@ (800ba40 <__sfp_lock_acquire+0x8>)
 800ba3a:	f000 b976 	b.w	800bd2a <__retarget_lock_acquire_recursive>
 800ba3e:	bf00      	nop
 800ba40:	200055d5 	.word	0x200055d5

0800ba44 <__sfp_lock_release>:
 800ba44:	4801      	ldr	r0, [pc, #4]	@ (800ba4c <__sfp_lock_release+0x8>)
 800ba46:	f000 b971 	b.w	800bd2c <__retarget_lock_release_recursive>
 800ba4a:	bf00      	nop
 800ba4c:	200055d5 	.word	0x200055d5

0800ba50 <__sinit>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	4604      	mov	r4, r0
 800ba54:	f7ff fff0 	bl	800ba38 <__sfp_lock_acquire>
 800ba58:	6a23      	ldr	r3, [r4, #32]
 800ba5a:	b11b      	cbz	r3, 800ba64 <__sinit+0x14>
 800ba5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba60:	f7ff bff0 	b.w	800ba44 <__sfp_lock_release>
 800ba64:	4b04      	ldr	r3, [pc, #16]	@ (800ba78 <__sinit+0x28>)
 800ba66:	6223      	str	r3, [r4, #32]
 800ba68:	4b04      	ldr	r3, [pc, #16]	@ (800ba7c <__sinit+0x2c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1f5      	bne.n	800ba5c <__sinit+0xc>
 800ba70:	f7ff ffc4 	bl	800b9fc <global_stdio_init.part.0>
 800ba74:	e7f2      	b.n	800ba5c <__sinit+0xc>
 800ba76:	bf00      	nop
 800ba78:	0800b9bd 	.word	0x0800b9bd
 800ba7c:	200055cc 	.word	0x200055cc

0800ba80 <_fwalk_sglue>:
 800ba80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba84:	4607      	mov	r7, r0
 800ba86:	4688      	mov	r8, r1
 800ba88:	4614      	mov	r4, r2
 800ba8a:	2600      	movs	r6, #0
 800ba8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba90:	f1b9 0901 	subs.w	r9, r9, #1
 800ba94:	d505      	bpl.n	800baa2 <_fwalk_sglue+0x22>
 800ba96:	6824      	ldr	r4, [r4, #0]
 800ba98:	2c00      	cmp	r4, #0
 800ba9a:	d1f7      	bne.n	800ba8c <_fwalk_sglue+0xc>
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d907      	bls.n	800bab8 <_fwalk_sglue+0x38>
 800baa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baac:	3301      	adds	r3, #1
 800baae:	d003      	beq.n	800bab8 <_fwalk_sglue+0x38>
 800bab0:	4629      	mov	r1, r5
 800bab2:	4638      	mov	r0, r7
 800bab4:	47c0      	blx	r8
 800bab6:	4306      	orrs	r6, r0
 800bab8:	3568      	adds	r5, #104	@ 0x68
 800baba:	e7e9      	b.n	800ba90 <_fwalk_sglue+0x10>

0800babc <siprintf>:
 800babc:	b40e      	push	{r1, r2, r3}
 800babe:	b500      	push	{lr}
 800bac0:	b09c      	sub	sp, #112	@ 0x70
 800bac2:	ab1d      	add	r3, sp, #116	@ 0x74
 800bac4:	9002      	str	r0, [sp, #8]
 800bac6:	9006      	str	r0, [sp, #24]
 800bac8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bacc:	4809      	ldr	r0, [pc, #36]	@ (800baf4 <siprintf+0x38>)
 800bace:	9107      	str	r1, [sp, #28]
 800bad0:	9104      	str	r1, [sp, #16]
 800bad2:	4909      	ldr	r1, [pc, #36]	@ (800baf8 <siprintf+0x3c>)
 800bad4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad8:	9105      	str	r1, [sp, #20]
 800bada:	6800      	ldr	r0, [r0, #0]
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	a902      	add	r1, sp, #8
 800bae0:	f002 fada 	bl	800e098 <_svfiprintf_r>
 800bae4:	9b02      	ldr	r3, [sp, #8]
 800bae6:	2200      	movs	r2, #0
 800bae8:	701a      	strb	r2, [r3, #0]
 800baea:	b01c      	add	sp, #112	@ 0x70
 800baec:	f85d eb04 	ldr.w	lr, [sp], #4
 800baf0:	b003      	add	sp, #12
 800baf2:	4770      	bx	lr
 800baf4:	20000084 	.word	0x20000084
 800baf8:	ffff0208 	.word	0xffff0208

0800bafc <__sread>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	460c      	mov	r4, r1
 800bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb04:	f000 f8c2 	bl	800bc8c <_read_r>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	bfab      	itete	ge
 800bb0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb0e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb10:	181b      	addge	r3, r3, r0
 800bb12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb16:	bfac      	ite	ge
 800bb18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb1a:	81a3      	strhlt	r3, [r4, #12]
 800bb1c:	bd10      	pop	{r4, pc}

0800bb1e <__swrite>:
 800bb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb22:	461f      	mov	r7, r3
 800bb24:	898b      	ldrh	r3, [r1, #12]
 800bb26:	05db      	lsls	r3, r3, #23
 800bb28:	4605      	mov	r5, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	d505      	bpl.n	800bb3c <__swrite+0x1e>
 800bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb34:	2302      	movs	r3, #2
 800bb36:	2200      	movs	r2, #0
 800bb38:	f000 f896 	bl	800bc68 <_lseek_r>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb52:	f000 b8ad 	b.w	800bcb0 <_write_r>

0800bb56 <__sseek>:
 800bb56:	b510      	push	{r4, lr}
 800bb58:	460c      	mov	r4, r1
 800bb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5e:	f000 f883 	bl	800bc68 <_lseek_r>
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	bf15      	itete	ne
 800bb68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb72:	81a3      	strheq	r3, [r4, #12]
 800bb74:	bf18      	it	ne
 800bb76:	81a3      	strhne	r3, [r4, #12]
 800bb78:	bd10      	pop	{r4, pc}

0800bb7a <__sclose>:
 800bb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb7e:	f000 b80d 	b.w	800bb9c <_close_r>

0800bb82 <memset>:
 800bb82:	4402      	add	r2, r0
 800bb84:	4603      	mov	r3, r0
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d100      	bne.n	800bb8c <memset+0xa>
 800bb8a:	4770      	bx	lr
 800bb8c:	f803 1b01 	strb.w	r1, [r3], #1
 800bb90:	e7f9      	b.n	800bb86 <memset+0x4>
	...

0800bb94 <_localeconv_r>:
 800bb94:	4800      	ldr	r0, [pc, #0]	@ (800bb98 <_localeconv_r+0x4>)
 800bb96:	4770      	bx	lr
 800bb98:	200001c4 	.word	0x200001c4

0800bb9c <_close_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	@ (800bbb8 <_close_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f7 fa42 	bl	8003030 <_close>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_close_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_close_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	200055d0 	.word	0x200055d0

0800bbbc <_reclaim_reent>:
 800bbbc:	4b29      	ldr	r3, [pc, #164]	@ (800bc64 <_reclaim_reent+0xa8>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4283      	cmp	r3, r0
 800bbc2:	b570      	push	{r4, r5, r6, lr}
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	d04b      	beq.n	800bc60 <_reclaim_reent+0xa4>
 800bbc8:	69c3      	ldr	r3, [r0, #28]
 800bbca:	b1ab      	cbz	r3, 800bbf8 <_reclaim_reent+0x3c>
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	b16b      	cbz	r3, 800bbec <_reclaim_reent+0x30>
 800bbd0:	2500      	movs	r5, #0
 800bbd2:	69e3      	ldr	r3, [r4, #28]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	5959      	ldr	r1, [r3, r5]
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	d13b      	bne.n	800bc54 <_reclaim_reent+0x98>
 800bbdc:	3504      	adds	r5, #4
 800bbde:	2d80      	cmp	r5, #128	@ 0x80
 800bbe0:	d1f7      	bne.n	800bbd2 <_reclaim_reent+0x16>
 800bbe2:	69e3      	ldr	r3, [r4, #28]
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	68d9      	ldr	r1, [r3, #12]
 800bbe8:	f000 fe94 	bl	800c914 <_free_r>
 800bbec:	69e3      	ldr	r3, [r4, #28]
 800bbee:	6819      	ldr	r1, [r3, #0]
 800bbf0:	b111      	cbz	r1, 800bbf8 <_reclaim_reent+0x3c>
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f000 fe8e 	bl	800c914 <_free_r>
 800bbf8:	6961      	ldr	r1, [r4, #20]
 800bbfa:	b111      	cbz	r1, 800bc02 <_reclaim_reent+0x46>
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f000 fe89 	bl	800c914 <_free_r>
 800bc02:	69e1      	ldr	r1, [r4, #28]
 800bc04:	b111      	cbz	r1, 800bc0c <_reclaim_reent+0x50>
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fe84 	bl	800c914 <_free_r>
 800bc0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bc0e:	b111      	cbz	r1, 800bc16 <_reclaim_reent+0x5a>
 800bc10:	4620      	mov	r0, r4
 800bc12:	f000 fe7f 	bl	800c914 <_free_r>
 800bc16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc18:	b111      	cbz	r1, 800bc20 <_reclaim_reent+0x64>
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fe7a 	bl	800c914 <_free_r>
 800bc20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bc22:	b111      	cbz	r1, 800bc2a <_reclaim_reent+0x6e>
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 fe75 	bl	800c914 <_free_r>
 800bc2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bc2c:	b111      	cbz	r1, 800bc34 <_reclaim_reent+0x78>
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 fe70 	bl	800c914 <_free_r>
 800bc34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bc36:	b111      	cbz	r1, 800bc3e <_reclaim_reent+0x82>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f000 fe6b 	bl	800c914 <_free_r>
 800bc3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bc40:	b111      	cbz	r1, 800bc48 <_reclaim_reent+0x8c>
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 fe66 	bl	800c914 <_free_r>
 800bc48:	6a23      	ldr	r3, [r4, #32]
 800bc4a:	b14b      	cbz	r3, 800bc60 <_reclaim_reent+0xa4>
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc52:	4718      	bx	r3
 800bc54:	680e      	ldr	r6, [r1, #0]
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 fe5c 	bl	800c914 <_free_r>
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	e7bb      	b.n	800bbd8 <_reclaim_reent+0x1c>
 800bc60:	bd70      	pop	{r4, r5, r6, pc}
 800bc62:	bf00      	nop
 800bc64:	20000084 	.word	0x20000084

0800bc68 <_lseek_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d07      	ldr	r5, [pc, #28]	@ (800bc88 <_lseek_r+0x20>)
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	4608      	mov	r0, r1
 800bc70:	4611      	mov	r1, r2
 800bc72:	2200      	movs	r2, #0
 800bc74:	602a      	str	r2, [r5, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	f7f7 fa01 	bl	800307e <_lseek>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d102      	bne.n	800bc86 <_lseek_r+0x1e>
 800bc80:	682b      	ldr	r3, [r5, #0]
 800bc82:	b103      	cbz	r3, 800bc86 <_lseek_r+0x1e>
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	200055d0 	.word	0x200055d0

0800bc8c <_read_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d07      	ldr	r5, [pc, #28]	@ (800bcac <_read_r+0x20>)
 800bc90:	4604      	mov	r4, r0
 800bc92:	4608      	mov	r0, r1
 800bc94:	4611      	mov	r1, r2
 800bc96:	2200      	movs	r2, #0
 800bc98:	602a      	str	r2, [r5, #0]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	f7f7 f98f 	bl	8002fbe <_read>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_read_r+0x1e>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_read_r+0x1e>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	200055d0 	.word	0x200055d0

0800bcb0 <_write_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d07      	ldr	r5, [pc, #28]	@ (800bcd0 <_write_r+0x20>)
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	4611      	mov	r1, r2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	602a      	str	r2, [r5, #0]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	f7f7 f99a 	bl	8002ff8 <_write>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d102      	bne.n	800bcce <_write_r+0x1e>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	b103      	cbz	r3, 800bcce <_write_r+0x1e>
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	200055d0 	.word	0x200055d0

0800bcd4 <__errno>:
 800bcd4:	4b01      	ldr	r3, [pc, #4]	@ (800bcdc <__errno+0x8>)
 800bcd6:	6818      	ldr	r0, [r3, #0]
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20000084 	.word	0x20000084

0800bce0 <__libc_init_array>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	4d0d      	ldr	r5, [pc, #52]	@ (800bd18 <__libc_init_array+0x38>)
 800bce4:	4c0d      	ldr	r4, [pc, #52]	@ (800bd1c <__libc_init_array+0x3c>)
 800bce6:	1b64      	subs	r4, r4, r5
 800bce8:	10a4      	asrs	r4, r4, #2
 800bcea:	2600      	movs	r6, #0
 800bcec:	42a6      	cmp	r6, r4
 800bcee:	d109      	bne.n	800bd04 <__libc_init_array+0x24>
 800bcf0:	4d0b      	ldr	r5, [pc, #44]	@ (800bd20 <__libc_init_array+0x40>)
 800bcf2:	4c0c      	ldr	r4, [pc, #48]	@ (800bd24 <__libc_init_array+0x44>)
 800bcf4:	f003 fd2c 	bl	800f750 <_init>
 800bcf8:	1b64      	subs	r4, r4, r5
 800bcfa:	10a4      	asrs	r4, r4, #2
 800bcfc:	2600      	movs	r6, #0
 800bcfe:	42a6      	cmp	r6, r4
 800bd00:	d105      	bne.n	800bd0e <__libc_init_array+0x2e>
 800bd02:	bd70      	pop	{r4, r5, r6, pc}
 800bd04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd08:	4798      	blx	r3
 800bd0a:	3601      	adds	r6, #1
 800bd0c:	e7ee      	b.n	800bcec <__libc_init_array+0xc>
 800bd0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd12:	4798      	blx	r3
 800bd14:	3601      	adds	r6, #1
 800bd16:	e7f2      	b.n	800bcfe <__libc_init_array+0x1e>
 800bd18:	080114e8 	.word	0x080114e8
 800bd1c:	080114e8 	.word	0x080114e8
 800bd20:	080114e8 	.word	0x080114e8
 800bd24:	080114ec 	.word	0x080114ec

0800bd28 <__retarget_lock_init_recursive>:
 800bd28:	4770      	bx	lr

0800bd2a <__retarget_lock_acquire_recursive>:
 800bd2a:	4770      	bx	lr

0800bd2c <__retarget_lock_release_recursive>:
 800bd2c:	4770      	bx	lr

0800bd2e <memcpy>:
 800bd2e:	440a      	add	r2, r1
 800bd30:	4291      	cmp	r1, r2
 800bd32:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd36:	d100      	bne.n	800bd3a <memcpy+0xc>
 800bd38:	4770      	bx	lr
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd44:	4291      	cmp	r1, r2
 800bd46:	d1f9      	bne.n	800bd3c <memcpy+0xe>
 800bd48:	bd10      	pop	{r4, pc}
	...

0800bd4c <nanf>:
 800bd4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bd54 <nanf+0x8>
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	7fc00000 	.word	0x7fc00000

0800bd58 <quorem>:
 800bd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	6903      	ldr	r3, [r0, #16]
 800bd5e:	690c      	ldr	r4, [r1, #16]
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	4607      	mov	r7, r0
 800bd64:	db7e      	blt.n	800be64 <quorem+0x10c>
 800bd66:	3c01      	subs	r4, #1
 800bd68:	f101 0814 	add.w	r8, r1, #20
 800bd6c:	00a3      	lsls	r3, r4, #2
 800bd6e:	f100 0514 	add.w	r5, r0, #20
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd82:	3301      	adds	r3, #1
 800bd84:	429a      	cmp	r2, r3
 800bd86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd8a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd8e:	d32e      	bcc.n	800bdee <quorem+0x96>
 800bd90:	f04f 0a00 	mov.w	sl, #0
 800bd94:	46c4      	mov	ip, r8
 800bd96:	46ae      	mov	lr, r5
 800bd98:	46d3      	mov	fp, sl
 800bd9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd9e:	b298      	uxth	r0, r3
 800bda0:	fb06 a000 	mla	r0, r6, r0, sl
 800bda4:	0c02      	lsrs	r2, r0, #16
 800bda6:	0c1b      	lsrs	r3, r3, #16
 800bda8:	fb06 2303 	mla	r3, r6, r3, r2
 800bdac:	f8de 2000 	ldr.w	r2, [lr]
 800bdb0:	b280      	uxth	r0, r0
 800bdb2:	b292      	uxth	r2, r2
 800bdb4:	1a12      	subs	r2, r2, r0
 800bdb6:	445a      	add	r2, fp
 800bdb8:	f8de 0000 	ldr.w	r0, [lr]
 800bdbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdc6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bdca:	b292      	uxth	r2, r2
 800bdcc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdd0:	45e1      	cmp	r9, ip
 800bdd2:	f84e 2b04 	str.w	r2, [lr], #4
 800bdd6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bdda:	d2de      	bcs.n	800bd9a <quorem+0x42>
 800bddc:	9b00      	ldr	r3, [sp, #0]
 800bdde:	58eb      	ldr	r3, [r5, r3]
 800bde0:	b92b      	cbnz	r3, 800bdee <quorem+0x96>
 800bde2:	9b01      	ldr	r3, [sp, #4]
 800bde4:	3b04      	subs	r3, #4
 800bde6:	429d      	cmp	r5, r3
 800bde8:	461a      	mov	r2, r3
 800bdea:	d32f      	bcc.n	800be4c <quorem+0xf4>
 800bdec:	613c      	str	r4, [r7, #16]
 800bdee:	4638      	mov	r0, r7
 800bdf0:	f001 f954 	bl	800d09c <__mcmp>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	db25      	blt.n	800be44 <quorem+0xec>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800be00:	f8d1 c000 	ldr.w	ip, [r1]
 800be04:	fa1f fe82 	uxth.w	lr, r2
 800be08:	fa1f f38c 	uxth.w	r3, ip
 800be0c:	eba3 030e 	sub.w	r3, r3, lr
 800be10:	4403      	add	r3, r0
 800be12:	0c12      	lsrs	r2, r2, #16
 800be14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be22:	45c1      	cmp	r9, r8
 800be24:	f841 3b04 	str.w	r3, [r1], #4
 800be28:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be2c:	d2e6      	bcs.n	800bdfc <quorem+0xa4>
 800be2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be36:	b922      	cbnz	r2, 800be42 <quorem+0xea>
 800be38:	3b04      	subs	r3, #4
 800be3a:	429d      	cmp	r5, r3
 800be3c:	461a      	mov	r2, r3
 800be3e:	d30b      	bcc.n	800be58 <quorem+0x100>
 800be40:	613c      	str	r4, [r7, #16]
 800be42:	3601      	adds	r6, #1
 800be44:	4630      	mov	r0, r6
 800be46:	b003      	add	sp, #12
 800be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4c:	6812      	ldr	r2, [r2, #0]
 800be4e:	3b04      	subs	r3, #4
 800be50:	2a00      	cmp	r2, #0
 800be52:	d1cb      	bne.n	800bdec <quorem+0x94>
 800be54:	3c01      	subs	r4, #1
 800be56:	e7c6      	b.n	800bde6 <quorem+0x8e>
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	3b04      	subs	r3, #4
 800be5c:	2a00      	cmp	r2, #0
 800be5e:	d1ef      	bne.n	800be40 <quorem+0xe8>
 800be60:	3c01      	subs	r4, #1
 800be62:	e7ea      	b.n	800be3a <quorem+0xe2>
 800be64:	2000      	movs	r0, #0
 800be66:	e7ee      	b.n	800be46 <quorem+0xee>

0800be68 <_dtoa_r>:
 800be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	ed2d 8b02 	vpush	{d8}
 800be70:	69c7      	ldr	r7, [r0, #28]
 800be72:	b091      	sub	sp, #68	@ 0x44
 800be74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be78:	ec55 4b10 	vmov	r4, r5, d0
 800be7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800be7e:	9107      	str	r1, [sp, #28]
 800be80:	4681      	mov	r9, r0
 800be82:	9209      	str	r2, [sp, #36]	@ 0x24
 800be84:	930d      	str	r3, [sp, #52]	@ 0x34
 800be86:	b97f      	cbnz	r7, 800bea8 <_dtoa_r+0x40>
 800be88:	2010      	movs	r0, #16
 800be8a:	f000 fd8d 	bl	800c9a8 <malloc>
 800be8e:	4602      	mov	r2, r0
 800be90:	f8c9 001c 	str.w	r0, [r9, #28]
 800be94:	b920      	cbnz	r0, 800bea0 <_dtoa_r+0x38>
 800be96:	4ba0      	ldr	r3, [pc, #640]	@ (800c118 <_dtoa_r+0x2b0>)
 800be98:	21ef      	movs	r1, #239	@ 0xef
 800be9a:	48a0      	ldr	r0, [pc, #640]	@ (800c11c <_dtoa_r+0x2b4>)
 800be9c:	f002 fae8 	bl	800e470 <__assert_func>
 800bea0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bea4:	6007      	str	r7, [r0, #0]
 800bea6:	60c7      	str	r7, [r0, #12]
 800bea8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800beac:	6819      	ldr	r1, [r3, #0]
 800beae:	b159      	cbz	r1, 800bec8 <_dtoa_r+0x60>
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	604a      	str	r2, [r1, #4]
 800beb4:	2301      	movs	r3, #1
 800beb6:	4093      	lsls	r3, r2
 800beb8:	608b      	str	r3, [r1, #8]
 800beba:	4648      	mov	r0, r9
 800bebc:	f000 fe6a 	bl	800cb94 <_Bfree>
 800bec0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	1e2b      	subs	r3, r5, #0
 800beca:	bfbb      	ittet	lt
 800becc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bed0:	9303      	strlt	r3, [sp, #12]
 800bed2:	2300      	movge	r3, #0
 800bed4:	2201      	movlt	r2, #1
 800bed6:	bfac      	ite	ge
 800bed8:	6033      	strge	r3, [r6, #0]
 800beda:	6032      	strlt	r2, [r6, #0]
 800bedc:	4b90      	ldr	r3, [pc, #576]	@ (800c120 <_dtoa_r+0x2b8>)
 800bede:	9e03      	ldr	r6, [sp, #12]
 800bee0:	43b3      	bics	r3, r6
 800bee2:	d110      	bne.n	800bf06 <_dtoa_r+0x9e>
 800bee4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bee6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800beea:	6013      	str	r3, [r2, #0]
 800beec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bef0:	4323      	orrs	r3, r4
 800bef2:	f000 84de 	beq.w	800c8b2 <_dtoa_r+0xa4a>
 800bef6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bef8:	4f8a      	ldr	r7, [pc, #552]	@ (800c124 <_dtoa_r+0x2bc>)
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 84e0 	beq.w	800c8c0 <_dtoa_r+0xa58>
 800bf00:	1cfb      	adds	r3, r7, #3
 800bf02:	f000 bcdb 	b.w	800c8bc <_dtoa_r+0xa54>
 800bf06:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bf0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf12:	d10a      	bne.n	800bf2a <_dtoa_r+0xc2>
 800bf14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf16:	2301      	movs	r3, #1
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf1c:	b113      	cbz	r3, 800bf24 <_dtoa_r+0xbc>
 800bf1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bf20:	4b81      	ldr	r3, [pc, #516]	@ (800c128 <_dtoa_r+0x2c0>)
 800bf22:	6013      	str	r3, [r2, #0]
 800bf24:	4f81      	ldr	r7, [pc, #516]	@ (800c12c <_dtoa_r+0x2c4>)
 800bf26:	f000 bccb 	b.w	800c8c0 <_dtoa_r+0xa58>
 800bf2a:	aa0e      	add	r2, sp, #56	@ 0x38
 800bf2c:	a90f      	add	r1, sp, #60	@ 0x3c
 800bf2e:	4648      	mov	r0, r9
 800bf30:	eeb0 0b48 	vmov.f64	d0, d8
 800bf34:	f001 f9d2 	bl	800d2dc <__d2b>
 800bf38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bf3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf3e:	9001      	str	r0, [sp, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d045      	beq.n	800bfd0 <_dtoa_r+0x168>
 800bf44:	eeb0 7b48 	vmov.f64	d7, d8
 800bf48:	ee18 1a90 	vmov	r1, s17
 800bf4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bf50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bf54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bf58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	ee07 1a90 	vmov	s15, r1
 800bf62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bf66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c100 <_dtoa_r+0x298>
 800bf6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bf6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c108 <_dtoa_r+0x2a0>
 800bf72:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bf76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c110 <_dtoa_r+0x2a8>
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bf82:	eeb0 7b46 	vmov.f64	d7, d6
 800bf86:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bf8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bf8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf96:	ee16 8a90 	vmov	r8, s13
 800bf9a:	d508      	bpl.n	800bfae <_dtoa_r+0x146>
 800bf9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bfa0:	eeb4 6b47 	vcmp.f64	d6, d7
 800bfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa8:	bf18      	it	ne
 800bfaa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bfae:	f1b8 0f16 	cmp.w	r8, #22
 800bfb2:	d82b      	bhi.n	800c00c <_dtoa_r+0x1a4>
 800bfb4:	495e      	ldr	r1, [pc, #376]	@ (800c130 <_dtoa_r+0x2c8>)
 800bfb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bfba:	ed91 7b00 	vldr	d7, [r1]
 800bfbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc6:	d501      	bpl.n	800bfcc <_dtoa_r+0x164>
 800bfc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfcc:	2100      	movs	r1, #0
 800bfce:	e01e      	b.n	800c00e <_dtoa_r+0x1a6>
 800bfd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bfd8:	2920      	cmp	r1, #32
 800bfda:	bfc1      	itttt	gt
 800bfdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bfe0:	408e      	lslgt	r6, r1
 800bfe2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bfe6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bfea:	bfd6      	itet	le
 800bfec:	f1c1 0120 	rsble	r1, r1, #32
 800bff0:	4331      	orrgt	r1, r6
 800bff2:	fa04 f101 	lslle.w	r1, r4, r1
 800bff6:	ee07 1a90 	vmov	s15, r1
 800bffa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bffe:	3b01      	subs	r3, #1
 800c000:	ee17 1a90 	vmov	r1, s15
 800c004:	2501      	movs	r5, #1
 800c006:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c00a:	e7a8      	b.n	800bf5e <_dtoa_r+0xf6>
 800c00c:	2101      	movs	r1, #1
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	1e53      	subs	r3, r2, #1
 800c012:	9306      	str	r3, [sp, #24]
 800c014:	bf45      	ittet	mi
 800c016:	f1c2 0301 	rsbmi	r3, r2, #1
 800c01a:	9305      	strmi	r3, [sp, #20]
 800c01c:	2300      	movpl	r3, #0
 800c01e:	2300      	movmi	r3, #0
 800c020:	bf4c      	ite	mi
 800c022:	9306      	strmi	r3, [sp, #24]
 800c024:	9305      	strpl	r3, [sp, #20]
 800c026:	f1b8 0f00 	cmp.w	r8, #0
 800c02a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c02c:	db18      	blt.n	800c060 <_dtoa_r+0x1f8>
 800c02e:	9b06      	ldr	r3, [sp, #24]
 800c030:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c034:	4443      	add	r3, r8
 800c036:	9306      	str	r3, [sp, #24]
 800c038:	2300      	movs	r3, #0
 800c03a:	9a07      	ldr	r2, [sp, #28]
 800c03c:	2a09      	cmp	r2, #9
 800c03e:	d849      	bhi.n	800c0d4 <_dtoa_r+0x26c>
 800c040:	2a05      	cmp	r2, #5
 800c042:	bfc4      	itt	gt
 800c044:	3a04      	subgt	r2, #4
 800c046:	9207      	strgt	r2, [sp, #28]
 800c048:	9a07      	ldr	r2, [sp, #28]
 800c04a:	f1a2 0202 	sub.w	r2, r2, #2
 800c04e:	bfcc      	ite	gt
 800c050:	2400      	movgt	r4, #0
 800c052:	2401      	movle	r4, #1
 800c054:	2a03      	cmp	r2, #3
 800c056:	d848      	bhi.n	800c0ea <_dtoa_r+0x282>
 800c058:	e8df f002 	tbb	[pc, r2]
 800c05c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c060:	9b05      	ldr	r3, [sp, #20]
 800c062:	2200      	movs	r2, #0
 800c064:	eba3 0308 	sub.w	r3, r3, r8
 800c068:	9305      	str	r3, [sp, #20]
 800c06a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c06c:	f1c8 0300 	rsb	r3, r8, #0
 800c070:	e7e3      	b.n	800c03a <_dtoa_r+0x1d2>
 800c072:	2200      	movs	r2, #0
 800c074:	9208      	str	r2, [sp, #32]
 800c076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c078:	2a00      	cmp	r2, #0
 800c07a:	dc39      	bgt.n	800c0f0 <_dtoa_r+0x288>
 800c07c:	f04f 0b01 	mov.w	fp, #1
 800c080:	46da      	mov	sl, fp
 800c082:	465a      	mov	r2, fp
 800c084:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c088:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c08c:	2100      	movs	r1, #0
 800c08e:	2004      	movs	r0, #4
 800c090:	f100 0614 	add.w	r6, r0, #20
 800c094:	4296      	cmp	r6, r2
 800c096:	d930      	bls.n	800c0fa <_dtoa_r+0x292>
 800c098:	6079      	str	r1, [r7, #4]
 800c09a:	4648      	mov	r0, r9
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	f000 fd39 	bl	800cb14 <_Balloc>
 800c0a2:	9b04      	ldr	r3, [sp, #16]
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d146      	bne.n	800c138 <_dtoa_r+0x2d0>
 800c0aa:	4b22      	ldr	r3, [pc, #136]	@ (800c134 <_dtoa_r+0x2cc>)
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0b2:	e6f2      	b.n	800be9a <_dtoa_r+0x32>
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	e7dd      	b.n	800c074 <_dtoa_r+0x20c>
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	9208      	str	r2, [sp, #32]
 800c0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0be:	eb08 0b02 	add.w	fp, r8, r2
 800c0c2:	f10b 0a01 	add.w	sl, fp, #1
 800c0c6:	4652      	mov	r2, sl
 800c0c8:	2a01      	cmp	r2, #1
 800c0ca:	bfb8      	it	lt
 800c0cc:	2201      	movlt	r2, #1
 800c0ce:	e7db      	b.n	800c088 <_dtoa_r+0x220>
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	e7f2      	b.n	800c0ba <_dtoa_r+0x252>
 800c0d4:	2401      	movs	r4, #1
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c0dc:	f04f 3bff 	mov.w	fp, #4294967295
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	46da      	mov	sl, fp
 800c0e4:	2212      	movs	r2, #18
 800c0e6:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0e8:	e7ce      	b.n	800c088 <_dtoa_r+0x220>
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	9208      	str	r2, [sp, #32]
 800c0ee:	e7f5      	b.n	800c0dc <_dtoa_r+0x274>
 800c0f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c0f4:	46da      	mov	sl, fp
 800c0f6:	465a      	mov	r2, fp
 800c0f8:	e7c6      	b.n	800c088 <_dtoa_r+0x220>
 800c0fa:	3101      	adds	r1, #1
 800c0fc:	0040      	lsls	r0, r0, #1
 800c0fe:	e7c7      	b.n	800c090 <_dtoa_r+0x228>
 800c100:	636f4361 	.word	0x636f4361
 800c104:	3fd287a7 	.word	0x3fd287a7
 800c108:	8b60c8b3 	.word	0x8b60c8b3
 800c10c:	3fc68a28 	.word	0x3fc68a28
 800c110:	509f79fb 	.word	0x509f79fb
 800c114:	3fd34413 	.word	0x3fd34413
 800c118:	0800f943 	.word	0x0800f943
 800c11c:	0800f95a 	.word	0x0800f95a
 800c120:	7ff00000 	.word	0x7ff00000
 800c124:	0800f93f 	.word	0x0800f93f
 800c128:	0800f90e 	.word	0x0800f90e
 800c12c:	0800f90d 	.word	0x0800f90d
 800c130:	0800fa50 	.word	0x0800fa50
 800c134:	0800f9b2 	.word	0x0800f9b2
 800c138:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c13c:	f1ba 0f0e 	cmp.w	sl, #14
 800c140:	6010      	str	r0, [r2, #0]
 800c142:	d86f      	bhi.n	800c224 <_dtoa_r+0x3bc>
 800c144:	2c00      	cmp	r4, #0
 800c146:	d06d      	beq.n	800c224 <_dtoa_r+0x3bc>
 800c148:	f1b8 0f00 	cmp.w	r8, #0
 800c14c:	f340 80c2 	ble.w	800c2d4 <_dtoa_r+0x46c>
 800c150:	4aca      	ldr	r2, [pc, #808]	@ (800c47c <_dtoa_r+0x614>)
 800c152:	f008 010f 	and.w	r1, r8, #15
 800c156:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c15a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c15e:	ed92 7b00 	vldr	d7, [r2]
 800c162:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c166:	f000 80a9 	beq.w	800c2bc <_dtoa_r+0x454>
 800c16a:	4ac5      	ldr	r2, [pc, #788]	@ (800c480 <_dtoa_r+0x618>)
 800c16c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c170:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c174:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c178:	f001 010f 	and.w	r1, r1, #15
 800c17c:	2203      	movs	r2, #3
 800c17e:	48c0      	ldr	r0, [pc, #768]	@ (800c480 <_dtoa_r+0x618>)
 800c180:	2900      	cmp	r1, #0
 800c182:	f040 809d 	bne.w	800c2c0 <_dtoa_r+0x458>
 800c186:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c18a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c18e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c192:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c194:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c198:	2900      	cmp	r1, #0
 800c19a:	f000 80c1 	beq.w	800c320 <_dtoa_r+0x4b8>
 800c19e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c1a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1aa:	f140 80b9 	bpl.w	800c320 <_dtoa_r+0x4b8>
 800c1ae:	f1ba 0f00 	cmp.w	sl, #0
 800c1b2:	f000 80b5 	beq.w	800c320 <_dtoa_r+0x4b8>
 800c1b6:	f1bb 0f00 	cmp.w	fp, #0
 800c1ba:	dd31      	ble.n	800c220 <_dtoa_r+0x3b8>
 800c1bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c1c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1c8:	f108 31ff 	add.w	r1, r8, #4294967295
 800c1cc:	9104      	str	r1, [sp, #16]
 800c1ce:	3201      	adds	r2, #1
 800c1d0:	465c      	mov	r4, fp
 800c1d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c1d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c1da:	ee07 2a90 	vmov	s15, r2
 800c1de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c1e6:	ee15 2a90 	vmov	r2, s11
 800c1ea:	ec51 0b15 	vmov	r0, r1, d5
 800c1ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c1f2:	2c00      	cmp	r4, #0
 800c1f4:	f040 8098 	bne.w	800c328 <_dtoa_r+0x4c0>
 800c1f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c1fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c200:	ec41 0b17 	vmov	d7, r0, r1
 800c204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20c:	f300 8261 	bgt.w	800c6d2 <_dtoa_r+0x86a>
 800c210:	eeb1 7b47 	vneg.f64	d7, d7
 800c214:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21c:	f100 80f5 	bmi.w	800c40a <_dtoa_r+0x5a2>
 800c220:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c224:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c226:	2a00      	cmp	r2, #0
 800c228:	f2c0 812c 	blt.w	800c484 <_dtoa_r+0x61c>
 800c22c:	f1b8 0f0e 	cmp.w	r8, #14
 800c230:	f300 8128 	bgt.w	800c484 <_dtoa_r+0x61c>
 800c234:	4b91      	ldr	r3, [pc, #580]	@ (800c47c <_dtoa_r+0x614>)
 800c236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c23a:	ed93 6b00 	vldr	d6, [r3]
 800c23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c240:	2b00      	cmp	r3, #0
 800c242:	da03      	bge.n	800c24c <_dtoa_r+0x3e4>
 800c244:	f1ba 0f00 	cmp.w	sl, #0
 800c248:	f340 80d2 	ble.w	800c3f0 <_dtoa_r+0x588>
 800c24c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c250:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c254:	463e      	mov	r6, r7
 800c256:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c25a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c25e:	ee15 3a10 	vmov	r3, s10
 800c262:	3330      	adds	r3, #48	@ 0x30
 800c264:	f806 3b01 	strb.w	r3, [r6], #1
 800c268:	1bf3      	subs	r3, r6, r7
 800c26a:	459a      	cmp	sl, r3
 800c26c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c270:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c274:	f040 80f8 	bne.w	800c468 <_dtoa_r+0x600>
 800c278:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c27c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c284:	f300 80dd 	bgt.w	800c442 <_dtoa_r+0x5da>
 800c288:	eeb4 7b46 	vcmp.f64	d7, d6
 800c28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c290:	d104      	bne.n	800c29c <_dtoa_r+0x434>
 800c292:	ee15 3a10 	vmov	r3, s10
 800c296:	07db      	lsls	r3, r3, #31
 800c298:	f100 80d3 	bmi.w	800c442 <_dtoa_r+0x5da>
 800c29c:	9901      	ldr	r1, [sp, #4]
 800c29e:	4648      	mov	r0, r9
 800c2a0:	f000 fc78 	bl	800cb94 <_Bfree>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2a8:	7033      	strb	r3, [r6, #0]
 800c2aa:	f108 0301 	add.w	r3, r8, #1
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f000 8304 	beq.w	800c8c0 <_dtoa_r+0xa58>
 800c2b8:	601e      	str	r6, [r3, #0]
 800c2ba:	e301      	b.n	800c8c0 <_dtoa_r+0xa58>
 800c2bc:	2202      	movs	r2, #2
 800c2be:	e75e      	b.n	800c17e <_dtoa_r+0x316>
 800c2c0:	07cc      	lsls	r4, r1, #31
 800c2c2:	d504      	bpl.n	800c2ce <_dtoa_r+0x466>
 800c2c4:	ed90 6b00 	vldr	d6, [r0]
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2ce:	1049      	asrs	r1, r1, #1
 800c2d0:	3008      	adds	r0, #8
 800c2d2:	e755      	b.n	800c180 <_dtoa_r+0x318>
 800c2d4:	d022      	beq.n	800c31c <_dtoa_r+0x4b4>
 800c2d6:	f1c8 0100 	rsb	r1, r8, #0
 800c2da:	4a68      	ldr	r2, [pc, #416]	@ (800c47c <_dtoa_r+0x614>)
 800c2dc:	f001 000f 	and.w	r0, r1, #15
 800c2e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c2e4:	ed92 7b00 	vldr	d7, [r2]
 800c2e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c2ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2f0:	4863      	ldr	r0, [pc, #396]	@ (800c480 <_dtoa_r+0x618>)
 800c2f2:	1109      	asrs	r1, r1, #4
 800c2f4:	2400      	movs	r4, #0
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	b929      	cbnz	r1, 800c306 <_dtoa_r+0x49e>
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	f43f af49 	beq.w	800c192 <_dtoa_r+0x32a>
 800c300:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c304:	e745      	b.n	800c192 <_dtoa_r+0x32a>
 800c306:	07ce      	lsls	r6, r1, #31
 800c308:	d505      	bpl.n	800c316 <_dtoa_r+0x4ae>
 800c30a:	ed90 6b00 	vldr	d6, [r0]
 800c30e:	3201      	adds	r2, #1
 800c310:	2401      	movs	r4, #1
 800c312:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c316:	1049      	asrs	r1, r1, #1
 800c318:	3008      	adds	r0, #8
 800c31a:	e7ed      	b.n	800c2f8 <_dtoa_r+0x490>
 800c31c:	2202      	movs	r2, #2
 800c31e:	e738      	b.n	800c192 <_dtoa_r+0x32a>
 800c320:	f8cd 8010 	str.w	r8, [sp, #16]
 800c324:	4654      	mov	r4, sl
 800c326:	e754      	b.n	800c1d2 <_dtoa_r+0x36a>
 800c328:	4a54      	ldr	r2, [pc, #336]	@ (800c47c <_dtoa_r+0x614>)
 800c32a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c32e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c332:	9a08      	ldr	r2, [sp, #32]
 800c334:	ec41 0b17 	vmov	d7, r0, r1
 800c338:	443c      	add	r4, r7
 800c33a:	b34a      	cbz	r2, 800c390 <_dtoa_r+0x528>
 800c33c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c340:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c344:	463e      	mov	r6, r7
 800c346:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c34a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c34e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c352:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c356:	ee14 2a90 	vmov	r2, s9
 800c35a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c35e:	3230      	adds	r2, #48	@ 0x30
 800c360:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c364:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36c:	f806 2b01 	strb.w	r2, [r6], #1
 800c370:	d438      	bmi.n	800c3e4 <_dtoa_r+0x57c>
 800c372:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c376:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37e:	d462      	bmi.n	800c446 <_dtoa_r+0x5de>
 800c380:	42a6      	cmp	r6, r4
 800c382:	f43f af4d 	beq.w	800c220 <_dtoa_r+0x3b8>
 800c386:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c38a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c38e:	e7e0      	b.n	800c352 <_dtoa_r+0x4ea>
 800c390:	4621      	mov	r1, r4
 800c392:	463e      	mov	r6, r7
 800c394:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c398:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c39c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c3a0:	ee14 2a90 	vmov	r2, s9
 800c3a4:	3230      	adds	r2, #48	@ 0x30
 800c3a6:	f806 2b01 	strb.w	r2, [r6], #1
 800c3aa:	42a6      	cmp	r6, r4
 800c3ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c3b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c3b4:	d119      	bne.n	800c3ea <_dtoa_r+0x582>
 800c3b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c3ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c3be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c6:	dc3e      	bgt.n	800c446 <_dtoa_r+0x5de>
 800c3c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c3cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d4:	f57f af24 	bpl.w	800c220 <_dtoa_r+0x3b8>
 800c3d8:	460e      	mov	r6, r1
 800c3da:	3901      	subs	r1, #1
 800c3dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3e0:	2b30      	cmp	r3, #48	@ 0x30
 800c3e2:	d0f9      	beq.n	800c3d8 <_dtoa_r+0x570>
 800c3e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c3e8:	e758      	b.n	800c29c <_dtoa_r+0x434>
 800c3ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c3ee:	e7d5      	b.n	800c39c <_dtoa_r+0x534>
 800c3f0:	d10b      	bne.n	800c40a <_dtoa_r+0x5a2>
 800c3f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c3f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c3fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c406:	f2c0 8161 	blt.w	800c6cc <_dtoa_r+0x864>
 800c40a:	2400      	movs	r4, #0
 800c40c:	4625      	mov	r5, r4
 800c40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c410:	43db      	mvns	r3, r3
 800c412:	9304      	str	r3, [sp, #16]
 800c414:	463e      	mov	r6, r7
 800c416:	f04f 0800 	mov.w	r8, #0
 800c41a:	4621      	mov	r1, r4
 800c41c:	4648      	mov	r0, r9
 800c41e:	f000 fbb9 	bl	800cb94 <_Bfree>
 800c422:	2d00      	cmp	r5, #0
 800c424:	d0de      	beq.n	800c3e4 <_dtoa_r+0x57c>
 800c426:	f1b8 0f00 	cmp.w	r8, #0
 800c42a:	d005      	beq.n	800c438 <_dtoa_r+0x5d0>
 800c42c:	45a8      	cmp	r8, r5
 800c42e:	d003      	beq.n	800c438 <_dtoa_r+0x5d0>
 800c430:	4641      	mov	r1, r8
 800c432:	4648      	mov	r0, r9
 800c434:	f000 fbae 	bl	800cb94 <_Bfree>
 800c438:	4629      	mov	r1, r5
 800c43a:	4648      	mov	r0, r9
 800c43c:	f000 fbaa 	bl	800cb94 <_Bfree>
 800c440:	e7d0      	b.n	800c3e4 <_dtoa_r+0x57c>
 800c442:	f8cd 8010 	str.w	r8, [sp, #16]
 800c446:	4633      	mov	r3, r6
 800c448:	461e      	mov	r6, r3
 800c44a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c44e:	2a39      	cmp	r2, #57	@ 0x39
 800c450:	d106      	bne.n	800c460 <_dtoa_r+0x5f8>
 800c452:	429f      	cmp	r7, r3
 800c454:	d1f8      	bne.n	800c448 <_dtoa_r+0x5e0>
 800c456:	9a04      	ldr	r2, [sp, #16]
 800c458:	3201      	adds	r2, #1
 800c45a:	9204      	str	r2, [sp, #16]
 800c45c:	2230      	movs	r2, #48	@ 0x30
 800c45e:	703a      	strb	r2, [r7, #0]
 800c460:	781a      	ldrb	r2, [r3, #0]
 800c462:	3201      	adds	r2, #1
 800c464:	701a      	strb	r2, [r3, #0]
 800c466:	e7bd      	b.n	800c3e4 <_dtoa_r+0x57c>
 800c468:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c46c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c474:	f47f aeef 	bne.w	800c256 <_dtoa_r+0x3ee>
 800c478:	e710      	b.n	800c29c <_dtoa_r+0x434>
 800c47a:	bf00      	nop
 800c47c:	0800fa50 	.word	0x0800fa50
 800c480:	0800fa28 	.word	0x0800fa28
 800c484:	9908      	ldr	r1, [sp, #32]
 800c486:	2900      	cmp	r1, #0
 800c488:	f000 80e3 	beq.w	800c652 <_dtoa_r+0x7ea>
 800c48c:	9907      	ldr	r1, [sp, #28]
 800c48e:	2901      	cmp	r1, #1
 800c490:	f300 80c8 	bgt.w	800c624 <_dtoa_r+0x7bc>
 800c494:	2d00      	cmp	r5, #0
 800c496:	f000 80c1 	beq.w	800c61c <_dtoa_r+0x7b4>
 800c49a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c49e:	9e05      	ldr	r6, [sp, #20]
 800c4a0:	461c      	mov	r4, r3
 800c4a2:	9304      	str	r3, [sp, #16]
 800c4a4:	9b05      	ldr	r3, [sp, #20]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	9b06      	ldr	r3, [sp, #24]
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	4413      	add	r3, r2
 800c4b0:	4648      	mov	r0, r9
 800c4b2:	9306      	str	r3, [sp, #24]
 800c4b4:	f000 fc6c 	bl	800cd90 <__i2b>
 800c4b8:	9b04      	ldr	r3, [sp, #16]
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	b166      	cbz	r6, 800c4d8 <_dtoa_r+0x670>
 800c4be:	9a06      	ldr	r2, [sp, #24]
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	dd09      	ble.n	800c4d8 <_dtoa_r+0x670>
 800c4c4:	42b2      	cmp	r2, r6
 800c4c6:	9905      	ldr	r1, [sp, #20]
 800c4c8:	bfa8      	it	ge
 800c4ca:	4632      	movge	r2, r6
 800c4cc:	1a89      	subs	r1, r1, r2
 800c4ce:	9105      	str	r1, [sp, #20]
 800c4d0:	9906      	ldr	r1, [sp, #24]
 800c4d2:	1ab6      	subs	r6, r6, r2
 800c4d4:	1a8a      	subs	r2, r1, r2
 800c4d6:	9206      	str	r2, [sp, #24]
 800c4d8:	b1fb      	cbz	r3, 800c51a <_dtoa_r+0x6b2>
 800c4da:	9a08      	ldr	r2, [sp, #32]
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	f000 80bc 	beq.w	800c65a <_dtoa_r+0x7f2>
 800c4e2:	b19c      	cbz	r4, 800c50c <_dtoa_r+0x6a4>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	4648      	mov	r0, r9
 800c4ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4ec:	f000 fd10 	bl	800cf10 <__pow5mult>
 800c4f0:	9a01      	ldr	r2, [sp, #4]
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	4648      	mov	r0, r9
 800c4f8:	f000 fc60 	bl	800cdbc <__multiply>
 800c4fc:	9901      	ldr	r1, [sp, #4]
 800c4fe:	9004      	str	r0, [sp, #16]
 800c500:	4648      	mov	r0, r9
 800c502:	f000 fb47 	bl	800cb94 <_Bfree>
 800c506:	9a04      	ldr	r2, [sp, #16]
 800c508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c50a:	9201      	str	r2, [sp, #4]
 800c50c:	1b1a      	subs	r2, r3, r4
 800c50e:	d004      	beq.n	800c51a <_dtoa_r+0x6b2>
 800c510:	9901      	ldr	r1, [sp, #4]
 800c512:	4648      	mov	r0, r9
 800c514:	f000 fcfc 	bl	800cf10 <__pow5mult>
 800c518:	9001      	str	r0, [sp, #4]
 800c51a:	2101      	movs	r1, #1
 800c51c:	4648      	mov	r0, r9
 800c51e:	f000 fc37 	bl	800cd90 <__i2b>
 800c522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c524:	4604      	mov	r4, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 81d0 	beq.w	800c8cc <_dtoa_r+0xa64>
 800c52c:	461a      	mov	r2, r3
 800c52e:	4601      	mov	r1, r0
 800c530:	4648      	mov	r0, r9
 800c532:	f000 fced 	bl	800cf10 <__pow5mult>
 800c536:	9b07      	ldr	r3, [sp, #28]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	4604      	mov	r4, r0
 800c53c:	f300 8095 	bgt.w	800c66a <_dtoa_r+0x802>
 800c540:	9b02      	ldr	r3, [sp, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f040 808b 	bne.w	800c65e <_dtoa_r+0x7f6>
 800c548:	9b03      	ldr	r3, [sp, #12]
 800c54a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c54e:	2a00      	cmp	r2, #0
 800c550:	f040 8087 	bne.w	800c662 <_dtoa_r+0x7fa>
 800c554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c558:	0d12      	lsrs	r2, r2, #20
 800c55a:	0512      	lsls	r2, r2, #20
 800c55c:	2a00      	cmp	r2, #0
 800c55e:	f000 8082 	beq.w	800c666 <_dtoa_r+0x7fe>
 800c562:	9b05      	ldr	r3, [sp, #20]
 800c564:	3301      	adds	r3, #1
 800c566:	9305      	str	r3, [sp, #20]
 800c568:	9b06      	ldr	r3, [sp, #24]
 800c56a:	3301      	adds	r3, #1
 800c56c:	9306      	str	r3, [sp, #24]
 800c56e:	2301      	movs	r3, #1
 800c570:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 81af 	beq.w	800c8d8 <_dtoa_r+0xa70>
 800c57a:	6922      	ldr	r2, [r4, #16]
 800c57c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c580:	6910      	ldr	r0, [r2, #16]
 800c582:	f000 fbb9 	bl	800ccf8 <__hi0bits>
 800c586:	f1c0 0020 	rsb	r0, r0, #32
 800c58a:	9b06      	ldr	r3, [sp, #24]
 800c58c:	4418      	add	r0, r3
 800c58e:	f010 001f 	ands.w	r0, r0, #31
 800c592:	d076      	beq.n	800c682 <_dtoa_r+0x81a>
 800c594:	f1c0 0220 	rsb	r2, r0, #32
 800c598:	2a04      	cmp	r2, #4
 800c59a:	dd69      	ble.n	800c670 <_dtoa_r+0x808>
 800c59c:	9b05      	ldr	r3, [sp, #20]
 800c59e:	f1c0 001c 	rsb	r0, r0, #28
 800c5a2:	4403      	add	r3, r0
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	9b06      	ldr	r3, [sp, #24]
 800c5a8:	4406      	add	r6, r0
 800c5aa:	4403      	add	r3, r0
 800c5ac:	9306      	str	r3, [sp, #24]
 800c5ae:	9b05      	ldr	r3, [sp, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dd05      	ble.n	800c5c0 <_dtoa_r+0x758>
 800c5b4:	9901      	ldr	r1, [sp, #4]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	4648      	mov	r0, r9
 800c5ba:	f000 fd03 	bl	800cfc4 <__lshift>
 800c5be:	9001      	str	r0, [sp, #4]
 800c5c0:	9b06      	ldr	r3, [sp, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	dd05      	ble.n	800c5d2 <_dtoa_r+0x76a>
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	4648      	mov	r0, r9
 800c5cc:	f000 fcfa 	bl	800cfc4 <__lshift>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d056      	beq.n	800c686 <_dtoa_r+0x81e>
 800c5d8:	9801      	ldr	r0, [sp, #4]
 800c5da:	4621      	mov	r1, r4
 800c5dc:	f000 fd5e 	bl	800d09c <__mcmp>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	da50      	bge.n	800c686 <_dtoa_r+0x81e>
 800c5e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800c5e8:	9304      	str	r3, [sp, #16]
 800c5ea:	9901      	ldr	r1, [sp, #4]
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	220a      	movs	r2, #10
 800c5f0:	4648      	mov	r0, r9
 800c5f2:	f000 faf1 	bl	800cbd8 <__multadd>
 800c5f6:	9b08      	ldr	r3, [sp, #32]
 800c5f8:	9001      	str	r0, [sp, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 816e 	beq.w	800c8dc <_dtoa_r+0xa74>
 800c600:	4629      	mov	r1, r5
 800c602:	2300      	movs	r3, #0
 800c604:	220a      	movs	r2, #10
 800c606:	4648      	mov	r0, r9
 800c608:	f000 fae6 	bl	800cbd8 <__multadd>
 800c60c:	f1bb 0f00 	cmp.w	fp, #0
 800c610:	4605      	mov	r5, r0
 800c612:	dc64      	bgt.n	800c6de <_dtoa_r+0x876>
 800c614:	9b07      	ldr	r3, [sp, #28]
 800c616:	2b02      	cmp	r3, #2
 800c618:	dc3e      	bgt.n	800c698 <_dtoa_r+0x830>
 800c61a:	e060      	b.n	800c6de <_dtoa_r+0x876>
 800c61c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c61e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c622:	e73c      	b.n	800c49e <_dtoa_r+0x636>
 800c624:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c628:	42a3      	cmp	r3, r4
 800c62a:	bfbf      	itttt	lt
 800c62c:	1ae2      	sublt	r2, r4, r3
 800c62e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c630:	189b      	addlt	r3, r3, r2
 800c632:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c634:	bfae      	itee	ge
 800c636:	1b1c      	subge	r4, r3, r4
 800c638:	4623      	movlt	r3, r4
 800c63a:	2400      	movlt	r4, #0
 800c63c:	f1ba 0f00 	cmp.w	sl, #0
 800c640:	bfb5      	itete	lt
 800c642:	9a05      	ldrlt	r2, [sp, #20]
 800c644:	9e05      	ldrge	r6, [sp, #20]
 800c646:	eba2 060a 	sublt.w	r6, r2, sl
 800c64a:	4652      	movge	r2, sl
 800c64c:	bfb8      	it	lt
 800c64e:	2200      	movlt	r2, #0
 800c650:	e727      	b.n	800c4a2 <_dtoa_r+0x63a>
 800c652:	9e05      	ldr	r6, [sp, #20]
 800c654:	9d08      	ldr	r5, [sp, #32]
 800c656:	461c      	mov	r4, r3
 800c658:	e730      	b.n	800c4bc <_dtoa_r+0x654>
 800c65a:	461a      	mov	r2, r3
 800c65c:	e758      	b.n	800c510 <_dtoa_r+0x6a8>
 800c65e:	2300      	movs	r3, #0
 800c660:	e786      	b.n	800c570 <_dtoa_r+0x708>
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	e784      	b.n	800c570 <_dtoa_r+0x708>
 800c666:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c668:	e783      	b.n	800c572 <_dtoa_r+0x70a>
 800c66a:	2300      	movs	r3, #0
 800c66c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c66e:	e784      	b.n	800c57a <_dtoa_r+0x712>
 800c670:	d09d      	beq.n	800c5ae <_dtoa_r+0x746>
 800c672:	9b05      	ldr	r3, [sp, #20]
 800c674:	321c      	adds	r2, #28
 800c676:	4413      	add	r3, r2
 800c678:	9305      	str	r3, [sp, #20]
 800c67a:	9b06      	ldr	r3, [sp, #24]
 800c67c:	4416      	add	r6, r2
 800c67e:	4413      	add	r3, r2
 800c680:	e794      	b.n	800c5ac <_dtoa_r+0x744>
 800c682:	4602      	mov	r2, r0
 800c684:	e7f5      	b.n	800c672 <_dtoa_r+0x80a>
 800c686:	f1ba 0f00 	cmp.w	sl, #0
 800c68a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c68e:	46d3      	mov	fp, sl
 800c690:	dc21      	bgt.n	800c6d6 <_dtoa_r+0x86e>
 800c692:	9b07      	ldr	r3, [sp, #28]
 800c694:	2b02      	cmp	r3, #2
 800c696:	dd1e      	ble.n	800c6d6 <_dtoa_r+0x86e>
 800c698:	f1bb 0f00 	cmp.w	fp, #0
 800c69c:	f47f aeb7 	bne.w	800c40e <_dtoa_r+0x5a6>
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	2205      	movs	r2, #5
 800c6a6:	4648      	mov	r0, r9
 800c6a8:	f000 fa96 	bl	800cbd8 <__multadd>
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	9801      	ldr	r0, [sp, #4]
 800c6b2:	f000 fcf3 	bl	800d09c <__mcmp>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f77f aea9 	ble.w	800c40e <_dtoa_r+0x5a6>
 800c6bc:	463e      	mov	r6, r7
 800c6be:	2331      	movs	r3, #49	@ 0x31
 800c6c0:	f806 3b01 	strb.w	r3, [r6], #1
 800c6c4:	9b04      	ldr	r3, [sp, #16]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	9304      	str	r3, [sp, #16]
 800c6ca:	e6a4      	b.n	800c416 <_dtoa_r+0x5ae>
 800c6cc:	f8cd 8010 	str.w	r8, [sp, #16]
 800c6d0:	4654      	mov	r4, sl
 800c6d2:	4625      	mov	r5, r4
 800c6d4:	e7f2      	b.n	800c6bc <_dtoa_r+0x854>
 800c6d6:	9b08      	ldr	r3, [sp, #32]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 8103 	beq.w	800c8e4 <_dtoa_r+0xa7c>
 800c6de:	2e00      	cmp	r6, #0
 800c6e0:	dd05      	ble.n	800c6ee <_dtoa_r+0x886>
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	4632      	mov	r2, r6
 800c6e6:	4648      	mov	r0, r9
 800c6e8:	f000 fc6c 	bl	800cfc4 <__lshift>
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d058      	beq.n	800c7a6 <_dtoa_r+0x93e>
 800c6f4:	6869      	ldr	r1, [r5, #4]
 800c6f6:	4648      	mov	r0, r9
 800c6f8:	f000 fa0c 	bl	800cb14 <_Balloc>
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	b928      	cbnz	r0, 800c70c <_dtoa_r+0x8a4>
 800c700:	4b82      	ldr	r3, [pc, #520]	@ (800c90c <_dtoa_r+0xaa4>)
 800c702:	4602      	mov	r2, r0
 800c704:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c708:	f7ff bbc7 	b.w	800be9a <_dtoa_r+0x32>
 800c70c:	692a      	ldr	r2, [r5, #16]
 800c70e:	3202      	adds	r2, #2
 800c710:	0092      	lsls	r2, r2, #2
 800c712:	f105 010c 	add.w	r1, r5, #12
 800c716:	300c      	adds	r0, #12
 800c718:	f7ff fb09 	bl	800bd2e <memcpy>
 800c71c:	2201      	movs	r2, #1
 800c71e:	4631      	mov	r1, r6
 800c720:	4648      	mov	r0, r9
 800c722:	f000 fc4f 	bl	800cfc4 <__lshift>
 800c726:	1c7b      	adds	r3, r7, #1
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	eb07 030b 	add.w	r3, r7, fp
 800c72e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c730:	9b02      	ldr	r3, [sp, #8]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	46a8      	mov	r8, r5
 800c738:	9308      	str	r3, [sp, #32]
 800c73a:	4605      	mov	r5, r0
 800c73c:	9b05      	ldr	r3, [sp, #20]
 800c73e:	9801      	ldr	r0, [sp, #4]
 800c740:	4621      	mov	r1, r4
 800c742:	f103 3bff 	add.w	fp, r3, #4294967295
 800c746:	f7ff fb07 	bl	800bd58 <quorem>
 800c74a:	4641      	mov	r1, r8
 800c74c:	9002      	str	r0, [sp, #8]
 800c74e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c752:	9801      	ldr	r0, [sp, #4]
 800c754:	f000 fca2 	bl	800d09c <__mcmp>
 800c758:	462a      	mov	r2, r5
 800c75a:	9006      	str	r0, [sp, #24]
 800c75c:	4621      	mov	r1, r4
 800c75e:	4648      	mov	r0, r9
 800c760:	f000 fcb8 	bl	800d0d4 <__mdiff>
 800c764:	68c2      	ldr	r2, [r0, #12]
 800c766:	4606      	mov	r6, r0
 800c768:	b9fa      	cbnz	r2, 800c7aa <_dtoa_r+0x942>
 800c76a:	4601      	mov	r1, r0
 800c76c:	9801      	ldr	r0, [sp, #4]
 800c76e:	f000 fc95 	bl	800d09c <__mcmp>
 800c772:	4602      	mov	r2, r0
 800c774:	4631      	mov	r1, r6
 800c776:	4648      	mov	r0, r9
 800c778:	920a      	str	r2, [sp, #40]	@ 0x28
 800c77a:	f000 fa0b 	bl	800cb94 <_Bfree>
 800c77e:	9b07      	ldr	r3, [sp, #28]
 800c780:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c782:	9e05      	ldr	r6, [sp, #20]
 800c784:	ea43 0102 	orr.w	r1, r3, r2
 800c788:	9b08      	ldr	r3, [sp, #32]
 800c78a:	4319      	orrs	r1, r3
 800c78c:	d10f      	bne.n	800c7ae <_dtoa_r+0x946>
 800c78e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c792:	d028      	beq.n	800c7e6 <_dtoa_r+0x97e>
 800c794:	9b06      	ldr	r3, [sp, #24]
 800c796:	2b00      	cmp	r3, #0
 800c798:	dd02      	ble.n	800c7a0 <_dtoa_r+0x938>
 800c79a:	9b02      	ldr	r3, [sp, #8]
 800c79c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c7a0:	f88b a000 	strb.w	sl, [fp]
 800c7a4:	e639      	b.n	800c41a <_dtoa_r+0x5b2>
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	e7bd      	b.n	800c726 <_dtoa_r+0x8be>
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	e7e2      	b.n	800c774 <_dtoa_r+0x90c>
 800c7ae:	9b06      	ldr	r3, [sp, #24]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	db04      	blt.n	800c7be <_dtoa_r+0x956>
 800c7b4:	9907      	ldr	r1, [sp, #28]
 800c7b6:	430b      	orrs	r3, r1
 800c7b8:	9908      	ldr	r1, [sp, #32]
 800c7ba:	430b      	orrs	r3, r1
 800c7bc:	d120      	bne.n	800c800 <_dtoa_r+0x998>
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	ddee      	ble.n	800c7a0 <_dtoa_r+0x938>
 800c7c2:	9901      	ldr	r1, [sp, #4]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	4648      	mov	r0, r9
 800c7c8:	f000 fbfc 	bl	800cfc4 <__lshift>
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	9001      	str	r0, [sp, #4]
 800c7d0:	f000 fc64 	bl	800d09c <__mcmp>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	dc03      	bgt.n	800c7e0 <_dtoa_r+0x978>
 800c7d8:	d1e2      	bne.n	800c7a0 <_dtoa_r+0x938>
 800c7da:	f01a 0f01 	tst.w	sl, #1
 800c7de:	d0df      	beq.n	800c7a0 <_dtoa_r+0x938>
 800c7e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c7e4:	d1d9      	bne.n	800c79a <_dtoa_r+0x932>
 800c7e6:	2339      	movs	r3, #57	@ 0x39
 800c7e8:	f88b 3000 	strb.w	r3, [fp]
 800c7ec:	4633      	mov	r3, r6
 800c7ee:	461e      	mov	r6, r3
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c7f6:	2a39      	cmp	r2, #57	@ 0x39
 800c7f8:	d053      	beq.n	800c8a2 <_dtoa_r+0xa3a>
 800c7fa:	3201      	adds	r2, #1
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e60c      	b.n	800c41a <_dtoa_r+0x5b2>
 800c800:	2a00      	cmp	r2, #0
 800c802:	dd07      	ble.n	800c814 <_dtoa_r+0x9ac>
 800c804:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c808:	d0ed      	beq.n	800c7e6 <_dtoa_r+0x97e>
 800c80a:	f10a 0301 	add.w	r3, sl, #1
 800c80e:	f88b 3000 	strb.w	r3, [fp]
 800c812:	e602      	b.n	800c41a <_dtoa_r+0x5b2>
 800c814:	9b05      	ldr	r3, [sp, #20]
 800c816:	9a05      	ldr	r2, [sp, #20]
 800c818:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c81e:	4293      	cmp	r3, r2
 800c820:	d029      	beq.n	800c876 <_dtoa_r+0xa0e>
 800c822:	9901      	ldr	r1, [sp, #4]
 800c824:	2300      	movs	r3, #0
 800c826:	220a      	movs	r2, #10
 800c828:	4648      	mov	r0, r9
 800c82a:	f000 f9d5 	bl	800cbd8 <__multadd>
 800c82e:	45a8      	cmp	r8, r5
 800c830:	9001      	str	r0, [sp, #4]
 800c832:	f04f 0300 	mov.w	r3, #0
 800c836:	f04f 020a 	mov.w	r2, #10
 800c83a:	4641      	mov	r1, r8
 800c83c:	4648      	mov	r0, r9
 800c83e:	d107      	bne.n	800c850 <_dtoa_r+0x9e8>
 800c840:	f000 f9ca 	bl	800cbd8 <__multadd>
 800c844:	4680      	mov	r8, r0
 800c846:	4605      	mov	r5, r0
 800c848:	9b05      	ldr	r3, [sp, #20]
 800c84a:	3301      	adds	r3, #1
 800c84c:	9305      	str	r3, [sp, #20]
 800c84e:	e775      	b.n	800c73c <_dtoa_r+0x8d4>
 800c850:	f000 f9c2 	bl	800cbd8 <__multadd>
 800c854:	4629      	mov	r1, r5
 800c856:	4680      	mov	r8, r0
 800c858:	2300      	movs	r3, #0
 800c85a:	220a      	movs	r2, #10
 800c85c:	4648      	mov	r0, r9
 800c85e:	f000 f9bb 	bl	800cbd8 <__multadd>
 800c862:	4605      	mov	r5, r0
 800c864:	e7f0      	b.n	800c848 <_dtoa_r+0x9e0>
 800c866:	f1bb 0f00 	cmp.w	fp, #0
 800c86a:	bfcc      	ite	gt
 800c86c:	465e      	movgt	r6, fp
 800c86e:	2601      	movle	r6, #1
 800c870:	443e      	add	r6, r7
 800c872:	f04f 0800 	mov.w	r8, #0
 800c876:	9901      	ldr	r1, [sp, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	4648      	mov	r0, r9
 800c87c:	f000 fba2 	bl	800cfc4 <__lshift>
 800c880:	4621      	mov	r1, r4
 800c882:	9001      	str	r0, [sp, #4]
 800c884:	f000 fc0a 	bl	800d09c <__mcmp>
 800c888:	2800      	cmp	r0, #0
 800c88a:	dcaf      	bgt.n	800c7ec <_dtoa_r+0x984>
 800c88c:	d102      	bne.n	800c894 <_dtoa_r+0xa2c>
 800c88e:	f01a 0f01 	tst.w	sl, #1
 800c892:	d1ab      	bne.n	800c7ec <_dtoa_r+0x984>
 800c894:	4633      	mov	r3, r6
 800c896:	461e      	mov	r6, r3
 800c898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c89c:	2a30      	cmp	r2, #48	@ 0x30
 800c89e:	d0fa      	beq.n	800c896 <_dtoa_r+0xa2e>
 800c8a0:	e5bb      	b.n	800c41a <_dtoa_r+0x5b2>
 800c8a2:	429f      	cmp	r7, r3
 800c8a4:	d1a3      	bne.n	800c7ee <_dtoa_r+0x986>
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	9304      	str	r3, [sp, #16]
 800c8ac:	2331      	movs	r3, #49	@ 0x31
 800c8ae:	703b      	strb	r3, [r7, #0]
 800c8b0:	e5b3      	b.n	800c41a <_dtoa_r+0x5b2>
 800c8b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c8b4:	4f16      	ldr	r7, [pc, #88]	@ (800c910 <_dtoa_r+0xaa8>)
 800c8b6:	b11b      	cbz	r3, 800c8c0 <_dtoa_r+0xa58>
 800c8b8:	f107 0308 	add.w	r3, r7, #8
 800c8bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	b011      	add	sp, #68	@ 0x44
 800c8c4:	ecbd 8b02 	vpop	{d8}
 800c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	9b07      	ldr	r3, [sp, #28]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	f77f ae36 	ble.w	800c540 <_dtoa_r+0x6d8>
 800c8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8d8:	2001      	movs	r0, #1
 800c8da:	e656      	b.n	800c58a <_dtoa_r+0x722>
 800c8dc:	f1bb 0f00 	cmp.w	fp, #0
 800c8e0:	f77f aed7 	ble.w	800c692 <_dtoa_r+0x82a>
 800c8e4:	463e      	mov	r6, r7
 800c8e6:	9801      	ldr	r0, [sp, #4]
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	f7ff fa35 	bl	800bd58 <quorem>
 800c8ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c8f2:	f806 ab01 	strb.w	sl, [r6], #1
 800c8f6:	1bf2      	subs	r2, r6, r7
 800c8f8:	4593      	cmp	fp, r2
 800c8fa:	ddb4      	ble.n	800c866 <_dtoa_r+0x9fe>
 800c8fc:	9901      	ldr	r1, [sp, #4]
 800c8fe:	2300      	movs	r3, #0
 800c900:	220a      	movs	r2, #10
 800c902:	4648      	mov	r0, r9
 800c904:	f000 f968 	bl	800cbd8 <__multadd>
 800c908:	9001      	str	r0, [sp, #4]
 800c90a:	e7ec      	b.n	800c8e6 <_dtoa_r+0xa7e>
 800c90c:	0800f9b2 	.word	0x0800f9b2
 800c910:	0800f936 	.word	0x0800f936

0800c914 <_free_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4605      	mov	r5, r0
 800c918:	2900      	cmp	r1, #0
 800c91a:	d041      	beq.n	800c9a0 <_free_r+0x8c>
 800c91c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c920:	1f0c      	subs	r4, r1, #4
 800c922:	2b00      	cmp	r3, #0
 800c924:	bfb8      	it	lt
 800c926:	18e4      	addlt	r4, r4, r3
 800c928:	f000 f8e8 	bl	800cafc <__malloc_lock>
 800c92c:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a4 <_free_r+0x90>)
 800c92e:	6813      	ldr	r3, [r2, #0]
 800c930:	b933      	cbnz	r3, 800c940 <_free_r+0x2c>
 800c932:	6063      	str	r3, [r4, #4]
 800c934:	6014      	str	r4, [r2, #0]
 800c936:	4628      	mov	r0, r5
 800c938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c93c:	f000 b8e4 	b.w	800cb08 <__malloc_unlock>
 800c940:	42a3      	cmp	r3, r4
 800c942:	d908      	bls.n	800c956 <_free_r+0x42>
 800c944:	6820      	ldr	r0, [r4, #0]
 800c946:	1821      	adds	r1, r4, r0
 800c948:	428b      	cmp	r3, r1
 800c94a:	bf01      	itttt	eq
 800c94c:	6819      	ldreq	r1, [r3, #0]
 800c94e:	685b      	ldreq	r3, [r3, #4]
 800c950:	1809      	addeq	r1, r1, r0
 800c952:	6021      	streq	r1, [r4, #0]
 800c954:	e7ed      	b.n	800c932 <_free_r+0x1e>
 800c956:	461a      	mov	r2, r3
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	b10b      	cbz	r3, 800c960 <_free_r+0x4c>
 800c95c:	42a3      	cmp	r3, r4
 800c95e:	d9fa      	bls.n	800c956 <_free_r+0x42>
 800c960:	6811      	ldr	r1, [r2, #0]
 800c962:	1850      	adds	r0, r2, r1
 800c964:	42a0      	cmp	r0, r4
 800c966:	d10b      	bne.n	800c980 <_free_r+0x6c>
 800c968:	6820      	ldr	r0, [r4, #0]
 800c96a:	4401      	add	r1, r0
 800c96c:	1850      	adds	r0, r2, r1
 800c96e:	4283      	cmp	r3, r0
 800c970:	6011      	str	r1, [r2, #0]
 800c972:	d1e0      	bne.n	800c936 <_free_r+0x22>
 800c974:	6818      	ldr	r0, [r3, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	6053      	str	r3, [r2, #4]
 800c97a:	4408      	add	r0, r1
 800c97c:	6010      	str	r0, [r2, #0]
 800c97e:	e7da      	b.n	800c936 <_free_r+0x22>
 800c980:	d902      	bls.n	800c988 <_free_r+0x74>
 800c982:	230c      	movs	r3, #12
 800c984:	602b      	str	r3, [r5, #0]
 800c986:	e7d6      	b.n	800c936 <_free_r+0x22>
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	1821      	adds	r1, r4, r0
 800c98c:	428b      	cmp	r3, r1
 800c98e:	bf04      	itt	eq
 800c990:	6819      	ldreq	r1, [r3, #0]
 800c992:	685b      	ldreq	r3, [r3, #4]
 800c994:	6063      	str	r3, [r4, #4]
 800c996:	bf04      	itt	eq
 800c998:	1809      	addeq	r1, r1, r0
 800c99a:	6021      	streq	r1, [r4, #0]
 800c99c:	6054      	str	r4, [r2, #4]
 800c99e:	e7ca      	b.n	800c936 <_free_r+0x22>
 800c9a0:	bd38      	pop	{r3, r4, r5, pc}
 800c9a2:	bf00      	nop
 800c9a4:	200055dc 	.word	0x200055dc

0800c9a8 <malloc>:
 800c9a8:	4b02      	ldr	r3, [pc, #8]	@ (800c9b4 <malloc+0xc>)
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f000 b825 	b.w	800c9fc <_malloc_r>
 800c9b2:	bf00      	nop
 800c9b4:	20000084 	.word	0x20000084

0800c9b8 <sbrk_aligned>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4e0f      	ldr	r6, [pc, #60]	@ (800c9f8 <sbrk_aligned+0x40>)
 800c9bc:	460c      	mov	r4, r1
 800c9be:	6831      	ldr	r1, [r6, #0]
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	b911      	cbnz	r1, 800c9ca <sbrk_aligned+0x12>
 800c9c4:	f001 fd3c 	bl	800e440 <_sbrk_r>
 800c9c8:	6030      	str	r0, [r6, #0]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f001 fd37 	bl	800e440 <_sbrk_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d103      	bne.n	800c9de <sbrk_aligned+0x26>
 800c9d6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9da:	4620      	mov	r0, r4
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	1cc4      	adds	r4, r0, #3
 800c9e0:	f024 0403 	bic.w	r4, r4, #3
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d0f8      	beq.n	800c9da <sbrk_aligned+0x22>
 800c9e8:	1a21      	subs	r1, r4, r0
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f001 fd28 	bl	800e440 <_sbrk_r>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d1f2      	bne.n	800c9da <sbrk_aligned+0x22>
 800c9f4:	e7ef      	b.n	800c9d6 <sbrk_aligned+0x1e>
 800c9f6:	bf00      	nop
 800c9f8:	200055d8 	.word	0x200055d8

0800c9fc <_malloc_r>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	1ccd      	adds	r5, r1, #3
 800ca02:	f025 0503 	bic.w	r5, r5, #3
 800ca06:	3508      	adds	r5, #8
 800ca08:	2d0c      	cmp	r5, #12
 800ca0a:	bf38      	it	cc
 800ca0c:	250c      	movcc	r5, #12
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	4606      	mov	r6, r0
 800ca12:	db01      	blt.n	800ca18 <_malloc_r+0x1c>
 800ca14:	42a9      	cmp	r1, r5
 800ca16:	d904      	bls.n	800ca22 <_malloc_r+0x26>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	6033      	str	r3, [r6, #0]
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800caf8 <_malloc_r+0xfc>
 800ca26:	f000 f869 	bl	800cafc <__malloc_lock>
 800ca2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca2e:	461c      	mov	r4, r3
 800ca30:	bb44      	cbnz	r4, 800ca84 <_malloc_r+0x88>
 800ca32:	4629      	mov	r1, r5
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff ffbf 	bl	800c9b8 <sbrk_aligned>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	d158      	bne.n	800caf2 <_malloc_r+0xf6>
 800ca40:	f8d8 4000 	ldr.w	r4, [r8]
 800ca44:	4627      	mov	r7, r4
 800ca46:	2f00      	cmp	r7, #0
 800ca48:	d143      	bne.n	800cad2 <_malloc_r+0xd6>
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	d04b      	beq.n	800cae6 <_malloc_r+0xea>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	4639      	mov	r1, r7
 800ca52:	4630      	mov	r0, r6
 800ca54:	eb04 0903 	add.w	r9, r4, r3
 800ca58:	f001 fcf2 	bl	800e440 <_sbrk_r>
 800ca5c:	4581      	cmp	r9, r0
 800ca5e:	d142      	bne.n	800cae6 <_malloc_r+0xea>
 800ca60:	6821      	ldr	r1, [r4, #0]
 800ca62:	1a6d      	subs	r5, r5, r1
 800ca64:	4629      	mov	r1, r5
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ffa6 	bl	800c9b8 <sbrk_aligned>
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d03a      	beq.n	800cae6 <_malloc_r+0xea>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	442b      	add	r3, r5
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	bb62      	cbnz	r2, 800cad8 <_malloc_r+0xdc>
 800ca7e:	f8c8 7000 	str.w	r7, [r8]
 800ca82:	e00f      	b.n	800caa4 <_malloc_r+0xa8>
 800ca84:	6822      	ldr	r2, [r4, #0]
 800ca86:	1b52      	subs	r2, r2, r5
 800ca88:	d420      	bmi.n	800cacc <_malloc_r+0xd0>
 800ca8a:	2a0b      	cmp	r2, #11
 800ca8c:	d917      	bls.n	800cabe <_malloc_r+0xc2>
 800ca8e:	1961      	adds	r1, r4, r5
 800ca90:	42a3      	cmp	r3, r4
 800ca92:	6025      	str	r5, [r4, #0]
 800ca94:	bf18      	it	ne
 800ca96:	6059      	strne	r1, [r3, #4]
 800ca98:	6863      	ldr	r3, [r4, #4]
 800ca9a:	bf08      	it	eq
 800ca9c:	f8c8 1000 	streq.w	r1, [r8]
 800caa0:	5162      	str	r2, [r4, r5]
 800caa2:	604b      	str	r3, [r1, #4]
 800caa4:	4630      	mov	r0, r6
 800caa6:	f000 f82f 	bl	800cb08 <__malloc_unlock>
 800caaa:	f104 000b 	add.w	r0, r4, #11
 800caae:	1d23      	adds	r3, r4, #4
 800cab0:	f020 0007 	bic.w	r0, r0, #7
 800cab4:	1ac2      	subs	r2, r0, r3
 800cab6:	bf1c      	itt	ne
 800cab8:	1a1b      	subne	r3, r3, r0
 800caba:	50a3      	strne	r3, [r4, r2]
 800cabc:	e7af      	b.n	800ca1e <_malloc_r+0x22>
 800cabe:	6862      	ldr	r2, [r4, #4]
 800cac0:	42a3      	cmp	r3, r4
 800cac2:	bf0c      	ite	eq
 800cac4:	f8c8 2000 	streq.w	r2, [r8]
 800cac8:	605a      	strne	r2, [r3, #4]
 800caca:	e7eb      	b.n	800caa4 <_malloc_r+0xa8>
 800cacc:	4623      	mov	r3, r4
 800cace:	6864      	ldr	r4, [r4, #4]
 800cad0:	e7ae      	b.n	800ca30 <_malloc_r+0x34>
 800cad2:	463c      	mov	r4, r7
 800cad4:	687f      	ldr	r7, [r7, #4]
 800cad6:	e7b6      	b.n	800ca46 <_malloc_r+0x4a>
 800cad8:	461a      	mov	r2, r3
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	42a3      	cmp	r3, r4
 800cade:	d1fb      	bne.n	800cad8 <_malloc_r+0xdc>
 800cae0:	2300      	movs	r3, #0
 800cae2:	6053      	str	r3, [r2, #4]
 800cae4:	e7de      	b.n	800caa4 <_malloc_r+0xa8>
 800cae6:	230c      	movs	r3, #12
 800cae8:	6033      	str	r3, [r6, #0]
 800caea:	4630      	mov	r0, r6
 800caec:	f000 f80c 	bl	800cb08 <__malloc_unlock>
 800caf0:	e794      	b.n	800ca1c <_malloc_r+0x20>
 800caf2:	6005      	str	r5, [r0, #0]
 800caf4:	e7d6      	b.n	800caa4 <_malloc_r+0xa8>
 800caf6:	bf00      	nop
 800caf8:	200055dc 	.word	0x200055dc

0800cafc <__malloc_lock>:
 800cafc:	4801      	ldr	r0, [pc, #4]	@ (800cb04 <__malloc_lock+0x8>)
 800cafe:	f7ff b914 	b.w	800bd2a <__retarget_lock_acquire_recursive>
 800cb02:	bf00      	nop
 800cb04:	200055d4 	.word	0x200055d4

0800cb08 <__malloc_unlock>:
 800cb08:	4801      	ldr	r0, [pc, #4]	@ (800cb10 <__malloc_unlock+0x8>)
 800cb0a:	f7ff b90f 	b.w	800bd2c <__retarget_lock_release_recursive>
 800cb0e:	bf00      	nop
 800cb10:	200055d4 	.word	0x200055d4

0800cb14 <_Balloc>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	69c6      	ldr	r6, [r0, #28]
 800cb18:	4604      	mov	r4, r0
 800cb1a:	460d      	mov	r5, r1
 800cb1c:	b976      	cbnz	r6, 800cb3c <_Balloc+0x28>
 800cb1e:	2010      	movs	r0, #16
 800cb20:	f7ff ff42 	bl	800c9a8 <malloc>
 800cb24:	4602      	mov	r2, r0
 800cb26:	61e0      	str	r0, [r4, #28]
 800cb28:	b920      	cbnz	r0, 800cb34 <_Balloc+0x20>
 800cb2a:	4b18      	ldr	r3, [pc, #96]	@ (800cb8c <_Balloc+0x78>)
 800cb2c:	4818      	ldr	r0, [pc, #96]	@ (800cb90 <_Balloc+0x7c>)
 800cb2e:	216b      	movs	r1, #107	@ 0x6b
 800cb30:	f001 fc9e 	bl	800e470 <__assert_func>
 800cb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb38:	6006      	str	r6, [r0, #0]
 800cb3a:	60c6      	str	r6, [r0, #12]
 800cb3c:	69e6      	ldr	r6, [r4, #28]
 800cb3e:	68f3      	ldr	r3, [r6, #12]
 800cb40:	b183      	cbz	r3, 800cb64 <_Balloc+0x50>
 800cb42:	69e3      	ldr	r3, [r4, #28]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb4a:	b9b8      	cbnz	r0, 800cb7c <_Balloc+0x68>
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb52:	1d72      	adds	r2, r6, #5
 800cb54:	0092      	lsls	r2, r2, #2
 800cb56:	4620      	mov	r0, r4
 800cb58:	f001 fca8 	bl	800e4ac <_calloc_r>
 800cb5c:	b160      	cbz	r0, 800cb78 <_Balloc+0x64>
 800cb5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb62:	e00e      	b.n	800cb82 <_Balloc+0x6e>
 800cb64:	2221      	movs	r2, #33	@ 0x21
 800cb66:	2104      	movs	r1, #4
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f001 fc9f 	bl	800e4ac <_calloc_r>
 800cb6e:	69e3      	ldr	r3, [r4, #28]
 800cb70:	60f0      	str	r0, [r6, #12]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1e4      	bne.n	800cb42 <_Balloc+0x2e>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	6802      	ldr	r2, [r0, #0]
 800cb7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb82:	2300      	movs	r3, #0
 800cb84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb88:	e7f7      	b.n	800cb7a <_Balloc+0x66>
 800cb8a:	bf00      	nop
 800cb8c:	0800f943 	.word	0x0800f943
 800cb90:	0800f9c3 	.word	0x0800f9c3

0800cb94 <_Bfree>:
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	69c6      	ldr	r6, [r0, #28]
 800cb98:	4605      	mov	r5, r0
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	b976      	cbnz	r6, 800cbbc <_Bfree+0x28>
 800cb9e:	2010      	movs	r0, #16
 800cba0:	f7ff ff02 	bl	800c9a8 <malloc>
 800cba4:	4602      	mov	r2, r0
 800cba6:	61e8      	str	r0, [r5, #28]
 800cba8:	b920      	cbnz	r0, 800cbb4 <_Bfree+0x20>
 800cbaa:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <_Bfree+0x3c>)
 800cbac:	4809      	ldr	r0, [pc, #36]	@ (800cbd4 <_Bfree+0x40>)
 800cbae:	218f      	movs	r1, #143	@ 0x8f
 800cbb0:	f001 fc5e 	bl	800e470 <__assert_func>
 800cbb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbb8:	6006      	str	r6, [r0, #0]
 800cbba:	60c6      	str	r6, [r0, #12]
 800cbbc:	b13c      	cbz	r4, 800cbce <_Bfree+0x3a>
 800cbbe:	69eb      	ldr	r3, [r5, #28]
 800cbc0:	6862      	ldr	r2, [r4, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbc8:	6021      	str	r1, [r4, #0]
 800cbca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbce:	bd70      	pop	{r4, r5, r6, pc}
 800cbd0:	0800f943 	.word	0x0800f943
 800cbd4:	0800f9c3 	.word	0x0800f9c3

0800cbd8 <__multadd>:
 800cbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbdc:	690d      	ldr	r5, [r1, #16]
 800cbde:	4607      	mov	r7, r0
 800cbe0:	460c      	mov	r4, r1
 800cbe2:	461e      	mov	r6, r3
 800cbe4:	f101 0c14 	add.w	ip, r1, #20
 800cbe8:	2000      	movs	r0, #0
 800cbea:	f8dc 3000 	ldr.w	r3, [ip]
 800cbee:	b299      	uxth	r1, r3
 800cbf0:	fb02 6101 	mla	r1, r2, r1, r6
 800cbf4:	0c1e      	lsrs	r6, r3, #16
 800cbf6:	0c0b      	lsrs	r3, r1, #16
 800cbf8:	fb02 3306 	mla	r3, r2, r6, r3
 800cbfc:	b289      	uxth	r1, r1
 800cbfe:	3001      	adds	r0, #1
 800cc00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc04:	4285      	cmp	r5, r0
 800cc06:	f84c 1b04 	str.w	r1, [ip], #4
 800cc0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc0e:	dcec      	bgt.n	800cbea <__multadd+0x12>
 800cc10:	b30e      	cbz	r6, 800cc56 <__multadd+0x7e>
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	42ab      	cmp	r3, r5
 800cc16:	dc19      	bgt.n	800cc4c <__multadd+0x74>
 800cc18:	6861      	ldr	r1, [r4, #4]
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	3101      	adds	r1, #1
 800cc1e:	f7ff ff79 	bl	800cb14 <_Balloc>
 800cc22:	4680      	mov	r8, r0
 800cc24:	b928      	cbnz	r0, 800cc32 <__multadd+0x5a>
 800cc26:	4602      	mov	r2, r0
 800cc28:	4b0c      	ldr	r3, [pc, #48]	@ (800cc5c <__multadd+0x84>)
 800cc2a:	480d      	ldr	r0, [pc, #52]	@ (800cc60 <__multadd+0x88>)
 800cc2c:	21ba      	movs	r1, #186	@ 0xba
 800cc2e:	f001 fc1f 	bl	800e470 <__assert_func>
 800cc32:	6922      	ldr	r2, [r4, #16]
 800cc34:	3202      	adds	r2, #2
 800cc36:	f104 010c 	add.w	r1, r4, #12
 800cc3a:	0092      	lsls	r2, r2, #2
 800cc3c:	300c      	adds	r0, #12
 800cc3e:	f7ff f876 	bl	800bd2e <memcpy>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4638      	mov	r0, r7
 800cc46:	f7ff ffa5 	bl	800cb94 <_Bfree>
 800cc4a:	4644      	mov	r4, r8
 800cc4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc50:	3501      	adds	r5, #1
 800cc52:	615e      	str	r6, [r3, #20]
 800cc54:	6125      	str	r5, [r4, #16]
 800cc56:	4620      	mov	r0, r4
 800cc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5c:	0800f9b2 	.word	0x0800f9b2
 800cc60:	0800f9c3 	.word	0x0800f9c3

0800cc64 <__s2b>:
 800cc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc68:	460c      	mov	r4, r1
 800cc6a:	4615      	mov	r5, r2
 800cc6c:	461f      	mov	r7, r3
 800cc6e:	2209      	movs	r2, #9
 800cc70:	3308      	adds	r3, #8
 800cc72:	4606      	mov	r6, r0
 800cc74:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc78:	2100      	movs	r1, #0
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	db09      	blt.n	800cc94 <__s2b+0x30>
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7ff ff47 	bl	800cb14 <_Balloc>
 800cc86:	b940      	cbnz	r0, 800cc9a <__s2b+0x36>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	4b19      	ldr	r3, [pc, #100]	@ (800ccf0 <__s2b+0x8c>)
 800cc8c:	4819      	ldr	r0, [pc, #100]	@ (800ccf4 <__s2b+0x90>)
 800cc8e:	21d3      	movs	r1, #211	@ 0xd3
 800cc90:	f001 fbee 	bl	800e470 <__assert_func>
 800cc94:	0052      	lsls	r2, r2, #1
 800cc96:	3101      	adds	r1, #1
 800cc98:	e7f0      	b.n	800cc7c <__s2b+0x18>
 800cc9a:	9b08      	ldr	r3, [sp, #32]
 800cc9c:	6143      	str	r3, [r0, #20]
 800cc9e:	2d09      	cmp	r5, #9
 800cca0:	f04f 0301 	mov.w	r3, #1
 800cca4:	6103      	str	r3, [r0, #16]
 800cca6:	dd16      	ble.n	800ccd6 <__s2b+0x72>
 800cca8:	f104 0909 	add.w	r9, r4, #9
 800ccac:	46c8      	mov	r8, r9
 800ccae:	442c      	add	r4, r5
 800ccb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	3b30      	subs	r3, #48	@ 0x30
 800ccb8:	220a      	movs	r2, #10
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ff8c 	bl	800cbd8 <__multadd>
 800ccc0:	45a0      	cmp	r8, r4
 800ccc2:	d1f5      	bne.n	800ccb0 <__s2b+0x4c>
 800ccc4:	f1a5 0408 	sub.w	r4, r5, #8
 800ccc8:	444c      	add	r4, r9
 800ccca:	1b2d      	subs	r5, r5, r4
 800cccc:	1963      	adds	r3, r4, r5
 800ccce:	42bb      	cmp	r3, r7
 800ccd0:	db04      	blt.n	800ccdc <__s2b+0x78>
 800ccd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd6:	340a      	adds	r4, #10
 800ccd8:	2509      	movs	r5, #9
 800ccda:	e7f6      	b.n	800ccca <__s2b+0x66>
 800ccdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cce0:	4601      	mov	r1, r0
 800cce2:	3b30      	subs	r3, #48	@ 0x30
 800cce4:	220a      	movs	r2, #10
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7ff ff76 	bl	800cbd8 <__multadd>
 800ccec:	e7ee      	b.n	800cccc <__s2b+0x68>
 800ccee:	bf00      	nop
 800ccf0:	0800f9b2 	.word	0x0800f9b2
 800ccf4:	0800f9c3 	.word	0x0800f9c3

0800ccf8 <__hi0bits>:
 800ccf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	bf36      	itet	cc
 800cd00:	0403      	lslcc	r3, r0, #16
 800cd02:	2000      	movcs	r0, #0
 800cd04:	2010      	movcc	r0, #16
 800cd06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd0a:	bf3c      	itt	cc
 800cd0c:	021b      	lslcc	r3, r3, #8
 800cd0e:	3008      	addcc	r0, #8
 800cd10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd14:	bf3c      	itt	cc
 800cd16:	011b      	lslcc	r3, r3, #4
 800cd18:	3004      	addcc	r0, #4
 800cd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd1e:	bf3c      	itt	cc
 800cd20:	009b      	lslcc	r3, r3, #2
 800cd22:	3002      	addcc	r0, #2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	db05      	blt.n	800cd34 <__hi0bits+0x3c>
 800cd28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd2c:	f100 0001 	add.w	r0, r0, #1
 800cd30:	bf08      	it	eq
 800cd32:	2020      	moveq	r0, #32
 800cd34:	4770      	bx	lr

0800cd36 <__lo0bits>:
 800cd36:	6803      	ldr	r3, [r0, #0]
 800cd38:	4602      	mov	r2, r0
 800cd3a:	f013 0007 	ands.w	r0, r3, #7
 800cd3e:	d00b      	beq.n	800cd58 <__lo0bits+0x22>
 800cd40:	07d9      	lsls	r1, r3, #31
 800cd42:	d421      	bmi.n	800cd88 <__lo0bits+0x52>
 800cd44:	0798      	lsls	r0, r3, #30
 800cd46:	bf49      	itett	mi
 800cd48:	085b      	lsrmi	r3, r3, #1
 800cd4a:	089b      	lsrpl	r3, r3, #2
 800cd4c:	2001      	movmi	r0, #1
 800cd4e:	6013      	strmi	r3, [r2, #0]
 800cd50:	bf5c      	itt	pl
 800cd52:	6013      	strpl	r3, [r2, #0]
 800cd54:	2002      	movpl	r0, #2
 800cd56:	4770      	bx	lr
 800cd58:	b299      	uxth	r1, r3
 800cd5a:	b909      	cbnz	r1, 800cd60 <__lo0bits+0x2a>
 800cd5c:	0c1b      	lsrs	r3, r3, #16
 800cd5e:	2010      	movs	r0, #16
 800cd60:	b2d9      	uxtb	r1, r3
 800cd62:	b909      	cbnz	r1, 800cd68 <__lo0bits+0x32>
 800cd64:	3008      	adds	r0, #8
 800cd66:	0a1b      	lsrs	r3, r3, #8
 800cd68:	0719      	lsls	r1, r3, #28
 800cd6a:	bf04      	itt	eq
 800cd6c:	091b      	lsreq	r3, r3, #4
 800cd6e:	3004      	addeq	r0, #4
 800cd70:	0799      	lsls	r1, r3, #30
 800cd72:	bf04      	itt	eq
 800cd74:	089b      	lsreq	r3, r3, #2
 800cd76:	3002      	addeq	r0, #2
 800cd78:	07d9      	lsls	r1, r3, #31
 800cd7a:	d403      	bmi.n	800cd84 <__lo0bits+0x4e>
 800cd7c:	085b      	lsrs	r3, r3, #1
 800cd7e:	f100 0001 	add.w	r0, r0, #1
 800cd82:	d003      	beq.n	800cd8c <__lo0bits+0x56>
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	4770      	bx	lr
 800cd88:	2000      	movs	r0, #0
 800cd8a:	4770      	bx	lr
 800cd8c:	2020      	movs	r0, #32
 800cd8e:	4770      	bx	lr

0800cd90 <__i2b>:
 800cd90:	b510      	push	{r4, lr}
 800cd92:	460c      	mov	r4, r1
 800cd94:	2101      	movs	r1, #1
 800cd96:	f7ff febd 	bl	800cb14 <_Balloc>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	b928      	cbnz	r0, 800cdaa <__i2b+0x1a>
 800cd9e:	4b05      	ldr	r3, [pc, #20]	@ (800cdb4 <__i2b+0x24>)
 800cda0:	4805      	ldr	r0, [pc, #20]	@ (800cdb8 <__i2b+0x28>)
 800cda2:	f240 1145 	movw	r1, #325	@ 0x145
 800cda6:	f001 fb63 	bl	800e470 <__assert_func>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	6144      	str	r4, [r0, #20]
 800cdae:	6103      	str	r3, [r0, #16]
 800cdb0:	bd10      	pop	{r4, pc}
 800cdb2:	bf00      	nop
 800cdb4:	0800f9b2 	.word	0x0800f9b2
 800cdb8:	0800f9c3 	.word	0x0800f9c3

0800cdbc <__multiply>:
 800cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	4614      	mov	r4, r2
 800cdc2:	690a      	ldr	r2, [r1, #16]
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	bfa8      	it	ge
 800cdca:	4623      	movge	r3, r4
 800cdcc:	460f      	mov	r7, r1
 800cdce:	bfa4      	itt	ge
 800cdd0:	460c      	movge	r4, r1
 800cdd2:	461f      	movge	r7, r3
 800cdd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cdd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cddc:	68a3      	ldr	r3, [r4, #8]
 800cdde:	6861      	ldr	r1, [r4, #4]
 800cde0:	eb0a 0609 	add.w	r6, sl, r9
 800cde4:	42b3      	cmp	r3, r6
 800cde6:	b085      	sub	sp, #20
 800cde8:	bfb8      	it	lt
 800cdea:	3101      	addlt	r1, #1
 800cdec:	f7ff fe92 	bl	800cb14 <_Balloc>
 800cdf0:	b930      	cbnz	r0, 800ce00 <__multiply+0x44>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	4b44      	ldr	r3, [pc, #272]	@ (800cf08 <__multiply+0x14c>)
 800cdf6:	4845      	ldr	r0, [pc, #276]	@ (800cf0c <__multiply+0x150>)
 800cdf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdfc:	f001 fb38 	bl	800e470 <__assert_func>
 800ce00:	f100 0514 	add.w	r5, r0, #20
 800ce04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce08:	462b      	mov	r3, r5
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4543      	cmp	r3, r8
 800ce0e:	d321      	bcc.n	800ce54 <__multiply+0x98>
 800ce10:	f107 0114 	add.w	r1, r7, #20
 800ce14:	f104 0214 	add.w	r2, r4, #20
 800ce18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce20:	9302      	str	r3, [sp, #8]
 800ce22:	1b13      	subs	r3, r2, r4
 800ce24:	3b15      	subs	r3, #21
 800ce26:	f023 0303 	bic.w	r3, r3, #3
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	f104 0715 	add.w	r7, r4, #21
 800ce30:	42ba      	cmp	r2, r7
 800ce32:	bf38      	it	cc
 800ce34:	2304      	movcc	r3, #4
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	9b02      	ldr	r3, [sp, #8]
 800ce3a:	9103      	str	r1, [sp, #12]
 800ce3c:	428b      	cmp	r3, r1
 800ce3e:	d80c      	bhi.n	800ce5a <__multiply+0x9e>
 800ce40:	2e00      	cmp	r6, #0
 800ce42:	dd03      	ble.n	800ce4c <__multiply+0x90>
 800ce44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d05b      	beq.n	800cf04 <__multiply+0x148>
 800ce4c:	6106      	str	r6, [r0, #16]
 800ce4e:	b005      	add	sp, #20
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	f843 2b04 	str.w	r2, [r3], #4
 800ce58:	e7d8      	b.n	800ce0c <__multiply+0x50>
 800ce5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce5e:	f1ba 0f00 	cmp.w	sl, #0
 800ce62:	d024      	beq.n	800ceae <__multiply+0xf2>
 800ce64:	f104 0e14 	add.w	lr, r4, #20
 800ce68:	46a9      	mov	r9, r5
 800ce6a:	f04f 0c00 	mov.w	ip, #0
 800ce6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce72:	f8d9 3000 	ldr.w	r3, [r9]
 800ce76:	fa1f fb87 	uxth.w	fp, r7
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce84:	f8d9 7000 	ldr.w	r7, [r9]
 800ce88:	4463      	add	r3, ip
 800ce8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce8e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce9c:	4572      	cmp	r2, lr
 800ce9e:	f849 3b04 	str.w	r3, [r9], #4
 800cea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cea6:	d8e2      	bhi.n	800ce6e <__multiply+0xb2>
 800cea8:	9b01      	ldr	r3, [sp, #4]
 800ceaa:	f845 c003 	str.w	ip, [r5, r3]
 800ceae:	9b03      	ldr	r3, [sp, #12]
 800ceb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ceb4:	3104      	adds	r1, #4
 800ceb6:	f1b9 0f00 	cmp.w	r9, #0
 800ceba:	d021      	beq.n	800cf00 <__multiply+0x144>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	f104 0c14 	add.w	ip, r4, #20
 800cec2:	46ae      	mov	lr, r5
 800cec4:	f04f 0a00 	mov.w	sl, #0
 800cec8:	f8bc b000 	ldrh.w	fp, [ip]
 800cecc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ced0:	fb09 770b 	mla	r7, r9, fp, r7
 800ced4:	4457      	add	r7, sl
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cedc:	f84e 3b04 	str.w	r3, [lr], #4
 800cee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cee8:	f8be 3000 	ldrh.w	r3, [lr]
 800ceec:	fb09 330a 	mla	r3, r9, sl, r3
 800cef0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cef4:	4562      	cmp	r2, ip
 800cef6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cefa:	d8e5      	bhi.n	800cec8 <__multiply+0x10c>
 800cefc:	9f01      	ldr	r7, [sp, #4]
 800cefe:	51eb      	str	r3, [r5, r7]
 800cf00:	3504      	adds	r5, #4
 800cf02:	e799      	b.n	800ce38 <__multiply+0x7c>
 800cf04:	3e01      	subs	r6, #1
 800cf06:	e79b      	b.n	800ce40 <__multiply+0x84>
 800cf08:	0800f9b2 	.word	0x0800f9b2
 800cf0c:	0800f9c3 	.word	0x0800f9c3

0800cf10 <__pow5mult>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	4615      	mov	r5, r2
 800cf16:	f012 0203 	ands.w	r2, r2, #3
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	460e      	mov	r6, r1
 800cf1e:	d007      	beq.n	800cf30 <__pow5mult+0x20>
 800cf20:	4c25      	ldr	r4, [pc, #148]	@ (800cfb8 <__pow5mult+0xa8>)
 800cf22:	3a01      	subs	r2, #1
 800cf24:	2300      	movs	r3, #0
 800cf26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf2a:	f7ff fe55 	bl	800cbd8 <__multadd>
 800cf2e:	4606      	mov	r6, r0
 800cf30:	10ad      	asrs	r5, r5, #2
 800cf32:	d03d      	beq.n	800cfb0 <__pow5mult+0xa0>
 800cf34:	69fc      	ldr	r4, [r7, #28]
 800cf36:	b97c      	cbnz	r4, 800cf58 <__pow5mult+0x48>
 800cf38:	2010      	movs	r0, #16
 800cf3a:	f7ff fd35 	bl	800c9a8 <malloc>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	61f8      	str	r0, [r7, #28]
 800cf42:	b928      	cbnz	r0, 800cf50 <__pow5mult+0x40>
 800cf44:	4b1d      	ldr	r3, [pc, #116]	@ (800cfbc <__pow5mult+0xac>)
 800cf46:	481e      	ldr	r0, [pc, #120]	@ (800cfc0 <__pow5mult+0xb0>)
 800cf48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf4c:	f001 fa90 	bl	800e470 <__assert_func>
 800cf50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf54:	6004      	str	r4, [r0, #0]
 800cf56:	60c4      	str	r4, [r0, #12]
 800cf58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf60:	b94c      	cbnz	r4, 800cf76 <__pow5mult+0x66>
 800cf62:	f240 2171 	movw	r1, #625	@ 0x271
 800cf66:	4638      	mov	r0, r7
 800cf68:	f7ff ff12 	bl	800cd90 <__i2b>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf72:	4604      	mov	r4, r0
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	f04f 0900 	mov.w	r9, #0
 800cf7a:	07eb      	lsls	r3, r5, #31
 800cf7c:	d50a      	bpl.n	800cf94 <__pow5mult+0x84>
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4622      	mov	r2, r4
 800cf82:	4638      	mov	r0, r7
 800cf84:	f7ff ff1a 	bl	800cdbc <__multiply>
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4680      	mov	r8, r0
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	f7ff fe01 	bl	800cb94 <_Bfree>
 800cf92:	4646      	mov	r6, r8
 800cf94:	106d      	asrs	r5, r5, #1
 800cf96:	d00b      	beq.n	800cfb0 <__pow5mult+0xa0>
 800cf98:	6820      	ldr	r0, [r4, #0]
 800cf9a:	b938      	cbnz	r0, 800cfac <__pow5mult+0x9c>
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	4638      	mov	r0, r7
 800cfa2:	f7ff ff0b 	bl	800cdbc <__multiply>
 800cfa6:	6020      	str	r0, [r4, #0]
 800cfa8:	f8c0 9000 	str.w	r9, [r0]
 800cfac:	4604      	mov	r4, r0
 800cfae:	e7e4      	b.n	800cf7a <__pow5mult+0x6a>
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb6:	bf00      	nop
 800cfb8:	0800fa1c 	.word	0x0800fa1c
 800cfbc:	0800f943 	.word	0x0800f943
 800cfc0:	0800f9c3 	.word	0x0800f9c3

0800cfc4 <__lshift>:
 800cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc8:	460c      	mov	r4, r1
 800cfca:	6849      	ldr	r1, [r1, #4]
 800cfcc:	6923      	ldr	r3, [r4, #16]
 800cfce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	4607      	mov	r7, r0
 800cfd6:	4691      	mov	r9, r2
 800cfd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfdc:	f108 0601 	add.w	r6, r8, #1
 800cfe0:	42b3      	cmp	r3, r6
 800cfe2:	db0b      	blt.n	800cffc <__lshift+0x38>
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	f7ff fd95 	bl	800cb14 <_Balloc>
 800cfea:	4605      	mov	r5, r0
 800cfec:	b948      	cbnz	r0, 800d002 <__lshift+0x3e>
 800cfee:	4602      	mov	r2, r0
 800cff0:	4b28      	ldr	r3, [pc, #160]	@ (800d094 <__lshift+0xd0>)
 800cff2:	4829      	ldr	r0, [pc, #164]	@ (800d098 <__lshift+0xd4>)
 800cff4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cff8:	f001 fa3a 	bl	800e470 <__assert_func>
 800cffc:	3101      	adds	r1, #1
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	e7ee      	b.n	800cfe0 <__lshift+0x1c>
 800d002:	2300      	movs	r3, #0
 800d004:	f100 0114 	add.w	r1, r0, #20
 800d008:	f100 0210 	add.w	r2, r0, #16
 800d00c:	4618      	mov	r0, r3
 800d00e:	4553      	cmp	r3, sl
 800d010:	db33      	blt.n	800d07a <__lshift+0xb6>
 800d012:	6920      	ldr	r0, [r4, #16]
 800d014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d018:	f104 0314 	add.w	r3, r4, #20
 800d01c:	f019 091f 	ands.w	r9, r9, #31
 800d020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d028:	d02b      	beq.n	800d082 <__lshift+0xbe>
 800d02a:	f1c9 0e20 	rsb	lr, r9, #32
 800d02e:	468a      	mov	sl, r1
 800d030:	2200      	movs	r2, #0
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	fa00 f009 	lsl.w	r0, r0, r9
 800d038:	4310      	orrs	r0, r2
 800d03a:	f84a 0b04 	str.w	r0, [sl], #4
 800d03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d042:	459c      	cmp	ip, r3
 800d044:	fa22 f20e 	lsr.w	r2, r2, lr
 800d048:	d8f3      	bhi.n	800d032 <__lshift+0x6e>
 800d04a:	ebac 0304 	sub.w	r3, ip, r4
 800d04e:	3b15      	subs	r3, #21
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	3304      	adds	r3, #4
 800d056:	f104 0015 	add.w	r0, r4, #21
 800d05a:	4584      	cmp	ip, r0
 800d05c:	bf38      	it	cc
 800d05e:	2304      	movcc	r3, #4
 800d060:	50ca      	str	r2, [r1, r3]
 800d062:	b10a      	cbz	r2, 800d068 <__lshift+0xa4>
 800d064:	f108 0602 	add.w	r6, r8, #2
 800d068:	3e01      	subs	r6, #1
 800d06a:	4638      	mov	r0, r7
 800d06c:	612e      	str	r6, [r5, #16]
 800d06e:	4621      	mov	r1, r4
 800d070:	f7ff fd90 	bl	800cb94 <_Bfree>
 800d074:	4628      	mov	r0, r5
 800d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d07e:	3301      	adds	r3, #1
 800d080:	e7c5      	b.n	800d00e <__lshift+0x4a>
 800d082:	3904      	subs	r1, #4
 800d084:	f853 2b04 	ldr.w	r2, [r3], #4
 800d088:	f841 2f04 	str.w	r2, [r1, #4]!
 800d08c:	459c      	cmp	ip, r3
 800d08e:	d8f9      	bhi.n	800d084 <__lshift+0xc0>
 800d090:	e7ea      	b.n	800d068 <__lshift+0xa4>
 800d092:	bf00      	nop
 800d094:	0800f9b2 	.word	0x0800f9b2
 800d098:	0800f9c3 	.word	0x0800f9c3

0800d09c <__mcmp>:
 800d09c:	690a      	ldr	r2, [r1, #16]
 800d09e:	4603      	mov	r3, r0
 800d0a0:	6900      	ldr	r0, [r0, #16]
 800d0a2:	1a80      	subs	r0, r0, r2
 800d0a4:	b530      	push	{r4, r5, lr}
 800d0a6:	d10e      	bne.n	800d0c6 <__mcmp+0x2a>
 800d0a8:	3314      	adds	r3, #20
 800d0aa:	3114      	adds	r1, #20
 800d0ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0bc:	4295      	cmp	r5, r2
 800d0be:	d003      	beq.n	800d0c8 <__mcmp+0x2c>
 800d0c0:	d205      	bcs.n	800d0ce <__mcmp+0x32>
 800d0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c6:	bd30      	pop	{r4, r5, pc}
 800d0c8:	42a3      	cmp	r3, r4
 800d0ca:	d3f3      	bcc.n	800d0b4 <__mcmp+0x18>
 800d0cc:	e7fb      	b.n	800d0c6 <__mcmp+0x2a>
 800d0ce:	2001      	movs	r0, #1
 800d0d0:	e7f9      	b.n	800d0c6 <__mcmp+0x2a>
	...

0800d0d4 <__mdiff>:
 800d0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	4689      	mov	r9, r1
 800d0da:	4606      	mov	r6, r0
 800d0dc:	4611      	mov	r1, r2
 800d0de:	4648      	mov	r0, r9
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	f7ff ffdb 	bl	800d09c <__mcmp>
 800d0e6:	1e05      	subs	r5, r0, #0
 800d0e8:	d112      	bne.n	800d110 <__mdiff+0x3c>
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7ff fd11 	bl	800cb14 <_Balloc>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	b928      	cbnz	r0, 800d102 <__mdiff+0x2e>
 800d0f6:	4b3f      	ldr	r3, [pc, #252]	@ (800d1f4 <__mdiff+0x120>)
 800d0f8:	f240 2137 	movw	r1, #567	@ 0x237
 800d0fc:	483e      	ldr	r0, [pc, #248]	@ (800d1f8 <__mdiff+0x124>)
 800d0fe:	f001 f9b7 	bl	800e470 <__assert_func>
 800d102:	2301      	movs	r3, #1
 800d104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d108:	4610      	mov	r0, r2
 800d10a:	b003      	add	sp, #12
 800d10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d110:	bfbc      	itt	lt
 800d112:	464b      	movlt	r3, r9
 800d114:	46a1      	movlt	r9, r4
 800d116:	4630      	mov	r0, r6
 800d118:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d11c:	bfba      	itte	lt
 800d11e:	461c      	movlt	r4, r3
 800d120:	2501      	movlt	r5, #1
 800d122:	2500      	movge	r5, #0
 800d124:	f7ff fcf6 	bl	800cb14 <_Balloc>
 800d128:	4602      	mov	r2, r0
 800d12a:	b918      	cbnz	r0, 800d134 <__mdiff+0x60>
 800d12c:	4b31      	ldr	r3, [pc, #196]	@ (800d1f4 <__mdiff+0x120>)
 800d12e:	f240 2145 	movw	r1, #581	@ 0x245
 800d132:	e7e3      	b.n	800d0fc <__mdiff+0x28>
 800d134:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d138:	6926      	ldr	r6, [r4, #16]
 800d13a:	60c5      	str	r5, [r0, #12]
 800d13c:	f109 0310 	add.w	r3, r9, #16
 800d140:	f109 0514 	add.w	r5, r9, #20
 800d144:	f104 0e14 	add.w	lr, r4, #20
 800d148:	f100 0b14 	add.w	fp, r0, #20
 800d14c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d150:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	46d9      	mov	r9, fp
 800d158:	f04f 0c00 	mov.w	ip, #0
 800d15c:	9b01      	ldr	r3, [sp, #4]
 800d15e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d162:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d166:	9301      	str	r3, [sp, #4]
 800d168:	fa1f f38a 	uxth.w	r3, sl
 800d16c:	4619      	mov	r1, r3
 800d16e:	b283      	uxth	r3, r0
 800d170:	1acb      	subs	r3, r1, r3
 800d172:	0c00      	lsrs	r0, r0, #16
 800d174:	4463      	add	r3, ip
 800d176:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d17a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d17e:	b29b      	uxth	r3, r3
 800d180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d184:	4576      	cmp	r6, lr
 800d186:	f849 3b04 	str.w	r3, [r9], #4
 800d18a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d18e:	d8e5      	bhi.n	800d15c <__mdiff+0x88>
 800d190:	1b33      	subs	r3, r6, r4
 800d192:	3b15      	subs	r3, #21
 800d194:	f023 0303 	bic.w	r3, r3, #3
 800d198:	3415      	adds	r4, #21
 800d19a:	3304      	adds	r3, #4
 800d19c:	42a6      	cmp	r6, r4
 800d19e:	bf38      	it	cc
 800d1a0:	2304      	movcc	r3, #4
 800d1a2:	441d      	add	r5, r3
 800d1a4:	445b      	add	r3, fp
 800d1a6:	461e      	mov	r6, r3
 800d1a8:	462c      	mov	r4, r5
 800d1aa:	4544      	cmp	r4, r8
 800d1ac:	d30e      	bcc.n	800d1cc <__mdiff+0xf8>
 800d1ae:	f108 0103 	add.w	r1, r8, #3
 800d1b2:	1b49      	subs	r1, r1, r5
 800d1b4:	f021 0103 	bic.w	r1, r1, #3
 800d1b8:	3d03      	subs	r5, #3
 800d1ba:	45a8      	cmp	r8, r5
 800d1bc:	bf38      	it	cc
 800d1be:	2100      	movcc	r1, #0
 800d1c0:	440b      	add	r3, r1
 800d1c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1c6:	b191      	cbz	r1, 800d1ee <__mdiff+0x11a>
 800d1c8:	6117      	str	r7, [r2, #16]
 800d1ca:	e79d      	b.n	800d108 <__mdiff+0x34>
 800d1cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1d0:	46e6      	mov	lr, ip
 800d1d2:	0c08      	lsrs	r0, r1, #16
 800d1d4:	fa1c fc81 	uxtah	ip, ip, r1
 800d1d8:	4471      	add	r1, lr
 800d1da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1de:	b289      	uxth	r1, r1
 800d1e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1e4:	f846 1b04 	str.w	r1, [r6], #4
 800d1e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ec:	e7dd      	b.n	800d1aa <__mdiff+0xd6>
 800d1ee:	3f01      	subs	r7, #1
 800d1f0:	e7e7      	b.n	800d1c2 <__mdiff+0xee>
 800d1f2:	bf00      	nop
 800d1f4:	0800f9b2 	.word	0x0800f9b2
 800d1f8:	0800f9c3 	.word	0x0800f9c3

0800d1fc <__ulp>:
 800d1fc:	b082      	sub	sp, #8
 800d1fe:	ed8d 0b00 	vstr	d0, [sp]
 800d202:	9a01      	ldr	r2, [sp, #4]
 800d204:	4b0f      	ldr	r3, [pc, #60]	@ (800d244 <__ulp+0x48>)
 800d206:	4013      	ands	r3, r2
 800d208:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dc08      	bgt.n	800d222 <__ulp+0x26>
 800d210:	425b      	negs	r3, r3
 800d212:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d216:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d21a:	da04      	bge.n	800d226 <__ulp+0x2a>
 800d21c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d220:	4113      	asrs	r3, r2
 800d222:	2200      	movs	r2, #0
 800d224:	e008      	b.n	800d238 <__ulp+0x3c>
 800d226:	f1a2 0314 	sub.w	r3, r2, #20
 800d22a:	2b1e      	cmp	r3, #30
 800d22c:	bfda      	itte	le
 800d22e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d232:	40da      	lsrle	r2, r3
 800d234:	2201      	movgt	r2, #1
 800d236:	2300      	movs	r3, #0
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	ec41 0b10 	vmov	d0, r0, r1
 800d240:	b002      	add	sp, #8
 800d242:	4770      	bx	lr
 800d244:	7ff00000 	.word	0x7ff00000

0800d248 <__b2d>:
 800d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24c:	6906      	ldr	r6, [r0, #16]
 800d24e:	f100 0814 	add.w	r8, r0, #20
 800d252:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d256:	1f37      	subs	r7, r6, #4
 800d258:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d25c:	4610      	mov	r0, r2
 800d25e:	f7ff fd4b 	bl	800ccf8 <__hi0bits>
 800d262:	f1c0 0320 	rsb	r3, r0, #32
 800d266:	280a      	cmp	r0, #10
 800d268:	600b      	str	r3, [r1, #0]
 800d26a:	491b      	ldr	r1, [pc, #108]	@ (800d2d8 <__b2d+0x90>)
 800d26c:	dc15      	bgt.n	800d29a <__b2d+0x52>
 800d26e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d272:	fa22 f30c 	lsr.w	r3, r2, ip
 800d276:	45b8      	cmp	r8, r7
 800d278:	ea43 0501 	orr.w	r5, r3, r1
 800d27c:	bf34      	ite	cc
 800d27e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d282:	2300      	movcs	r3, #0
 800d284:	3015      	adds	r0, #21
 800d286:	fa02 f000 	lsl.w	r0, r2, r0
 800d28a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d28e:	4303      	orrs	r3, r0
 800d290:	461c      	mov	r4, r3
 800d292:	ec45 4b10 	vmov	d0, r4, r5
 800d296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29a:	45b8      	cmp	r8, r7
 800d29c:	bf3a      	itte	cc
 800d29e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2a2:	f1a6 0708 	subcc.w	r7, r6, #8
 800d2a6:	2300      	movcs	r3, #0
 800d2a8:	380b      	subs	r0, #11
 800d2aa:	d012      	beq.n	800d2d2 <__b2d+0x8a>
 800d2ac:	f1c0 0120 	rsb	r1, r0, #32
 800d2b0:	fa23 f401 	lsr.w	r4, r3, r1
 800d2b4:	4082      	lsls	r2, r0
 800d2b6:	4322      	orrs	r2, r4
 800d2b8:	4547      	cmp	r7, r8
 800d2ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d2be:	bf8c      	ite	hi
 800d2c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d2c4:	2200      	movls	r2, #0
 800d2c6:	4083      	lsls	r3, r0
 800d2c8:	40ca      	lsrs	r2, r1
 800d2ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	e7de      	b.n	800d290 <__b2d+0x48>
 800d2d2:	ea42 0501 	orr.w	r5, r2, r1
 800d2d6:	e7db      	b.n	800d290 <__b2d+0x48>
 800d2d8:	3ff00000 	.word	0x3ff00000

0800d2dc <__d2b>:
 800d2dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2e0:	460f      	mov	r7, r1
 800d2e2:	2101      	movs	r1, #1
 800d2e4:	ec59 8b10 	vmov	r8, r9, d0
 800d2e8:	4616      	mov	r6, r2
 800d2ea:	f7ff fc13 	bl	800cb14 <_Balloc>
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	b930      	cbnz	r0, 800d300 <__d2b+0x24>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	4b23      	ldr	r3, [pc, #140]	@ (800d384 <__d2b+0xa8>)
 800d2f6:	4824      	ldr	r0, [pc, #144]	@ (800d388 <__d2b+0xac>)
 800d2f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2fc:	f001 f8b8 	bl	800e470 <__assert_func>
 800d300:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d304:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d308:	b10d      	cbz	r5, 800d30e <__d2b+0x32>
 800d30a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	f1b8 0300 	subs.w	r3, r8, #0
 800d314:	d023      	beq.n	800d35e <__d2b+0x82>
 800d316:	4668      	mov	r0, sp
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	f7ff fd0c 	bl	800cd36 <__lo0bits>
 800d31e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d322:	b1d0      	cbz	r0, 800d35a <__d2b+0x7e>
 800d324:	f1c0 0320 	rsb	r3, r0, #32
 800d328:	fa02 f303 	lsl.w	r3, r2, r3
 800d32c:	430b      	orrs	r3, r1
 800d32e:	40c2      	lsrs	r2, r0
 800d330:	6163      	str	r3, [r4, #20]
 800d332:	9201      	str	r2, [sp, #4]
 800d334:	9b01      	ldr	r3, [sp, #4]
 800d336:	61a3      	str	r3, [r4, #24]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	bf0c      	ite	eq
 800d33c:	2201      	moveq	r2, #1
 800d33e:	2202      	movne	r2, #2
 800d340:	6122      	str	r2, [r4, #16]
 800d342:	b1a5      	cbz	r5, 800d36e <__d2b+0x92>
 800d344:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d348:	4405      	add	r5, r0
 800d34a:	603d      	str	r5, [r7, #0]
 800d34c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d350:	6030      	str	r0, [r6, #0]
 800d352:	4620      	mov	r0, r4
 800d354:	b003      	add	sp, #12
 800d356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d35a:	6161      	str	r1, [r4, #20]
 800d35c:	e7ea      	b.n	800d334 <__d2b+0x58>
 800d35e:	a801      	add	r0, sp, #4
 800d360:	f7ff fce9 	bl	800cd36 <__lo0bits>
 800d364:	9b01      	ldr	r3, [sp, #4]
 800d366:	6163      	str	r3, [r4, #20]
 800d368:	3020      	adds	r0, #32
 800d36a:	2201      	movs	r2, #1
 800d36c:	e7e8      	b.n	800d340 <__d2b+0x64>
 800d36e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d372:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d376:	6038      	str	r0, [r7, #0]
 800d378:	6918      	ldr	r0, [r3, #16]
 800d37a:	f7ff fcbd 	bl	800ccf8 <__hi0bits>
 800d37e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d382:	e7e5      	b.n	800d350 <__d2b+0x74>
 800d384:	0800f9b2 	.word	0x0800f9b2
 800d388:	0800f9c3 	.word	0x0800f9c3

0800d38c <__ratio>:
 800d38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	4688      	mov	r8, r1
 800d392:	4669      	mov	r1, sp
 800d394:	4681      	mov	r9, r0
 800d396:	f7ff ff57 	bl	800d248 <__b2d>
 800d39a:	a901      	add	r1, sp, #4
 800d39c:	4640      	mov	r0, r8
 800d39e:	ec55 4b10 	vmov	r4, r5, d0
 800d3a2:	f7ff ff51 	bl	800d248 <__b2d>
 800d3a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d3aa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d3b4:	1a5b      	subs	r3, r3, r1
 800d3b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d3ba:	ec57 6b10 	vmov	r6, r7, d0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	bfd6      	itet	le
 800d3c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3c6:	462a      	movgt	r2, r5
 800d3c8:	463a      	movle	r2, r7
 800d3ca:	46ab      	mov	fp, r5
 800d3cc:	46a2      	mov	sl, r4
 800d3ce:	bfce      	itee	gt
 800d3d0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d3d4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d3d8:	ee00 3a90 	vmovle	s1, r3
 800d3dc:	ec4b ab17 	vmov	d7, sl, fp
 800d3e0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d3e4:	b003      	add	sp, #12
 800d3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3ea <__copybits>:
 800d3ea:	3901      	subs	r1, #1
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	1149      	asrs	r1, r1, #5
 800d3f0:	6914      	ldr	r4, [r2, #16]
 800d3f2:	3101      	adds	r1, #1
 800d3f4:	f102 0314 	add.w	r3, r2, #20
 800d3f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d400:	1f05      	subs	r5, r0, #4
 800d402:	42a3      	cmp	r3, r4
 800d404:	d30c      	bcc.n	800d420 <__copybits+0x36>
 800d406:	1aa3      	subs	r3, r4, r2
 800d408:	3b11      	subs	r3, #17
 800d40a:	f023 0303 	bic.w	r3, r3, #3
 800d40e:	3211      	adds	r2, #17
 800d410:	42a2      	cmp	r2, r4
 800d412:	bf88      	it	hi
 800d414:	2300      	movhi	r3, #0
 800d416:	4418      	add	r0, r3
 800d418:	2300      	movs	r3, #0
 800d41a:	4288      	cmp	r0, r1
 800d41c:	d305      	bcc.n	800d42a <__copybits+0x40>
 800d41e:	bd70      	pop	{r4, r5, r6, pc}
 800d420:	f853 6b04 	ldr.w	r6, [r3], #4
 800d424:	f845 6f04 	str.w	r6, [r5, #4]!
 800d428:	e7eb      	b.n	800d402 <__copybits+0x18>
 800d42a:	f840 3b04 	str.w	r3, [r0], #4
 800d42e:	e7f4      	b.n	800d41a <__copybits+0x30>

0800d430 <__any_on>:
 800d430:	f100 0214 	add.w	r2, r0, #20
 800d434:	6900      	ldr	r0, [r0, #16]
 800d436:	114b      	asrs	r3, r1, #5
 800d438:	4298      	cmp	r0, r3
 800d43a:	b510      	push	{r4, lr}
 800d43c:	db11      	blt.n	800d462 <__any_on+0x32>
 800d43e:	dd0a      	ble.n	800d456 <__any_on+0x26>
 800d440:	f011 011f 	ands.w	r1, r1, #31
 800d444:	d007      	beq.n	800d456 <__any_on+0x26>
 800d446:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d44a:	fa24 f001 	lsr.w	r0, r4, r1
 800d44e:	fa00 f101 	lsl.w	r1, r0, r1
 800d452:	428c      	cmp	r4, r1
 800d454:	d10b      	bne.n	800d46e <__any_on+0x3e>
 800d456:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d803      	bhi.n	800d466 <__any_on+0x36>
 800d45e:	2000      	movs	r0, #0
 800d460:	bd10      	pop	{r4, pc}
 800d462:	4603      	mov	r3, r0
 800d464:	e7f7      	b.n	800d456 <__any_on+0x26>
 800d466:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d46a:	2900      	cmp	r1, #0
 800d46c:	d0f5      	beq.n	800d45a <__any_on+0x2a>
 800d46e:	2001      	movs	r0, #1
 800d470:	e7f6      	b.n	800d460 <__any_on+0x30>

0800d472 <sulp>:
 800d472:	b570      	push	{r4, r5, r6, lr}
 800d474:	4604      	mov	r4, r0
 800d476:	460d      	mov	r5, r1
 800d478:	4616      	mov	r6, r2
 800d47a:	ec45 4b10 	vmov	d0, r4, r5
 800d47e:	f7ff febd 	bl	800d1fc <__ulp>
 800d482:	b17e      	cbz	r6, 800d4a4 <sulp+0x32>
 800d484:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	dd09      	ble.n	800d4a4 <sulp+0x32>
 800d490:	051b      	lsls	r3, r3, #20
 800d492:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d496:	2000      	movs	r0, #0
 800d498:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d49c:	ec41 0b17 	vmov	d7, r0, r1
 800d4a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d4a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d4a8 <_strtod_l>:
 800d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	ed2d 8b0a 	vpush	{d8-d12}
 800d4b0:	b097      	sub	sp, #92	@ 0x5c
 800d4b2:	4688      	mov	r8, r1
 800d4b4:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	9212      	str	r2, [sp, #72]	@ 0x48
 800d4ba:	9005      	str	r0, [sp, #20]
 800d4bc:	f04f 0a00 	mov.w	sl, #0
 800d4c0:	f04f 0b00 	mov.w	fp, #0
 800d4c4:	460a      	mov	r2, r1
 800d4c6:	9211      	str	r2, [sp, #68]	@ 0x44
 800d4c8:	7811      	ldrb	r1, [r2, #0]
 800d4ca:	292b      	cmp	r1, #43	@ 0x2b
 800d4cc:	d04c      	beq.n	800d568 <_strtod_l+0xc0>
 800d4ce:	d839      	bhi.n	800d544 <_strtod_l+0x9c>
 800d4d0:	290d      	cmp	r1, #13
 800d4d2:	d833      	bhi.n	800d53c <_strtod_l+0x94>
 800d4d4:	2908      	cmp	r1, #8
 800d4d6:	d833      	bhi.n	800d540 <_strtod_l+0x98>
 800d4d8:	2900      	cmp	r1, #0
 800d4da:	d03c      	beq.n	800d556 <_strtod_l+0xae>
 800d4dc:	2200      	movs	r2, #0
 800d4de:	9208      	str	r2, [sp, #32]
 800d4e0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d4e2:	782a      	ldrb	r2, [r5, #0]
 800d4e4:	2a30      	cmp	r2, #48	@ 0x30
 800d4e6:	f040 80b5 	bne.w	800d654 <_strtod_l+0x1ac>
 800d4ea:	786a      	ldrb	r2, [r5, #1]
 800d4ec:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4f0:	2a58      	cmp	r2, #88	@ 0x58
 800d4f2:	d170      	bne.n	800d5d6 <_strtod_l+0x12e>
 800d4f4:	9302      	str	r3, [sp, #8]
 800d4f6:	9b08      	ldr	r3, [sp, #32]
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	ab12      	add	r3, sp, #72	@ 0x48
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	4a8b      	ldr	r2, [pc, #556]	@ (800d72c <_strtod_l+0x284>)
 800d500:	9805      	ldr	r0, [sp, #20]
 800d502:	ab13      	add	r3, sp, #76	@ 0x4c
 800d504:	a911      	add	r1, sp, #68	@ 0x44
 800d506:	f001 f84d 	bl	800e5a4 <__gethex>
 800d50a:	f010 060f 	ands.w	r6, r0, #15
 800d50e:	4604      	mov	r4, r0
 800d510:	d005      	beq.n	800d51e <_strtod_l+0x76>
 800d512:	2e06      	cmp	r6, #6
 800d514:	d12a      	bne.n	800d56c <_strtod_l+0xc4>
 800d516:	3501      	adds	r5, #1
 800d518:	2300      	movs	r3, #0
 800d51a:	9511      	str	r5, [sp, #68]	@ 0x44
 800d51c:	9308      	str	r3, [sp, #32]
 800d51e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d520:	2b00      	cmp	r3, #0
 800d522:	f040 852f 	bne.w	800df84 <_strtod_l+0xadc>
 800d526:	9b08      	ldr	r3, [sp, #32]
 800d528:	ec4b ab10 	vmov	d0, sl, fp
 800d52c:	b1cb      	cbz	r3, 800d562 <_strtod_l+0xba>
 800d52e:	eeb1 0b40 	vneg.f64	d0, d0
 800d532:	b017      	add	sp, #92	@ 0x5c
 800d534:	ecbd 8b0a 	vpop	{d8-d12}
 800d538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53c:	2920      	cmp	r1, #32
 800d53e:	d1cd      	bne.n	800d4dc <_strtod_l+0x34>
 800d540:	3201      	adds	r2, #1
 800d542:	e7c0      	b.n	800d4c6 <_strtod_l+0x1e>
 800d544:	292d      	cmp	r1, #45	@ 0x2d
 800d546:	d1c9      	bne.n	800d4dc <_strtod_l+0x34>
 800d548:	2101      	movs	r1, #1
 800d54a:	9108      	str	r1, [sp, #32]
 800d54c:	1c51      	adds	r1, r2, #1
 800d54e:	9111      	str	r1, [sp, #68]	@ 0x44
 800d550:	7852      	ldrb	r2, [r2, #1]
 800d552:	2a00      	cmp	r2, #0
 800d554:	d1c4      	bne.n	800d4e0 <_strtod_l+0x38>
 800d556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d558:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f040 850f 	bne.w	800df80 <_strtod_l+0xad8>
 800d562:	ec4b ab10 	vmov	d0, sl, fp
 800d566:	e7e4      	b.n	800d532 <_strtod_l+0x8a>
 800d568:	2100      	movs	r1, #0
 800d56a:	e7ee      	b.n	800d54a <_strtod_l+0xa2>
 800d56c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d56e:	b13a      	cbz	r2, 800d580 <_strtod_l+0xd8>
 800d570:	2135      	movs	r1, #53	@ 0x35
 800d572:	a814      	add	r0, sp, #80	@ 0x50
 800d574:	f7ff ff39 	bl	800d3ea <__copybits>
 800d578:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d57a:	9805      	ldr	r0, [sp, #20]
 800d57c:	f7ff fb0a 	bl	800cb94 <_Bfree>
 800d580:	1e73      	subs	r3, r6, #1
 800d582:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d584:	2b04      	cmp	r3, #4
 800d586:	d806      	bhi.n	800d596 <_strtod_l+0xee>
 800d588:	e8df f003 	tbb	[pc, r3]
 800d58c:	201d0314 	.word	0x201d0314
 800d590:	14          	.byte	0x14
 800d591:	00          	.byte	0x00
 800d592:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d596:	05e3      	lsls	r3, r4, #23
 800d598:	bf48      	it	mi
 800d59a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d59e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5a2:	0d1b      	lsrs	r3, r3, #20
 800d5a4:	051b      	lsls	r3, r3, #20
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1b9      	bne.n	800d51e <_strtod_l+0x76>
 800d5aa:	f7fe fb93 	bl	800bcd4 <__errno>
 800d5ae:	2322      	movs	r3, #34	@ 0x22
 800d5b0:	6003      	str	r3, [r0, #0]
 800d5b2:	e7b4      	b.n	800d51e <_strtod_l+0x76>
 800d5b4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d5b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d5bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d5c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d5c4:	e7e7      	b.n	800d596 <_strtod_l+0xee>
 800d5c6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d734 <_strtod_l+0x28c>
 800d5ca:	e7e4      	b.n	800d596 <_strtod_l+0xee>
 800d5cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5d0:	f04f 3aff 	mov.w	sl, #4294967295
 800d5d4:	e7df      	b.n	800d596 <_strtod_l+0xee>
 800d5d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	9211      	str	r2, [sp, #68]	@ 0x44
 800d5dc:	785b      	ldrb	r3, [r3, #1]
 800d5de:	2b30      	cmp	r3, #48	@ 0x30
 800d5e0:	d0f9      	beq.n	800d5d6 <_strtod_l+0x12e>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d09b      	beq.n	800d51e <_strtod_l+0x76>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	2600      	movs	r6, #0
 800d5ea:	9307      	str	r3, [sp, #28]
 800d5ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5f0:	46b1      	mov	r9, r6
 800d5f2:	4635      	mov	r5, r6
 800d5f4:	220a      	movs	r2, #10
 800d5f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d5f8:	7804      	ldrb	r4, [r0, #0]
 800d5fa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d5fe:	b2d9      	uxtb	r1, r3
 800d600:	2909      	cmp	r1, #9
 800d602:	d929      	bls.n	800d658 <_strtod_l+0x1b0>
 800d604:	494a      	ldr	r1, [pc, #296]	@ (800d730 <_strtod_l+0x288>)
 800d606:	2201      	movs	r2, #1
 800d608:	f000 ff08 	bl	800e41c <strncmp>
 800d60c:	b378      	cbz	r0, 800d66e <_strtod_l+0x1c6>
 800d60e:	2000      	movs	r0, #0
 800d610:	4622      	mov	r2, r4
 800d612:	462b      	mov	r3, r5
 800d614:	4607      	mov	r7, r0
 800d616:	9006      	str	r0, [sp, #24]
 800d618:	2a65      	cmp	r2, #101	@ 0x65
 800d61a:	d001      	beq.n	800d620 <_strtod_l+0x178>
 800d61c:	2a45      	cmp	r2, #69	@ 0x45
 800d61e:	d117      	bne.n	800d650 <_strtod_l+0x1a8>
 800d620:	b91b      	cbnz	r3, 800d62a <_strtod_l+0x182>
 800d622:	9b07      	ldr	r3, [sp, #28]
 800d624:	4303      	orrs	r3, r0
 800d626:	d096      	beq.n	800d556 <_strtod_l+0xae>
 800d628:	2300      	movs	r3, #0
 800d62a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d62e:	f108 0201 	add.w	r2, r8, #1
 800d632:	9211      	str	r2, [sp, #68]	@ 0x44
 800d634:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d638:	2a2b      	cmp	r2, #43	@ 0x2b
 800d63a:	d06b      	beq.n	800d714 <_strtod_l+0x26c>
 800d63c:	2a2d      	cmp	r2, #45	@ 0x2d
 800d63e:	d071      	beq.n	800d724 <_strtod_l+0x27c>
 800d640:	f04f 0e00 	mov.w	lr, #0
 800d644:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d648:	2c09      	cmp	r4, #9
 800d64a:	d979      	bls.n	800d740 <_strtod_l+0x298>
 800d64c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d650:	2400      	movs	r4, #0
 800d652:	e094      	b.n	800d77e <_strtod_l+0x2d6>
 800d654:	2300      	movs	r3, #0
 800d656:	e7c7      	b.n	800d5e8 <_strtod_l+0x140>
 800d658:	2d08      	cmp	r5, #8
 800d65a:	f100 0001 	add.w	r0, r0, #1
 800d65e:	bfd4      	ite	le
 800d660:	fb02 3909 	mlale	r9, r2, r9, r3
 800d664:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d668:	3501      	adds	r5, #1
 800d66a:	9011      	str	r0, [sp, #68]	@ 0x44
 800d66c:	e7c3      	b.n	800d5f6 <_strtod_l+0x14e>
 800d66e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	9211      	str	r2, [sp, #68]	@ 0x44
 800d674:	785a      	ldrb	r2, [r3, #1]
 800d676:	b375      	cbz	r5, 800d6d6 <_strtod_l+0x22e>
 800d678:	4607      	mov	r7, r0
 800d67a:	462b      	mov	r3, r5
 800d67c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d680:	2909      	cmp	r1, #9
 800d682:	d913      	bls.n	800d6ac <_strtod_l+0x204>
 800d684:	2101      	movs	r1, #1
 800d686:	9106      	str	r1, [sp, #24]
 800d688:	e7c6      	b.n	800d618 <_strtod_l+0x170>
 800d68a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	9211      	str	r2, [sp, #68]	@ 0x44
 800d690:	785a      	ldrb	r2, [r3, #1]
 800d692:	3001      	adds	r0, #1
 800d694:	2a30      	cmp	r2, #48	@ 0x30
 800d696:	d0f8      	beq.n	800d68a <_strtod_l+0x1e2>
 800d698:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d69c:	2b08      	cmp	r3, #8
 800d69e:	f200 8476 	bhi.w	800df8e <_strtod_l+0xae6>
 800d6a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6a6:	4607      	mov	r7, r0
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	3a30      	subs	r2, #48	@ 0x30
 800d6ae:	f100 0101 	add.w	r1, r0, #1
 800d6b2:	d023      	beq.n	800d6fc <_strtod_l+0x254>
 800d6b4:	440f      	add	r7, r1
 800d6b6:	eb00 0c03 	add.w	ip, r0, r3
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	240a      	movs	r4, #10
 800d6be:	4561      	cmp	r1, ip
 800d6c0:	d10b      	bne.n	800d6da <_strtod_l+0x232>
 800d6c2:	1c5c      	adds	r4, r3, #1
 800d6c4:	4403      	add	r3, r0
 800d6c6:	2b08      	cmp	r3, #8
 800d6c8:	4404      	add	r4, r0
 800d6ca:	dc11      	bgt.n	800d6f0 <_strtod_l+0x248>
 800d6cc:	230a      	movs	r3, #10
 800d6ce:	fb03 2909 	mla	r9, r3, r9, r2
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	e013      	b.n	800d6fe <_strtod_l+0x256>
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	e7dc      	b.n	800d694 <_strtod_l+0x1ec>
 800d6da:	2908      	cmp	r1, #8
 800d6dc:	f101 0101 	add.w	r1, r1, #1
 800d6e0:	dc02      	bgt.n	800d6e8 <_strtod_l+0x240>
 800d6e2:	fb04 f909 	mul.w	r9, r4, r9
 800d6e6:	e7ea      	b.n	800d6be <_strtod_l+0x216>
 800d6e8:	2910      	cmp	r1, #16
 800d6ea:	bfd8      	it	le
 800d6ec:	4366      	mulle	r6, r4
 800d6ee:	e7e6      	b.n	800d6be <_strtod_l+0x216>
 800d6f0:	2b0f      	cmp	r3, #15
 800d6f2:	dcee      	bgt.n	800d6d2 <_strtod_l+0x22a>
 800d6f4:	230a      	movs	r3, #10
 800d6f6:	fb03 2606 	mla	r6, r3, r6, r2
 800d6fa:	e7ea      	b.n	800d6d2 <_strtod_l+0x22a>
 800d6fc:	461c      	mov	r4, r3
 800d6fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	9211      	str	r2, [sp, #68]	@ 0x44
 800d704:	785a      	ldrb	r2, [r3, #1]
 800d706:	4608      	mov	r0, r1
 800d708:	4623      	mov	r3, r4
 800d70a:	e7b7      	b.n	800d67c <_strtod_l+0x1d4>
 800d70c:	2301      	movs	r3, #1
 800d70e:	2700      	movs	r7, #0
 800d710:	9306      	str	r3, [sp, #24]
 800d712:	e786      	b.n	800d622 <_strtod_l+0x17a>
 800d714:	f04f 0e00 	mov.w	lr, #0
 800d718:	f108 0202 	add.w	r2, r8, #2
 800d71c:	9211      	str	r2, [sp, #68]	@ 0x44
 800d71e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d722:	e78f      	b.n	800d644 <_strtod_l+0x19c>
 800d724:	f04f 0e01 	mov.w	lr, #1
 800d728:	e7f6      	b.n	800d718 <_strtod_l+0x270>
 800d72a:	bf00      	nop
 800d72c:	0800fb30 	.word	0x0800fb30
 800d730:	0800fb18 	.word	0x0800fb18
 800d734:	7ff00000 	.word	0x7ff00000
 800d738:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d73a:	1c54      	adds	r4, r2, #1
 800d73c:	9411      	str	r4, [sp, #68]	@ 0x44
 800d73e:	7852      	ldrb	r2, [r2, #1]
 800d740:	2a30      	cmp	r2, #48	@ 0x30
 800d742:	d0f9      	beq.n	800d738 <_strtod_l+0x290>
 800d744:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d748:	2c08      	cmp	r4, #8
 800d74a:	d881      	bhi.n	800d650 <_strtod_l+0x1a8>
 800d74c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d750:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d752:	9209      	str	r2, [sp, #36]	@ 0x24
 800d754:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d756:	1c51      	adds	r1, r2, #1
 800d758:	9111      	str	r1, [sp, #68]	@ 0x44
 800d75a:	7852      	ldrb	r2, [r2, #1]
 800d75c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d760:	2c09      	cmp	r4, #9
 800d762:	d938      	bls.n	800d7d6 <_strtod_l+0x32e>
 800d764:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d766:	1b0c      	subs	r4, r1, r4
 800d768:	2c08      	cmp	r4, #8
 800d76a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d76e:	dc02      	bgt.n	800d776 <_strtod_l+0x2ce>
 800d770:	4564      	cmp	r4, ip
 800d772:	bfa8      	it	ge
 800d774:	4664      	movge	r4, ip
 800d776:	f1be 0f00 	cmp.w	lr, #0
 800d77a:	d000      	beq.n	800d77e <_strtod_l+0x2d6>
 800d77c:	4264      	negs	r4, r4
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d14e      	bne.n	800d820 <_strtod_l+0x378>
 800d782:	9b07      	ldr	r3, [sp, #28]
 800d784:	4318      	orrs	r0, r3
 800d786:	f47f aeca 	bne.w	800d51e <_strtod_l+0x76>
 800d78a:	9b06      	ldr	r3, [sp, #24]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f47f aee2 	bne.w	800d556 <_strtod_l+0xae>
 800d792:	2a69      	cmp	r2, #105	@ 0x69
 800d794:	d027      	beq.n	800d7e6 <_strtod_l+0x33e>
 800d796:	dc24      	bgt.n	800d7e2 <_strtod_l+0x33a>
 800d798:	2a49      	cmp	r2, #73	@ 0x49
 800d79a:	d024      	beq.n	800d7e6 <_strtod_l+0x33e>
 800d79c:	2a4e      	cmp	r2, #78	@ 0x4e
 800d79e:	f47f aeda 	bne.w	800d556 <_strtod_l+0xae>
 800d7a2:	4997      	ldr	r1, [pc, #604]	@ (800da00 <_strtod_l+0x558>)
 800d7a4:	a811      	add	r0, sp, #68	@ 0x44
 800d7a6:	f001 f91f 	bl	800e9e8 <__match>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	f43f aed3 	beq.w	800d556 <_strtod_l+0xae>
 800d7b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	2b28      	cmp	r3, #40	@ 0x28
 800d7b6:	d12d      	bne.n	800d814 <_strtod_l+0x36c>
 800d7b8:	4992      	ldr	r1, [pc, #584]	@ (800da04 <_strtod_l+0x55c>)
 800d7ba:	aa14      	add	r2, sp, #80	@ 0x50
 800d7bc:	a811      	add	r0, sp, #68	@ 0x44
 800d7be:	f001 f927 	bl	800ea10 <__hexnan>
 800d7c2:	2805      	cmp	r0, #5
 800d7c4:	d126      	bne.n	800d814 <_strtod_l+0x36c>
 800d7c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d7c8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d7cc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d7d0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d7d4:	e6a3      	b.n	800d51e <_strtod_l+0x76>
 800d7d6:	240a      	movs	r4, #10
 800d7d8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d7dc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d7e0:	e7b8      	b.n	800d754 <_strtod_l+0x2ac>
 800d7e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7e4:	e7db      	b.n	800d79e <_strtod_l+0x2f6>
 800d7e6:	4988      	ldr	r1, [pc, #544]	@ (800da08 <_strtod_l+0x560>)
 800d7e8:	a811      	add	r0, sp, #68	@ 0x44
 800d7ea:	f001 f8fd 	bl	800e9e8 <__match>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	f43f aeb1 	beq.w	800d556 <_strtod_l+0xae>
 800d7f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7f6:	4985      	ldr	r1, [pc, #532]	@ (800da0c <_strtod_l+0x564>)
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	a811      	add	r0, sp, #68	@ 0x44
 800d7fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7fe:	f001 f8f3 	bl	800e9e8 <__match>
 800d802:	b910      	cbnz	r0, 800d80a <_strtod_l+0x362>
 800d804:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d806:	3301      	adds	r3, #1
 800d808:	9311      	str	r3, [sp, #68]	@ 0x44
 800d80a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800da20 <_strtod_l+0x578>
 800d80e:	f04f 0a00 	mov.w	sl, #0
 800d812:	e684      	b.n	800d51e <_strtod_l+0x76>
 800d814:	487e      	ldr	r0, [pc, #504]	@ (800da10 <_strtod_l+0x568>)
 800d816:	f000 fe23 	bl	800e460 <nan>
 800d81a:	ec5b ab10 	vmov	sl, fp, d0
 800d81e:	e67e      	b.n	800d51e <_strtod_l+0x76>
 800d820:	ee07 9a90 	vmov	s15, r9
 800d824:	1be2      	subs	r2, r4, r7
 800d826:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d82a:	2d00      	cmp	r5, #0
 800d82c:	bf08      	it	eq
 800d82e:	461d      	moveq	r5, r3
 800d830:	2b10      	cmp	r3, #16
 800d832:	9209      	str	r2, [sp, #36]	@ 0x24
 800d834:	461a      	mov	r2, r3
 800d836:	bfa8      	it	ge
 800d838:	2210      	movge	r2, #16
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	ec5b ab17 	vmov	sl, fp, d7
 800d840:	dc15      	bgt.n	800d86e <_strtod_l+0x3c6>
 800d842:	1be1      	subs	r1, r4, r7
 800d844:	2900      	cmp	r1, #0
 800d846:	f43f ae6a 	beq.w	800d51e <_strtod_l+0x76>
 800d84a:	eba4 0107 	sub.w	r1, r4, r7
 800d84e:	dd72      	ble.n	800d936 <_strtod_l+0x48e>
 800d850:	2916      	cmp	r1, #22
 800d852:	dc59      	bgt.n	800d908 <_strtod_l+0x460>
 800d854:	4b6f      	ldr	r3, [pc, #444]	@ (800da14 <_strtod_l+0x56c>)
 800d856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d85c:	ed93 7b00 	vldr	d7, [r3]
 800d860:	ec4b ab16 	vmov	d6, sl, fp
 800d864:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d868:	ec5b ab17 	vmov	sl, fp, d7
 800d86c:	e657      	b.n	800d51e <_strtod_l+0x76>
 800d86e:	4969      	ldr	r1, [pc, #420]	@ (800da14 <_strtod_l+0x56c>)
 800d870:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d874:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d878:	ee06 6a90 	vmov	s13, r6
 800d87c:	2b0f      	cmp	r3, #15
 800d87e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d882:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d886:	ec5b ab16 	vmov	sl, fp, d6
 800d88a:	ddda      	ble.n	800d842 <_strtod_l+0x39a>
 800d88c:	1a9a      	subs	r2, r3, r2
 800d88e:	1be1      	subs	r1, r4, r7
 800d890:	440a      	add	r2, r1
 800d892:	2a00      	cmp	r2, #0
 800d894:	f340 8094 	ble.w	800d9c0 <_strtod_l+0x518>
 800d898:	f012 000f 	ands.w	r0, r2, #15
 800d89c:	d00a      	beq.n	800d8b4 <_strtod_l+0x40c>
 800d89e:	495d      	ldr	r1, [pc, #372]	@ (800da14 <_strtod_l+0x56c>)
 800d8a0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d8a4:	ed91 7b00 	vldr	d7, [r1]
 800d8a8:	ec4b ab16 	vmov	d6, sl, fp
 800d8ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8b0:	ec5b ab17 	vmov	sl, fp, d7
 800d8b4:	f032 020f 	bics.w	r2, r2, #15
 800d8b8:	d073      	beq.n	800d9a2 <_strtod_l+0x4fa>
 800d8ba:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d8be:	dd47      	ble.n	800d950 <_strtod_l+0x4a8>
 800d8c0:	2400      	movs	r4, #0
 800d8c2:	4625      	mov	r5, r4
 800d8c4:	9407      	str	r4, [sp, #28]
 800d8c6:	4626      	mov	r6, r4
 800d8c8:	9a05      	ldr	r2, [sp, #20]
 800d8ca:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800da20 <_strtod_l+0x578>
 800d8ce:	2322      	movs	r3, #34	@ 0x22
 800d8d0:	6013      	str	r3, [r2, #0]
 800d8d2:	f04f 0a00 	mov.w	sl, #0
 800d8d6:	9b07      	ldr	r3, [sp, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f43f ae20 	beq.w	800d51e <_strtod_l+0x76>
 800d8de:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d8e0:	9805      	ldr	r0, [sp, #20]
 800d8e2:	f7ff f957 	bl	800cb94 <_Bfree>
 800d8e6:	9805      	ldr	r0, [sp, #20]
 800d8e8:	4631      	mov	r1, r6
 800d8ea:	f7ff f953 	bl	800cb94 <_Bfree>
 800d8ee:	9805      	ldr	r0, [sp, #20]
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7ff f94f 	bl	800cb94 <_Bfree>
 800d8f6:	9907      	ldr	r1, [sp, #28]
 800d8f8:	9805      	ldr	r0, [sp, #20]
 800d8fa:	f7ff f94b 	bl	800cb94 <_Bfree>
 800d8fe:	9805      	ldr	r0, [sp, #20]
 800d900:	4621      	mov	r1, r4
 800d902:	f7ff f947 	bl	800cb94 <_Bfree>
 800d906:	e60a      	b.n	800d51e <_strtod_l+0x76>
 800d908:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d90c:	1be0      	subs	r0, r4, r7
 800d90e:	4281      	cmp	r1, r0
 800d910:	dbbc      	blt.n	800d88c <_strtod_l+0x3e4>
 800d912:	4a40      	ldr	r2, [pc, #256]	@ (800da14 <_strtod_l+0x56c>)
 800d914:	f1c3 030f 	rsb	r3, r3, #15
 800d918:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d91c:	ed91 7b00 	vldr	d7, [r1]
 800d920:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d922:	ec4b ab16 	vmov	d6, sl, fp
 800d926:	1acb      	subs	r3, r1, r3
 800d928:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d92c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d930:	ed92 6b00 	vldr	d6, [r2]
 800d934:	e796      	b.n	800d864 <_strtod_l+0x3bc>
 800d936:	3116      	adds	r1, #22
 800d938:	dba8      	blt.n	800d88c <_strtod_l+0x3e4>
 800d93a:	4b36      	ldr	r3, [pc, #216]	@ (800da14 <_strtod_l+0x56c>)
 800d93c:	1b3c      	subs	r4, r7, r4
 800d93e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d942:	ed94 7b00 	vldr	d7, [r4]
 800d946:	ec4b ab16 	vmov	d6, sl, fp
 800d94a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d94e:	e78b      	b.n	800d868 <_strtod_l+0x3c0>
 800d950:	2000      	movs	r0, #0
 800d952:	ec4b ab17 	vmov	d7, sl, fp
 800d956:	4e30      	ldr	r6, [pc, #192]	@ (800da18 <_strtod_l+0x570>)
 800d958:	1112      	asrs	r2, r2, #4
 800d95a:	4601      	mov	r1, r0
 800d95c:	2a01      	cmp	r2, #1
 800d95e:	dc23      	bgt.n	800d9a8 <_strtod_l+0x500>
 800d960:	b108      	cbz	r0, 800d966 <_strtod_l+0x4be>
 800d962:	ec5b ab17 	vmov	sl, fp, d7
 800d966:	4a2c      	ldr	r2, [pc, #176]	@ (800da18 <_strtod_l+0x570>)
 800d968:	482c      	ldr	r0, [pc, #176]	@ (800da1c <_strtod_l+0x574>)
 800d96a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d96e:	ed92 7b00 	vldr	d7, [r2]
 800d972:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d976:	ec4b ab16 	vmov	d6, sl, fp
 800d97a:	4a29      	ldr	r2, [pc, #164]	@ (800da20 <_strtod_l+0x578>)
 800d97c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d980:	ee17 1a90 	vmov	r1, s15
 800d984:	400a      	ands	r2, r1
 800d986:	4282      	cmp	r2, r0
 800d988:	ec5b ab17 	vmov	sl, fp, d7
 800d98c:	d898      	bhi.n	800d8c0 <_strtod_l+0x418>
 800d98e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d992:	4282      	cmp	r2, r0
 800d994:	bf86      	itte	hi
 800d996:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800da24 <_strtod_l+0x57c>
 800d99a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d99e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	9206      	str	r2, [sp, #24]
 800d9a6:	e076      	b.n	800da96 <_strtod_l+0x5ee>
 800d9a8:	f012 0f01 	tst.w	r2, #1
 800d9ac:	d004      	beq.n	800d9b8 <_strtod_l+0x510>
 800d9ae:	ed96 6b00 	vldr	d6, [r6]
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9b8:	3101      	adds	r1, #1
 800d9ba:	1052      	asrs	r2, r2, #1
 800d9bc:	3608      	adds	r6, #8
 800d9be:	e7cd      	b.n	800d95c <_strtod_l+0x4b4>
 800d9c0:	d0ef      	beq.n	800d9a2 <_strtod_l+0x4fa>
 800d9c2:	4252      	negs	r2, r2
 800d9c4:	f012 000f 	ands.w	r0, r2, #15
 800d9c8:	d00a      	beq.n	800d9e0 <_strtod_l+0x538>
 800d9ca:	4912      	ldr	r1, [pc, #72]	@ (800da14 <_strtod_l+0x56c>)
 800d9cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d9d0:	ed91 7b00 	vldr	d7, [r1]
 800d9d4:	ec4b ab16 	vmov	d6, sl, fp
 800d9d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d9dc:	ec5b ab17 	vmov	sl, fp, d7
 800d9e0:	1112      	asrs	r2, r2, #4
 800d9e2:	d0de      	beq.n	800d9a2 <_strtod_l+0x4fa>
 800d9e4:	2a1f      	cmp	r2, #31
 800d9e6:	dd1f      	ble.n	800da28 <_strtod_l+0x580>
 800d9e8:	2400      	movs	r4, #0
 800d9ea:	4625      	mov	r5, r4
 800d9ec:	9407      	str	r4, [sp, #28]
 800d9ee:	4626      	mov	r6, r4
 800d9f0:	9a05      	ldr	r2, [sp, #20]
 800d9f2:	2322      	movs	r3, #34	@ 0x22
 800d9f4:	f04f 0a00 	mov.w	sl, #0
 800d9f8:	f04f 0b00 	mov.w	fp, #0
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	e76a      	b.n	800d8d6 <_strtod_l+0x42e>
 800da00:	0800f90a 	.word	0x0800f90a
 800da04:	0800fb1c 	.word	0x0800fb1c
 800da08:	0800f902 	.word	0x0800f902
 800da0c:	0800f939 	.word	0x0800f939
 800da10:	0800fbc4 	.word	0x0800fbc4
 800da14:	0800fa50 	.word	0x0800fa50
 800da18:	0800fa28 	.word	0x0800fa28
 800da1c:	7ca00000 	.word	0x7ca00000
 800da20:	7ff00000 	.word	0x7ff00000
 800da24:	7fefffff 	.word	0x7fefffff
 800da28:	f012 0110 	ands.w	r1, r2, #16
 800da2c:	bf18      	it	ne
 800da2e:	216a      	movne	r1, #106	@ 0x6a
 800da30:	9106      	str	r1, [sp, #24]
 800da32:	ec4b ab17 	vmov	d7, sl, fp
 800da36:	49b0      	ldr	r1, [pc, #704]	@ (800dcf8 <_strtod_l+0x850>)
 800da38:	2000      	movs	r0, #0
 800da3a:	07d6      	lsls	r6, r2, #31
 800da3c:	d504      	bpl.n	800da48 <_strtod_l+0x5a0>
 800da3e:	ed91 6b00 	vldr	d6, [r1]
 800da42:	2001      	movs	r0, #1
 800da44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da48:	1052      	asrs	r2, r2, #1
 800da4a:	f101 0108 	add.w	r1, r1, #8
 800da4e:	d1f4      	bne.n	800da3a <_strtod_l+0x592>
 800da50:	b108      	cbz	r0, 800da56 <_strtod_l+0x5ae>
 800da52:	ec5b ab17 	vmov	sl, fp, d7
 800da56:	9a06      	ldr	r2, [sp, #24]
 800da58:	b1b2      	cbz	r2, 800da88 <_strtod_l+0x5e0>
 800da5a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800da5e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800da62:	2a00      	cmp	r2, #0
 800da64:	4658      	mov	r0, fp
 800da66:	dd0f      	ble.n	800da88 <_strtod_l+0x5e0>
 800da68:	2a1f      	cmp	r2, #31
 800da6a:	dd55      	ble.n	800db18 <_strtod_l+0x670>
 800da6c:	2a34      	cmp	r2, #52	@ 0x34
 800da6e:	bfde      	ittt	le
 800da70:	f04f 32ff 	movle.w	r2, #4294967295
 800da74:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800da78:	408a      	lslle	r2, r1
 800da7a:	f04f 0a00 	mov.w	sl, #0
 800da7e:	bfcc      	ite	gt
 800da80:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da84:	ea02 0b00 	andle.w	fp, r2, r0
 800da88:	ec4b ab17 	vmov	d7, sl, fp
 800da8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da94:	d0a8      	beq.n	800d9e8 <_strtod_l+0x540>
 800da96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da98:	9805      	ldr	r0, [sp, #20]
 800da9a:	f8cd 9000 	str.w	r9, [sp]
 800da9e:	462a      	mov	r2, r5
 800daa0:	f7ff f8e0 	bl	800cc64 <__s2b>
 800daa4:	9007      	str	r0, [sp, #28]
 800daa6:	2800      	cmp	r0, #0
 800daa8:	f43f af0a 	beq.w	800d8c0 <_strtod_l+0x418>
 800daac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daae:	1b3f      	subs	r7, r7, r4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	bfb4      	ite	lt
 800dab4:	463b      	movlt	r3, r7
 800dab6:	2300      	movge	r3, #0
 800dab8:	930a      	str	r3, [sp, #40]	@ 0x28
 800daba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dabc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800dce8 <_strtod_l+0x840>
 800dac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dac4:	2400      	movs	r4, #0
 800dac6:	930d      	str	r3, [sp, #52]	@ 0x34
 800dac8:	4625      	mov	r5, r4
 800daca:	9b07      	ldr	r3, [sp, #28]
 800dacc:	9805      	ldr	r0, [sp, #20]
 800dace:	6859      	ldr	r1, [r3, #4]
 800dad0:	f7ff f820 	bl	800cb14 <_Balloc>
 800dad4:	4606      	mov	r6, r0
 800dad6:	2800      	cmp	r0, #0
 800dad8:	f43f aef6 	beq.w	800d8c8 <_strtod_l+0x420>
 800dadc:	9b07      	ldr	r3, [sp, #28]
 800dade:	691a      	ldr	r2, [r3, #16]
 800dae0:	ec4b ab19 	vmov	d9, sl, fp
 800dae4:	3202      	adds	r2, #2
 800dae6:	f103 010c 	add.w	r1, r3, #12
 800daea:	0092      	lsls	r2, r2, #2
 800daec:	300c      	adds	r0, #12
 800daee:	f7fe f91e 	bl	800bd2e <memcpy>
 800daf2:	eeb0 0b49 	vmov.f64	d0, d9
 800daf6:	9805      	ldr	r0, [sp, #20]
 800daf8:	aa14      	add	r2, sp, #80	@ 0x50
 800dafa:	a913      	add	r1, sp, #76	@ 0x4c
 800dafc:	f7ff fbee 	bl	800d2dc <__d2b>
 800db00:	9012      	str	r0, [sp, #72]	@ 0x48
 800db02:	2800      	cmp	r0, #0
 800db04:	f43f aee0 	beq.w	800d8c8 <_strtod_l+0x420>
 800db08:	9805      	ldr	r0, [sp, #20]
 800db0a:	2101      	movs	r1, #1
 800db0c:	f7ff f940 	bl	800cd90 <__i2b>
 800db10:	4605      	mov	r5, r0
 800db12:	b940      	cbnz	r0, 800db26 <_strtod_l+0x67e>
 800db14:	2500      	movs	r5, #0
 800db16:	e6d7      	b.n	800d8c8 <_strtod_l+0x420>
 800db18:	f04f 31ff 	mov.w	r1, #4294967295
 800db1c:	fa01 f202 	lsl.w	r2, r1, r2
 800db20:	ea02 0a0a 	and.w	sl, r2, sl
 800db24:	e7b0      	b.n	800da88 <_strtod_l+0x5e0>
 800db26:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800db28:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db2a:	2f00      	cmp	r7, #0
 800db2c:	bfab      	itete	ge
 800db2e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800db30:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800db32:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800db36:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800db3a:	bfac      	ite	ge
 800db3c:	eb07 0903 	addge.w	r9, r7, r3
 800db40:	eba3 0807 	sublt.w	r8, r3, r7
 800db44:	9b06      	ldr	r3, [sp, #24]
 800db46:	1aff      	subs	r7, r7, r3
 800db48:	4417      	add	r7, r2
 800db4a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800db4e:	4a6b      	ldr	r2, [pc, #428]	@ (800dcfc <_strtod_l+0x854>)
 800db50:	3f01      	subs	r7, #1
 800db52:	4297      	cmp	r7, r2
 800db54:	da51      	bge.n	800dbfa <_strtod_l+0x752>
 800db56:	1bd1      	subs	r1, r2, r7
 800db58:	291f      	cmp	r1, #31
 800db5a:	eba3 0301 	sub.w	r3, r3, r1
 800db5e:	f04f 0201 	mov.w	r2, #1
 800db62:	dc3e      	bgt.n	800dbe2 <_strtod_l+0x73a>
 800db64:	408a      	lsls	r2, r1
 800db66:	920c      	str	r2, [sp, #48]	@ 0x30
 800db68:	2200      	movs	r2, #0
 800db6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800db6c:	eb09 0703 	add.w	r7, r9, r3
 800db70:	4498      	add	r8, r3
 800db72:	9b06      	ldr	r3, [sp, #24]
 800db74:	45b9      	cmp	r9, r7
 800db76:	4498      	add	r8, r3
 800db78:	464b      	mov	r3, r9
 800db7a:	bfa8      	it	ge
 800db7c:	463b      	movge	r3, r7
 800db7e:	4543      	cmp	r3, r8
 800db80:	bfa8      	it	ge
 800db82:	4643      	movge	r3, r8
 800db84:	2b00      	cmp	r3, #0
 800db86:	bfc2      	ittt	gt
 800db88:	1aff      	subgt	r7, r7, r3
 800db8a:	eba8 0803 	subgt.w	r8, r8, r3
 800db8e:	eba9 0903 	subgt.w	r9, r9, r3
 800db92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db94:	2b00      	cmp	r3, #0
 800db96:	dd16      	ble.n	800dbc6 <_strtod_l+0x71e>
 800db98:	4629      	mov	r1, r5
 800db9a:	9805      	ldr	r0, [sp, #20]
 800db9c:	461a      	mov	r2, r3
 800db9e:	f7ff f9b7 	bl	800cf10 <__pow5mult>
 800dba2:	4605      	mov	r5, r0
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d0b5      	beq.n	800db14 <_strtod_l+0x66c>
 800dba8:	4601      	mov	r1, r0
 800dbaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dbac:	9805      	ldr	r0, [sp, #20]
 800dbae:	f7ff f905 	bl	800cdbc <__multiply>
 800dbb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	f43f ae87 	beq.w	800d8c8 <_strtod_l+0x420>
 800dbba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dbbc:	9805      	ldr	r0, [sp, #20]
 800dbbe:	f7fe ffe9 	bl	800cb94 <_Bfree>
 800dbc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbc4:	9312      	str	r3, [sp, #72]	@ 0x48
 800dbc6:	2f00      	cmp	r7, #0
 800dbc8:	dc1b      	bgt.n	800dc02 <_strtod_l+0x75a>
 800dbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	dd21      	ble.n	800dc14 <_strtod_l+0x76c>
 800dbd0:	4631      	mov	r1, r6
 800dbd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbd4:	9805      	ldr	r0, [sp, #20]
 800dbd6:	f7ff f99b 	bl	800cf10 <__pow5mult>
 800dbda:	4606      	mov	r6, r0
 800dbdc:	b9d0      	cbnz	r0, 800dc14 <_strtod_l+0x76c>
 800dbde:	2600      	movs	r6, #0
 800dbe0:	e672      	b.n	800d8c8 <_strtod_l+0x420>
 800dbe2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800dbe6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800dbea:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800dbee:	37e2      	adds	r7, #226	@ 0xe2
 800dbf0:	fa02 f107 	lsl.w	r1, r2, r7
 800dbf4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dbf6:	920c      	str	r2, [sp, #48]	@ 0x30
 800dbf8:	e7b8      	b.n	800db6c <_strtod_l+0x6c4>
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dbfe:	2201      	movs	r2, #1
 800dc00:	e7f9      	b.n	800dbf6 <_strtod_l+0x74e>
 800dc02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc04:	9805      	ldr	r0, [sp, #20]
 800dc06:	463a      	mov	r2, r7
 800dc08:	f7ff f9dc 	bl	800cfc4 <__lshift>
 800dc0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d1db      	bne.n	800dbca <_strtod_l+0x722>
 800dc12:	e659      	b.n	800d8c8 <_strtod_l+0x420>
 800dc14:	f1b8 0f00 	cmp.w	r8, #0
 800dc18:	dd07      	ble.n	800dc2a <_strtod_l+0x782>
 800dc1a:	4631      	mov	r1, r6
 800dc1c:	9805      	ldr	r0, [sp, #20]
 800dc1e:	4642      	mov	r2, r8
 800dc20:	f7ff f9d0 	bl	800cfc4 <__lshift>
 800dc24:	4606      	mov	r6, r0
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d0d9      	beq.n	800dbde <_strtod_l+0x736>
 800dc2a:	f1b9 0f00 	cmp.w	r9, #0
 800dc2e:	dd08      	ble.n	800dc42 <_strtod_l+0x79a>
 800dc30:	4629      	mov	r1, r5
 800dc32:	9805      	ldr	r0, [sp, #20]
 800dc34:	464a      	mov	r2, r9
 800dc36:	f7ff f9c5 	bl	800cfc4 <__lshift>
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	f43f ae43 	beq.w	800d8c8 <_strtod_l+0x420>
 800dc42:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc44:	9805      	ldr	r0, [sp, #20]
 800dc46:	4632      	mov	r2, r6
 800dc48:	f7ff fa44 	bl	800d0d4 <__mdiff>
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f43f ae3a 	beq.w	800d8c8 <_strtod_l+0x420>
 800dc54:	2300      	movs	r3, #0
 800dc56:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800dc5a:	60c3      	str	r3, [r0, #12]
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	f7ff fa1d 	bl	800d09c <__mcmp>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	da4e      	bge.n	800dd04 <_strtod_l+0x85c>
 800dc66:	ea58 080a 	orrs.w	r8, r8, sl
 800dc6a:	d174      	bne.n	800dd56 <_strtod_l+0x8ae>
 800dc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d170      	bne.n	800dd56 <_strtod_l+0x8ae>
 800dc74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc78:	0d1b      	lsrs	r3, r3, #20
 800dc7a:	051b      	lsls	r3, r3, #20
 800dc7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc80:	d969      	bls.n	800dd56 <_strtod_l+0x8ae>
 800dc82:	6963      	ldr	r3, [r4, #20]
 800dc84:	b913      	cbnz	r3, 800dc8c <_strtod_l+0x7e4>
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	dd64      	ble.n	800dd56 <_strtod_l+0x8ae>
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	2201      	movs	r2, #1
 800dc90:	9805      	ldr	r0, [sp, #20]
 800dc92:	f7ff f997 	bl	800cfc4 <__lshift>
 800dc96:	4629      	mov	r1, r5
 800dc98:	4604      	mov	r4, r0
 800dc9a:	f7ff f9ff 	bl	800d09c <__mcmp>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	dd59      	ble.n	800dd56 <_strtod_l+0x8ae>
 800dca2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dca6:	9a06      	ldr	r2, [sp, #24]
 800dca8:	0d1b      	lsrs	r3, r3, #20
 800dcaa:	051b      	lsls	r3, r3, #20
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	d070      	beq.n	800dd92 <_strtod_l+0x8ea>
 800dcb0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcb4:	d86d      	bhi.n	800dd92 <_strtod_l+0x8ea>
 800dcb6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dcba:	f67f ae99 	bls.w	800d9f0 <_strtod_l+0x548>
 800dcbe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800dcf0 <_strtod_l+0x848>
 800dcc2:	ec4b ab16 	vmov	d6, sl, fp
 800dcc6:	4b0e      	ldr	r3, [pc, #56]	@ (800dd00 <_strtod_l+0x858>)
 800dcc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dccc:	ee17 2a90 	vmov	r2, s15
 800dcd0:	4013      	ands	r3, r2
 800dcd2:	ec5b ab17 	vmov	sl, fp, d7
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f47f ae01 	bne.w	800d8de <_strtod_l+0x436>
 800dcdc:	9a05      	ldr	r2, [sp, #20]
 800dcde:	2322      	movs	r3, #34	@ 0x22
 800dce0:	6013      	str	r3, [r2, #0]
 800dce2:	e5fc      	b.n	800d8de <_strtod_l+0x436>
 800dce4:	f3af 8000 	nop.w
 800dce8:	ffc00000 	.word	0xffc00000
 800dcec:	41dfffff 	.word	0x41dfffff
 800dcf0:	00000000 	.word	0x00000000
 800dcf4:	39500000 	.word	0x39500000
 800dcf8:	0800fb48 	.word	0x0800fb48
 800dcfc:	fffffc02 	.word	0xfffffc02
 800dd00:	7ff00000 	.word	0x7ff00000
 800dd04:	46d9      	mov	r9, fp
 800dd06:	d15d      	bne.n	800ddc4 <_strtod_l+0x91c>
 800dd08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd0c:	f1b8 0f00 	cmp.w	r8, #0
 800dd10:	d02a      	beq.n	800dd68 <_strtod_l+0x8c0>
 800dd12:	4aab      	ldr	r2, [pc, #684]	@ (800dfc0 <_strtod_l+0xb18>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d12a      	bne.n	800dd6e <_strtod_l+0x8c6>
 800dd18:	9b06      	ldr	r3, [sp, #24]
 800dd1a:	4652      	mov	r2, sl
 800dd1c:	b1fb      	cbz	r3, 800dd5e <_strtod_l+0x8b6>
 800dd1e:	4ba9      	ldr	r3, [pc, #676]	@ (800dfc4 <_strtod_l+0xb1c>)
 800dd20:	ea0b 0303 	and.w	r3, fp, r3
 800dd24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd28:	f04f 31ff 	mov.w	r1, #4294967295
 800dd2c:	d81a      	bhi.n	800dd64 <_strtod_l+0x8bc>
 800dd2e:	0d1b      	lsrs	r3, r3, #20
 800dd30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd34:	fa01 f303 	lsl.w	r3, r1, r3
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d118      	bne.n	800dd6e <_strtod_l+0x8c6>
 800dd3c:	4ba2      	ldr	r3, [pc, #648]	@ (800dfc8 <_strtod_l+0xb20>)
 800dd3e:	4599      	cmp	r9, r3
 800dd40:	d102      	bne.n	800dd48 <_strtod_l+0x8a0>
 800dd42:	3201      	adds	r2, #1
 800dd44:	f43f adc0 	beq.w	800d8c8 <_strtod_l+0x420>
 800dd48:	4b9e      	ldr	r3, [pc, #632]	@ (800dfc4 <_strtod_l+0xb1c>)
 800dd4a:	ea09 0303 	and.w	r3, r9, r3
 800dd4e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800dd52:	f04f 0a00 	mov.w	sl, #0
 800dd56:	9b06      	ldr	r3, [sp, #24]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d1b0      	bne.n	800dcbe <_strtod_l+0x816>
 800dd5c:	e5bf      	b.n	800d8de <_strtod_l+0x436>
 800dd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd62:	e7e9      	b.n	800dd38 <_strtod_l+0x890>
 800dd64:	460b      	mov	r3, r1
 800dd66:	e7e7      	b.n	800dd38 <_strtod_l+0x890>
 800dd68:	ea53 030a 	orrs.w	r3, r3, sl
 800dd6c:	d099      	beq.n	800dca2 <_strtod_l+0x7fa>
 800dd6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd70:	b1c3      	cbz	r3, 800dda4 <_strtod_l+0x8fc>
 800dd72:	ea13 0f09 	tst.w	r3, r9
 800dd76:	d0ee      	beq.n	800dd56 <_strtod_l+0x8ae>
 800dd78:	9a06      	ldr	r2, [sp, #24]
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	4659      	mov	r1, fp
 800dd7e:	f1b8 0f00 	cmp.w	r8, #0
 800dd82:	d013      	beq.n	800ddac <_strtod_l+0x904>
 800dd84:	f7ff fb75 	bl	800d472 <sulp>
 800dd88:	ee39 7b00 	vadd.f64	d7, d9, d0
 800dd8c:	ec5b ab17 	vmov	sl, fp, d7
 800dd90:	e7e1      	b.n	800dd56 <_strtod_l+0x8ae>
 800dd92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd9e:	f04f 3aff 	mov.w	sl, #4294967295
 800dda2:	e7d8      	b.n	800dd56 <_strtod_l+0x8ae>
 800dda4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dda6:	ea13 0f0a 	tst.w	r3, sl
 800ddaa:	e7e4      	b.n	800dd76 <_strtod_l+0x8ce>
 800ddac:	f7ff fb61 	bl	800d472 <sulp>
 800ddb0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ddb4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	ec5b ab10 	vmov	sl, fp, d0
 800ddc0:	d1c9      	bne.n	800dd56 <_strtod_l+0x8ae>
 800ddc2:	e615      	b.n	800d9f0 <_strtod_l+0x548>
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f7ff fae0 	bl	800d38c <__ratio>
 800ddcc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ddd0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ddd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd8:	d85d      	bhi.n	800de96 <_strtod_l+0x9ee>
 800ddda:	f1b8 0f00 	cmp.w	r8, #0
 800ddde:	d164      	bne.n	800deaa <_strtod_l+0xa02>
 800dde0:	f1ba 0f00 	cmp.w	sl, #0
 800dde4:	d14b      	bne.n	800de7e <_strtod_l+0x9d6>
 800dde6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddea:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d160      	bne.n	800deb4 <_strtod_l+0xa0c>
 800ddf2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ddf6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfe:	d401      	bmi.n	800de04 <_strtod_l+0x95c>
 800de00:	ee20 8b08 	vmul.f64	d8, d0, d8
 800de04:	eeb1 ab48 	vneg.f64	d10, d8
 800de08:	486e      	ldr	r0, [pc, #440]	@ (800dfc4 <_strtod_l+0xb1c>)
 800de0a:	4970      	ldr	r1, [pc, #448]	@ (800dfcc <_strtod_l+0xb24>)
 800de0c:	ea09 0700 	and.w	r7, r9, r0
 800de10:	428f      	cmp	r7, r1
 800de12:	ec53 2b1a 	vmov	r2, r3, d10
 800de16:	d17d      	bne.n	800df14 <_strtod_l+0xa6c>
 800de18:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800de1c:	ec4b ab1c 	vmov	d12, sl, fp
 800de20:	eeb0 0b4c 	vmov.f64	d0, d12
 800de24:	f7ff f9ea 	bl	800d1fc <__ulp>
 800de28:	4866      	ldr	r0, [pc, #408]	@ (800dfc4 <_strtod_l+0xb1c>)
 800de2a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800de2e:	ee1c 3a90 	vmov	r3, s25
 800de32:	4a67      	ldr	r2, [pc, #412]	@ (800dfd0 <_strtod_l+0xb28>)
 800de34:	ea03 0100 	and.w	r1, r3, r0
 800de38:	4291      	cmp	r1, r2
 800de3a:	ec5b ab1c 	vmov	sl, fp, d12
 800de3e:	d93c      	bls.n	800deba <_strtod_l+0xa12>
 800de40:	ee19 2a90 	vmov	r2, s19
 800de44:	4b60      	ldr	r3, [pc, #384]	@ (800dfc8 <_strtod_l+0xb20>)
 800de46:	429a      	cmp	r2, r3
 800de48:	d104      	bne.n	800de54 <_strtod_l+0x9ac>
 800de4a:	ee19 3a10 	vmov	r3, s18
 800de4e:	3301      	adds	r3, #1
 800de50:	f43f ad3a 	beq.w	800d8c8 <_strtod_l+0x420>
 800de54:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800dfc8 <_strtod_l+0xb20>
 800de58:	f04f 3aff 	mov.w	sl, #4294967295
 800de5c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800de5e:	9805      	ldr	r0, [sp, #20]
 800de60:	f7fe fe98 	bl	800cb94 <_Bfree>
 800de64:	9805      	ldr	r0, [sp, #20]
 800de66:	4631      	mov	r1, r6
 800de68:	f7fe fe94 	bl	800cb94 <_Bfree>
 800de6c:	9805      	ldr	r0, [sp, #20]
 800de6e:	4629      	mov	r1, r5
 800de70:	f7fe fe90 	bl	800cb94 <_Bfree>
 800de74:	9805      	ldr	r0, [sp, #20]
 800de76:	4621      	mov	r1, r4
 800de78:	f7fe fe8c 	bl	800cb94 <_Bfree>
 800de7c:	e625      	b.n	800daca <_strtod_l+0x622>
 800de7e:	f1ba 0f01 	cmp.w	sl, #1
 800de82:	d103      	bne.n	800de8c <_strtod_l+0x9e4>
 800de84:	f1bb 0f00 	cmp.w	fp, #0
 800de88:	f43f adb2 	beq.w	800d9f0 <_strtod_l+0x548>
 800de8c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800de90:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800de94:	e7b8      	b.n	800de08 <_strtod_l+0x960>
 800de96:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800de9a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800de9e:	f1b8 0f00 	cmp.w	r8, #0
 800dea2:	d0af      	beq.n	800de04 <_strtod_l+0x95c>
 800dea4:	eeb0 ab48 	vmov.f64	d10, d8
 800dea8:	e7ae      	b.n	800de08 <_strtod_l+0x960>
 800deaa:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800deae:	eeb0 8b4a 	vmov.f64	d8, d10
 800deb2:	e7a9      	b.n	800de08 <_strtod_l+0x960>
 800deb4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800deb8:	e7a6      	b.n	800de08 <_strtod_l+0x960>
 800deba:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800debe:	9b06      	ldr	r3, [sp, #24]
 800dec0:	46d9      	mov	r9, fp
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1ca      	bne.n	800de5c <_strtod_l+0x9b4>
 800dec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800deca:	0d1b      	lsrs	r3, r3, #20
 800decc:	051b      	lsls	r3, r3, #20
 800dece:	429f      	cmp	r7, r3
 800ded0:	d1c4      	bne.n	800de5c <_strtod_l+0x9b4>
 800ded2:	ec51 0b18 	vmov	r0, r1, d8
 800ded6:	f7f2 fbdf 	bl	8000698 <__aeabi_d2lz>
 800deda:	f7f2 fb97 	bl	800060c <__aeabi_l2d>
 800dede:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800dee2:	ec41 0b17 	vmov	d7, r0, r1
 800dee6:	ea49 090a 	orr.w	r9, r9, sl
 800deea:	ea59 0908 	orrs.w	r9, r9, r8
 800deee:	ee38 8b47 	vsub.f64	d8, d8, d7
 800def2:	d03c      	beq.n	800df6e <_strtod_l+0xac6>
 800def4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800dfa8 <_strtod_l+0xb00>
 800def8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800defc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df00:	f53f aced 	bmi.w	800d8de <_strtod_l+0x436>
 800df04:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800dfb0 <_strtod_l+0xb08>
 800df08:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df10:	dda4      	ble.n	800de5c <_strtod_l+0x9b4>
 800df12:	e4e4      	b.n	800d8de <_strtod_l+0x436>
 800df14:	9906      	ldr	r1, [sp, #24]
 800df16:	b1e1      	cbz	r1, 800df52 <_strtod_l+0xaaa>
 800df18:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800df1c:	d819      	bhi.n	800df52 <_strtod_l+0xaaa>
 800df1e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800df22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df26:	d811      	bhi.n	800df4c <_strtod_l+0xaa4>
 800df28:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800df2c:	ee18 3a10 	vmov	r3, s16
 800df30:	2b01      	cmp	r3, #1
 800df32:	bf38      	it	cc
 800df34:	2301      	movcc	r3, #1
 800df36:	ee08 3a10 	vmov	s16, r3
 800df3a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800df3e:	f1b8 0f00 	cmp.w	r8, #0
 800df42:	d111      	bne.n	800df68 <_strtod_l+0xac0>
 800df44:	eeb1 7b48 	vneg.f64	d7, d8
 800df48:	ec53 2b17 	vmov	r2, r3, d7
 800df4c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800df50:	1bcb      	subs	r3, r1, r7
 800df52:	eeb0 0b49 	vmov.f64	d0, d9
 800df56:	ec43 2b1a 	vmov	d10, r2, r3
 800df5a:	f7ff f94f 	bl	800d1fc <__ulp>
 800df5e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800df62:	ec5b ab19 	vmov	sl, fp, d9
 800df66:	e7aa      	b.n	800debe <_strtod_l+0xa16>
 800df68:	eeb0 7b48 	vmov.f64	d7, d8
 800df6c:	e7ec      	b.n	800df48 <_strtod_l+0xaa0>
 800df6e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800dfb8 <_strtod_l+0xb10>
 800df72:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7a:	f57f af6f 	bpl.w	800de5c <_strtod_l+0x9b4>
 800df7e:	e4ae      	b.n	800d8de <_strtod_l+0x436>
 800df80:	2300      	movs	r3, #0
 800df82:	9308      	str	r3, [sp, #32]
 800df84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df88:	6013      	str	r3, [r2, #0]
 800df8a:	f7ff bacc 	b.w	800d526 <_strtod_l+0x7e>
 800df8e:	2a65      	cmp	r2, #101	@ 0x65
 800df90:	f43f abbc 	beq.w	800d70c <_strtod_l+0x264>
 800df94:	2a45      	cmp	r2, #69	@ 0x45
 800df96:	f43f abb9 	beq.w	800d70c <_strtod_l+0x264>
 800df9a:	2301      	movs	r3, #1
 800df9c:	9306      	str	r3, [sp, #24]
 800df9e:	f7ff bbf0 	b.w	800d782 <_strtod_l+0x2da>
 800dfa2:	bf00      	nop
 800dfa4:	f3af 8000 	nop.w
 800dfa8:	94a03595 	.word	0x94a03595
 800dfac:	3fdfffff 	.word	0x3fdfffff
 800dfb0:	35afe535 	.word	0x35afe535
 800dfb4:	3fe00000 	.word	0x3fe00000
 800dfb8:	94a03595 	.word	0x94a03595
 800dfbc:	3fcfffff 	.word	0x3fcfffff
 800dfc0:	000fffff 	.word	0x000fffff
 800dfc4:	7ff00000 	.word	0x7ff00000
 800dfc8:	7fefffff 	.word	0x7fefffff
 800dfcc:	7fe00000 	.word	0x7fe00000
 800dfd0:	7c9fffff 	.word	0x7c9fffff

0800dfd4 <_strtod_r>:
 800dfd4:	4b01      	ldr	r3, [pc, #4]	@ (800dfdc <_strtod_r+0x8>)
 800dfd6:	f7ff ba67 	b.w	800d4a8 <_strtod_l>
 800dfda:	bf00      	nop
 800dfdc:	200000d4 	.word	0x200000d4

0800dfe0 <__ssputs_r>:
 800dfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe4:	688e      	ldr	r6, [r1, #8]
 800dfe6:	461f      	mov	r7, r3
 800dfe8:	42be      	cmp	r6, r7
 800dfea:	680b      	ldr	r3, [r1, #0]
 800dfec:	4682      	mov	sl, r0
 800dfee:	460c      	mov	r4, r1
 800dff0:	4690      	mov	r8, r2
 800dff2:	d82d      	bhi.n	800e050 <__ssputs_r+0x70>
 800dff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dff8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dffc:	d026      	beq.n	800e04c <__ssputs_r+0x6c>
 800dffe:	6965      	ldr	r5, [r4, #20]
 800e000:	6909      	ldr	r1, [r1, #16]
 800e002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e006:	eba3 0901 	sub.w	r9, r3, r1
 800e00a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e00e:	1c7b      	adds	r3, r7, #1
 800e010:	444b      	add	r3, r9
 800e012:	106d      	asrs	r5, r5, #1
 800e014:	429d      	cmp	r5, r3
 800e016:	bf38      	it	cc
 800e018:	461d      	movcc	r5, r3
 800e01a:	0553      	lsls	r3, r2, #21
 800e01c:	d527      	bpl.n	800e06e <__ssputs_r+0x8e>
 800e01e:	4629      	mov	r1, r5
 800e020:	f7fe fcec 	bl	800c9fc <_malloc_r>
 800e024:	4606      	mov	r6, r0
 800e026:	b360      	cbz	r0, 800e082 <__ssputs_r+0xa2>
 800e028:	6921      	ldr	r1, [r4, #16]
 800e02a:	464a      	mov	r2, r9
 800e02c:	f7fd fe7f 	bl	800bd2e <memcpy>
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e03a:	81a3      	strh	r3, [r4, #12]
 800e03c:	6126      	str	r6, [r4, #16]
 800e03e:	6165      	str	r5, [r4, #20]
 800e040:	444e      	add	r6, r9
 800e042:	eba5 0509 	sub.w	r5, r5, r9
 800e046:	6026      	str	r6, [r4, #0]
 800e048:	60a5      	str	r5, [r4, #8]
 800e04a:	463e      	mov	r6, r7
 800e04c:	42be      	cmp	r6, r7
 800e04e:	d900      	bls.n	800e052 <__ssputs_r+0x72>
 800e050:	463e      	mov	r6, r7
 800e052:	6820      	ldr	r0, [r4, #0]
 800e054:	4632      	mov	r2, r6
 800e056:	4641      	mov	r1, r8
 800e058:	f000 f9c6 	bl	800e3e8 <memmove>
 800e05c:	68a3      	ldr	r3, [r4, #8]
 800e05e:	1b9b      	subs	r3, r3, r6
 800e060:	60a3      	str	r3, [r4, #8]
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	4433      	add	r3, r6
 800e066:	6023      	str	r3, [r4, #0]
 800e068:	2000      	movs	r0, #0
 800e06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e06e:	462a      	mov	r2, r5
 800e070:	f000 fd7b 	bl	800eb6a <_realloc_r>
 800e074:	4606      	mov	r6, r0
 800e076:	2800      	cmp	r0, #0
 800e078:	d1e0      	bne.n	800e03c <__ssputs_r+0x5c>
 800e07a:	6921      	ldr	r1, [r4, #16]
 800e07c:	4650      	mov	r0, sl
 800e07e:	f7fe fc49 	bl	800c914 <_free_r>
 800e082:	230c      	movs	r3, #12
 800e084:	f8ca 3000 	str.w	r3, [sl]
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e08e:	81a3      	strh	r3, [r4, #12]
 800e090:	f04f 30ff 	mov.w	r0, #4294967295
 800e094:	e7e9      	b.n	800e06a <__ssputs_r+0x8a>
	...

0800e098 <_svfiprintf_r>:
 800e098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e09c:	4698      	mov	r8, r3
 800e09e:	898b      	ldrh	r3, [r1, #12]
 800e0a0:	061b      	lsls	r3, r3, #24
 800e0a2:	b09d      	sub	sp, #116	@ 0x74
 800e0a4:	4607      	mov	r7, r0
 800e0a6:	460d      	mov	r5, r1
 800e0a8:	4614      	mov	r4, r2
 800e0aa:	d510      	bpl.n	800e0ce <_svfiprintf_r+0x36>
 800e0ac:	690b      	ldr	r3, [r1, #16]
 800e0ae:	b973      	cbnz	r3, 800e0ce <_svfiprintf_r+0x36>
 800e0b0:	2140      	movs	r1, #64	@ 0x40
 800e0b2:	f7fe fca3 	bl	800c9fc <_malloc_r>
 800e0b6:	6028      	str	r0, [r5, #0]
 800e0b8:	6128      	str	r0, [r5, #16]
 800e0ba:	b930      	cbnz	r0, 800e0ca <_svfiprintf_r+0x32>
 800e0bc:	230c      	movs	r3, #12
 800e0be:	603b      	str	r3, [r7, #0]
 800e0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c4:	b01d      	add	sp, #116	@ 0x74
 800e0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ca:	2340      	movs	r3, #64	@ 0x40
 800e0cc:	616b      	str	r3, [r5, #20]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0d2:	2320      	movs	r3, #32
 800e0d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0dc:	2330      	movs	r3, #48	@ 0x30
 800e0de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e27c <_svfiprintf_r+0x1e4>
 800e0e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0e6:	f04f 0901 	mov.w	r9, #1
 800e0ea:	4623      	mov	r3, r4
 800e0ec:	469a      	mov	sl, r3
 800e0ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f2:	b10a      	cbz	r2, 800e0f8 <_svfiprintf_r+0x60>
 800e0f4:	2a25      	cmp	r2, #37	@ 0x25
 800e0f6:	d1f9      	bne.n	800e0ec <_svfiprintf_r+0x54>
 800e0f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e0fc:	d00b      	beq.n	800e116 <_svfiprintf_r+0x7e>
 800e0fe:	465b      	mov	r3, fp
 800e100:	4622      	mov	r2, r4
 800e102:	4629      	mov	r1, r5
 800e104:	4638      	mov	r0, r7
 800e106:	f7ff ff6b 	bl	800dfe0 <__ssputs_r>
 800e10a:	3001      	adds	r0, #1
 800e10c:	f000 80a7 	beq.w	800e25e <_svfiprintf_r+0x1c6>
 800e110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e112:	445a      	add	r2, fp
 800e114:	9209      	str	r2, [sp, #36]	@ 0x24
 800e116:	f89a 3000 	ldrb.w	r3, [sl]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	f000 809f 	beq.w	800e25e <_svfiprintf_r+0x1c6>
 800e120:	2300      	movs	r3, #0
 800e122:	f04f 32ff 	mov.w	r2, #4294967295
 800e126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e12a:	f10a 0a01 	add.w	sl, sl, #1
 800e12e:	9304      	str	r3, [sp, #16]
 800e130:	9307      	str	r3, [sp, #28]
 800e132:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e136:	931a      	str	r3, [sp, #104]	@ 0x68
 800e138:	4654      	mov	r4, sl
 800e13a:	2205      	movs	r2, #5
 800e13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e140:	484e      	ldr	r0, [pc, #312]	@ (800e27c <_svfiprintf_r+0x1e4>)
 800e142:	f7f2 f87d 	bl	8000240 <memchr>
 800e146:	9a04      	ldr	r2, [sp, #16]
 800e148:	b9d8      	cbnz	r0, 800e182 <_svfiprintf_r+0xea>
 800e14a:	06d0      	lsls	r0, r2, #27
 800e14c:	bf44      	itt	mi
 800e14e:	2320      	movmi	r3, #32
 800e150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e154:	0711      	lsls	r1, r2, #28
 800e156:	bf44      	itt	mi
 800e158:	232b      	movmi	r3, #43	@ 0x2b
 800e15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e15e:	f89a 3000 	ldrb.w	r3, [sl]
 800e162:	2b2a      	cmp	r3, #42	@ 0x2a
 800e164:	d015      	beq.n	800e192 <_svfiprintf_r+0xfa>
 800e166:	9a07      	ldr	r2, [sp, #28]
 800e168:	4654      	mov	r4, sl
 800e16a:	2000      	movs	r0, #0
 800e16c:	f04f 0c0a 	mov.w	ip, #10
 800e170:	4621      	mov	r1, r4
 800e172:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e176:	3b30      	subs	r3, #48	@ 0x30
 800e178:	2b09      	cmp	r3, #9
 800e17a:	d94b      	bls.n	800e214 <_svfiprintf_r+0x17c>
 800e17c:	b1b0      	cbz	r0, 800e1ac <_svfiprintf_r+0x114>
 800e17e:	9207      	str	r2, [sp, #28]
 800e180:	e014      	b.n	800e1ac <_svfiprintf_r+0x114>
 800e182:	eba0 0308 	sub.w	r3, r0, r8
 800e186:	fa09 f303 	lsl.w	r3, r9, r3
 800e18a:	4313      	orrs	r3, r2
 800e18c:	9304      	str	r3, [sp, #16]
 800e18e:	46a2      	mov	sl, r4
 800e190:	e7d2      	b.n	800e138 <_svfiprintf_r+0xa0>
 800e192:	9b03      	ldr	r3, [sp, #12]
 800e194:	1d19      	adds	r1, r3, #4
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	9103      	str	r1, [sp, #12]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bfbb      	ittet	lt
 800e19e:	425b      	neglt	r3, r3
 800e1a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e1a4:	9307      	strge	r3, [sp, #28]
 800e1a6:	9307      	strlt	r3, [sp, #28]
 800e1a8:	bfb8      	it	lt
 800e1aa:	9204      	strlt	r2, [sp, #16]
 800e1ac:	7823      	ldrb	r3, [r4, #0]
 800e1ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1b0:	d10a      	bne.n	800e1c8 <_svfiprintf_r+0x130>
 800e1b2:	7863      	ldrb	r3, [r4, #1]
 800e1b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1b6:	d132      	bne.n	800e21e <_svfiprintf_r+0x186>
 800e1b8:	9b03      	ldr	r3, [sp, #12]
 800e1ba:	1d1a      	adds	r2, r3, #4
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	9203      	str	r2, [sp, #12]
 800e1c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1c4:	3402      	adds	r4, #2
 800e1c6:	9305      	str	r3, [sp, #20]
 800e1c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e28c <_svfiprintf_r+0x1f4>
 800e1cc:	7821      	ldrb	r1, [r4, #0]
 800e1ce:	2203      	movs	r2, #3
 800e1d0:	4650      	mov	r0, sl
 800e1d2:	f7f2 f835 	bl	8000240 <memchr>
 800e1d6:	b138      	cbz	r0, 800e1e8 <_svfiprintf_r+0x150>
 800e1d8:	9b04      	ldr	r3, [sp, #16]
 800e1da:	eba0 000a 	sub.w	r0, r0, sl
 800e1de:	2240      	movs	r2, #64	@ 0x40
 800e1e0:	4082      	lsls	r2, r0
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	3401      	adds	r4, #1
 800e1e6:	9304      	str	r3, [sp, #16]
 800e1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ec:	4824      	ldr	r0, [pc, #144]	@ (800e280 <_svfiprintf_r+0x1e8>)
 800e1ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1f2:	2206      	movs	r2, #6
 800e1f4:	f7f2 f824 	bl	8000240 <memchr>
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d036      	beq.n	800e26a <_svfiprintf_r+0x1d2>
 800e1fc:	4b21      	ldr	r3, [pc, #132]	@ (800e284 <_svfiprintf_r+0x1ec>)
 800e1fe:	bb1b      	cbnz	r3, 800e248 <_svfiprintf_r+0x1b0>
 800e200:	9b03      	ldr	r3, [sp, #12]
 800e202:	3307      	adds	r3, #7
 800e204:	f023 0307 	bic.w	r3, r3, #7
 800e208:	3308      	adds	r3, #8
 800e20a:	9303      	str	r3, [sp, #12]
 800e20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e20e:	4433      	add	r3, r6
 800e210:	9309      	str	r3, [sp, #36]	@ 0x24
 800e212:	e76a      	b.n	800e0ea <_svfiprintf_r+0x52>
 800e214:	fb0c 3202 	mla	r2, ip, r2, r3
 800e218:	460c      	mov	r4, r1
 800e21a:	2001      	movs	r0, #1
 800e21c:	e7a8      	b.n	800e170 <_svfiprintf_r+0xd8>
 800e21e:	2300      	movs	r3, #0
 800e220:	3401      	adds	r4, #1
 800e222:	9305      	str	r3, [sp, #20]
 800e224:	4619      	mov	r1, r3
 800e226:	f04f 0c0a 	mov.w	ip, #10
 800e22a:	4620      	mov	r0, r4
 800e22c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e230:	3a30      	subs	r2, #48	@ 0x30
 800e232:	2a09      	cmp	r2, #9
 800e234:	d903      	bls.n	800e23e <_svfiprintf_r+0x1a6>
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0c6      	beq.n	800e1c8 <_svfiprintf_r+0x130>
 800e23a:	9105      	str	r1, [sp, #20]
 800e23c:	e7c4      	b.n	800e1c8 <_svfiprintf_r+0x130>
 800e23e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e242:	4604      	mov	r4, r0
 800e244:	2301      	movs	r3, #1
 800e246:	e7f0      	b.n	800e22a <_svfiprintf_r+0x192>
 800e248:	ab03      	add	r3, sp, #12
 800e24a:	9300      	str	r3, [sp, #0]
 800e24c:	462a      	mov	r2, r5
 800e24e:	4b0e      	ldr	r3, [pc, #56]	@ (800e288 <_svfiprintf_r+0x1f0>)
 800e250:	a904      	add	r1, sp, #16
 800e252:	4638      	mov	r0, r7
 800e254:	f7fc fdbc 	bl	800add0 <_printf_float>
 800e258:	1c42      	adds	r2, r0, #1
 800e25a:	4606      	mov	r6, r0
 800e25c:	d1d6      	bne.n	800e20c <_svfiprintf_r+0x174>
 800e25e:	89ab      	ldrh	r3, [r5, #12]
 800e260:	065b      	lsls	r3, r3, #25
 800e262:	f53f af2d 	bmi.w	800e0c0 <_svfiprintf_r+0x28>
 800e266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e268:	e72c      	b.n	800e0c4 <_svfiprintf_r+0x2c>
 800e26a:	ab03      	add	r3, sp, #12
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	462a      	mov	r2, r5
 800e270:	4b05      	ldr	r3, [pc, #20]	@ (800e288 <_svfiprintf_r+0x1f0>)
 800e272:	a904      	add	r1, sp, #16
 800e274:	4638      	mov	r0, r7
 800e276:	f7fd f833 	bl	800b2e0 <_printf_i>
 800e27a:	e7ed      	b.n	800e258 <_svfiprintf_r+0x1c0>
 800e27c:	0800fb70 	.word	0x0800fb70
 800e280:	0800fb7a 	.word	0x0800fb7a
 800e284:	0800add1 	.word	0x0800add1
 800e288:	0800dfe1 	.word	0x0800dfe1
 800e28c:	0800fb76 	.word	0x0800fb76

0800e290 <__sflush_r>:
 800e290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e298:	0716      	lsls	r6, r2, #28
 800e29a:	4605      	mov	r5, r0
 800e29c:	460c      	mov	r4, r1
 800e29e:	d454      	bmi.n	800e34a <__sflush_r+0xba>
 800e2a0:	684b      	ldr	r3, [r1, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	dc02      	bgt.n	800e2ac <__sflush_r+0x1c>
 800e2a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	dd48      	ble.n	800e33e <__sflush_r+0xae>
 800e2ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2ae:	2e00      	cmp	r6, #0
 800e2b0:	d045      	beq.n	800e33e <__sflush_r+0xae>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e2b8:	682f      	ldr	r7, [r5, #0]
 800e2ba:	6a21      	ldr	r1, [r4, #32]
 800e2bc:	602b      	str	r3, [r5, #0]
 800e2be:	d030      	beq.n	800e322 <__sflush_r+0x92>
 800e2c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e2c2:	89a3      	ldrh	r3, [r4, #12]
 800e2c4:	0759      	lsls	r1, r3, #29
 800e2c6:	d505      	bpl.n	800e2d4 <__sflush_r+0x44>
 800e2c8:	6863      	ldr	r3, [r4, #4]
 800e2ca:	1ad2      	subs	r2, r2, r3
 800e2cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e2ce:	b10b      	cbz	r3, 800e2d4 <__sflush_r+0x44>
 800e2d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e2d2:	1ad2      	subs	r2, r2, r3
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2d8:	6a21      	ldr	r1, [r4, #32]
 800e2da:	4628      	mov	r0, r5
 800e2dc:	47b0      	blx	r6
 800e2de:	1c43      	adds	r3, r0, #1
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	d106      	bne.n	800e2f2 <__sflush_r+0x62>
 800e2e4:	6829      	ldr	r1, [r5, #0]
 800e2e6:	291d      	cmp	r1, #29
 800e2e8:	d82b      	bhi.n	800e342 <__sflush_r+0xb2>
 800e2ea:	4a2a      	ldr	r2, [pc, #168]	@ (800e394 <__sflush_r+0x104>)
 800e2ec:	410a      	asrs	r2, r1
 800e2ee:	07d6      	lsls	r6, r2, #31
 800e2f0:	d427      	bmi.n	800e342 <__sflush_r+0xb2>
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	6062      	str	r2, [r4, #4]
 800e2f6:	04d9      	lsls	r1, r3, #19
 800e2f8:	6922      	ldr	r2, [r4, #16]
 800e2fa:	6022      	str	r2, [r4, #0]
 800e2fc:	d504      	bpl.n	800e308 <__sflush_r+0x78>
 800e2fe:	1c42      	adds	r2, r0, #1
 800e300:	d101      	bne.n	800e306 <__sflush_r+0x76>
 800e302:	682b      	ldr	r3, [r5, #0]
 800e304:	b903      	cbnz	r3, 800e308 <__sflush_r+0x78>
 800e306:	6560      	str	r0, [r4, #84]	@ 0x54
 800e308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e30a:	602f      	str	r7, [r5, #0]
 800e30c:	b1b9      	cbz	r1, 800e33e <__sflush_r+0xae>
 800e30e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e312:	4299      	cmp	r1, r3
 800e314:	d002      	beq.n	800e31c <__sflush_r+0x8c>
 800e316:	4628      	mov	r0, r5
 800e318:	f7fe fafc 	bl	800c914 <_free_r>
 800e31c:	2300      	movs	r3, #0
 800e31e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e320:	e00d      	b.n	800e33e <__sflush_r+0xae>
 800e322:	2301      	movs	r3, #1
 800e324:	4628      	mov	r0, r5
 800e326:	47b0      	blx	r6
 800e328:	4602      	mov	r2, r0
 800e32a:	1c50      	adds	r0, r2, #1
 800e32c:	d1c9      	bne.n	800e2c2 <__sflush_r+0x32>
 800e32e:	682b      	ldr	r3, [r5, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d0c6      	beq.n	800e2c2 <__sflush_r+0x32>
 800e334:	2b1d      	cmp	r3, #29
 800e336:	d001      	beq.n	800e33c <__sflush_r+0xac>
 800e338:	2b16      	cmp	r3, #22
 800e33a:	d11e      	bne.n	800e37a <__sflush_r+0xea>
 800e33c:	602f      	str	r7, [r5, #0]
 800e33e:	2000      	movs	r0, #0
 800e340:	e022      	b.n	800e388 <__sflush_r+0xf8>
 800e342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e346:	b21b      	sxth	r3, r3
 800e348:	e01b      	b.n	800e382 <__sflush_r+0xf2>
 800e34a:	690f      	ldr	r7, [r1, #16]
 800e34c:	2f00      	cmp	r7, #0
 800e34e:	d0f6      	beq.n	800e33e <__sflush_r+0xae>
 800e350:	0793      	lsls	r3, r2, #30
 800e352:	680e      	ldr	r6, [r1, #0]
 800e354:	bf08      	it	eq
 800e356:	694b      	ldreq	r3, [r1, #20]
 800e358:	600f      	str	r7, [r1, #0]
 800e35a:	bf18      	it	ne
 800e35c:	2300      	movne	r3, #0
 800e35e:	eba6 0807 	sub.w	r8, r6, r7
 800e362:	608b      	str	r3, [r1, #8]
 800e364:	f1b8 0f00 	cmp.w	r8, #0
 800e368:	dde9      	ble.n	800e33e <__sflush_r+0xae>
 800e36a:	6a21      	ldr	r1, [r4, #32]
 800e36c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e36e:	4643      	mov	r3, r8
 800e370:	463a      	mov	r2, r7
 800e372:	4628      	mov	r0, r5
 800e374:	47b0      	blx	r6
 800e376:	2800      	cmp	r0, #0
 800e378:	dc08      	bgt.n	800e38c <__sflush_r+0xfc>
 800e37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e382:	81a3      	strh	r3, [r4, #12]
 800e384:	f04f 30ff 	mov.w	r0, #4294967295
 800e388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e38c:	4407      	add	r7, r0
 800e38e:	eba8 0800 	sub.w	r8, r8, r0
 800e392:	e7e7      	b.n	800e364 <__sflush_r+0xd4>
 800e394:	dfbffffe 	.word	0xdfbffffe

0800e398 <_fflush_r>:
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	690b      	ldr	r3, [r1, #16]
 800e39c:	4605      	mov	r5, r0
 800e39e:	460c      	mov	r4, r1
 800e3a0:	b913      	cbnz	r3, 800e3a8 <_fflush_r+0x10>
 800e3a2:	2500      	movs	r5, #0
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
 800e3a8:	b118      	cbz	r0, 800e3b2 <_fflush_r+0x1a>
 800e3aa:	6a03      	ldr	r3, [r0, #32]
 800e3ac:	b90b      	cbnz	r3, 800e3b2 <_fflush_r+0x1a>
 800e3ae:	f7fd fb4f 	bl	800ba50 <__sinit>
 800e3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d0f3      	beq.n	800e3a2 <_fflush_r+0xa>
 800e3ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e3bc:	07d0      	lsls	r0, r2, #31
 800e3be:	d404      	bmi.n	800e3ca <_fflush_r+0x32>
 800e3c0:	0599      	lsls	r1, r3, #22
 800e3c2:	d402      	bmi.n	800e3ca <_fflush_r+0x32>
 800e3c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3c6:	f7fd fcb0 	bl	800bd2a <__retarget_lock_acquire_recursive>
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	f7ff ff5f 	bl	800e290 <__sflush_r>
 800e3d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3d4:	07da      	lsls	r2, r3, #31
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	d4e4      	bmi.n	800e3a4 <_fflush_r+0xc>
 800e3da:	89a3      	ldrh	r3, [r4, #12]
 800e3dc:	059b      	lsls	r3, r3, #22
 800e3de:	d4e1      	bmi.n	800e3a4 <_fflush_r+0xc>
 800e3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3e2:	f7fd fca3 	bl	800bd2c <__retarget_lock_release_recursive>
 800e3e6:	e7dd      	b.n	800e3a4 <_fflush_r+0xc>

0800e3e8 <memmove>:
 800e3e8:	4288      	cmp	r0, r1
 800e3ea:	b510      	push	{r4, lr}
 800e3ec:	eb01 0402 	add.w	r4, r1, r2
 800e3f0:	d902      	bls.n	800e3f8 <memmove+0x10>
 800e3f2:	4284      	cmp	r4, r0
 800e3f4:	4623      	mov	r3, r4
 800e3f6:	d807      	bhi.n	800e408 <memmove+0x20>
 800e3f8:	1e43      	subs	r3, r0, #1
 800e3fa:	42a1      	cmp	r1, r4
 800e3fc:	d008      	beq.n	800e410 <memmove+0x28>
 800e3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e406:	e7f8      	b.n	800e3fa <memmove+0x12>
 800e408:	4402      	add	r2, r0
 800e40a:	4601      	mov	r1, r0
 800e40c:	428a      	cmp	r2, r1
 800e40e:	d100      	bne.n	800e412 <memmove+0x2a>
 800e410:	bd10      	pop	{r4, pc}
 800e412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e41a:	e7f7      	b.n	800e40c <memmove+0x24>

0800e41c <strncmp>:
 800e41c:	b510      	push	{r4, lr}
 800e41e:	b16a      	cbz	r2, 800e43c <strncmp+0x20>
 800e420:	3901      	subs	r1, #1
 800e422:	1884      	adds	r4, r0, r2
 800e424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e428:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d103      	bne.n	800e438 <strncmp+0x1c>
 800e430:	42a0      	cmp	r0, r4
 800e432:	d001      	beq.n	800e438 <strncmp+0x1c>
 800e434:	2a00      	cmp	r2, #0
 800e436:	d1f5      	bne.n	800e424 <strncmp+0x8>
 800e438:	1ad0      	subs	r0, r2, r3
 800e43a:	bd10      	pop	{r4, pc}
 800e43c:	4610      	mov	r0, r2
 800e43e:	e7fc      	b.n	800e43a <strncmp+0x1e>

0800e440 <_sbrk_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d06      	ldr	r5, [pc, #24]	@ (800e45c <_sbrk_r+0x1c>)
 800e444:	2300      	movs	r3, #0
 800e446:	4604      	mov	r4, r0
 800e448:	4608      	mov	r0, r1
 800e44a:	602b      	str	r3, [r5, #0]
 800e44c:	f7f4 fe24 	bl	8003098 <_sbrk>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	d102      	bne.n	800e45a <_sbrk_r+0x1a>
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	b103      	cbz	r3, 800e45a <_sbrk_r+0x1a>
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	200055d0 	.word	0x200055d0

0800e460 <nan>:
 800e460:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e468 <nan+0x8>
 800e464:	4770      	bx	lr
 800e466:	bf00      	nop
 800e468:	00000000 	.word	0x00000000
 800e46c:	7ff80000 	.word	0x7ff80000

0800e470 <__assert_func>:
 800e470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e472:	4614      	mov	r4, r2
 800e474:	461a      	mov	r2, r3
 800e476:	4b09      	ldr	r3, [pc, #36]	@ (800e49c <__assert_func+0x2c>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4605      	mov	r5, r0
 800e47c:	68d8      	ldr	r0, [r3, #12]
 800e47e:	b954      	cbnz	r4, 800e496 <__assert_func+0x26>
 800e480:	4b07      	ldr	r3, [pc, #28]	@ (800e4a0 <__assert_func+0x30>)
 800e482:	461c      	mov	r4, r3
 800e484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e488:	9100      	str	r1, [sp, #0]
 800e48a:	462b      	mov	r3, r5
 800e48c:	4905      	ldr	r1, [pc, #20]	@ (800e4a4 <__assert_func+0x34>)
 800e48e:	f000 fba7 	bl	800ebe0 <fiprintf>
 800e492:	f000 fbb7 	bl	800ec04 <abort>
 800e496:	4b04      	ldr	r3, [pc, #16]	@ (800e4a8 <__assert_func+0x38>)
 800e498:	e7f4      	b.n	800e484 <__assert_func+0x14>
 800e49a:	bf00      	nop
 800e49c:	20000084 	.word	0x20000084
 800e4a0:	0800fbc4 	.word	0x0800fbc4
 800e4a4:	0800fb96 	.word	0x0800fb96
 800e4a8:	0800fb89 	.word	0x0800fb89

0800e4ac <_calloc_r>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	fba1 5402 	umull	r5, r4, r1, r2
 800e4b2:	b93c      	cbnz	r4, 800e4c4 <_calloc_r+0x18>
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7fe faa1 	bl	800c9fc <_malloc_r>
 800e4ba:	4606      	mov	r6, r0
 800e4bc:	b928      	cbnz	r0, 800e4ca <_calloc_r+0x1e>
 800e4be:	2600      	movs	r6, #0
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	bd70      	pop	{r4, r5, r6, pc}
 800e4c4:	220c      	movs	r2, #12
 800e4c6:	6002      	str	r2, [r0, #0]
 800e4c8:	e7f9      	b.n	800e4be <_calloc_r+0x12>
 800e4ca:	462a      	mov	r2, r5
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	f7fd fb58 	bl	800bb82 <memset>
 800e4d2:	e7f5      	b.n	800e4c0 <_calloc_r+0x14>

0800e4d4 <rshift>:
 800e4d4:	6903      	ldr	r3, [r0, #16]
 800e4d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e4da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e4e2:	f100 0414 	add.w	r4, r0, #20
 800e4e6:	dd45      	ble.n	800e574 <rshift+0xa0>
 800e4e8:	f011 011f 	ands.w	r1, r1, #31
 800e4ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e4f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e4f4:	d10c      	bne.n	800e510 <rshift+0x3c>
 800e4f6:	f100 0710 	add.w	r7, r0, #16
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	42b1      	cmp	r1, r6
 800e4fe:	d334      	bcc.n	800e56a <rshift+0x96>
 800e500:	1a9b      	subs	r3, r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	1eea      	subs	r2, r5, #3
 800e506:	4296      	cmp	r6, r2
 800e508:	bf38      	it	cc
 800e50a:	2300      	movcc	r3, #0
 800e50c:	4423      	add	r3, r4
 800e50e:	e015      	b.n	800e53c <rshift+0x68>
 800e510:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e514:	f1c1 0820 	rsb	r8, r1, #32
 800e518:	40cf      	lsrs	r7, r1
 800e51a:	f105 0e04 	add.w	lr, r5, #4
 800e51e:	46a1      	mov	r9, r4
 800e520:	4576      	cmp	r6, lr
 800e522:	46f4      	mov	ip, lr
 800e524:	d815      	bhi.n	800e552 <rshift+0x7e>
 800e526:	1a9a      	subs	r2, r3, r2
 800e528:	0092      	lsls	r2, r2, #2
 800e52a:	3a04      	subs	r2, #4
 800e52c:	3501      	adds	r5, #1
 800e52e:	42ae      	cmp	r6, r5
 800e530:	bf38      	it	cc
 800e532:	2200      	movcc	r2, #0
 800e534:	18a3      	adds	r3, r4, r2
 800e536:	50a7      	str	r7, [r4, r2]
 800e538:	b107      	cbz	r7, 800e53c <rshift+0x68>
 800e53a:	3304      	adds	r3, #4
 800e53c:	1b1a      	subs	r2, r3, r4
 800e53e:	42a3      	cmp	r3, r4
 800e540:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e544:	bf08      	it	eq
 800e546:	2300      	moveq	r3, #0
 800e548:	6102      	str	r2, [r0, #16]
 800e54a:	bf08      	it	eq
 800e54c:	6143      	streq	r3, [r0, #20]
 800e54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e552:	f8dc c000 	ldr.w	ip, [ip]
 800e556:	fa0c fc08 	lsl.w	ip, ip, r8
 800e55a:	ea4c 0707 	orr.w	r7, ip, r7
 800e55e:	f849 7b04 	str.w	r7, [r9], #4
 800e562:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e566:	40cf      	lsrs	r7, r1
 800e568:	e7da      	b.n	800e520 <rshift+0x4c>
 800e56a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e56e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e572:	e7c3      	b.n	800e4fc <rshift+0x28>
 800e574:	4623      	mov	r3, r4
 800e576:	e7e1      	b.n	800e53c <rshift+0x68>

0800e578 <__hexdig_fun>:
 800e578:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e57c:	2b09      	cmp	r3, #9
 800e57e:	d802      	bhi.n	800e586 <__hexdig_fun+0xe>
 800e580:	3820      	subs	r0, #32
 800e582:	b2c0      	uxtb	r0, r0
 800e584:	4770      	bx	lr
 800e586:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e58a:	2b05      	cmp	r3, #5
 800e58c:	d801      	bhi.n	800e592 <__hexdig_fun+0x1a>
 800e58e:	3847      	subs	r0, #71	@ 0x47
 800e590:	e7f7      	b.n	800e582 <__hexdig_fun+0xa>
 800e592:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e596:	2b05      	cmp	r3, #5
 800e598:	d801      	bhi.n	800e59e <__hexdig_fun+0x26>
 800e59a:	3827      	subs	r0, #39	@ 0x27
 800e59c:	e7f1      	b.n	800e582 <__hexdig_fun+0xa>
 800e59e:	2000      	movs	r0, #0
 800e5a0:	4770      	bx	lr
	...

0800e5a4 <__gethex>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	b085      	sub	sp, #20
 800e5aa:	468a      	mov	sl, r1
 800e5ac:	9302      	str	r3, [sp, #8]
 800e5ae:	680b      	ldr	r3, [r1, #0]
 800e5b0:	9001      	str	r0, [sp, #4]
 800e5b2:	4690      	mov	r8, r2
 800e5b4:	1c9c      	adds	r4, r3, #2
 800e5b6:	46a1      	mov	r9, r4
 800e5b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e5bc:	2830      	cmp	r0, #48	@ 0x30
 800e5be:	d0fa      	beq.n	800e5b6 <__gethex+0x12>
 800e5c0:	eba9 0303 	sub.w	r3, r9, r3
 800e5c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e5c8:	f7ff ffd6 	bl	800e578 <__hexdig_fun>
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d168      	bne.n	800e6a4 <__gethex+0x100>
 800e5d2:	49a0      	ldr	r1, [pc, #640]	@ (800e854 <__gethex+0x2b0>)
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	4648      	mov	r0, r9
 800e5d8:	f7ff ff20 	bl	800e41c <strncmp>
 800e5dc:	4607      	mov	r7, r0
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d167      	bne.n	800e6b2 <__gethex+0x10e>
 800e5e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e5e6:	4626      	mov	r6, r4
 800e5e8:	f7ff ffc6 	bl	800e578 <__hexdig_fun>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d062      	beq.n	800e6b6 <__gethex+0x112>
 800e5f0:	4623      	mov	r3, r4
 800e5f2:	7818      	ldrb	r0, [r3, #0]
 800e5f4:	2830      	cmp	r0, #48	@ 0x30
 800e5f6:	4699      	mov	r9, r3
 800e5f8:	f103 0301 	add.w	r3, r3, #1
 800e5fc:	d0f9      	beq.n	800e5f2 <__gethex+0x4e>
 800e5fe:	f7ff ffbb 	bl	800e578 <__hexdig_fun>
 800e602:	fab0 f580 	clz	r5, r0
 800e606:	096d      	lsrs	r5, r5, #5
 800e608:	f04f 0b01 	mov.w	fp, #1
 800e60c:	464a      	mov	r2, r9
 800e60e:	4616      	mov	r6, r2
 800e610:	3201      	adds	r2, #1
 800e612:	7830      	ldrb	r0, [r6, #0]
 800e614:	f7ff ffb0 	bl	800e578 <__hexdig_fun>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d1f8      	bne.n	800e60e <__gethex+0x6a>
 800e61c:	498d      	ldr	r1, [pc, #564]	@ (800e854 <__gethex+0x2b0>)
 800e61e:	2201      	movs	r2, #1
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff fefb 	bl	800e41c <strncmp>
 800e626:	2800      	cmp	r0, #0
 800e628:	d13f      	bne.n	800e6aa <__gethex+0x106>
 800e62a:	b944      	cbnz	r4, 800e63e <__gethex+0x9a>
 800e62c:	1c74      	adds	r4, r6, #1
 800e62e:	4622      	mov	r2, r4
 800e630:	4616      	mov	r6, r2
 800e632:	3201      	adds	r2, #1
 800e634:	7830      	ldrb	r0, [r6, #0]
 800e636:	f7ff ff9f 	bl	800e578 <__hexdig_fun>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d1f8      	bne.n	800e630 <__gethex+0x8c>
 800e63e:	1ba4      	subs	r4, r4, r6
 800e640:	00a7      	lsls	r7, r4, #2
 800e642:	7833      	ldrb	r3, [r6, #0]
 800e644:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e648:	2b50      	cmp	r3, #80	@ 0x50
 800e64a:	d13e      	bne.n	800e6ca <__gethex+0x126>
 800e64c:	7873      	ldrb	r3, [r6, #1]
 800e64e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e650:	d033      	beq.n	800e6ba <__gethex+0x116>
 800e652:	2b2d      	cmp	r3, #45	@ 0x2d
 800e654:	d034      	beq.n	800e6c0 <__gethex+0x11c>
 800e656:	1c71      	adds	r1, r6, #1
 800e658:	2400      	movs	r4, #0
 800e65a:	7808      	ldrb	r0, [r1, #0]
 800e65c:	f7ff ff8c 	bl	800e578 <__hexdig_fun>
 800e660:	1e43      	subs	r3, r0, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b18      	cmp	r3, #24
 800e666:	d830      	bhi.n	800e6ca <__gethex+0x126>
 800e668:	f1a0 0210 	sub.w	r2, r0, #16
 800e66c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e670:	f7ff ff82 	bl	800e578 <__hexdig_fun>
 800e674:	f100 3cff 	add.w	ip, r0, #4294967295
 800e678:	fa5f fc8c 	uxtb.w	ip, ip
 800e67c:	f1bc 0f18 	cmp.w	ip, #24
 800e680:	f04f 030a 	mov.w	r3, #10
 800e684:	d91e      	bls.n	800e6c4 <__gethex+0x120>
 800e686:	b104      	cbz	r4, 800e68a <__gethex+0xe6>
 800e688:	4252      	negs	r2, r2
 800e68a:	4417      	add	r7, r2
 800e68c:	f8ca 1000 	str.w	r1, [sl]
 800e690:	b1ed      	cbz	r5, 800e6ce <__gethex+0x12a>
 800e692:	f1bb 0f00 	cmp.w	fp, #0
 800e696:	bf0c      	ite	eq
 800e698:	2506      	moveq	r5, #6
 800e69a:	2500      	movne	r5, #0
 800e69c:	4628      	mov	r0, r5
 800e69e:	b005      	add	sp, #20
 800e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a4:	2500      	movs	r5, #0
 800e6a6:	462c      	mov	r4, r5
 800e6a8:	e7b0      	b.n	800e60c <__gethex+0x68>
 800e6aa:	2c00      	cmp	r4, #0
 800e6ac:	d1c7      	bne.n	800e63e <__gethex+0x9a>
 800e6ae:	4627      	mov	r7, r4
 800e6b0:	e7c7      	b.n	800e642 <__gethex+0x9e>
 800e6b2:	464e      	mov	r6, r9
 800e6b4:	462f      	mov	r7, r5
 800e6b6:	2501      	movs	r5, #1
 800e6b8:	e7c3      	b.n	800e642 <__gethex+0x9e>
 800e6ba:	2400      	movs	r4, #0
 800e6bc:	1cb1      	adds	r1, r6, #2
 800e6be:	e7cc      	b.n	800e65a <__gethex+0xb6>
 800e6c0:	2401      	movs	r4, #1
 800e6c2:	e7fb      	b.n	800e6bc <__gethex+0x118>
 800e6c4:	fb03 0002 	mla	r0, r3, r2, r0
 800e6c8:	e7ce      	b.n	800e668 <__gethex+0xc4>
 800e6ca:	4631      	mov	r1, r6
 800e6cc:	e7de      	b.n	800e68c <__gethex+0xe8>
 800e6ce:	eba6 0309 	sub.w	r3, r6, r9
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	2b07      	cmp	r3, #7
 800e6d8:	dc0a      	bgt.n	800e6f0 <__gethex+0x14c>
 800e6da:	9801      	ldr	r0, [sp, #4]
 800e6dc:	f7fe fa1a 	bl	800cb14 <_Balloc>
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	b940      	cbnz	r0, 800e6f6 <__gethex+0x152>
 800e6e4:	4b5c      	ldr	r3, [pc, #368]	@ (800e858 <__gethex+0x2b4>)
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	21e4      	movs	r1, #228	@ 0xe4
 800e6ea:	485c      	ldr	r0, [pc, #368]	@ (800e85c <__gethex+0x2b8>)
 800e6ec:	f7ff fec0 	bl	800e470 <__assert_func>
 800e6f0:	3101      	adds	r1, #1
 800e6f2:	105b      	asrs	r3, r3, #1
 800e6f4:	e7ef      	b.n	800e6d6 <__gethex+0x132>
 800e6f6:	f100 0a14 	add.w	sl, r0, #20
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	4655      	mov	r5, sl
 800e6fe:	469b      	mov	fp, r3
 800e700:	45b1      	cmp	r9, r6
 800e702:	d337      	bcc.n	800e774 <__gethex+0x1d0>
 800e704:	f845 bb04 	str.w	fp, [r5], #4
 800e708:	eba5 050a 	sub.w	r5, r5, sl
 800e70c:	10ad      	asrs	r5, r5, #2
 800e70e:	6125      	str	r5, [r4, #16]
 800e710:	4658      	mov	r0, fp
 800e712:	f7fe faf1 	bl	800ccf8 <__hi0bits>
 800e716:	016d      	lsls	r5, r5, #5
 800e718:	f8d8 6000 	ldr.w	r6, [r8]
 800e71c:	1a2d      	subs	r5, r5, r0
 800e71e:	42b5      	cmp	r5, r6
 800e720:	dd54      	ble.n	800e7cc <__gethex+0x228>
 800e722:	1bad      	subs	r5, r5, r6
 800e724:	4629      	mov	r1, r5
 800e726:	4620      	mov	r0, r4
 800e728:	f7fe fe82 	bl	800d430 <__any_on>
 800e72c:	4681      	mov	r9, r0
 800e72e:	b178      	cbz	r0, 800e750 <__gethex+0x1ac>
 800e730:	1e6b      	subs	r3, r5, #1
 800e732:	1159      	asrs	r1, r3, #5
 800e734:	f003 021f 	and.w	r2, r3, #31
 800e738:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e73c:	f04f 0901 	mov.w	r9, #1
 800e740:	fa09 f202 	lsl.w	r2, r9, r2
 800e744:	420a      	tst	r2, r1
 800e746:	d003      	beq.n	800e750 <__gethex+0x1ac>
 800e748:	454b      	cmp	r3, r9
 800e74a:	dc36      	bgt.n	800e7ba <__gethex+0x216>
 800e74c:	f04f 0902 	mov.w	r9, #2
 800e750:	4629      	mov	r1, r5
 800e752:	4620      	mov	r0, r4
 800e754:	f7ff febe 	bl	800e4d4 <rshift>
 800e758:	442f      	add	r7, r5
 800e75a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e75e:	42bb      	cmp	r3, r7
 800e760:	da42      	bge.n	800e7e8 <__gethex+0x244>
 800e762:	9801      	ldr	r0, [sp, #4]
 800e764:	4621      	mov	r1, r4
 800e766:	f7fe fa15 	bl	800cb94 <_Bfree>
 800e76a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e76c:	2300      	movs	r3, #0
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	25a3      	movs	r5, #163	@ 0xa3
 800e772:	e793      	b.n	800e69c <__gethex+0xf8>
 800e774:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e778:	2a2e      	cmp	r2, #46	@ 0x2e
 800e77a:	d012      	beq.n	800e7a2 <__gethex+0x1fe>
 800e77c:	2b20      	cmp	r3, #32
 800e77e:	d104      	bne.n	800e78a <__gethex+0x1e6>
 800e780:	f845 bb04 	str.w	fp, [r5], #4
 800e784:	f04f 0b00 	mov.w	fp, #0
 800e788:	465b      	mov	r3, fp
 800e78a:	7830      	ldrb	r0, [r6, #0]
 800e78c:	9303      	str	r3, [sp, #12]
 800e78e:	f7ff fef3 	bl	800e578 <__hexdig_fun>
 800e792:	9b03      	ldr	r3, [sp, #12]
 800e794:	f000 000f 	and.w	r0, r0, #15
 800e798:	4098      	lsls	r0, r3
 800e79a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e79e:	3304      	adds	r3, #4
 800e7a0:	e7ae      	b.n	800e700 <__gethex+0x15c>
 800e7a2:	45b1      	cmp	r9, r6
 800e7a4:	d8ea      	bhi.n	800e77c <__gethex+0x1d8>
 800e7a6:	492b      	ldr	r1, [pc, #172]	@ (800e854 <__gethex+0x2b0>)
 800e7a8:	9303      	str	r3, [sp, #12]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff fe35 	bl	800e41c <strncmp>
 800e7b2:	9b03      	ldr	r3, [sp, #12]
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d1e1      	bne.n	800e77c <__gethex+0x1d8>
 800e7b8:	e7a2      	b.n	800e700 <__gethex+0x15c>
 800e7ba:	1ea9      	subs	r1, r5, #2
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f7fe fe37 	bl	800d430 <__any_on>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d0c2      	beq.n	800e74c <__gethex+0x1a8>
 800e7c6:	f04f 0903 	mov.w	r9, #3
 800e7ca:	e7c1      	b.n	800e750 <__gethex+0x1ac>
 800e7cc:	da09      	bge.n	800e7e2 <__gethex+0x23e>
 800e7ce:	1b75      	subs	r5, r6, r5
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	9801      	ldr	r0, [sp, #4]
 800e7d4:	462a      	mov	r2, r5
 800e7d6:	f7fe fbf5 	bl	800cfc4 <__lshift>
 800e7da:	1b7f      	subs	r7, r7, r5
 800e7dc:	4604      	mov	r4, r0
 800e7de:	f100 0a14 	add.w	sl, r0, #20
 800e7e2:	f04f 0900 	mov.w	r9, #0
 800e7e6:	e7b8      	b.n	800e75a <__gethex+0x1b6>
 800e7e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7ec:	42bd      	cmp	r5, r7
 800e7ee:	dd6f      	ble.n	800e8d0 <__gethex+0x32c>
 800e7f0:	1bed      	subs	r5, r5, r7
 800e7f2:	42ae      	cmp	r6, r5
 800e7f4:	dc34      	bgt.n	800e860 <__gethex+0x2bc>
 800e7f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d022      	beq.n	800e844 <__gethex+0x2a0>
 800e7fe:	2b03      	cmp	r3, #3
 800e800:	d024      	beq.n	800e84c <__gethex+0x2a8>
 800e802:	2b01      	cmp	r3, #1
 800e804:	d115      	bne.n	800e832 <__gethex+0x28e>
 800e806:	42ae      	cmp	r6, r5
 800e808:	d113      	bne.n	800e832 <__gethex+0x28e>
 800e80a:	2e01      	cmp	r6, #1
 800e80c:	d10b      	bne.n	800e826 <__gethex+0x282>
 800e80e:	9a02      	ldr	r2, [sp, #8]
 800e810:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e814:	6013      	str	r3, [r2, #0]
 800e816:	2301      	movs	r3, #1
 800e818:	6123      	str	r3, [r4, #16]
 800e81a:	f8ca 3000 	str.w	r3, [sl]
 800e81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e820:	2562      	movs	r5, #98	@ 0x62
 800e822:	601c      	str	r4, [r3, #0]
 800e824:	e73a      	b.n	800e69c <__gethex+0xf8>
 800e826:	1e71      	subs	r1, r6, #1
 800e828:	4620      	mov	r0, r4
 800e82a:	f7fe fe01 	bl	800d430 <__any_on>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d1ed      	bne.n	800e80e <__gethex+0x26a>
 800e832:	9801      	ldr	r0, [sp, #4]
 800e834:	4621      	mov	r1, r4
 800e836:	f7fe f9ad 	bl	800cb94 <_Bfree>
 800e83a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e83c:	2300      	movs	r3, #0
 800e83e:	6013      	str	r3, [r2, #0]
 800e840:	2550      	movs	r5, #80	@ 0x50
 800e842:	e72b      	b.n	800e69c <__gethex+0xf8>
 800e844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1f3      	bne.n	800e832 <__gethex+0x28e>
 800e84a:	e7e0      	b.n	800e80e <__gethex+0x26a>
 800e84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1dd      	bne.n	800e80e <__gethex+0x26a>
 800e852:	e7ee      	b.n	800e832 <__gethex+0x28e>
 800e854:	0800fb18 	.word	0x0800fb18
 800e858:	0800f9b2 	.word	0x0800f9b2
 800e85c:	0800fbc5 	.word	0x0800fbc5
 800e860:	1e6f      	subs	r7, r5, #1
 800e862:	f1b9 0f00 	cmp.w	r9, #0
 800e866:	d130      	bne.n	800e8ca <__gethex+0x326>
 800e868:	b127      	cbz	r7, 800e874 <__gethex+0x2d0>
 800e86a:	4639      	mov	r1, r7
 800e86c:	4620      	mov	r0, r4
 800e86e:	f7fe fddf 	bl	800d430 <__any_on>
 800e872:	4681      	mov	r9, r0
 800e874:	117a      	asrs	r2, r7, #5
 800e876:	2301      	movs	r3, #1
 800e878:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e87c:	f007 071f 	and.w	r7, r7, #31
 800e880:	40bb      	lsls	r3, r7
 800e882:	4213      	tst	r3, r2
 800e884:	4629      	mov	r1, r5
 800e886:	4620      	mov	r0, r4
 800e888:	bf18      	it	ne
 800e88a:	f049 0902 	orrne.w	r9, r9, #2
 800e88e:	f7ff fe21 	bl	800e4d4 <rshift>
 800e892:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e896:	1b76      	subs	r6, r6, r5
 800e898:	2502      	movs	r5, #2
 800e89a:	f1b9 0f00 	cmp.w	r9, #0
 800e89e:	d047      	beq.n	800e930 <__gethex+0x38c>
 800e8a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d015      	beq.n	800e8d4 <__gethex+0x330>
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	d017      	beq.n	800e8dc <__gethex+0x338>
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d109      	bne.n	800e8c4 <__gethex+0x320>
 800e8b0:	f019 0f02 	tst.w	r9, #2
 800e8b4:	d006      	beq.n	800e8c4 <__gethex+0x320>
 800e8b6:	f8da 3000 	ldr.w	r3, [sl]
 800e8ba:	ea49 0903 	orr.w	r9, r9, r3
 800e8be:	f019 0f01 	tst.w	r9, #1
 800e8c2:	d10e      	bne.n	800e8e2 <__gethex+0x33e>
 800e8c4:	f045 0510 	orr.w	r5, r5, #16
 800e8c8:	e032      	b.n	800e930 <__gethex+0x38c>
 800e8ca:	f04f 0901 	mov.w	r9, #1
 800e8ce:	e7d1      	b.n	800e874 <__gethex+0x2d0>
 800e8d0:	2501      	movs	r5, #1
 800e8d2:	e7e2      	b.n	800e89a <__gethex+0x2f6>
 800e8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8d6:	f1c3 0301 	rsb	r3, r3, #1
 800e8da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d0f0      	beq.n	800e8c4 <__gethex+0x320>
 800e8e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e8e6:	f104 0314 	add.w	r3, r4, #20
 800e8ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e8ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e8f2:	f04f 0c00 	mov.w	ip, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e900:	d01b      	beq.n	800e93a <__gethex+0x396>
 800e902:	3201      	adds	r2, #1
 800e904:	6002      	str	r2, [r0, #0]
 800e906:	2d02      	cmp	r5, #2
 800e908:	f104 0314 	add.w	r3, r4, #20
 800e90c:	d13c      	bne.n	800e988 <__gethex+0x3e4>
 800e90e:	f8d8 2000 	ldr.w	r2, [r8]
 800e912:	3a01      	subs	r2, #1
 800e914:	42b2      	cmp	r2, r6
 800e916:	d109      	bne.n	800e92c <__gethex+0x388>
 800e918:	1171      	asrs	r1, r6, #5
 800e91a:	2201      	movs	r2, #1
 800e91c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e920:	f006 061f 	and.w	r6, r6, #31
 800e924:	fa02 f606 	lsl.w	r6, r2, r6
 800e928:	421e      	tst	r6, r3
 800e92a:	d13a      	bne.n	800e9a2 <__gethex+0x3fe>
 800e92c:	f045 0520 	orr.w	r5, r5, #32
 800e930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e932:	601c      	str	r4, [r3, #0]
 800e934:	9b02      	ldr	r3, [sp, #8]
 800e936:	601f      	str	r7, [r3, #0]
 800e938:	e6b0      	b.n	800e69c <__gethex+0xf8>
 800e93a:	4299      	cmp	r1, r3
 800e93c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e940:	d8d9      	bhi.n	800e8f6 <__gethex+0x352>
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	459b      	cmp	fp, r3
 800e946:	db17      	blt.n	800e978 <__gethex+0x3d4>
 800e948:	6861      	ldr	r1, [r4, #4]
 800e94a:	9801      	ldr	r0, [sp, #4]
 800e94c:	3101      	adds	r1, #1
 800e94e:	f7fe f8e1 	bl	800cb14 <_Balloc>
 800e952:	4681      	mov	r9, r0
 800e954:	b918      	cbnz	r0, 800e95e <__gethex+0x3ba>
 800e956:	4b1a      	ldr	r3, [pc, #104]	@ (800e9c0 <__gethex+0x41c>)
 800e958:	4602      	mov	r2, r0
 800e95a:	2184      	movs	r1, #132	@ 0x84
 800e95c:	e6c5      	b.n	800e6ea <__gethex+0x146>
 800e95e:	6922      	ldr	r2, [r4, #16]
 800e960:	3202      	adds	r2, #2
 800e962:	f104 010c 	add.w	r1, r4, #12
 800e966:	0092      	lsls	r2, r2, #2
 800e968:	300c      	adds	r0, #12
 800e96a:	f7fd f9e0 	bl	800bd2e <memcpy>
 800e96e:	4621      	mov	r1, r4
 800e970:	9801      	ldr	r0, [sp, #4]
 800e972:	f7fe f90f 	bl	800cb94 <_Bfree>
 800e976:	464c      	mov	r4, r9
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e980:	6122      	str	r2, [r4, #16]
 800e982:	2201      	movs	r2, #1
 800e984:	615a      	str	r2, [r3, #20]
 800e986:	e7be      	b.n	800e906 <__gethex+0x362>
 800e988:	6922      	ldr	r2, [r4, #16]
 800e98a:	455a      	cmp	r2, fp
 800e98c:	dd0b      	ble.n	800e9a6 <__gethex+0x402>
 800e98e:	2101      	movs	r1, #1
 800e990:	4620      	mov	r0, r4
 800e992:	f7ff fd9f 	bl	800e4d4 <rshift>
 800e996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e99a:	3701      	adds	r7, #1
 800e99c:	42bb      	cmp	r3, r7
 800e99e:	f6ff aee0 	blt.w	800e762 <__gethex+0x1be>
 800e9a2:	2501      	movs	r5, #1
 800e9a4:	e7c2      	b.n	800e92c <__gethex+0x388>
 800e9a6:	f016 061f 	ands.w	r6, r6, #31
 800e9aa:	d0fa      	beq.n	800e9a2 <__gethex+0x3fe>
 800e9ac:	4453      	add	r3, sl
 800e9ae:	f1c6 0620 	rsb	r6, r6, #32
 800e9b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e9b6:	f7fe f99f 	bl	800ccf8 <__hi0bits>
 800e9ba:	42b0      	cmp	r0, r6
 800e9bc:	dbe7      	blt.n	800e98e <__gethex+0x3ea>
 800e9be:	e7f0      	b.n	800e9a2 <__gethex+0x3fe>
 800e9c0:	0800f9b2 	.word	0x0800f9b2

0800e9c4 <L_shift>:
 800e9c4:	f1c2 0208 	rsb	r2, r2, #8
 800e9c8:	0092      	lsls	r2, r2, #2
 800e9ca:	b570      	push	{r4, r5, r6, lr}
 800e9cc:	f1c2 0620 	rsb	r6, r2, #32
 800e9d0:	6843      	ldr	r3, [r0, #4]
 800e9d2:	6804      	ldr	r4, [r0, #0]
 800e9d4:	fa03 f506 	lsl.w	r5, r3, r6
 800e9d8:	432c      	orrs	r4, r5
 800e9da:	40d3      	lsrs	r3, r2
 800e9dc:	6004      	str	r4, [r0, #0]
 800e9de:	f840 3f04 	str.w	r3, [r0, #4]!
 800e9e2:	4288      	cmp	r0, r1
 800e9e4:	d3f4      	bcc.n	800e9d0 <L_shift+0xc>
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}

0800e9e8 <__match>:
 800e9e8:	b530      	push	{r4, r5, lr}
 800e9ea:	6803      	ldr	r3, [r0, #0]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9f2:	b914      	cbnz	r4, 800e9fa <__match+0x12>
 800e9f4:	6003      	str	r3, [r0, #0]
 800e9f6:	2001      	movs	r0, #1
 800e9f8:	bd30      	pop	{r4, r5, pc}
 800e9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ea02:	2d19      	cmp	r5, #25
 800ea04:	bf98      	it	ls
 800ea06:	3220      	addls	r2, #32
 800ea08:	42a2      	cmp	r2, r4
 800ea0a:	d0f0      	beq.n	800e9ee <__match+0x6>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e7f3      	b.n	800e9f8 <__match+0x10>

0800ea10 <__hexnan>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	680b      	ldr	r3, [r1, #0]
 800ea16:	6801      	ldr	r1, [r0, #0]
 800ea18:	115e      	asrs	r6, r3, #5
 800ea1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ea1e:	f013 031f 	ands.w	r3, r3, #31
 800ea22:	b087      	sub	sp, #28
 800ea24:	bf18      	it	ne
 800ea26:	3604      	addne	r6, #4
 800ea28:	2500      	movs	r5, #0
 800ea2a:	1f37      	subs	r7, r6, #4
 800ea2c:	4682      	mov	sl, r0
 800ea2e:	4690      	mov	r8, r2
 800ea30:	9301      	str	r3, [sp, #4]
 800ea32:	f846 5c04 	str.w	r5, [r6, #-4]
 800ea36:	46b9      	mov	r9, r7
 800ea38:	463c      	mov	r4, r7
 800ea3a:	9502      	str	r5, [sp, #8]
 800ea3c:	46ab      	mov	fp, r5
 800ea3e:	784a      	ldrb	r2, [r1, #1]
 800ea40:	1c4b      	adds	r3, r1, #1
 800ea42:	9303      	str	r3, [sp, #12]
 800ea44:	b342      	cbz	r2, 800ea98 <__hexnan+0x88>
 800ea46:	4610      	mov	r0, r2
 800ea48:	9105      	str	r1, [sp, #20]
 800ea4a:	9204      	str	r2, [sp, #16]
 800ea4c:	f7ff fd94 	bl	800e578 <__hexdig_fun>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d151      	bne.n	800eaf8 <__hexnan+0xe8>
 800ea54:	9a04      	ldr	r2, [sp, #16]
 800ea56:	9905      	ldr	r1, [sp, #20]
 800ea58:	2a20      	cmp	r2, #32
 800ea5a:	d818      	bhi.n	800ea8e <__hexnan+0x7e>
 800ea5c:	9b02      	ldr	r3, [sp, #8]
 800ea5e:	459b      	cmp	fp, r3
 800ea60:	dd13      	ble.n	800ea8a <__hexnan+0x7a>
 800ea62:	454c      	cmp	r4, r9
 800ea64:	d206      	bcs.n	800ea74 <__hexnan+0x64>
 800ea66:	2d07      	cmp	r5, #7
 800ea68:	dc04      	bgt.n	800ea74 <__hexnan+0x64>
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	4649      	mov	r1, r9
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f7ff ffa8 	bl	800e9c4 <L_shift>
 800ea74:	4544      	cmp	r4, r8
 800ea76:	d952      	bls.n	800eb1e <__hexnan+0x10e>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	f1a4 0904 	sub.w	r9, r4, #4
 800ea7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea82:	f8cd b008 	str.w	fp, [sp, #8]
 800ea86:	464c      	mov	r4, r9
 800ea88:	461d      	mov	r5, r3
 800ea8a:	9903      	ldr	r1, [sp, #12]
 800ea8c:	e7d7      	b.n	800ea3e <__hexnan+0x2e>
 800ea8e:	2a29      	cmp	r2, #41	@ 0x29
 800ea90:	d157      	bne.n	800eb42 <__hexnan+0x132>
 800ea92:	3102      	adds	r1, #2
 800ea94:	f8ca 1000 	str.w	r1, [sl]
 800ea98:	f1bb 0f00 	cmp.w	fp, #0
 800ea9c:	d051      	beq.n	800eb42 <__hexnan+0x132>
 800ea9e:	454c      	cmp	r4, r9
 800eaa0:	d206      	bcs.n	800eab0 <__hexnan+0xa0>
 800eaa2:	2d07      	cmp	r5, #7
 800eaa4:	dc04      	bgt.n	800eab0 <__hexnan+0xa0>
 800eaa6:	462a      	mov	r2, r5
 800eaa8:	4649      	mov	r1, r9
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f7ff ff8a 	bl	800e9c4 <L_shift>
 800eab0:	4544      	cmp	r4, r8
 800eab2:	d936      	bls.n	800eb22 <__hexnan+0x112>
 800eab4:	f1a8 0204 	sub.w	r2, r8, #4
 800eab8:	4623      	mov	r3, r4
 800eaba:	f853 1b04 	ldr.w	r1, [r3], #4
 800eabe:	f842 1f04 	str.w	r1, [r2, #4]!
 800eac2:	429f      	cmp	r7, r3
 800eac4:	d2f9      	bcs.n	800eaba <__hexnan+0xaa>
 800eac6:	1b3b      	subs	r3, r7, r4
 800eac8:	f023 0303 	bic.w	r3, r3, #3
 800eacc:	3304      	adds	r3, #4
 800eace:	3401      	adds	r4, #1
 800ead0:	3e03      	subs	r6, #3
 800ead2:	42b4      	cmp	r4, r6
 800ead4:	bf88      	it	hi
 800ead6:	2304      	movhi	r3, #4
 800ead8:	4443      	add	r3, r8
 800eada:	2200      	movs	r2, #0
 800eadc:	f843 2b04 	str.w	r2, [r3], #4
 800eae0:	429f      	cmp	r7, r3
 800eae2:	d2fb      	bcs.n	800eadc <__hexnan+0xcc>
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	b91b      	cbnz	r3, 800eaf0 <__hexnan+0xe0>
 800eae8:	4547      	cmp	r7, r8
 800eaea:	d128      	bne.n	800eb3e <__hexnan+0x12e>
 800eaec:	2301      	movs	r3, #1
 800eaee:	603b      	str	r3, [r7, #0]
 800eaf0:	2005      	movs	r0, #5
 800eaf2:	b007      	add	sp, #28
 800eaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf8:	3501      	adds	r5, #1
 800eafa:	2d08      	cmp	r5, #8
 800eafc:	f10b 0b01 	add.w	fp, fp, #1
 800eb00:	dd06      	ble.n	800eb10 <__hexnan+0x100>
 800eb02:	4544      	cmp	r4, r8
 800eb04:	d9c1      	bls.n	800ea8a <__hexnan+0x7a>
 800eb06:	2300      	movs	r3, #0
 800eb08:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb0c:	2501      	movs	r5, #1
 800eb0e:	3c04      	subs	r4, #4
 800eb10:	6822      	ldr	r2, [r4, #0]
 800eb12:	f000 000f 	and.w	r0, r0, #15
 800eb16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eb1a:	6020      	str	r0, [r4, #0]
 800eb1c:	e7b5      	b.n	800ea8a <__hexnan+0x7a>
 800eb1e:	2508      	movs	r5, #8
 800eb20:	e7b3      	b.n	800ea8a <__hexnan+0x7a>
 800eb22:	9b01      	ldr	r3, [sp, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d0dd      	beq.n	800eae4 <__hexnan+0xd4>
 800eb28:	f1c3 0320 	rsb	r3, r3, #32
 800eb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb30:	40da      	lsrs	r2, r3
 800eb32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eb36:	4013      	ands	r3, r2
 800eb38:	f846 3c04 	str.w	r3, [r6, #-4]
 800eb3c:	e7d2      	b.n	800eae4 <__hexnan+0xd4>
 800eb3e:	3f04      	subs	r7, #4
 800eb40:	e7d0      	b.n	800eae4 <__hexnan+0xd4>
 800eb42:	2004      	movs	r0, #4
 800eb44:	e7d5      	b.n	800eaf2 <__hexnan+0xe2>

0800eb46 <__ascii_mbtowc>:
 800eb46:	b082      	sub	sp, #8
 800eb48:	b901      	cbnz	r1, 800eb4c <__ascii_mbtowc+0x6>
 800eb4a:	a901      	add	r1, sp, #4
 800eb4c:	b142      	cbz	r2, 800eb60 <__ascii_mbtowc+0x1a>
 800eb4e:	b14b      	cbz	r3, 800eb64 <__ascii_mbtowc+0x1e>
 800eb50:	7813      	ldrb	r3, [r2, #0]
 800eb52:	600b      	str	r3, [r1, #0]
 800eb54:	7812      	ldrb	r2, [r2, #0]
 800eb56:	1e10      	subs	r0, r2, #0
 800eb58:	bf18      	it	ne
 800eb5a:	2001      	movne	r0, #1
 800eb5c:	b002      	add	sp, #8
 800eb5e:	4770      	bx	lr
 800eb60:	4610      	mov	r0, r2
 800eb62:	e7fb      	b.n	800eb5c <__ascii_mbtowc+0x16>
 800eb64:	f06f 0001 	mvn.w	r0, #1
 800eb68:	e7f8      	b.n	800eb5c <__ascii_mbtowc+0x16>

0800eb6a <_realloc_r>:
 800eb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6e:	4680      	mov	r8, r0
 800eb70:	4615      	mov	r5, r2
 800eb72:	460c      	mov	r4, r1
 800eb74:	b921      	cbnz	r1, 800eb80 <_realloc_r+0x16>
 800eb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	f7fd bf3e 	b.w	800c9fc <_malloc_r>
 800eb80:	b92a      	cbnz	r2, 800eb8e <_realloc_r+0x24>
 800eb82:	f7fd fec7 	bl	800c914 <_free_r>
 800eb86:	2400      	movs	r4, #0
 800eb88:	4620      	mov	r0, r4
 800eb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8e:	f000 f840 	bl	800ec12 <_malloc_usable_size_r>
 800eb92:	4285      	cmp	r5, r0
 800eb94:	4606      	mov	r6, r0
 800eb96:	d802      	bhi.n	800eb9e <_realloc_r+0x34>
 800eb98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb9c:	d8f4      	bhi.n	800eb88 <_realloc_r+0x1e>
 800eb9e:	4629      	mov	r1, r5
 800eba0:	4640      	mov	r0, r8
 800eba2:	f7fd ff2b 	bl	800c9fc <_malloc_r>
 800eba6:	4607      	mov	r7, r0
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	d0ec      	beq.n	800eb86 <_realloc_r+0x1c>
 800ebac:	42b5      	cmp	r5, r6
 800ebae:	462a      	mov	r2, r5
 800ebb0:	4621      	mov	r1, r4
 800ebb2:	bf28      	it	cs
 800ebb4:	4632      	movcs	r2, r6
 800ebb6:	f7fd f8ba 	bl	800bd2e <memcpy>
 800ebba:	4621      	mov	r1, r4
 800ebbc:	4640      	mov	r0, r8
 800ebbe:	f7fd fea9 	bl	800c914 <_free_r>
 800ebc2:	463c      	mov	r4, r7
 800ebc4:	e7e0      	b.n	800eb88 <_realloc_r+0x1e>

0800ebc6 <__ascii_wctomb>:
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4608      	mov	r0, r1
 800ebca:	b141      	cbz	r1, 800ebde <__ascii_wctomb+0x18>
 800ebcc:	2aff      	cmp	r2, #255	@ 0xff
 800ebce:	d904      	bls.n	800ebda <__ascii_wctomb+0x14>
 800ebd0:	228a      	movs	r2, #138	@ 0x8a
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd8:	4770      	bx	lr
 800ebda:	700a      	strb	r2, [r1, #0]
 800ebdc:	2001      	movs	r0, #1
 800ebde:	4770      	bx	lr

0800ebe0 <fiprintf>:
 800ebe0:	b40e      	push	{r1, r2, r3}
 800ebe2:	b503      	push	{r0, r1, lr}
 800ebe4:	4601      	mov	r1, r0
 800ebe6:	ab03      	add	r3, sp, #12
 800ebe8:	4805      	ldr	r0, [pc, #20]	@ (800ec00 <fiprintf+0x20>)
 800ebea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebee:	6800      	ldr	r0, [r0, #0]
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	f000 f83f 	bl	800ec74 <_vfiprintf_r>
 800ebf6:	b002      	add	sp, #8
 800ebf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebfc:	b003      	add	sp, #12
 800ebfe:	4770      	bx	lr
 800ec00:	20000084 	.word	0x20000084

0800ec04 <abort>:
 800ec04:	b508      	push	{r3, lr}
 800ec06:	2006      	movs	r0, #6
 800ec08:	f000 fa08 	bl	800f01c <raise>
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	f7f4 f9cb 	bl	8002fa8 <_exit>

0800ec12 <_malloc_usable_size_r>:
 800ec12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec16:	1f18      	subs	r0, r3, #4
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	bfbc      	itt	lt
 800ec1c:	580b      	ldrlt	r3, [r1, r0]
 800ec1e:	18c0      	addlt	r0, r0, r3
 800ec20:	4770      	bx	lr

0800ec22 <__sfputc_r>:
 800ec22:	6893      	ldr	r3, [r2, #8]
 800ec24:	3b01      	subs	r3, #1
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	b410      	push	{r4}
 800ec2a:	6093      	str	r3, [r2, #8]
 800ec2c:	da08      	bge.n	800ec40 <__sfputc_r+0x1e>
 800ec2e:	6994      	ldr	r4, [r2, #24]
 800ec30:	42a3      	cmp	r3, r4
 800ec32:	db01      	blt.n	800ec38 <__sfputc_r+0x16>
 800ec34:	290a      	cmp	r1, #10
 800ec36:	d103      	bne.n	800ec40 <__sfputc_r+0x1e>
 800ec38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec3c:	f000 b932 	b.w	800eea4 <__swbuf_r>
 800ec40:	6813      	ldr	r3, [r2, #0]
 800ec42:	1c58      	adds	r0, r3, #1
 800ec44:	6010      	str	r0, [r2, #0]
 800ec46:	7019      	strb	r1, [r3, #0]
 800ec48:	4608      	mov	r0, r1
 800ec4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <__sfputs_r>:
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec52:	4606      	mov	r6, r0
 800ec54:	460f      	mov	r7, r1
 800ec56:	4614      	mov	r4, r2
 800ec58:	18d5      	adds	r5, r2, r3
 800ec5a:	42ac      	cmp	r4, r5
 800ec5c:	d101      	bne.n	800ec62 <__sfputs_r+0x12>
 800ec5e:	2000      	movs	r0, #0
 800ec60:	e007      	b.n	800ec72 <__sfputs_r+0x22>
 800ec62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec66:	463a      	mov	r2, r7
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f7ff ffda 	bl	800ec22 <__sfputc_r>
 800ec6e:	1c43      	adds	r3, r0, #1
 800ec70:	d1f3      	bne.n	800ec5a <__sfputs_r+0xa>
 800ec72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec74 <_vfiprintf_r>:
 800ec74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec78:	460d      	mov	r5, r1
 800ec7a:	b09d      	sub	sp, #116	@ 0x74
 800ec7c:	4614      	mov	r4, r2
 800ec7e:	4698      	mov	r8, r3
 800ec80:	4606      	mov	r6, r0
 800ec82:	b118      	cbz	r0, 800ec8c <_vfiprintf_r+0x18>
 800ec84:	6a03      	ldr	r3, [r0, #32]
 800ec86:	b90b      	cbnz	r3, 800ec8c <_vfiprintf_r+0x18>
 800ec88:	f7fc fee2 	bl	800ba50 <__sinit>
 800ec8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec8e:	07d9      	lsls	r1, r3, #31
 800ec90:	d405      	bmi.n	800ec9e <_vfiprintf_r+0x2a>
 800ec92:	89ab      	ldrh	r3, [r5, #12]
 800ec94:	059a      	lsls	r2, r3, #22
 800ec96:	d402      	bmi.n	800ec9e <_vfiprintf_r+0x2a>
 800ec98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec9a:	f7fd f846 	bl	800bd2a <__retarget_lock_acquire_recursive>
 800ec9e:	89ab      	ldrh	r3, [r5, #12]
 800eca0:	071b      	lsls	r3, r3, #28
 800eca2:	d501      	bpl.n	800eca8 <_vfiprintf_r+0x34>
 800eca4:	692b      	ldr	r3, [r5, #16]
 800eca6:	b99b      	cbnz	r3, 800ecd0 <_vfiprintf_r+0x5c>
 800eca8:	4629      	mov	r1, r5
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f000 f938 	bl	800ef20 <__swsetup_r>
 800ecb0:	b170      	cbz	r0, 800ecd0 <_vfiprintf_r+0x5c>
 800ecb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecb4:	07dc      	lsls	r4, r3, #31
 800ecb6:	d504      	bpl.n	800ecc2 <_vfiprintf_r+0x4e>
 800ecb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecbc:	b01d      	add	sp, #116	@ 0x74
 800ecbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc2:	89ab      	ldrh	r3, [r5, #12]
 800ecc4:	0598      	lsls	r0, r3, #22
 800ecc6:	d4f7      	bmi.n	800ecb8 <_vfiprintf_r+0x44>
 800ecc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecca:	f7fd f82f 	bl	800bd2c <__retarget_lock_release_recursive>
 800ecce:	e7f3      	b.n	800ecb8 <_vfiprintf_r+0x44>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd4:	2320      	movs	r3, #32
 800ecd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecda:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecde:	2330      	movs	r3, #48	@ 0x30
 800ece0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee90 <_vfiprintf_r+0x21c>
 800ece4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ece8:	f04f 0901 	mov.w	r9, #1
 800ecec:	4623      	mov	r3, r4
 800ecee:	469a      	mov	sl, r3
 800ecf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecf4:	b10a      	cbz	r2, 800ecfa <_vfiprintf_r+0x86>
 800ecf6:	2a25      	cmp	r2, #37	@ 0x25
 800ecf8:	d1f9      	bne.n	800ecee <_vfiprintf_r+0x7a>
 800ecfa:	ebba 0b04 	subs.w	fp, sl, r4
 800ecfe:	d00b      	beq.n	800ed18 <_vfiprintf_r+0xa4>
 800ed00:	465b      	mov	r3, fp
 800ed02:	4622      	mov	r2, r4
 800ed04:	4629      	mov	r1, r5
 800ed06:	4630      	mov	r0, r6
 800ed08:	f7ff ffa2 	bl	800ec50 <__sfputs_r>
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	f000 80a7 	beq.w	800ee60 <_vfiprintf_r+0x1ec>
 800ed12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed14:	445a      	add	r2, fp
 800ed16:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed18:	f89a 3000 	ldrb.w	r3, [sl]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 809f 	beq.w	800ee60 <_vfiprintf_r+0x1ec>
 800ed22:	2300      	movs	r3, #0
 800ed24:	f04f 32ff 	mov.w	r2, #4294967295
 800ed28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed2c:	f10a 0a01 	add.w	sl, sl, #1
 800ed30:	9304      	str	r3, [sp, #16]
 800ed32:	9307      	str	r3, [sp, #28]
 800ed34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed38:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed3a:	4654      	mov	r4, sl
 800ed3c:	2205      	movs	r2, #5
 800ed3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed42:	4853      	ldr	r0, [pc, #332]	@ (800ee90 <_vfiprintf_r+0x21c>)
 800ed44:	f7f1 fa7c 	bl	8000240 <memchr>
 800ed48:	9a04      	ldr	r2, [sp, #16]
 800ed4a:	b9d8      	cbnz	r0, 800ed84 <_vfiprintf_r+0x110>
 800ed4c:	06d1      	lsls	r1, r2, #27
 800ed4e:	bf44      	itt	mi
 800ed50:	2320      	movmi	r3, #32
 800ed52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed56:	0713      	lsls	r3, r2, #28
 800ed58:	bf44      	itt	mi
 800ed5a:	232b      	movmi	r3, #43	@ 0x2b
 800ed5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed60:	f89a 3000 	ldrb.w	r3, [sl]
 800ed64:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed66:	d015      	beq.n	800ed94 <_vfiprintf_r+0x120>
 800ed68:	9a07      	ldr	r2, [sp, #28]
 800ed6a:	4654      	mov	r4, sl
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f04f 0c0a 	mov.w	ip, #10
 800ed72:	4621      	mov	r1, r4
 800ed74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed78:	3b30      	subs	r3, #48	@ 0x30
 800ed7a:	2b09      	cmp	r3, #9
 800ed7c:	d94b      	bls.n	800ee16 <_vfiprintf_r+0x1a2>
 800ed7e:	b1b0      	cbz	r0, 800edae <_vfiprintf_r+0x13a>
 800ed80:	9207      	str	r2, [sp, #28]
 800ed82:	e014      	b.n	800edae <_vfiprintf_r+0x13a>
 800ed84:	eba0 0308 	sub.w	r3, r0, r8
 800ed88:	fa09 f303 	lsl.w	r3, r9, r3
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	9304      	str	r3, [sp, #16]
 800ed90:	46a2      	mov	sl, r4
 800ed92:	e7d2      	b.n	800ed3a <_vfiprintf_r+0xc6>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	1d19      	adds	r1, r3, #4
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	9103      	str	r1, [sp, #12]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	bfbb      	ittet	lt
 800eda0:	425b      	neglt	r3, r3
 800eda2:	f042 0202 	orrlt.w	r2, r2, #2
 800eda6:	9307      	strge	r3, [sp, #28]
 800eda8:	9307      	strlt	r3, [sp, #28]
 800edaa:	bfb8      	it	lt
 800edac:	9204      	strlt	r2, [sp, #16]
 800edae:	7823      	ldrb	r3, [r4, #0]
 800edb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800edb2:	d10a      	bne.n	800edca <_vfiprintf_r+0x156>
 800edb4:	7863      	ldrb	r3, [r4, #1]
 800edb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800edb8:	d132      	bne.n	800ee20 <_vfiprintf_r+0x1ac>
 800edba:	9b03      	ldr	r3, [sp, #12]
 800edbc:	1d1a      	adds	r2, r3, #4
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	9203      	str	r2, [sp, #12]
 800edc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800edc6:	3402      	adds	r4, #2
 800edc8:	9305      	str	r3, [sp, #20]
 800edca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eea0 <_vfiprintf_r+0x22c>
 800edce:	7821      	ldrb	r1, [r4, #0]
 800edd0:	2203      	movs	r2, #3
 800edd2:	4650      	mov	r0, sl
 800edd4:	f7f1 fa34 	bl	8000240 <memchr>
 800edd8:	b138      	cbz	r0, 800edea <_vfiprintf_r+0x176>
 800edda:	9b04      	ldr	r3, [sp, #16]
 800eddc:	eba0 000a 	sub.w	r0, r0, sl
 800ede0:	2240      	movs	r2, #64	@ 0x40
 800ede2:	4082      	lsls	r2, r0
 800ede4:	4313      	orrs	r3, r2
 800ede6:	3401      	adds	r4, #1
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edee:	4829      	ldr	r0, [pc, #164]	@ (800ee94 <_vfiprintf_r+0x220>)
 800edf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edf4:	2206      	movs	r2, #6
 800edf6:	f7f1 fa23 	bl	8000240 <memchr>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d03f      	beq.n	800ee7e <_vfiprintf_r+0x20a>
 800edfe:	4b26      	ldr	r3, [pc, #152]	@ (800ee98 <_vfiprintf_r+0x224>)
 800ee00:	bb1b      	cbnz	r3, 800ee4a <_vfiprintf_r+0x1d6>
 800ee02:	9b03      	ldr	r3, [sp, #12]
 800ee04:	3307      	adds	r3, #7
 800ee06:	f023 0307 	bic.w	r3, r3, #7
 800ee0a:	3308      	adds	r3, #8
 800ee0c:	9303      	str	r3, [sp, #12]
 800ee0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee10:	443b      	add	r3, r7
 800ee12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee14:	e76a      	b.n	800ecec <_vfiprintf_r+0x78>
 800ee16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	2001      	movs	r0, #1
 800ee1e:	e7a8      	b.n	800ed72 <_vfiprintf_r+0xfe>
 800ee20:	2300      	movs	r3, #0
 800ee22:	3401      	adds	r4, #1
 800ee24:	9305      	str	r3, [sp, #20]
 800ee26:	4619      	mov	r1, r3
 800ee28:	f04f 0c0a 	mov.w	ip, #10
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee32:	3a30      	subs	r2, #48	@ 0x30
 800ee34:	2a09      	cmp	r2, #9
 800ee36:	d903      	bls.n	800ee40 <_vfiprintf_r+0x1cc>
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d0c6      	beq.n	800edca <_vfiprintf_r+0x156>
 800ee3c:	9105      	str	r1, [sp, #20]
 800ee3e:	e7c4      	b.n	800edca <_vfiprintf_r+0x156>
 800ee40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee44:	4604      	mov	r4, r0
 800ee46:	2301      	movs	r3, #1
 800ee48:	e7f0      	b.n	800ee2c <_vfiprintf_r+0x1b8>
 800ee4a:	ab03      	add	r3, sp, #12
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	462a      	mov	r2, r5
 800ee50:	4b12      	ldr	r3, [pc, #72]	@ (800ee9c <_vfiprintf_r+0x228>)
 800ee52:	a904      	add	r1, sp, #16
 800ee54:	4630      	mov	r0, r6
 800ee56:	f7fb ffbb 	bl	800add0 <_printf_float>
 800ee5a:	4607      	mov	r7, r0
 800ee5c:	1c78      	adds	r0, r7, #1
 800ee5e:	d1d6      	bne.n	800ee0e <_vfiprintf_r+0x19a>
 800ee60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee62:	07d9      	lsls	r1, r3, #31
 800ee64:	d405      	bmi.n	800ee72 <_vfiprintf_r+0x1fe>
 800ee66:	89ab      	ldrh	r3, [r5, #12]
 800ee68:	059a      	lsls	r2, r3, #22
 800ee6a:	d402      	bmi.n	800ee72 <_vfiprintf_r+0x1fe>
 800ee6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee6e:	f7fc ff5d 	bl	800bd2c <__retarget_lock_release_recursive>
 800ee72:	89ab      	ldrh	r3, [r5, #12]
 800ee74:	065b      	lsls	r3, r3, #25
 800ee76:	f53f af1f 	bmi.w	800ecb8 <_vfiprintf_r+0x44>
 800ee7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee7c:	e71e      	b.n	800ecbc <_vfiprintf_r+0x48>
 800ee7e:	ab03      	add	r3, sp, #12
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	462a      	mov	r2, r5
 800ee84:	4b05      	ldr	r3, [pc, #20]	@ (800ee9c <_vfiprintf_r+0x228>)
 800ee86:	a904      	add	r1, sp, #16
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f7fc fa29 	bl	800b2e0 <_printf_i>
 800ee8e:	e7e4      	b.n	800ee5a <_vfiprintf_r+0x1e6>
 800ee90:	0800fb70 	.word	0x0800fb70
 800ee94:	0800fb7a 	.word	0x0800fb7a
 800ee98:	0800add1 	.word	0x0800add1
 800ee9c:	0800ec51 	.word	0x0800ec51
 800eea0:	0800fb76 	.word	0x0800fb76

0800eea4 <__swbuf_r>:
 800eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea6:	460e      	mov	r6, r1
 800eea8:	4614      	mov	r4, r2
 800eeaa:	4605      	mov	r5, r0
 800eeac:	b118      	cbz	r0, 800eeb6 <__swbuf_r+0x12>
 800eeae:	6a03      	ldr	r3, [r0, #32]
 800eeb0:	b90b      	cbnz	r3, 800eeb6 <__swbuf_r+0x12>
 800eeb2:	f7fc fdcd 	bl	800ba50 <__sinit>
 800eeb6:	69a3      	ldr	r3, [r4, #24]
 800eeb8:	60a3      	str	r3, [r4, #8]
 800eeba:	89a3      	ldrh	r3, [r4, #12]
 800eebc:	071a      	lsls	r2, r3, #28
 800eebe:	d501      	bpl.n	800eec4 <__swbuf_r+0x20>
 800eec0:	6923      	ldr	r3, [r4, #16]
 800eec2:	b943      	cbnz	r3, 800eed6 <__swbuf_r+0x32>
 800eec4:	4621      	mov	r1, r4
 800eec6:	4628      	mov	r0, r5
 800eec8:	f000 f82a 	bl	800ef20 <__swsetup_r>
 800eecc:	b118      	cbz	r0, 800eed6 <__swbuf_r+0x32>
 800eece:	f04f 37ff 	mov.w	r7, #4294967295
 800eed2:	4638      	mov	r0, r7
 800eed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	6922      	ldr	r2, [r4, #16]
 800eeda:	1a98      	subs	r0, r3, r2
 800eedc:	6963      	ldr	r3, [r4, #20]
 800eede:	b2f6      	uxtb	r6, r6
 800eee0:	4283      	cmp	r3, r0
 800eee2:	4637      	mov	r7, r6
 800eee4:	dc05      	bgt.n	800eef2 <__swbuf_r+0x4e>
 800eee6:	4621      	mov	r1, r4
 800eee8:	4628      	mov	r0, r5
 800eeea:	f7ff fa55 	bl	800e398 <_fflush_r>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d1ed      	bne.n	800eece <__swbuf_r+0x2a>
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	3b01      	subs	r3, #1
 800eef6:	60a3      	str	r3, [r4, #8]
 800eef8:	6823      	ldr	r3, [r4, #0]
 800eefa:	1c5a      	adds	r2, r3, #1
 800eefc:	6022      	str	r2, [r4, #0]
 800eefe:	701e      	strb	r6, [r3, #0]
 800ef00:	6962      	ldr	r2, [r4, #20]
 800ef02:	1c43      	adds	r3, r0, #1
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d004      	beq.n	800ef12 <__swbuf_r+0x6e>
 800ef08:	89a3      	ldrh	r3, [r4, #12]
 800ef0a:	07db      	lsls	r3, r3, #31
 800ef0c:	d5e1      	bpl.n	800eed2 <__swbuf_r+0x2e>
 800ef0e:	2e0a      	cmp	r6, #10
 800ef10:	d1df      	bne.n	800eed2 <__swbuf_r+0x2e>
 800ef12:	4621      	mov	r1, r4
 800ef14:	4628      	mov	r0, r5
 800ef16:	f7ff fa3f 	bl	800e398 <_fflush_r>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d0d9      	beq.n	800eed2 <__swbuf_r+0x2e>
 800ef1e:	e7d6      	b.n	800eece <__swbuf_r+0x2a>

0800ef20 <__swsetup_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4b29      	ldr	r3, [pc, #164]	@ (800efc8 <__swsetup_r+0xa8>)
 800ef24:	4605      	mov	r5, r0
 800ef26:	6818      	ldr	r0, [r3, #0]
 800ef28:	460c      	mov	r4, r1
 800ef2a:	b118      	cbz	r0, 800ef34 <__swsetup_r+0x14>
 800ef2c:	6a03      	ldr	r3, [r0, #32]
 800ef2e:	b90b      	cbnz	r3, 800ef34 <__swsetup_r+0x14>
 800ef30:	f7fc fd8e 	bl	800ba50 <__sinit>
 800ef34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef38:	0719      	lsls	r1, r3, #28
 800ef3a:	d422      	bmi.n	800ef82 <__swsetup_r+0x62>
 800ef3c:	06da      	lsls	r2, r3, #27
 800ef3e:	d407      	bmi.n	800ef50 <__swsetup_r+0x30>
 800ef40:	2209      	movs	r2, #9
 800ef42:	602a      	str	r2, [r5, #0]
 800ef44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef48:	81a3      	strh	r3, [r4, #12]
 800ef4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef4e:	e033      	b.n	800efb8 <__swsetup_r+0x98>
 800ef50:	0758      	lsls	r0, r3, #29
 800ef52:	d512      	bpl.n	800ef7a <__swsetup_r+0x5a>
 800ef54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef56:	b141      	cbz	r1, 800ef6a <__swsetup_r+0x4a>
 800ef58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef5c:	4299      	cmp	r1, r3
 800ef5e:	d002      	beq.n	800ef66 <__swsetup_r+0x46>
 800ef60:	4628      	mov	r0, r5
 800ef62:	f7fd fcd7 	bl	800c914 <_free_r>
 800ef66:	2300      	movs	r3, #0
 800ef68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef70:	81a3      	strh	r3, [r4, #12]
 800ef72:	2300      	movs	r3, #0
 800ef74:	6063      	str	r3, [r4, #4]
 800ef76:	6923      	ldr	r3, [r4, #16]
 800ef78:	6023      	str	r3, [r4, #0]
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	f043 0308 	orr.w	r3, r3, #8
 800ef80:	81a3      	strh	r3, [r4, #12]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	b94b      	cbnz	r3, 800ef9a <__swsetup_r+0x7a>
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef90:	d003      	beq.n	800ef9a <__swsetup_r+0x7a>
 800ef92:	4621      	mov	r1, r4
 800ef94:	4628      	mov	r0, r5
 800ef96:	f000 f883 	bl	800f0a0 <__smakebuf_r>
 800ef9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef9e:	f013 0201 	ands.w	r2, r3, #1
 800efa2:	d00a      	beq.n	800efba <__swsetup_r+0x9a>
 800efa4:	2200      	movs	r2, #0
 800efa6:	60a2      	str	r2, [r4, #8]
 800efa8:	6962      	ldr	r2, [r4, #20]
 800efaa:	4252      	negs	r2, r2
 800efac:	61a2      	str	r2, [r4, #24]
 800efae:	6922      	ldr	r2, [r4, #16]
 800efb0:	b942      	cbnz	r2, 800efc4 <__swsetup_r+0xa4>
 800efb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800efb6:	d1c5      	bne.n	800ef44 <__swsetup_r+0x24>
 800efb8:	bd38      	pop	{r3, r4, r5, pc}
 800efba:	0799      	lsls	r1, r3, #30
 800efbc:	bf58      	it	pl
 800efbe:	6962      	ldrpl	r2, [r4, #20]
 800efc0:	60a2      	str	r2, [r4, #8]
 800efc2:	e7f4      	b.n	800efae <__swsetup_r+0x8e>
 800efc4:	2000      	movs	r0, #0
 800efc6:	e7f7      	b.n	800efb8 <__swsetup_r+0x98>
 800efc8:	20000084 	.word	0x20000084

0800efcc <_raise_r>:
 800efcc:	291f      	cmp	r1, #31
 800efce:	b538      	push	{r3, r4, r5, lr}
 800efd0:	4605      	mov	r5, r0
 800efd2:	460c      	mov	r4, r1
 800efd4:	d904      	bls.n	800efe0 <_raise_r+0x14>
 800efd6:	2316      	movs	r3, #22
 800efd8:	6003      	str	r3, [r0, #0]
 800efda:	f04f 30ff 	mov.w	r0, #4294967295
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efe2:	b112      	cbz	r2, 800efea <_raise_r+0x1e>
 800efe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efe8:	b94b      	cbnz	r3, 800effe <_raise_r+0x32>
 800efea:	4628      	mov	r0, r5
 800efec:	f000 f830 	bl	800f050 <_getpid_r>
 800eff0:	4622      	mov	r2, r4
 800eff2:	4601      	mov	r1, r0
 800eff4:	4628      	mov	r0, r5
 800eff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800effa:	f000 b817 	b.w	800f02c <_kill_r>
 800effe:	2b01      	cmp	r3, #1
 800f000:	d00a      	beq.n	800f018 <_raise_r+0x4c>
 800f002:	1c59      	adds	r1, r3, #1
 800f004:	d103      	bne.n	800f00e <_raise_r+0x42>
 800f006:	2316      	movs	r3, #22
 800f008:	6003      	str	r3, [r0, #0]
 800f00a:	2001      	movs	r0, #1
 800f00c:	e7e7      	b.n	800efde <_raise_r+0x12>
 800f00e:	2100      	movs	r1, #0
 800f010:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f014:	4620      	mov	r0, r4
 800f016:	4798      	blx	r3
 800f018:	2000      	movs	r0, #0
 800f01a:	e7e0      	b.n	800efde <_raise_r+0x12>

0800f01c <raise>:
 800f01c:	4b02      	ldr	r3, [pc, #8]	@ (800f028 <raise+0xc>)
 800f01e:	4601      	mov	r1, r0
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f7ff bfd3 	b.w	800efcc <_raise_r>
 800f026:	bf00      	nop
 800f028:	20000084 	.word	0x20000084

0800f02c <_kill_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	4d07      	ldr	r5, [pc, #28]	@ (800f04c <_kill_r+0x20>)
 800f030:	2300      	movs	r3, #0
 800f032:	4604      	mov	r4, r0
 800f034:	4608      	mov	r0, r1
 800f036:	4611      	mov	r1, r2
 800f038:	602b      	str	r3, [r5, #0]
 800f03a:	f7f3 ffa5 	bl	8002f88 <_kill>
 800f03e:	1c43      	adds	r3, r0, #1
 800f040:	d102      	bne.n	800f048 <_kill_r+0x1c>
 800f042:	682b      	ldr	r3, [r5, #0]
 800f044:	b103      	cbz	r3, 800f048 <_kill_r+0x1c>
 800f046:	6023      	str	r3, [r4, #0]
 800f048:	bd38      	pop	{r3, r4, r5, pc}
 800f04a:	bf00      	nop
 800f04c:	200055d0 	.word	0x200055d0

0800f050 <_getpid_r>:
 800f050:	f7f3 bf92 	b.w	8002f78 <_getpid>

0800f054 <__swhatbuf_r>:
 800f054:	b570      	push	{r4, r5, r6, lr}
 800f056:	460c      	mov	r4, r1
 800f058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f05c:	2900      	cmp	r1, #0
 800f05e:	b096      	sub	sp, #88	@ 0x58
 800f060:	4615      	mov	r5, r2
 800f062:	461e      	mov	r6, r3
 800f064:	da0d      	bge.n	800f082 <__swhatbuf_r+0x2e>
 800f066:	89a3      	ldrh	r3, [r4, #12]
 800f068:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f06c:	f04f 0100 	mov.w	r1, #0
 800f070:	bf14      	ite	ne
 800f072:	2340      	movne	r3, #64	@ 0x40
 800f074:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f078:	2000      	movs	r0, #0
 800f07a:	6031      	str	r1, [r6, #0]
 800f07c:	602b      	str	r3, [r5, #0]
 800f07e:	b016      	add	sp, #88	@ 0x58
 800f080:	bd70      	pop	{r4, r5, r6, pc}
 800f082:	466a      	mov	r2, sp
 800f084:	f000 f848 	bl	800f118 <_fstat_r>
 800f088:	2800      	cmp	r0, #0
 800f08a:	dbec      	blt.n	800f066 <__swhatbuf_r+0x12>
 800f08c:	9901      	ldr	r1, [sp, #4]
 800f08e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f092:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f096:	4259      	negs	r1, r3
 800f098:	4159      	adcs	r1, r3
 800f09a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f09e:	e7eb      	b.n	800f078 <__swhatbuf_r+0x24>

0800f0a0 <__smakebuf_r>:
 800f0a0:	898b      	ldrh	r3, [r1, #12]
 800f0a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0a4:	079d      	lsls	r5, r3, #30
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	d507      	bpl.n	800f0bc <__smakebuf_r+0x1c>
 800f0ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	6123      	str	r3, [r4, #16]
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	6163      	str	r3, [r4, #20]
 800f0b8:	b003      	add	sp, #12
 800f0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0bc:	ab01      	add	r3, sp, #4
 800f0be:	466a      	mov	r2, sp
 800f0c0:	f7ff ffc8 	bl	800f054 <__swhatbuf_r>
 800f0c4:	9f00      	ldr	r7, [sp, #0]
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	4639      	mov	r1, r7
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f7fd fc96 	bl	800c9fc <_malloc_r>
 800f0d0:	b948      	cbnz	r0, 800f0e6 <__smakebuf_r+0x46>
 800f0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0d6:	059a      	lsls	r2, r3, #22
 800f0d8:	d4ee      	bmi.n	800f0b8 <__smakebuf_r+0x18>
 800f0da:	f023 0303 	bic.w	r3, r3, #3
 800f0de:	f043 0302 	orr.w	r3, r3, #2
 800f0e2:	81a3      	strh	r3, [r4, #12]
 800f0e4:	e7e2      	b.n	800f0ac <__smakebuf_r+0xc>
 800f0e6:	89a3      	ldrh	r3, [r4, #12]
 800f0e8:	6020      	str	r0, [r4, #0]
 800f0ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0ee:	81a3      	strh	r3, [r4, #12]
 800f0f0:	9b01      	ldr	r3, [sp, #4]
 800f0f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0f6:	b15b      	cbz	r3, 800f110 <__smakebuf_r+0x70>
 800f0f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	f000 f81d 	bl	800f13c <_isatty_r>
 800f102:	b128      	cbz	r0, 800f110 <__smakebuf_r+0x70>
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	f023 0303 	bic.w	r3, r3, #3
 800f10a:	f043 0301 	orr.w	r3, r3, #1
 800f10e:	81a3      	strh	r3, [r4, #12]
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	431d      	orrs	r5, r3
 800f114:	81a5      	strh	r5, [r4, #12]
 800f116:	e7cf      	b.n	800f0b8 <__smakebuf_r+0x18>

0800f118 <_fstat_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4d07      	ldr	r5, [pc, #28]	@ (800f138 <_fstat_r+0x20>)
 800f11c:	2300      	movs	r3, #0
 800f11e:	4604      	mov	r4, r0
 800f120:	4608      	mov	r0, r1
 800f122:	4611      	mov	r1, r2
 800f124:	602b      	str	r3, [r5, #0]
 800f126:	f7f3 ff8f 	bl	8003048 <_fstat>
 800f12a:	1c43      	adds	r3, r0, #1
 800f12c:	d102      	bne.n	800f134 <_fstat_r+0x1c>
 800f12e:	682b      	ldr	r3, [r5, #0]
 800f130:	b103      	cbz	r3, 800f134 <_fstat_r+0x1c>
 800f132:	6023      	str	r3, [r4, #0]
 800f134:	bd38      	pop	{r3, r4, r5, pc}
 800f136:	bf00      	nop
 800f138:	200055d0 	.word	0x200055d0

0800f13c <_isatty_r>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4d06      	ldr	r5, [pc, #24]	@ (800f158 <_isatty_r+0x1c>)
 800f140:	2300      	movs	r3, #0
 800f142:	4604      	mov	r4, r0
 800f144:	4608      	mov	r0, r1
 800f146:	602b      	str	r3, [r5, #0]
 800f148:	f7f3 ff8e 	bl	8003068 <_isatty>
 800f14c:	1c43      	adds	r3, r0, #1
 800f14e:	d102      	bne.n	800f156 <_isatty_r+0x1a>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	b103      	cbz	r3, 800f156 <_isatty_r+0x1a>
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	200055d0 	.word	0x200055d0

0800f15c <checkint>:
 800f15c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f160:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800f164:	429a      	cmp	r2, r3
 800f166:	b570      	push	{r4, r5, r6, lr}
 800f168:	dd2a      	ble.n	800f1c0 <checkint+0x64>
 800f16a:	f240 4333 	movw	r3, #1075	@ 0x433
 800f16e:	429a      	cmp	r2, r3
 800f170:	dc24      	bgt.n	800f1bc <checkint+0x60>
 800f172:	1a9b      	subs	r3, r3, r2
 800f174:	f1a3 0620 	sub.w	r6, r3, #32
 800f178:	f04f 32ff 	mov.w	r2, #4294967295
 800f17c:	fa02 f403 	lsl.w	r4, r2, r3
 800f180:	fa02 f606 	lsl.w	r6, r2, r6
 800f184:	f1c3 0520 	rsb	r5, r3, #32
 800f188:	fa22 f505 	lsr.w	r5, r2, r5
 800f18c:	4334      	orrs	r4, r6
 800f18e:	432c      	orrs	r4, r5
 800f190:	409a      	lsls	r2, r3
 800f192:	ea20 0202 	bic.w	r2, r0, r2
 800f196:	ea21 0404 	bic.w	r4, r1, r4
 800f19a:	4322      	orrs	r2, r4
 800f19c:	f1a3 0420 	sub.w	r4, r3, #32
 800f1a0:	f1c3 0220 	rsb	r2, r3, #32
 800f1a4:	d10c      	bne.n	800f1c0 <checkint+0x64>
 800f1a6:	40d8      	lsrs	r0, r3
 800f1a8:	fa01 f302 	lsl.w	r3, r1, r2
 800f1ac:	4318      	orrs	r0, r3
 800f1ae:	40e1      	lsrs	r1, r4
 800f1b0:	4308      	orrs	r0, r1
 800f1b2:	f000 0001 	and.w	r0, r0, #1
 800f1b6:	f1d0 0002 	rsbs	r0, r0, #2
 800f1ba:	bd70      	pop	{r4, r5, r6, pc}
 800f1bc:	2002      	movs	r0, #2
 800f1be:	e7fc      	b.n	800f1ba <checkint+0x5e>
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	e7fa      	b.n	800f1ba <checkint+0x5e>
 800f1c4:	0000      	movs	r0, r0
	...

0800f1c8 <pow>:
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	ee10 4a90 	vmov	r4, s1
 800f1d0:	ed2d 8b0a 	vpush	{d8-d12}
 800f1d4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800f1d8:	ee11 aa90 	vmov	sl, s3
 800f1dc:	f108 32ff 	add.w	r2, r8, #4294967295
 800f1e0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	ee10 5a10 	vmov	r5, s0
 800f1ea:	ee11 0a10 	vmov	r0, s2
 800f1ee:	b087      	sub	sp, #28
 800f1f0:	46c4      	mov	ip, r8
 800f1f2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800f1f6:	d806      	bhi.n	800f206 <pow+0x3e>
 800f1f8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800f1fc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800f200:	2b7f      	cmp	r3, #127	@ 0x7f
 800f202:	f240 8157 	bls.w	800f4b4 <pow+0x2ec>
 800f206:	1802      	adds	r2, r0, r0
 800f208:	eb4a 010a 	adc.w	r1, sl, sl
 800f20c:	f06f 0b01 	mvn.w	fp, #1
 800f210:	1e57      	subs	r7, r2, #1
 800f212:	f141 33ff 	adc.w	r3, r1, #4294967295
 800f216:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800f21a:	45bb      	cmp	fp, r7
 800f21c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800f220:	d242      	bcs.n	800f2a8 <pow+0xe0>
 800f222:	ea52 0301 	orrs.w	r3, r2, r1
 800f226:	f04f 0300 	mov.w	r3, #0
 800f22a:	d10c      	bne.n	800f246 <pow+0x7e>
 800f22c:	196d      	adds	r5, r5, r5
 800f22e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800f232:	4164      	adcs	r4, r4
 800f234:	42ab      	cmp	r3, r5
 800f236:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f23a:	41a3      	sbcs	r3, r4
 800f23c:	f0c0 808f 	bcc.w	800f35e <pow+0x196>
 800f240:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f244:	e02b      	b.n	800f29e <pow+0xd6>
 800f246:	4ed4      	ldr	r6, [pc, #848]	@ (800f598 <pow+0x3d0>)
 800f248:	42b4      	cmp	r4, r6
 800f24a:	bf08      	it	eq
 800f24c:	429d      	cmpeq	r5, r3
 800f24e:	d109      	bne.n	800f264 <pow+0x9c>
 800f250:	1800      	adds	r0, r0, r0
 800f252:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800f256:	eb4a 0a0a 	adc.w	sl, sl, sl
 800f25a:	4283      	cmp	r3, r0
 800f25c:	4bcf      	ldr	r3, [pc, #828]	@ (800f59c <pow+0x3d4>)
 800f25e:	eb73 030a 	sbcs.w	r3, r3, sl
 800f262:	e7eb      	b.n	800f23c <pow+0x74>
 800f264:	196d      	adds	r5, r5, r5
 800f266:	48ce      	ldr	r0, [pc, #824]	@ (800f5a0 <pow+0x3d8>)
 800f268:	4164      	adcs	r4, r4
 800f26a:	42ab      	cmp	r3, r5
 800f26c:	eb70 0604 	sbcs.w	r6, r0, r4
 800f270:	d375      	bcc.n	800f35e <pow+0x196>
 800f272:	4281      	cmp	r1, r0
 800f274:	bf08      	it	eq
 800f276:	429a      	cmpeq	r2, r3
 800f278:	d171      	bne.n	800f35e <pow+0x196>
 800f27a:	4aca      	ldr	r2, [pc, #808]	@ (800f5a4 <pow+0x3dc>)
 800f27c:	4294      	cmp	r4, r2
 800f27e:	bf08      	it	eq
 800f280:	429d      	cmpeq	r5, r3
 800f282:	d0dd      	beq.n	800f240 <pow+0x78>
 800f284:	4294      	cmp	r4, r2
 800f286:	ea6f 0a0a 	mvn.w	sl, sl
 800f28a:	bf34      	ite	cc
 800f28c:	2400      	movcc	r4, #0
 800f28e:	2401      	movcs	r4, #1
 800f290:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800f294:	4554      	cmp	r4, sl
 800f296:	f040 81dc 	bne.w	800f652 <pow+0x48a>
 800f29a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800f29e:	b007      	add	sp, #28
 800f2a0:	ecbd 8b0a 	vpop	{d8-d12}
 800f2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a8:	196f      	adds	r7, r5, r5
 800f2aa:	eb44 0904 	adc.w	r9, r4, r4
 800f2ae:	1e7a      	subs	r2, r7, #1
 800f2b0:	f169 0300 	sbc.w	r3, r9, #0
 800f2b4:	4593      	cmp	fp, r2
 800f2b6:	eb7e 0303 	sbcs.w	r3, lr, r3
 800f2ba:	d225      	bcs.n	800f308 <pow+0x140>
 800f2bc:	ee20 0b00 	vmul.f64	d0, d0, d0
 800f2c0:	2c00      	cmp	r4, #0
 800f2c2:	da13      	bge.n	800f2ec <pow+0x124>
 800f2c4:	4651      	mov	r1, sl
 800f2c6:	f7ff ff49 	bl	800f15c <checkint>
 800f2ca:	2801      	cmp	r0, #1
 800f2cc:	d10e      	bne.n	800f2ec <pow+0x124>
 800f2ce:	eeb1 0b40 	vneg.f64	d0, d0
 800f2d2:	ea57 0909 	orrs.w	r9, r7, r9
 800f2d6:	d10b      	bne.n	800f2f0 <pow+0x128>
 800f2d8:	f1ba 0f00 	cmp.w	sl, #0
 800f2dc:	dadf      	bge.n	800f29e <pow+0xd6>
 800f2de:	b007      	add	sp, #28
 800f2e0:	ecbd 8b0a 	vpop	{d8-d12}
 800f2e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e8:	f000 b9ee 	b.w	800f6c8 <__math_divzero>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	e7f0      	b.n	800f2d2 <pow+0x10a>
 800f2f0:	f1ba 0f00 	cmp.w	sl, #0
 800f2f4:	dad3      	bge.n	800f29e <pow+0xd6>
 800f2f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f2fa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f2fe:	ed8d 7b00 	vstr	d7, [sp]
 800f302:	ed9d 0b00 	vldr	d0, [sp]
 800f306:	e7ca      	b.n	800f29e <pow+0xd6>
 800f308:	2c00      	cmp	r4, #0
 800f30a:	da2b      	bge.n	800f364 <pow+0x19c>
 800f30c:	4651      	mov	r1, sl
 800f30e:	f7ff ff25 	bl	800f15c <checkint>
 800f312:	b930      	cbnz	r0, 800f322 <pow+0x15a>
 800f314:	b007      	add	sp, #28
 800f316:	ecbd 8b0a 	vpop	{d8-d12}
 800f31a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31e:	f000 b9eb 	b.w	800f6f8 <__math_invalid>
 800f322:	1e41      	subs	r1, r0, #1
 800f324:	4248      	negs	r0, r1
 800f326:	4148      	adcs	r0, r1
 800f328:	0480      	lsls	r0, r0, #18
 800f32a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f32e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800f332:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800f336:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800f33a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f33c:	d92d      	bls.n	800f39a <pow+0x1d2>
 800f33e:	4b96      	ldr	r3, [pc, #600]	@ (800f598 <pow+0x3d0>)
 800f340:	2000      	movs	r0, #0
 800f342:	429c      	cmp	r4, r3
 800f344:	bf08      	it	eq
 800f346:	4285      	cmpeq	r5, r0
 800f348:	f43f af7a 	beq.w	800f240 <pow+0x78>
 800f34c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800f350:	428a      	cmp	r2, r1
 800f352:	d80c      	bhi.n	800f36e <pow+0x1a6>
 800f354:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f358:	42a8      	cmp	r0, r5
 800f35a:	41a3      	sbcs	r3, r4
 800f35c:	d204      	bcs.n	800f368 <pow+0x1a0>
 800f35e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800f362:	e79c      	b.n	800f29e <pow+0xd6>
 800f364:	2000      	movs	r0, #0
 800f366:	e7e4      	b.n	800f332 <pow+0x16a>
 800f368:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f36c:	e797      	b.n	800f29e <pow+0xd6>
 800f36e:	2d01      	cmp	r5, #1
 800f370:	eb74 0303 	sbcs.w	r3, r4, r3
 800f374:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f378:	bf34      	ite	cc
 800f37a:	2301      	movcc	r3, #1
 800f37c:	2300      	movcs	r3, #0
 800f37e:	4296      	cmp	r6, r2
 800f380:	bf8c      	ite	hi
 800f382:	2600      	movhi	r6, #0
 800f384:	2601      	movls	r6, #1
 800f386:	42b3      	cmp	r3, r6
 800f388:	f000 809c 	beq.w	800f4c4 <pow+0x2fc>
 800f38c:	b007      	add	sp, #28
 800f38e:	ecbd 8b0a 	vpop	{d8-d12}
 800f392:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f396:	f000 b98f 	b.w	800f6b8 <__math_oflow>
 800f39a:	f1bc 0f00 	cmp.w	ip, #0
 800f39e:	d10a      	bne.n	800f3b6 <pow+0x1ee>
 800f3a0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800f588 <pow+0x3c0>
 800f3a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f3a8:	ec53 2b17 	vmov	r2, r3, d7
 800f3ac:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800f3b0:	4615      	mov	r5, r2
 800f3b2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800f3b6:	4a7c      	ldr	r2, [pc, #496]	@ (800f5a8 <pow+0x3e0>)
 800f3b8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800f3bc:	4422      	add	r2, r4
 800f3be:	1513      	asrs	r3, r2, #20
 800f3c0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800f3c4:	ee03 3a10 	vmov	s6, r3
 800f3c8:	0d12      	lsrs	r2, r2, #20
 800f3ca:	4b78      	ldr	r3, [pc, #480]	@ (800f5ac <pow+0x3e4>)
 800f3cc:	0512      	lsls	r2, r2, #20
 800f3ce:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800f3d2:	1aa7      	subs	r7, r4, r2
 800f3d4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800f3d8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800f3dc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800f3e0:	1e2e      	subs	r6, r5, #0
 800f3e2:	ec47 6b14 	vmov	d4, r6, r7
 800f3e6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800f3ea:	eea4 6b05 	vfma.f64	d6, d4, d5
 800f3ee:	ed93 5b00 	vldr	d5, [r3]
 800f3f2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800f3f6:	eea3 2b05 	vfma.f64	d2, d3, d5
 800f3fa:	ed93 5b02 	vldr	d5, [r3, #8]
 800f3fe:	ee36 4b02 	vadd.f64	d4, d6, d2
 800f402:	ee32 2b44 	vsub.f64	d2, d2, d4
 800f406:	eea3 7b05 	vfma.f64	d7, d3, d5
 800f40a:	ed93 5b04 	vldr	d5, [r3, #16]
 800f40e:	ee32 2b06 	vadd.f64	d2, d2, d6
 800f412:	ee37 7b02 	vadd.f64	d7, d7, d2
 800f416:	ee26 5b05 	vmul.f64	d5, d6, d5
 800f41a:	ee26 0b05 	vmul.f64	d0, d6, d5
 800f41e:	ee34 8b00 	vadd.f64	d8, d4, d0
 800f422:	eeb0 9b40 	vmov.f64	d9, d0
 800f426:	ee34 4b48 	vsub.f64	d4, d4, d8
 800f42a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800f42e:	ee34 ab00 	vadd.f64	d10, d4, d0
 800f432:	ed93 5b06 	vldr	d5, [r3, #24]
 800f436:	ee26 bb00 	vmul.f64	d11, d6, d0
 800f43a:	ee37 7b09 	vadd.f64	d7, d7, d9
 800f43e:	ed93 4b08 	vldr	d4, [r3, #32]
 800f442:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800f446:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800f44a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800f44e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800f452:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800f456:	eea6 4b03 	vfma.f64	d4, d6, d3
 800f45a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800f45e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800f462:	eea0 4b03 	vfma.f64	d4, d0, d3
 800f466:	eea0 5b04 	vfma.f64	d5, d0, d4
 800f46a:	eeab 7b05 	vfma.f64	d7, d11, d5
 800f46e:	ee38 4b07 	vadd.f64	d4, d8, d7
 800f472:	ee21 6b04 	vmul.f64	d6, d1, d4
 800f476:	ee16 3a90 	vmov	r3, s13
 800f47a:	eeb0 5b46 	vmov.f64	d5, d6
 800f47e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800f482:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800f486:	18b2      	adds	r2, r6, r2
 800f488:	2a3e      	cmp	r2, #62	@ 0x3e
 800f48a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800f48e:	ee38 8b44 	vsub.f64	d8, d8, d4
 800f492:	ee38 8b07 	vadd.f64	d8, d8, d7
 800f496:	eea1 5b08 	vfma.f64	d5, d1, d8
 800f49a:	d91b      	bls.n	800f4d4 <pow+0x30c>
 800f49c:	2a00      	cmp	r2, #0
 800f49e:	da0b      	bge.n	800f4b8 <pow+0x2f0>
 800f4a0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f4a4:	ee36 0b00 	vadd.f64	d0, d6, d0
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	f43f aef8 	beq.w	800f29e <pow+0xd6>
 800f4ae:	eeb1 0b40 	vneg.f64	d0, d0
 800f4b2:	e6f4      	b.n	800f29e <pow+0xd6>
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	e77e      	b.n	800f3b6 <pow+0x1ee>
 800f4b8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800f4bc:	d909      	bls.n	800f4d2 <pow+0x30a>
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f6bf af64 	bge.w	800f38c <pow+0x1c4>
 800f4c4:	b007      	add	sp, #28
 800f4c6:	ecbd 8b0a 	vpop	{d8-d12}
 800f4ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ce:	f000 b8eb 	b.w	800f6a8 <__math_uflow>
 800f4d2:	2600      	movs	r6, #0
 800f4d4:	4936      	ldr	r1, [pc, #216]	@ (800f5b0 <pow+0x3e8>)
 800f4d6:	ed91 4b02 	vldr	d4, [r1, #8]
 800f4da:	ed91 3b00 	vldr	d3, [r1]
 800f4de:	eeb0 7b44 	vmov.f64	d7, d4
 800f4e2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800f4e6:	ee17 5a10 	vmov	r5, s14
 800f4ea:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f4ee:	ed91 4b04 	vldr	d4, [r1, #16]
 800f4f2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800f4f6:	eea7 6b04 	vfma.f64	d6, d7, d4
 800f4fa:	ed91 4b06 	vldr	d4, [r1, #24]
 800f4fe:	18dc      	adds	r4, r3, r3
 800f500:	f104 030f 	add.w	r3, r4, #15
 800f504:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800f508:	eea7 6b04 	vfma.f64	d6, d7, d4
 800f50c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800f510:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f514:	ee25 6b05 	vmul.f64	d6, d5, d5
 800f518:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800f51c:	ed91 4b08 	vldr	d4, [r1, #32]
 800f520:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f524:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800f528:	eea5 4b03 	vfma.f64	d4, d5, d3
 800f52c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800f530:	eea6 7b04 	vfma.f64	d7, d6, d4
 800f534:	ee26 6b06 	vmul.f64	d6, d6, d6
 800f538:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800f53c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800f540:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800f544:	eea5 4b03 	vfma.f64	d4, d5, d3
 800f548:	1940      	adds	r0, r0, r5
 800f54a:	2700      	movs	r7, #0
 800f54c:	eb17 020c 	adds.w	r2, r7, ip
 800f550:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800f554:	eea6 7b04 	vfma.f64	d7, d6, d4
 800f558:	2e00      	cmp	r6, #0
 800f55a:	d175      	bne.n	800f648 <pow+0x480>
 800f55c:	42bd      	cmp	r5, r7
 800f55e:	db29      	blt.n	800f5b4 <pow+0x3ec>
 800f560:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800f564:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800f568:	4610      	mov	r0, r2
 800f56a:	ec41 0b10 	vmov	d0, r0, r1
 800f56e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800f572:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f590 <pow+0x3c8>
 800f576:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f57a:	b007      	add	sp, #28
 800f57c:	ecbd 8b0a 	vpop	{d8-d12}
 800f580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	f000 b8d0 	b.w	800f728 <__math_check_oflow>
 800f588:	00000000 	.word	0x00000000
 800f58c:	43300000 	.word	0x43300000
 800f590:	00000000 	.word	0x00000000
 800f594:	7f000000 	.word	0x7f000000
 800f598:	3ff00000 	.word	0x3ff00000
 800f59c:	fff00000 	.word	0xfff00000
 800f5a0:	ffe00000 	.word	0xffe00000
 800f5a4:	7fe00000 	.word	0x7fe00000
 800f5a8:	c0196aab 	.word	0xc0196aab
 800f5ac:	0800fc28 	.word	0x0800fc28
 800f5b0:	08010c70 	.word	0x08010c70
 800f5b4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800f5b8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800f5bc:	4610      	mov	r0, r2
 800f5be:	ec41 0b15 	vmov	d5, r0, r1
 800f5c2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800f5c6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800f5ca:	ee35 7b06 	vadd.f64	d7, d5, d6
 800f5ce:	eeb0 4bc7 	vabs.f64	d4, d7
 800f5d2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800f658 <pow+0x490>
 800f5de:	d52a      	bpl.n	800f636 <pow+0x46e>
 800f5e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f5e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ec:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f5f0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800f5f4:	bf58      	it	pl
 800f5f6:	eeb0 4b43 	vmovpl.f64	d4, d3
 800f5fa:	ee37 3b04 	vadd.f64	d3, d7, d4
 800f5fe:	ee34 6b43 	vsub.f64	d6, d4, d3
 800f602:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f606:	ee36 6b05 	vadd.f64	d6, d6, d5
 800f60a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800f60e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800f612:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f61a:	d104      	bne.n	800f626 <pow+0x45e>
 800f61c:	4632      	mov	r2, r6
 800f61e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f622:	ec43 2b17 	vmov	d7, r2, r3
 800f626:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f62a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f62e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800f632:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f636:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f63a:	b007      	add	sp, #28
 800f63c:	ecbd 8b0a 	vpop	{d8-d12}
 800f640:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f644:	f000 b867 	b.w	800f716 <__math_check_uflow>
 800f648:	ec43 2b10 	vmov	d0, r2, r3
 800f64c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800f650:	e625      	b.n	800f29e <pow+0xd6>
 800f652:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800f660 <pow+0x498>
 800f656:	e622      	b.n	800f29e <pow+0xd6>
 800f658:	00000000 	.word	0x00000000
 800f65c:	00100000 	.word	0x00100000
	...

0800f668 <with_errno>:
 800f668:	b510      	push	{r4, lr}
 800f66a:	ed2d 8b02 	vpush	{d8}
 800f66e:	eeb0 8b40 	vmov.f64	d8, d0
 800f672:	4604      	mov	r4, r0
 800f674:	f7fc fb2e 	bl	800bcd4 <__errno>
 800f678:	eeb0 0b48 	vmov.f64	d0, d8
 800f67c:	ecbd 8b02 	vpop	{d8}
 800f680:	6004      	str	r4, [r0, #0]
 800f682:	bd10      	pop	{r4, pc}

0800f684 <xflow>:
 800f684:	b082      	sub	sp, #8
 800f686:	b158      	cbz	r0, 800f6a0 <xflow+0x1c>
 800f688:	eeb1 7b40 	vneg.f64	d7, d0
 800f68c:	ed8d 7b00 	vstr	d7, [sp]
 800f690:	ed9d 7b00 	vldr	d7, [sp]
 800f694:	2022      	movs	r0, #34	@ 0x22
 800f696:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f69a:	b002      	add	sp, #8
 800f69c:	f7ff bfe4 	b.w	800f668 <with_errno>
 800f6a0:	eeb0 7b40 	vmov.f64	d7, d0
 800f6a4:	e7f2      	b.n	800f68c <xflow+0x8>
	...

0800f6a8 <__math_uflow>:
 800f6a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f6b0 <__math_uflow+0x8>
 800f6ac:	f7ff bfea 	b.w	800f684 <xflow>
 800f6b0:	00000000 	.word	0x00000000
 800f6b4:	10000000 	.word	0x10000000

0800f6b8 <__math_oflow>:
 800f6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f6c0 <__math_oflow+0x8>
 800f6bc:	f7ff bfe2 	b.w	800f684 <xflow>
 800f6c0:	00000000 	.word	0x00000000
 800f6c4:	70000000 	.word	0x70000000

0800f6c8 <__math_divzero>:
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800f6d0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800f6d4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800f6d8:	ed8d 7b00 	vstr	d7, [sp]
 800f6dc:	ed9d 0b00 	vldr	d0, [sp]
 800f6e0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800f6f0 <__math_divzero+0x28>
 800f6e4:	2022      	movs	r0, #34	@ 0x22
 800f6e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800f6ea:	b002      	add	sp, #8
 800f6ec:	f7ff bfbc 	b.w	800f668 <with_errno>
	...

0800f6f8 <__math_invalid>:
 800f6f8:	eeb0 7b40 	vmov.f64	d7, d0
 800f6fc:	eeb4 7b47 	vcmp.f64	d7, d7
 800f700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f704:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f708:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f70c:	d602      	bvs.n	800f714 <__math_invalid+0x1c>
 800f70e:	2021      	movs	r0, #33	@ 0x21
 800f710:	f7ff bfaa 	b.w	800f668 <with_errno>
 800f714:	4770      	bx	lr

0800f716 <__math_check_uflow>:
 800f716:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71e:	d102      	bne.n	800f726 <__math_check_uflow+0x10>
 800f720:	2022      	movs	r0, #34	@ 0x22
 800f722:	f7ff bfa1 	b.w	800f668 <with_errno>
 800f726:	4770      	bx	lr

0800f728 <__math_check_oflow>:
 800f728:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800f748 <__math_check_oflow+0x20>
 800f72c:	eeb0 7bc0 	vabs.f64	d7, d0
 800f730:	eeb4 7b46 	vcmp.f64	d7, d6
 800f734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f738:	dd02      	ble.n	800f740 <__math_check_oflow+0x18>
 800f73a:	2022      	movs	r0, #34	@ 0x22
 800f73c:	f7ff bf94 	b.w	800f668 <with_errno>
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	f3af 8000 	nop.w
 800f748:	ffffffff 	.word	0xffffffff
 800f74c:	7fefffff 	.word	0x7fefffff

0800f750 <_init>:
 800f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f752:	bf00      	nop
 800f754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f756:	bc08      	pop	{r3}
 800f758:	469e      	mov	lr, r3
 800f75a:	4770      	bx	lr

0800f75c <_fini>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	bf00      	nop
 800f760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f762:	bc08      	pop	{r3}
 800f764:	469e      	mov	lr, r3
 800f766:	4770      	bx	lr
